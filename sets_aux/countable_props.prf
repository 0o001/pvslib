(countable_props
 (infinite_countably_infinite 0
  (infinite_countably_infinite-1 nil 3316998965
   ("" (skosimp)
    (("" (typepred "x!1")
      (("" (expand "is_countably_infinite")
        (("" (skosimp)
          (("" (typepred "f!1")
            (("" (lemma "infinite_def2" ("S" "x!1"))
              (("" (replace -3)
                (("" (assert) (("" (inst + "f!1") nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((countably_infinite_set type-eq-decl nil countability nil)
    (is_countably_infinite const-decl "bool" countability nil)
    (set type-eq-decl nil sets nil)
    (infinite_def2 formula-decl nil infinite_nat_def nil))
   nil
   (infinite_countably_infinite subtype "countable_props.x"
    "infinite_set[T]")))
 (countably_infinite_add 0
  (countably_infinite_add-1 nil 3316998965
   ("" (skolem-typepred)
    (("" (case "member(t!1, CountInf!1)")
      (("1" (forward-chain "member_add[T]") (("1" (assert) nil nil))
        nil)
       ("2" (expand* "is_countably_infinite" "member")
        (("2" (skolem-typepred)
          (("2"
            (inst +
             "LAMBDA (x: (add(t!1, CountInf!1))): IF x = t!1 THEN 0 ELSE f!1(x) + 1 ENDIF")
            (("1" (grind :if-match nil)
              (("1" (case "y!1 = 0")
                (("1" (inst + "t!1") (("1" (assert) nil nil)) nil)
                 ("2" (assert)
                  (("2" (inst - "y!1 - 1")
                    (("2" (skolem!)
                      (("2" (inst + "x!1") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst - "x1!1" "x2!1") (("2" (assert) nil nil))
                nil))
              nil)
             ("2" (skosimp :preds? t)
              (("2" (expand* "add" "member") (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (countably_infinite_set type-eq-decl nil countability nil)
    (is_countably_infinite const-decl "bool" countability nil)
    (set type-eq-decl nil sets nil))
   nil
   (countably_infinite_add subtype
    "sets[countable_props.T].add(countable_props.t, countable_props.CountInf)"
    "countably_infinite_set[T]")))
 (countable_add 0
  (countable_add-1 nil 3316998965
   ("" (skolem-typepred)
    (("" (case "member[T](t!1,Count!1)")
      (("1" (lemma "member_add[T]" ("x" "t!1" "a" "Count!1"))
        (("1" (assert) nil nil)) nil)
       ("2" (expand "is_countable")
        (("2" (skosimp)
          (("2" (typepred "f!1")
            (("2"
              (inst +
               "lambda (x:(add[T](t!1, Count!1))): if x = t!1 then 0 else f!1(x)+1 endif")
              (("1" (expand "injective?")
                (("1" (skosimp)
                  (("1" (typepred "x1!1")
                    (("1" (typepred "x2!1")
                      (("1" (expand "add")
                        (("1" (split)
                          (("1" (expand "member")
                            (("1" (assert) nil nil)) nil)
                           ("2" (assert)
                            (("2" (expand "member")
                              (("2"
                                (assert)
                                (("2"
                                  (split)
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (inst - "x1!1" "x2!1")
                                    (("2"
                                      (case-replace "x1!1 = t!1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp)
                (("2" (typepred "x!1")
                  (("2" (expand "add")
                    (("2" (assert)
                      (("2" (expand "member") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (countable_set nonempty-type-eq-decl nil countability nil)
    (is_countable const-decl "bool" countability nil)
    (set type-eq-decl nil sets nil))
   nil
   (countable_add subtype
    "sets[countable_props.T].add(countable_props.t, countable_props.Count)"
    "countable_set[T]")))
 (countably_infinite_remove 0
  (countably_infinite_remove-1 nil 3316998965
   ("" (skolem-typepred)
    (("" (case "member(t!1, CountInf!1)")
      (("1" (expand "is_countably_infinite")
        (("1" (skolem-typepred)
          (("1"
            (inst +
             "LAMBDA (x: (remove(t!1, CountInf!1))): IF f!1(x) <= f!1(t!1) THEN f!1(x) ELSE f!1(x) - 1 ENDIF")
            (("1" (grind :if-match nil)
              (("1" (case "y!1 < f!1(t!1)")
                (("1" (inst - "y!1")
                  (("1" (skolem!)
                    (("1" (assert)
                      (("1" (inst + "x!1") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst - "1 + y!1")
                  (("2" (skolem!)
                    (("2" (assert)
                      (("2" (inst + "x!1") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst - "x1!1" "x2!1") (("2" (assert) nil nil))
                nil)
               ("3" (inst - "x1!1" "t!1") (("3" (assert) nil nil)) nil)
               ("4" (inst - "t!1" "x2!1") (("4" (assert) nil nil)) nil)
               ("5" (inst - "x1!1" "x2!1") (("5" (assert) nil nil))
                nil))
              nil)
             ("2" (skosimp :preds? t)
              (("2" (expand* "remove" "member")
                (("2" (assert) nil nil)) nil))
              nil)
             ("3" (skosimp :preds? t)
              (("3" (expand* "remove" "member")
                (("3" (flatten) nil nil)) nil))
              nil)
             ("4" (skosimp :preds? t)
              (("4" (expand* "remove" "member")
                (("4" (flatten) nil nil)) nil))
              nil)
             ("5" (skolem-typepred)
              (("5" (expand* "remove" "member") nil nil)) nil)
             ("6" (skolem-typepred)
              (("6" (expand* "remove" "member")
                (("6" (flatten) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (forward-chain "member_remove[T]") (("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (countably_infinite_set type-eq-decl nil countability nil)
    (is_countably_infinite const-decl "bool" countability nil)
    (set type-eq-decl nil sets nil))
   nil
   (countably_infinite_remove subtype
    "sets[countable_props.T].remove(countable_props.t, countable_props.CountInf)"
    "countably_infinite_set[T]")))
 (countable_remove 0
  (countable_remove-1 nil 3316998965
   ("" (skosimp)
    (("" (typepred "Count!1")
      (("" (lemma "member_remove" ("x" "t!1" "a" "Count!1"))
        (("" (case-replace "member(t!1, Count!1)")
          (("1" (expand "is_countable")
            (("1" (skosimp)
              (("1" (typepred "f!1")
                (("1"
                  (inst +
                   "lambda (x:(remove[T](t!1, Count!1))): f!1(x)")
                  (("1" (expand "injective?")
                    (("1" (skosimp)
                      (("1" (inst - "x1!1" "x2!1")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (skosimp)
                    (("2" (typepred "x!1")
                      (("2" (expand "remove")
                        (("2" (flatten)
                          (("2" (assert)
                            (("2" (expand "member")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((countable_set nonempty-type-eq-decl nil countability nil)
    (is_countable const-decl "bool" countability nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil))
   nil
   (countable_remove subtype
    "sets[countable_props.T].remove(countable_props.t, countable_props.Count)"
    "countable_set[T]")))
 (countably_infinite_rest 0
  (countably_infinite_rest-1 nil 3316998965
   ("" (expand "rest") (("" (propax) nil nil)) nil)
   ((rest const-decl "set" sets nil)) nil
   (countably_infinite_rest subtype
    "sets[countable_props.T].rest(countable_props.CountInf)"
    "countably_infinite_set[T]")))
 (countable_rest 0
  (countable_rest-1 nil 3316998965
   ("" (expand "rest") (("" (propax) nil nil)) nil)
   ((rest const-decl "set" sets nil)) nil
   (countable_rest subtype
    "sets[countable_props.T].rest(countable_props.Count)"
    "countable_set[T]")))
 (countable_intersection1 0
  (countable_intersection1-1 nil 3316998965
   ("" (skolem-typepred)
    (("" (expand "is_countable")
      (("" (skolem-typepred)
        ((""
          (inst + "LAMBDA (x: (intersection(Count!1, S!1))): f!1(x)")
          (("1" (expand "injective?")
            (("1" (skosimp :preds? t)
              (("1" (expand* "intersection" "member")
                (("1" (flatten)
                  (("1" (inst - "x1!1" "x2!1") (("1" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (countable_set nonempty-type-eq-decl nil countability nil)
    (is_countable const-decl "bool" countability nil)
    (set type-eq-decl nil sets nil))
   nil
   (countable_intersection1 subtype
    "sets[countable_props.T].intersection(countable_props.Count, countable_props.S)"
    "countable_set[T]")))
 (countable_intersection2 0
  (countable_intersection2-1 nil 3316998965
   ("" (skolem!)
    (("" (rewrite "intersection_commutative[T]")
      (("" (assert) nil nil)) nil))
    nil)
   ((set type-eq-decl nil sets nil)
    (is_countable const-decl "bool" countability nil)
    (countable_set nonempty-type-eq-decl nil countability nil))
   nil
   (countable_intersection2 subtype
    "sets[countable_props.T].intersection(countable_props.S, countable_props.Count)"
    "countable_set[T]")))
 (countably_infinite_difference 0
  (countably_infinite_difference-1 nil 3316998965
   (""
    (case "forall (n:nat,CountInf, Fin):card(Fin) <= n =>
        is_countably_infinite[T](difference[T](CountInf, Fin))")
    (("1" (skosimp)
      (("1" (inst - "card(Fin!1)" "CountInf!1" "Fin!1")
        (("1" (assert) nil nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skosimp)
          (("1" (expand "<=")
            (("1" (split)
              (("1" (assert) nil nil)
               ("2" (lemma "card_is_0[T]" ("S" "Fin!1"))
                (("2" (replace -2)
                  (("2" (replace -1)
                    (("2" (rewrite "difference_emptyset1[T]")
                      (("2" (typepred "CountInf!1")
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp*)
          (("2" (expand "<=" -2)
            (("2" (split -2)
              (("1" (inst - "CountInf!1" "Fin!1")
                (("1" (assert) nil nil)) nil)
               ("2" (lemma "nonempty_card[T]" ("S" "Fin!1"))
                (("2" (assert)
                  (("2" (lemma "card_rest[T]" ("S" "Fin!1"))
                    (("2" (split -1)
                      (("1" (replace -3)
                        (("1" (assert)
                          (("1"
                            (inst -
                             "remove(choose[T](Fin!1),CountInf!1)"
                             "rest(Fin!1)")
                            (("1" (assert)
                              (("1"
                                (case-replace
                                 "(difference[T](remove(choose[T](Fin!1), CountInf!1), rest(Fin!1)))=(difference[T](CountInf!1, Fin!1))")
                                (("1"
                                  (hide -1 -3 -4 2)
                                  (("1"
                                    (apply-extensionality :hide? t)
                                    (("1"
                                      (expand "difference")
                                      (("1"
                                        (expand "rest")
                                        (("1"
                                          (expand "nonempty?")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "member")
                                              (("1"
                                                (expand "remove")
                                                (("1"
                                                  (expand "member")
                                                  (("1"
                                                    (case-replace
                                                     "CountInf!1(x!1)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case-replace
                                                         "Fin!1(x!1)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (flatten)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "nonempty?")
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil) (rest const-decl "set" sets nil)
    (card_rest formula-decl nil finite_sets nil)
    (nonempty_card formula-decl nil finite_sets nil)
    (card_is_0 formula-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_countably_infinite const-decl "bool" countability nil)
    (countably_infinite_set type-eq-decl nil countability nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (difference const-decl "set" sets nil))
   nil
   (countably_infinite_difference subtype
    "sets[countable_props.T].difference(countable_props.CountInf, countable_props.Fin)"
    "countably_infinite_set[T]")))
 (countable_difference 0
  (countable_difference-1 nil 3316998965
   ("" (grind :if-match nil)
    (("" (inst + "LAMBDA (x: (difference[T](Count!1, S!1))): f!1(x)")
      (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
    nil)
   ((difference const-decl "set" sets nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (countable_set nonempty-type-eq-decl nil countability nil)
    (is_countable const-decl "bool" countability nil))
   nil
   (countable_difference subtype
    "sets[countable_props.T].difference(countable_props.Count, countable_props.S)"
    "countable_set[T]")))
 (finite_countable 0
  (finite_countable-1 nil 3316998965 ("" (judgement-tcc) nil nil)
   ((set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_countable const-decl "bool" countability nil))
   nil
   (finite_countable subtype "countable_props.x" "countable_set[T]")))
 (infinite_uncountable 0
  (infinite_uncountable-1 nil 3316998965 ("" (judgement-tcc) nil nil)
   ((set type-eq-decl nil sets nil)
    (is_countable const-decl "bool" countability nil)
    (uncountable_set type-eq-decl nil countability nil)
    (is_finite const-decl "bool" finite_sets nil))
   nil
   (infinite_uncountable subtype "countable_props.x"
    "infinite_set[T]")))
 (countably_infinite_subset_exists 0
  (countably_infinite_subset_exists-1 nil 3317000413
   ("" (skolem + "X!1")
    (("" (typepred "X!1")
      (("" (lemma "infinite_def" ("X" "X!1"))
        (("" (replace 1)
          (("" (flatten)
            (("" (skosimp)
              (("" (typepred "f!1")
                ((""
                  (lemma "bijective_image[nat, (X!1)]" ("inj" "f!1"))
                  ((""
                    (lemma
                     "bij_inv_is_bij[nat, ((image(f!1, fullset[nat])))]"
                     ("f" "f!1"))
                    (("" (assert)
                      ((""
                        (inst + "image[nat,(X!1)](f!1, fullset[nat])")
                        (("1" (expand "subset?")
                          (("1" (expand "member")
                            (("1" (expand "extend")
                              (("1"
                                (hide-all-but 2)
                                (("1"
                                  (skosimp)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "extend")
                          (("2" (expand "is_countably_infinite")
                            (("2"
                              (inst +
                               "inverse[nat, ((image[nat, (X!1)](f!1, fullset[nat])))](f!1)")
                              (("2"
                                (split)
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (lift-if 1)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-1 1))
                                  (("2"
                                    (expand "bijective?" :assert? none)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (split)
                                        (("1"
                                          (expand "injective?")
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (inst -2 "x1!1" "x2!1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "surjective?")
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (inst - "y!1")
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (inst + "x!1")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((infinite_set type-eq-decl nil infinite_sets_def nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (countably_infinite_set type-eq-decl nil countability nil)
    (is_countably_infinite const-decl "bool" countability nil)
    (fullset const-decl "set" sets nil)
    (infinite_def formula-decl nil infinite_nat_def nil))
   shostak))
 (countably_infinite_strict_subset_exists 0
  (countably_infinite_strict_subset_exists-2 "" 3790091321
   ("" (skolem!)
    (("" (use "countably_infinite_subset_exists")
      (("" (skolem-typepred)
        (("" (use "infinite_nonempty[T]")
          (("" (expand* "nonempty?" "empty?" "member")
            (("" (skolem!)
              (("" (inst + "remove(x!1, CountInf!1)")
                (("" (expand* "strict_subset?" "subset?" "member")
                  (("" (split)
                    (("1" (expand* "remove" "member")
                      (("1" (skosimp)
                        (("1" (inst - "x!2") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (decompose-equality)
                      (("2" (expand* "remove" "member")
                        (("2" (inst - "x!1")
                          (("2" (inst - "x!1") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (countably_infinite_strict_subset_exists-1 nil 3317000591
   ("" (skolem!)
    (("" (use "countably_infinite_subset_exists")
      (("" (skolem-typepred)
        (("" (use "infinite_nonempty[T]")
          (("" (expand* "nonempty?" "empty?" "member")
            (("" (skolem!)
              (("" (inst + "remove(x!1, CountInf!1)")
                (("1" (expand* "strict_subset?" "subset?" "member")
                  (("1" (split)
                    (("1" (expand* "remove" "member")
                      (("1" (skosimp)
                        (("1" (inst - "x!2") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (decompose-equality)
                      (("2" (expand* "remove" "member")
                        (("2" (inst - "x!1")
                          (("2" (inst - "x!1") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (lemma "countably_infinite_subset[T]"
                   ("CountInf" "CountInf!1" "Inf"
                    "remove(x!1, CountInf!1)"))
                  (("2" (assert)
                    (("2" (expand* "subset?" "remove" "member")
                      (("2" (skosimp) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((infinite_set type-eq-decl nil infinite_sets_def nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (infinite_nonempty judgement-tcc nil infinite_sets_def nil)
    (subset? const-decl "bool" sets nil)
    (strict_subset? const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (is_countably_infinite const-decl "bool" countability nil)
    (countably_infinite_set type-eq-decl nil countability nil))
   shostak))
 (uncountable_subset 0
  (uncountable_subset-1 nil 3831454978
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (expand "is_countable")
        (("" (skolem-typepred)
          (("" (inst 1 "lambda (x:(Uncount!1)): f!1(x)")
            (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (injective? const-decl "bool" functions nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (f!1 skolem-const-decl "(injective?[(R!1), nat])" countable_props
     nil)
    (Uncount!1 skolem-const-decl "uncountable_set[T]" countable_props
     nil)
    (R!1 skolem-const-decl "set[T]" countable_props nil)
    (uncountable_set type-eq-decl nil countability nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (is_countable const-decl "bool" countability nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil countable_props nil))
   shostak))
 (countable_card 0
  (countable_card-2 "" 3757780436
   ("" (skosimp)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "is_countable")
          (("1" (skosimp)
            (("1" (typepred "f!1")
              (("1" (expand "is_countably_infinite")
                (("1"
                  (case "is_finite[nat](image(f!1, fullset[(S!1)]))")
                  (("1" (assert)
                    (("1" (hide 2 3)
                      (("1" (expand "fullset")
                        (("1" (expand "is_finite")
                          (("1" (skosimp)
                            (("1" (inst + "N!1" "f!2 o f!1")
                              (("1"
                                (expand "injective?")
                                (("1"
                                  (expand "o ")
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (typepred "x1!1")
                                      (("1"
                                        (typepred "x2!1")
                                        (("1"
                                          (inst -4 "x1!1" "x2!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               -
                                               "f!1(x1!1)"
                                               "f!1(x2!1)")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp)
                                (("2"
                                  (expand "image")
                                  (("2"
                                    (typepred "x1!1")
                                    (("2" (inst + "x1!1") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "nonempty?(S!1)")
                    (("1"
                      (lemma "bijective_image[(S!1), nat]"
                       ("inj" "f!1"))
                      (("1"
                        (case "exists (phi:(bijective?[nat,(image(f!1, fullset[(S!1)]))])):TRUE")
                        (("1" (skosimp)
                          (("1" (typepred "phi!1")
                            (("1"
                              (lemma
                               "bijective_inverse_exists[nat, (image(f!1, fullset[(S!1)]))]"
                               ("f" "phi!1"))
                              (("1"
                                (expand "exists1")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (skolem - "psi!1")
                                    (("1"
                                      (hide -2)
                                      (("1"
                                        (lemma
                                         "bij_inv_is_bij_alt[nat, (image(f!1, fullset[(S!1)]))]"
                                         ("f" "phi!1" "g" "psi!1"))
                                        (("1"
                                          (inst + "psi!1 o f!1")
                                          (("1"
                                            (hide-all-but (-1 -4 1))
                                            (("1"
                                              (expand "bijective?")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (expand "o")
                                                    (("1"
                                                      (expand
                                                       "injective?")
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (inst
                                                           -
                                                           "f!1(x1!1)"
                                                           "f!1(x2!1)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (typepred
                                                               "f!1")
                                                              (("1"
                                                                (expand
                                                                 "injective?")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "o")
                                                    (("2"
                                                      (expand
                                                       "surjective?")
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (inst
                                                           -2
                                                           "y!1")
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (typepred
                                                               "x!1")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "x!1")
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (inst
                                                                     +
                                                                     "x!2")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -1 4)
                          (("2"
                            (name "REMOVE_MIN"
                                  "lambda (X:infinite_set[nat]): remove(min(X),X)")
                            (("2"
                              (case "forall (X: infinite_set[nat]): strict_subset?(REMOVE_MIN(X),X)")
                              (("1"
                                (name
                                 "GG"
                                 "lambda (n:nat): iterate(REMOVE_MIN,n)(image[(S!1), nat](f!1, fullset[(S!1)]))")
                                (("1"
                                  (case
                                   "FORALL (X: infinite_set[nat]): min[nat](X)<min[nat](REMOVE_MIN(X))")
                                  (("1"
                                    (name
                                     "FF"
                                     "lambda (n:nat): min[nat](GG(n))")
                                    (("1"
                                      (case
                                       "forall (n:nat): subset?(GG(n),image(f!1, fullset[(S!1)]))")
                                      (("1"
                                        (case
                                         "forall (n:nat): image(f!1, fullset[(S!1)])(FF(n))")
                                        (("1"
                                          (case
                                           "forall (i,j:nat): i<j => FF(i)<FF(j)")
                                          (("1"
                                            (case
                                             "forall (n:nat): n <= FF(n)")
                                            (("1"
                                              (case
                                               "forall (n:(image(f!1, fullset[(S!1)]))): exists (k:nat): FF(k)=n")
                                              (("1"
                                                (inst + "FF")
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "bijective?")
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (expand
                                                         "injective?")
                                                        (("1"
                                                          (skolem
                                                           +
                                                           ("i!1"
                                                            "j!1"))
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (lemma
                                                               "trich_lt"
                                                               ("x"
                                                                "i!1"
                                                                "y"
                                                                "j!1"))
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (inst
                                                                   -5
                                                                   "i!1"
                                                                   "j!1")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (inst
                                                                   -5
                                                                   "j!1"
                                                                   "i!1")
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "surjective?")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (case
                                                   "forall (i,n,k:nat): image(f!1, fullset[(S!1)])(k) & FF(i)<=k & k<=FF(i+n) => exists (j:nat): FF(j) = k")
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (inst-cp
                                                       -2
                                                       "n!1")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "0"
                                                         "FF(n!1)"
                                                         "n!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1 3))
                                                              (("2"
                                                                (expand
                                                                 "FF")
                                                                (("2"
                                                                  (expand
                                                                   "GG")
                                                                  (("2"
                                                                    (expand
                                                                     "REMOVE_MIN")
                                                                    (("2"
                                                                      (expand
                                                                       "iterate")
                                                                      (("2"
                                                                        (typepred
                                                                         "n!1")
                                                                        (("2"
                                                                          (typepred
                                                                           "min[nat](image[(S!1), nat](f!1, fullset[(S!1)]))")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "n!1")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (expand
                                                               "<="
                                                               -2)
                                                              (("3"
                                                                (split)
                                                                (("1"
                                                                  (inst
                                                                   -3
                                                                   "n!1"
                                                                   "FF(n!1)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   -1
                                                                   *
                                                                   rl)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (induct "n")
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (inst
                                                           +
                                                           "i!1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (expand
                                                           "<="
                                                           -3)
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (inst
                                                               -2
                                                               "i!1+1"
                                                               "k!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split
                                                                   -2)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2
                                                                     4)
                                                                    (("2"
                                                                      (case
                                                                       "k!1<FF(1 + i!1)")
                                                                      (("1"
                                                                        (hide
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "FF")
                                                                          (("1"
                                                                            (hide
                                                                             -5
                                                                             -4
                                                                             -9
                                                                             -11
                                                                             -15)
                                                                            (("1"
                                                                              (typepred
                                                                               "min[nat](GG(1 + i!1))")
                                                                              (("1"
                                                                                (inst
                                                                                 -2
                                                                                 "k!1")
                                                                                (("1"
                                                                                  (split
                                                                                   -2)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "forall (n:nat): min[nat](GG(n)) < k!1 => GG(n+1)(k!1)")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "i!1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2
                                                                                       -1
                                                                                       -2
                                                                                       -3)
                                                                                      (("2"
                                                                                        (induct
                                                                                         "n")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "0"
                                                                                             "1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "GG")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "iterate")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "REMOVE_MIN")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "iterate")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "remove")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "member")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst-cp
                                                                                               -
                                                                                               "j!2"
                                                                                               "1+j!2")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "GG")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "iterate"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "REMOVE_MIN"
                                                                                                         1
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "remove"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "member")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               +
                                                               "i!1")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-1 1))
                                              (("2"
                                                (induct "n")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (skosimp)
                                                  (("2"
                                                    (inst
                                                     -
                                                     "j!1"
                                                     "j!1+1")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-4 1))
                                            (("2"
                                              (case
                                               "forall (i,n:nat): FF(i)< FF(i+1+n)")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (inst
                                                   -
                                                   "i!1"
                                                   "j!1-i!1-1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (induct "n")
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (expand "FF")
                                                      (("1"
                                                        (expand "GG")
                                                        (("1"
                                                          (expand
                                                           "iterate"
                                                           1
                                                           2)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "iterate(REMOVE_MIN, i!1)
                                            (image[(S!1), nat](f!1, fullset[(S!1)]))")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp)
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (inst - "i!1")
                                                        (("2"
                                                          (name-replace
                                                           "LHS"
                                                           "FF(i!1)")
                                                          (("2"
                                                            (expand
                                                             "FF")
                                                            (("2"
                                                              (expand
                                                               "GG")
                                                              (("2"
                                                                (expand
                                                                 "iterate"
                                                                 1)
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "iterate(REMOVE_MIN, 1 + i!1 + j!1)
                                             (image[(S!1), nat](f!1, fullset[(S!1)]))")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-1 1))
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (expand "FF")
                                              (("2"
                                                (typepred
                                                 "min[nat](GG(n!1))")
                                                (("2"
                                                  (inst -3 "n!1")
                                                  (("2"
                                                    (expand "subset?")
                                                    (("2"
                                                      (inst
                                                       -3
                                                       "min[nat](GG(n!1))")
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-4 1))
                                        (("2"
                                          (induct "n")
                                          (("1"
                                            (expand "GG")
                                            (("1"
                                              (expand "iterate")
                                              (("1"
                                                (expand "subset?")
                                                (("1"
                                                  (skosimp)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp)
                                            (("2"
                                              (expand "strict_subset?")
                                              (("2"
                                                (expand "GG")
                                                (("2"
                                                  (expand "iterate" 1)
                                                  (("2"
                                                    (inst
                                                     -
                                                     "iterate(REMOVE_MIN, j!1)
                                                    (image[(S!1), nat](f!1, fullset[(S!1)]))")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (expand
                                                           "subset?")
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "x!1")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "x!1")
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp)
                                    (("2"
                                      (hide-all-but (-2 1))
                                      (("2"
                                        (typepred "min[nat](X!1)")
                                        (("2"
                                          (expand "REMOVE_MIN")
                                          (("2"
                                            (typepred
                                             "min[nat](remove(min(X!1), X!1))")
                                            (("2"
                                              (expand "remove" -1 1)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (expand "member")
                                                  (("2"
                                                    (inst
                                                     -4
                                                     "min[nat](remove(min(X!1), X!1))")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (expand "REMOVE_MIN")
                                    (("2"
                                      (expand "strict_subset?")
                                      (("2"
                                        (typepred "min(X!1)")
                                        (("2"
                                          (expand "remove")
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (split)
                                              (("1"
                                                (expand "subset?")
                                                (("1"
                                                  (skolem + ("n!1"))
                                                  (("1"
                                                    (expand "member")
                                                    (("1"
                                                      (typepred "n!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case-replace
                                                           "min(X!1)=n!1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (flatten)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "/=" 1)
                                                (("2"
                                                  (replace -1 -2 rl)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "nonempty?")
                      (("2" (lemma "infinite_nonempty[T]")
                        (("2" (inst - "S!1")
                          (("2" (expand "nonempty?")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (split)
          (("1" (expand "is_countable")
            (("1" (expand "is_finite")
              (("1" (skosimp) (("1" (inst + "f!1") nil nil)) nil))
              nil))
            nil)
           ("2" (expand "is_countably_infinite")
            (("2" (expand "is_countable")
              (("2" (skosimp)
                (("2" (typepred "f!1") (("2" (inst + "f!1") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((is_countable const-decl "bool" countability nil)
    (set type-eq-decl nil sets nil) (fullset const-decl "set" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (infinite_nonempty judgement-tcc nil infinite_sets_def nil)
    (strict_subset? const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (infinite_set type-eq-decl nil infinite_sets_def nil)
    (nonempty? const-decl "bool" sets nil)
    (is_countably_infinite const-decl "bool" countability nil))
   shostak)
  (countable_card-1 nil 3317002096
   ("" (skosimp)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "is_countable")
          (("1" (skosimp)
            (("1" (typepred "f!1")
              (("1" (expand "is_countably_infinite")
                (("1"
                  (case "is_finite[nat](image(f!1, fullset[(S!1)]))")
                  (("1" (assert)
                    (("1" (hide 2 3)
                      (("1" (expand "fullset")
                        (("1" (expand "is_finite")
                          (("1" (skosimp)
                            (("1" (inst + "N!1" "f!2 o f!1")
                              (("1"
                                (expand "injective?")
                                (("1"
                                  (expand "o ")
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (typepred "x1!1")
                                      (("1"
                                        (typepred "x2!1")
                                        (("1"
                                          (inst -4 "x1!1" "x2!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               -
                                               "f!1(x1!1)"
                                               "f!1(x2!1)")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skosimp)
                                (("2"
                                  (expand "image")
                                  (("2"
                                    (typepred "x1!1")
                                    (("2" (inst + "x1!1") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "nonempty?(S!1)")
                    (("1"
                      (lemma "bijective_image[(S!1), nat]"
                       ("inj" "f!1"))
                      (("1"
                        (case "exists (phi:(bijective?[nat,(image(f!1, fullset[(S!1)]))])):TRUE")
                        (("1" (skosimp)
                          (("1" (typepred "phi!1")
                            (("1"
                              (lemma
                               "bijective_inverse_exists[nat, (image(f!1, fullset[(S!1)]))]"
                               ("f" "phi!1"))
                              (("1"
                                (expand "exists1")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (skolem - "psi!1")
                                    (("1"
                                      (hide -2)
                                      (("1"
                                        (lemma
                                         "bij_inv_is_bij_alt[nat, (image(f!1, fullset[(S!1)]))]"
                                         ("f" "phi!1" "g" "psi!1"))
                                        (("1"
                                          (inst + "psi!1 o f!1")
                                          (("1"
                                            (hide-all-but (-1 -4 1))
                                            (("1"
                                              (expand "bijective?")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (expand "o")
                                                    (("1"
                                                      (expand
                                                       "injective?")
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (inst
                                                           -4
                                                           "x1!1"
                                                           "x2!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -
                                                               "f!1(x1!1)"
                                                               "f!1(x2!1)")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "o")
                                                    (("2"
                                                      (expand
                                                       "surjective?")
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (inst
                                                           -2
                                                           "y!1")
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (typepred
                                                               "x!1")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "x!1")
                                                                (("2"
                                                                  (skosimp)
                                                                  (("2"
                                                                    (inst
                                                                     +
                                                                     "x!2")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -1 4)
                          (("2"
                            (name "REMOVE_MIN"
                                  "lambda (X:infinite_set[nat]): remove(min(X),X)")
                            (("2"
                              (case "forall (X: infinite_set[nat]): strict_subset?(REMOVE_MIN(X),X)")
                              (("1"
                                (name
                                 "GG"
                                 "lambda (n:nat): iterate(REMOVE_MIN,n)(image[(S!1), nat](f!1, fullset[(S!1)]))")
                                (("1"
                                  (case
                                   "FORALL (X: infinite_set[nat]): min[nat](X)<min[nat](REMOVE_MIN(X))")
                                  (("1"
                                    (name
                                     "FF"
                                     "lambda (n:nat): min[nat](GG(n))")
                                    (("1"
                                      (case
                                       "forall (n:nat): subset?(GG(n),image(f!1, fullset[(S!1)]))")
                                      (("1"
                                        (case
                                         "forall (n:nat): image(f!1, fullset[(S!1)])(FF(n))")
                                        (("1"
                                          (case
                                           "forall (i,j:nat): i<j => FF(i)<FF(j)")
                                          (("1"
                                            (case
                                             "forall (n:nat): n <= FF(n)")
                                            (("1"
                                              (case
                                               "forall (n:(image(f!1, fullset[(S!1)]))): exists (k:nat): FF(k)=n")
                                              (("1"
                                                (inst + "FF")
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "bijective?")
                                                    (("2"
                                                      (split)
                                                      (("1"
                                                        (expand
                                                         "injective?")
                                                        (("1"
                                                          (skolem
                                                           +
                                                           ("i!1"
                                                            "j!1"))
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (lemma
                                                               "trich_lt"
                                                               ("x"
                                                                "i!1"
                                                                "y"
                                                                "j!1"))
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (inst
                                                                   -5
                                                                   "i!1"
                                                                   "j!1")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (inst
                                                                   -5
                                                                   "j!1"
                                                                   "i!1")
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "surjective?")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (case
                                                   "forall (i,n,k:nat): image(f!1, fullset[(S!1)])(k) & FF(i)<=k & k<=FF(i+n) => exists (j:nat): FF(j) = k")
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (inst-cp
                                                       -2
                                                       "n!1")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "0"
                                                         "FF(n!1)"
                                                         "n!1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1 3))
                                                              (("2"
                                                                (expand
                                                                 "FF")
                                                                (("2"
                                                                  (expand
                                                                   "GG")
                                                                  (("2"
                                                                    (expand
                                                                     "REMOVE_MIN")
                                                                    (("2"
                                                                      (expand
                                                                       "iterate")
                                                                      (("2"
                                                                        (typepred
                                                                         "n!1")
                                                                        (("2"
                                                                          (typepred
                                                                           "min[nat](image[(S!1), nat](f!1, fullset[(S!1)]))")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "n!1")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (expand
                                                               "<="
                                                               -2)
                                                              (("3"
                                                                (split)
                                                                (("1"
                                                                  (inst
                                                                   -3
                                                                   "n!1"
                                                                   "FF(n!1)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   -1
                                                                   *
                                                                   rl)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (induct "n")
                                                      (("1"
                                                        (skosimp)
                                                        (("1"
                                                          (inst
                                                           +
                                                           "i!1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skosimp*)
                                                        (("2"
                                                          (expand
                                                           "<="
                                                           -3)
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (inst
                                                               -2
                                                               "i!1+1"
                                                               "k!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split
                                                                   -2)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2
                                                                     4)
                                                                    (("2"
                                                                      (case
                                                                       "k!1<FF(1 + i!1)")
                                                                      (("1"
                                                                        (hide
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "FF")
                                                                          (("1"
                                                                            (hide
                                                                             -5
                                                                             -4
                                                                             -9
                                                                             -11
                                                                             -15)
                                                                            (("1"
                                                                              (typepred
                                                                               "min[nat](GG(1 + i!1))")
                                                                              (("1"
                                                                                (inst
                                                                                 -2
                                                                                 "k!1")
                                                                                (("1"
                                                                                  (split
                                                                                   -2)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "forall (n:nat): min[nat](GG(n)) < k!1 => GG(n+1)(k!1)")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "i!1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2
                                                                                       -1
                                                                                       -2
                                                                                       -3)
                                                                                      (("2"
                                                                                        (induct
                                                                                         "n")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "0"
                                                                                             "1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "GG")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "iterate")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "REMOVE_MIN")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "iterate")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "remove")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "member")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skosimp*)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst-cp
                                                                                               -
                                                                                               "j!2"
                                                                                               "1+j!2")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "GG")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "iterate"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "REMOVE_MIN"
                                                                                                         1
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "remove"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "member")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               +
                                                               "i!1")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-1 1))
                                              (("2"
                                                (induct "n")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (skosimp)
                                                  (("2"
                                                    (inst
                                                     -
                                                     "j!1"
                                                     "j!1+1")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-4 1))
                                            (("2"
                                              (case
                                               "forall (i,n:nat): FF(i)< FF(i+1+n)")
                                              (("1"
                                                (skosimp)
                                                (("1"
                                                  (inst
                                                   -
                                                   "i!1"
                                                   "j!1-i!1-1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (induct "n")
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (expand "FF")
                                                      (("1"
                                                        (expand "GG")
                                                        (("1"
                                                          (expand
                                                           "iterate"
                                                           1
                                                           2)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "iterate(REMOVE_MIN, i!1)
                  (image[(S!1), nat](f!1, fullset[(S!1)]))")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp)
                                                    (("2"
                                                      (skosimp)
                                                      (("2"
                                                        (inst - "i!1")
                                                        (("2"
                                                          (name-replace
                                                           "LHS"
                                                           "FF(i!1)")
                                                          (("2"
                                                            (expand
                                                             "FF")
                                                            (("2"
                                                              (expand
                                                               "GG")
                                                              (("2"
                                                                (expand
                                                                 "iterate"
                                                                 1)
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "iterate(REMOVE_MIN, 1 + i!1 + j!1)
                   (image[(S!1), nat](f!1, fullset[(S!1)]))")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-1 1))
                                          (("2"
                                            (skosimp)
                                            (("2"
                                              (expand "FF")
                                              (("2"
                                                (typepred
                                                 "min[nat](GG(n!1))")
                                                (("2"
                                                  (inst -3 "n!1")
                                                  (("2"
                                                    (expand "subset?")
                                                    (("2"
                                                      (inst
                                                       -3
                                                       "min[nat](GG(n!1))")
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-4 1))
                                        (("2"
                                          (induct "n")
                                          (("1"
                                            (expand "GG")
                                            (("1"
                                              (expand "iterate")
                                              (("1"
                                                (expand "subset?")
                                                (("1"
                                                  (skosimp)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp)
                                            (("2"
                                              (expand "strict_subset?")
                                              (("2"
                                                (expand "GG")
                                                (("2"
                                                  (expand "iterate" 1)
                                                  (("2"
                                                    (inst
                                                     -
                                                     "iterate(REMOVE_MIN, j!1)
                                (image[(S!1), nat](f!1, fullset[(S!1)]))")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (expand
                                                           "subset?")
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (inst
                                                               -
                                                               "x!1")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "x!1")
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp)
                                    (("2"
                                      (hide-all-but (-2 1))
                                      (("2"
                                        (typepred "min[nat](X!1)")
                                        (("2"
                                          (expand "REMOVE_MIN")
                                          (("2"
                                            (typepred
                                             "min[nat](remove(min(X!1), X!1))")
                                            (("2"
                                              (expand "remove" -1 1)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (expand "member")
                                                  (("2"
                                                    (inst
                                                     -4
                                                     "min[nat](remove(min(X!1), X!1))")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (expand "REMOVE_MIN")
                                    (("2"
                                      (expand "strict_subset?")
                                      (("2"
                                        (typepred "min(X!1)")
                                        (("2"
                                          (expand "remove")
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (split)
                                              (("1"
                                                (expand "subset?")
                                                (("1"
                                                  (skolem + ("n!1"))
                                                  (("1"
                                                    (expand "member")
                                                    (("1"
                                                      (typepred "n!1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case-replace
                                                           "min(X!1)=n!1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (flatten)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "/=" 1)
                                                (("2"
                                                  (replace -1 -2 rl)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "nonempty?")
                      (("2" (lemma "infinite_nonempty[T]")
                        (("2" (inst - "S!1")
                          (("2" (expand "nonempty?")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (split)
          (("1" (expand "is_countable")
            (("1" (expand "is_finite")
              (("1" (skosimp)
                (("1" (inst + "f!1")
                  (("1" (expand "injective?") (("1" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "is_countably_infinite")
            (("2" (expand "is_countable")
              (("2" (skosimp)
                (("2" (typepred "f!1") (("2" (inst + "f!1") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((is_countable const-decl "bool" countability nil)
    (set type-eq-decl nil sets nil) (fullset const-decl "set" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (infinite_nonempty judgement-tcc nil infinite_sets_def nil)
    (strict_subset? const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (infinite_set type-eq-decl nil infinite_sets_def nil)
    (nonempty? const-decl "bool" sets nil)
    (is_countably_infinite const-decl "bool" countability nil))
   shostak))
 (countably_infinite_union1 0
  (countably_infinite_union1-1 nil 3316998965
   ("" (skolem + ("X!1" "Y!1"))
    (("" (typepred "X!1")
      (("" (typepred "Y!1")
        (("" (name "DD" "difference(X!1,Y!1)")
          (("" (lemma "countable_difference" ("Count" "X!1" "S" "Y!1"))
            (("" (replace -2)
              (("" (lemma "union_difference" ("a" "Y!1" "b" "X!1"))
                (("" (replace -1)
                  (("" (replace -3)
                    ((""
                      (lemma "difference_disjoint"
                       ("a" "Y!1" "b" "X!1"))
                      (("" (replace -4)
                        (("" (hide -2 -4 -6)
                          (("" (rewrite "countable_card")
                            (("" (split)
                              (("1"
                                (name "N" "card(DD)")
                                (("1"
                                  (lemma
                                   "card_bij[T]"
                                   ("N" "N" "S" "DD"))
                                  (("1"
                                    (assert)
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (expand
                                         "is_countably_infinite")
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (typepred "f!2")
                                            (("1"
                                              (inst
                                               +
                                               "lambda (x:(union(Y!1, DD))): if DD(x) then f!1(x) else N+f!2(x) endif")
                                              (("1"
                                                (expand "bijective?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (hide -2 -4)
                                                      (("1"
                                                        (expand
                                                         "injective?")
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (typepred
                                                             "x1!1")
                                                            (("1"
                                                              (typepred
                                                               "x2!1")
                                                              (("1"
                                                                (expand
                                                                 "union")
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "disjoint?")
                                                                          (("1"
                                                                            (expand
                                                                             "intersection")
                                                                            (("1"
                                                                              (expand
                                                                               "empty?")
                                                                              (("1"
                                                                                (expand
                                                                                 "member")
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -8
                                                                                   "x1!1")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -8
                                                                                     "x2!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -4
                                                                                           "x1!1"
                                                                                           "x2!1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "disjoint?")
                                                                          (("2"
                                                                            (expand
                                                                             "intersection")
                                                                            (("2"
                                                                              (expand
                                                                               "empty?")
                                                                              (("2"
                                                                                (expand
                                                                                 "member")
                                                                                (("2"
                                                                                  (inst-cp
                                                                                   -8
                                                                                   "x1!1")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -8
                                                                                     "x2!1")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (split)
                                                                      (("1"
                                                                        (expand
                                                                         "disjoint?")
                                                                        (("1"
                                                                          (expand
                                                                           "intersection")
                                                                          (("1"
                                                                            (expand
                                                                             "empty?")
                                                                            (("1"
                                                                              (expand
                                                                               "member")
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -8
                                                                                 "x1!1")
                                                                                (("1"
                                                                                  (inst
                                                                                   -8
                                                                                   "x2!1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (inst
                                                                           -5
                                                                           "x1!1"
                                                                           "x2!1")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -1 -3)
                                                      (("2"
                                                        (expand
                                                         "surjective?")
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (case
                                                             "y!1>=N")
                                                            (("1"
                                                              (inst
                                                               -2
                                                               "y!1-N")
                                                              (("1"
                                                                (skosimp)
                                                                (("1"
                                                                  (inst
                                                                   +
                                                                   "x!1")
                                                                  (("1"
                                                                    (typepred
                                                                     "x!1")
                                                                    (("1"
                                                                      (expand
                                                                       "disjoint?")
                                                                      (("1"
                                                                        (expand
                                                                         "intersection")
                                                                        (("1"
                                                                          (expand
                                                                           "empty?")
                                                                          (("1"
                                                                            (expand
                                                                             "member")
                                                                            (("1"
                                                                              (inst
                                                                               -7
                                                                               "x!1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "union")
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               -2
                                                               "y!1")
                                                              (("1"
                                                                (skosimp)
                                                                (("1"
                                                                  (inst
                                                                   +
                                                                   "x!1")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "union")
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skosimp)
                                                (("2"
                                                  (typepred "x!1")
                                                  (("2"
                                                    (expand "union")
                                                    (("2"
                                                      (expand "member")
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil)
                               ("2"
                                (expand "disjoint?")
                                (("2"
                                  (expand "intersection")
                                  (("2"
                                    (expand "empty?")
                                    (("2"
                                      (expand "member")
                                      (("2"
                                        (expand
                                         "is_countably_infinite")
                                        (("2"
                                          (skosimp*)
                                          (("2"
                                            (typepred "f!1")
                                            (("2"
                                              (typepred "f!2")
                                              (("2"
                                                (inst
                                                 +
                                                 "lambda (x:(union(Y!1, DD))): if DD(x) then 2*f!1(x) else 2*f!2(x)+1 endif")
                                                (("1"
                                                  (expand "bijective?")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (hide -2 -4)
                                                        (("1"
                                                          (expand
                                                           "injective?")
                                                          (("1"
                                                            (skosimp)
                                                            (("1"
                                                              (typepred
                                                               "x1!1")
                                                              (("1"
                                                                (typepred
                                                                 "x2!1")
                                                                (("1"
                                                                  (expand
                                                                   "union")
                                                                  (("1"
                                                                    (expand
                                                                     "member")
                                                                    (("1"
                                                                      (split)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (inst
                                                                           -4
                                                                           "x1!1"
                                                                           "x2!1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst-cp
                                                                               -5
                                                                               "x1!1")
                                                                              (("1"
                                                                                (inst
                                                                                 -5
                                                                                 "x2!1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (inst
                                                                             -6
                                                                             "x2!1")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (split)
                                                                        (("1"
                                                                          (inst
                                                                           -6
                                                                           "x1!1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (inst
                                                                             -5
                                                                             "x1!1"
                                                                             "x2!1")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -1 -3)
                                                        (("2"
                                                          (expand
                                                           "surjective?")
                                                          (("2"
                                                            (skosimp)
                                                            (("2"
                                                              (case
                                                               "even?(y!1)")
                                                              (("1"
                                                                (expand
                                                                 "even?")
                                                                (("1"
                                                                  (skosimp)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (inst
                                                                       -3
                                                                       "j!1")
                                                                      (("1"
                                                                        (skosimp)
                                                                        (("1"
                                                                          (inst
                                                                           +
                                                                           "x!1")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "union")
                                                                            (("2"
                                                                              (expand
                                                                               "member")
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (rewrite
                                                                 "even_or_odd")
                                                                (("2"
                                                                  (expand
                                                                   "odd?")
                                                                  (("2"
                                                                    (skosimp)
                                                                    (("2"
                                                                      (replace
                                                                       -1)
                                                                      (("2"
                                                                        (inst
                                                                         -2
                                                                         "j!1")
                                                                        (("1"
                                                                          (skosimp)
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "x!1")
                                                                            (("1"
                                                                              (inst
                                                                               -4
                                                                               "x!1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "union")
                                                                              (("2"
                                                                                (expand
                                                                                 "member")
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skosimp)
                                                  (("2"
                                                    (typepred "x!1")
                                                    (("2"
                                                      (expand "union")
                                                      (("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((countable_set nonempty-type-eq-decl nil countability nil)
    (is_countable const-decl "bool" countability nil)
    (set type-eq-decl nil sets nil)
    (difference const-decl "set" sets nil)
    (card_bij formula-decl nil finite_sets nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (is_countably_infinite const-decl "bool" countability nil)
    (countably_infinite_set type-eq-decl nil countability nil))
   nil
   (countably_infinite_union1 subtype
    "sets[countable_props.T].union(countable_props.CountInf, countable_props.Count)"
    "countably_infinite_set[T]")))
 (countably_infinite_union2 0
  (countably_infinite_union2-1 nil 3316998965
   ("" (skolem!)
    (("" (rewrite "union_commutative[T]") (("" (assert) nil nil)) nil))
    nil)
   ((set type-eq-decl nil sets nil)
    (is_countable const-decl "bool" countability nil)
    (countable_set nonempty-type-eq-decl nil countability nil)
    (is_countably_infinite const-decl "bool" countability nil)
    (countably_infinite_set type-eq-decl nil countability nil))
   nil
   (countably_infinite_union2 subtype
    "sets[countable_props.T].union(countable_props.Count, countable_props.CountInf)"
    "countably_infinite_set[T]")))
 (countable_union 0
  (countable_union-1 nil 3316998965
   ("" (skolem-typepred)
    (("" (auto-rewrite "countable_card")
      (("" (smash)
        (("1" (use "finite_union[T]") nil nil)
         ("2" (use "countably_infinite_union2") nil nil)
         ("3" (use "countably_infinite_union1") nil nil)
         ("4" (use "countably_infinite_union1") nil nil))
        nil))
      nil))
    nil)
   ((is_countably_infinite const-decl "bool" countability nil)
    (countably_infinite_set type-eq-decl nil countability nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (finite_union judgement-tcc nil finite_sets nil)
    (countable_set nonempty-type-eq-decl nil countability nil)
    (is_countable const-decl "bool" countability nil)
    (set type-eq-decl nil sets nil))
   nil
   (countable_union subtype
    "sets[countable_props.T].union(countable_props.Count1, countable_props.Count2)"
    "countable_set[T]")))
 (countably_infinite_def 0
  (countably_infinite_def-1 nil 3454922909
   ("" (skosimp)
    (("" (split)
      (("1" (flatten)
        (("1" (lemma "countable_card" ("S" "S!1"))
          (("1" (replace -1 1)
            (("1" (hide -1)
              (("1" (case-replace "is_finite(S!1)")
                (("1" (lemma "infinite_countably_infinite")
                  (("1" (inst - "S!1") nil nil)) nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (lemma "countable_card" ("S" "S!1"))
          (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((set type-eq-decl nil sets nil)
    (is_countably_infinite const-decl "bool" countability nil)
    (countably_infinite_set type-eq-decl nil countability nil)
    (is_finite const-decl "bool" finite_sets nil))
   shostak))
 (countable_emptyset 0
  (countable_emptyset-1 nil 3454937862
   ("" (lemma "finite_countable") (("" (inst - "emptyset[T]") nil nil))
    nil)
   ((finite_emptyset name-judgement "finite_set" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (emptyset const-decl "set" sets nil))
   shostak))
 (countable_singleton 0
  (countable_singleton-1 nil 3454937897
   ("" (skosimp)
    (("" (lemma "finite_countable")
      (("" (inst - "singleton(t!1)") nil nil)) nil))
    nil)
   ((singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil))
   shostak))
 (card_le_finite 0
  (card_le_finite-1 nil 3462010233
   ("" (grind :if-match nil)
    (("" (inst + "N!1" "f!2 o f!1")
      (("" (expand "o")
        (("" (skosimp)
          (("" (inst - "f!1(x1!1)" "f!1(x2!1)")
            (("" (inst - "x1!1" "x2!1") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((set type-eq-decl nil sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (card_le const-decl "bool" card_comp_set nil))
   nil))
 (card_ge_infinite 0
  (card_ge_infinite-1 nil 3462010266
   ("" (grind :if-match nil)
    (("" (inst + "N!1" "f!2 o f!1")
      (("" (skosimp)
        (("" (expand "o")
          (("" (inst - "x1!1" "x2!1")
            (("" (inst - "f!1(x1!1)" "f!1(x2!1)")
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((set type-eq-decl nil sets nil)
    (infinite_set type-eq-decl nil infinite_sets_def nil)
    (is_finite const-decl "bool" finite_sets nil)
    (card_ge const-decl "bool" card_comp_set nil))
   nil))
 (card_eq_countably_infinite 0
  (card_eq_countably_infinite-1 nil 3462010285
   ("" (skosimp :preds? t)
    (("" (expand* "is_countably_infinite" "card_eq")
      (("" (skosimp* t)
        (("" (use "composition_bijective[(S!1), (CountInf!1), nat]")
          (("" (inst + "f!1 o f!2") nil nil)) nil))
        nil))
      nil))
    nil)
   ((card_eq const-decl "bool" card_comp_set nil)
    (set type-eq-decl nil sets nil)
    (is_countably_infinite const-decl "bool" countability nil)
    (countably_infinite_set type-eq-decl nil countability nil))
   nil))
 (card_le_countable 0
  (card_le_countable-1 nil 3462010304
   ("" (skosimp* t)
    (("" (expand* "is_countable" "card_le")
      (("" (skosimp* t)
        (("" (use "composition_injective[(S!1), (Count!1), nat]")
          (("" (inst + "f!1 o f!2") nil nil)) nil))
        nil))
      nil))
    nil)
   ((card_le const-decl "bool" card_comp_set nil)
    (set type-eq-decl nil sets nil)
    (is_countable const-decl "bool" countability nil)
    (countable_set nonempty-type-eq-decl nil countability nil))
   nil))
 (card_ge_uncountable 0
  (card_ge_uncountable-1 nil 3462010326
   ("" (skosimp* t)
    (("" (expand* "card_ge" "is_countable")
      (("" (skosimp* t)
        (("" (use "composition_injective[(Uncount!1), (S!1), nat]")
          (("" (inst + "f!2 o f!1") nil nil)) nil))
        nil))
      nil))
    nil)
   ((card_ge const-decl "bool" card_comp_set nil)
    (set type-eq-decl nil sets nil)
    (is_countable const-decl "bool" countability nil)
    (uncountable_set type-eq-decl nil countability nil))
   nil))
 (countably_infinite_subset_union 0
  (countably_infinite_subset_union-1 nil 3462010351
   ("" (expand* "is_countably_infinite" "card_eq")
    (("" (skosimp* t)
      (("" (use "bijective_inverse_exists[(Q!1), nat]")
        (("" (use "bijective_inverse_exists[(R!1), nat]")
          (("" (expand "exists1")
            (("" (skosimp*)
              (("" (assert)
                ((""
                  (lemma "bij_left_right[(Q!1), nat]"
                   ("f" "f!2" "g" "x!2"))
                  (("" (use "bij_inv_is_bij_alt[(Q!1), nat]")
                    ((""
                      (lemma "bij_left_right[(R!1), nat]"
                       ("f" "f!1" "g" "x!1"))
                      (("" (use "bij_inv_is_bij_alt[(R!1), nat]")
                        (("" (flatten)
                          (("" (delete -7 -8 -9 -10)
                            ((""
                              (inst +
                               "LAMBDA (p: (S!1)): IF Q!1(p) THEN IF odd?(f!2(p)) THEN x!1((f!2(p) - 1) / 2) ELSE x!2(f!2(p) / 2) ENDIF ELSE p ENDIF")
                              (("1"
                                (expand "bijective?")
                                (("1"
                                  (prop)
                                  (("1"
                                    (expand "injective?")
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (smash)
                                        (("1"
                                          (inst
                                           -
                                           "(f!2(x1!1) - 1) / 2"
                                           "(f!2(x2!1) - 1) / 2")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst -14 "x1!1" "x2!1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -2)
                                            (("2"
                                              (forward-chain
                                               "odd_div2")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "odd?")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (forward-chain "odd_div2")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (expand "odd?")
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand*
                                           "subset?"
                                           "disjoint?"
                                           "empty?"
                                           "intersection"
                                           "member")
                                          (("2"
                                            (inst
                                             -17
                                             "x!1((f!2(x1!1) - 1) / 2)")
                                            (("1"
                                              (inst
                                               -18
                                               "x!1((f!2(x1!1) - 1) / 2)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (forward-chain
                                                 "odd_div2")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "odd?")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (forward-chain
                                               "odd_div2")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "odd?")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (typepred "x2!1")
                                          (("3"
                                            (expand*
                                             "disjoint?"
                                             "empty?"
                                             "intersection"
                                             "member")
                                            (("3"
                                              (inst -18 "x2!1")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (expand*
                                           "subset?"
                                           "disjoint?"
                                           "empty?"
                                           "intersection"
                                           "member")
                                          (("4"
                                            (inst
                                             -17
                                             "x!2(f!2(x1!1) / 2)")
                                            (("1"
                                              (inst
                                               -18
                                               "x!2(f!2(x1!1) / 2)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide -3)
                                                (("2"
                                                  (rewrite
                                                   "odd_iff_not_even")
                                                  (("2"
                                                    (forward-chain
                                                     "even_div2")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite
                                               "odd_iff_not_even")
                                              (("2"
                                                (forward-chain
                                                 "even_div2")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("5"
                                          (inst
                                           -8
                                           "f!2(x1!1) / 2"
                                           "f!2(x2!1) / 2")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst -12 "x1!1" "x2!1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (rewrite
                                               "odd_iff_not_even")
                                              (("2"
                                                (forward-chain
                                                 "even_div2")
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (rewrite
                                             "odd_iff_not_even")
                                            (("3"
                                              (forward-chain
                                               "even_div2")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("6"
                                          (expand*
                                           "disjoint?"
                                           "empty?"
                                           "intersection"
                                           "member")
                                          (("6"
                                            (inst - "x1!1")
                                            (("6" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "surjective?")
                                    (("2"
                                      (skolem-typepred)
                                      (("2"
                                        (expand* "union" "member")
                                        (("2"
                                          (split)
                                          (("1"
                                            (case "Q!1(y!1)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 +
                                                 "x!2(f!2(y!1) * 2)")
                                                (("1"
                                                  (smash)
                                                  (("1"
                                                    (expand
                                                     "right_inverse?"
                                                     -10)
                                                    (("1"
                                                      (inst
                                                       -10
                                                       "2 * f!2(y!1)")
                                                      (("1"
                                                        (replace -10)
                                                        (("1"
                                                          (rewrite
                                                           "odd_iff_not_even")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "right_inverse?"
                                                     -9)
                                                    (("2"
                                                      (inst
                                                       -9
                                                       "2 * f!2(y!1)")
                                                      (("2"
                                                        (replace -9)
                                                        (("2"
                                                          (expand
                                                           "left_inverse?"
                                                           -10)
                                                          (("2"
                                                            (inst
                                                             -10
                                                             "y!1")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand*
                                                   "subset?"
                                                   "member")
                                                  (("2"
                                                    (inst
                                                     -15
                                                     "x!2(2 * f!2(y!1))")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst + "y!1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst
                                             +
                                             "x!2(f!1(y!1) * 2 + 1)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand
                                                 "right_inverse?"
                                                 -8)
                                                (("1"
                                                  (inst
                                                   -8
                                                   "1 + 2 * f!1(y!1)")
                                                  (("1"
                                                    (replace -8)
                                                    (("1"
                                                      (expand
                                                       "left_inverse?"
                                                       -5)
                                                      (("1"
                                                        (inst -5 "y!1")
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand*
                                               "subset?"
                                               "member")
                                              (("2"
                                                (inst
                                                 -14
                                                 "x!2(1 + 2 * f!1(y!1))")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (expand* "union" "member") nil nil)
                               ("3"
                                (expand* "subset?" "union" "member")
                                (("3"
                                  (skosimp)
                                  (("3"
                                    (inst - "x!2(f!2(p!1) / 2)")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (rewrite "odd_iff_not_even")
                                      (("2"
                                        (forward-chain "even_div2")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (skosimp)
                                (("4"
                                  (rewrite "odd_iff_not_even")
                                  (("4"
                                    (forward-chain "even_div2")
                                    (("4" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("5" (expand* "union" "member") nil nil)
                               ("6"
                                (skosimp)
                                (("6"
                                  (forward-chain "odd_div2")
                                  (("6"
                                    (assert)
                                    (("6"
                                      (expand "odd?")
                                      (("6" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((set type-eq-decl nil sets nil) (union const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (is_countably_infinite const-decl "bool" countability nil)
    (card_eq const-decl "bool" card_comp_set nil))
   nil))
 (countable_finite_subset_union 0
  (countable_finite_subset_union-1 nil 3462010371
   ("" (skosimp)
    (("" (assert)
      (("" (lemma "bij_exists[T]" ("S" "R!1"))
        (("" (expand* "is_countably_infinite" "card_eq")
          (("" (skosimp* :preds? t)
            (("" (use "bijective_inverse_exists[(Q!1), nat]")
              (("" (assert)
                ((""
                  (lemma
                   "bijective_inverse_exists[(R!1), below(card(R!1))]"
                   ("f" "f!1"))
                  (("" (expand "exists1")
                    (("" (skosimp*)
                      (("" (assert)
                        ((""
                          (lemma "bij_left_right[(Q!1), nat]"
                           ("f" "f!2" "g" "x!2"))
                          ((""
                            (lemma
                             "bij_left_right[(R!1), below(card(R!1))]"
                             ("f" "f!1" "g" "x!1"))
                            ((""
                              (lemma
                               "bij_inv_is_bij_alt[(R!1), below(card(R!1))]"
                               ("f" "f!1" "g" "x!1"))
                              ((""
                                (lemma
                                 "bij_inv_is_bij_alt[(Q!1), nat]"
                                 ("f" "f!2" "g" "x!2"))
                                ((""
                                  (flatten)
                                  ((""
                                    (delete -7 -8 -9 -10)
                                    ((""
                                      (inst
                                       +
                                       "LAMBDA (p: (S!1)): IF Q!1(p) THEN IF f!2(p) < card(R!1) THEN x!1(f!2(p)) ELSE x!2(f!2(p) - card(R!1)) ENDIF ELSE p ENDIF")
                                      (("1"
                                        (expand "bijective?")
                                        (("1"
                                          (prop)
                                          (("1"
                                            (expand "injective?")
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (smash)
                                                (("1"
                                                  (inst
                                                   -8
                                                   "f!2(x1!1)"
                                                   "f!2(x2!1)")
                                                  (("1"
                                                    (inst
                                                     -14
                                                     "x1!1"
                                                     "x2!1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand*
                                                   "subset?"
                                                   "disjoint?"
                                                   "empty?"
                                                   "intersection"
                                                   "member")
                                                  (("2"
                                                    (inst
                                                     -17
                                                     "x!1(f!2(x1!1))")
                                                    (("2"
                                                      (inst
                                                       -18
                                                       "x!1(f!2(x1!1))")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (typepred "x2!1")
                                                  (("3"
                                                    (expand*
                                                     "disjoint?"
                                                     "empty?"
                                                     "intersection"
                                                     "member")
                                                    (("3"
                                                      (inst -18 "x2!1")
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (expand*
                                                   "subset?"
                                                   "disjoint?"
                                                   "empty?"
                                                   "intersection"
                                                   "member")
                                                  (("4"
                                                    (inst
                                                     -17
                                                     "x!2(f!2(x1!1) - card(R!1))")
                                                    (("4"
                                                      (inst
                                                       -18
                                                       "x!2(f!2(x1!1) - card(R!1))")
                                                      (("4"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (inst
                                                   -
                                                   "f!2(x1!1) - card(R!1)"
                                                   "f!2(x2!1) - card(R!1)")
                                                  (("5"
                                                    (inst
                                                     -12
                                                     "x1!1"
                                                     "x2!1")
                                                    (("5"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("6"
                                                  (expand*
                                                   "disjoint?"
                                                   "empty?"
                                                   "intersection"
                                                   "member")
                                                  (("6"
                                                    (inst -17 "x1!1")
                                                    (("6"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "surjective?")
                                            (("2"
                                              (skolem-typepred)
                                              (("2"
                                                (expand*
                                                 "union"
                                                 "member")
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (case "Q!1(y!1)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst
                                                         +
                                                         "x!2(f!2(y!1) + card(R!1))")
                                                        (("1"
                                                          (smash)
                                                          (("1"
                                                            (expand
                                                             "right_inverse?"
                                                             -10)
                                                            (("1"
                                                              (inst
                                                               -10
                                                               "card(R!1) + f!2(y!1)")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "right_inverse?"
                                                             -9)
                                                            (("2"
                                                              (inst
                                                               -9
                                                               "card(R!1) + f!2(y!1)")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "left_inverse?"
                                                                   -10)
                                                                  (("2"
                                                                    (inst
                                                                     -10
                                                                     "y!1")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand*
                                                           "subset?"
                                                           "member")
                                                          (("2"
                                                            (inst
                                                             -15
                                                             "x!2(card(R!1) + f!2(y!1))")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst + "y!1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst
                                                     +
                                                     "x!2(f!1(y!1))")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "right_inverse?"
                                                         -8)
                                                        (("1"
                                                          (inst
                                                           -8
                                                           "f!1(y!1)")
                                                          (("1"
                                                            (replace
                                                             -8)
                                                            (("1"
                                                              (expand
                                                               "left_inverse?"
                                                               -7)
                                                              (("1"
                                                                (inst
                                                                 -7
                                                                 "y!1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand*
                                                       "subset?"
                                                       "member")
                                                      (("2"
                                                        (inst
                                                         -14
                                                         "x!2(f!1(y!1))")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand* "union" "member")
                                        nil
                                        nil)
                                       ("3"
                                        (expand*
                                         "subset?"
                                         "union"
                                         "member")
                                        (("3"
                                          (skosimp)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (inst
                                               -
                                               "x!2(f!2(p!1) - card(R!1))")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (skosimp)
                                        (("4" (assert) nil nil))
                                        nil)
                                       ("5"
                                        (expand* "union" "member")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((card_eq const-decl "bool" card_comp_set nil)
    (is_countably_infinite const-decl "bool" countability nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (union const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (bij_exists formula-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil))
   nil))
 (infinite_countable_union 0
  (infinite_countable_union-1 nil 3462010390
   ("" (skolem-typepred)
    (("" (use "union_difference[T]")
      (("" (use "difference_disjoint[T]")
        (("" (assert)
          (("" (use "countably_infinite_subset_exists")
            (("" (skolem-typepred)
              (("" (rewrite "countable_card")
                (("" (split)
                  (("1"
                    (lemma "countable_finite_subset_union"
                     ("Q" "CountInf!1" "R" "difference(Count!1, Inf!1)"
                      "S" "Inf!1"))
                    (("1" (assert)
                      (("1" (use "finite_difference[T]") nil nil))
                      nil))
                    nil)
                   ("2" (use "countable_difference")
                    (("2" (rewrite "countable_card")
                      (("2" (split)
                        (("1"
                          (lemma "countable_finite_subset_union"
                           ("Q" "CountInf!1" "R"
                            "difference(Count!1, Inf!1)" "S" "Inf!1"))
                          (("1" (assert) nil nil)) nil)
                         ("2"
                          (lemma "countably_infinite_subset_union"
                           ("Q" "CountInf!1" "R"
                            "difference(Count!1, Inf!1)" "S" "Inf!1"))
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((countably_infinite_set type-eq-decl nil countability nil)
    (is_countably_infinite const-decl "bool" countability nil)
    (finite_difference judgement-tcc nil finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (difference const-decl "set" sets nil)
    (countable_set nonempty-type-eq-decl nil countability nil)
    (is_countable const-decl "bool" countability nil)
    (infinite_set type-eq-decl nil infinite_sets_def nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil))
   nil))
 (infinite_countable_difference 0
  (infinite_countable_difference-1 nil 3462010407
   ("" (skosimp :preds? t)
    ((""
      (lemma "countable_intersection2" ("S" "S!1" "Count" "Count!1"))
      ((""
        (case "S!1 = union(difference(S!1, Count!1), intersection(S!1, Count!1))")
        (("1" (lemma "infinite_countable_union")
          (("1"
            (inst - "difference(S!1, Count!1)"
             "intersection(S!1, Count!1)")
            (("1" (replace -2 -1 :dir rl)
              (("1" (rewrite "card_eq_symmetric") nil nil)) nil))
            nil))
          nil)
         ("2" (hide -1 -2 2 3) (("2" (grind-with-ext) nil nil)) nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (card_eq_symmetric formula-decl nil card_comp_set_props nil)
    (infinite_set type-eq-decl nil infinite_sets_def nil)
    (is_finite const-decl "bool" finite_sets nil)
    (union const-decl "set" sets nil)
    (difference const-decl "set" sets nil)
    (intersection const-decl "set" sets nil)
    (set type-eq-decl nil sets nil)
    (is_countable const-decl "bool" countability nil)
    (countable_set nonempty-type-eq-decl nil countability nil))
   nil)))

