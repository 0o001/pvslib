(polygon_attributes
 (min_edge_sep_vertex_TCC1 0
  (min_edge_sep_vertex_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (rewrite "sqv_eq_0")
      (("" (replace -2) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((sqv_eq_0 formula-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors))
   shostak
   (min_edge_sep_vertex subtype "vectors_2D.sqv(polygon_attributes.v)"
    "nznum"))
  (min_edge_sep_vertex_TCC1-1 nil 3874128226 ("" (subtype-tcc) nil nil)
   nil nil
   (min_edge_sep_vertex subtype "vectors_2D.sqv(polygon_attributes.v)"
    "nznum")))
 (min_edge_sep_vertex_TCC2 0
  (min_edge_sep_vertex_TCC2-2 nil 3874129020
   ("" (skeep + t)
    (("" (skeep*)
      (("" (typepred "G`vertices")
        (("" (expand "uniq_vertex_list?")
          (("" (inst - "i" "j")
            (("" (ground)
              (("" (use "norm_eq_0")
                (("" (expand "edges_of_polygon")
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list
     line_segments)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list? const-decl "bool" vertex_list line_segments)
    (point_2d type-eq-decl nil vectors_cross_2d line_segments)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (segment_2d type-eq-decl nil segments_2d line_segments)
    (norm_diff_pos formula-decl nil vectors_cross_2d line_segments)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (min_edge_sep_vertex subtype
    "vectors_2D.norm((vectors_2D.-)(polygon_attributes.vtx, polygon_attributes.e`p1))"
    "posreal"))
  (min_edge_sep_vertex_TCC2-1 nil 3874128226 ("" (subtype-tcc) nil nil)
   nil nil
   (min_edge_sep_vertex subtype
    "vectors_2D.norm((vectors_2D.-)(polygon_attributes.vtx, polygon_attributes.e`p1))"
    "posreal")))
 (min_edge_sep_vertex_TCC3 0
  (min_edge_sep_vertex_TCC3-2 nil 3874129020
   ("" (skeep + t)
    (("" (typepred "G`vertices")
      (("" (expand "uniq_vertex_list?")
        (("" (inst - "i" "next_index(G,j)")
          (("1" (lemma "norm_eq_0")
            (("1" (inst - "vtx - e`p2")
              (("1" (expand "edges_of_polygon")
                (("1" (ground) nil nil)) nil))
              nil))
            nil)
           ("2" (expand "next_index")
            (("2" (expand "simple_polygon_2d?")
              (("2" (lift-if)
                (("2" (ground)
                  (("1" (expand "prev_index") (("1" (propax) nil nil))
                    nil)
                   ("2" (expand "prev_index") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list
     line_segments)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list? const-decl "bool" vertex_list line_segments)
    (point_2d type-eq-decl nil vectors_cross_2d line_segments)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (j skolem-const-decl
     "{j: below(G`num_vertices) | j /= i AND j /= prev_index(G, i)}"
     polygon_attributes nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (i skolem-const-decl "below(G`num_vertices)" polygon_attributes
       nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (G skolem-const-decl "simple_polygon_2d" polygon_attributes nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d line_segments)
    (- const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (norm_diff_nonzero_2 formula-decl nil vectors_cross_2d
     line_segments)
    (norm_diff_pos formula-decl nil vectors_cross_2d line_segments)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (min_edge_sep_vertex subtype
    "vectors_2D.norm((vectors_2D.-)(polygon_attributes.vtx, polygon_attributes.e`p2))"
    "posreal"))
  (min_edge_sep_vertex_TCC3-1 nil 3874128226 ("" (subtype-tcc) nil nil)
   nil nil
   (min_edge_sep_vertex subtype
    "vectors_2D.norm((vectors_2D.-)(polygon_attributes.vtx, polygon_attributes.e`p2))"
    "posreal")))
 (min_edge_sep_vertex_TCC4 0
  (min_edge_sep_vertex_TCC4-2 nil 3874129020
   ("" (auto-rewrite "is_point_on_seg_equiv")
    (("" (skeep + t)
      (("" (lemma "norm_eq_0")
        (("" (inst - "e`p1 + t_min * v - vtx")
          (("" (assert)
            (("" (replace -1)
              (("" (replace -1 :dir rl)
                (("" (assert)
                  (("" (typepred "G")
                    (("" (hide -3)
                      (("" (expand "simple_polygon_2d?")
                        (("" (flatten)
                          (("" (expand "polygon_edges_do_not_cross?")
                            (("" (inst - "j" "i")
                              ((""
                                (inst - "G`vertices(i)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "edges_of_polygon")
                                    (("1"
                                      (typepred "G`vertices")
                                      (("1"
                                        (expand "uniq_vertex_list?")
                                        (("1"
                                          (inst-cp - "i" "j")
                                          (("1"
                                            (inst
                                             -
                                             "i"
                                             "next_index(G,j)")
                                            (("1" (ground) nil nil)
                                             ("2"
                                              (ground)
                                              (("2"
                                                (replace -2 :dir rl)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -8 :dir rl)
                                  (("2"
                                    (rewrite
                                     "point_on_segment_has_offset")
                                    (("2"
                                      (inst + "t_min")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (point_2d type-eq-decl nil vectors_cross_2d line_segments)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d line_segments)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (* const-decl "Vector" vectors_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (add_cancel formula-decl nil vectors_2D vectors)
    (dot_scal_left formula-decl nil vectors_2D vectors)
    (sub_eq_args formula-decl nil vectors_2D vectors)
    (norm_zero formula-decl nil vectors_2D vectors)
    (polygon_edges_do_not_cross? const-decl "bool" polygons_2d nil)
    (point_on_segment? const-decl "bool" segments_2d line_segments)
    (G skolem-const-decl "simple_polygon_2d" polygon_attributes nil)
    (i skolem-const-decl "below(G`num_vertices)" polygon_attributes
       nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (j skolem-const-decl
     "{j: below(G`num_vertices) | j /= i AND j /= prev_index(G, i)}"
     polygon_attributes nil)
    (is_point_on_segment? const-decl "bool" segments_2d line_segments)
    (is_point_on_seg_equiv formula-decl nil segments_2d line_segments)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (prev_next_is_original formula-decl nil polygons_2d nil)
    (uniq_vertex_list? const-decl "bool" vertex_list line_segments)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (vertex_on_edge formula-decl nil polygons_2d nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (point_on_segment_has_offset formula-decl nil segments_2d
     line_segments)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list
     line_segments)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (norm_eq_0 formula-decl nil vectors_2D vectors))
   shostak
   (min_edge_sep_vertex subtype
    "vectors_2D.norm((vectors_2D.-)((vectors_2D.+)(polygon_attributes.e`p1, vectors_2D.*(polygon_attributes.t_min, polygon_attributes.v)), polygon_attributes.vtx))"
    "posreal"))
  (min_edge_sep_vertex_TCC4-1 nil 3874128226 ("" (subtype-tcc) nil nil)
   nil nil
   (min_edge_sep_vertex subtype
    "vectors_2D.norm((vectors_2D.-)((vectors_2D.+)(polygon_attributes.e`p1, vectors_2D.*(polygon_attributes.t_min, polygon_attributes.v)), polygon_attributes.vtx))"
    "posreal")))
 (min_edge_separation_TCC1 0
  (min_edge_separation_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (min_edge_separation subtype "polygon_attributes.j"
    "{j: naturalnumbers.below(polygon_attributes.G`num_vertices) | booleans.AND(j /= polygon_attributes.i, j /= polygons_2d.prev_index(polygon_attributes.G, polygon_attributes.i))}"))
  (min_edge_separation_TCC1-1 nil 3874128226 ("" (subtype-tcc) nil nil)
   nil nil
   (min_edge_separation subtype "polygon_attributes.j"
    "{j: naturalnumbers.below(polygon_attributes.G`num_vertices) | booleans.AND(j /= polygon_attributes.i, j /= polygons_2d.prev_index(polygon_attributes.G, polygon_attributes.i))}")))
 (min_edge_separation_TCC2 0
  (min_edge_separation_TCC2-2 nil 3874129020
   ("" (skeep)
    (("" (expand "empty?")
      (("" (inst - "min_edge_sep_vertex(G, 0, 1)")
        (("1" (expand "member")
          (("1" (inst + "0" "1")
            (("1" (assert)
              (("1" (expand "prev_index")
                (("1" (typepred "G")
                  (("1" (expand "simple_polygon_2d?")
                    (("1" (ground) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil) ("3" (assert) nil nil))
            nil))
          nil)
         ("2" (ground)
          (("2" (expand "prev_index")
            (("2" (typepred "G")
              (("2" (expand "simple_polygon_2d?")
                (("2" (ground) nil nil)) nil))
              nil))
            nil))
          nil)
         ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (min_edge_sep_vertex const-decl "posreal" polygon_attributes nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list
     line_segments)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (G skolem-const-decl "simple_polygon_2d" polygon_attributes nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (min_edge_separation subtype
    "{v_min: real_types.posreal | EXISTS (i, j: naturalnumbers.below(polygon_attributes.G`num_vertices)): booleans.AND(j /= i, booleans.AND(j /= polygons_2d.prev_index(polygon_attributes.G, i), v_min = polygon_attributes.min_edge_sep_vertex(polygon_attributes.G, i, j)))}"
    "non_empty_finite_set[posreal]"))
  (min_edge_separation_TCC2-1 nil 3874128226 ("" (subtype-tcc) nil nil)
   nil nil
   (min_edge_separation subtype
    "{v_min: real_types.posreal | EXISTS (i, j: naturalnumbers.below(polygon_attributes.G`num_vertices)): booleans.AND(j /= i, booleans.AND(j /= polygons_2d.prev_index(polygon_attributes.G, i), v_min = polygon_attributes.min_edge_sep_vertex(polygon_attributes.G, i, j)))}"
    "non_empty_finite_set[posreal]")))
 (min_edge_sep_vertex_le_dist_to_vtx 0
  (min_edge_sep_vertex_le_dist_to_vtx-1 nil 3874129020
   ("" (skeep*)
    (("" (expand "min_edge_sep_vertex")
      (("" (expand "edges_of_polygon")
        ((""
          (name-replace*
           ("u" "G`vertices(i)" "v" "G`vertices(j)" "w"
            "G`vertices(next_index(G, j))"))
          (("" (case "v = w")
            (("1" (lemma "vertex_neq_next")
              (("1" (inst - "G" "j") (("1" (ground) nil nil)) nil))
              nil)
             ("2" (use "point_on_reverse_segment")
              (("1" (assert)
                (("1" (expand "reverse_segment")
                  (("1" (rewrite* "point_on_segment_has_offset")
                    (("1" (skeep*)
                      (("1" (case "sqv(w - v) = 0")
                        (("1" (lemma "vertex_neq_next")
                          (("1" (inst - "G" "j")
                            (("1" (ground)
                              (("1"
                                (use "sqv_eq_0")
                                (("1" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "sqv(w - v)")
                          (("2" (lift-if)
                            (("2" (ground)
                              (("1"
                                (rewrite "norm_le_sqv")
                                (("1"
                                  (replace -8 :hide? t)
                                  (("1"
                                    (lemma "sqv_sub")
                                    (("1"
                                      (inst - "u -v" "d!1 * (w - v)")
                                      (("1"
                                        (equate
                                         "u - (v + d!1 * (w - v))"
                                         "(u - v) - d!1 * (w - v)")
                                        (("1"
                                          (replace -1 :hide? t)
                                          (("1"
                                            (cancel-add 1)
                                            (("1"
                                              (rewrite "sqv_scal")
                                              (("1"
                                                (real-props)
                                                (("1"
                                                  (case
                                                   "2 * (d!1 * ((u - v) * (w - v))) <= 0")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (case-replace
                                                     "d!1 = 0")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (cancel-by
                                                       2
                                                       "2 * d!1")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "norm_le_sqv")
                                (("2"
                                  (cross-mult -1)
                                  (("2"
                                    (replace -3 :hide? t)
                                    (("2"
                                      (equate
                                       "u - (w + d * (v - w))"
                                       "(u - w) + d * (w - v)")
                                      (("1"
                                        (lemma "sqv_add")
                                        (("1"
                                          (inst
                                           -
                                           "u - w"
                                           "d * (w - v)")
                                          (("1"
                                            (replace -1 :hide? t)
                                            (("1"
                                              (cancel-add 1)
                                              (("1"
                                                (rewrite "sqv_scal")
                                                (("1"
                                                  (real-props)
                                                  (("1"
                                                    (typepred "sq(d)")
                                                    (("1"
                                                      (case
                                                       "2 * (d * ((u - w) * (w - v))) >= 0")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (case-replace
                                                         "d = 0")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide 3)
                                                          (("2"
                                                            (cancel-by
                                                             2
                                                             "2 * d")
                                                            (("2"
                                                              (hide
                                                               -9
                                                               4
                                                               7)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (name-replace
                                 "t_min"
                                 "((u - v) * (w - v)) / sqv(w - v)"
                                 :hide?
                                 nil)
                                (("3"
                                  (rewrite "norm_le_sqv")
                                  (("3"
                                    (equate
                                     "v + t_min * (w - v) - u"
                                     "(v - u) + t_min * (w - v)")
                                    (("1"
                                      (lemma
                                       "perpendicular_2D.perp_is_min")
                                      (("1"
                                        (inst
                                         -
                                         "v"
                                         "u"
                                         "w - v"
                                         "d!1"
                                         "t_min")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (rewrite "sqv_sym" 2)
                                            (("1"
                                              (equate
                                               "(v + t_min * (w - v)) - u"
                                               "(v - u) + t_min * (w - v)")
                                              (("1"
                                                (replace -9 2)
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (lemma
                                                     "norm_le_sqv")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "(v - u) + t_min * (w - v)"
                                                       "(v + d!1 * (w - v)) - u")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "perp_pt")
                                                    (("2"
                                                      (expand "sqv")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (ground) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((min_edge_sep_vertex const-decl "posreal" polygon_attributes nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d line_segments)
    (/= const-decl "boolean" notequal nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list
     line_segments)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (point_on_reverse_segment formula-decl nil segments_2d
     line_segments)
    (segment_2d type-eq-decl nil segments_2d line_segments)
    (v skolem-const-decl "point_2d" polygon_attributes nil)
    (w skolem-const-decl "point_2d" polygon_attributes nil)
    (reverse_segment const-decl "segment_2d" segments_2d line_segments)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "Vector" vectors_2D vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sqv_scal formula-decl nil vectors_2D vectors)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (div_14 skolem-const-decl "nnreal" polygon_attributes nil)
    (zero_div formula-decl nil extra_tegies nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (pos_div_gt formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (dot_scal_canon formula-decl nil vectors_2D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "real" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (sqv_sub formula-decl nil vectors_2D vectors)
    (norm_le_sqv formula-decl nil vectors_2D vectors)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (div_17 skolem-const-decl "nnreal" polygon_attributes nil)
    (sq const-decl "nonneg_real" sq reals)
    (sqv_add formula-decl nil vectors_2D vectors)
    (perp_is_min formula-decl nil perpendicular_2D vectors)
    (perp_pt const-decl "real" perpendicular_2D vectors)
    (sqv_sym formula-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (sqv_eq_0 formula-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (point_on_segment_has_offset formula-decl nil segments_2d
     line_segments)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (vertex_neq_next formula-decl nil polygons_2d nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (min_edge_separation_is_min 0
  (min_edge_separation_is_min-1 nil 3874129020
   ("" (skeep*)
    (("" (expand "min_edge_separation")
      ((""
        (typepred
         "min[posreal, restrict[[real, real], [posreal, posreal], bool](<=)]
                  ({v_min: posreal |
                      EXISTS (i, j: below(G`num_vertices)):
                        j /= i AND
                         j /= prev_index(G, i) AND
                          v_min = min_edge_sep_vertex(G, i, j)})")
        (("1" (hide -1)
          (("1" (skeep)
            (("1" (replace -2 :hide? t)
              (("1" (inst - "min_edge_sep_vertex(G, i, j)")
                (("1" (ground)
                  (("1" (lemma "min_edge_sep_vertex_le_dist_to_vtx")
                    (("1" (inst - "G" "i" "j")
                      (("1" (assert)
                        (("1" (inst?)
                          (("1" (expand "restrict")
                            (("1" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst + "i" "j") (("2" (ground) nil nil)) nil))
                  nil)
                 ("2" (ground) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide -2 3)
          (("2" (expand "empty?")
            (("2" (inst - "min_edge_sep_vertex(G, i, j)")
              (("1" (expand "member")
                (("1" (inst?) (("1" (ground) nil nil)) nil)) nil)
               ("2" (ground) nil nil))
              nil))
            nil))
          nil)
         ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((min_edge_separation const-decl "posreal" polygon_attributes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (point_2d type-eq-decl nil vectors_cross_2d line_segments)
    (min_edge_sep_vertex_le_dist_to_vtx formula-decl nil
     polygon_attributes nil)
    (i skolem-const-decl "below(G`num_vertices)" polygon_attributes
       nil)
    (j skolem-const-decl "below(G`num_vertices)" polygon_attributes
     nil)
    (G skolem-const-decl "simple_polygon_2d" polygon_attributes nil)
    (total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (restrict const-decl "R" restrict nil)
    (min const-decl
         "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list
     line_segments)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (min_edge_sep_vertex const-decl "posreal" polygon_attributes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (min_edge_sep_TCC1 0
  (min_edge_sep_TCC1-2 nil 3874129020
   ("" (inst + "min_edge_separation")
    (("" (skeep + t)
      (("" (skeep)
        (("" (rewrite "point_on_segment_has_offset")
          (("" (skeep)
            (("" (expand "edges_of_polygon")
              (("" (expand "min_edge_separation")
                (("" (invoke (typepred "%1") (! 3 l))
                  (("1" (skeep)
                    (("1" (replace -3)
                      (("1" (inst - "min_edge_sep_vertex(x1, i, j)")
                        (("1"
                          (case "min_edge_sep_vertex(x1, i, j) <= norm(x1`vertices(i) - p)")
                          (("1" (ground)
                            (("1" (inst?) (("1" (ground) nil nil))
                              nil))
                            nil)
                           ("2" (hide -1 -2 -3 -4 6)
                            (("2" (expand "min_edge_sep_vertex")
                              (("2"
                                (name-replace*
                                 ("e"
                                  "edges_of_polygon(x1)(j)"
                                  "vtx"
                                  "x1`vertices(i)"))
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (name-replace
                                     "tp"
                                     "(vtx - e`p1) * (e`p2 - e`p1) / sqv(e`p2 - e`p1)"
                                     :hide?
                                     nil)
                                    (("1"
                                      (case
                                       "tp = perp_pt(vtx, e`p1, e`p2 - e`p1)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (equate
                                           "norm(vtx - p)"
                                           "norm(p - vtx)")
                                          (("1"
                                            (lemma "perp_comps")
                                            (("1"
                                              (inst
                                               -
                                               "e`p1"
                                               "vtx"
                                               "e`p2 - e`p1"
                                               "d"
                                               "tp")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case
                                                   "p = e`p1 + d * (e`p2 - e`p1)")
                                                  (("1"
                                                    (replace -1 +)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (lemma
                                                         "perp_comps")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "e`p1"
                                                           "vtx"
                                                           "e`p2 - e`p1"
                                                           "0"
                                                           "tp")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (rewrite
                                                               "norm_sym"
                                                               1)
                                                              (("1"
                                                                (rewrite
                                                                 "sq_le"
                                                                 1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (replace
                                                                     -4)
                                                                    (("1"
                                                                      (cancel-add
                                                                       1)
                                                                      (("1"
                                                                        (rewrite*
                                                                         "norm_scal")
                                                                        (("1"
                                                                          (expand
                                                                           "abs")
                                                                          (("1"
                                                                            (rewrite
                                                                             "sq_le_abs"
                                                                             1)
                                                                            (("1"
                                                                              (factor!
                                                                               (!
                                                                                1
                                                                                r
                                                                                1)
                                                                               :id?
                                                                               t)
                                                                              (("1"
                                                                                (expand
                                                                                 "abs")
                                                                                (("1"
                                                                                  (real-props)
                                                                                  (("1"
                                                                                    (lift-if)
                                                                                    (("1"
                                                                                      (ground)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "id")
                                                                                        (("1"
                                                                                          (real-props)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "id")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "perp_comps")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "e`p1"
                                                           "vtx"
                                                           "e`p2 - e`p1"
                                                           "1"
                                                           "tp")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (equate
                                                               "(e`p1 + (e`p2 - e`p1))"
                                                               "e`p2")
                                                              (("1"
                                                                (rewrite
                                                                 "norm_sym"
                                                                 1)
                                                                (("1"
                                                                  (rewrite
                                                                   "sq_le"
                                                                   1
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (replace
                                                                       -4)
                                                                      (("1"
                                                                        (cancel-add
                                                                         1)
                                                                        (("1"
                                                                          (rewrite
                                                                           "sq_le_abs"
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "abs")
                                                                            (("1"
                                                                              (rewrite*
                                                                               "norm_scal")
                                                                              (("1"
                                                                                (expand
                                                                                 "abs")
                                                                                (("1"
                                                                                  (mult-cases
                                                                                   1)
                                                                                  (("1"
                                                                                    (real-props)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (grind-with-ext)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (replace
                                                         -1
                                                         :dir
                                                         RL)
                                                        (("3"
                                                          (use "sq_le")
                                                          (("3"
                                                            (replace
                                                             -1
                                                             2
                                                             :dir
                                                             RL
                                                             :hide?
                                                             t)
                                                            (("3"
                                                              (replace
                                                               -2
                                                               2)
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-5 -9 1))
                                                    (("2"
                                                      (grind-with-ext)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "norm_sym" 1)
                                            nil
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "perp_pt")
                                        (("2"
                                          (expand "sqv")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("3" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (rewrite "sqv_eq_0")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (ground) nil nil))
                          nil)
                         ("2" (ground) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "empty?")
                    (("2" (expand "member")
                      (("2" (expand "prev_index")
                        (("2" (expand "simple_polygon_2d?")
                          (("2" (ground)
                            (("2"
                              (inst - "min_edge_sep_vertex(x1, i, j)")
                              (("1"
                                (inst + "i" "j")
                                (("1" (ground) nil nil))
                                nil)
                               ("2"
                                (expand "prev_index")
                                (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skeep) (("3" (ground) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list
     line_segments)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (point_2d type-eq-decl nil vectors_cross_2d line_segments)
    (segment_2d type-eq-decl nil segments_2d line_segments)
    (point_on_segment? const-decl "bool" segments_2d line_segments)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (min_edge_separation const-decl "posreal" polygon_attributes nil)
    (member const-decl "bool" sets nil)
    (x1 skolem-const-decl "simple_polygon_2d" polygon_attributes nil)
    (j skolem-const-decl "below(x1`num_vertices)" polygon_attributes
     nil)
    (i skolem-const-decl "below(x1`num_vertices)" polygon_attributes
       nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_2D vectors)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (perp_comps formula-decl nil perpendicular_2D vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (scal_1 formula-decl nil vectors_2D vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (scal_0 formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (sq_le formula-decl nil sq reals)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (norm_scal formula-decl nil vectors_2D vectors)
    (sq_le_abs formula-decl nil sq reals)
    (minus_real_is_real application-judgement "real" reals nil)
    (div_cancel3 formula-decl nil real_props nil)
    (neg_times_lt formula-decl nil real_props nil)
    (pos_times_lt formula-decl nil real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (norm_sym formula-decl nil vectors_2D vectors)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (perp_pt const-decl "real" perpendicular_2D vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (sqv_eq_0 formula-decl nil vectors_2D vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (restrict const-decl "R" restrict nil)
    (min const-decl
         "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (min_edge_sep_vertex const-decl "posreal" polygon_attributes nil)
    (point_on_segment_has_offset formula-decl nil segments_2d
     line_segments))
   shostak
   (min_edge_sep existence ""
    "[G: polygons_2d.simple_polygon_2d -> {D_min: real_types.posreal | FORALL (i, j: naturalnumbers.below(G`num_vertices)): booleans.IMPLIES(booleans.AND(j /= i, j /= polygons_2d.prev_index(G, i)), FORALL (p: vectors_cross_2d.point_2d): booleans.IMPLIES(segments_2d.point_on_segment?(p, polygons_2d.edges_of_polygon(G)(j)), reals.<=(D_min, vectors_2D.norm((vectors_2D.-)(G`vertices(i), p)))))}]"))
  (min_edge_sep_TCC1-1 nil 3874128226 ("" (existence-tcc) nil nil) nil
   nil
   (min_edge_sep existence ""
    "[G: polygons_2d.simple_polygon_2d -> {D_min: real_types.posreal | FORALL (i, j: naturalnumbers.below(G`num_vertices)): booleans.IMPLIES(booleans.AND(j /= i, j /= polygons_2d.prev_index(G, i)), FORALL (p: vectors_cross_2d.point_2d): booleans.IMPLIES(segments_2d.point_on_segment?(p, polygons_2d.edges_of_polygon(G)(j)), reals.<=(D_min, vectors_2D.norm((vectors_2D.-)(G`vertices(i), p)))))}]")))
 (min_edge_sep_le_min_edge_separation 0
  (min_edge_sep_le_min_edge_separation-1 nil 3874129020
   ("" (skeep)
    (("" (expand "min_edge_separation")
      (("" (typepred "min_edge_sep(G)")
        ((""
          (typepred
           "min[posreal, restrict[[real, real], [posreal, posreal], bool](<=)]
           ({v_min: posreal |
               EXISTS (i, j: below(G`num_vertices)):
                 j /= i AND
                  j /= prev_index(G, i) AND
                   v_min = min_edge_sep_vertex(G, i, j)})")
          (("1" (hide -1 -2)
            (("1" (skeep)
              (("1" (replace -1 :hide? t)
                (("1" (inst -4 "i_1" "j_1")
                  (("1" (assert)
                    (("1" (hide -1)
                      (("1" (expand "min_edge_sep_vertex")
                        (("1" (expand "edges_of_polygon")
                          (("1"
                            (name-replace*
                             ("vi" "G`vertices(i_1)" "vj"
                              "G`vertices(j_1)" "nj"
                              "G`vertices(next_index(G, j_1))"))
                            (("1" (lift-if)
                              (("1"
                                (ground)
                                (("1"
                                  (inst - "vj")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "point_on_segment?")
                                      (("1"
                                        (inst + "0")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst - "nj")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "point_on_segment?")
                                      (("2"
                                        (inst + "1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (rewrite "norm_sym" 2)
                                  (("3"
                                    (inst
                                     -
                                     "vj + ((vi - vj) * (nj - vj)) / sqv(nj - vj) * (nj - vj)")
                                    (("3"
                                      (assert)
                                      (("3"
                                        (rewrite
                                         "point_on_segment_has_offset")
                                        (("1"
                                          (inst
                                           +
                                           "((vi - vj) * (nj - vj)) / sqv(nj - vj)")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (lemma "vertex_neq_next")
                                          (("2"
                                            (inst - "G" "j_1")
                                            (("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -4 1)
            (("2" (expand "empty?")
              (("2" (inst - "min_edge_sep_vertex(G, 1, 2)")
                (("1" (expand "member")
                  (("1" (inst + "1" "2")
                    (("1" (expand "prev_index")
                      (("1" (propax) nil nil)) nil)
                     ("2" (typepred "G")
                      (("2" (expand "simple_polygon_2d?")
                        (("2" (ground) nil nil)) nil))
                      nil)
                     ("3" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (expand "prev_index")
                  (("2" (typepred "G")
                    (("2" (expand "simple_polygon_2d?")
                      (("2" (ground) nil nil)) nil))
                    nil))
                  nil)
                 ("3" (assert) nil nil))
                nil))
              nil))
            nil)
           ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((min_edge_separation const-decl "posreal" polygon_attributes nil)
    (total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (restrict const-decl "R" restrict nil)
    (min const-decl
         "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (min_edge_sep_vertex const-decl "posreal" polygon_attributes nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (norm_sym formula-decl nil vectors_2D vectors)
    (vertex_neq_next formula-decl nil polygons_2d nil)
    (point_on_segment_has_offset formula-decl nil segments_2d
     line_segments)
    (add_zero_left formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (G skolem-const-decl "simple_polygon_2d" polygon_attributes nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list
     line_segments)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (point_2d type-eq-decl nil vectors_cross_2d line_segments)
    (segment_2d type-eq-decl nil segments_2d line_segments)
    (point_on_segment? const-decl "bool" segments_2d line_segments)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (min_edge_sep const-decl "{D_min: posreal |
   FORALL (i, j: below(G`num_vertices)):
     j /= i AND j /= prev_index(G, i) IMPLIES
      FORALL (p: point_2d):
        point_on_segment?(p, edges_of_polygon(G)(j)) IMPLIES
         D_min <= norm(G`vertices(i) - p)}" polygon_attributes nil))
   shostak))
 (separation_distance_bounds_edge_length 0
  (separation_distance_bounds_edge_length-1 nil 3874129020
   ("" (skeep + t)
    (("" (expand "edge_of_polygon?")
      (("" (skeep)
        (("" (typepred "min_edge_sep(G)")
          (("" (inst - "i" "next_index(G,i)")
            (("" (ground)
              (("1" (expand "length")
                (("1" (inst - "e`p2")
                  (("1" (ground)
                    (("1" (rewrite "norm_sym")
                      (("1" (expand "edges_of_polygon")
                        (("1" (replace -5 -1 :dir rl)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (expand "point_on_segment?")
                      (("2" (inst + "0")
                        (("2" (assert)
                          (("2" (expand "edges_of_polygon" +)
                            (("2" (expand "edges_of_polygon")
                              (("2"
                                (replace -4 :dir rl)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but -1) (("2" (grind) nil nil)) nil)
               ("3" (expand "simple_polygon_2d?")
                (("3" (flatten)
                  (("3" (hide-all-but (-1 -4)) (("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (min_edge_sep const-decl "{D_min: posreal |
   FORALL (i, j: below(G`num_vertices)):
     j /= i AND j /= prev_index(G, i) IMPLIES
      FORALL (p: point_2d):
        point_on_segment?(p, edges_of_polygon(G)(j)) IMPLIES
         D_min <= norm(G`vertices(i) - p)}" polygon_attributes nil)
    (- const-decl "Vector" vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (<= const-decl "bool" reals nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (point_on_segment? const-decl "bool" segments_2d line_segments)
    (segment_2d type-eq-decl nil segments_2d line_segments)
    (point_2d type-eq-decl nil vectors_cross_2d line_segments)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list
     line_segments)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pred type-eq-decl nil defined_types nil)
    (scal_1 formula-decl nil vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (norm_sym formula-decl nil vectors_2D vectors)
    (length const-decl "posreal" segments_2d line_segments)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (G skolem-const-decl "simple_polygon_2d" polygon_attributes nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (i skolem-const-decl "below(G`num_vertices)" polygon_attributes
       nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (polygon_edges_do_not_cross? const-decl "bool" polygons_2d nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (is_point_on_segment? const-decl "bool" segments_2d line_segments)
    (is_point_on_segment? const-decl "bool" segments_2d line_segments)
    (are_vectors_collinear? const-decl
     "{b: bool | b = (abs(v1 * v2) = norm(v1) * norm(v2))}"
     vectors_cross_2d line_segments)
    (cross const-decl "real" vectors_cross_2d line_segments)
    (* const-decl "real" vectors_2D vectors)
    (vector_from_point_to_point const-decl "vector_2d" vectors_cross_2d
     line_segments)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil))
   shostak))
 (min_edge_sep_all_points 0
  (min_edge_sep_all_points-1 nil 3874129020
   ("" (auto-rewrite "is_point_on_seg_equiv")
    (("" (skeep)
      (("" (typepred "min_edge_sep(G)")
        (("" (lemma "endpoint_nearest_point_between_segments")
          ((""
            (inst - "edges_of_polygon(G)(i)" "edges_of_polygon(G)(j)"
             "p" "q")
            (("" (expand "nearest_endpoint_cond")
              (("" (ground)
                (("1" (skeep)
                  (("1" (lemma "only_adjacent_edges_intersect")
                    (("1" (inst - "G" "i" "j")
                      (("1" (assert)
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (expand "equal_or_adjacent_edge?")
                              (("1"
                                (hide-all-but (-1 1 2 3))
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep - t)
                  (("2" (expand "segment_endpoint?")
                    (("2" (expand "edges_of_polygon" -1)
                      (("2" (split -1)
                        (("1" (inst - "i" "j")
                          (("1" (assert)
                            (("1" (inst?)
                              (("1"
                                (rewrite "norm_sym")
                                (("1" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst - "next_index(G,i)" "j")
                          (("2" (assert)
                            (("2" (inst?)
                              (("2"
                                (rewrite "norm_sym")
                                (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skeep - t)
                  (("3" (expand "segment_endpoint?")
                    (("3" (expand "edges_of_polygon" -1)
                      (("3" (rewrite "norm_sym")
                        (("3" (split -1)
                          (("1" (inst - "j" "i")
                            (("1" (ground)
                              (("1"
                                (inst?)
                                (("1" (ground) nil nil))
                                nil)
                               ("2"
                                (replace -1 3)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst - "next_index(G,j)" "i")
                            (("2" (ground)
                              (("1"
                                (inst?)
                                (("1" (ground) nil nil))
                                nil)
                               ("2"
                                (replace -1 2)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((endpoint_nearest_point_between_segments formula-decl nil
     nearest_segment_points line_segments)
    (nearest_endpoint_cond const-decl "bool" nearest_segment_points
     line_segments)
    (next_prev_is_original formula-decl nil polygons_2d nil)
    (prev_next_is_original formula-decl nil polygons_2d nil)
    (norm_sym formula-decl nil vectors_2D vectors)
    (segment_endpoint? const-decl "bool" segments_2d line_segments)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (equal_or_adjacent_edge? const-decl "bool" polygons_2d nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (is_point_on_seg_equiv formula-decl nil segments_2d line_segments)
    (only_adjacent_edges_intersect formula-decl nil polygons_2d nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list
     line_segments)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (point_2d type-eq-decl nil vectors_cross_2d line_segments)
    (segment_2d type-eq-decl nil segments_2d line_segments)
    (point_on_segment? const-decl "bool" segments_2d line_segments)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (<= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (min_edge_sep const-decl "{D_min: posreal |
   FORALL (i, j: below(G`num_vertices)):
     j /= i AND j /= prev_index(G, i) IMPLIES
      FORALL (p: point_2d):
        point_on_segment?(p, edges_of_polygon(G)(j)) IMPLIES
         D_min <= norm(G`vertices(i) - p)}" polygon_attributes nil))
   shostak))
 (sines_of_edge_angles_TCC1 0
  (sines_of_edge_angles_TCC1-2 nil 3874129020
   ("" (skeep*)
    (("" (lemma "vertex_neq_prev")
      (("" (inst - "G" "i") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((vertex_neq_prev formula-decl nil polygons_2d nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list
     line_segments)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (sines_of_edge_angles subtype
    "(vectors_2D.-)(polygon_attributes.u, polygon_attributes.v)"
    "Nz_vector"))
  (sines_of_edge_angles_TCC1-1 nil 3874128226
   ("" (subtype-tcc) nil nil) nil nil
   (sines_of_edge_angles subtype
    "(vectors_2D.-)(polygon_attributes.u, polygon_attributes.v)"
    "Nz_vector")))
 (sines_of_edge_angles_TCC2 0
  (sines_of_edge_angles_TCC2-2 nil 3874129020
   ("" (skeep*)
    (("" (lemma "vertex_neq_next")
      (("" (inst - "G" "i") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((vertex_neq_next formula-decl nil polygons_2d nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list
     line_segments)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (sines_of_edge_angles subtype
    "(vectors_2D.-)(polygon_attributes.w, polygon_attributes.v)"
    "Nz_vector"))
  (sines_of_edge_angles_TCC2-1 nil 3874128226
   ("" (subtype-tcc) nil nil) nil nil
   (sines_of_edge_angles subtype
    "(vectors_2D.-)(polygon_attributes.w, polygon_attributes.v)"
    "Nz_vector")))
 (sines_of_edge_angles_nonempty 0
  (sines_of_edge_angles_nonempty-1 nil 3874129020
   ("" (skeep)
    (("" (expand "empty?")
      (("" (typepred "G")
        (("" (expand "simple_polygon_2d?")
          (("" (typepred "G`num_vertices")
            ((""
              (case "G`vertices(0) /= G`vertices(1) and G`vertices(2) /= G`vertices(1)")
              (("1" (flatten)
                (("1" (hide -2)
                  (("1"
                    (inst - "IF cross(^(G`vertices(0) - G`vertices(1)),
                            ^(G`vertices(2) - G`vertices(1))) < 0
                       OR
                       ^(G`vertices(0) - G`vertices(1)) *
                        ^(G`vertices(2) - G`vertices(1))
                        < 0
                     THEN 1
                   ELSE cross(^(G`vertices(0) - G`vertices(1)),
                              ^(G`vertices(2) - G`vertices(1)))
                   ENDIF")
                    (("1" (expand "sines_of_edge_angles")
                      (("1" (expand "member")
                        (("1" (expand "prev_index")
                          (("1" (expand "next_index")
                            (("1" (inst + "1") (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (ground) nil nil) ("3" (ground) nil nil)
                     ("4" (ground) nil nil) ("5" (ground) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "vertex_neq_next")
                (("2" (inst-cp - "G" "0")
                  (("1" (inst - "G" "1")
                    (("1" (hide -4 -5) (("1" (grind) nil nil)) nil)
                     ("2" (assert) nil nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil)
               ("3" (assert) nil nil) ("4" (assert) nil nil)
               ("5" (assert) nil nil) ("6" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (point_2d type-eq-decl nil vectors_cross_2d line_segments)
    (/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sines_of_edge_angles const-decl "finite_set[real]"
     polygon_attributes nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (member const-decl "bool" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (vector_2d type-eq-decl nil vectors_cross_2d line_segments)
    (cross const-decl "real" vectors_cross_2d line_segments)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (G skolem-const-decl "simple_polygon_2d" polygon_attributes nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (vertex_neq_next formula-decl nil polygons_2d nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list
     line_segments)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil))
   shostak))
 (min_edge_angle_sine_TCC1 0
  (min_edge_angle_sine_TCC1-2 nil 3874129020
   ("" (skeep) (("" (use "sines_of_edge_angles_nonempty") nil nil))
    nil)
   ((simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list
     line_segments)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (sines_of_edge_angles_nonempty formula-decl nil polygon_attributes
     nil))
   shostak
   (min_edge_angle_sine subtype
    "polygon_attributes.sines_of_edge_angles(polygon_attributes.G)"
    "non_empty_finite_set[real]"))
  (min_edge_angle_sine_TCC1-1 nil 3874128226 ("" (subtype-tcc) nil nil)
   nil nil
   (min_edge_angle_sine subtype
    "polygon_attributes.sines_of_edge_angles(polygon_attributes.G)"
    "non_empty_finite_set[real]")))
 (min_edge_angle_sine_TCC2 0
  (min_edge_angle_sine_TCC2-2 nil 3874129020
   ("" (skeep)
    (("" (case "min[real, <=](sines_of_edge_angles(G)) > 0")
      (("1" (assert)
        (("1" (hide -)
          (("1" (typepred "min[real, <=](sines_of_edge_angles(G))")
            (("1"
              (name-replace "m"
               "min[real, <=](sines_of_edge_angles(G))")
              (("1" (hide -2)
                (("1" (expand "sines_of_edge_angles")
                  (("1" (skeep)
                    (("1" (lift-if)
                      (("1" (ground)
                        (("1"
                          (case "cross(^(G`vertices(prev_index(G, i)) - G`vertices(i)),
                      ^(G`vertices(next_index(G, i)) - G`vertices(i))) =
          vsin(^(G`vertices(prev_index(G, i)) - G`vertices(i)),
                      ^(G`vertices(next_index(G, i)) - G`vertices(i)))")
                          (("1"
                            (typepred
                             "vsin(^(G`vertices(prev_index(G, i)) - G`vertices(i)),
                  ^(G`vertices(next_index(G, i)) - G`vertices(i)))")
                            (("1" (ground) nil nil)) nil)
                           ("2" (expand "vsin")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (typepred "min[real, <=](sines_of_edge_angles(G))")
          (("2" (hide -2)
            (("2"
              (name-replace "m"
               "min[real, <=](sines_of_edge_angles(G))")
              (("2" (expand "sines_of_edge_angles")
                (("2" (skeep)
                  (("2" (lift-if)
                    (("2" (ground)
                      (("2" (case "m = 0")
                        (("1" (use "cross_eq_0_imp_dot_neg")
                          (("1" (ground)
                            (("1" (skeep)
                              (("1"
                                (lemma "next_edge_not_dir_parallel")
                                (("1"
                                  (inst - "G" "prev_index(G, i)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "edges_of_polygon")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide-all-but (-1 1))
                                          (("1"
                                            (rewrite
                                             "dir_parallel_diff")
                                            (("1"
                                              (expand "dir_parallel?")
                                              (("1"
                                                (expand "^")
                                                (("1"
                                                  (cross-mult -1)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (splash
                                                       :reverse?
                                                       t)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (mult-cases 1)
                                                        (("2"
                                                          (cross-mult
                                                           1)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (ground) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (use "sines_of_edge_angles_nonempty") nil nil))
      nil))
    nil)
   ((sines_of_edge_angles const-decl "finite_set[real]"
     polygon_attributes nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list
     line_segments)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (min const-decl
         "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (vsin const-decl "{x: real | -1 <= x AND x <= 1}" vectors_2d_trig
     line_segments)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "Vector" vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (cross const-decl "real" vectors_cross_2d line_segments)
    (vector_2d type-eq-decl nil vectors_cross_2d line_segments)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cross_eq_0_imp_dot_neg formula-decl nil vectors_cross_2d
     line_segments)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (scal_div_mult_left formula-decl nil vectors_2D vectors)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (* const-decl "Vector" vectors_2D vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (times_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (norm_vertex_diff_next_pos formula-decl nil polygons_2d nil)
    (pos_times_gt formula-decl nil real_props nil)
    (norm_vertex_diff_prev_pos formula-decl nil polygons_2d nil)
    (a skolem-const-decl "posreal" polygon_attributes nil)
    (i skolem-const-decl "below(G`num_vertices)" polygon_attributes
       nil)
    (G skolem-const-decl "simple_polygon_2d" polygon_attributes nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dir_parallel_diff formula-decl nil vectors_cross_2d line_segments)
    (point_2d type-eq-decl nil vectors_cross_2d line_segments)
    (next_prev_is_original formula-decl nil polygons_2d nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (next_edge_not_dir_parallel formula-decl nil polygons_2d nil)
    (sines_of_edge_angles_nonempty formula-decl nil polygon_attributes
     nil))
   shostak
   (min_edge_angle_sine subtype
    "number_fields./(finite_sets_minmax[real, reals.<=].min(polygon_attributes.sines_of_edge_angles(polygon_attributes.G)), 2)"
    "{a: real_types.posreal | reals.<=(a, 1/2)}"))
  (min_edge_angle_sine_TCC2-1 nil 3874128226 ("" (subtype-tcc) nil nil)
   nil nil
   (min_edge_angle_sine subtype
    "number_fields./(finite_sets_minmax[real, reals.<=].min(polygon_attributes.sines_of_edge_angles(polygon_attributes.G)), 2)"
    "{a: real_types.posreal | reals.<=(a, 1/2)}")))
 (edge_angle_sine_sq_bound 0
  (edge_angle_sine_sq_bound-1 nil 3874129020
   ("" (skeep)
    (("" (typepred "min_edge_angle_sine(G)")
      (("" (expand "sq") (("" (mult-cases 1) nil nil)) nil)) nil))
    nil)
   ((min_edge_angle_sine const-decl "{a: posreal | a <= 1 / 2}"
     polygon_attributes nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list
     line_segments)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (gt_times_gt_any1 formula-decl nil extra_real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sq const-decl "nonneg_real" sq reals))
   shostak))
 (sines_of_inward_edge_angles_TCC1 0
  (sines_of_inward_edge_angles_TCC1-2 nil 3874129020
   ("" (skeep*)
    (("" (lemma "vertex_neq_next")
      (("" (inst - "G" "i") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((vertex_neq_next formula-decl nil polygons_2d nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list
     line_segments)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (sines_of_inward_edge_angles subtype
    "(vectors_2D.-)(polygon_attributes.u, polygon_attributes.v)"
    "Nz_vector"))
  (sines_of_inward_edge_angles_TCC1-1 nil 3874128226
   ("" (subtype-tcc) nil nil) nil nil
   (sines_of_inward_edge_angles subtype
    "(vectors_2D.-)(polygon_attributes.u, polygon_attributes.v)"
    "Nz_vector")))
 (sines_of_inward_edge_angles_TCC2 0
  (sines_of_inward_edge_angles_TCC2-2 nil 3874129020
   ("" (skeep*)
    (("" (lemma "vertex_neq_prev")
      (("" (inst - "G" "i") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((vertex_neq_prev formula-decl nil polygons_2d nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list
     line_segments)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (sines_of_inward_edge_angles subtype
    "(vectors_2D.-)(polygon_attributes.w, polygon_attributes.v)"
    "Nz_vector"))
  (sines_of_inward_edge_angles_TCC2-1 nil 3874128226
   ("" (subtype-tcc) nil nil) nil nil
   (sines_of_inward_edge_angles subtype
    "(vectors_2D.-)(polygon_attributes.w, polygon_attributes.v)"
    "Nz_vector")))
 (sines_of_inward_edge_angles_nonempty 0
  (sines_of_inward_edge_angles_nonempty-1 nil 3874129020
   ("" (skeep)
    (("" (expand "empty?")
      (("" (typepred "G")
        (("" (expand "simple_polygon_2d?")
          (("" (typepred "G`num_vertices")
            ((""
              (case "G`vertices(0) /= G`vertices(1) and G`vertices(2) /= G`vertices(1)")
              (("1" (flatten)
                (("1" (hide -2)
                  (("1"
                    (inst - "IF cross(^(G`vertices(2) - G`vertices(1)),
                                    ^(G`vertices(0) - G`vertices(1))) < 0
                               OR
                               ^(G`vertices(2) - G`vertices(1)) *
                                ^(G`vertices(0) - G`vertices(1))
                                < 0
                             THEN 1
                           ELSE cross(^(G`vertices(2) - G`vertices(1)),
                                      ^(G`vertices(0) - G`vertices(1)))
                           ENDIF")
                    (("1" (expand "sines_of_inward_edge_angles")
                      (("1" (expand "member")
                        (("1" (expand "prev_index")
                          (("1" (expand "next_index")
                            (("1" (inst + "1") (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (ground) nil nil) ("3" (ground) nil nil)
                     ("4" (ground) nil nil) ("5" (ground) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "vertex_neq_next")
                (("2" (inst-cp - "G" "0")
                  (("1" (inst - "G" "1")
                    (("1" (hide -4 -5) (("1" (grind) nil nil)) nil)
                     ("2" (assert) nil nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil)
               ("3" (assert) nil nil) ("4" (assert) nil nil)
               ("5" (assert) nil nil) ("6" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (point_2d type-eq-decl nil vectors_cross_2d line_segments)
    (/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sines_of_inward_edge_angles const-decl "finite_set[real]"
     polygon_attributes nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (member const-decl "bool" sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (vector_2d type-eq-decl nil vectors_cross_2d line_segments)
    (cross const-decl "real" vectors_cross_2d line_segments)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (G skolem-const-decl "simple_polygon_2d" polygon_attributes nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (vertex_neq_next formula-decl nil polygons_2d nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list
     line_segments)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil))
   shostak))
 (min_inward_edge_angle_sine_TCC1 0
  (min_inward_edge_angle_sine_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (use "sines_of_inward_edge_angles_nonempty") nil nil)) nil)
   ((simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list
     line_segments)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (sines_of_inward_edge_angles_nonempty formula-decl nil
     polygon_attributes nil))
   shostak
   (min_inward_edge_angle_sine subtype
    "polygon_attributes.sines_of_inward_edge_angles(polygon_attributes.G)"
    "non_empty_finite_set[real]"))
  (min_inward_edge_angle_sine_TCC1-1 nil 3874128226
   ("" (subtype-tcc) nil nil) nil nil
   (min_inward_edge_angle_sine subtype
    "polygon_attributes.sines_of_inward_edge_angles(polygon_attributes.G)"
    "non_empty_finite_set[real]")))
 (min_inward_edge_angle_sine_TCC2 0
  (min_inward_edge_angle_sine_TCC2-2 nil 3874129020
   ("" (skeep)
    (("" (case "min[real, <=](sines_of_inward_edge_angles(G)) > 0")
      (("1" (assert)
        (("1" (hide -)
          (("1"
            (typepred "min[real, <=](sines_of_inward_edge_angles(G))")
            (("1"
              (name-replace "m"
               "min[real, <=](sines_of_inward_edge_angles(G))")
              (("1" (hide -2)
                (("1" (expand "sines_of_inward_edge_angles")
                  (("1" (skeep)
                    (("1" (lift-if)
                      (("1" (ground)
                        (("1"
                          (case "cross(^(G`vertices(next_index(G, i)) - G`vertices(i)),
                                                 ^(G`vertices(prev_index(G, i)) - G`vertices(i))) =
                                     vsin(^(G`vertices(next_index(G, i)) - G`vertices(i)),
                                                 ^(G`vertices(prev_index(G, i)) - G`vertices(i)))")
                          (("1"
                            (typepred
                             "vsin(^(G`vertices(next_index(G, i)) - G`vertices(i)),
                                    ^(G`vertices(prev_index(G, i)) - G`vertices(i)))")
                            (("1" (ground) nil nil)) nil)
                           ("2" (expand "vsin")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2"
          (typepred "min[real, <=](sines_of_inward_edge_angles(G))")
          (("2" (hide -2)
            (("2"
              (name-replace "m"
               "min[real, <=](sines_of_inward_edge_angles(G))")
              (("2" (expand "sines_of_inward_edge_angles")
                (("2" (skeep)
                  (("2" (lift-if)
                    (("2" (ground)
                      (("2" (case "m = 0")
                        (("1" (use "cross_eq_0_imp_dot_neg")
                          (("1" (ground)
                            (("1" (skeep)
                              (("1"
                                (lemma "prev_edge_not_dir_parallel")
                                (("1"
                                  (inst - "G" "i")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "edges_of_polygon")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide-all-but (-1 1))
                                          (("1"
                                            (rewrite
                                             "dir_parallel_diff")
                                            (("1"
                                              (expand "dir_parallel?")
                                              (("1"
                                                (expand "^")
                                                (("1"
                                                  (cross-mult -1)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (splash
                                                       :reverse?
                                                       t)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (hide -)
                                                        (("2"
                                                          (mult-cases
                                                           1)
                                                          (("2"
                                                            (cross-mult
                                                             1)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (ground) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (use "sines_of_inward_edge_angles_nonempty") nil nil))
      nil))
    nil)
   ((sines_of_inward_edge_angles const-decl "finite_set[real]"
     polygon_attributes nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list
     line_segments)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (min const-decl
         "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (vsin const-decl "{x: real | -1 <= x AND x <= 1}" vectors_2d_trig
     line_segments)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "Vector" vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (cross const-decl "real" vectors_cross_2d line_segments)
    (vector_2d type-eq-decl nil vectors_cross_2d line_segments)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cross_eq_0_imp_dot_neg formula-decl nil vectors_cross_2d
     line_segments)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (scal_div_mult_left formula-decl nil vectors_2D vectors)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (* const-decl "Vector" vectors_2D vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (times_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (norm_vertex_diff_next_pos formula-decl nil polygons_2d nil)
    (pos_times_gt formula-decl nil real_props nil)
    (norm_vertex_diff_prev_pos formula-decl nil polygons_2d nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (a skolem-const-decl "posreal" polygon_attributes nil)
    (i skolem-const-decl "below(G`num_vertices)" polygon_attributes
       nil)
    (G skolem-const-decl "simple_polygon_2d" polygon_attributes nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dir_parallel_diff formula-decl nil vectors_cross_2d line_segments)
    (point_2d type-eq-decl nil vectors_cross_2d line_segments)
    (next_prev_is_original formula-decl nil polygons_2d nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (prev_edge_not_dir_parallel formula-decl nil polygons_2d nil)
    (sines_of_inward_edge_angles_nonempty formula-decl nil
     polygon_attributes nil))
   shostak
   (min_inward_edge_angle_sine subtype
    "number_fields./(finite_sets_minmax[real, reals.<=].min(polygon_attributes.sines_of_inward_edge_angles(polygon_attributes.G)), 2)"
    "{a: real_types.posreal | reals.<=(a, number_fields./(1, 2))}"))
  (min_inward_edge_angle_sine_TCC2-1 nil 3874128226
   ("" (subtype-tcc) nil nil) nil nil
   (min_inward_edge_angle_sine subtype
    "number_fields./(finite_sets_minmax[real, reals.<=].min(polygon_attributes.sines_of_inward_edge_angles(polygon_attributes.G)), 2)"
    "{a: real_types.posreal | reals.<=(a, number_fields./(1, 2))}")))
 (in_out_offset_lt_min_edge_sep 0
  (in_out_offset_lt_min_edge_sep-1 nil 3874129020
   ("" (skeep)
    (("" (expand "in_out_edge_offset_dist")
      (("" (expand "inward_edge_offset_dist")
        (("" (expand "outward_edge_offset_dist")
          ((""
            (equate
             "min(scaled_min_edge_sep(G) * min_inward_edge_angle_sine(G),
          scaled_min_edge_sep(G) * min_edge_angle_sine(G))"
             "scaled_min_edge_sep(G) * min(min_inward_edge_angle_sine(G),
          min_edge_angle_sine(G))")
            (("1"
              (case "min(min_inward_edge_angle_sine(G), min_edge_angle_sine(G)) <= 1/2")
              (("1" (expand "scaled_min_edge_sep")
                (("1" (cancel-by 1 "min_edge_sep(G)") nil nil)) nil)
               ("2" (expand "scaled_min_edge_sep")
                (("2" (cancel-by 2 "min_edge_sep(G)") nil nil)) nil))
              nil)
             ("2" (hide 2)
              (("2" (expand "min")
                (("2" (apply (repeat (lift-if)))
                  (("2" (ground)
                    (("1" (mult-cases -1) nil nil)
                     ("2" (mult-cases 2)
                      (("2" (expand "abs") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((in_out_edge_offset_dist const-decl "posreal" polygon_attributes
     nil)
    (outward_edge_offset_dist const-decl "posreal" polygon_attributes
     nil)
    (gt_times_gt_any1 formula-decl nil extra_real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (gt_times_gt_any2 formula-decl nil extra_real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (point_2d type-eq-decl nil vectors_cross_2d line_segments)
    (segment_2d type-eq-decl nil segments_2d line_segments)
    (point_on_segment? const-decl "bool" segments_2d line_segments)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (min_edge_sep const-decl "{D_min: posreal |
   FORALL (i, j: below(G`num_vertices)):
     j /= i AND j /= prev_index(G, i) IMPLIES
      FORALL (p: point_2d):
        point_on_segment?(p, edges_of_polygon(G)(j)) IMPLIES
         D_min <= norm(G`vertices(i) - p)}" polygon_attributes nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (min_edge_angle_sine const-decl "{a: posreal | a <= 1 / 2}"
     polygon_attributes nil)
    (min_inward_edge_angle_sine const-decl "{a: posreal | a <= 1 / 2}"
     polygon_attributes nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (scaled_min_edge_sep const-decl "posreal" polygon_attributes nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list
     line_segments)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (inward_edge_offset_dist const-decl "posreal" polygon_attributes
     nil))
   shostak))
 (ccw_imp_cross_topleft_edges_neg 0
  (ccw_imp_cross_topleft_edges_neg-1 nil 3874129020
   ("" (skeep)
    (("" (lemma "topleft_vertex_bounds_vertices")
      (("" (inst - "G" "G`vertices(i)")
        (("1" (assert)
          (("1" (inst-cp - "s`p1")
            (("1" (inst - "e`p2")
              (("1" (expand "ccw_vertex_order?")
                (("1" (expand "point_between_edges?")
                  (("1" (replace -3 :dir rl)
                    (("1" (replace -4 :dir rl)
                      (("1" (replace -5 :dir rl)
                        (("1" (equate "G`vertices(i)" "e`p1")
                          (("1" (case-replace "s`p2 = e`p1")
                            (("1" (hide -4 -5 -6)
                              (("1"
                                (rewrite "between_rays_equiv")
                                (("1"
                                  (expand "reverse_segment")
                                  (("1"
                                    (replace -1 :hide? t)
                                    (("1"
                                      (expand "point_between_rays?")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (name-replace*
                                           ("a"
                                            "s`p1"
                                            "b"
                                            "e`p1"
                                            "c"
                                            "e`p2"))
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide -1 -2 -3)
                                              (("1"
                                                (expand "cross")
                                                (("1"
                                                  (expand "-" -)
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (split -2)
                                                      (("1"
                                                        (case
                                                         "(a - b)`x > 0 & (c - b)`y < 0 & (a - b)`y > 0 & (c - b)`x > 0")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (move-terms
                                                             1
                                                             l
                                                             2)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (mult-cases
                                                                 1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (split -3)
                                                        (("1"
                                                          (grind)
                                                          (("1"
                                                            (factor
                                                             1
                                                             l
                                                             (1 3))
                                                            (("1"
                                                              (factor
                                                               1
                                                               l
                                                               (2 3))
                                                              (("1"
                                                                (equate
                                                                 "b`y - c`y"
                                                                 "-(c`y - b`y)"
                                                                 (assert))
                                                                (("1"
                                                                  (name-replace
                                                                   "k"
                                                                   "c`y - b`y")
                                                                  (("1"
                                                                    (cancel-by
                                                                     1
                                                                     "k")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-4 -5 1))
                              (("2" (grind) nil nil)) nil))
                            nil)
                           ("2" (replace -5)
                            (("2" (hide-all-but 1)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (replace -4)
                (("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (replace -2)
              (("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((topleft_vertex_bounds_vertices formula-decl nil topleft_vertex
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (e skolem-const-decl "segment_2d" polygon_attributes nil)
    (point_between_edges? const-decl "bool" polygon_attributes nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (reverse_segment const-decl "segment_2d" segments_2d line_segments)
    (point_between_rays? const-decl "bool" between_rays line_segments)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (- const-decl "Vector" vectors_2D vectors)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (both_sides_times_neg_ge1_imp formula-decl nil extra_real_props
     nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (div_22 skolem-const-decl "real" polygon_attributes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (div_mult_neg_le1 formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cross const-decl "real" vectors_cross_2d line_segments)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sub_cancel formula-decl nil vectors_2D vectors)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (between_rays_equiv formula-decl nil between_rays line_segments)
    (Vector type-eq-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (s skolem-const-decl "segment_2d" polygon_attributes nil)
    (segment_2d type-eq-decl nil segments_2d line_segments)
    (/= const-decl "boolean" notequal nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list
     line_segments)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d line_segments)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (vertex? const-decl "pred[point_2d]" polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (G skolem-const-decl "simple_polygon_2d" polygon_attributes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (i skolem-const-decl "below(G`num_vertices)" polygon_attributes
       nil))
   shostak))
 (cross_topleft_edges_neg_imp_ccw 0
  (cross_topleft_edges_neg_imp_ccw-1 nil 3874129020
   ("" (skeep)
    (("" (lemma "topleft_vertex_bounds_vertices")
      (("" (inst - "G" "G`vertices(i)")
        (("1" (assert)
          (("1" (inst-cp - "s`p1")
            (("1" (inst - "e`p2")
              (("1" (expand "ccw_vertex_order?")
                (("1" (expand "point_between_edges?")
                  (("1" (replace -3 :dir rl)
                    (("1" (replace -4 :dir rl)
                      (("1" (replace -5 :dir rl)
                        (("1" (equate "G`vertices(i)" "e`p1")
                          (("1" (case-replace "s`p2 = e`p1")
                            (("1" (hide -4 -5 -6)
                              (("1"
                                (rewrite "between_rays_equiv")
                                (("1"
                                  (expand "reverse_segment")
                                  (("1"
                                    (replace -1 :hide? t)
                                    (("1"
                                      (expand "point_between_rays?")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (name-replace*
                                           ("a"
                                            "s`p1"
                                            "b"
                                            "e`p1"
                                            "c"
                                            "e`p2"))
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide -1 -2 -3)
                                              (("1"
                                                (expand "cross")
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (split -2)
                                                    (("1"
                                                      (expand "-" +)
                                                      (("1"
                                                        (case
                                                         "(a - b)`x > 0 & (c - b)`y >= 0 & (a - b)`y <= 0 & (c - b)`x > 0")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (case
                                                             "(a - b)`x * (c - b)`y >= 0 & (a - b)`y * (c - b)`x <= 0")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (ground)
                                                              (("1"
                                                                (mult-cases
                                                                 1)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (mult-cases
                                                                 1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (grind)
                                                        (("2"
                                                          (factor
                                                           -4
                                                           l
                                                           (1 3))
                                                          (("2"
                                                            (factor
                                                             -4
                                                             l
                                                             (2 3))
                                                            (("2"
                                                              (equate
                                                               "a`x * (a`y - b`y)"
                                                               "-(a`x * (b`y - a`y))"
                                                               (assert))
                                                              (("2"
                                                                (move-terms
                                                                 -4
                                                                 l
                                                                 2)
                                                                (("2"
                                                                  (elim-unary
                                                                   -4)
                                                                  (("2"
                                                                    (cancel-by
                                                                     -4
                                                                     "b`y - a`y")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (split -3)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-4 -5 1))
                              (("2" (grind) nil nil)) nil))
                            nil)
                           ("2" (replace -5)
                            (("2" (hide-all-but 1)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (replace -4)
                (("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (replace -2)
              (("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((topleft_vertex_bounds_vertices formula-decl nil topleft_vertex
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (e skolem-const-decl "segment_2d" polygon_attributes nil)
    (point_between_edges? const-decl "bool" polygon_attributes nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (reverse_segment const-decl "segment_2d" segments_2d line_segments)
    (point_between_rays? const-decl "bool" between_rays line_segments)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (div_23 skolem-const-decl "real" polygon_attributes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (zero_times1 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (pos_div_gt formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "Vector" vectors_2D vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (pos_times_ge formula-decl nil real_props nil)
    (neg_times_le formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cross const-decl "real" vectors_cross_2d line_segments)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sub_cancel formula-decl nil vectors_2D vectors)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (between_rays_equiv formula-decl nil between_rays line_segments)
    (Vector type-eq-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (s skolem-const-decl "segment_2d" polygon_attributes nil)
    (segment_2d type-eq-decl nil segments_2d line_segments)
    (/= const-decl "boolean" notequal nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list
     line_segments)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d line_segments)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (vertex? const-decl "pred[point_2d]" polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (G skolem-const-decl "simple_polygon_2d" polygon_attributes nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (i skolem-const-decl "below(G`num_vertices)" polygon_attributes
       nil))
   shostak))
 (ccw_eqv_cross_topleft_edges_neg 0
  (ccw_eqv_cross_topleft_edges_neg-1 nil 3874129020
   ("" (skeep)
    (("" (skoletin*)
      (("" (use "ccw_imp_cross_topleft_edges_neg")
        (("" (use "cross_topleft_edges_neg_imp_ccw")
          (("" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list
     line_segments)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (leftmost_vertex_val const-decl "real" topleft_vertex nil)
    (topleft_vertex_val const-decl "real" topleft_vertex nil)
    (topleft_vertex_idx const-decl "{i: below(p`num_vertices) |
   p`vertices(i)`x = leftmost_vertex_val(p) AND
    p`vertices(i)`y = topleft_vertex_val(p)}" topleft_vertex nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (cross const-decl "real" vectors_cross_2d line_segments)
    (vector_2d type-eq-decl nil vectors_cross_2d line_segments)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (segment_2d type-eq-decl nil segments_2d line_segments)
    (/= const-decl "boolean" notequal nil)
    (point_2d type-eq-decl nil vectors_cross_2d line_segments)
    (cross_topleft_edges_neg_imp_ccw formula-decl nil
     polygon_attributes nil)
    (ccw_imp_cross_topleft_edges_neg formula-decl nil
     polygon_attributes nil))
   shostak))
 (nearby_pt_between_edges_not_on_perim 0
  (nearby_pt_between_edges_not_on_perim-1 nil 3874129020
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (expand "point_on_polygon_perimeter?")
          (("" (skeep)
            (("" (case-replace "e!1 = e")
              (("1" (use "on_segment_not_between_rays")
                (("1" (ground)
                  (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil))
                nil)
               ("2" (case-replace "e!1 = s")
                (("1" (use "on_segment_not_between_rays")
                  (("1" (ground)
                    (("1" (hide -3) (("1" (grind) nil nil)) nil)) nil))
                  nil)
                 ("2" (typepred "e!1")
                  (("2" (expand "edge_of_polygon?")
                    (("2" (skeep)
                      (("2" (lemma "min_edge_separation_is_min")
                        (("2" (inst - "G" "i" "i!1")
                          (("2" (assert)
                            (("2" (inst - "p")
                              (("2"
                                (ground)
                                (("2"
                                  (rewrite "norm_sym")
                                  (("2"
                                    (expand "edges_of_polygon")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (point_2d type-eq-decl nil vectors_cross_2d line_segments)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d line_segments)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list
     line_segments)
    (below type-eq-decl nil naturalnumbers nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (min_edge_separation const-decl "posreal" polygon_attributes nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "Vector" vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (between_rays? const-decl "bool" between_rays line_segments)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cross const-decl "real" vectors_cross_2d line_segments)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (point_on_segment? const-decl "bool" segments_2d line_segments)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (on_segment_not_between_rays formula-decl nil between_rays
     line_segments)
    (norm_sym formula-decl nil vectors_2D vectors)
    (min_edge_separation_is_min formula-decl nil polygon_attributes
     nil))
   shostak))
 (miter_point_between_edges_TCC1 0
  (miter_point_between_edges_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (lemma "vertex_neq_prev")
      (("" (inst - "G" "i") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((vertex_neq_prev formula-decl nil polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list
     line_segments)
    (upfrom nonempty-type-eq-decl nil integers nil))
   shostak
   (miter_point_between_edges subtype
    "polygon_attributes.G`vertices(polygons_2d.prev_index(polygon_attributes.G, polygon_attributes.i))"
    "{p: vectors_cross_2d.point_2d | p /= polygon_attributes.G`vertices(polygon_attributes.i)}"))
  (miter_point_between_edges_TCC1-1 nil 3874128226
   ("" (subtype-tcc) nil nil) nil nil
   (miter_point_between_edges subtype
    "polygon_attributes.G`vertices(polygons_2d.prev_index(polygon_attributes.G, polygon_attributes.i))"
    "{p: vectors_cross_2d.point_2d | p /= polygon_attributes.G`vertices(polygon_attributes.i)}")))
 (miter_point_between_edges_TCC2 0
  (miter_point_between_edges_TCC2-2 nil 3874129020
   ("" (skeep)
    (("" (ground)
      (("1" (lemma "vertex_neq_next")
        (("1" (inst - "G" "i") (("1" (ground) nil nil)) nil)) nil)
       ("2" (use "prev_edge_not_dir_parallel")
        (("2" (assert)
          (("2" (expand "edges_of_polygon")
            (("2" (assert)
              (("2" (rewrite "dir_parallel_diff")
                (("2" (rewrite* "dir_parallel_eqv_normalized_diffs_eq")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list
     line_segments)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (vertex_neq_next formula-decl nil polygons_2d nil)
    (next_prev_is_original formula-decl nil polygons_2d nil)
    (vertex_neq_prev_2 formula-decl nil polygons_2d nil)
    (vertex_neq_next_2 formula-decl nil polygons_2d nil)
    (dir_parallel_eqv_normalized_diffs_eq formula-decl nil
     vectors_cross_2d line_segments)
    (TRUE const-decl "bool" booleans nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (point_2d type-eq-decl nil vectors_cross_2d line_segments)
    (dir_parallel_diff formula-decl nil vectors_cross_2d line_segments)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (prev_edge_not_dir_parallel formula-decl nil polygons_2d nil))
   shostak
   (miter_point_between_edges subtype
    "polygon_attributes.G`vertices(polygons_2d.next_index(polygon_attributes.G, polygon_attributes.i))"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= polygon_attributes.G`vertices(polygon_attributes.i), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(polygon_attributes.G`vertices(polygons_2d.prev_index(polygon_attributes.G, polygon_attributes.i)), polygon_attributes.G`vertices(polygon_attributes.i)), (vectors_2D.-)(p, polygon_attributes.G`vertices(polygon_attributes.i)))))}"))
  (miter_point_between_edges_TCC2-1 nil 3874128226
   ("" (subtype-tcc) nil nil) nil nil
   (miter_point_between_edges subtype
    "polygon_attributes.G`vertices(polygons_2d.next_index(polygon_attributes.G, polygon_attributes.i))"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= polygon_attributes.G`vertices(polygon_attributes.i), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(polygon_attributes.G`vertices(polygons_2d.prev_index(polygon_attributes.G, polygon_attributes.i)), polygon_attributes.G`vertices(polygon_attributes.i)), (vectors_2D.-)(p, polygon_attributes.G`vertices(polygon_attributes.i)))))}")))
 (miter_point_between_edges 0
  (miter_point_between_edges-1 nil 3874129020
   ("" (skeep)
    (("" (skoletin)
      (("" (use "miter_point_between_segments")
        (("" (expand "point_between_edges?")
          (("" (expand "edges_of_polygon")
            (("" (assert)
              (("" (replace -2) (("" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list
     line_segments)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (point_2d type-eq-decl nil vectors_cross_2d line_segments)
    (real nonempty-type-from-decl nil reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (miter_point const-decl "point_2d" vectors_2d_trig line_segments)
    (point_between_edges? const-decl "bool" polygon_attributes nil)
    (next_prev_is_original formula-decl nil polygons_2d nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (miter_point_between_segments formula-decl nil between_rays
     line_segments))
   shostak)))

