(polygons_2d
 (prev_index_TCC1 0
  (prev_index_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (prev_index subtype
    "(number_fields.-)(polygons_2d.p`num_vertices, 1)"
    "naturalnumbers.below(polygons_2d.p`num_vertices)"))
  (prev_index_TCC1-1 nil 3874127548 ("" (subtype-tcc) nil nil) nil nil
   (prev_index subtype
    "(number_fields.-)(polygons_2d.p`num_vertices, 1)"
    "naturalnumbers.below(polygons_2d.p`num_vertices)")))
 (prev_index_TCC2 0
  (prev_index_TCC2-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (prev_index subtype "(number_fields.-)(polygons_2d.cur_index, 1)"
    "naturalnumbers.below(polygons_2d.p`num_vertices)"))
  (prev_index_TCC2-1 nil 3874127548 ("" (subtype-tcc) nil nil) nil nil
   (prev_index subtype "(number_fields.-)(polygons_2d.cur_index, 1)"
    "naturalnumbers.below(polygons_2d.p`num_vertices)")))
 (next_index_TCC1 0
  (next_index_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (next_index subtype "0"
    "naturalnumbers.below(polygons_2d.p`num_vertices)"))
  (next_index_TCC1-1 nil 3874127548 ("" (subtype-tcc) nil nil) nil nil
   (next_index subtype "0"
    "naturalnumbers.below(polygons_2d.p`num_vertices)")))
 (next_index_TCC2 0
  (next_index_TCC2-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (next_index subtype "(number_fields.+)(polygons_2d.cur_index, 1)"
    "naturalnumbers.below(polygons_2d.p`num_vertices)"))
  (next_index_TCC2-1 nil 3874127548 ("" (subtype-tcc) nil nil) nil nil
   (next_index subtype "(number_fields.+)(polygons_2d.cur_index, 1)"
    "naturalnumbers.below(polygons_2d.p`num_vertices)")))
 (prev_next_is_original 0
  (prev_next_is_original-1 nil 3874129020 ("" (grind) nil nil) nil
   shostak))
 (next_prev_is_original 0
  (next_prev_is_original-1 nil 3874129020 ("" (grind) nil nil) nil
   shostak))
 (rem_diff_eq_0 0
  (rem_diff_eq_0-1 nil 3874129020
   ("" (skeep)
    (("" (case "i <= j")
      (("1" (equate "b + j - i" "b + (j - i)" (assert))
        (("1" (rewrite "rem_sum1" :dir rl)
          (("1" (rewrite "rem_self")
            (("1" (rewrite "rem_mod") (("1" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (rewrite "rem_mod") (("2" (assert) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (rem_diff_eq_0_shift 0
  (rem_diff_eq_0_shift-1 nil 3874129020
   ("" (skeep)
    (("" (case "i <= j")
      (("1" (rewrite "rem_mod") (("1" (assert) nil nil)) nil)
       ("2" (use "rem_diff_eq_0")
        (("2" (assert)
          (("2" (lemma "rem_sum1")
            (("2" (inst - "b" "b" "j - i")
              (("2" (rewrite "rem_self") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (rem_add1_eq_next_index 0
  (rem_add1_eq_next_index-1 nil 3874129020
   ("" (skeep)
    (("" (expand "next_index")
      (("" (lift-if)
        (("" (ground)
          (("1" (replace -1)
            (("1" (assert) (("1" (rewrite "rem_multiple2") nil nil))
              nil))
            nil)
           ("2" (lemma "rem_sum1")
            (("2" (inst - "G`num_vertices" "G`num_vertices" "1+i")
              (("2" (rewrite "rem_self")
                (("2" (rewrite "rem_mod") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (rem_sum3 0
  (rem_sum3-1 nil 3874129020
   ("" (skeep)
    (("" (lemma "rem_sum1")
      (("" (inst - "b" "j" "i + k") (("" (assert) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (vertex_is_vertex 0
  (vertex_is_vertex-1 nil 3874129020 ("" (grind) nil nil) nil shostak))
 (vertex_is_not_nonvertex 0
  (vertex_is_not_nonvertex-1 nil 3874129020 ("" (grind) nil nil) nil
   shostak))
 (edges_of_polygon_TCC1 0
  (edges_of_polygon_TCC1-2 nil 3874129020
   ("" (skeep 1 t)
    (("" (typepred "polygon`num_vertices" "polygon`vertices")
      (("" (expand "uniq_vertex_list?")
        (("" (inst -2 "next_index(polygon, i)" "i")
          (("1" (assert) nil nil) ("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak
   (edges_of_polygon subtype
    "polygons_2d.polygon`vertices(polygons_2d.next_index(polygons_2d.polygon, polygons_2d.i))"
    "{p: vectors_cross_2d.point_2d | p /= polygons_2d.polygon`vertices(polygons_2d.i)}"))
  (edges_of_polygon_TCC1-1 nil 3874127548 ("" (subtype-tcc) nil nil)
   nil nil
   (edges_of_polygon subtype
    "polygons_2d.polygon`vertices(polygons_2d.next_index(polygons_2d.polygon, polygons_2d.i))"
    "{p: vectors_cross_2d.point_2d | p /= polygons_2d.polygon`vertices(polygons_2d.i)}")))
 (edge_is_edge 0
  (edge_is_edge-1 nil 3874129020 ("" (grind) nil nil) nil shostak))
 (find_helper_TCC1 0
  (find_helper_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (find_helper subtype
    "(number_fields.-)(polygons_2d.p`num_vertices, polygons_2d.idx)"
    "naturalnumber"))
  (find_helper_TCC1-1 nil 3874127548 ("" (subtype-tcc) nil nil) nil nil
   (find_helper subtype
    "(number_fields.-)(polygons_2d.p`num_vertices, polygons_2d.idx)"
    "naturalnumber")))
 (find_helper_TCC2 0
  (find_helper_TCC2-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (find_helper subtype "(number_fields.-)(1)"
    "{i: integers.int | booleans.AND(reals.<=((number_fields.-)(1), i), reals.<(i, polygons_2d.p`num_vertices))}"))
  (find_helper_TCC2-1 nil 3874127548 ("" (subtype-tcc) nil nil) nil nil
   (find_helper subtype "(number_fields.-)(1)"
    "{i: integers.int | booleans.AND(reals.<=((number_fields.-)(1), i), reals.<(i, polygons_2d.p`num_vertices))}")))
 (find_helper_TCC3 0
  (find_helper_TCC3-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (find_helper subtype "polygons_2d.idx"
    "naturalnumbers.below(polygons_2d.p`num_vertices)"))
  (find_helper_TCC3-1 nil 3874127548 ("" (subtype-tcc) nil nil) nil nil
   (find_helper subtype "polygons_2d.idx"
    "naturalnumbers.below(polygons_2d.p`num_vertices)")))
 (find_helper_TCC4 0
  (find_helper_TCC4-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (find_helper subtype "polygons_2d.idx"
    "{i: integers.int | booleans.AND(reals.<=((number_fields.-)(1), i), reals.<(i, polygons_2d.p`num_vertices))}"))
  (find_helper_TCC4-1 nil 3874127548 ("" (subtype-tcc) nil nil) nil nil
   (find_helper subtype "polygons_2d.idx"
    "{i: integers.int | booleans.AND(reals.<=((number_fields.-)(1), i), reals.<(i, polygons_2d.p`num_vertices))}")))
 (find_helper_TCC5 0
  (find_helper_TCC5-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (find_helper subtype "(number_fields.+)(polygons_2d.idx, 1)"
    "naturalnumbers.upto(polygons_2d.p`num_vertices)"))
  (find_helper_TCC5-1 nil 3874127548 ("" (subtype-tcc) nil nil) nil nil
   (find_helper subtype "(number_fields.+)(polygons_2d.idx, 1)"
    "naturalnumbers.upto(polygons_2d.p`num_vertices)")))
 (find_helper_TCC6 0
  (find_helper_TCC6-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (find_helper termination
    "polygons_2d.find_helper(polygons_2d.p, (number_fields.+)(polygons_2d.idx, 1), polygons_2d.point)"
    "nil"))
  (find_helper_TCC6-1 nil 3874127548 ("" (termination-tcc) nil nil) nil
   nil
   (find_helper termination
    "polygons_2d.find_helper(polygons_2d.p, (number_fields.+)(polygons_2d.idx, 1), polygons_2d.point)"
    "nil")))
 (find_helper_invariant_TCC1 0
  (find_helper_invariant_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (find_helper_invariant subtype "polygons_2d.k"
    "naturalnumbers.below(polygons_2d.p`num_vertices)"))
  (find_helper_invariant_TCC1-1 nil 3874127548
   ("" (subtype-tcc) nil nil) nil nil
   (find_helper_invariant subtype "polygons_2d.k"
    "naturalnumbers.below(polygons_2d.p`num_vertices)")))
 (find_helper_invariant_TCC2 0
  (find_helper_invariant_TCC2-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (find_helper_invariant subtype
    "(number_fields.-)((number_fields.-)(polygons_2d.p`num_vertices, 1), polygons_2d.j)"
    "naturalnumbers.below(polygons_2d.p`num_vertices)"))
  (find_helper_invariant_TCC2-1 nil 3874127548
   ("" (subtype-tcc) nil nil) nil nil
   (find_helper_invariant subtype
    "(number_fields.-)((number_fields.-)(polygons_2d.p`num_vertices, 1), polygons_2d.j)"
    "naturalnumbers.below(polygons_2d.p`num_vertices)")))
 (find_helper_invariant 0
  (find_helper_invariant-1 nil 3874129020
   ("" (skeep)
    (("" (generalize "idx" "idx")
      (("1"
        (induct "idx" :name
         "backward_below_induction[1 + p`num_vertices]")
        (("1" (ground) nil nil) ("2" (ground) nil nil)
         ("3" (ground) nil nil)
         ("4" (flatten)
          (("4" (assert)
            (("4" (expand "find_helper") (("4" (propax) nil nil)) nil))
            nil))
          nil)
         ("5" (skeep + t)
          (("5" (assert)
            (("5" (expand "find_helper" +)
              (("5" (apply (repeat (lift-if)))
                (("5" (assert)
                  (("5" (split 1)
                    (("1" (propax) nil nil)
                     ("2" (flatten)
                      (("2" (split -)
                        (("1" (propax) nil nil)
                         ("2" (flatten)
                          (("2" (hide 2)
                            (("2" (ground)
                              (("2"
                                (skeep)
                                (("2"
                                  (case-replace
                                   "j = p`num_vertices - 1 - i")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (inst - "j")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("6" (skeep*) (("6" (assert) nil nil)) nil)
         ("7" (skeep*) (("7" (assert) nil nil)) nil))
        nil)
       ("2" (skeep*) (("2" (assert) nil nil)) nil)
       ("3" (skeep) (("3" (assert) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (find_index_TCC1 0
  (find_index_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (find_index subtype "0"
    "naturalnumbers.upto(polygons_2d.polygon`num_vertices)"))
  (find_index_TCC1-1 nil 3874127548 ("" (subtype-tcc) nil nil) nil nil
   (find_index subtype "0"
    "naturalnumbers.upto(polygons_2d.polygon`num_vertices)")))
 (find_index_TCC2 0
  (find_index_TCC2-2 nil 3874129020
   ("" (skeep)
    (("" (use "find_helper_invariant")
      (("1" (assert)
        (("1" (split -)
          (("1" (flatten) (("1" (assert) nil nil)) nil)
           ("2" (flatten)
            (("2" (assert)
              (("2" (skeep - t)
                (("2" (expand "vertex?")
                  (("2" (skeep)
                    (("2" (inst - "polygon`num_vertices - 1 - i")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   nil shostak
   (find_index subtype
    "polygons_2d.find_helper(polygons_2d.polygon, 0, polygons_2d.point)"
    "{i: integers.int | booleans.OR((booleans.AND(i = (number_fields.-)(1), (booleans.NOT)(EXISTS (v: (polygons_2d.vertex?(polygons_2d.polygon))): v = polygons_2d.point))), (booleans.AND(reals.>=(i, 0), booleans.AND(reals.<(i, polygons_2d.polygon`num_vertices), polygons_2d.polygon`vertices(i) = polygons_2d.point))))}"))
  (find_index_TCC2-1 nil 3874127548 ("" (subtype-tcc) nil nil) nil nil
   (find_index subtype
    "polygons_2d.find_helper(polygons_2d.polygon, 0, polygons_2d.point)"
    "{i: integers.int | booleans.OR((booleans.AND(i = (number_fields.-)(1), (booleans.NOT)(EXISTS (v: (polygons_2d.vertex?(polygons_2d.polygon))): v = polygons_2d.point))), (booleans.AND(reals.>=(i, 0), booleans.AND(reals.<(i, polygons_2d.polygon`num_vertices), polygons_2d.polygon`vertices(i) = polygons_2d.point))))}")))
 (next_index_distinct 0
  (next_index_distinct-1 nil 3874129020 ("" (grind) nil nil) nil
   shostak))
 (vertex_find_helper_TCC1 0
  (vertex_find_helper_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (vertex_find_helper subtype "polygons_2d.j"
    "naturalnumbers.upto(polygons_2d.G`num_vertices)"))
  (vertex_find_helper_TCC1-1 nil 3874127548 ("" (subtype-tcc) nil nil)
   nil nil
   (vertex_find_helper subtype "polygons_2d.j"
    "naturalnumbers.upto(polygons_2d.G`num_vertices)")))
 (vertex_find_helper 0
  (vertex_find_helper-1 nil 3874129020
   ("" (skosimp*)
    (("" (generalize "j!1" "j" "below(G!1`num_vertices)")
      ((""
        (induct "j" :name "backward_below_induction[G!1`num_vertices]")
        (("1" (grind) nil nil)
         ("2" (skosimp*)
          (("2" (expand "find_helper" 1) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (vertex_find_index 0
  (vertex_find_index-1 nil 3874129020
   ("" (skeep)
    (("" (expand "vertex?")
      (("" (skeep)
        (("" (expand "find_index")
          (("" (lemma "vertex_find_helper")
            (("" (inst - "G" "p" "i" "0") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (find_helper_self_TCC1 0
  (find_helper_self_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (find_helper_self subtype "polygons_2d.i"
    "naturalnumbers.upto(polygons_2d.G`num_vertices)"))
  (find_helper_self_TCC1-1 nil 3874127548 ("" (subtype-tcc) nil nil)
   nil nil
   (find_helper_self subtype "polygons_2d.i"
    "naturalnumbers.upto(polygons_2d.G`num_vertices)")))
 (find_helper_self_TCC2 0
  (find_helper_self_TCC2-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (find_helper_self subtype
    "polygons_2d.find_helper(polygons_2d.G, polygons_2d.i, polygons_2d.u)"
    "naturalnumbers.below(polygons_2d.G`num_vertices)"))
  (find_helper_self_TCC2-1 nil 3874127548 ("" (subtype-tcc) nil nil)
   nil nil
   (find_helper_self subtype
    "polygons_2d.find_helper(polygons_2d.G, polygons_2d.i, polygons_2d.u)"
    "naturalnumbers.below(polygons_2d.G`num_vertices)")))
 (find_helper_self 0
  (find_helper_self-1 nil 3874129020
   ("" (skosimp*)
    (("" (generalize "i!1" "i" "below(G!1`num_vertices)")
      (("1"
        (induct "i" :name "backward_below_induction[G!1`num_vertices]")
        (("1" (grind)
          (("1" (expand "find_helper") (("1" (grind) nil nil)) nil))
          nil)
         ("2" (skosimp*)
          (("2" (expand "find_helper" (-2 1)) (("2" (grind) nil nil))
            nil))
          nil)
         ("3" (grind) nil nil))
        nil)
       ("2" (grind) nil nil))
      nil))
    nil)
   nil shostak))
 (find_index_self_TCC1 0
  (find_index_self_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (find_index_self subtype
    "polygons_2d.find_index(polygons_2d.G, polygons_2d.u)"
    "naturalnumbers.below(polygons_2d.G`num_vertices)"))
  (find_index_self_TCC1-1 nil 3874127548 ("" (subtype-tcc) nil nil) nil
   nil
   (find_index_self subtype
    "polygons_2d.find_index(polygons_2d.G, polygons_2d.u)"
    "naturalnumbers.below(polygons_2d.G`num_vertices)")))
 (find_index_self 0
  (find_index_self-1 nil 3874129020
   ("" (skeep)
    (("" (expand "find_index")
      (("" (assert)
        (("" (use "find_helper_self") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (find_index_self_index 0
  (find_index_self_index-1 nil 3874129020
   ("" (skeep)
    (("" (use "find_index_self")
      (("" (ground)
        (("1" (typepred "G`vertices")
          (("1" (expand "uniq_vertex_list?")
            (("1" (inst - "find_index(G, G`vertices(i))" "i")
              (("1" (ground) nil nil)
               ("2" (use "vertex_find_index")
                (("2" (split -1)
                  (("1" (propax) nil nil)
                   ("2" (expand "vertex?") (("2" (inst + "i") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (use "vertex_find_index")
          (("2" (assert)
            (("2" (expand "vertex?") (("2" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (segment_in_edges_TCC1 0
  (segment_in_edges_TCC1-2 nil 3874129020
   ("" (skosimp*)
    (("" (use "next_index_distinct")
      (("" (typepred "G!1`vertices")
        (("" (expand "uniq_vertex_list?")
          (("" (inst?)
            (("" (inst - "find_index(G!1, u!1)")
              (("1" (use "find_index_self") (("1" (assert) nil nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (segment_in_edges subtype "polygons_2d.v"
    "{p: vectors_cross_2d.point_2d | p /= polygons_2d.u}"))
  (segment_in_edges_TCC1-1 nil 3874127548 ("" (subtype-tcc) nil nil)
   nil nil
   (segment_in_edges subtype "polygons_2d.v"
    "{p: vectors_cross_2d.point_2d | p /= polygons_2d.u}")))
 (segment_in_edges 0
  (segment_in_edges-1 nil 3874129020
   ("" (skosimp*)
    (("" (expand "edge_of_polygon?")
      (("" (expand "edges_of_polygon")
        (("" (inst + "find_index(G!1, u!1)")
          (("" (ground)
            (("" (hide -2)
              (("" (expand "find_index")
                (("" (use "find_helper_self") (("" (ground) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (edge_segment_has_vertices 0
  (edge_segment_has_vertices-1 nil 3874129020
   ("" (skosimp*)
    (("" (expand "edge_of_polygon?")
      (("" (skosimp*)
        (("" (expand "edges_of_polygon")
          (("" (replace -1 :dir rl :hide? t)
            (("" (assert)
              (("" (expand "vertex?")
                (("" (ground)
                  (("1" (inst?) nil nil) ("2" (inst?) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (find_index_segment_is_edge 0
  (find_index_segment_is_edge-1 nil 3874129020
   ("" (skosimp*)
    (("" (expand "edges_of_polygon")
      (("" (assert)
        (("" (use "find_index_self") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (vertex_neq_next 0
  (vertex_neq_next-1 nil 3874129020
   ("" (skeep)
    (("" (typepred "G`vertices")
      (("" (expand "uniq_vertex_list?")
        (("" (inst - "i" "next_index(G,i)")
          (("1" (ground) nil nil) ("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (vertex_neq_next_2 0
  (vertex_neq_next_2-1 nil 3874129020
   ("" (skeep)
    (("" (lemma "vertex_neq_next")
      (("" (inst - "G" "i") (("" (assert) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (vertex_neq_prev 0
  (vertex_neq_prev-1 nil 3874129020
   ("" (skeep)
    (("" (typepred "G`vertices")
      (("" (expand "uniq_vertex_list?")
        (("" (inst - "i" "prev_index(G,i)")
          (("1" (ground) nil nil) ("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (vertex_neq_prev_2 0
  (vertex_neq_prev_2-1 nil 3874129020
   ("" (skeep)
    (("" (lemma "vertex_neq_prev")
      (("" (inst - "G" "i") (("" (assert) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (prev_vertex_neq_next_vertex 0
  (prev_vertex_neq_next_vertex-1 nil 3874129020
   ("" (skeep)
    (("" (typepred "G`vertices")
      (("" (expand "uniq_vertex_list?")
        (("" (inst?)
          (("" (inst - "next_index(G,i)")
            (("1" (ground) nil nil)
             ("2" (hide -1)
              (("2" (typepred "G") (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (vertices_diff_next_nonzero 0
  (vertices_diff_next_nonzero-1 nil 3874129020
   ("" (skeep)
    (("" (lemma "vertex_neq_next")
      (("" (inst - "G" "i") (("" (ground) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (vertices_diff_prev_nonzero 0
  (vertices_diff_prev_nonzero-1 nil 3874129020
   ("" (skeep)
    (("" (lemma "vertex_neq_prev")
      (("" (inst - "G" "i") (("" (ground) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (second_edge_does_not_double_back_TCC1 0
  (second_edge_does_not_double_back_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (second_edge_does_not_double_back subtype "polygons_2d.j0"
    "naturalnumbers.below(polygons_2d.G`num_vertices)"))
  (second_edge_does_not_double_back_TCC1-1 nil 3874127548
   ("" (subtype-tcc) nil nil) nil nil
   (second_edge_does_not_double_back subtype "polygons_2d.j0"
    "naturalnumbers.below(polygons_2d.G`num_vertices)")))
 (second_edge_does_not_double_back_TCC2 0
  (second_edge_does_not_double_back_TCC2-2 nil 3874129020
   ("" (skeep)
    (("" (typepred "find_index(G, G`vertices(next_index(G, j0)))")
      (("1" (ground)
        (("1" (inst?)
          (("1" (expand "vertex?") (("1" (inst?) nil nil)) nil)) nil))
        nil)
       ("2" (propax) nil nil))
      nil))
    nil)
   nil shostak
   (second_edge_does_not_double_back subtype "polygons_2d.j"
    "naturalnumbers.below(polygons_2d.G`num_vertices)"))
  (second_edge_does_not_double_back_TCC2-1 nil 3874127548
   ("" (subtype-tcc) nil nil) nil nil
   (second_edge_does_not_double_back subtype "polygons_2d.j"
    "naturalnumbers.below(polygons_2d.G`num_vertices)")))
 (second_edge_does_not_double_back 0
  (second_edge_does_not_double_back-1 nil 3874129020
   ("" (skeep)
    (("" (case "j >= 0")
      (("1" (lemma "find_index_self")
        (("1" (inst - "G" "G`vertices(next_index(G, j0))")
          (("1" (assert)
            (("1" (lemma "find_index_self")
              (("1" (inst - "G" "v0")
                (("1" (assert)
                  (("1" (case "j = next_index(G,j0)")
                    (("1" (replace -1)
                      (("1" (typepred "G`vertices")
                        (("1" (expand "uniq_vertex_list?")
                          (("1"
                            (inst - "j0"
                             "next_index(G, next_index(G, j0))")
                            (("1" (ground) nil nil)
                             ("2" (ground)
                              (("2"
                                (lemma "prev_vertex_neq_next_vertex")
                                (("2"
                                  (inst - "G" "next_index(G,j0)")
                                  (("2"
                                    (ground)
                                    (("2"
                                      (rewrite "prev_next_is_original")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "find_index_segment_is_edge")
                      (("2"
                        (inst - "v0" "G`vertices(next_index(G,j0))"
                         "G")
                        (("2" (assert)
                          (("2" (expand "edges_of_polygon")
                            (("2" (decompose-equality -1)
                              (("2"
                                (typepred "G`vertices")
                                (("2"
                                  (expand "uniq_vertex_list?")
                                  (("2"
                                    (inst - "j" "next_index(G,j0)")
                                    (("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "vertex_find_index")
        (("2" (inst - "G" "G`vertices(next_index(G, j0))")
          (("2" (ground)
            (("2" (expand "vertex?") (("2" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (vertex_on_edge 0
  (vertex_on_edge-1 nil 3874129020
   ("" (skeep)
    (("" (expand "edges_of_polygon")
      (("" (expand "point_on_segment?")
        (("" (inst + "0") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak))
 (next_vertex_on_edge 0
  (next_vertex_on_edge-1 nil 3874129020
   ("" (skeep)
    (("" (expand "edges_of_polygon")
      (("" (expand "point_on_segment?")
        (("" (inst + "1") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak))
 (vertex_on_prev_edge 0
  (vertex_on_prev_edge-1 nil 3874129020
   ("" (skeep)
    (("" (expand "edges_of_polygon")
      (("" (expand "point_on_segment?")
        (("" (inst + "1") (("" (assert) (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (norm_vertex_diff_next_pos 0
  (norm_vertex_diff_next_pos-1 nil 3874129020
   ("" (skeep)
    (("" (use "norm_eq_0")
      (("" (use "vertices_diff_next_nonzero") (("" (ground) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (norm_vertex_diff_prev_pos 0
  (norm_vertex_diff_prev_pos-1 nil 3874129020
   ("" (skeep)
    (("" (use "norm_eq_0")
      (("" (lemma "vertices_diff_prev_nonzero")
        (("" (inst - "G" "i") (("" (ground) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak))
 (two_adjacent_edges_TCC1 0
  (two_adjacent_edges_TCC1-2 nil 3874129020
   ("" (skeep*)
    (("" (replace -2)
      (("" (assert)
        (("" (typepred "G`vertices")
          (("" (expand "uniq_vertex_list?")
            (("" (inst - "i" "prev_index(G,i)")
              (("1" (ground) nil)
               ("2" (hide-all-but 1) (("2" (grind) nil))))))))))))))
    nil)
   nil shostak
   (two_adjacent_edges subtype "polygons_2d.e1" "segment_2d"))
  (two_adjacent_edges_TCC1-1 nil 3874127548 ("" (subtype-tcc) nil nil)
   nil nil (two_adjacent_edges subtype "polygons_2d.e1" "segment_2d")))
 (two_adjacent_edges_TCC2 0
  (two_adjacent_edges_TCC2-2 nil 3874129020
   ("" (skeep*)
    (("" (replace -4)
      (("" (assert)
        (("" (typepred "G`vertices")
          (("" (expand "uniq_vertex_list?")
            (("" (inst - "i" "next_index(G,i)")
              (("1" (ground) nil)
               ("2" (hide-all-but 1) (("2" (grind) nil))))))))))))))
    nil)
   nil shostak
   (two_adjacent_edges subtype "polygons_2d.e2" "segment_2d"))
  (two_adjacent_edges_TCC2-1 nil 3874127548 ("" (subtype-tcc) nil nil)
   nil nil (two_adjacent_edges subtype "polygons_2d.e2" "segment_2d")))
 (two_adjacent_edges 0
  (two_adjacent_edges-1 nil 3874129020
   ("" (skeep)
    (("" (ground)
      (("" (expand "edge_of_polygon?")
        (("" (ground)
          (("1" (inst 1 "prev_index(G,i)") (("1" (grind) nil nil)) nil)
           ("2" (inst?) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (same_edge_equiv_same_points 0
  (same_edge_equiv_same_points-1 nil 3874129020
   ("" (skeep)
    (("" (ground)
      (("1" (replace -1) (("1" (assert) nil nil)) nil)
       ("2"
        (name-replace*
         ("s" "edges_of_polygon(G)(i)" "e" "edges_of_polygon(G)(j)"))
        (("2" (inst-cp - "s`p1")
          (("2" (inst-cp - "s`p2")
            (("2" (inst-cp - "e`p2")
              (("2" (inst - "e`p1")
                (("2" (assert)
                  (("2" (case "are_segments_overlapping?(s)(e)")
                    (("1" (use "are_segments_overlapping_symm")
                      (("1" (assert)
                        (("1" (case "s`p1 = min_overlap_point(s, e)")
                          (("1" (case "s`p2 = max_overlap_point(s, e)")
                            (("1"
                              (case "e`p1 = min_overlap_point(e, s)")
                              (("1"
                                (case "e`p2 = max_overlap_point(e, s)")
                                (("1"
                                  (lemma "min_overlap_point_symm")
                                  (("1"
                                    (inst - "s" "e")
                                    (("1"
                                      (lemma "max_overlap_point_symm")
                                      (("1"
                                        (inst - "s" "e")
                                        (("1"
                                          (use
                                           "overlapping_normalized_directions")
                                          (("1"
                                            (ground)
                                            (("1"
                                              (expand
                                               "edges_of_polygon")
                                              (("1"
                                                (typepred "G`vertices")
                                                (("1"
                                                  (expand
                                                   "uniq_vertex_list?")
                                                  (("1"
                                                    (inst - "i" "j")
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (replace
                                                         -5
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (replace -3)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "-^(e`p2 - e`p1) = ^(e`p2 - e`p1)")
                                              (("1"
                                                (hide-all-but -1)
                                                (("1"
                                                  (expand "^")
                                                  (("1"
                                                    (cross-mult)
                                                    (("1"
                                                      (rewrite
                                                       "scal_neg")
                                                      (("1"
                                                        (grind-with-ext)
                                                        (("1"
                                                          (real-props)
                                                          (("1"
                                                            (typepred
                                                             "e`p2")
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (grind-with-ext)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "edges_of_polygon")
                                                  (("2"
                                                    (replace -3)
                                                    (("2"
                                                      (replace -2)
                                                      (("2"
                                                        (replace
                                                         -4
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (replace
                                                           -5
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (replace
                                                             -10
                                                             (-6 -7)
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (replace
                                                               -11
                                                               (-6 -7)
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (typepred
                                                                   "G`vertices")
                                                                  (("2"
                                                                    (expand
                                                                     "uniq_vertex_list?")
                                                                    (("2"
                                                                      (inst-cp
                                                                       -
                                                                       "i"
                                                                       "next_index(G,j)")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (ground)
                                                                        (("2"
                                                                          (typepred
                                                                           "G`vertices")
                                                                          (("2"
                                                                            (expand
                                                                             "uniq_vertex_list?")
                                                                            (("2"
                                                                              (inst
                                                                               -
                                                                               "j"
                                                                               "next_index(G,i)")
                                                                              (("1"
                                                                                (ground)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (ground)
                                                                                (("2"
                                                                                  (replace
                                                                                   -1
                                                                                   -2
                                                                                   :dir
                                                                                   rl)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "prev_vertex_neq_next_vertex")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "G"
                                                                                       "next_index(G,i)")
                                                                                      (("2"
                                                                                        (ground)
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "prev_next_is_original")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "max_overlap_point")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "min_overlap_point")
                                (("2" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (expand "max_overlap_point")
                              (("2" (propax) nil nil)) nil))
                            nil)
                           ("2" (expand "min_overlap_point")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "are_segments_overlapping?")
                      (("2" (inst + "s`p1" "s`p2")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (rem_plus_1_eq_next_index 0
  (rem_plus_1_eq_next_index-1 nil 3874129020
   ("" (skeep)
    (("" (use "rem_add_one")
      (("" (expand "next_index")
        (("" (lift-if)
          (("" (ground)
            (("1" (replace -1)
              (("1" (assert) (("1" (rewrite "rem_self") nil nil)) nil))
              nil)
             ("2" (rewrite "rem_mod") nil nil)
             ("3" (rewrite "rem_mod") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (rem_minus_1_eq_prev_index 0
  (rem_minus_1_eq_prev_index-1 nil 3874129020
   ("" (skeep)
    (("" (expand "prev_index")
      (("" (lift-if)
        (("" (case-replace "i = 0")
          (("1" (rewrite "rem_minus_one") nil nil)
           ("2" (assert) (("2" (rewrite "rem_mod") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (rem_plus_1_eq_next_index_2 0
  (rem_plus_1_eq_next_index_2-1 nil 3874129020
   ("" (skeep)
    (("" (use "rem_plus_1_eq_next_index")
      (("" (rewrite "rem_sum1") (("" (assert) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (equal_or_adjacent_edge_reflexive 0
  (equal_or_adjacent_edge_reflexive-1 nil 3874129020
   ("" (grind) nil nil) nil shostak))
 (equal_or_adjacent_edge_symmetric 0
  (equal_or_adjacent_edge_symmetric-1 nil 3874129020
   ("" (grind) nil nil) nil shostak))
 (equal_or_adjacent_edge_not_transitive 0
  (equal_or_adjacent_edge_not_transitive-1 nil 3874129020
   ("" (inst 1 "4" "0" "1" "2") (("" (grind) nil nil)) nil) nil
   shostak))
 (adj_edges_share_vertex 0
  (adj_edges_share_vertex-1 nil 3874129020 ("" (grind) nil nil) nil
   shostak))
 (short_antenna_edge_midpoint_on_longer_edge 0
  (short_antenna_edge_midpoint_on_longer_edge-1 nil 3874129020
   ("" (skeep)
    (("" (expand "is_point_on_segment?")
      (("" (use "point_on_segment?_iff_is_point_on_segment?")
        (("" (assert)
          (("" (use "point_on_reverse_segment")
            (("" (assert)
              (("" (expand "point_on_segment?")
                (("" (inst 1 "0.5 * length(s2) / length(s1)")
                  (("" (split)
                    (("1" (assert) nil nil)
                     ("2" (hide 2 3 4)
                      (("2"
                        (name-replace*
                         ("ls2" "length(s2)" "ls1" "length(s1)") :hide?
                         T)
                        (("2" (typepred "ls1" "ls2")
                          (("2" (field) nil nil)) nil))
                        nil))
                      nil)
                     ("3" (hide 2 3 4)
                      (("3"
                        (lemma "reverse_segment_has_neg_norm_diff"
                         ("s" "s1" "e" "reverse_segment(s1)"))
                        (("3" (assert)
                          (("3" (replace -1)
                            (("3"
                              (case-replace
                               "reverse_segment(s1)`p1 = s2`p1")
                              (("1"
                                (lemma
                                 "reverse_segment_same_length"
                                 ("s" "s1"))
                                (("1"
                                  (name-replace
                                   "rs1"
                                   "reverse_segment(s1)")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (case
                                       "^(rs1`p2 - s2`p1) = ^(s2`p2 - s2`p1)")
                                      (("1"
                                        (hide -2 -4 -5 -7)
                                        (("1"
                                          (expand*
                                           "segment_midpoint"
                                           "^"
                                           "length")
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (name-replace*
                                               ("lrs1"
                                                "norm(rs1`p2 - s2`p1)"
                                                "ls2"
                                                "norm(s2`p2 - s2`p1)")
                                               :hide?
                                               t)
                                              (("1"
                                                (grind-with-ext)
                                                (("1" (field) nil nil)
                                                 ("2" (field) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-6 1))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (-2 1))
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (short_antenna_edge_midpoint_not_endpoint 0
  (short_antenna_edge_midpoint_not_endpoint-1 nil 3874129020
   ("" (skeep)
    (("" (use "norm_midpoint_to_p1_half_len")
      (("" (expand* "length" "norm")
        (("" (case "sqv(s2`p2 - s2`p1) <= sqv(s1`p2 - s1`p1)")
          (("1"
            (case "sqrt(4 * sqv(segment_midpoint(s2) - s2`p1)) = sqrt(sqv(s2`p2 - s2`p1))")
            (("1"
              (case "4 * sqv(segment_midpoint(s2) - s2`p1) = sqv(s2`p2 - s2`p1)")
              (("1" (replace -5)
                (("1" (replace -8)
                  (("1" (replace -1 :dir RL)
                    (("1" (hide-all-but -2)
                      (("1" (use "sqv_neg")
                        (("1" (replace -1 :dir RL)
                          (("1"
                            (case-replace
                             "-(s1`p1 - s2`p1) = s2`p1 - s1`p1" :hide?
                             T)
                            (("1" (typepred "sqv(s2`p1 - s1`p1)")
                              (("1"
                                (name-replace
                                 "x"
                                 "sqv(s2`p1 - s1`p1)"
                                 :hide?
                                 T)
                                (("1"
                                  (case "x /= 0")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (expand "x")
                                    (("2"
                                      (reveal -6)
                                      (("2"
                                        (replace -1 :dir RL)
                                        (("2"
                                          (typepred "s1`p2")
                                          (("2"
                                            (use "sqv_eq_0")
                                            (("2"
                                              (case
                                               "s1`p2 - s1`p1 /= zero")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide-all-but (-2 1))
                                                (("2"
                                                  (expand "zero")
                                                  (("2"
                                                    (grind-with-ext)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil)
             ("2" (hide-all-but (-2 1)) (("2" (grind) nil nil)) nil))
            nil)
           ("2" (use "sqrt_le") (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (antenna_edges_share_many_points 0
  (antenna_edges_share_many_points-1 nil 3874129020
   ("" (stop-rewrite "normalize_eq")
    (("" (skeep 1 t)
      (("" (assert)
        (("" (flatten)
          ((""
            (name-replace*
             ("ei" "edges_of_polygon(p)(i)" "ej"
              "edges_of_polygon(p)(j)"))
            (("" (case "length(ei) < length(ej)")
              (("1" (inst 1 "segment_midpoint(ei)")
                (("1" (case "ei`p2 = ej`p1")
                  (("1" (split)
                    (("1"
                      (lemma "mult_normalized_vec_by_lt_len_on_seg"
                       ("s" "ej" "d"
                        "norm(segment_midpoint(ei) - ei`p2)"))
                      (("1" (replace -2)
                        (("1"
                          (case-replace
                           "ej`p1 + norm(segment_midpoint(ei) - ej`p1) * ^(ej) = segment_midpoint(ei)"
                           :hide? T)
                          (("1" (assert)
                            (("1" (expand "is_point_on_segment?" 1)
                              (("1"
                                (use
                                 "point_on_segment?_iff_is_point_on_segment?")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replace -2 :dir RL)
                            (("2" (case-replace "^(ej) = -^(ei)")
                              (("1"
                                (hide-all-but 1)
                                (("1"
                                  (use "norm_midpoint_to_p2_half_len")
                                  (("1"
                                    (replace -1 :hide? T)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (-9 1))
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2"
                        (lemma "norm_midpoint_to_p2_half_len"
                         ("s" "ei"))
                        (("2" (replace -1)
                          (("2" (hide-all-but (-3 1))
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (use "segment_endpoints_neq_midpoint")
                      (("2" (assert) nil nil)) nil)
                     ("3" (use "segment_endpoints_neq_midpoint")
                      (("3" (assert) nil nil)) nil))
                    nil)
                   ("2" (use "segment_endpoints_neq_midpoint")
                    (("2" (assert)
                      (("2" (case "ei`p1 = ej`p2")
                        (("1" (split)
                          (("1" (hide-all-but (-1 -3 -9 1))
                            (("1" (assert)
                              (("1"
                                (lemma
                                 "short_antenna_edge_midpoint_on_longer_edge"
                                 ("s1" "ej" "s2" "ei"))
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide-all-but (-3 1))
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (use "segment_endpoints_neq_midpoint")
                            (("2" (assert) nil nil)) nil)
                           ("3" (use "segment_endpoints_neq_midpoint")
                            (("3" (assert) nil nil)) nil))
                          nil)
                         ("2" (use "adj_edges_share_vertex")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replace -3)
                  (("2" (assert)
                    (("2" (use "segment_midpoint_on_segment")
                      (("2" (use "is_point_on_seg_equiv")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst 2 "segment_midpoint(ej)")
                (("1" (split)
                  (("1" (use "segment_midpoint_on_segment")
                    (("1" (use "is_point_on_seg_equiv")
                      (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (case "ei`p1 = ej`p2")
                    (("1" (use "segment_endpoints_neq_midpoint")
                      (("1" (grind) nil nil)) nil)
                     ("2" (case "ei`p2 = ej`p1")
                      (("1" (hide-all-but (-1 -7 2 3))
                        (("1"
                          (lemma
                           "short_antenna_edge_midpoint_not_endpoint"
                           ("s1" "ei" "s2" "ej"))
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil)
                   ("3" (case "ei`p2 = ej`p1")
                    (("1" (use "segment_endpoints_neq_midpoint")
                      (("1" (assert) nil nil)) nil)
                     ("2" (case "ei`p1 = ej`p2")
                      (("1" (hide-all-but (-1 -7 2 3))
                        (("1"
                          (lemma
                           "short_antenna_edge_midpoint_not_endpoint"
                           ("s1" "reverse_segment(ei)" "s2"
                            "reverse_segment(ej)"))
                          (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (use "adj_edges_share_vertex")
                        (("2" (assert)
                          (("2" (replace -2)
                            (("2" (replace -3) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (case "ei`p2 = ej`p1")
                  (("1" (hide-all-but (-1 -7 1 2))
                    (("1" (reveal -2)
                      (("1" (replace -1 :hide? T)
                        (("1"
                          (lemma
                           "short_antenna_edge_midpoint_on_longer_edge"
                           ("s1" "ei" "s2" "ej"))
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "ei`p1 = ej`p2")
                    (("1" (hide-all-but (-1 -7 2 3))
                      (("1" (reveal -2)
                        (("1" (replace -1 :hide? T)
                          (("1"
                            (lemma
                             "short_antenna_edge_midpoint_on_longer_edge"
                             ("s1" "reverse_segment(ei)" "s2"
                              "reverse_segment(ej)"))
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (use "adj_edges_share_vertex")
                      (("2" (replace -2)
                        (("2" (replace -3)
                          (("2" (assert) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (only_common_point_is_vertex_means_equal_or_adjacent 0
  (only_common_point_is_vertex_means_equal_or_adjacent-1 nil 3874129020
   ("" (skeep 1 t)
    (("" (assert)
      (("" (flatten)
        (("" (skeep -3 t)
          (("" (inst -5 "p_1")
            (("" (inst -6 "p_1")
              (("" (assert)
                (("" (typepred "p`vertices")
                  ((""
                    (expand* "uniq_vertex_list?"
                     "equal_or_adjacent_edge?")
                    (("" (flatten)
                      (("" (expand "edges_of_polygon")
                        (("" (inst-cp -1 "i" "j")
                          (("1" (inst-cp -1 "i" "next_index(p, j)")
                            (("1" (inst-cp -1 "next_index(p, i)" "j")
                              (("1"
                                (inst
                                 -1
                                 "next_index(p, i)"
                                 "next_index(p, j)")
                                (("1"
                                  (split)
                                  (("1"
                                    (split)
                                    (("1" (assert) nil nil)
                                     ("2" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (split)
                                    (("1" (assert) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -4 -7)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -3 -6)
                                (("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (hide -2 -5) (("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (hide -1 -4) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (common_pt_on_adj_edges_must_be_vertex_unless_antenna 0
  (common_pt_on_adj_edges_must_be_vertex_unless_antenna-1 nil
   3874129020
   ("" (stop-rewrite "normalize_eq")
    (("" (skeep 1 t)
      (("" (assert)
        (("" (flatten)
          (("" (skeep 2 t)
            ((""
              (case "edges_of_polygon(p)(i)`p2 = edges_of_polygon(p)(j)`p1 OR edges_of_polygon(p)(i)`p1 = edges_of_polygon(p)(j)`p2")
              (("1"
                (lemma
                 "two_segments_w_opp_end_pt_and_one_more_pt_same_antinormalized"
                 ("s1" "edges_of_polygon(p)(i)" "s2"
                  "edges_of_polygon(p)(j)"))
                (("1" (split)
                  (("1" (propax) nil nil)
                   ("2" (inst 1 "q")
                    (("1"
                      (lemma
                       "point_on_segment?_iff_is_point_on_segment?"
                       ("p" "q"))
                      (("1" (inst-cp -1 "edges_of_polygon(p)(i)")
                        (("1" (inst -1 "edges_of_polygon(p)(j)")
                          (("1" (expand "is_point_on_segment?" (-4 -8))
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2"
                    (lemma
                     "two_segments_w_opp_end_pt_and_one_more_pt_same_antinormalized"
                     ("s1" "edges_of_polygon(p)(j)" "s2"
                      "edges_of_polygon(p)(i)"))
                    (("2" (split)
                      (("1" (hide-all-but (-1 2))
                        (("1"
                          (name-replace*
                           ("x" "edges_of_polygon(p)(j)" "y"
                            "edges_of_polygon(p)(i)")
                           :hide? t)
                          (("1" (grind-with-ext) nil nil)) nil))
                        nil)
                       ("2" (inst 1 "q")
                        (("2"
                          (lemma
                           "point_on_segment?_iff_is_point_on_segment?"
                           ("p" "q"))
                          (("2" (inst-cp -1 "edges_of_polygon(p)(i)")
                            (("2" (inst -1 "edges_of_polygon(p)(j)")
                              (("2"
                                (expand "is_point_on_segment?" (-4 -8))
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-4 1)) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (polygon_edges_do_not_cross_defs_eq 0
  (polygon_edges_do_not_cross_defs_eq-1 nil 3874129020
   ("" (skeep)
    ((""
      (expand* "polygon_edges_do_not_cross?"
       "polygon_edges_do_not_cross?_alt")
      (("" (split)
        (("1" (flatten)
          (("1" (skeep 1 t)
            (("1" (inst-cp -3 "j" "i")
              (("1" (inst -3 "i" "j")
                (("1"
                  (name-replace*
                   ("ei" "edges_of_polygon(p)(i)" "ej"
                    "edges_of_polygon(p)(j)"))
                  (("1" (split 2)
                    (("1" (flatten)
                      (("1"
                        (comment "^(ei) = -^(ej) contradicts the FORALL q statements")
                        (("1"
                          (lemma "antenna_edges_share_many_points"
                           ("p" "p" "i" "i" "j" "j"))
                          (("1" (assert)
                            (("1" (split)
                              (("1"
                                (skeep -1 t)
                                (("1"
                                  (inst -9 q)
                                  (("1"
                                    (replace -6)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (-1 1 2))
                            (("2" (grind) nil nil)) nil))
                          ";;; ^(ei) = -^(ej) contradicts the FORALL q statements"))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2"
                        (comment "-6 means that any point that is on ej and ei must be a vertex of ei, and -7 means it must be a verttex of ej, so they have to share a vertex, which can only happen for equal/adj edges")
                        (("2"
                          (lemma
                           "only_common_point_is_vertex_means_equal_or_adjacent"
                           ("p" "p" "i" "i" "j" "j"))
                          (("2" (assert)
                            (("2" (split)
                              (("1" (propax) nil nil)
                               ("2"
                                (use
                                 "are_segments_intersecting?_defs_same")
                                (("2"
                                  (replace -1 :hide? T)
                                  (("2"
                                    (expand
                                     "are_segments_intersecting_alt?")
                                    (("2"
                                      (skeep -1 t)
                                      (("2"
                                        (inst 1 "p1")
                                        (("2"
                                          (replace -3)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but (-2 -3 -6 1))
                                (("3"
                                  (skeep 1 t)
                                  (("3"
                                    (inst -5 "q")
                                    (("3"
                                      (replace -3)
                                      (("3"
                                        (replace -4)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (hide-all-but (-2 -3 -7 1))
                                (("4"
                                  (skeep 1 t)
                                  (("4"
                                    (inst -5 "q")
                                    (("4"
                                      (replace -3)
                                      (("4"
                                        (replace -4)
                                        (("4" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          ";;; -6 means that any point that is on ej and ei must be a vertex of ei, and -7 means it must be a verttex of ej, so they have to share a vertex, which can only happen for equal/adj edges"))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (skeep* 1 t)
            (("2" (inst-cp -4 "j" "i")
              (("1" (inst -4 "i" "j")
                (("1"
                  (name-replace*
                   ("ei" "edges_of_polygon(p)(i)" "ej"
                    "edges_of_polygon(p)(j)"))
                  (("1" (split -6)
                    (("1" (flatten)
                      (("1" (hide -7)
                        (("1"
                          (comment "if i,j are adjacent edges and q is a point on both ei and ej, then q has to be an endpoint of ei, or ei and ej have to be pointing in opposite directions")
                          (("1"
                            (lemma
                             "common_pt_on_adj_edges_must_be_vertex_unless_antenna"
                             ("p" "p" "i" "i" "j" "j"))
                            (("1" (assert)
                              (("1"
                                (split -1)
                                (("1"
                                  (replace -3)
                                  (("1"
                                    (replace -4)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst -1 "q")
                                  (("2"
                                    (split)
                                    (("1"
                                      (replace -4)
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (replace -4)
                                      (("2" (propax) nil nil))
                                      nil)
                                     ("3"
                                      (replace -2)
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-1 1 3))
                              (("2" (grind) nil nil)) nil))
                            ";;; if i,j are adjacent edges and q is a point on both ei and ej, then q has to be an endpoint of ei, or ei and ej have to be pointing in opposite directions"))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2"
                        (comment "a point can only lie on both edges if those segments intersect")
                        (("2" (hide-all-but (-3 -7 2))
                          (("2"
                            (use "are_segments_intersecting?_defs_same")
                            (("2" (replace -1)
                              (("2"
                                (expand
                                 "are_segments_intersecting_alt?")
                                (("2" (inst 1 "q") nil nil))
                                nil))
                              nil))
                            nil))
                          ";;; a point can only lie on both edges if those segments intersect"))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (example_right_triangle_TCC1 0
  (example_right_triangle_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (example_right_triangle subtype
    "LAMBDA (i: naturalnumbers.below(3)): IF (i = 0) THEN (# x := 0, y := 0 #) ELSIF (i = 1) THEN (# x := 1, y := 0 #) ELSE (# y := 1, x := 0 #) ENDIF"
    "vertex_list.uniq_vertex_list(3)"))
  (example_right_triangle_TCC1-1 nil 3874127548
   ("" (subtype-tcc) nil nil) nil nil
   (example_right_triangle subtype
    "LAMBDA (i: naturalnumbers.below(3)): IF (i = 0) THEN (# x := 0, y := 0 #) ELSIF (i = 1) THEN (# x := 1, y := 0 #) ELSE (# y := 1, x := 0 #) ENDIF"
    "vertex_list.uniq_vertex_list(3)")))
 (simple_polygon_2d_TCC1 0
  (simple_polygon_2d_TCC1-2 nil 3874129020
   ("" (expand "simple_polygon_2d?")
    (("" (ground)
      (("" (expand "polygon_edges_do_not_cross?")
        (("" (skeep* + t)
          (("" (rewrite "is_point_on_seg_equiv")
            (("" (expand "example_right_triangle" +)
              (("" (expand "edges_of_polygon" +)
                (("" (rewrite "is_point_on_seg_equiv")
                  (("" (expand "next_index")
                    (("" (apply (repeat (lift-if)))
                      (("" (assert)
                        (("" (expand "example_right_triangle" (-2 -3))
                          (("" (expand "point_on_segment?")
                            (("" (skeep*) (("" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (simple_polygon_2d subtype "polygons_2d.example_right_triangle"
    "simple_polygon_2d"))
  (simple_polygon_2d_TCC1-1 nil 3874127548 ("" (subtype-tcc) nil nil)
   nil nil
   (simple_polygon_2d subtype "polygons_2d.example_right_triangle"
    "simple_polygon_2d")))
 (example_diamond_TCC1 0
  (example_diamond_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (example_diamond subtype
    "LAMBDA (i: naturalnumbers.below(4)): IF (i = 0) THEN (# x := (number_fields.-)(1), y := 0 #) ELSIF (i = 1) THEN (# x := 0, y := 1 #) ELSIF (i = 2) THEN (# x := 1, y := 0 #) ELSE (# x := 0, y := (number_fields.-)(1) #) ENDIF"
    "vertex_list.uniq_vertex_list(4)"))
  (example_diamond_TCC1-1 nil 3874127548 ("" (subtype-tcc) nil nil) nil
   nil
   (example_diamond subtype
    "LAMBDA (i: naturalnumbers.below(4)): IF (i = 0) THEN (# x := (number_fields.-)(1), y := 0 #) ELSIF (i = 1) THEN (# x := 0, y := 1 #) ELSIF (i = 2) THEN (# x := 1, y := 0 #) ELSE (# x := 0, y := (number_fields.-)(1) #) ENDIF"
    "vertex_list.uniq_vertex_list(4)")))
 (example_diamond_TCC2 0
  (example_diamond_TCC2-2 nil 3874129020
   ("" (expand "simple_polygon_2d?")
    (("" (expand "polygon_edges_do_not_cross?")
      (("" (skeep* + t)
        (("" (model-check)
          (("" (lift-if)
            (("" (split +)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (split)
                    (("1" (flatten)
                      (("1" (hide-all-but (-2 -4 3))
                        (("1" (grind-with-ext) nil nil)) nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split)
                        (("1" (flatten) (("1" (grind) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (hide-all-but (-1 -3 3))
                            (("2" (grind-with-ext) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (split +)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (split)
                        (("1" (flatten)
                          (("1" (hide-all-but (-2 -4 1))
                            (("1" (grind-with-ext) nil nil)) nil))
                          nil)
                         ("2" (flatten)
                          (("2" (split)
                            (("1" (flatten)
                              (("1"
                                (hide-all-but (-2 -4 5))
                                (("1" (grind-with-ext) nil nil))
                                nil))
                              nil)
                             ("2" (flatten) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split +)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (split)
                            (("1" (flatten) (("1" (grind) nil nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (hide-all-but (-2 -4 2))
                                    (("1" (grind-with-ext) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (case "j = 2")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (case "j = 3")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide-all-but (-2 -4 8))
                                            (("1"
                                              (grind-with-ext)
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (assert)
                          (("2" (split)
                            (("1" (flatten)
                              (("1"
                                (hide-all-but (-2 -3 6))
                                (("1" (grind-with-ext) nil nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (hide-all-but (-2 -3 4))
                                        (("1"
                                          (grind-with-ext)
                                          nil
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (example_diamond subtype
    "(# num_vertices := 4, vertices := LAMBDA (i: naturalnumbers.below(4)): IF (i = 0) THEN (# x := (number_fields.-)(1), y := 0 #) ELSIF (i = 1) THEN (# x := 0, y := 1 #) ELSIF (i = 2) THEN (# x := 1, y := 0 #) ELSE (# x := 0, y := (number_fields.-)(1) #) ENDIF #)"
    "simple_polygon_2d"))
  (example_diamond_TCC2-1 nil 3874127548 ("" (subtype-tcc) nil nil) nil
   nil
   (example_diamond subtype
    "(# num_vertices := 4, vertices := LAMBDA (i: naturalnumbers.below(4)): IF (i = 0) THEN (# x := (number_fields.-)(1), y := 0 #) ELSIF (i = 1) THEN (# x := 0, y := 1 #) ELSIF (i = 2) THEN (# x := 1, y := 0 #) ELSE (# x := 0, y := (number_fields.-)(1) #) ENDIF #)"
    "simple_polygon_2d")))
 (next_edge_shares_only_vertex 0
  (next_edge_shares_only_vertex-1 nil 3874129020
   ("" (skeep + t)
    (("" (ground)
      (("" (skeep + t)
        (("" (expand "simple_polygon_2d?")
          (("" (copy -2)
            (("" (expand "polygon_edges_do_not_cross?" -1)
              (("" (inst - "i" "next_index(p,i)")
                (("" (inst?)
                  (("" (rewrite* "is_point_on_seg_equiv")
                    (("" (assert)
                      (("" (split -1)
                        (("1" (hide-all-but -1) (("1" (grind) nil nil))
                          nil)
                         ("2" (hide 1)
                          (("2" (expand "polygon_edges_do_not_cross?")
                            (("2" (inst - "next_index(p,i)" "i")
                              (("2"
                                (inst?)
                                (("1"
                                  (rewrite "is_point_on_seg_equiv")
                                  (("1"
                                    (hide -2 -6)
                                    (("1"
                                      (replace -1 :hide? t)
                                      (("1"
                                        (expand "edges_of_polygon")
                                        (("1"
                                          (typepred "p`vertices")
                                          (("1"
                                            (expand
                                             "uniq_vertex_list?")
                                            (("1"
                                              (ground)
                                              (("1"
                                                (hide-all-but -1)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2" (grind) nil nil)
                                               ("3" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "is_point_on_seg_equiv")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (assert)
                          (("3" (expand "edges_of_polygon")
                            (("3" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (prev_edge_shares_only_vertex 0
  (prev_edge_shares_only_vertex-1 nil 3874129020
   ("" (skeep + t)
    (("" (ground)
      (("" (skeep + t)
        (("" (expand "simple_polygon_2d?")
          (("" (copy -2)
            (("" (expand "polygon_edges_do_not_cross?" -1)
              (("" (inst - "prev_index(p,i)" "i")
                (("" (inst?)
                  (("" (rewrite* "is_point_on_seg_equiv")
                    (("" (assert)
                      (("" (split -1)
                        (("1" (hide-all-but -1) (("1" (grind) nil nil))
                          nil)
                         ("2" (hide 1)
                          (("2" (expand "polygon_edges_do_not_cross?")
                            (("2" (inst - "i" "prev_index(p,i)")
                              (("2"
                                (inst?)
                                (("2"
                                  (rewrite "is_point_on_seg_equiv")
                                  (("2"
                                    (hide -2 -6)
                                    (("2"
                                      (replace -1 :hide? t)
                                      (("2"
                                        (expand "edges_of_polygon")
                                        (("2"
                                          (typepred "p`vertices")
                                          (("2"
                                            (expand
                                             "uniq_vertex_list?")
                                            (("2"
                                              (ground)
                                              (("1"
                                                (hide-all-but -1)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (inst
                                                 -
                                                 "prev_index(p,i)"
                                                 "i")
                                                (("1" (assert) nil nil)
                                                 ("2" (grind) nil nil))
                                                nil)
                                               ("3"
                                                (inst
                                                 -
                                                 "prev_index(p,i)"
                                                 "next_index(p,i)")
                                                (("1" (assert) nil nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (assert)
                          (("3" (expand "edges_of_polygon")
                            (("3" (rewrite "next_prev_is_original") nil
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (adjacent_edges_share_only_vertex 0
  (adjacent_edges_share_only_vertex-1 nil 3874129020
   ("" (skeep + t)
    (("" (ground)
      (("" (skeep + t)
        (("" (case "j = next_index(p,i)")
          (("1" (use "next_edge_shares_only_vertex")
            (("1" (assert) (("1" (inst?) (("1" (ground) nil nil)) nil))
              nil))
            nil)
           ("2" (case "j = prev_index(p,i)")
            (("1" (use "prev_edge_shares_only_vertex")
              (("1" (assert)
                (("1" (inst?) (("1" (ground) nil nil)) nil)) nil))
              nil)
             ("2" (hide-all-but (-5 1 2)) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (next_edge_not_dir_parallel 0
  (next_edge_not_dir_parallel-1 nil 3874129020
   ("" (skeep + t)
    (("" (skoletin*)
      (("" (expand "dir_parallel?")
        (("" (skeep)
          (("" (case-replace "ej`p1 = ei`p2")
            (("1" (rewrite "scal_sub_right")
              (("1" (case "pk < 1")
                (("1" (use "next_edge_shares_only_vertex")
                  (("1" (assert)
                    (("1" (inst - "ei`p1")
                      (("1" (ground)
                        (("1" (rewrite "is_point_on_seg_equiv")
                          (("1" (replace -4 :dir rl)
                            (("1" (expand "point_on_segment?")
                              (("1"
                                (inst + "pk")
                                (("1"
                                  (assert)
                                  (("1"
                                    (move-terms -3 l 2)
                                    (("1"
                                      (move-terms -3 r (1 2))
                                      (("1"
                                        (replace -3 :dir rl)
                                        (("1"
                                          (rewrite* "scal_sub_left")
                                          (("1"
                                            (replace -2)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (rewrite "is_point_on_seg_equiv")
                        (("2" (rewrite -5 :dir rl)
                          (("2" (expand "point_on_segment?")
                            (("2" (inst + "0") (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (use "prev_edge_shares_only_vertex")
                  (("2" (assert)
                    (("2" (rewrite "prev_next_is_original")
                      (("2" (inst - "ej`p2")
                        (("1" (ground)
                          (("1" (rewrite "is_point_on_seg_equiv")
                            (("1" (replace -4 :dir rl)
                              (("1"
                                (expand "point_on_segment?")
                                (("1"
                                  (inst + "(pk-1)/pk")
                                  (("1"
                                    (ground)
                                    (("1" (cross-mult 1) nil nil)
                                     ("2" (cross-mult 1) nil nil)
                                     ("3"
                                      (mult-by 1 "pk")
                                      (("3"
                                        (rewrite "scal_add_right")
                                        (("3"
                                          (real-props)
                                          (("3"
                                            (move-terms -2 l 2)
                                            (("3"
                                              (move-terms -2 r (1 2))
                                              (("3"
                                                (replace -2 :dir rl)
                                                (("3"
                                                  (rewrite
                                                   "scal_sub_left")
                                                  (("3"
                                                    (cancel-add 1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "is_point_on_seg_equiv")
                          (("2" (replace -3 :dir rl)
                            (("2" (expand "point_on_segment?")
                              (("2"
                                (inst + "1")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -1)
              (("2" (replace -1)
                (("2" (replace -2)
                  (("2" (expand "edges_of_polygon")
                    (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (prev_edge_not_dir_parallel 0
  (prev_edge_not_dir_parallel-1 nil 3874129020
   ("" (skeep + t)
    (("" (skoletin*)
      (("" (expand "dir_parallel?")
        (("" (skeep)
          (("" (case-replace "ej`p2 = ei`p1")
            (("1" (rewrite "scal_sub_right")
              (("1" (case "pk < 1")
                (("1" (use "prev_edge_shares_only_vertex")
                  (("1" (ground)
                    (("1" (inst - "ei`p2")
                      (("1" (ground)
                        (("1" (rewrite "is_point_on_seg_equiv")
                          (("1" (replace -4 :dir rl)
                            (("1" (expand "point_on_segment?")
                              (("1"
                                (inst + "1-pk")
                                (("1"
                                  (assert)
                                  (("1"
                                    (move-terms -3 l 2)
                                    (("1"
                                      (move-terms -3 r (1 2))
                                      (("1"
                                        (replace -3 :dir rl)
                                        (("1"
                                          (rewrite "scal_sub_left")
                                          (("1"
                                            (cancel-add 1)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (rewrite "is_point_on_seg_equiv")
                        (("2" (rewrite -5 :dir rl)
                          (("2" (expand "point_on_segment?")
                            (("2" (inst + "1") (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (use "next_edge_shares_only_vertex")
                  (("2" (assert)
                    (("2" (inst - "ej`p1")
                      (("1" (ground)
                        (("1" (rewrite "is_point_on_seg_equiv")
                          (("1" (rewrite "next_prev_is_original")
                            (("1" (replace -4 :dir rl)
                              (("1"
                                (expand "point_on_segment?")
                                (("1"
                                  (inst + "1/pk")
                                  (("1"
                                    (ground)
                                    (("1" (cross-mult 1) nil nil)
                                     ("2"
                                      (mult-by 1 "pk")
                                      (("2"
                                        (rewrite "scal_add_right")
                                        (("2"
                                          (real-props)
                                          (("2"
                                            (rewrite "scal_sub_left")
                                            (("2"
                                              (move-terms -2 l 2)
                                              (("2"
                                                (move-terms -2 r (1 2))
                                                (("2"
                                                  (replace -2 :dir rl)
                                                  (("2"
                                                    (cancel-add 1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (rewrite "is_point_on_seg_equiv")
                        (("2" (replace -3 :dir rl)
                          (("2" (expand "point_on_segment?")
                            (("2" (inst + "0") (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -1)
              (("2" (replace -1)
                (("2" (replace -2)
                  (("2" (expand "edges_of_polygon")
                    (("2" (rewrite "next_prev_is_original") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (adjacent_edges_not_dir_parallel 0
  (adjacent_edges_not_dir_parallel-1 nil 3874129020
   ("" (skeep + t)
    (("" (assert)
      (("" (case "j = next_index(p,i)")
        (("1" (use "next_edge_not_dir_parallel")
          (("1" (ground) nil nil)) nil)
         ("2" (case "j = prev_index(p,i)")
          (("1" (use "prev_edge_not_dir_parallel")
            (("1" (ground)
              (("1" (rewrite "dir_parallel_diff") nil nil)) nil))
            nil)
           ("2" (hide-all-but (-4 1 2)) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (prev_vertex_not_on_ray_of_edge_TCC1 0
  (prev_vertex_not_on_ray_of_edge_TCC1-2 nil 3874129020
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (prev_vertex_not_on_ray_of_edge subtype
    "(vectors_2D.-)(polygons_2d.e`p2, polygons_2d.e`p1)" "Nz_vector"))
  (prev_vertex_not_on_ray_of_edge_TCC1-1 nil 3874127548
   ("" (subtype-tcc) nil nil) nil nil
   (prev_vertex_not_on_ray_of_edge subtype
    "(vectors_2D.-)(polygons_2d.e`p2, polygons_2d.e`p1)" "Nz_vector")))
 (prev_vertex_not_on_ray_of_edge 0
  (prev_vertex_not_on_ray_of_edge-1 nil 3874129020
   ("" (skeep)
    (("" (expand "point_on_arb_ray?")
      (("" (skeep)
        (("" (use "prev_edge_not_dir_parallel")
          (("" (assert)
            (("" (expand "edges_of_polygon")
              (("" (assert)
                (("" (replace -1)
                  (("" (assert)
                    (("" (lemma "add_move_left")
                      ((""
                        (inst - "G`vertices(i)"
                         "G`vertices(prev_index(G, i))"
                         "d * ^(G`vertices(next_index(G, i)) - G`vertices(i))")
                        (("" (assert)
                          (("" (rewrite "dir_parallel_diff")
                            (("" (expand "dir_parallel?")
                              ((""
                                (expand "^")
                                ((""
                                  (hide -2 -3)
                                  ((""
                                    (case-replace "d = 0")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "vertex_neq_prev")
                                        (("1"
                                          (inst - "G" "i")
                                          (("1"
                                            (ground)
                                            (("1"
                                              (hide-all-but (-2 1))
                                              (("1"
                                                (use "sub_eq_zero")
                                                (("1"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (real-props)
                                      (("2"
                                        (inst
                                         +
                                         "norm(G`vertices(next_index(G, i)) - G`vertices(i)) / d")
                                        (("1"
                                          (replace -1 :dir rl)
                                          (("1" (real-props) nil nil))
                                          nil)
                                         ("2"
                                          (hide -)
                                          (("2"
                                            (splash 1 t)
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (cross-mult 1)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (only_adjacent_edges_intersect 0
  (only_adjacent_edges_intersect-1 nil 3874129020
   ("" (skeep)
    (("" (ground)
      (("" (skeep)
        (("" (expand "equal_or_adjacent_edge?")
          (("" (flatten)
            (("" (typepred "p")
              (("" (expand "simple_polygon_2d?")
                (("" (expand "polygon_edges_do_not_cross?")
                  (("" (inst-cp - "i" "j")
                    (("" (inst - "j" "i")
                      (("" (inst?)
                        (("" (inst?)
                          (("" (assert)
                            (("" (hide -3 -4)
                              ((""
                                (case "i=j")
                                (("1"
                                  (expand "abs")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand "edges_of_polygon")
                                    (("2"
                                      (typepred "p`vertices")
                                      (("2"
                                        (expand "uniq_vertex_list?")
                                        (("2"
                                          (inst-cp - "i" "j")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split -2)
                                                (("1"
                                                  (split -3)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (inst
                                                     -
                                                     "j"
                                                     "next_index(p, i)")
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (split -3)
                                                  (("1"
                                                    (inst
                                                     -
                                                     "i"
                                                     "next_index(p, j)")
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst
                                                     -
                                                     "next_index(p, i)"
                                                     "next_index(p, j)")
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (adjacent_edges_do_not_fold_back 0
  (adjacent_edges_do_not_fold_back-1 nil 3874129020
   ("" (skeep)
    (("" (ground)
      (("1" (lemma "vertex_neq_prev")
        (("1" (inst - "G" "i") (("1" (ground) nil nil)) nil)) nil)
       ("2" (lemma "vertex_neq_next")
        (("2" (inst - "G" "i") (("2" (ground) nil nil)) nil)) nil)
       ("3" (use "prev_edge_not_dir_parallel")
        (("3" (assert)
          (("3" (expand "edges_of_polygon")
            (("3" (assert)
              (("3" (rewrite "dir_parallel_diff")
                (("3" (rewrite* "dir_parallel_eqv_normalized_diffs_eq")
                  (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (points_on_distinct_edges_differ 0
  (points_on_distinct_edges_differ-1 nil 3874129020
   ("" (skeep)
    (("" (typepred "G")
      (("" (expand "simple_polygon_2d?")
        (("" (flatten)
          (("" (lemma "only_adjacent_edges_intersect")
            (("" (inst - "G" "j" "k")
              (("" (assert)
                (("" (inst?)
                  (("" (assert)
                    (("" (expand "equal_or_adjacent_edge?")
                      (("" (split -1)
                        (("1" (expand "abs")
                          (("1" (assert)
                            (("1"
                              (lemma "next_edge_shares_only_vertex")
                              (("1"
                                (inst - "G" "j")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "next_index")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2"
                              (lemma "next_edge_shares_only_vertex")
                              (("2"
                                (inst - "G" "k")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "next_index")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (edge_x_left_or_right_imp_cross_neq_0 0
  (edge_x_left_or_right_imp_cross_neq_0-1 nil 3874129020
   ("" (skeep)
    (("" (rewrite "parallel_equiv_cross_eq_0" :dir rl)
      (("" (expand "parallel?")
        (("" (skeep)
          (("" (case "nzk > 0")
            (("1" (use "adjacent_edges_do_not_fold_back")
              (("1" (flatten)
                (("1" (expand "dir_parallel?")
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (rewrite "comps_eq")
              (("2" (flatten)
                (("2" (expand "*" -2)
                  (("2" (expand "-" -2)
                    (("2" (move-terms -2 l 2)
                      (("2" (replace -2)
                        (("2" (ground)
                          (("1" (cancel-add -1)
                            (("1" (cancel-by -1 "nzk") nil nil)) nil)
                           ("2" (cancel-add -1)
                            (("2" (cancel-by -1 "nzk") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (edge_y_above_or_below_imp_cross_neq_0 0
  (edge_y_above_or_below_imp_cross_neq_0-1 nil 3874129020
   ("" (skeep)
    (("" (rewrite "parallel_equiv_cross_eq_0" :dir rl)
      (("" (expand "parallel?")
        (("" (skeep)
          (("" (case "nzk > 0")
            (("1" (use "adjacent_edges_do_not_fold_back")
              (("1" (flatten)
                (("1" (expand "dir_parallel?")
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (rewrite "comps_eq")
              (("2" (flatten)
                (("2" (expand "*" -3)
                  (("2" (expand "-" -3)
                    (("2" (move-terms -3 l 2)
                      (("2" (replace -3)
                        (("2" (ground)
                          (("1" (cancel-add -1)
                            (("1" (cancel-by -1 "nzk") nil nil)) nil)
                           ("2" (cancel-add -1)
                            (("2" (cancel-by -1 "nzk") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (shared_endpoints_imp_same_edge 0
  (shared_endpoints_imp_same_edge-1 nil 3874129020
   ("" (skeep)
    (("" (auto-rewrite "is_point_on_seg_equiv")
      (("" (expand "edge_of_polygon?")
        (("" (skeep*)
          (("" (case "i = i!1")
            (("1" (assert) nil nil)
             ("2" (lemma "only_adjacent_edges_intersect")
              (("2" (inst - "G" "i" "i!1")
                (("2" (assert)
                  (("2"
                    (case "equal_or_adjacent_edge?(G`num_vertices, i, i!1) iff
                      adjacent_edge?(G`num_vertices, i)(i!1)")
                    (("1" (replace -1 :hide? t)
                      (("1" (lemma "adjacent_edges_share_only_vertex")
                        (("1" (inst - "G" "i" "i!1")
                          (("1" (hide -2)
                            (("1" (assert)
                              (("1"
                                (ground)
                                (("1"
                                  (inst - "s`p1")
                                  (("1"
                                    (replace -3)
                                    (("1"
                                      (replace -4)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (typepred "e`p2")
                                            (("1"
                                              (typepred "s`p2")
                                              (("1" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (replace -2)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst - "s`p2")
                                  (("1"
                                    (replace -3)
                                    (("1"
                                      (replace -4)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (replace -2)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (ground)
                            (("1" (inst - "s`p1")
                              (("1"
                                (replace -2)
                                (("1"
                                  (replace -3)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -1)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst - "s`p2")
                              (("2"
                                (replace -2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (replace -3)
                                    (("2"
                                      (replace -1)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (same_polygon_edge_overlaps_equal 0
  (same_polygon_edge_overlaps_equal-1 nil 3874129020
   ("" (skeep)
    (("" (auto-rewrite "is_point_on_seg_equiv")
      (("" (expand "edge_of_polygon?")
        (("" (skeep*)
          (("" (expand "are_segments_overlapping?")
            (("" (skeep)
              (("" (lemma "only_adjacent_edges_intersect")
                (("" (inst - "G" "i" "i!1")
                  (("" (assert)
                    (("" (inst?)
                      (("" (assert)
                        (("" (case-replace "i!1 = i")
                          (("1" (assert) nil nil)
                           ("2"
                            (case "adjacent_edge?(G`num_vertices, i)(i!1)")
                            (("1" (hide -2)
                              (("1"
                                (lemma
                                 "adjacent_edges_share_only_vertex")
                                (("1"
                                  (inst - "G" "i" "i!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst-cp - "p1")
                                      (("1"
                                        (inst - "p2")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand
                                             "edges_of_polygon"
                                             (-1 -2))
                                            (("1"
                                              (typepred "G`vertices")
                                              (("1"
                                                (expand
                                                 "uniq_vertex_list?")
                                                (("1"
                                                  (expand
                                                   "adjacent_edge?")
                                                  (("1"
                                                    (typepred "G")
                                                    (("1"
                                                      (expand
                                                       "simple_polygon_2d?")
                                                      (("1"
                                                        (split -5)
                                                        (("1"
                                                          (expand
                                                           "abs")
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "i"
                                                                   "next_index(G,i!1)")
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "next_index"
                                                                     +)
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "i!1"
                                                                   "next_index(G,i)")
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "next_index"
                                                                     +)
                                                                    (("2"
                                                                      (lift-if)
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (expand
                                                             "next_index")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "i"
                                                                 "1")
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (flatten)
                                                          (("3"
                                                            (expand
                                                             "next_index")
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (inst
                                                                 -
                                                                 "i!1"
                                                                 "1")
                                                                (("3"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-1 1 2))
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (interior_point_is_nonvertex 0
  (interior_point_is_nonvertex-1 nil 3874129020
   ("" (skeep + t)
    (("" (expand "simple_polygon_2d?")
      (("" (expand "vertex?")
        (("" (skeep)
          (("" (case-replace "i!1 = i")
            (("1" (replace -8)
              (("1" (rewrite "scal_sub_left")
                (("1" (case "p = G`vertices(next_index(G, i))")
                  (("1" (typepred "G`vertices")
                    (("1" (expand "uniq_vertex_list?")
                      (("1" (inst - "i" "next_index(G, i)")
                        (("1" (assert) nil nil)
                         ("2" (flatten)
                          (("2" (expand "next_index")
                            (("2" (lift-if) (("2" (ground) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (name-replace "N" "G`vertices(next_index(G, i))")
                    (("2" (move-terms -7 r (1 2))
                      (("2" (cancel-add -7)
                        (("2" (cancel-by -7 "t") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "adjacent_edge?(G`num_vertices, i)(i!1)")
              (("1" (lemma "adjacent_edges_share_only_vertex")
                (("1" (inst - "G" "i" "i!1")
                  (("1" (ground)
                    (("1" (inst?)
                      (("1" (expand "edges_of_polygon")
                        (("1" (ground)
                          (("1" (typepred "G`vertices")
                            (("1" (expand "uniq_vertex_list?")
                              (("1"
                                (replace -2 :dir rl)
                                (("1"
                                  (move-terms -9 r 2)
                                  (("1"
                                    (factor -9 l)
                                    (("1"
                                      (cancel-by -9 "1-t")
                                      (("1"
                                        (inst - "i" "i!1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "vertex_neq_next")
                            (("2" (inst - "G" "i!1")
                              (("2" (ground) nil nil)) nil))
                            nil)
                           ("3" (rewrite "is_point_on_seg_equiv")
                            (("3" (expand "point_on_segment?")
                              (("3"
                                (inst + "0")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (rewrite "is_point_on_seg_equiv")
                        (("2" (expand "edges_of_polygon")
                          (("2" (expand "point_on_segment?")
                            (("2" (inst?) (("2" (ground) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "polygon_edges_do_not_cross?")
                (("2" (inst - "i" "i!1")
                  (("2" (inst?)
                    (("1" (assert)
                      (("1" (expand "edges_of_polygon")
                        (("1" (assert)
                          (("1" (rewrite "is_point_on_seg_equiv")
                            (("1" (expand "point_on_segment?")
                              (("1"
                                (split -1)
                                (("1"
                                  (replace -1 :dir rl)
                                  (("1"
                                    (move-terms -6 r 1)
                                    (("1"
                                      (factor -6 l)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (cancel-by -6 "t")
                                          (("1"
                                            (lemma "vertex_neq_next")
                                            (("1"
                                              (inst - "G" "i")
                                              (("1" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite* "scal_sub_left")
                                      (("2"
                                        (ground)
                                        (("1" (grind) nil nil)
                                         ("2"
                                          (cancel-add -1)
                                          (("2"
                                            (replace -1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -1 :dir rl)
                                  (("2"
                                    (move-terms -6 r 2)
                                    (("2"
                                      (factor -6 l)
                                      (("2"
                                        (cancel-by -6 "1-t")
                                        (("2"
                                          (lemma "vertex_neq_next")
                                          (("2"
                                            (inst - "G" "i")
                                            (("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (inst + "0")
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "vertex_neq_next")
                      (("2" (inst - "G" "i!1")
                        (("2" (ground)
                          (("2" (rewrite "is_point_on_seg_equiv")
                            (("2" (expand "point_on_segment?")
                              (("2"
                                (inst?)
                                (("2"
                                  (expand "edges_of_polygon")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (nonvertex_on_one_edge 0
  (nonvertex_on_one_edge-1 nil 3874129020
   ("" (skeep + t)
    (("" (expand "nonvertex?")
      (("" (expand "simple_polygon_2d?")
        (("" (expand "polygon_edges_do_not_cross?")
          (("" (expand "edge_of_polygon?")
            (("" (skeep*)
              (("" (lemma "adjacent_edges_share_only_vertex")
                (("" (inst - "G" "i" "i!1")
                  (("1" (ground)
                    (("1" (inst?)
                      (("1" (expand "vertex?")
                        (("1" (inst-cp 1 "i!1")
                          (("1" (inst 1 "i")
                            (("1" (expand "edges_of_polygon")
                              (("1"
                                (ground)
                                (("1"
                                  (rewrite "is_point_on_seg_equiv")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "vertex_neq_next")
                        (("2" (inst - "G" "i!1")
                          (("2" (ground)
                            (("2" (rewrite "is_point_on_seg_equiv") nil
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst - "i" "i!1")
                    (("2" (expand "adjacent_edge?")
                      (("2" (inst - "p")
                        (("1" (expand "edges_of_polygon")
                          (("1" (split -1)
                            (("1" (assert) nil nil)
                             ("2" (expand "vertex?")
                              (("2"
                                (inst + "i")
                                (("2" (assert) nil nil))
                                nil))
                              nil)
                             ("3" (expand "vertex?")
                              (("3"
                                (inst?)
                                (("3" (assert) nil nil))
                                nil))
                              nil)
                             ("4" (rewrite "is_point_on_seg_equiv")
                              (("4" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (lemma "vertex_neq_next")
                          (("2" (inst - "G" "i!1")
                            (("2" (typepred "G`num_vertices")
                              (("2"
                                (rewrite "is_point_on_seg_equiv")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (vertex_is_segment_endpoint 0
  (vertex_is_segment_endpoint-1 nil 3874129020
   ("" (skeep + t)
    (("" (expand "vertex?")
      (("" (expand "point_on_segment?")
        (("" (expand "edge_of_polygon?")
          (("" (skeep*)
            (("" (expand "edges_of_polygon")
              (("" (case-replace "t = 0")
                (("1" (assert) nil nil)
                 ("2" (case-replace "t = 1")
                  (("1" (assert) nil nil)
                   ("2" (replace -2 -5 :dir rl)
                    (("2" (assert)
                      (("2" (case-replace "i!1 = i")
                        (("1" (assert) nil nil)
                         ("2" (lemma "interior_point_is_nonvertex")
                          (("2" (inst - "p" "G" "t" "i")
                            (("2" (assert)
                              (("2"
                                (expand "vertex?")
                                (("2" (inst?) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (vertex_is_edge_endpoint 0
  (vertex_is_edge_endpoint-1 nil 3874129020
   ("" (skeep)
    (("" (ground)
      (("1" (expand "vertex?")
        (("1" (skeep)
          (("1"
            (inst + "(# p1 := p, p2 := G`vertices(next_index(G,i)) #)")
            (("1" (grind) nil nil) ("2" (grind) nil nil)
             ("3" (lemma "vertex_neq_next")
              (("3" (inst - "G" "i") (("3" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep - t)
        (("2" (expand "edge_of_polygon?")
          (("2" (skeep)
            (("2" (expand "vertex?")
              (("2" (expand "edges_of_polygon")
                (("2" (expand "segment_endpoint?")
                  (("2" (ground)
                    (("1" (inst?) (("1" (grind) nil nil)) nil)
                     ("2" (inst + "next_index(G,i)")
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (vertex_on_two_edges 0
  (vertex_on_two_edges-1 nil 3874129020
   ("" (skeep + t)
    (("" (expand "edge_of_polygon?")
      (("" (skeep)
        (("" (expand "edges_of_polygon")
          (("" (use "vertex_is_segment_endpoint")
            (("" (split -1 :depth 1)
              (("1" (replace -3 :dir rl)
                (("1" (assert)
                  (("1" (split -1)
                    (("1" (assert)
                      (("1" (typepred "G`vertices")
                        (("1" (expand "uniq_vertex_list?")
                          (("1" (inst - "i" "i!1")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (typepred "G`vertices")
                        (("2" (expand "uniq_vertex_list?")
                          (("2" (inst - "i" "next_index(G,i!1)")
                            (("1" (assert) nil nil)
                             ("2" (flatten)
                              (("2"
                                (replace -1 1 :dir rl)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (expand "vertex?")
                  (("2" (inst + "i") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (is_point_in_polygon_recursive?_TCC1 0
  (is_point_in_polygon_recursive?_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (is_point_in_polygon_recursive? subtype
    "((number_fields.-)(polygons_2d.polygon`num_vertices, polygons_2d.index))"
    "naturalnumber"))
  (is_point_in_polygon_recursive?_TCC1-1 nil 3874127548
   ("" (subtype-tcc) nil nil) nil nil
   (is_point_in_polygon_recursive? subtype
    "((number_fields.-)(polygons_2d.polygon`num_vertices, polygons_2d.index))"
    "naturalnumber")))
 (is_point_in_polygon_recursive?_TCC2 0
  (is_point_in_polygon_recursive?_TCC2-2 nil 3874129020
   ("" (termination-tcc) nil nil) nil shostak
   (is_point_in_polygon_recursive? termination
    "polygons_2d.is_point_in_polygon_recursive?(polygons_2d.polygon, polygons_2d.point, (number_fields.+)(polygons_2d.index, 1), xor_def.XOR(polygons_2d.is_inside, polygons_2d.is_right_point_ray_intersection?(polygons_2d.point, polygons_2d.segment)))"
    "nil"))
  (is_point_in_polygon_recursive?_TCC2-1 nil 3874127548
   ("" (termination-tcc) nil nil) nil nil
   (is_point_in_polygon_recursive? termination
    "polygons_2d.is_point_in_polygon_recursive?(polygons_2d.polygon, polygons_2d.point, (number_fields.+)(polygons_2d.index, 1), xor_def.XOR(polygons_2d.is_inside, polygons_2d.is_right_point_ray_intersection?(polygons_2d.point, polygons_2d.segment)))"
    "nil")))
 (is_point_in_polygon_recursive_negation 0
  (is_point_in_polygon_recursive_negation-1 nil 3874129020
   ("" (skeep + t)
    (("" (generalize "index" "index" "below(polygon`num_vertices)")
      ((""
        (induct "index" :name
         "backward_below_induction[polygon`num_vertices]")
        (("1" (grind) nil nil)
         ("2" (skeep + t)
          (("2" (split)
            (("1" (expand "is_point_in_polygon_recursive?" 1)
              (("1"
                (case "is_right_point_ray_intersection?(point, edges_of_polygon(polygon)(i))")
                (("1" (expand* "XOR" "/=")
                  (("1" (assert) (("1" (bash) nil nil)) nil)) nil)
                 ("2" (expand* "XOR" "/=") (("2" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("2" (field) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (is_point_in_polygon_inclusive?_TCC1 0
  (is_point_in_polygon_inclusive?_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (is_point_in_polygon_inclusive? subtype "0"
    "naturalnumbers.below(polygons_2d.polygon`num_vertices)"))
  (is_point_in_polygon_inclusive?_TCC1-1 nil 3874127548
   ("" (subtype-tcc) nil nil) nil nil
   (is_point_in_polygon_inclusive? subtype "0"
    "naturalnumbers.below(polygons_2d.polygon`num_vertices)")))
 (center_of_diamond_is_inside 0
  (center_of_diamond_is_inside-1 nil 3874129020
   ("" (skoletin)
    (("" (expand "is_point_in_polygon_exclusive?")
      (("" (expand "example_diamond")
        (("" (split)
          (("1" (grind) nil nil)
           ("2" (flatten)
            (("2" (expand "is_point_in_polygon_recursive?")
              (("2" (hide 1)
                (("2" (expand "is_right_point_ray_intersection?")
                  (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (outside_left_of_diamond_is_outside 0
  (outside_left_of_diamond_is_outside-1 nil 3874129020
   ("" (grind) nil nil) nil shostak))
 (above_center_of_diamond_is_inside 0
  (above_center_of_diamond_is_inside-1 nil 3874129020
   ("" (grind) nil nil) nil shostak))
 (above_outside_left_of_diamond_is_outside 0
  (above_outside_left_of_diamond_is_outside-1 nil 3874129020
   ("" (grind) nil nil) nil shostak))
 (way_above_diamond_is_outside 0
  (way_above_diamond_is_outside-1 nil 3874129020 ("" (grind) nil nil)
   nil shostak))
 (polygons_are_inside_themselves 0
  (polygons_are_inside_themselves-1 nil 3874129020
   ("" (skeep 1 t)
    (("" (expand "is_polygon_inside_polygon?")
      (("" (skeep 1 t)
        (("" (expand "is_point_in_polygon_inclusive?")
          (("" (split)
            (("1" (propax) nil nil)
             ("2" (flatten)
              (("2" (hide 2)
                (("2" (expand "is_point_on_polygon_perimeter?")
                  (("2" (expand "vertex?")
                    (("2" (skeep -1 t)
                      (("2" (inst 1 "edges_of_polygon(polygon)(i)")
                        (("1" (expand "is_point_on_segment?")
                          (("1" (split)
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil)
                             ("3"
                              (name-replace*
                               ("p1"
                                "edges_of_polygon(polygon)(i)`p1"
                                "p2"
                                "edges_of_polygon(polygon)(i)`p2"))
                              (("3"
                                (name-replace
                                 "v1"
                                 "vector_from_point_to_point(p1, p2)")
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (insert_vertex_TCC1 0
  (insert_vertex_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (insert_vertex subtype
    "(number_fields.+)(polygons_2d.A`num_vertices, 1)"
    "integers.upfrom(3)"))
  (insert_vertex_TCC1-1 nil 3874127548 ("" (subtype-tcc) nil nil) nil
   nil
   (insert_vertex subtype
    "(number_fields.+)(polygons_2d.A`num_vertices, 1)"
    "integers.upfrom(3)")))
 (insert_vertex_TCC2 0
  (insert_vertex_TCC2-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (insert_vertex subtype "polygons_2d.n"
    "naturalnumbers.below(polygons_2d.A`num_vertices)"))
  (insert_vertex_TCC2-1 nil 3874127548 ("" (subtype-tcc) nil nil) nil
   nil
   (insert_vertex subtype "polygons_2d.n"
    "naturalnumbers.below(polygons_2d.A`num_vertices)")))
 (insert_vertex_TCC3 0
  (insert_vertex_TCC3-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (insert_vertex subtype "(number_fields.-)(polygons_2d.n, 1)"
    "naturalnumbers.below(polygons_2d.A`num_vertices)"))
  (insert_vertex_TCC3-1 nil 3874127548 ("" (subtype-tcc) nil nil) nil
   nil
   (insert_vertex subtype "(number_fields.-)(polygons_2d.n, 1)"
    "naturalnumbers.below(polygons_2d.A`num_vertices)")))
 (insert_vertex_TCC4 0
  (insert_vertex_TCC4-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (insert_vertex subtype
    "LAMBDA (n: naturalnumbers.upto(polygons_2d.A`num_vertices)): IF reals.<(n, polygons_2d.i) THEN polygons_2d.A`vertices(n) ELSIF n = polygons_2d.i THEN polygons_2d.p ELSE polygons_2d.A`vertices((number_fields.-)(n, 1)) ENDIF"
    "[naturalnumbers.below((number_fields.+)(1, polygons_2d.A`num_vertices)) -> point_2d]"))
  (insert_vertex_TCC4-1 nil 3874127548 ("" (subtype-tcc) nil nil) nil
   nil
   (insert_vertex subtype
    "LAMBDA (n: naturalnumbers.upto(polygons_2d.A`num_vertices)): IF reals.<(n, polygons_2d.i) THEN polygons_2d.A`vertices(n) ELSIF n = polygons_2d.i THEN polygons_2d.p ELSE polygons_2d.A`vertices((number_fields.-)(n, 1)) ENDIF"
    "[naturalnumbers.below((number_fields.+)(1, polygons_2d.A`num_vertices)) -> point_2d]")))
 (insert_vertex_TCC5 0
  (insert_vertex_TCC5-2 nil 3874129020
   ("" (skeep 1 t)
    (("" (split)
      (("1" (grind) nil nil)
       ("2" (typepred "A`num_vertices" "A`vertices")
        (("2" (expand "uniq_vertex_list?")
          (("2" (skeep 1 t)
            (("2" (lift-if)
              (("2" (split)
                (("1" (flatten)
                  (("1" (lift-if)
                    (("1" (split)
                      (("1" (grind) nil nil)
                       ("2" (flatten) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (lift-if)
                    (("2" (split)
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (insert_vertex subtype
    "LAMBDA (n: naturalnumbers.upto(polygons_2d.A`num_vertices)): IF reals.<(n, polygons_2d.i) THEN polygons_2d.A`vertices(n) ELSIF n = polygons_2d.i THEN polygons_2d.p ELSE polygons_2d.A`vertices((number_fields.-)(n, 1)) ENDIF"
    "vertex_list.uniq_vertex_list((number_fields.+)(1, polygons_2d.A`num_vertices))"))
  (insert_vertex_TCC5-1 nil 3874127548 ("" (subtype-tcc) nil nil) nil
   nil
   (insert_vertex subtype
    "LAMBDA (n: naturalnumbers.upto(polygons_2d.A`num_vertices)): IF reals.<(n, polygons_2d.i) THEN polygons_2d.A`vertices(n) ELSIF n = polygons_2d.i THEN polygons_2d.p ELSE polygons_2d.A`vertices((number_fields.-)(n, 1)) ENDIF"
    "vertex_list.uniq_vertex_list((number_fields.+)(1, polygons_2d.A`num_vertices))")))
 (insert_vertex_TCC6 0
  (insert_vertex_TCC6-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (insert_vertex subtype
    "(# num_vertices := (number_fields.+)(polygons_2d.A`num_vertices, 1), vertices := LAMBDA (n: naturalnumbers.upto(polygons_2d.A`num_vertices)): IF reals.<(n, polygons_2d.i) THEN polygons_2d.A`vertices(n) ELSIF n = polygons_2d.i THEN polygons_2d.p ELSE polygons_2d.A`vertices((number_fields.-)(n, 1)) ENDIF #)"
    "{s: polygons_2d.polygon_2d | s`num_vertices = (number_fields.+)(1, polygons_2d.A`num_vertices)}"))
  (insert_vertex_TCC6-1 nil 3874127548 ("" (subtype-tcc) nil nil) nil
   nil
   (insert_vertex subtype
    "(# num_vertices := (number_fields.+)(polygons_2d.A`num_vertices, 1), vertices := LAMBDA (n: naturalnumbers.upto(polygons_2d.A`num_vertices)): IF reals.<(n, polygons_2d.i) THEN polygons_2d.A`vertices(n) ELSIF n = polygons_2d.i THEN polygons_2d.p ELSE polygons_2d.A`vertices((number_fields.-)(n, 1)) ENDIF #)"
    "{s: polygons_2d.polygon_2d | s`num_vertices = (number_fields.+)(1, polygons_2d.A`num_vertices)}")))
 (insert_vertex_seq_TCC1 0
  (insert_vertex_seq_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (insert_vertex_seq subtype
    "(number_fields.-)((number_fields.-)(polygons_2d.seq`length, 1), polygons_2d.j)"
    "naturalnumber"))
  (insert_vertex_seq_TCC1-1 nil 3874127548 ("" (subtype-tcc) nil nil)
   nil nil
   (insert_vertex_seq subtype
    "(number_fields.-)((number_fields.-)(polygons_2d.seq`length, 1), polygons_2d.j)"
    "naturalnumber")))
 (insert_vertex_seq_TCC2 0
  (insert_vertex_seq_TCC2-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (insert_vertex_seq subtype "polygons_2d.A"
    "{s: polygons_2d.polygon_2d | s`num_vertices = (number_fields.-)((number_fields.+)(polygons_2d.A`num_vertices, polygons_2d.seq`length), polygons_2d.j)}"))
  (insert_vertex_seq_TCC2-1 nil 3874127548 ("" (subtype-tcc) nil nil)
   nil nil
   (insert_vertex_seq subtype "polygons_2d.A"
    "{s: polygons_2d.polygon_2d | s`num_vertices = (number_fields.-)((number_fields.+)(polygons_2d.A`num_vertices, polygons_2d.seq`length), polygons_2d.j)}")))
 (insert_vertex_seq_TCC3 0
  (insert_vertex_seq_TCC3-2 nil 3874129020
   ("" (skeep* + t)
    (("" (expand "insert_vertex_seq_pre") (("" (inst?) nil nil)) nil))
    nil)
   nil shostak
   (insert_vertex_seq subtype "polygons_2d.seq`seq(polygons_2d.j)"
    "(polygons_2d.nonvertex?(polygons_2d.A))"))
  (insert_vertex_seq_TCC3-1 nil 3874127548 ("" (subtype-tcc) nil nil)
   nil nil
   (insert_vertex_seq subtype "polygons_2d.seq`seq(polygons_2d.j)"
    "(polygons_2d.nonvertex?(polygons_2d.A))")))
 (insert_vertex_seq_TCC4 0
  (insert_vertex_seq_TCC4-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (insert_vertex_seq subtype
    "polygons_2d.insert_vertex(polygons_2d.A, polygons_2d.i, polygons_2d.seq`seq(polygons_2d.j))"
    "{s: polygons_2d.polygon_2d | s`num_vertices = (number_fields.-)((number_fields.+)(polygons_2d.A`num_vertices, polygons_2d.seq`length), polygons_2d.j)}"))
  (insert_vertex_seq_TCC4-1 nil 3874127548 ("" (subtype-tcc) nil nil)
   nil nil
   (insert_vertex_seq subtype
    "polygons_2d.insert_vertex(polygons_2d.A, polygons_2d.i, polygons_2d.seq`seq(polygons_2d.j))"
    "{s: polygons_2d.polygon_2d | s`num_vertices = (number_fields.-)((number_fields.+)(polygons_2d.A`num_vertices, polygons_2d.seq`length), polygons_2d.j)}")))
 (insert_vertex_seq_TCC5 0
  (insert_vertex_seq_TCC5-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (insert_vertex_seq subtype "polygons_2d.seq`seq(polygons_2d.j)"
    "(polygons_2d.nonvertex?(polygons_2d.A))"))
  (insert_vertex_seq_TCC5-1 nil 3874127548 ("" (subtype-tcc) nil nil)
   nil nil
   (insert_vertex_seq subtype "polygons_2d.seq`seq(polygons_2d.j)"
    "(polygons_2d.nonvertex?(polygons_2d.A))")))
 (insert_vertex_seq_TCC6 0
  (insert_vertex_seq_TCC6-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (insert_vertex_seq subtype "(number_fields.+)(polygons_2d.i, 1)"
    "naturalnumbers.upto(polygons_2d.insert_vertex(polygons_2d.A, polygons_2d.i, polygons_2d.seq`seq(polygons_2d.j))`num_vertices)"))
  (insert_vertex_seq_TCC6-1 nil 3874127548 ("" (subtype-tcc) nil nil)
   nil nil
   (insert_vertex_seq subtype "(number_fields.+)(polygons_2d.i, 1)"
    "naturalnumbers.upto(polygons_2d.insert_vertex(polygons_2d.A, polygons_2d.i, polygons_2d.seq`seq(polygons_2d.j))`num_vertices)")))
 (insert_vertex_seq_TCC7 0
  (insert_vertex_seq_TCC7-2 nil 3874129020
   ("" (skeep 1 t)
    (("" (expand "insert_vertex_seq_pre")
      (("" (split)
        (("1" (hide -2 -4) (("1" (grind) nil nil)) nil)
         ("2" (skeep 1 t)
          (("2" (expand "insert_vertex")
            (("2" (inst -6 "i_1")
              (("2" (case "seq`seq(j) /= seq`seq(i_1)")
                (("1" (hide -5)
                  (("1" (expand "nonvertex?")
                    (("1" (expand "vertex?")
                      (("1" (skeep -4 t)
                        (("1" (lift-if)
                          (("1" (split)
                            (("1" (flatten) (("1" (inst? 2) nil nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split)
                                (("1" (flatten) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (inst 4 "i_2 - 1")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-2 -4 1))
                  (("2" (expand "uniq_vertex_seq?")
                    (("2" (inst -2 "i_1" "j") (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (insert_vertex_seq subtype "(number_fields.+)(polygons_2d.j, 1)"
    "{k: naturalnumbers.below(polygons_2d.seq`length) | polygons_2d.insert_vertex_seq_pre(polygons_2d.insert_vertex(polygons_2d.A, polygons_2d.i, polygons_2d.seq`seq(polygons_2d.j)), polygons_2d.seq, k)}"))
  (insert_vertex_seq_TCC7-1 nil 3874127548 ("" (subtype-tcc) nil nil)
   nil nil
   (insert_vertex_seq subtype "(number_fields.+)(polygons_2d.j, 1)"
    "{k: naturalnumbers.below(polygons_2d.seq`length) | polygons_2d.insert_vertex_seq_pre(polygons_2d.insert_vertex(polygons_2d.A, polygons_2d.i, polygons_2d.seq`seq(polygons_2d.j)), polygons_2d.seq, k)}")))
 (insert_vertex_seq_TCC8 0
  (insert_vertex_seq_TCC8-2 nil 3874129020
   ("" (termination-tcc) nil nil) nil shostak
   (insert_vertex_seq termination
    "polygons_2d.insert_vertex_seq(polygons_2d.insert_vertex(polygons_2d.A, polygons_2d.i, polygons_2d.seq`seq(polygons_2d.j)), (number_fields.+)(polygons_2d.i, 1), polygons_2d.seq, (number_fields.+)(polygons_2d.j, 1))"
    "nil"))
  (insert_vertex_seq_TCC8-1 nil 3874127548
   ("" (termination-tcc) nil nil) nil nil
   (insert_vertex_seq termination
    "polygons_2d.insert_vertex_seq(polygons_2d.insert_vertex(polygons_2d.A, polygons_2d.i, polygons_2d.seq`seq(polygons_2d.j)), (number_fields.+)(polygons_2d.i, 1), polygons_2d.seq, (number_fields.+)(polygons_2d.j, 1))"
    "nil")))
 (insert_vertex_seq_TCC9 0
  (insert_vertex_seq_TCC9-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (insert_vertex_seq subtype
    "polygons_2d.insert_vertex_seq(polygons_2d.insert_vertex(polygons_2d.A, polygons_2d.i, polygons_2d.seq`seq(polygons_2d.j)), (number_fields.+)(polygons_2d.i, 1), polygons_2d.seq, (number_fields.+)(polygons_2d.j, 1))"
    "{s: polygons_2d.polygon_2d | s`num_vertices = (number_fields.-)((number_fields.+)(polygons_2d.A`num_vertices, polygons_2d.seq`length), polygons_2d.j)}"))
  (insert_vertex_seq_TCC9-1 nil 3874127548 ("" (subtype-tcc) nil nil)
   nil nil
   (insert_vertex_seq subtype
    "polygons_2d.insert_vertex_seq(polygons_2d.insert_vertex(polygons_2d.A, polygons_2d.i, polygons_2d.seq`seq(polygons_2d.j)), (number_fields.+)(polygons_2d.i, 1), polygons_2d.seq, (number_fields.+)(polygons_2d.j, 1))"
    "{s: polygons_2d.polygon_2d | s`num_vertices = (number_fields.-)((number_fields.+)(polygons_2d.A`num_vertices, polygons_2d.seq`length), polygons_2d.j)}")))
 (polygon_segment_is_not_outside_inclusive 0
  (polygon_segment_is_not_outside_inclusive-1 nil 3874129020
   ("" (skeep + t)
    (("" (expand "edge_of_polygon?")
      (("" (skeep - t)
        ((""
          (expand* "segment_outside_inclusive?"
           "is_point_in_polygon_inclusive?"
           "is_point_on_polygon_perimeter?")
          (("" (inst - "edges_of_polygon(polygon)(i)`p1")
            (("1" (split)
              (("1" (propax) nil nil)
               ("2" (flatten)
                (("2" (hide 2)
                  (("2" (inst + "edges_of_polygon(polygon)(i)")
                    (("2" (expand "is_point_on_segment?")
                      (("2" (split)
                        (("1" (grind) nil nil) ("2" (grind) nil nil)
                         ("3"
                          (name-replace*
                           ("p1" "edges_of_polygon(polygon)(i)`p1" "p2"
                            "edges_of_polygon(polygon)(i)`p2"))
                          (("3"
                            (name-replace "v"
                             "vector_from_point_to_point(p1, p2)")
                            (("3" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "is_point_on_segment?")
              (("2" (split)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3"
                  (name-replace*
                   ("p1" "edges_of_polygon(polygon)(i)`p1" "p2"
                    "edges_of_polygon(polygon)(i)`p2"))
                  (("3"
                    (name-replace "v"
                     "vector_from_point_to_point(edge`p1, edge`p2)")
                    (("3" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (polygon_segment_is_outside_exclusive 0
  (polygon_segment_is_outside_exclusive-1 nil 3874129020
   ("" (skeep 1 t)
    (("" (assert)
      (("" (expand "segment_outside_exclusive?")
        (("" (skeep 1 t)
          (("" (expand "is_point_in_polygon_exclusive?")
            (("" (split)
              (("1" (propax) nil nil)
               ("2" (flatten)
                (("2" (hide -1)
                  (("2" (expand "is_point_on_polygon_perimeter?")
                    (("2" (inst 1 "edges_of_polygon(polygon)(idx)")
                      (("2" (expand "edge_of_polygon?")
                        (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (polygon_segment_is_inside_inclusive 0
  (polygon_segment_is_inside_inclusive-1 nil 3874129020
   ("" (skeep 1 t)
    (("" (assert)
      (("" (expand "segment_inside_inclusive?")
        (("" (skeep 1 t)
          (("" (expand "is_point_in_polygon_inclusive?")
            (("" (split)
              (("1" (propax) nil nil)
               ("2" (flatten)
                (("2" (hide 2)
                  (("2" (expand "is_point_on_polygon_perimeter?")
                    (("2" (inst 1 "edges_of_polygon(polygon)(idx)")
                      (("2" (expand "edge_of_polygon?")
                        (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (polygon_segment_is_not_inside_exclusive 0
  (polygon_segment_is_not_inside_exclusive-1 nil 3874129020
   ("" (skeep + t)
    (("" (expand "edge_of_polygon?")
      (("" (skeep - t)
        (("" (expand "segment_inside_exclusive?")
          (("" (inst - "edges_of_polygon(polygon)(i)`p1")
            (("1" (expand "is_point_in_polygon_exclusive?")
              (("1" (split)
                (("1" (propax) nil nil)
                 ("2" (flatten)
                  (("2" (hide -1)
                    (("2" (expand "is_point_on_polygon_perimeter?")
                      (("2" (inst + "edges_of_polygon(polygon)(i)")
                        (("2" (expand "is_point_on_segment?")
                          (("2" (split)
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil)
                             ("3"
                              (name-replace*
                               ("p1"
                                "edges_of_polygon(polygon)(i)`p1"
                                "p2"
                                "edges_of_polygon(polygon)(i)`p2"))
                              (("3"
                                (name-replace
                                 "v"
                                 "vector_from_point_to_point(p1, p2)")
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "is_point_on_segment?")
              (("2" (split)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3"
                  (name-replace*
                   ("p1" "edges_of_polygon(polygon)(i)`p1" "p2"
                    "edges_of_polygon(polygon)(i)`p2"))
                  (("3"
                    (name-replace "v"
                     "vector_from_point_to_point(edge`p1, edge`p2)")
                    (("3" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (path_outside_inclusive?_TCC1 0
  (path_outside_inclusive?_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (path_outside_inclusive? subtype "polygons_2d.n"
    "naturalnumbers.below(polygons_2d.p`num_vertices)"))
  (path_outside_inclusive?_TCC1-1 nil 3874127548
   ("" (subtype-tcc) nil nil) nil nil
   (path_outside_inclusive? subtype "polygons_2d.n"
    "naturalnumbers.below(polygons_2d.p`num_vertices)")))
 (path_outside_inclusive?_TCC2 0
  (path_outside_inclusive?_TCC2-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (path_outside_inclusive? subtype
    "(number_fields.+)(polygons_2d.n, 1)"
    "naturalnumbers.below(polygons_2d.p`num_vertices)"))
  (path_outside_inclusive?_TCC2-1 nil 3874127548
   ("" (subtype-tcc) nil nil) nil nil
   (path_outside_inclusive? subtype
    "(number_fields.+)(polygons_2d.n, 1)"
    "naturalnumbers.below(polygons_2d.p`num_vertices)")))
 (path_outside_inclusive?_TCC3 0
  (path_outside_inclusive?_TCC3-2 nil 3874129020
   ("" (skeep 1 t)
    (("" (typepred "p`vertices") (("" (grind) nil nil)) nil)) nil)
   nil shostak
   (path_outside_inclusive? subtype
    "polygons_2d.p`vertices((number_fields.+)(polygons_2d.n, 1))"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= polygons_2d.p`vertices(polygons_2d.n)}"))
  (path_outside_inclusive?_TCC3-1 nil 3874127548
   ("" (subtype-tcc) nil nil) nil nil
   (path_outside_inclusive? subtype
    "polygons_2d.p`vertices((number_fields.+)(polygons_2d.n, 1))"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= polygons_2d.p`vertices(polygons_2d.n)}")))
 (point_on_polygon_perimeter?_eq_is_point_on_polygon_perimeter? 0
  (point_on_polygon_perimeter?_eq_is_point_on_polygon_perimeter?-1 nil
   3874129020
   ("" (skeep)
    ((""
      (expand* "point_on_polygon_perimeter?"
       "is_point_on_polygon_perimeter?")
      (("" (lemma "point_on_segment?_iff_is_point_on_segment?")
        (("" (split)
          (("1" (flatten)
            (("1" (skeep - t)
              (("1" (inst?)
                (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (skeep - t)
              (("2" (inst?)
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (find_index_any_rec_TCC1 0
  (find_index_any_rec_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (find_index_any_rec subtype
    "polygons_2d.next_index(polygons_2d.G, polygons_2d.i)"
    "{n: integers.int | booleans.OR(n = (number_fields.-)(1), booleans.AND(reals.<=(0, n), reals.<(n, polygons_2d.G`num_vertices)))}"))
  (find_index_any_rec_TCC1-1 nil 3874127548 ("" (subtype-tcc) nil nil)
   nil nil
   (find_index_any_rec subtype
    "polygons_2d.next_index(polygons_2d.G, polygons_2d.i)"
    "{n: integers.int | booleans.OR(n = (number_fields.-)(1), booleans.AND(reals.<=(0, n), reals.<(n, polygons_2d.G`num_vertices)))}")))
 (find_index_any_rec_TCC2 0
  (find_index_any_rec_TCC2-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (find_index_any_rec subtype "polygons_2d.i"
    "{n: integers.int | booleans.OR(n = (number_fields.-)(1), booleans.AND(reals.<=(0, n), reals.<(n, polygons_2d.G`num_vertices)))}"))
  (find_index_any_rec_TCC2-1 nil 3874127548 ("" (subtype-tcc) nil nil)
   nil nil
   (find_index_any_rec subtype "polygons_2d.i"
    "{n: integers.int | booleans.OR(n = (number_fields.-)(1), booleans.AND(reals.<=(0, n), reals.<(n, polygons_2d.G`num_vertices)))}")))
 (find_index_any_rec_TCC3 0
  (find_index_any_rec_TCC3-2 nil 3874129020
   ("" (termination-tcc) nil nil) nil shostak
   (find_index_any_rec termination
    "polygons_2d.find_index_any_rec(polygons_2d.G, polygons_2d.p, (number_fields.-)(polygons_2d.i, 1))"
    "nil"))
  (find_index_any_rec_TCC3-1 nil 3874127548
   ("" (termination-tcc) nil nil) nil nil
   (find_index_any_rec termination
    "polygons_2d.find_index_any_rec(polygons_2d.G, polygons_2d.p, (number_fields.-)(polygons_2d.i, 1))"
    "nil")))
 (find_index_any_TCC1 0
  (find_index_any_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (find_index_any subtype
    "(number_fields.-)(polygons_2d.G`num_vertices, 1)"
    "naturalnumbers.below(polygons_2d.G`num_vertices)"))
  (find_index_any_TCC1-1 nil 3874127548 ("" (subtype-tcc) nil nil) nil
   nil
   (find_index_any subtype
    "(number_fields.-)(polygons_2d.G`num_vertices, 1)"
    "naturalnumbers.below(polygons_2d.G`num_vertices)")))
 (perimeter_find_index_any 0
  (perimeter_find_index_any-1 nil 3874129020
   ("" (skeep)
    (("" (expand "find_index_any")
      (("" (ground)
        (("1" (expand "point_on_polygon_perimeter?")
          (("1" (skeep - t)
            (("1" (expand "edge_of_polygon?")
              (("1" (skeep - t)
                (("1" (claim "i <= G`num_vertices - 1" (assert))
                  (("1" (hide -2)
                    (("1"
                      (generalize "G`num_vertices - 1" "n"
                       "below(G`num_vertices)")
                      (("1" (induct "n")
                        (("1" (flatten)
                          (("1" (expand "find_index_any_rec")
                            (("1" (lift-if) (("1" (ground) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (expand "find_index_any_rec" +)
                            (("2" (lift-if) (("2" (ground) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2"
          (generalize "G`num_vertices - 1" "n" "below(G`num_vertices)")
          (("2" (induct "n")
            (("1" (ground)
              (("1" (expand "find_index_any_rec")
                (("1" (lift-if)
                  (("1" (ground)
                    (("1" (expand "point_on_polygon_perimeter?")
                      (("1" (inst + "edges_of_polygon(G)(0)")
                        (("1" (replace -1) (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "point_on_polygon_perimeter?")
                      (("2" (inst?) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (expand "find_index_any_rec" -3)
                (("2" (lift-if)
                  (("2" (split -3)
                    (("1" (flatten)
                      (("1" (expand "point_on_polygon_perimeter?")
                        (("1" (inst + "edges_of_polygon(G)(1+jb)")
                          (("1" (replace -1) (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (ground)
                      (("2" (expand "point_on_polygon_perimeter?")
                        (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (point_on_find_index_segment_TCC1 0
  (point_on_find_index_segment_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (typepred "find_index_any(G, p)") (("" (ground) nil nil))
      nil))
    nil)
   nil shostak
   (point_on_find_index_segment subtype
    "polygons_2d.find_index_any(polygons_2d.G, polygons_2d.p)"
    "naturalnumbers.below(polygons_2d.G`num_vertices)"))
  (point_on_find_index_segment_TCC1-1 nil 3874127548
   ("" (subtype-tcc) nil nil) nil nil
   (point_on_find_index_segment subtype
    "polygons_2d.find_index_any(polygons_2d.G, polygons_2d.p)"
    "naturalnumbers.below(polygons_2d.G`num_vertices)")))
 (point_on_find_index_segment 0
  (point_on_find_index_segment-1 nil 3874129020
   ("" (skeep)
    (("" (expand "find_index_any")
      ((""
        (name-replace "fi"
         "find_index_any_rec(G, p, G`num_vertices - 1)" :hide? nil)
        (("1" (typepred "fi")
          (("1" (assert)
            (("1"
              (generalize "G`num_vertices - 1" "n"
               "below(G`num_vertices)")
              (("1" (induct "n")
                (("1" (ground)
                  (("1" (expand "find_index_any_rec")
                    (("1" (lift-if)
                      (("1" (ground)
                        (("1" (replace -1)
                          (("1" (replace -2) (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "find_index_any_rec")
                    (("2" (lift-if)
                      (("2" (ground)
                        (("2" (expand "next_index")
                          (("2" (replace -2 :dir rl)
                            (("2" (lift-if)
                              (("2"
                                (typepred "G`vertices")
                                (("2"
                                  (expand "uniq_vertex_list?")
                                  (("2"
                                    (ground)
                                    (("2"
                                      (inst - "1" "2")
                                      (("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (expand "find_index_any_rec" -4)
                    (("2" (lift-if)
                      (("2" (ground)
                        (("1" (replace -1)
                          (("1" (replace -2) (("1" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (replace -3)
                          (("2" (typepred "G`vertices")
                            (("2" (expand "uniq_vertex_list?")
                              (("2"
                                (inst - "fi" "next_index(G,fi)")
                                (("1" (ground) nil nil)
                                 ("2"
                                  (expand "next_index" 1)
                                  (("2"
                                    (lift-if)
                                    (("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (find_index_any_segment_rec_TCC1 0
  (find_index_any_segment_rec_TCC1-2 nil 3874129020
   ("" (skeep) (("" (typepred "k") (("" (ground) nil nil)) nil)) nil)
   nil shostak
   (find_index_any_segment_rec subtype
    "(number_fields.-)(polygons_2d.n, polygons_2d.k)"
    "naturalnumbers.below(polygons_2d.G`num_vertices)"))
  (find_index_any_segment_rec_TCC1-1 nil 3874127548
   ("" (subtype-tcc) nil nil) nil nil
   (find_index_any_segment_rec subtype
    "(number_fields.-)(polygons_2d.n, polygons_2d.k)"
    "naturalnumbers.below(polygons_2d.G`num_vertices)")))
 (find_index_any_segment_rec 0
  (find_index_any_segment_rec-1 nil 3874129020
   ("" (skeep)
    (("" (typepred "k")
      (("" (generalize "n" "n" "below(G`num_vertices)")
        (("1" (generalize "k" "k" "upto(n)")
          (("1" (induct "n")
            (("1" (grind) nil nil)
             ("2" (skeep)
              (("2" (skeep + t)
                (("2" (expand "find_index_any_rec" +)
                  (("2" (apply (repeat (lift-if)))
                    (("2" (case "k!1 = 0")
                      (("1" (grind) nil nil)
                       ("2" (inst - "k!1 - 1")
                        (("1" (assert)
                          (("1" (lift-if)
                            (("1" (typepred "G`vertices")
                              (("1"
                                (expand "uniq_vertex_list?")
                                (("1"
                                  (ground)
                                  (("1"
                                    (inst
                                     -
                                     "next_index(G, 1 + jb)"
                                     "next_index(G, 1 - k!1 + jb)")
                                    (("1" (ground) nil nil))
                                    nil)
                                   ("2"
                                    (lemma
                                     "points_on_distinct_edges_differ")
                                    (("2"
                                      (inst
                                       -
                                       "p"
                                       "G"
                                       "1 - k!1 + jb"
                                       "1 + jb")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (rewrite*
                                           "is_point_on_seg_equiv")
                                          (("2"
                                            (expand "edges_of_polygon")
                                            (("2"
                                              (equate
                                               "k!1"
                                               "1"
                                               (assert))
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "next_index")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (lemma
                                     "points_on_distinct_edges_differ")
                                    (("3"
                                      (inst
                                       -
                                       "p"
                                       "G"
                                       "1 - k!1 + jb"
                                       "1 + jb")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (rewrite*
                                           "is_point_on_seg_equiv")
                                          (("3"
                                            (ground)
                                            (("1"
                                              (expand
                                               "edges_of_polygon")
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2"
                                              (equate
                                               "k!1"
                                               "1 + jb"
                                               (assert))
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (expand
                                                     "next_index")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (replace -1)
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (lemma
                                     "points_on_distinct_edges_differ")
                                    (("4"
                                      (inst
                                       -
                                       "p"
                                       "G"
                                       "1 - k!1 + jb"
                                       "1 + jb")
                                      (("4"
                                        (assert)
                                        (("4"
                                          (rewrite*
                                           "is_point_on_seg_equiv")
                                          (("4"
                                            (ground)
                                            (("1"
                                              (expand
                                               "edges_of_polygon")
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2"
                                              (expand
                                               "edges_of_polygon")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil)
             ("5" (grind) nil nil))
            nil)
           ("2" (grind) nil nil) ("3" (grind) nil nil)
           ("4" (grind) nil nil))
          nil)
         ("2" (grind) nil nil) ("3" (grind) nil nil)
         ("4" (grind) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (find_index_any_segment 0
  (find_index_any_segment-1 nil 3874129020
   ("" (skeep)
    (("" (expand "find_index_any")
      (("" (lemma "find_index_any_segment_rec")
        ((""
          (inst - "G" "p" "G`num_vertices - 1"
           "G`num_vertices - 1 - i")
          (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (find_index_any_self 0
  (find_index_any_self-1 nil 3874129020
   ("" (skeep)
    (("" (use "find_index_any_segment") (("" (assert) nil nil)) nil))
    nil)
   nil shostak))
 (point_on_segment_rem_endpoints_TCC1 0
  (point_on_segment_rem_endpoints_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (lemma "rem_plus_1_eq_next_index")
      (("" (inst - "G" "rem(G`num_vertices)(j)")
        (("" (rewrite "rem_sum1")
          (("" (lemma "vertex_neq_next")
            (("" (inst - "G" "rem(G`num_vertices)(j)")
              (("" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (point_on_segment_rem_endpoints subtype
    "polygons_2d.G`vertices(modulo_arithmetic.rem(polygons_2d.G`num_vertices)((number_fields.+)(1, polygons_2d.j)))"
    "{p: vectors_cross_2d.point_2d | p /= polygons_2d.G`vertices(modulo_arithmetic.rem(polygons_2d.G`num_vertices)(polygons_2d.j))}"))
  (point_on_segment_rem_endpoints_TCC1-1 nil 3874127548
   ("" (subtype-tcc) nil nil) nil nil
   (point_on_segment_rem_endpoints subtype
    "polygons_2d.G`vertices(modulo_arithmetic.rem(polygons_2d.G`num_vertices)((number_fields.+)(1, polygons_2d.j)))"
    "{p: vectors_cross_2d.point_2d | p /= polygons_2d.G`vertices(modulo_arithmetic.rem(polygons_2d.G`num_vertices)(polygons_2d.j))}")))
 (point_on_segment_rem_endpoints 0
  (point_on_segment_rem_endpoints-1 nil 3874129020
   ("" (skeep)
    (("" (assert)
      (("" (lemma "rem_add_one")
        (("" (inst - "G`num_vertices" "G`num_vertices + i")
          (("" (flatten)
            ((""
              (case "rem(G`num_vertices)(G`num_vertices + i) = G`num_vertices - 1")
              (("1" (ground)
                (("1" (rewrite "rem_sum1" :dir rl)
                  (("1" (rewrite "rem_self")
                    (("1" (expand "edges_of_polygon")
                      (("1" (expand "next_index")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "point_on_polygon_perimeter?")
                  (("2" (inst?)
                    (("1" (expand "edge_of_polygon?")
                      (("1"
                        (inst +
                         "rem(G`num_vertices)(G`num_vertices + i)")
                        (("1" (expand "edges_of_polygon")
                          (("1" (expand "next_index")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (typepred "G`vertices")
                        (("2" (expand "uniq_vertex_list?")
                          (("2"
                            (inst -
                             "rem(G`num_vertices)(G`num_vertices + i)"
                             "0")
                            (("2" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (ground)
                  (("1" (expand "edges_of_polygon")
                    (("1" (expand "next_index")
                      (("1" (lift-if)
                        (("1" (replace -1)
                          (("1"
                            (equate
                             "rem(G`num_vertices)(G`num_vertices + i)"
                             "rem(G`num_vertices)(i)")
                            (("1" (ground) nil nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (rewrite "rem_sum1" :dir rl)
                                (("2"
                                  (rewrite "rem_self")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "point_on_polygon_perimeter?")
                    (("2" (inst?)
                      (("1" (expand "edge_of_polygon?")
                        (("1"
                          (inst +
                           "rem(G`num_vertices)(G`num_vertices + i)")
                          (("1" (expand "edges_of_polygon")
                            (("1" (expand "next_index")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (typepred "G`vertices")
                          (("2" (expand "uniq_vertex_list?")
                            (("2"
                              (inst -
                               "rem(G`num_vertices)(1 + G`num_vertices + i)"
                               "rem(G`num_vertices)(G`num_vertices + i)")
                              (("2" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (point_on_segment_rem_endpoints_2_TCC1 0
  (point_on_segment_rem_endpoints_2_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (rewrite "rem_plus_1_eq_next_index_2")
      (("" (lemma "vertex_neq_next")
        (("" (inst - "G" "rem(G`num_vertices)(i + j)")
          (("" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak
   (point_on_segment_rem_endpoints_2 subtype
    "polygons_2d.G`vertices(modulo_arithmetic.rem(polygons_2d.G`num_vertices)((number_fields.+)((number_fields.+)(1, polygons_2d.i), polygons_2d.j)))"
    "{p: vectors_cross_2d.point_2d | p /= polygons_2d.G`vertices(modulo_arithmetic.rem(polygons_2d.G`num_vertices)((number_fields.+)(polygons_2d.i, polygons_2d.j)))}"))
  (point_on_segment_rem_endpoints_2_TCC1-1 nil 3874127548
   ("" (subtype-tcc) nil nil) nil nil
   (point_on_segment_rem_endpoints_2 subtype
    "polygons_2d.G`vertices(modulo_arithmetic.rem(polygons_2d.G`num_vertices)((number_fields.+)((number_fields.+)(1, polygons_2d.i), polygons_2d.j)))"
    "{p: vectors_cross_2d.point_2d | p /= polygons_2d.G`vertices(modulo_arithmetic.rem(polygons_2d.G`num_vertices)((number_fields.+)(polygons_2d.i, polygons_2d.j)))}")))
 (point_on_segment_rem_endpoints_2 0
  (point_on_segment_rem_endpoints_2-1 nil 3874129020
   ("" (skeep)
    ((""
      (equate "rem(G`num_vertices)(1 + i + j)"
       "next_index(G, rem(G`num_vertices)(i + j))")
      (("1" (expand "edges_of_polygon")
        (("1" (assert)
          (("1" (expand "point_on_polygon_perimeter?")
            (("1"
              (inst +
               "edges_of_polygon(G)(rem(G`num_vertices)(i + j))")
              (("1" (expand "edges_of_polygon")
                (("1" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide-all-but 1)
        (("2" (rewrite "rem_plus_1_eq_next_index_2") nil nil)) nil))
      nil))
    nil)
   nil shostak)))

