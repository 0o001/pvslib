(horiz_edge_crossing
 (point_on_ray_reflexive 0
  (point_on_ray_reflexive-1 nil 3874129020 ("" (grind) nil nil) nil
   shostak))
 (point_on_ray_trans 0
  (point_on_ray_trans-1 nil 3874129020 ("" (grind) nil nil) nil
   shostak))
 (pt_above_p1_and_below_p2_and_x_in_range_imp_pt_on_seg_on_ray 0
  (pt_above_p1_and_below_p2_and_x_in_range_imp_pt_on_seg_on_ray-1 nil
   3874129020
   ("" (skeep)
    (("" (expand "x_in_range")
      (("" (assert)
        ((""
          (name "t"
                "(pt`y - segment`p1`y)/(segment`p2`y - segment`p1`y)")
          (("" (inst + "(1-t) * segment`p1 + t * segment`p2")
            (("1" (expand "point_on_ray?")
              (("1" (split)
                (("1" (replace -1 :dir RL :hide? t)
                  (("1" (grind) (("1" (field) nil nil)) nil)) nil)
                 ("2" (grind) (("2" (field) nil nil)) nil))
                nil))
              nil)
             ("2" (expand* "point_on_segment?" "point_on_segment?")
              (("2" (inst 1 "t")
                (("2" (split)
                  (("1" (use "pos_div_ge") (("1" (assert) nil nil))
                    nil)
                   ("2"
                    (case "pt`y - segment`p1`y <= segment`p2`y - segment`p1`y")
                    (("1" (div-by -1 "segment`p2`y - segment`p1`y")
                      (("1" (assert) nil nil)) nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (is_right_point_ray_intersect?_imp_exists_pt_on_seg_point_on_ray? 0
  (is_right_point_ray_intersect?_imp_exists_pt_on_seg_point_on_ray?-1
   nil 3874129020
   ("" (skeep)
    ((""
      (expand* "is_right_point_ray_intersection?" "x_in_range"
       "y_in_range")
      (("" (flatten)
        (("" (split)
          (("1" (split)
            (("1" (flatten)
              (("1" (hide-all-but (-1 -3 -4)) (("1" (field) nil nil))
                nil))
              nil)
             ("2" (flatten)
              (("2"
                (use "pt_above_p1_and_below_p2_and_x_in_range_imp_pt_on_seg_on_ray")
                (("2" (grind) nil nil)) nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (split)
              (("1" (flatten)
                (("1"
                  (lemma
                   "pt_above_p1_and_below_p2_and_x_in_range_imp_pt_on_seg_on_ray"
                   ("pt" "point" "segment" "reverse_segment(segment)"))
                  (("1" (expand "reverse_segment")
                    (("1" (assert)
                      (("1" (split)
                        (("1" (skeep - t)
                          (("1" (inst 1 "p")
                            (("1" (use "point_on_reverse_segment")
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (hide-all-but (-2 -3 1)) (("2" (field) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (rightmost_x_val_TCC1 0
  (rightmost_x_val_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (expand "vertex_x_values")
      (("" (typepred "G`num_vertices")
        (("" (expand "empty?")
          (("" (inst - "G`vertices(0)`x")
            (("1" (grind) nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (rightmost_x_val subtype
    "horiz_edge_crossing.vertex_x_values(horiz_edge_crossing.G)"
    "non_empty_finite_set[real]"))
  (rightmost_x_val_TCC1-1 nil 3874127560 ("" (subtype-tcc) nil nil) nil
   nil
   (rightmost_x_val subtype
    "horiz_edge_crossing.vertex_x_values(horiz_edge_crossing.G)"
    "non_empty_finite_set[real]")))
 (all_edges_to_left 0
  (all_edges_to_left-1 nil 3874129020
   ("" (skeep)
    (("" (typepred "e")
      (("" (expand "edge_of_polygon?")
        (("" (expand "point_on_segment?")
          (("" (skeep*)
            (("" (expand "rightmost_x_val")
              (("" (typepred "max[real,<=](vertex_x_values(G))")
                (("" (inst-cp -2 "e`p1`x")
                  (("" (inst -2 "e`p2`x")
                    (("" (expand "edges_of_polygon")
                      (("" (replace -7)
                        (("" (replace -4 :dir rl)
                          (("" (assert)
                            (("" (expand "vertex_x_values" -2 1)
                              ((""
                                (expand "vertex_x_values" -3 1)
                                ((""
                                  (split -2)
                                  (("1"
                                    (split -3)
                                    (("1"
                                      (expand "+" +)
                                      (("1"
                                        (expand "*" +)
                                        (("1"
                                          (lemma "one_parameter_max")
                                          (("1"
                                            (inst
                                             -
                                             "G`vertices(i)`x"
                                             "G`vertices(next_index(G, i))`x"
                                             "max[real,<=](vertex_x_values(G))"
                                             "t")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (inst + "i") nil nil))
                                    nil)
                                   ("2"
                                    (inst + "next_index(G,i)")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (vertex_on_perimeter 0
  (vertex_on_perimeter-1 nil 3874129020
   ("" (skeep)
    (("" (expand "vertex?")
      (("" (expand "point_on_polygon_perimeter?")
        (("" (skeep)
          ((""
            (inst + "(# p1 := p, p2 := G`vertices(next_index(G,i)) #)")
            (("1" (expand "point_on_segment?")
              (("1" (inst + "0") (("1" (assert) nil)))))
             ("2" (expand "edge_of_polygon?")
              (("2" (inst?)
                (("2" (expand "edges_of_polygon")
                  (("2" (propax) nil)))))))
             ("3" (use "vertices_diff_next_nonzero")
              (("3" (ground)
                (("3" (replace -1)
                  (("3" (replace -2)
                    (("3" (assert) nil))))))))))))))))))
    nil)
   nil shostak))
 (edge_right_crossing_point_TCC1 0
  (edge_right_crossing_point_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (edge_right_crossing_point subtype
    "((number_fields.-)(horiz_edge_crossing.e`p2`y, horiz_edge_crossing.e`p1`y))"
    "nznum"))
  (edge_right_crossing_point_TCC1-1 nil 3874127560
   ("" (subtype-tcc) nil nil) nil nil
   (edge_right_crossing_point subtype
    "((number_fields.-)(horiz_edge_crossing.e`p2`y, horiz_edge_crossing.e`p1`y))"
    "nznum")))
 (is_vertex_with_V_edges?_TCC1 0
  (is_vertex_with_V_edges?_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (is_vertex_with_V_edges? subtype "horiz_edge_crossing.e"
    "{e: segments_2d.segment_2d | (number_fields.-)(e`p2`y, e`p1`y) /= 0}"))
  (is_vertex_with_V_edges?_TCC1-1 nil 3874127560
   ("" (subtype-tcc) nil nil) nil nil
   (is_vertex_with_V_edges? subtype "horiz_edge_crossing.e"
    "{e: segments_2d.segment_2d | (number_fields.-)(e`p2`y, e`p1`y) /= 0}")))
 (right_crossing_edges_no_V_TCC1 0
  (right_crossing_edges_no_V_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (expand "is_right_point_ray_intersection?")
      (("" (flatten)
        (("" (expand "y_in_range") (("" (ground) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak
   (right_crossing_edges_no_V subtype "horiz_edge_crossing.e"
    "{e: segments_2d.segment_2d | (number_fields.-)(e`p2`y, e`p1`y) /= 0}"))
  (right_crossing_edges_no_V_TCC1-1 nil 3874127560
   ("" (subtype-tcc) nil nil) nil nil
   (right_crossing_edges_no_V subtype "horiz_edge_crossing.e"
    "{e: segments_2d.segment_2d | (number_fields.-)(e`p2`y, e`p1`y) /= 0}")))
 (right_ray_crossing_x_TCC1 0
  (right_ray_crossing_x_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (expand "is_right_point_ray_intersection?")
      (("" (expand "y_in_range") (("" (ground) nil nil)) nil)) nil))
    nil)
   nil shostak
   (right_ray_crossing_x subtype "horiz_edge_crossing.e"
    "{e: segments_2d.segment_2d | (number_fields.-)(e`p2`y, e`p1`y) /= 0}"))
  (right_ray_crossing_x_TCC1-1 nil 3874127560
   ("" (subtype-tcc) nil nil) nil nil
   (right_ray_crossing_x subtype "horiz_edge_crossing.e"
    "{e: segments_2d.segment_2d | (number_fields.-)(e`p2`y, e`p1`y) /= 0}")))
 (edge_right_crossing_point_y_eq 0
  (edge_right_crossing_point_y_eq-1 nil 3874129020
   ("" (skeep + t)
    (("" (expand "edge_right_crossing_point")
      (("" (replace -1 :hide? t)
        (("" (expand* "+" "*" "-")
          (("" (factor 2 l (2 3))
            (("" (name-replace "ee" "e`p2`y - e`p1`y")
              (("" (real-props) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (right_crossing_point_on_edge 0
  (right_crossing_point_on_edge-1 nil 3874129020
   ("" (skeep + t)
    (("" (rewrite "point_on_segment_has_offset")
      (("" (expand "is_right_point_ray_intersection?")
        (("" (flatten)
          (("" (expand "edge_right_crossing_point")
            (("" (expand "y_in_range")
              (("" (inst + "(r`y - e`p1`y) / (e`p2`y - e`p1`y)")
                (("1" (cross-mult 2) (("1" (ground) nil nil)) nil)
                 ("2" (cross-mult 1) (("2" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (diamond_center_is_inside 0
  (diamond_center_is_inside-1 nil 3874129020
   ("" (skoletin)
    (("" (expand "point_in_polygon?")
      (("" (ground)
        (("1" (expand "point_on_polygon_perimeter?")
          (("1" (skeep - t)
            (("1" (expand "edge_of_polygon?")
              (("1" (skeep) (("1" (grind) nil nil)) nil)) nil))
            nil))
          nil)
         ("2"
          (equate "right_crossing_set(ctr, example_diamond)"
           "singleton(1)")
          (("1" (rewrite "card_singleton") (("1" (assert) nil nil))
            nil)
           ("2" (hide 2)
            (("2" (apply-extensionality :hide? t)
              (("2" (expand "singleton")
                (("2" (expand "right_crossing_set")
                  (("2" (iff)
                    (("2" (ground)
                      (("1" (skeep) (("1" (grind) nil nil)) nil)
                       ("2" (replace -1)
                        (("2" (inst + "(1, 0)")
                          (("2" (ground)
                            (("1" (expand "point_on_ray?")
                              (("1" (propax) nil nil)) nil)
                             ("2" (expand "counted_crossing?")
                              (("2"
                                (ground)
                                (("1"
                                  (expand "count_adjacent_edges?")
                                  (("1"
                                    (expand "vertex?")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (case-replace "i = 2")
                                          (("1" (grind) nil nil)
                                           ("2"
                                            (hide 2)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (expand "vertex?")
                                    (("2"
                                      (inst + "2")
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (expand "example_diamond")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (odd_rt_xing_edges_card_eqv_point_in_polygon_rec 0
  (odd_rt_xing_edges_card_eqv_point_in_polygon_rec-1 nil 3874129020
   ("" (skeep)
    (("" (generalize "n" "n" "below(G`num_vertices)")
      ((""
        (induct "n" :name "backward_below_induction[G`num_vertices]")
        (("1" (flatten)
          (("1"
            (case-replace
             "right_crossing_edges_from_n(p, G, G`num_vertices - 1) =
      emptyset")
            (("1" (rewrite "card_emptyset")
              (("1" (expand "odd?") (("1" (propax) nil nil)) nil)) nil)
             ("2" (hide -)
              (("2" (rewrite "emptyset_is_empty?" :dir rl)
                (("2" (expand "empty?")
                  (("2" (skeep)
                    (("2" (expand "member")
                      (("2" (expand "right_crossing_edges_from_n")
                        (("2" (expand "is_point_in_polygon_recursive?")
                          (("2" (ground)
                            (("2" (expand "XOR")
                              (("2" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (expand "is_point_in_polygon_recursive?")
            (("2" (expand "XOR")
              (("2" (ground)
                (("2"
                  (equate
                   "right_crossing_edges_from_n(p, G, G`num_vertices - 1)"
                   "singleton[below(G`num_vertices)](G`num_vertices - 1)")
                  (("1" (rewrite "card_singleton")
                    (("1" (assert) nil nil)) nil)
                   ("2" (hide 2)
                    (("2" (apply-extensionality :hide? t)
                      (("2" (expand "singleton")
                        (("2" (expand "right_crossing_edges_from_n")
                          (("2"
                            (equate "x!1" "G`num_vertices - 1"
                             (assert))
                            (("2" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (split 1)
            (("1" (flatten)
              (("1" (expand "is_point_in_polygon_recursive?" +)
                (("1"
                  (case "is_right_point_ray_intersection? (p, edges_of_polygon(G)(i))")
                  (("1" (assert)
                    (("1" (expand "XOR")
                      (("1"
                        (use "is_point_in_polygon_recursive_negation")
                        (("1" (assert)
                          (("1" (hide -1 -4 +)
                            (("1"
                              (case-replace
                               "right_crossing_edges_from_n(p, G, i) =
  add(i, right_crossing_edges_from_n(p, G, 1+i))")
                              (("1"
                                (rewrite "card_add")
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (ground)
                                    (("1"
                                      (expand
                                       "right_crossing_edges_from_n"
                                       -1)
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (rewrite "odd_plus1" :dir rl)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -)
                                (("2"
                                  (expand
                                   "right_crossing_edges_from_n")
                                  (("2"
                                    (expand "add")
                                    (("2"
                                      (apply-extensionality :hide? t)
                                      (("2"
                                        (iff)
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (expand "XOR")
                      (("2" (assert)
                        (("2"
                          (equate
                           "right_crossing_edges_from_n(p, G, i)"
                           "right_crossing_edges_from_n(p, G, 1 + i)")
                          (("2" (hide-all-but (1 2))
                            (("2" (apply-extensionality :hide? t)
                              (("2"
                                (expand "right_crossing_edges_from_n")
                                (("2"
                                  (iff)
                                  (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand "is_point_in_polygon_recursive?" -1)
                (("2"
                  (case "is_right_point_ray_intersection? (p, edges_of_polygon(G)(i))")
                  (("1" (assert)
                    (("1" (expand "XOR")
                      (("1"
                        (use "is_point_in_polygon_recursive_negation")
                        (("1" (assert)
                          (("1"
                            (case-replace
                             "right_crossing_edges_from_n(p, G, i) =
          add(i, right_crossing_edges_from_n(p, G, 1+i))")
                            (("1" (rewrite "card_add")
                              (("1"
                                (lift-if)
                                (("1"
                                  (ground)
                                  (("1"
                                    (expand
                                     "right_crossing_edges_from_n"
                                     -1)
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (rewrite "odd_plus1" 3)
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-2 1))
                              (("2"
                                (expand "right_crossing_edges_from_n")
                                (("2"
                                  (expand "add")
                                  (("2"
                                    (apply-extensionality :hide? t)
                                    (("2"
                                      (iff)
                                      (("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (expand "XOR")
                      (("2" (assert)
                        (("2" (hide -2)
                          (("2"
                            (equate
                             "right_crossing_edges_from_n(p, G, i)"
                             "right_crossing_edges_from_n(p, G, 1 + i)")
                            (("2" (apply-extensionality :hide? t)
                              (("2"
                                (hide-all-but (1 2))
                                (("2"
                                  (expand
                                   "right_crossing_edges_from_n")
                                  (("2"
                                    (iff)
                                    (("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (even_card_purged_V_edges 0
  (even_card_purged_V_edges-1 nil 3874129020
   ("" (skeep)
    ((""
      (name "A"
            "{j: below(G`num_vertices) | is_vertex_with_V_edges?(p, G, j)}")
      ((""
        (name "B" "{j: below(G`num_vertices) |
                         is_vertex_with_V_edges?(p, G, next_index(G, j))}")
        (("" (case "card(A) = card(B)")
          (("1" (lemma "card_disj_union[below(G`num_vertices)]")
            (("1" (inst - "A" "B")
              (("1" (ground)
                (("1"
                  (case-replace "purged_V_edges(p, G) = union(A, B)")
                  (("1" (replace -2)
                    (("1" (replace -3) (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (apply-extensionality :hide? t)
                      (("2" (expand* "A" "B")
                        (("2" (expand "union")
                          (("2" (expand "member")
                            (("2" (expand "purged_V_edges")
                              (("2"
                                (iff)
                                (("2"
                                  (ground)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (ground)
                                      (("1"
                                        (replace -1)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (inst?) nil nil)
                                   ("3"
                                    (inst?)
                                    (("3" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -1 2)
                  (("2" (replace -1 :dir rl :hide? t)
                    (("2" (replace -1 :dir rl :hide? t)
                      (("2" (expand "disjoint?")
                        (("2" (expand "empty?")
                          (("2" (skeep)
                            (("2" (expand "member")
                              (("2"
                                (expand "intersection")
                                (("2"
                                  (expand "member")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand
                                       "is_vertex_with_V_edges?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "edges_of_polygon")
                                            (("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (rewrite "card_eq_bij")
            (("2" (inst + "lambda (i: (A)): prev_index(G, i)")
              (("1" (expand "bijective?")
                (("1" (ground)
                  (("1" (expand "injective?")
                    (("1" (skeep)
                      (("1" (hide-all-but (-1 1))
                        (("1" (grind) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (expand "surjective?")
                    (("2" (skeep)
                      (("2" (inst + "next_index(G, y)")
                        (("1" (assert) nil nil)
                         ("2" (replace -2 :dir rl)
                          (("2" (assert)
                            (("2" (decompose-equality -1)
                              (("2"
                                (inst - "y")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (expand "B" +)
                  (("2" (assert)
                    (("2" (decompose-equality -2)
                      (("2" (inst?) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (subset_purged_V_right_crossing_edges_TCC1 0
  (subset_purged_V_right_crossing_edges_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (subset_purged_V_right_crossing_edges subtype "0"
    "naturalnumbers.below(horiz_edge_crossing.G`num_vertices)"))
  (subset_purged_V_right_crossing_edges_TCC1-1 nil 3874127560
   ("" (subtype-tcc) nil nil) nil nil
   (subset_purged_V_right_crossing_edges subtype "0"
    "naturalnumbers.below(horiz_edge_crossing.G`num_vertices)")))
 (subset_purged_V_right_crossing_edges 0
  (subset_purged_V_right_crossing_edges-1 nil 3874129020
   ("" (skeep)
    (("" (expand "subset?")
      (("" (skeep)
        (("" (expand "member")
          (("" (expand "purged_V_edges")
            (("" (expand "right_crossing_edges_from_n")
              (("" (skeep)
                (("" (expand "is_vertex_with_V_edges?")
                  (("" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (no_V_edges_eq_crossing_edges_sans_purged 0
  (no_V_edges_eq_crossing_edges_sans_purged-1 nil 3874129020
   ("" (skeep)
    (("" (expand "difference")
      (("" (apply-extensionality :hide? t)
        (("" (expand "right_crossing_edges_no_V")
          (("" (expand "right_crossing_edges_from_n")
            (("" (expand "purged_V_edges")
              (("" (iff)
                (("" (ground)
                  (("1" (skeep*) (("1" (assert) nil nil)) nil)
                   ("2" (skeep*)
                    (("2" (expand "is_vertex_with_V_edges?")
                      (("2" (flatten)
                        (("2" (expand "edges_of_polygon" (-2 -3))
                          (("2" (split -10)
                            (("1" (expand "count_adjacent_edges?")
                              (("1"
                                (skeep)
                                (("1"
                                  (expand "edges_of_polygon" -6 1)
                                  (("1"
                                    (lemma
                                     "right_crossing_point_on_edge")
                                    (("1"
                                      (split -4)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (inst - "p" "G" "e")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "vertex_is_segment_endpoint")
                                              (("1"
                                                (inst - "q" "G" "e")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (case-replace
                                                       "i!1 = i")
                                                      (("1"
                                                        (ground)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (replace
                                                         -11
                                                         -1)
                                                        (("2"
                                                          (expand
                                                           "edges_of_polygon"
                                                           -1)
                                                          (("2"
                                                            (typepred
                                                             "G`vertices")
                                                            (("2"
                                                              (expand
                                                               "uniq_vertex_list?")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "i!1"
                                                                 "i")
                                                                (("1"
                                                                  (ground)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -11 -1)
                                                      (("2"
                                                        (expand
                                                         "edges_of_polygon"
                                                         -1)
                                                        (("2"
                                                          (case-replace
                                                           "i!1 = next_index(G, i)")
                                                          (("1"
                                                            (ground)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "G`vertices")
                                                            (("2"
                                                              (expand
                                                               "uniq_vertex_list?")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "next_index(G, i)"
                                                                 "i!1")
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (expand
                                                       "vertex?")
                                                      (("3"
                                                        (inst + "i!1")
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -10 1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (replace -9 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -1)
                                        (("2"
                                          (inst - "p" "G" "e")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "vertex_is_segment_endpoint")
                                              (("1"
                                                (inst - "q" "G" "e")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (case-replace
                                                       "i!1 = prev_index(G, i)")
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (expand
                                                           "is_right_point_ray_intersection?")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "edges_of_polygon")
                                                              (("1"
                                                                (expand
                                                                 "y_in_range")
                                                                (("1"
                                                                  (ground)
                                                                  (("1"
                                                                    (use
                                                                     "edge_right_crossing_point_y_eq")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace
                                                         -11
                                                         -1)
                                                        (("2"
                                                          (expand
                                                           "edges_of_polygon"
                                                           -1)
                                                          (("2"
                                                            (typepred
                                                             "G`vertices")
                                                            (("2"
                                                              (expand
                                                               "uniq_vertex_list?")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "prev_index(G, i)"
                                                                 "i!1")
                                                                (("1"
                                                                  (ground)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -11 -1)
                                                      (("2"
                                                        (expand
                                                         "edges_of_polygon"
                                                         -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (case-replace
                                                             "i!1 = i")
                                                            (("1"
                                                              (ground)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "G`vertices")
                                                              (("2"
                                                                (expand
                                                                 "uniq_vertex_list?")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "i"
                                                                   "i!1")
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (expand
                                                       "vertex?")
                                                      (("3"
                                                        (inst + "i!1")
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -10 1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (replace -9 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "segment_endpoint?")
                              (("2"
                                (flatten)
                                (("2"
                                  (ground)
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (expand "edges_of_polygon" -4 1)
                                      (("2"
                                        (lemma
                                         "right_crossing_point_on_edge")
                                        (("2"
                                          (inst - "p" "G" "e")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "q`y = G`vertices(i)`y")
                                              (("1"
                                                (replace -11 :dir rl)
                                                (("1"
                                                  (rewrite
                                                   "point_on_segment_has_offset")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (case-replace
                                                       "d = 0")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (case-replace
                                                         "d = 1")
                                                        (("1"
                                                          (case
                                                           "q = G`vertices(i)")
                                                          (("1"
                                                            (expand
                                                             "edges_of_polygon")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-3
                                                              -11
                                                              1))
                                                            (("2"
                                                              (replace
                                                               -2
                                                               -1)
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 1)
                                                                (("2"
                                                                  (hide
                                                                   -)
                                                                  (("2"
                                                                    (grind-with-ext)
                                                                    (("2"
                                                                      (apply-extensionality
                                                                       2
                                                                       :hide?
                                                                       t)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace
                                                           -10
                                                           -2)
                                                          (("2"
                                                            (expand
                                                             "edges_of_polygon"
                                                             -2)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace
                                                                 -2
                                                                 -1)
                                                                (("2"
                                                                  (hide-all-but
                                                                   (-1
                                                                    +))
                                                                  (("2"
                                                                    (expand*
                                                                     "+"
                                                                     "*"
                                                                     "-")
                                                                    (("2"
                                                                      (move-terms
                                                                       -1
                                                                       l
                                                                       2)
                                                                      (("2"
                                                                        (factor
                                                                         -1)
                                                                        (("2"
                                                                          (cancel-by
                                                                           -1
                                                                           "1 - d")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "edge_right_crossing_point_y_eq")
                                                (("2"
                                                  (inst-cp
                                                   -
                                                   "q"
                                                   "p"
                                                   "e")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "G`vertices(i)"
                                                     "p"
                                                     "edges_of_polygon(G)(i)")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (replace -7 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "is_right_point_ray_intersection?")
                    (("3" (flatten)
                      (("3" (expand "edges_of_polygon" -)
                        (("3" (inst-cp + "x!1")
                          (("3" (inst + "next_index(G, x!1)")
                            (("3" (assert)
                              (("3"
                                (inst
                                 +
                                 "edges_of_polygon(G)(x!1)"
                                 "edge_right_crossing_point(p, edges_of_polygon(G)(x!1))")
                                (("1"
                                  (ground)
                                  (("1"
                                    (expand "edges_of_polygon")
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (expand "edges_of_polygon")
                                    (("2" (propax) nil nil))
                                    nil)
                                   ("3"
                                    (name-replace
                                     "xp"
                                     "edge_right_crossing_point(p, edges_of_polygon(G)(x!1))"
                                     :hide?
                                     nil)
                                    (("3"
                                      (lemma
                                       "right_crossing_point_on_edge")
                                      (("3"
                                        (inst
                                         -
                                         "p"
                                         "G"
                                         "edges_of_polygon(G)(x!1)")
                                        (("3"
                                          (split)
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (expand
                                               "segment_endpoint?")
                                              (("1"
                                                (expand
                                                 "edges_of_polygon"
                                                 -3)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (expand
                                                       "count_adjacent_edges?")
                                                      (("1"
                                                        (inst + "x!1")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "y_in_range")
                                                            (("1"
                                                              (use
                                                               "edge_right_crossing_point_y_eq")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (ground)
                                                                  (("1"
                                                                    (expand
                                                                     "is_vertex_with_V_edges?"
                                                                     4)
                                                                    (("1"
                                                                      (expand
                                                                       "edges_of_polygon")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "is_right_point_ray_intersection?")
                                                                          (("1"
                                                                            (expand
                                                                             "y_in_range")
                                                                            (("1"
                                                                              (expand
                                                                               "x_in_range")
                                                                              (("1"
                                                                                (replace
                                                                                 -2
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (real-props)
                                                                                    (("1"
                                                                                      (cancel-add
                                                                                       4)
                                                                                      (("1"
                                                                                        (factor
                                                                                         4)
                                                                                        (("1"
                                                                                          (cancel-by
                                                                                           4
                                                                                           "p`y - G`vertices(prev_index(G, x!1))`y")
                                                                                          (("1"
                                                                                            (move-terms
                                                                                             -6
                                                                                             l
                                                                                             (2
                                                                                              3))
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (factor
                                                                                                 -6)
                                                                                                (("1"
                                                                                                  (cancel-by
                                                                                                   -6
                                                                                                   "G`vertices(next_index(G, x!1))`y - p`y")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -1)
                                                    (("2"
                                                      (expand
                                                       "count_adjacent_edges?")
                                                      (("2"
                                                        (inst
                                                         +
                                                         "next_index(G, x!1)")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (expand
                                                             "y_in_range")
                                                            (("2"
                                                              (use
                                                               "edge_right_crossing_point_y_eq")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (ground)
                                                                  (("2"
                                                                    (expand
                                                                     "is_vertex_with_V_edges?"
                                                                     3)
                                                                    (("2"
                                                                      (expand
                                                                       "edges_of_polygon")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "is_right_point_ray_intersection?")
                                                                          (("2"
                                                                            (expand
                                                                             "y_in_range")
                                                                            (("2"
                                                                              (split)
                                                                              (("1"
                                                                                (expand
                                                                                 "edge_right_crossing_point")
                                                                                (("1"
                                                                                  (replace
                                                                                   -2
                                                                                   -1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "x_in_range")
                                                                                (("2"
                                                                                  (replace
                                                                                   -2
                                                                                   :dir
                                                                                   rl)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("2"
                                                                                      (real-props)
                                                                                      (("2"
                                                                                        (cancel-add
                                                                                         -6)
                                                                                        (("2"
                                                                                          (move-terms
                                                                                           1
                                                                                           l
                                                                                           (2
                                                                                            3))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (factor
                                                                                               1)
                                                                                              (("2"
                                                                                                (cancel-by
                                                                                                 1
                                                                                                 "G`vertices(next_index(G, next_index(G, x!1)))`y - p`y")
                                                                                                (("2"
                                                                                                  (equate
                                                                                                   "p`y * G`vertices(x!1)`x"
                                                                                                   "G`vertices(x!1)`x * p`y"
                                                                                                   (assert))
                                                                                                  (("2"
                                                                                                    (cancel-add
                                                                                                     -7)
                                                                                                    (("2"
                                                                                                      (factor
                                                                                                       -7)
                                                                                                      (("2"
                                                                                                        (cancel-by
                                                                                                         -7
                                                                                                         "p`y - G`vertices(x!1)`y")
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand
                                             "is_right_point_ray_intersection?")
                                            (("2"
                                              (expand
                                               "edges_of_polygon")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "edges_of_polygon")
                                  (("2"
                                    (expand "y_in_range")
                                    (("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (card_xing_edges_from_n_and_no_V_both_odd 0
  (card_xing_edges_from_n_and_no_V_both_odd-1 nil 3874129020
   ("" (skeep)
    (("" (rewrite "no_V_edges_eq_crossing_edges_sans_purged")
      (("" (rewrite "card_diff_subset")
        (("1" (use "even_card_purged_V_edges")
          (("1" (ground)
            (("1" (lemma "odd_minus_even_is_odd")
              (("1" (inst?) nil nil)) nil)
             ("2" (lemma "even_minus_even_is_even")
              (("2" (inst?)
                (("1" (rewrite "even_iff_not_odd") nil nil)
                 ("2" (rewrite "even_iff_not_odd") nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (use "subset_purged_V_right_crossing_edges") nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (card_rt_xing_edges_eq_card_rt_xing_x 0
  (card_rt_xing_edges_eq_card_rt_xing_x-1 nil 3874129020
   ("" (skeep)
    (("" (rewrite "card_eq_bij")
      ((""
        (inst + "lambda (j: (right_crossing_edges_no_V(p, G))):
                     let e = edges_of_polygon(G)(j) in
             	(e`p1 + (p`y - e`p1`y) / (e`p2`y - e`p1`y) * (e`p2 - e`p1))`x")
        (("1" (expand "bijective?")
          (("1" (ground)
            (("1" (expand "injective?")
              (("1" (skeep + t)
                (("1" (expand "right_crossing_edges_no_V")
                  (("1" (skeep*)
                    (("1" (lemma "edge_right_crossing_point_y_eq")
                      (("1" (inst-cp - "q" "p" "e")
                        (("1" (inst - "q!1" "p" "e!1")
                          (("1" (assert)
                            (("1" (replace -4 :dir rl)
                              (("1"
                                (replace -9 :dir rl)
                                (("1"
                                  (lemma
                                   "right_crossing_point_on_edge")
                                  (("1"
                                    (inst-cp - "p" "G" "e")
                                    (("1"
                                      (inst - "p" "G" "e!1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -8 :dir rl)
                                          (("1"
                                            (replace -13 :dir rl)
                                            (("1"
                                              (expand
                                               "is_right_point_ray_intersection?")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (case "q = q!1")
                                                  (("1"
                                                    (typepred "G")
                                                    (("1"
                                                      (expand
                                                       "simple_polygon_2d?")
                                                      (("1"
                                                        (expand
                                                         "polygon_edges_do_not_cross?")
                                                        (("1"
                                                          (inst-cp
                                                           -
                                                           "x1"
                                                           "x2")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "x2"
                                                             "x1")
                                                            (("1"
                                                              (case
                                                               "is_point_on_segment?(edges_of_polygon(G)(x1))(q) &
                                                                             is_point_on_segment?(edges_of_polygon(G)(x2))(q!1)")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "q")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "q!1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replace
                                                                         -11
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (replace
                                                                           -17
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (expand
                                                                             "segment_endpoint?")
                                                                            (("1"
                                                                              (replace
                                                                               -5
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (split
                                                                                 -15)
                                                                                (("1"
                                                                                  (split
                                                                                   -21)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "count_adjacent_edges?")
                                                                                      (("1"
                                                                                        (skeep)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "y_in_range")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -13)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -18)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "edges_of_polygon")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "G`vertices")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "uniq_vertex_list?")
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "i = x1 or i = x2 or i = next_index(G, x1) or i = next_index(G, x2)")
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (inst-cp
                                                                                                             -
                                                                                                             "x1"
                                                                                                             "x2")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "i"
                                                                                                                 "next_index(G, x2)")
                                                                                                                (("1"
                                                                                                                  (ground)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (inst-cp
                                                                                                             -
                                                                                                             "x1"
                                                                                                             "x2")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "i"
                                                                                                                 "next_index(G, x1)")
                                                                                                                (("1"
                                                                                                                  (ground)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (ground)
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -3
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("3"
                                                                                                              (assert)
                                                                                                              (("3"
                                                                                                                (split
                                                                                                                 -7)
                                                                                                                (("1"
                                                                                                                  (case-replace
                                                                                                                   "x2 = next_index(G, x1)")
                                                                                                                  (("1"
                                                                                                                    (ground)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "next_index(G, x1)"
                                                                                                                     "x2")
                                                                                                                    (("1"
                                                                                                                      (ground)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "next_index(G, x1)"
                                                                                                                   "next_index(G, x2)")
                                                                                                                  (("1"
                                                                                                                    (ground)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide-all-but
                                                                                                                     +)
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("4"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("4"
                                                                                                              (assert)
                                                                                                              (("4"
                                                                                                                (split
                                                                                                                 -8)
                                                                                                                (("1"
                                                                                                                  (case-replace
                                                                                                                   "x1 = next_index(G, x2)")
                                                                                                                  (("1"
                                                                                                                    (ground)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "x1"
                                                                                                                     "next_index(G, x2)")
                                                                                                                    (("1"
                                                                                                                      (ground)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (ground)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "next_index(G, x1)"
                                                                                                                   "next_index(G, x2)")
                                                                                                                  (("1"
                                                                                                                    (ground)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide-all-but
                                                                                                                     +)
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (inst-cp
                                                                                                             -
                                                                                                             "i"
                                                                                                             "x1")
                                                                                                            (("1"
                                                                                                              (inst-cp
                                                                                                               -
                                                                                                               "i"
                                                                                                               "x2")
                                                                                                              (("1"
                                                                                                                (inst-cp
                                                                                                                 -
                                                                                                                 "i"
                                                                                                                 "next_index(G, x2)")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "i"
                                                                                                                   "next_index(G, x1)")
                                                                                                                  (("1"
                                                                                                                    (ground)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -9 1)
                                                    (("2"
                                                      (replace -15 1)
                                                      (("2"
                                                        (expand
                                                         "edge_right_crossing_point")
                                                        (("2"
                                                          (name-replace
                                                           "a"
                                                           "(p`y - e`p1`y) / (e`p2`y - e`p1`y)")
                                                          (("2"
                                                            (name-replace
                                                             "b"
                                                             "(p`y - e!1`p1`y) / (e!1`p2`y - e!1`p1`y)")
                                                            (("2"
                                                              (expand*
                                                               "+"
                                                               "*"
                                                               "-"
                                                               +)
                                                              (("2"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (factor
                                                                   1
                                                                   l
                                                                   (2
                                                                    3))
                                                                  (("2"
                                                                    (expand
                                                                     "a"
                                                                     :assert?
                                                                     none)
                                                                    (("2"
                                                                      (name-replace
                                                                       "ee"
                                                                       "e`p2`y - e`p1`y")
                                                                      (("2"
                                                                        (real-props)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -10)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -4)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "surjective?")
              (("2" (skeep + t)
                (("2" (expand "right_ray_crossing_x")
                  (("2" (expand "edge_right_crossing_point")
                    (("2" (skeep)
                      (("2" (inst + "j")
                        (("1" (assert) nil nil)
                         ("2" (expand "right_crossing_edges_no_V")
                          (("2" (inst + "e" "q")
                            (("2" (expand "edge_right_crossing_point")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep + t)
          (("2" (expand "right_ray_crossing_x")
            (("2" (expand "right_crossing_edges_no_V")
              (("2" (skeep)
                (("2" (expand "edge_right_crossing_point")
                  (("2" (inst + "j" "e!1" "q") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (typepred "j")
            (("3" (expand "right_crossing_edges_no_V")
              (("3" (skeep)
                (("3" (expand "edge_right_crossing_point")
                  (("3" (replace -6 :dir rl)
                    (("3" (expand "is_right_point_ray_intersection?")
                      (("3" (flatten)
                        (("3" (expand "y_in_range")
                          (("3" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (right_crossing_x_eq_rt_crossing_set 0
  (right_crossing_x_eq_rt_crossing_set-1 nil 3874129020
   ("" (skeep)
    (("" (apply-extensionality :hide? t)
      (("" (expand "right_crossing_set")
        (("" (expand "right_ray_crossing_x")
          (("" (expand "edge_right_crossing_point")
            (("" (iff)
              (("" (ground)
                (("1" (skeep)
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (expand "is_right_point_ray_intersection?")
                        (("1" (flatten)
                          (("1" (expand "y_in_range")
                            (("1" (expand "x_in_range")
                              (("1"
                                (replace -1 :dir rl)
                                (("1"
                                  (expand "point_on_ray?")
                                  (("1"
                                    (expand "counted_crossing?")
                                    (("1"
                                      (split 1 :depth 1)
                                      (("1"
                                        (replace -5 +)
                                        (("1"
                                          (hide -5 -6)
                                          (("1"
                                            (split +)
                                            (("1"
                                              (expand "+")
                                              (("1"
                                                (move-terms 1 r 1)
                                                (("1"
                                                  (expand "*")
                                                  (("1"
                                                    (cross-mult 1)
                                                    (("1"
                                                      (expand "-")
                                                      (("1"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "+" 1)
                                              (("2"
                                                (move-terms 1 r 1)
                                                (("2"
                                                  (expand "*" 1)
                                                  (("2"
                                                    (cross-mult 1)
                                                    (("2"
                                                      (expand "-" 1)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (split -7)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (use
                                               "vertex_is_segment_endpoint")
                                              (("1"
                                                (expand
                                                 "segment_endpoint?")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (lemma
                                                       "right_crossing_point_on_edge")
                                                      (("3"
                                                        (inst
                                                         -
                                                         "p"
                                                         "G"
                                                         "e")
                                                        (("1"
                                                          (split -1)
                                                          (("1"
                                                            (equate
                                                             "edge_right_crossing_point(p, e)"
                                                             "q")
                                                            (("1"
                                                              (expand
                                                               "edge_right_crossing_point")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "is_right_point_ray_intersection?")
                                                            (("2"
                                                              (expand
                                                               "y_in_range")
                                                              (("2"
                                                                (expand
                                                                 "x_in_range")
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (split 1)
                                                            (("1"
                                                              (replace
                                                               -2)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replace -2)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (inst?)
                                            (("1"
                                              (expand
                                               "horizontal_segment?")
                                              (("1"
                                                (split 2)
                                                (("1"
                                                  (rewrite
                                                   "point_on_segment_has_offset")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (cross-mult 1)
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (cross-mult 1)
                                                      (("2"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -1 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (expand "counted_crossing?")
                    (("2" (expand "point_on_ray?")
                      (("2" (ground)
                        (("1" (copy -2)
                          (("1" (expand "count_adjacent_edges?" -1)
                            (("1" (skeep)
                              (("1"
                                (ground)
                                (("1"
                                  (inst
                                   +
                                   "prev_index(G, i)"
                                   "edges_of_polygon(G)(prev_index(G, i))"
                                   "p_1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split)
                                      (("1"
                                        (expand
                                         "is_right_point_ray_intersection?")
                                        (("1"
                                          (expand "edges_of_polygon")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (expand "y_in_range")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "x_in_range")
                                                (("2"
                                                  (cancel-add 1)
                                                  (("2"
                                                    (replace
                                                     -3
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (replace
                                                       -8
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (name-replace
                                                         "prev"
                                                         "G`vertices(prev_index(G, i))")
                                                        (("2"
                                                          (elim-unary
                                                           1)
                                                          (("2"
                                                            (cancel-add
                                                             1)
                                                            (("2"
                                                              (factor
                                                               1)
                                                              (("2"
                                                                (cancel-by
                                                                 1
                                                                 "p`y - prev`y")
                                                                (("2"
                                                                  (case
                                                                   "p`x = p_1`x")
                                                                  (("1"
                                                                    (expand
                                                                     "point_on_polygon_perimeter?")
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "edges_of_polygon(G)(i)")
                                                                      (("1"
                                                                        (expand
                                                                         "point_on_segment?")
                                                                        (("1"
                                                                          (expand
                                                                           "edges_of_polygon")
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "0")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (apply-extensionality
                                                                                 4
                                                                                 :hide?
                                                                                 t)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "edges_of_polygon")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -3 :dir rl)
                                            (("2"
                                              (replace -8 :dir rl)
                                              (("2"
                                                (real-props)
                                                (("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (move-terms 1 r 1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst
                                   +
                                   "i"
                                   "edges_of_polygon(G)(i)"
                                   "p_1")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "edges_of_polygon")
                                      (("2"
                                        (replace -3 :dir rl)
                                        (("2"
                                          (ground)
                                          (("1"
                                            (expand
                                             "is_right_point_ray_intersection?")
                                            (("1"
                                              (ground)
                                              (("1"
                                                (expand "y_in_range")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "x_in_range")
                                                (("2"
                                                  (cancel-add 1)
                                                  (("2"
                                                    (name-replace
                                                     "next"
                                                     "G`vertices(next_index(G, i))")
                                                    (("2"
                                                      (replace
                                                       -8
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (move-terms
                                                         1
                                                         l
                                                         3)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (factor 1)
                                                            (("2"
                                                              (cancel-by
                                                               1
                                                               "p`x - p_1`x")
                                                              (("2"
                                                                (expand
                                                                 "point_on_polygon_perimeter?")
                                                                (("2"
                                                                  (inst
                                                                   +
                                                                   "edges_of_polygon(G)(i)")
                                                                  (("2"
                                                                    (expand
                                                                     "point_on_segment?")
                                                                    (("2"
                                                                      (expand
                                                                       "edges_of_polygon")
                                                                      (("2"
                                                                        (inst
                                                                         +
                                                                         "0")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (apply-extensionality
                                                                             2
                                                                             :hide?
                                                                             t)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (replace -8 :dir rl)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep - t)
                          (("2" (expand "edge_of_polygon?")
                            (("2" (skeep)
                              (("2"
                                (expand "horizontal_segment?")
                                (("2"
                                  (inst + "i" "s" "p_1")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (rewrite
                                       "point_on_segment_has_offset")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (ground)
                                          (("1"
                                            (expand
                                             "is_right_point_ray_intersection?")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (expand "y_in_range")
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (replace -6)
                                                      (("1"
                                                        (replace -2)
                                                        (("1"
                                                          (case-replace
                                                           "d = 0")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (case-replace
                                                             "d = 1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide-all-but
                                                                 2)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1
                                                                2
                                                                3
                                                                4))
                                                              (("2"
                                                                (expand*
                                                                 "+"
                                                                 "*"
                                                                 "-")
                                                                (("2"
                                                                  (cancel-add
                                                                   4)
                                                                  (("2"
                                                                    (move-terms
                                                                     3
                                                                     r
                                                                     2)
                                                                    (("2"
                                                                      (factor
                                                                       3)
                                                                      (("2"
                                                                        (cancel-by
                                                                         3
                                                                         "1 - d")
                                                                        (("2"
                                                                          (cancel-by
                                                                           5
                                                                           "d")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -6)
                                                      (("2"
                                                        (replace -2)
                                                        (("2"
                                                          (case
                                                           "s`p1`y < s`p2`y")
                                                          (("1"
                                                            (case-replace
                                                             "d = 0")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (case-replace
                                                               "d = 1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "vertex?")
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "next_index(G, i)")
                                                                    (("1"
                                                                      (hide-all-but
                                                                       (-3
                                                                        4))
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (expand
                                                                           "edges_of_polygon")
                                                                          (("1"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("1"
                                                                              (name-replace
                                                                               "n"
                                                                               "G`vertices(next_index(G, i))")
                                                                              (("1"
                                                                                (grind-with-ext)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand*
                                                                 "+"
                                                                 "*"
                                                                 "-")
                                                                (("2"
                                                                  (move-terms
                                                                   4
                                                                   l
                                                                   1)
                                                                  (("2"
                                                                    (factor
                                                                     4)
                                                                    (("2"
                                                                      (move-terms
                                                                       -1
                                                                       l)
                                                                      (("2"
                                                                        (name-replace
                                                                         "ss"
                                                                         "s`p2`y - s`p1`y")
                                                                        (("2"
                                                                          (mult-cases
                                                                           4
                                                                           :mult-op
                                                                           1*)
                                                                          (("2"
                                                                            (expand
                                                                             "abs")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case-replace
                                                             "d = 0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "vertex?")
                                                                (("1"
                                                                  (inst
                                                                   +
                                                                   "i")
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     4
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (expand
                                                                       "edges_of_polygon")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case-replace
                                                               "d = 1")
                                                              (("1"
                                                                (expand*
                                                                 "+"
                                                                 "*"
                                                                 "-")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand*
                                                                 "+"
                                                                 "*"
                                                                 "-")
                                                                (("2"
                                                                  (cancel-add
                                                                   4)
                                                                  (("2"
                                                                    (cancel-by
                                                                     4
                                                                     "d")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace
                                                   -2
                                                   (-5 -6)
                                                   :hide?
                                                   t)
                                                  (("2"
                                                    (expand*
                                                     "+"
                                                     "*"
                                                     "-")
                                                    (("2"
                                                      (factor
                                                       -4
                                                       r
                                                       (2 3))
                                                      (("2"
                                                        (factor
                                                         -5
                                                         r
                                                         (2 3))
                                                        (("2"
                                                          (expand
                                                           "x_in_range"
                                                           :assert?
                                                           none)
                                                          (("2"
                                                            (name-replace*
                                                             ("sx"
                                                              "s`p2`x - s`p1`x"
                                                              "sy"
                                                              "s`p2`y - s`p1`y"))
                                                            (("2"
                                                              (move-terms
                                                               -7
                                                               r
                                                               2)
                                                              (("2"
                                                                (move-terms
                                                                 -6
                                                                 r
                                                                 2)
                                                                (("2"
                                                                  (replace
                                                                   -7)
                                                                  (("2"
                                                                    (name-replace
                                                                     "psx"
                                                                     "p`x - s`p1`x")
                                                                    (("2"
                                                                      (ground)
                                                                      (("1"
                                                                        (cancel-by
                                                                         1
                                                                         "sy")
                                                                        (("1"
                                                                          (case
                                                                           "d * sx = psx")
                                                                          (("1"
                                                                            (expand
                                                                             "point_on_polygon_perimeter?")
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "edges_of_polygon(G)(i)")
                                                                              (("1"
                                                                                (expand
                                                                                 "point_on_segment?")
                                                                                (("1"
                                                                                  (expand
                                                                                   "edges_of_polygon")
                                                                                  (("1"
                                                                                    (inst
                                                                                     +
                                                                                     "d")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "psx")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -5
                                                                                           :dir
                                                                                           rl)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (apply-extensionality
                                                                                               6
                                                                                               :hide?
                                                                                               t)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "sx"
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -5
                                                                                                   -1
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (hide-all-but
                                                                                                       (-1
                                                                                                        1))
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (move-terms
                                                                                                 -9
                                                                                                 l
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -9)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -3
                                                                                                     1
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("2"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (cancel-by
                                                                         2
                                                                         "sy")
                                                                        (("2"
                                                                          (case
                                                                           "psx = d * sx")
                                                                          (("1"
                                                                            (expand
                                                                             "psx")
                                                                            (("1"
                                                                              (expand
                                                                               "point_on_polygon_perimeter?")
                                                                              (("1"
                                                                                (inst
                                                                                 +
                                                                                 "edges_of_polygon(G)(i)")
                                                                                (("1"
                                                                                  (expand
                                                                                   "point_on_segment?")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "edges_of_polygon")
                                                                                    (("1"
                                                                                      (inst
                                                                                       +
                                                                                       "d")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "sx"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "sy"
                                                                                             -9)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -5
                                                                                               :dir
                                                                                               rl)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (apply-extensionality
                                                                                                   6
                                                                                                   :hide?
                                                                                                   t)
                                                                                                  (("1"
                                                                                                    (hide-all-but
                                                                                                     (-1
                                                                                                      1))
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     (-9
                                                                                                      1))
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (replace -2 1)
                                            (("2"
                                              (equate
                                               "(p`y - s`p1`y) / (s`p2`y - s`p1`y)"
                                               "d")
                                              (("2"
                                                (cross-mult 1)
                                                (("2"
                                                  (replace -2 -6)
                                                  (("2"
                                                    (replace -6 1)
                                                    (("2"
                                                      (expand*
                                                       "+"
                                                       "*"
                                                       "-")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (expand "vertex?")
                                            (("3"
                                              (inst-cp + "i")
                                              (("3"
                                                (inst
                                                 +
                                                 "next_index(G, i)")
                                                (("3"
                                                  (expand
                                                   "segment_endpoint?")
                                                  (("3"
                                                    (expand
                                                     "edges_of_polygon")
                                                    (("3"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (point_in_polygon?_eq_is_point_in_polygon_exclusive? 0
  (point_in_polygon?_eq_is_point_in_polygon_exclusive?-1 nil 3874129020
   ("" (skeep + t)
    (("" (expand* "point_in_polygon?" "is_point_in_polygon_exclusive?")
      ((""
        (rewrite
         "point_on_polygon_perimeter?_eq_is_point_on_polygon_perimeter?"
         :dir rl)
        ((""
          (rewrite "odd_rt_xing_edges_card_eqv_point_in_polygon_rec"
           :dir rl)
          (("" (use "right_crossing_x_eq_rt_crossing_set")
            (("" (ground)
              (("1" (replace -2 :dir rl)
                (("1"
                  (rewrite "card_rt_xing_edges_eq_card_rt_xing_x" :dir
                   rl)
                  (("1"
                    (rewrite
                     "card_xing_edges_from_n_and_no_V_both_odd")
                    nil nil))
                  nil))
                nil)
               ("2" (replace -2 :dir rl)
                (("2"
                  (rewrite "card_rt_xing_edges_eq_card_rt_xing_x" :dir
                   rl)
                  (("2"
                    (rewrite
                     "card_xing_edges_from_n_and_no_V_both_odd")
                    nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (counted_is_crossing 0
  (counted_is_crossing-1 nil 3874129020
   ("" (skeep)
    (("" (expand "counted_crossing?")
      (("" (expand "crossing_point?")
        (("" (ground)
          (("1" (use "vertex_on_perimeter") (("1" (grind) nil)))
           ("2" (grind) nil))))))))
    nil)
   nil shostak))
 (counted_or_uncounted_crossing 0
  (counted_or_uncounted_crossing-1 nil 3874129020
   ("" (skeep)
    (("" (ground)
      (("1" (grind) nil) ("2" (grind) nil)
       ("3" (expand "counted_crossing?")
        (("3" (expand "crossing_point?")
          (("3" (ground)
            (("1" (use "vertex_on_perimeter") (("1" (grind) nil)))
             ("2" (grind) nil)))))))
       ("4" (expand "uncounted_crossing?")
        (("4" (expand "crossing_point?")
          (("4" (ground)
            (("1" (use "vertex_on_perimeter") (("1" (grind) nil)))
             ("2" (grind) nil))))))))))
    nil)
   nil shostak))
 (crossing_on_perimeter 0
  (crossing_on_perimeter-1 nil 3874129020
   ("" (skeep)
    (("" (expand "point_on_polygon_perimeter?")
      (("" (expand "crossing_point?")
        (("" (flatten)
          (("" (skeep) (("" (typepred "s") (("" (inst?) nil))))))))))))
    nil)
   nil shostak))
 (set_before_subset 0
  (set_before_subset-1 nil 3874129020 ("" (grind) nil nil) nil
   shostak))
 (crossings_subset 0
  (crossings_subset-1 nil 3874129020
   ("" (expand "subset?")
    (("" (skeep*)
      (("" (expand "member")
        (("" (expand "right_crossing_set")
          (("" (skeep)
            (("" (inst?)
              (("" (expand "counted_crossing?")
                (("" (flatten)
                  (("" (assert)
                    (("" (skeep)
                      (("" (lemma "point_on_ray_trans")
                        (("" (inst - "p!1" "q" "p")
                          (("" (ground) nil))))))))))))))))))))))))
    nil)
   nil shostak))
 (crossing_before_diff 0
  (crossing_before_diff-1 nil 3874129020
   ("" (skeep)
    (("" (skoletin)
      (("" (expand "difference")
        (("" (expand "member")
          (("" (apply-extensionality :hide? t)
            (("" (replace -1 :hide? t)
              (("" (expand "right_crossing_set")
                (("" (expand "set_before_x")
                  (("" (iff)
                    (("" (ground)
                      (("1" (skeep)
                        (("1" (inst?) (("1" (grind) nil)))))
                       ("2" (skeep*) (("2" (grind) nil)))
                       ("3" (skeep)
                        (("3" (inst?)
                          (("3" (grind) nil))))))))))))))))))))))))
    nil)
   nil shostak))
 (right_crossings_min 0
  (right_crossings_min-1 nil 3874129020
   ("" (skeep)
    (("" (skoletin)
      (("" (flatten)
        (("" (lemma "crossings_subset")
          (("" (inst -1 "p" "q" "G")
            (("" (assert)
              (("" (case "R = emptyset")
                (("1" (lemma "emptyset_min[real]")
                  (("1" (inst -1 "right_crossing_set(q, G)")
                    (("1" (assert) nil)))))
                 ("2" (replace -4 2)
                  (("2" (apply-extensionality 2 :hide? t)
                    (("2" (iff)
                      (("2" (ground)
                        (("1" (expand "right_crossing_set" (-1 +))
                          (("1" (skeep)
                            (("1" (inst?)
                              (("1" (assert) (("1" (grind) nil)))))))))
                         ("2" (inst?)
                          (("2" (expand "right_crossing_set" (-1 +))
                            (("2" (skeep)
                              (("2"
                                (inst?)
                                (("2"
                                  (grind)
                                  nil))))))))))))))))))))))))))))))
    nil)
   nil shostak))
 (right_crossings_max 0
  (right_crossings_max-1 nil 3874129020
   ("" (skeep)
    (("" (skoletin)
      (("" (flatten)
        (("" (apply-extensionality :hide? t)
          (("" (expand "emptyset")
            (("" (lemma "crossings_subset")
              (("" (inst -1 "p" "q" "G")
                (("" (assert)
                  (("" (expand "subset?")
                    (("" (inst -1 "x!1")
                      (("" (expand "member")
                        (("" (inst - "x!1")
                          (("1" (grind) nil)
                           ("2" (assert) nil))))))))))))))))))))))))
    nil)
   nil shostak))
 (before_crossings_empty 0
  (before_crossings_empty-1 nil 3874129020
   ("" (skeep)
    (("" (lemma "crossing_before_diff")
      (("" (inst -1 "p" "q" "G")
        (("" (assert)
          (("" (replace -3)
            (("" (rewrite "difference_emptyset1") nil))))))))))
    nil)
   nil shostak))
 (right_crossings_gap 0
  (right_crossings_gap-1 nil 3874129020
   ("" (skeep)
    (("" (apply-extensionality :hide? t)
      (("" (iff)
        (("" (expand "right_crossing_set")
          (("" (ground)
            (("1" (skeep)
              (("1" (inst?)
                (("1" (assert)
                  (("1" (lemma "point_on_ray_trans")
                    (("1" (inst - "p!1" "q" "p")
                      (("1" (assert) nil)))))))))))
             ("2" (skeep)
              (("2" (inst?)
                (("2" (assert)
                  (("2" (expand "crossing_point?")
                    (("2" (inst - "p_1")
                      (("2" (ground)
                        (("1" (expand "counted_crossing?")
                          (("1" (ground)
                            (("1" (use "vertex_on_perimeter")
                              (("1" (grind) nil)))
                             ("2" (grind) nil)))))
                         ("2" (expand "point_on_ray?")
                          (("2" (flatten)
                            (("2" (assert)
                              nil))))))))))))))))))))))))))
    nil)
   nil shostak))
 (right_counted_gap 0
  (right_counted_gap-1 nil 3874129020
   ("" (skeep)
    (("" (apply-extensionality :hide? t)
      (("" (iff)
        (("" (expand "right_crossing_set")
          (("" (ground)
            (("1" (skeep)
              (("1" (inst?)
                (("1" (assert)
                  (("1" (lemma "point_on_ray_trans")
                    (("1" (inst - "p!1" "q" "p")
                      (("1" (assert) nil)))))))))))
             ("2" (skeep)
              (("2" (inst?)
                (("2" (assert)
                  (("2" (inst?)
                    (("2" (assert)
                      (("2" (grind) nil))))))))))))))))))))
    nil)
   nil shostak))
 (between_crossings_even 0
  (between_crossings_even-1 nil 3874129020
   ("" (skeep)
    (("" (skoletin)
      (("" (expand "point_in_polygon?")
        (("" (flatten)
          (("" (assert)
            (("" (hide 1)
              (("" (lemma "crossing_before_diff")
                (("" (inst - "p" "q" "G")
                  (("" (assert)
                    (("" (replace -1)
                      (("" (use "card_diff_subset[real]")
                        (("" (split -1)
                          (("1" (replace -1)
                            (("1" (hide -1 -2)
                              (("1"
                                (ground)
                                (("1"
                                  (expand "odd?")
                                  (("1"
                                    (skeep*)
                                    (("1"
                                      (expand "even?")
                                      (("1"
                                        (inst + "j!1 - j")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "even?")
                                  (("2"
                                    (expand "odd?")
                                    (("2"
                                      (skeep*)
                                      (("2"
                                        (inst + "j!1 - j")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (use "set_before_subset") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (opposite_sides_of_crossing 0
  (opposite_sides_of_crossing-1 nil 3874129020
   ("" (skeep)
    (("" (case "NOT counted_crossing?(G)(r)")
      (("1" (expand "point_in_polygon?")
        (("1" (assert)
          (("1"
            (case "card(right_crossing_set(r, G)) + 1 = card(right_crossing_set(p, G))")
            (("1" (replace -1 :dir rl :hide? t)
              (("1" (hide-all-but (4 5))
                (("1" (rewrite "even_iff_odd_succ" :dir rl)
                  (("1" (rewrite "even_or_odd")
                    (("1" (ground) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (hide 3 4 5 6)
              (("2" (lemma "crossing_before_diff")
                (("2" (inst -1 "p" "r" "G")
                  (("2" (split -1)
                    (("1" (ground)
                      (("1"
                        (equate
                         "set_before_x(right_crossing_set(p, G), r`x)"
                         "singleton(q`x)" nil)
                        (("1" (use "card_diff_subset[real]")
                          (("1" (rewrite "card_singleton")
                            (("1" (assert)
                              (("1"
                                (hide -1 2 3)
                                (("1"
                                  (expand "subset?")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "singleton")
                                        (("1"
                                          (expand "right_crossing_set")
                                          (("1"
                                            (inst + "q")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -1 2)
                          (("2" (apply-extensionality :hide? t)
                            (("2" (expand "singleton")
                              (("2"
                                (expand "set_before_x")
                                (("2"
                                  (expand "right_crossing_set")
                                  (("2"
                                    (iff)
                                    (("2"
                                      (ground)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst - "p_1")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil)
                                       ("3"
                                        (expand "point_on_ray?")
                                        (("3"
                                          (flatten)
                                          (("3"
                                            (case "q`x = r`x")
                                            (("1"
                                              (equate "q" "r")
                                              (("1"
                                                (hide -3 3)
                                                (("1"
                                                  (grind-with-ext)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "point_on_ray_trans")
                      (("2" (inst - "r" "q" "p")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide-all-but (-1 2))
        (("2" (expand "counted_crossing?")
          (("2" (ground)
            (("1" (rewrite "vertex_on_perimeter") nil nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (outgoing_follows_point_in 0
  (outgoing_follows_point_in-1 nil 3874129020
   ("" (skeep)
    (("" (expand "outgoing_crossing?")
      (("" (expand "point_in_polygon?")
        (("" (expand "next_counted_crossing?")
          (("" (ground)
            (("" (lemma "right_counted_gap")
              (("" (inst - "p" "q" "G")
                (("" (ground)
                  (("1" (expand "point_on_ray?") (("1" (propax) nil)))
                   ("2" (skeep)
                    (("2" (expand "point_on_ray?")
                      (("2" (inst - "u")
                        (("2" (ground) nil))))))))))))))))))))))
    nil)
   nil shostak))
 (before_crossing_in_polygon 0
  (before_crossing_in_polygon-1 nil 3874129020
   ("" (skeep*)
    (("" (expand "point_in_polygon?")
      (("" (flatten)
        (("" (lemma "right_crossings_gap")
          (("" (inst - "p" "u" "G")
            (("" (assert)
              (("" (split -1)
                (("1" (assert)
                  (("1" (hide -1 -2)
                    (("1" (expand "point_on_polygon_perimeter?")
                      (("1" (expand "next_crossing_point?")
                        (("1" (flatten)
                          (("1" (skeep)
                            (("1" (inst - "u")
                              (("1"
                                (expand "point_on_ray?")
                                (("1" (ground) nil)))
                               ("2"
                                (expand "crossing_point?")
                                (("2" (inst?) nil)))))))))))))))))
                 ("2" (hide -1 2 3)
                  (("2" (skeep)
                    (("2" (expand "next_crossing_point?")
                      (("2" (flatten)
                        (("2" (inst?)
                          (("2" (expand "point_on_ray?")
                            (("2" (ground)
                              nil))))))))))))))))))))))))))
    nil)
   nil shostak))
 (before_counted_odd_crossings 0
  (before_counted_odd_crossings-1 nil 3874129020
   ("" (skeep*)
    (("" (expand "point_in_polygon?")
      (("" (flatten)
        (("" (lemma "right_counted_gap")
          (("" (inst - "p" "u" "G")
            (("" (assert)
              (("" (hide -1 2 3)
                (("" (skeep)
                  (("" (expand "next_counted_crossing?")
                    (("" (flatten)
                      (("" (inst - "u_1")
                        (("" (expand "point_on_ray?")
                          (("" (ground) nil))))))))))))))))))))))))
    nil)
   nil shostak))
 (before_counted_in_polygon 0
  (before_counted_in_polygon-1 nil 3874129020
   ("" (skeep*)
    (("" (use "counted_or_uncounted_crossing")
      (("" (assert)
        (("" (copy -2)
          (("" (expand "point_in_polygon?" (-1 +))
            (("" (lemma "right_counted_gap")
              (("" (inst - "p" "u" "G")
                (("" (flatten)
                  (("" (assert)
                    (("" (split -1)
                      (("1" (assert)
                        (("1" (case "crossing_point?(p,G)(u)")
                          (("1" (assert)
                            (("1" (expand "next_counted_crossing?")
                              (("1"
                                (flatten)
                                (("1"
                                  (inst - "u")
                                  (("1"
                                    (expand "point_on_ray?")
                                    (("1" (ground) nil)))))))))))
                           ("2" (expand "point_on_polygon_perimeter?")
                            (("2" (skeep)
                              (("2"
                                (expand "crossing_point?")
                                (("2" (inst? 1) nil)))))))))))
                       ("2" (skeep)
                        (("2" (expand "next_counted_crossing?")
                          (("2" (flatten)
                            (("2" (inst - "u_1")
                              (("2"
                                (expand "point_on_ray?")
                                (("2"
                                  (ground)
                                  nil))))))))))))))))))))))))))))))
    nil)
   nil shostak))
 (counted_crossing_follows_point_inside 0
  (counted_crossing_follows_point_inside-1 nil 3874129020
   ("" (skeep)
    (("" (expand "point_in_polygon?" -1)
      (("" (flatten)
        (("" (case "empty?[real](right_crossing_set(p, G))")
          (("1" (hide +)
            (("1" (expand "odd?")
              (("1" (skeep)
                (("1" (rewrite "empty_card") (("1" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2"
              (inst +
               "(# x := min[real,<=](right_crossing_set(p, G)), y := p`y #)")
              (("2" (typepred "min[real,<=](right_crossing_set(p, G))")
                (("1" (ground)
                  (("1" (expand "next_counted_crossing?")
                    (("1" (ground)
                      (("1" (expand "right_crossing_set" -1 1)
                        (("1" (skeep)
                          (("1" (replace -1)
                            (("1" (case "p`y = p_1`y")
                              (("1"
                                (replace -1)
                                (("1"
                                  (equate (! 1 1) "p_1" nil)
                                  (("1"
                                    (hide-all-but 1)
                                    (("1" (grind-with-ext) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "point_on_ray?")
                                (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "right_crossing_set" -1 1)
                        (("2" (skeep)
                          (("2" (replace -1 :hide? t)
                            (("2" (hide-all-but (-1 1))
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("3" (skeep + t)
                        (("3" (inst - "q`x")
                          (("3" (ground)
                            (("3" (expand "right_crossing_set" 1)
                              (("3"
                                (inst + "q")
                                (("3"
                                  (assert)
                                  (("3"
                                    (expand "point_on_ray?")
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "right_counted_gap")
                    (("2"
                      (inst -1 "p"
                       "(# x := min[real,<=](right_crossing_set(p, G)), y := p`y #)"
                       "G")
                      (("2" (ground)
                        (("1" (hide -3 2)
                          (("1" (expand "right_crossing_set" -1 1)
                            (("1" (skeep)
                              (("1"
                                (replace -1)
                                (("1"
                                  (expand "point_on_ray?")
                                  (("1" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -3 2)
                          (("2" (skeep)
                            (("2" (inst - "u`x")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "right_crossing_set" 1)
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (contained_next_crossing_bound 0
  (contained_next_crossing_bound-1 nil 3874129020
   ("" (skeep)
    (("" (copy -3)
      (("" (expand "next_crossing_point?" -1)
        (("" (flatten)
          (("" (use "before_crossing_in_polygon")
            (("" (assert)
              (("" (inst -1 "u")
                (("" (ground)
                  (("" (use "contained_not_on_perimeter")
                    (("" (assert)
                      (("" (expand "point_on_polygon_perimeter?")
                        (("" (expand "crossing_point?")
                          (("" (propax) nil))))))))))))))))))))))))
    nil)
   nil shostak))
 (before_crossing_not_on_container 0
  (before_crossing_not_on_container-1 nil 3874129020
   ("" (skeep*)
    (("" (use "container_edges_not_inside")
      (("" (assert)
        (("" (expand "point_on_polygon_perimeter?")
          (("" (skeep)
            (("" (inst - "u" "e")
              (("" (assert)
                (("" (use "before_crossing_in_polygon")
                  (("" (assert)
                    (("" (inst?) (("" (assert) nil))))))))))))))))))))
    nil)
   nil shostak))
 (before_counted_not_on_container 0
  (before_counted_not_on_container-1 nil 3874129020
   ("" (skeep*)
    (("" (use "container_edges_not_inside")
      (("" (assert)
        (("" (expand "point_on_polygon_perimeter?")
          (("" (skeep)
            (("" (typepred "e")
              (("" (inst -2 "u" "e")
                (("" (assert)
                  (("" (lemma "before_counted_in_polygon")
                    (("" (inst - "p" "q" "A")
                      (("" (assert)
                        (("" (inst?)
                          (("" (assert) nil))))))))))))))))))))))))
    nil)
   nil shostak)))

