(reverse_polygons
 (rev_polygon_index_TCC1 0
  (rev_polygon_index_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (rev_polygon_index subtype "0"
    "naturalnumbers.below(reverse_polygons.G`num_vertices)"))
  (rev_polygon_index_TCC1-1 nil 3874128234 ("" (subtype-tcc) nil nil)
   nil nil
   (rev_polygon_index subtype "0"
    "naturalnumbers.below(reverse_polygons.G`num_vertices)")))
 (rev_polygon_index_TCC2 0
  (rev_polygon_index_TCC2-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (rev_polygon_index subtype
    "(number_fields.-)(reverse_polygons.G`num_vertices, reverse_polygons.i)"
    "naturalnumbers.below(reverse_polygons.G`num_vertices)"))
  (rev_polygon_index_TCC2-1 nil 3874128234 ("" (subtype-tcc) nil nil)
   nil nil
   (rev_polygon_index subtype
    "(number_fields.-)(reverse_polygons.G`num_vertices, reverse_polygons.i)"
    "naturalnumbers.below(reverse_polygons.G`num_vertices)")))
 (reverse_polygon_TCC1 0
  (reverse_polygon_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (typepred "G`vertices")
      (("" (expand "uniq_vertex_list?")
        (("" (skeep)
          ((""
            (inst - "rev_polygon_index(G, i_1)"
             "rev_polygon_index(G, j)")
            (("1" (ground) nil nil)
             ("2" (hide -) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (reverse_polygon subtype
    "LAMBDA (i: naturalnumbers.below(reverse_polygons.G`num_vertices)): reverse_polygons.G`vertices(reverse_polygons.rev_polygon_index(reverse_polygons.G, i))"
    "vertex_list.uniq_vertex_list(reverse_polygons.G`num_vertices)"))
  (reverse_polygon_TCC1-1 nil 3874128234 ("" (subtype-tcc) nil nil) nil
   nil
   (reverse_polygon subtype
    "LAMBDA (i: naturalnumbers.below(reverse_polygons.G`num_vertices)): reverse_polygons.G`vertices(reverse_polygons.rev_polygon_index(reverse_polygons.G, i))"
    "vertex_list.uniq_vertex_list(reverse_polygons.G`num_vertices)")))
 (rev_polygon_index_reverse_TCC1 0
  (rev_polygon_index_reverse_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (rev_polygon_index_reverse subtype "reverse_polygons.i"
    "naturalnumbers.below(reverse_polygons.reverse_polygon(reverse_polygons.G)`num_vertices)"))
  (rev_polygon_index_reverse_TCC1-1 nil 3874128234
   ("" (subtype-tcc) nil nil) nil nil
   (rev_polygon_index_reverse subtype "reverse_polygons.i"
    "naturalnumbers.below(reverse_polygons.reverse_polygon(reverse_polygons.G)`num_vertices)")))
 (rev_polygon_index_reverse 0
  (rev_polygon_index_reverse-1 nil 3874129020
   ("" (skeep) (("" (grind) nil nil)) nil) nil shostak))
 (rev_rev_polygon_index 0
  (rev_rev_polygon_index-1 nil 3874129020
   ("" (skeep) (("" (grind) nil nil)) nil) nil shostak))
 (reverse_reverse_polygon 0
  (reverse_reverse_polygon-1 nil 3874129020
   ("" (skeep) (("" (grind-with-ext) nil nil)) nil) nil shostak))
 (reverse_vertex_rev_index_TCC1 0
  (reverse_vertex_rev_index_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (reverse_vertex_rev_index subtype
    "reverse_polygons.rev_polygon_index(reverse_polygons.G, reverse_polygons.i)"
    "naturalnumbers.below(reverse_polygons.reverse_polygon(reverse_polygons.G)`num_vertices)"))
  (reverse_vertex_rev_index_TCC1-1 nil 3874128234
   ("" (subtype-tcc) nil nil) nil nil
   (reverse_vertex_rev_index subtype
    "reverse_polygons.rev_polygon_index(reverse_polygons.G, reverse_polygons.i)"
    "naturalnumbers.below(reverse_polygons.reverse_polygon(reverse_polygons.G)`num_vertices)")))
 (reverse_vertex_rev_index 0
  (reverse_vertex_rev_index-1 nil 3874129020
   ("" (skeep) (("" (grind) nil nil)) nil) nil shostak))
 (prev_index_rev_index_next 0
  (prev_index_rev_index_next-1 nil 3874129020
   ("" (skeep) (("" (grind) nil nil)) nil) nil shostak))
 (prev_index_of_reverse 0
  (prev_index_of_reverse-1 nil 3874129020
   ("" (skeep) (("" (grind) nil nil)) nil) nil shostak))
 (next_index_rev_index_prev 0
  (next_index_rev_index_prev-1 nil 3874129020
   ("" (skeep) (("" (grind) nil nil)) nil) nil shostak))
 (next_index_of_reverse 0
  (next_index_of_reverse-1 nil 3874129020
   ("" (skeep) (("" (grind) nil nil)) nil) nil shostak))
 (edges_of_reverse_polygon 0
  (edges_of_reverse_polygon-1 nil 3874129020
   ("" (skeep) (("" (grind) nil nil)) nil) nil shostak))
 (point_on_edge_of_rev_polygon 0
  (point_on_edge_of_rev_polygon-1 nil 3874129020
   ("" (skeep)
    (("" (rewrite "edges_of_reverse_polygon")
      (("" (rewrite "point_on_reverse_segment") nil nil)) nil))
    nil)
   nil shostak))
 (edge_of_rev_polygon_rev_segment 0
  (edge_of_rev_polygon_rev_segment-1 nil 3874129020
   ("" (skeep)
    (("" (expand "edge_of_polygon?")
      (("" (skeep)
        (("" (inst + "prev_index(G, rev_polygon_index(G, i))")
          (("1" (grind) nil nil)
           ("2" (expand "reverse_polygon") (("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (edge_of_rev_polygon_imp_edge_rev_seg 0
  (edge_of_rev_polygon_imp_edge_rev_seg-1 nil 3874129020
   ("" (skeep)
    (("" (expand "edge_of_polygon?")
      (("" (skeep)
        (("" (inst + "prev_index(G, rev_polygon_index(G, i))")
          (("1" (expand "reverse_polygon")
            (("1" (expand "edges_of_polygon")
              (("1" (assert)
                (("1" (expand "next_index")
                  (("1" (lift-if)
                    (("1" (ground)
                      (("1" (replace -1)
                        (("1" (grind)
                          (("1" (replace -2 :dir rl)
                            (("1" (assert) nil nil)) nil)
                           ("2" (replace -2 :dir rl)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (expand "prev_index")
                        (("2" (lift-if)
                          (("2" (expand "reverse_segment")
                            (("2" (expand "rev_polygon_index" +)
                              (("2"
                                (lift-if)
                                (("2"
                                  (expand "rev_polygon_index")
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (ground)
                                      (("1"
                                        (replace -3 :dir rl)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (typepred "i")
                                        (("2"
                                          (expand "reverse_polygon")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (replace -1 :dir rl)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "i")
            (("2" (expand "reverse_polygon") (("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (rev_polygon_edge_is_rev_segment 0
  (rev_polygon_edge_is_rev_segment-1 nil 3874129020
   ("" (skeep) (("" (grind) nil nil)) nil) nil shostak))
 (on_rev_perim_eqv_on_perim 0
  (on_rev_perim_eqv_on_perim-1 nil 3874129020
   ("" (skeep)
    (("" (expand "point_on_polygon_perimeter?")
      (("" (ground)
        (("1" (skeep - t)
          (("1" (expand "edge_of_polygon?")
            (("1" (skeep - t)
              (("1" (replace -2 :dir rl)
                (("1" (rewrite "point_on_edge_of_rev_polygon")
                  (("1" (inst?) nil nil)
                   ("2" (expand "reverse_polygon")
                    (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (inst + "reverse_segment(e)")
            (("1" (rewrite "point_on_reverse_segment") nil nil)
             ("2" (typepred "e")
              (("2" (expand "edge_of_polygon?")
                (("2" (skeep)
                  (("2"
                    (inst + "prev_index(G, rev_polygon_index(G, i))")
                    (("1" (rewrite "edges_of_reverse_polygon")
                      (("1" (grind) nil nil)) nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (reverse_polygon_is_simple 0
  (reverse_polygon_is_simple-2 nil 3874129020
   ("" (skeep + t)
    (("" (expand "simple_polygon_2d?")
      (("" (ground)
        (("" (expand "polygon_edges_do_not_cross?")
          (("" (skeep* + t)
            (("" (auto-rewrite "is_point_on_seg_equiv")
              (("" (assert)
                ((""
                  (case-replace
                   "reverse_polygon(G)`num_vertices = G`num_vertices")
                  (("1" (rewrite* "point_on_edge_of_rev_polygon")
                    (("1" (rewrite* "edges_of_reverse_polygon")
                      (("1" (expand "reverse_segment")
                        (("1"
                          (inst -
                           "prev_index(G, rev_polygon_index(G, i))"
                           "prev_index(G, rev_polygon_index(G, j))")
                          (("1" (inst?)
                            (("1" (ground)
                              (("1"
                                (hide-all-but (-1 1))
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "reverse_polygon")
                    (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (reverse_polygon_is_simple subtype
    "reverse_polygons.reverse_polygon(reverse_polygons.G)"
    "simple_polygon_2d"))
  (reverse_polygon_is_simple-1 nil 3874128234
   ("" (judgement-tcc) nil nil) nil nil
   (reverse_polygon_is_simple subtype
    "reverse_polygons.reverse_polygon(reverse_polygons.G)"
    "simple_polygon_2d")))
 (topleft_index_of_reverse 0
  (topleft_index_of_reverse-1 nil 3874129020
   ("" (skeep)
    (("" (typepred "topleft_vertex_idx(reverse_polygon(G))")
      (("" (expand "reverse_polygon" -1 2)
        (("" (typepred "topleft_vertex_idx(G)")
          ((""
            (name-replace "ri"
             "topleft_vertex_idx(reverse_polygon(G))")
            ((""
              (case-replace "leftmost_vertex_val(reverse_polygon(G)) =
    leftmost_vertex_val(G)")
              (("1"
                (case-replace "topleft_vertex_val(reverse_polygon(G)) =
        topleft_vertex_val(G)")
                (("1" (typepred "G`vertices")
                  (("1" (expand "uniq_vertex_list?")
                    (("1" (expand "reverse_polygon" (-8 -9))
                      (("1"
                        (inst - "topleft_vertex_idx(G)"
                         "rev_polygon_index(G, ri)")
                        (("1" (ground)
                          (("1" (apply-extensionality :hide? t) nil
                            nil))
                          nil)
                         ("2" (ground)
                          (("2" (hide-all-but (-1 1))
                            (("2" (expand "rev_polygon_index")
                              (("2"
                                (lift-if)
                                (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "topleft_vertex_val" +)
                  (("2" (equate (! 1 l 1) (! 1 r 1))
                    (("2" (hide 2)
                      (("2" (apply-extensionality :hide? t)
                        (("2" (iff)
                          (("2" (ground)
                            (("1" (skeep - t)
                              (("1"
                                (expand "leftmost_vertices")
                                (("1"
                                  (skeep - t)
                                  (("1"
                                    (inst + "v")
                                    (("1"
                                      (expand "leftmost_vertices")
                                      (("1"
                                        (expand "reverse_polygon")
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (inst?)
                                (("2"
                                  (typepred "v")
                                  (("2"
                                    (expand "leftmost_vertices")
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst
                                         +
                                         "rev_polygon_index(G, i)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "reverse_polygon")
                                            (("1"
                                              (expand
                                               "rev_polygon_index"
                                               1)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "reverse_polygon")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -3 -6)
                (("2" (expand "leftmost_vertex_val" +)
                  (("2" (equate (! 1 l 1) (! 1 r 1))
                    (("2" (hide 2)
                      (("2" (apply-extensionality :hide? t)
                        (("2" (iff)
                          (("2" (ground)
                            (("1" (skeep - t)
                              (("1"
                                (expand "reverse_polygon" (-1 -2))
                                (("1" (inst?) nil nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (inst + "rev_polygon_index(G, i)")
                                (("1"
                                  (expand "reverse_polygon")
                                  (("1"
                                    (expand "rev_polygon_index" 1)
                                    (("1"
                                      (lift-if)
                                      (("1" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "reverse_polygon")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (topleft_vertex_of_reverse_is_same 0
  (topleft_vertex_of_reverse_is_same-1 nil 3874129020
   ("" (skeep)
    (("" (rewrite "topleft_index_of_reverse")
      (("" (expand "reverse_polygon")
        (("" (rewrite "rev_rev_polygon_index") nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (find_index_any_reverse 0
  (find_index_any_reverse-1 nil 3874129020
   ("" (skeep)
    (("" (case "point_on_polygon_perimeter?(G)(p)")
      (("1" (use "on_rev_perim_eqv_on_perim")
        (("1" (assert)
          (("1" (use "perimeter_find_index_any")
            (("1" (assert)
              (("1" (use "point_on_find_index_segment")
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (expand "segment_endpoint?")
                      (("1" (flatten)
                        (("1" (expand "edges_of_polygon" (2 3))
                          (("1" (lemma "find_index_any_segment")
                            (("1" (inst - "reverse_polygon(G)" "p" _)
                              (("1"
                                (inst?)
                                (("1"
                                  (ground)
                                  (("1"
                                    (rewrite
                                     "point_on_edge_of_rev_polygon"
                                     1)
                                    (("1"
                                      (rewrite
                                       "prev_index_rev_index_next")
                                      (("1"
                                        (rewrite
                                         "rev_rev_polygon_index")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "next_index_of_reverse")
                                    (("2"
                                      (rewrite
                                       "prev_index_rev_index_next"
                                       -1)
                                      (("2"
                                        (rewrite
                                         "rev_rev_polygon_index")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "reverse_polygon" 1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "reverse_polygon_is_simple")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "point_on_polygon_perimeter?")
        (("2" (inst?) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (find_index_any_vertex_reverse 0
  (find_index_any_vertex_reverse-1 nil 3874129020
   ("" (skeep)
    (("" (case "point_on_polygon_perimeter?(G)(G`vertices(i))")
      (("1" (use "on_rev_perim_eqv_on_perim")
        (("1" (assert)
          (("1" (use "perimeter_find_index_any")
            (("1" (assert)
              (("1" (use "point_on_find_index_segment")
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (lemma "find_index_any_segment")
                      (("1"
                        (inst - "reverse_polygon(G)" "G`vertices(i)" _)
                        (("1" (inst?)
                          (("1" (ground)
                            (("1"
                              (rewrite "point_on_edge_of_rev_polygon"
                               1)
                              (("1"
                                (rewrite "prev_index_rev_index_next")
                                (("1"
                                  (rewrite "next_index_rev_index_prev")
                                  (("1"
                                    (rewrite "rev_rev_polygon_index")
                                    (("1"
                                      (expand "point_on_segment?" 1)
                                      (("1"
                                        (inst + "1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "edges_of_polygon")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "next_index_of_reverse")
                              (("2"
                                (rewrite "rev_rev_polygon_index")
                                (("2"
                                  (use "vertex_neq_prev")
                                  (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (expand "reverse_polygon")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (rewrite "reverse_polygon_is_simple") nil
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "point_on_polygon_perimeter?")
        (("2" (inst + "edges_of_polygon(G)(i)")
          (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (ccw_reverse_polygon 0
  (ccw_reverse_polygon-1 nil 3874129020
   ("" (skeep)
    (("" (expand "ccw_vertex_order?")
      (("" (rewrite "topleft_index_of_reverse")
        (("" (expand "reverse_polygon" 1 2)
          (("" (rewrite "rev_rev_polygon_index")
            (("" (expand "point_between_edges?")
              (("" (expand "edges_of_polygon")
                (("" (assert)
                  (("" (rewrite "prev_index_of_reverse")
                    (("" (rewrite "next_index_of_reverse")
                      (("" (rewrite "rev_rev_polygon_index")
                        (("" (expand "reverse_polygon")
                          (("" (rewrite "rev_rev_polygon_index")
                            ((""
                              (name-replace "tli"
                               "topleft_vertex_idx(G)")
                              ((""
                                (rewrite* "between_rays_equiv")
                                ((""
                                  (expand "reverse_segment")
                                  ((""
                                    (ground)
                                    (("1"
                                      (rewrite
                                       "point_between_rays_antisymmetric")
                                      nil
                                      nil)
                                     ("2"
                                      (use
                                       "point_between_rays_antisymmetric_2")
                                      (("2"
                                        (expand "point_on_arb_ray?")
                                        (("2"
                                          (ground)
                                          (("1"
                                            (hide +)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (cancel-add -1)
                                                (("1"
                                                  (expand "^")
                                                  (("1"
                                                    (real-props)
                                                    (("1"
                                                      (name-replace
                                                       "n"
                                                       "norm(G`vertices(next_index(G, tli)) - G`vertices(tli))")
                                                      (("1"
                                                        (cross-mult -1)
                                                        (("1"
                                                          (case
                                                           "n > 0")
                                                          (("1"
                                                            (case-replace
                                                             "d = 0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (use
                                                                 "comps_eq")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (div-by
                                                               -2
                                                               "d")
                                                              (("2"
                                                                (name-replace
                                                                 "negv"
                                                                 "((1 / d) * n) * -((# x := 1, y := 0 #))")
                                                                (("2"
                                                                  (case
                                                                   "G`vertices(next_index(G, tli)) = G`vertices(tli) + negv")
                                                                  (("1"
                                                                    (hide
                                                                     -2)
                                                                    (("1"
                                                                      (lemma
                                                                       "topleft_vertex_bounds_vertices")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "G"
                                                                         "G`vertices(tli)")
                                                                        (("1"
                                                                          (expand
                                                                           "tli"
                                                                           -1
                                                                           1)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "G`vertices(next_index(G, tli))")
                                                                            (("1"
                                                                              (replace
                                                                               -2
                                                                               :hide?
                                                                               t)
                                                                              (("1"
                                                                                (expand
                                                                                 "negv")
                                                                                (("1"
                                                                                  (name-replace
                                                                                   "tlv"
                                                                                   "G`vertices(tli)")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    (("1"
                                                                                      (cancel-add
                                                                                       -1)
                                                                                      (("1"
                                                                                        (move-terms
                                                                                         -1
                                                                                         r)
                                                                                        (("1"
                                                                                          (elim-unary
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (cross-mult
                                                                                               -1)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "vertex?")
                                                                              (("2"
                                                                                (inst?)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "vertex?")
                                                                          (("2"
                                                                            (inst
                                                                             +
                                                                             "tli")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     -1
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (apply-extensionality
                                                                       :hide?
                                                                       t)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide -)
                                                            (("2"
                                                              (expand
                                                               "n")
                                                              (("2"
                                                                (use
                                                                 "norm_eq_0")
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide +)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (cancel-add -1)
                                                (("2"
                                                  (expand "^")
                                                  (("2"
                                                    (real-props)
                                                    (("2"
                                                      (name-replace
                                                       "n"
                                                       "norm(G`vertices(prev_index(G, tli)) - G`vertices(tli))")
                                                      (("2"
                                                        (cross-mult -1)
                                                        (("2"
                                                          (case
                                                           "n > 0")
                                                          (("1"
                                                            (case-replace
                                                             "d = 0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (use
                                                                 "comps_eq")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (div-by
                                                               -2
                                                               "d")
                                                              (("2"
                                                                (name-replace
                                                                 "negv"
                                                                 "((1 / d) * n) * -((# x := 1, y := 0 #))")
                                                                (("2"
                                                                  (case
                                                                   "G`vertices(prev_index(G, tli)) = G`vertices(tli) + negv")
                                                                  (("1"
                                                                    (hide
                                                                     -2)
                                                                    (("1"
                                                                      (lemma
                                                                       "topleft_vertex_bounds_vertices")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "G"
                                                                         "G`vertices(tli)")
                                                                        (("1"
                                                                          (expand
                                                                           "tli"
                                                                           -1
                                                                           1)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "G`vertices(prev_index(G, tli))")
                                                                            (("1"
                                                                              (replace
                                                                               -2
                                                                               :hide?
                                                                               t)
                                                                              (("1"
                                                                                (expand
                                                                                 "negv")
                                                                                (("1"
                                                                                  (name-replace
                                                                                   "tlv"
                                                                                   "G`vertices(tli)")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    (("1"
                                                                                      (cancel-add
                                                                                       -1)
                                                                                      (("1"
                                                                                        (move-terms
                                                                                         -1
                                                                                         r)
                                                                                        (("1"
                                                                                          (elim-unary
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (cross-mult
                                                                                               -1)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "vertex?")
                                                                              (("2"
                                                                                (inst?)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "vertex?")
                                                                          (("2"
                                                                            (inst
                                                                             +
                                                                             "tli")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     -1
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (apply-extensionality
                                                                       :hide?
                                                                       t)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide -)
                                                            (("2"
                                                              (expand
                                                               "n")
                                                              (("2"
                                                                (use
                                                                 "norm_eq_0")
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide +)
                                            (("3"
                                              (skeep)
                                              (("3"
                                                (lemma
                                                 "prev_edge_not_dir_parallel")
                                                (("3"
                                                  (inst - "G" "tli")
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (expand
                                                       "edges_of_polygon")
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (rewrite
                                                           "dir_parallel_diff")
                                                          (("3"
                                                            (expand
                                                             "dir_parallel?")
                                                            (("3"
                                                              (expand
                                                               "^")
                                                              (("3"
                                                                (real-props)
                                                                (("3"
                                                                  (inst?)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (case-replace
                                                                     "d = 0")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "vertex_neq_next")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "G"
                                                                           "tli")
                                                                          (("1"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -)
                                                                      (("2"
                                                                        (splash
                                                                         2
                                                                         t)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (cross-mult
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (ccw_miter_pt_left_of_topleft_vtx_TCC1 0
  (ccw_miter_pt_left_of_topleft_vtx_TCC1-2 nil 3874129020
   ("" (skeep + t)
    (("" (use "vertex_neq_prev") (("" (ground) nil nil)) nil)) nil)
   nil shostak
   (ccw_miter_pt_left_of_topleft_vtx subtype
    "reverse_polygons.G`vertices(polygons_2d.prev_index(reverse_polygons.G, reverse_polygons.i))"
    "{p: vectors_cross_2d.point_2d | p /= reverse_polygons.G`vertices(reverse_polygons.i)}"))
  (ccw_miter_pt_left_of_topleft_vtx_TCC1-1 nil 3874128234
   ("" (subtype-tcc) nil nil) nil nil
   (ccw_miter_pt_left_of_topleft_vtx subtype
    "reverse_polygons.G`vertices(polygons_2d.prev_index(reverse_polygons.G, reverse_polygons.i))"
    "{p: vectors_cross_2d.point_2d | p /= reverse_polygons.G`vertices(reverse_polygons.i)}")))
 (ccw_miter_pt_left_of_topleft_vtx_TCC2 0
  (ccw_miter_pt_left_of_topleft_vtx_TCC2-2 nil 3874129020
   ("" (skeep + t)
    (("" (ground)
      (("1" (use "vertex_neq_prev") (("1" (ground) nil nil)) nil)
       ("2" (use "adjacent_edges_do_not_fold_back")
        (("2" (ground) nil nil)) nil))
      nil))
    nil)
   nil shostak
   (ccw_miter_pt_left_of_topleft_vtx subtype
    "reverse_polygons.G`vertices(polygons_2d.next_index(reverse_polygons.G, reverse_polygons.i))"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= reverse_polygons.G`vertices(reverse_polygons.i), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(reverse_polygons.G`vertices(polygons_2d.prev_index(reverse_polygons.G, reverse_polygons.i)), reverse_polygons.G`vertices(reverse_polygons.i)), (vectors_2D.-)(p, reverse_polygons.G`vertices(reverse_polygons.i)))))}"))
  (ccw_miter_pt_left_of_topleft_vtx_TCC2-1 nil 3874128234
   ("" (subtype-tcc) nil nil) nil nil
   (ccw_miter_pt_left_of_topleft_vtx subtype
    "reverse_polygons.G`vertices(polygons_2d.next_index(reverse_polygons.G, reverse_polygons.i))"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= reverse_polygons.G`vertices(reverse_polygons.i), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(reverse_polygons.G`vertices(polygons_2d.prev_index(reverse_polygons.G, reverse_polygons.i)), reverse_polygons.G`vertices(reverse_polygons.i)), (vectors_2D.-)(p, reverse_polygons.G`vertices(reverse_polygons.i)))))}")))
 (ccw_miter_pt_left_of_topleft_vtx 0
  (ccw_miter_pt_left_of_topleft_vtx-1 nil 3874129020
   ("" (skeep)
    (("" (skoletin*)
      (("" (use "ccw_eqv_cross_topleft_edges_neg")
        (("" (assert)
          (("" (expand "edges_of_polygon")
            (("" (assert)
              (("" (replace -4 :dir rl)
                (("" (rewrite "miter_point_defns_equiv")
                  (("" (expand "miter_point_hyp")
                    ((""
                      (name-replace "hsin"
                       "half_angle_vsin(^(G`vertices(prev_index(G, i)) - G`vertices(i)),
                             ^(G`vertices(next_index(G, i)) - G`vertices(i)))")
                      (("" (replace -1 :hide? t)
                        ((""
                          (name-replace "bv"
                           "^(segment_bisect_vector(G`vertices(i),
                                     G`vertices(prev_index(G, i)),
                                     G`vertices(next_index(G, i))))")
                          (("" (replace -1 :dir rl)
                            (("" (replace -2)
                              ((""
                                (expand "+" 1)
                                ((""
                                  (expand "*" 1)
                                  ((""
                                    (case "hsin > 0")
                                    (("1"
                                      (use "norm_vertex_diff_next_pos")
                                      (("1"
                                        (use
                                         "norm_vertex_diff_prev_pos")
                                        (("1"
                                          (ground)
                                          (("1"
                                            (cancel-add 1)
                                            (("1"
                                              (cross-mult 1)
                                              (("1"
                                                (real-props)
                                                (("1"
                                                  (hide -6)
                                                  (("1"
                                                    (expand "bv")
                                                    (("1"
                                                      (expand "^")
                                                      (("1"
                                                        (expand "*" +)
                                                        (("1"
                                                          (cross-mult
                                                           1)
                                                          (("1"
                                                            (real-props)
                                                            (("1"
                                                              (expand
                                                               "segment_bisect_vector")
                                                              (("1"
                                                                (real-props)
                                                                (("1"
                                                                  (equate
                                                                   "(-(^(G`vertices(next_index(G, i)) - G`vertices(i)) +
                      ^(G`vertices(prev_index(G, i)) - G`vertices(i))))`x"
                                                                   "-^(G`vertices(next_index(G, i)) - G`vertices(i))`x -
                      ^(G`vertices(prev_index(G, i)) - G`vertices(i))`x")
                                                                  (("1"
                                                                    (move-terms
                                                                     1
                                                                     l)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (elim-unary
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "^")
                                                                          (("1"
                                                                            (expand
                                                                             "*"
                                                                             1)
                                                                            (("1"
                                                                              (name-replace
                                                                               "nn"
                                                                               "1 / norm(G`vertices(next_index(G, i)) - G`vertices(i))")
                                                                              (("1"
                                                                                (name-replace
                                                                                 "np"
                                                                                 "1 / norm(G`vertices(prev_index(G, i)) - G`vertices(i))")
                                                                                (("1"
                                                                                  (expand
                                                                                   "-"
                                                                                   1)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "topleft_vertex_bounds_vertices")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "G"
                                                                                       "tl")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst-cp
                                                                                           -
                                                                                           "G`vertices(next_index(G, i))")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "G`vertices(prev_index(G, i))")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -7
                                                                                               :dir
                                                                                               rl)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "nn > 0 & np > 0")
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (ground)
                                                                                                    (("1"
                                                                                                      (mult-by
                                                                                                       -1
                                                                                                       "nn")
                                                                                                      (("1"
                                                                                                        (mult-by
                                                                                                         -2
                                                                                                         "np")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (mult-by
                                                                                                       -1
                                                                                                       "nn")
                                                                                                      (("2"
                                                                                                        (mult-by
                                                                                                         -3
                                                                                                         "np")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (mult-by
                                                                                                       -1
                                                                                                       "nn")
                                                                                                      (("3"
                                                                                                        (mult-by
                                                                                                         -2
                                                                                                         "np")
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("4"
                                                                                                      (lemma
                                                                                                       "prev_edge_not_dir_parallel")
                                                                                                      (("4"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "G"
                                                                                                         "i")
                                                                                                        (("4"
                                                                                                          (assert)
                                                                                                          (("4"
                                                                                                            (expand
                                                                                                             "edges_of_polygon")
                                                                                                            (("4"
                                                                                                              (assert)
                                                                                                              (("4"
                                                                                                                (rewrite
                                                                                                                 "dir_parallel_diff")
                                                                                                                (("4"
                                                                                                                  (expand
                                                                                                                   "dir_parallel?")
                                                                                                                  (("4"
                                                                                                                    (inst
                                                                                                                     +
                                                                                                                     "np / nn")
                                                                                                                    (("1"
                                                                                                                      (grind-with-ext)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (ground)
                                                                                                                      (("1"
                                                                                                                        (cross-mult
                                                                                                                         1)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (cross-mult
                                                                                                                         1)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   (-4
                                                                                                    -5
                                                                                                    1))
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "nn")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "np")
                                                                                                      (("2"
                                                                                                        (real-props)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "vertex?")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 +
                                                                                                 "prev_index(G, i)")
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "vertex?")
                                                                                            (("2"
                                                                                              (inst
                                                                                               +
                                                                                               "next_index(G, i)")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "vertex?")
                                                                                        (("2"
                                                                                          (inst
                                                                                           +
                                                                                           "i")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (name-replace
                                                                       "nv"
                                                                       "^(G`vertices(next_index(G, i)) - G`vertices(i))")
                                                                      (("2"
                                                                        (name-replace
                                                                         "pv"
                                                                         "^(G`vertices(prev_index(G, i)) - G`vertices(i))")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (cancel-add 2)
                                            (("2"
                                              (cross-mult 2)
                                              (("2"
                                                (real-props)
                                                (("2"
                                                  (hide -5)
                                                  (("2"
                                                    (expand "bv")
                                                    (("2"
                                                      (expand "^")
                                                      (("2"
                                                        (expand "*" +)
                                                        (("2"
                                                          (cross-mult
                                                           2)
                                                          (("2"
                                                            (real-props)
                                                            (("2"
                                                              (expand
                                                               "segment_bisect_vector")
                                                              (("2"
                                                                (real-props)
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (ground)
                                                                    (("1"
                                                                      (rewrite
                                                                       "parallel_equiv_cross_eq_0"
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (replace
                                                                         -5
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (expand
                                                                           "parallel?")
                                                                          (("1"
                                                                            (skeep)
                                                                            (("1"
                                                                              (case
                                                                               "nzk > 0")
                                                                              (("1"
                                                                                (lemma
                                                                                 "prev_edge_not_dir_parallel")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "G"
                                                                                   "i")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "edges_of_polygon")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "dir_parallel_diff")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "dir_parallel?")
                                                                                            (("1"
                                                                                              (inst
                                                                                               +
                                                                                               "1 / nzk")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -6
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (real-props)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (real-props)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 "topleft_vertex_bounds_vertices")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "G"
                                                                                   "tl")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (inst-cp
                                                                                       -
                                                                                       "G`vertices(next_index(G, i))")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "G`vertices(prev_index(G, i))")
                                                                                        (("1"
                                                                                          (use
                                                                                           "comps_eq")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             :hide?
                                                                                             t)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "*"
                                                                                                 (-3
                                                                                                  -4))
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "-"
                                                                                                   (-3
                                                                                                    -4))
                                                                                                  (("1"
                                                                                                    (ground)
                                                                                                    (("1"
                                                                                                      (move-terms
                                                                                                       -2
                                                                                                       l)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -3)
                                                                                                        (("1"
                                                                                                          (factor
                                                                                                           -2
                                                                                                           r)
                                                                                                          (("1"
                                                                                                            (mult-cases
                                                                                                             -2)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (move-terms
                                                                                                       -4
                                                                                                       r)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -6)
                                                                                                        (("2"
                                                                                                          (factor
                                                                                                           -4
                                                                                                           l)
                                                                                                          (("2"
                                                                                                            (mult-cases
                                                                                                             -4)
                                                                                                            (("2"
                                                                                                              (use
                                                                                                               "prev_vertex_neq_next_vertex")
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (apply-extensionality
                                                                                                                   :hide?
                                                                                                                   t)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (typepred
                                                                                                                 "G")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "simple_polygon_2d?")
                                                                                                                  (("2"
                                                                                                                    (ground)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "vertex?")
                                                                                          (("2"
                                                                                            (inst
                                                                                             +
                                                                                             "prev_index(G, i)")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "vertex?")
                                                                                        (("2"
                                                                                          (inst
                                                                                           +
                                                                                           "next_index(G, i)")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "vertex?")
                                                                                    (("2"
                                                                                      (inst
                                                                                       +
                                                                                       "i")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "vertex_neq_prev")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "G"
                                                                           "i")
                                                                          (("2"
                                                                            (ground)
                                                                            (("2"
                                                                              (use
                                                                               "vertex_neq_next")
                                                                              (("2"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (use
                                                                         "vertex_neq_next")
                                                                        (("3"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "+"
                                                                       2)
                                                                      (("2"
                                                                        (expand
                                                                         "^"
                                                                         2)
                                                                        (("2"
                                                                          (name-replace
                                                                           "nn"
                                                                           "1 / norm(G`vertices(next_index(G, i)) - G`vertices(i))")
                                                                          (("2"
                                                                            (name-replace
                                                                             "np"
                                                                             "1 / norm(G`vertices(prev_index(G, i)) - G`vertices(i))")
                                                                            (("2"
                                                                              (expand
                                                                               "*"
                                                                               2)
                                                                              (("2"
                                                                                (expand
                                                                                 "-"
                                                                                 2)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "topleft_vertex_bounds_vertices")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "G"
                                                                                     "tl")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst-cp
                                                                                         -
                                                                                         "G`vertices(next_index(G, i))")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "G`vertices(prev_index(G, i))")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -6
                                                                                             :dir
                                                                                             rl)
                                                                                            (("1"
                                                                                              (case
                                                                                               "nn > 0 & np > 0")
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (ground)
                                                                                                  (("1"
                                                                                                    (mult-by
                                                                                                     -1
                                                                                                     "nn")
                                                                                                    (("1"
                                                                                                      (mult-by
                                                                                                       -2
                                                                                                       "np")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (mult-by
                                                                                                     -1
                                                                                                     "nn")
                                                                                                    (("2"
                                                                                                      (mult-by
                                                                                                       -3
                                                                                                       "np")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (mult-by
                                                                                                     -1
                                                                                                     "nn")
                                                                                                    (("3"
                                                                                                      (mult-by
                                                                                                       -2
                                                                                                       "np")
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("4"
                                                                                                    (lemma
                                                                                                     "prev_edge_not_dir_parallel")
                                                                                                    (("4"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "G"
                                                                                                       "i")
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        (("4"
                                                                                                          (expand
                                                                                                           "edges_of_polygon")
                                                                                                          (("4"
                                                                                                            (assert)
                                                                                                            (("4"
                                                                                                              (rewrite
                                                                                                               "dir_parallel_diff")
                                                                                                              (("4"
                                                                                                                (expand
                                                                                                                 "dir_parallel?")
                                                                                                                (("4"
                                                                                                                  (inst
                                                                                                                   +
                                                                                                                   "np / nn")
                                                                                                                  (("1"
                                                                                                                    (apply-extensionality
                                                                                                                     :hide?
                                                                                                                     t)
                                                                                                                    (("1"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (ground)
                                                                                                                    (("1"
                                                                                                                      (cross-mult
                                                                                                                       1)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (cross-mult
                                                                                                                       1)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "nn")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "np")
                                                                                                  (("2"
                                                                                                    (real-props)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "vertex?")
                                                                                            (("2"
                                                                                              (inst
                                                                                               +
                                                                                               "prev_index(G, i)")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "vertex?")
                                                                                          (("2"
                                                                                            (inst
                                                                                             +
                                                                                             "next_index(G, i)")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "vertex?")
                                                                                      (("2"
                                                                                        (inst
                                                                                         +
                                                                                         "i")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (hide -2)
                                        (("2"
                                          (expand "hsin")
                                          (("2"
                                            (lemma
                                             "half_angle_sine_dir_nonparallel")
                                            (("2"
                                              (inst
                                               -
                                               "tl"
                                               "G`vertices(prev_index(G, i))"
                                               "G`vertices(next_index(G, i))")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   "half_angle_vsin")
                                                  (("1"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (ground)
                                                (("1"
                                                  (lemma
                                                   "vertex_neq_next")
                                                  (("1"
                                                    (inst - "G" "i")
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (use
                                                   "prev_edge_not_dir_parallel")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "edges_of_polygon")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (rewrite
                                                           "dir_parallel_diff")
                                                          (("2"
                                                            (rewrite*
                                                             "dir_parallel_eqv_normalized_diffs_eq")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "vertex_neq_prev")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "G"
                                                                 "i")
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (lemma
                                                               "vertex_neq_next")
                                                              (("3"
                                                                (inst
                                                                 -
                                                                 "G"
                                                                 "i")
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (lemma
                                                 "vertex_neq_prev")
                                                (("3"
                                                  (inst - "G" "i")
                                                  (("3"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (segment_falling_reverse_rising_TCC1 0
  (segment_falling_reverse_rising_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (segment_falling_reverse_rising subtype
    "reverse_polygons.rev_polygon_index(reverse_polygons.G, reverse_polygons.i)"
    "naturalnumbers.below(reverse_polygons.H`num_vertices)"))
  (segment_falling_reverse_rising_TCC1-1 nil 3874128234
   ("" (subtype-tcc) nil nil) nil nil
   (segment_falling_reverse_rising subtype
    "reverse_polygons.rev_polygon_index(reverse_polygons.G, reverse_polygons.i)"
    "naturalnumbers.below(reverse_polygons.H`num_vertices)")))
 (segment_falling_reverse_rising 0
  (segment_falling_reverse_rising-1 nil 3874129020
   ("" (skeep) (("" (grind) nil nil)) nil) nil shostak))
 (segment_falling_reverse_image_TCC1 0
  (segment_falling_reverse_image_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (segment_falling_reverse_image subtype "reverse_polygons.j"
    "naturalnumbers.below(reverse_polygons.H`num_vertices)"))
  (segment_falling_reverse_image_TCC1-1 nil 3874128234
   ("" (subtype-tcc) nil nil) nil nil
   (segment_falling_reverse_image subtype "reverse_polygons.j"
    "naturalnumbers.below(reverse_polygons.H`num_vertices)")))
 (segment_falling_reverse_image 0
  (segment_falling_reverse_image-1 nil 3874129020
   ("" (skeep) (("" (grind) nil nil)) nil) nil shostak))
 (reverse_seg_rightward_edge_crossing 0
  (reverse_seg_rightward_edge_crossing-1 nil 3874129020
   ("" (skeep + t)
    (("" (expand "rightward_edge_crossing?")
      (("" (flatten)
        (("" (skeep)
          (("" (split 1)
            (("1" (flatten)
              (("1" (expand "reverse_segment")
                (("1" (assert)
                  (("1" (expand "min")
                    (("1" (lift-if) (("1" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -1)
              (("2" (inst?)
                (("2" (rewrite "point_on_reverse_segment") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (reverse_has_rightward_crossings 0
  (reverse_has_rightward_crossings-1 nil 3874129020
   ("" (skeep)
    (("" (expand "has_rightward_crossings?")
      (("" (rewrite "on_rev_perim_eqv_on_perim")
        (("" (ground)
          (("1" (skeep)
            (("1" (inst + "prev_index(G, rev_polygon_index(G, i))")
              (("1" (lemma "edges_of_reverse_polygon")
                (("1" (inst - "G" "i")
                  (("1" (transform-both -1 "reverse_segment(%1)")
                    (("1" (rewrite "reverse_reverse_segment")
                      (("1" (replace -1 :dir rl)
                        (("1" (hide -1 -2)
                          (("1" (expand "rightward_edge_crossing?")
                            (("1" (split 1)
                              (("1"
                                (flatten)
                                (("1"
                                  (split -2)
                                  (("1"
                                    (hide-all-but (-1 1))
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (-1 1))
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (rewrite
                                       "point_on_edge_of_rev_polygon")
                                      (("2"
                                        (hide-all-but (-2 1))
                                        (("2"
                                          (rewrite
                                           "prev_index_rev_index_next")
                                          (("2"
                                            (rewrite
                                             "rev_rev_polygon_index")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (inst + "prev_index(G, rev_polygon_index(G, i))")
              (("1" (lemma "edges_of_reverse_polygon")
                (("1" (inst - "G" "i")
                  (("1" (transform-both -1 "reverse_segment(%1)")
                    (("1" (rewrite "reverse_reverse_segment")
                      (("1" (replace -1 :dir rl)
                        (("1" (hide-all-but (-3 1))
                          (("1" (expand "rightward_edge_crossing?")
                            (("1" (split 1)
                              (("1"
                                (flatten)
                                (("1"
                                  (split -2)
                                  (("1"
                                    (hide-all-but (-1 1))
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (-1 1))
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (rewrite
                                         "point_on_edge_of_rev_polygon")
                                        (("1"
                                          (rewrite
                                           "point_on_edge_of_rev_polygon"
                                           :dir
                                           rl)
                                          (("1"
                                            (rewrite
                                             "point_on_reverse_segment")
                                            nil
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "i")
                                          (("2"
                                            (hide-all-but (-1 1))
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "i")
                (("2" (hide-all-but (-1 1)) (("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (edge_crossing_point_same_in_reverse_TCC1 0
  (edge_crossing_point_same_in_reverse_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (use "reverse_seg_rightward_edge_crossing") nil nil)) nil)
   ((rightward_edge_crossing? const-decl "bool" rightward_crossings
     nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (reverse_seg_rightward_edge_crossing formula-decl nil
     reverse_polygons nil))
   shostak
   (edge_crossing_point_same_in_reverse subtype "reverse_polygons.p"
    "(rightward_crossings.rightward_edge_crossing?(segments_2d.reverse_segment(reverse_polygons.e)))"))
  (edge_crossing_point_same_in_reverse_TCC1-1 nil 3874128234
   ("" (subtype-tcc) nil nil) nil nil
   (edge_crossing_point_same_in_reverse subtype "reverse_polygons.p"
    "(rightward_crossings.rightward_edge_crossing?(segments_2d.reverse_segment(reverse_polygons.e)))")))
 (edge_crossing_point_same_in_reverse 0
  (edge_crossing_point_same_in_reverse-1 nil 3874129020
   ("" (skeep)
    (("" (expand "edge_crossing_point")
      (("" (expand "reverse_segment")
        (("" (lift-if)
          (("" (ground)
            (("1" (move-terms 2 r 1)
              (("1" (cross-mult 2)
                (("1" (move-terms 2 r)
                  (("1" (move-terms 2 l (2 4))
                    (("1" (elim-unary 2)
                      (("1" (assert)
                        (("1" (factor 2 r)
                          (("1"
                            (name-replace "exy"
                             "e`p1`x * p`y + e`p2`x * e`p2`y - e`p2`x * p`y - e`p2`y * e`p1`x")
                            (("1" (cross-mult 2) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lift-if)
              (("2" (ground)
                (("2" (apply-extensionality 2 :hide? t) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (leftmost_crossing_same_in_reverse_TCC1 0
  (leftmost_crossing_same_in_reverse_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (rewrite "reverse_has_rightward_crossings" :dir rl) nil nil))
    nil)
   nil shostak
   (leftmost_crossing_same_in_reverse subtype "reverse_polygons.p"
    "(rightward_crossings.has_rightward_crossings?(reverse_polygons.reverse_polygon(reverse_polygons.G)))"))
  (leftmost_crossing_same_in_reverse_TCC1-1 nil 3874128234
   ("" (subtype-tcc) nil nil) nil nil
   (leftmost_crossing_same_in_reverse subtype "reverse_polygons.p"
    "(rightward_crossings.has_rightward_crossings?(reverse_polygons.reverse_polygon(reverse_polygons.G)))")))
 (leftmost_crossing_same_in_reverse 0
  (leftmost_crossing_same_in_reverse-1 nil 3874129020
   ("" (skeep)
    (("" (expand "leftmost_intersection_point")
      (("" (expand "leftmost_crossing_xval")
        ((""
          (case "rightward_crossing_set(reverse_polygon(G), p) =
        rightward_crossing_set(G, p)")
          (("1" (assert) nil nil)
           ("2" (hide 2)
            (("2" (apply-extensionality :hide? t)
              (("2" (expand "rightward_crossing_set")
                (("2" (iff)
                  (("2" (ground)
                    (("1" (skeep - t)
                      (("1" (rewrite "edges_of_reverse_polygon")
                        (("1" (inst?)
                          (("1" (ground)
                            (("1" (hide -3)
                              (("1"
                                (name-replace
                                 "e"
                                 "edges_of_polygon(G)
                                                         (prev_index
                                                          (G,
                                                           rev_polygon_index(G, i)))")
                                (("1"
                                  (expand "rightward_edge_crossing?")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "reverse_segment" -2)
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "min")
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (rewrite
                                             "point_on_reverse_segment")
                                            (("2" (inst?) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -2)
                              (("2"
                                (name-replace
                                 "e"
                                 "edges_of_polygon(G)
                                                         (prev_index
                                                          (G,
                                                           rev_polygon_index(G, i)))")
                                (("2"
                                  (rewrite
                                   "edge_crossing_point_same_in_reverse")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "reverse_polygon")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2"
                        (inst +
                         "prev_index(G, rev_polygon_index(G, i))")
                        (("1" (rewrite "edges_of_reverse_polygon")
                          (("1" (rewrite "prev_index_rev_index_next")
                            (("1" (rewrite "rev_rev_polygon_index")
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite
                                   "edge_crossing_point_same_in_reverse")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand
                                       "rightward_edge_crossing?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (split 1)
                                          (("1"
                                            (expand
                                             "reverse_segment"
                                             1)
                                            (("1"
                                              (expand
                                               "edges_of_polygon")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "min")
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (rewrite
                                                 "point_on_reverse_segment")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

