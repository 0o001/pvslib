(topleft_vertex
 (leftmost_vertex_val_TCC1 0
  (leftmost_vertex_val_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (expand "empty?")
      (("" (inst - "p`vertices(0)`x")
        (("1" (expand "member")
          (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   nil shostak
   (leftmost_vertex_val subtype
    "{r: reals.real | EXISTS (i: naturalnumbers.below(topleft_vertex.p`num_vertices)): r = topleft_vertex.p`vertices(i)`x}"
    "non_empty_finite_set[real]"))
  (leftmost_vertex_val_TCC1-1 nil 3874127559 ("" (subtype-tcc) nil nil)
   nil nil
   (leftmost_vertex_val subtype
    "{r: reals.real | EXISTS (i: naturalnumbers.below(topleft_vertex.p`num_vertices)): r = topleft_vertex.p`vertices(i)`x}"
    "non_empty_finite_set[real]")))
 (exists_leftmost_vertex_val 0
  (exists_leftmost_vertex_val-1 nil 3874129020
   ("" (skeep)
    (("" (expand "leftmost_vertex_val")
      ((""
        (typepred "min[real, <=]
            ({r: real |
                EXISTS (i: below(p`num_vertices)): r = p`vertices(i)`x})")
        (("1" (propax) nil nil)
         ("2" (hide 1)
          (("2" (expand "empty?")
            (("2" (inst - "p`vertices(0)`x")
              (("1" (expand "member")
                (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (leftmost_vertex_val_is_min 0
  (leftmost_vertex_val_is_min-1 nil 3874129020
   ("" (skeep*)
    (("" (expand "leftmost_vertex_val")
      ((""
        (typepred "min[real, <=]
          ({r: real |
              EXISTS (i: below(p`num_vertices)): r = p`vertices(i)`x})")
        (("1" (inst - "p`vertices(i)`x")
          (("1" (ground) (("1" (inst?) nil nil)) nil)) nil)
         ("2" (hide 1)
          (("2" (expand "empty?")
            (("2" (inst - "p`vertices(0)`x")
              (("2" (expand "member") (("2" (inst?) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (at_least_one_leftmost 0
  (at_least_one_leftmost-1 nil 3874129020
   ("" (skeep)
    (("" (use "exists_leftmost_vertex_val")
      (("" (skeep)
        (("" (expand "empty?")
          (("" (inst - "p`vertices(i)")
            (("" (expand "member")
              (("" (expand "leftmost_vertices")
                (("" (inst?) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (topleft_vertex_val_TCC1 0
  (topleft_vertex_val_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (use "at_least_one_leftmost")
      (("" (expand "leftmost_vertices")
        (("" (expand "empty?")
          (("" (skeep)
            (("" (expand "member")
              (("" (skeep)
                (("" (inst - "x_1`y")
                  (("" (inst?)
                    (("" (expand "leftmost_vertices")
                      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (topleft_vertex_val subtype
    "{y: reals.real | EXISTS (v: (topleft_vertex.leftmost_vertices(topleft_vertex.p))): y = v`y}"
    "non_empty_finite_set[real]"))
  (topleft_vertex_val_TCC1-1 nil 3874127559 ("" (subtype-tcc) nil nil)
   nil nil
   (topleft_vertex_val subtype
    "{y: reals.real | EXISTS (v: (topleft_vertex.leftmost_vertices(topleft_vertex.p))): y = v`y}"
    "non_empty_finite_set[real]")))
 (topleft_vertex_val_is_max 0
  (topleft_vertex_val_is_max-1 nil 3874129020
   ("" (skeep*)
    (("" (expand "topleft_vertex_val")
      ((""
        (typepred "max[real, <=]
             ({y: real | EXISTS (v: (leftmost_vertices(p))): y = v`y})")
        (("1" (skeep)
          (("1" (replace -1)
            (("1" (inst?)
              (("1" (ground) (("1" (inst + "v") nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (hide +)
          (("2" (use "at_least_one_leftmost")
            (("2" (expand "empty?")
              (("2" (skeep)
                (("2" (expand "member")
                  (("2" (inst - "x`y") (("2" (inst?) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (topleft_vertex_idx_TCC1 0
  (topleft_vertex_idx_TCC1-2 nil 3874129020
   (""
    (inst + "lambda (p: simple_polygon_2d):
        min[below(p`num_vertices), <=]({i: below(p`num_vertices) |
          p`vertices(i)`x = leftmost_vertex_val(p) and
          p`vertices(i)`y = topleft_vertex_val(p)})")
    (("" (skeep)
      (("" (expand "empty?")
        (("" (expand "member")
          (("" (expand "topleft_vertex_val")
            ((""
              (typepred "max[real, <=]
                                 ({y: real |
                                     EXISTS (v: (leftmost_vertices(p))): y = v`y})")
              (("1" (skeep)
                (("1" (typepred "v_1")
                  (("1" (expand "leftmost_vertices" -1)
                    (("1" (skeep)
                      (("1" (inst -5 "i") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -2)
                (("2" (use "at_least_one_leftmost")
                  (("2" (expand "empty?")
                    (("2" (skeep)
                      (("2" (expand "member")
                        (("2" (inst - "x`y") (("2" (inst?) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (topleft_vertex_idx existence ""
    "[p: polygons_2d.simple_polygon_2d -> {i: naturalnumbers.below(p`num_vertices) | booleans.AND(p`vertices(i)`x = topleft_vertex.leftmost_vertex_val(p), p`vertices(i)`y = topleft_vertex.topleft_vertex_val(p))}]"))
  (topleft_vertex_idx_TCC1-1 nil 3874127559
   ("" (existence-tcc) nil nil) nil nil
   (topleft_vertex_idx existence ""
    "[p: polygons_2d.simple_polygon_2d -> {i: naturalnumbers.below(p`num_vertices) | booleans.AND(p`vertices(i)`x = topleft_vertex.leftmost_vertex_val(p), p`vertices(i)`y = topleft_vertex.topleft_vertex_val(p))}]")))
 (leftmost_is_topleft_x 0
  (leftmost_is_topleft_x-1 nil 3874129020
   ("" (skeep)
    (("" (typepred "topleft_vertex_idx(G)") (("" (assert) nil nil))
      nil))
    nil)
   nil shostak))
 (leftmost_has_min_x 0
  (leftmost_has_min_x-1 nil 3874129020
   ("" (skeep*)
    (("" (use "leftmost_is_topleft_x")
      (("" (lemma "leftmost_vertex_val_is_min")
        (("" (inst -1 "G" "index") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak))
 (topmost_is_topleft_y 0
  (topmost_is_topleft_y-1 nil 3874129020
   ("" (skeep)
    (("" (typepred "topleft_vertex_idx(G)") (("" (assert) nil nil))
      nil))
    nil)
   nil shostak))
 (topmost_has_max_y 0
  (topmost_has_max_y-1 nil 3874129020
   ("" (skeep*)
    (("" (replace -1)
      (("" (rewrite "topmost_is_topleft_y" :dir rl)
        (("" (rewrite "leftmost_is_topleft_x" :dir rl)
          (("" (use "topleft_vertex_val_is_max")
            (("" (expand "leftmost_vertices")
              (("" (inst + "index") (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (leftmost_xval_le_segment 0
  (leftmost_xval_le_segment-1 nil 3874129020
   ("" (skeep)
    (("" (expand "point_on_segment?")
      (("" (skeep)
        (("" (expand "*")
          (("" (replace -5)
            (("" (grind)
              (("" (hide -5)
                (("" (lemma "one_parameter_min")
                  (("" (inst - "s`p1`x" "s`p2`x" "xval" "t")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (leftmost_xval_lt_segment 0
  (leftmost_xval_lt_segment-1 nil 3874129020
   ("" (skeep)
    (("" (expand "point_on_segment?")
      (("" (skeep)
        (("" (expand "*")
          (("" (replace -5)
            (("" (grind)
              (("" (hide -5)
                (("" (lemma "one_parameter_min_lt")
                  (("" (inst - "s`p1`x" "s`p2`x" "xval" "t")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (leftmost_xval_lt_segment_eq 0
  (leftmost_xval_lt_segment_eq-1 nil 3874129020
   ("" (skeep)
    (("" (expand "point_on_segment?")
      (("" (skeep)
        (("" (replace -1)
          (("" (case-replace "t=0")
            (("1" (assert) nil nil)
             ("2" (replace -5 3 :hide? t)
              (("2" (grind)
                (("2" (cancel-add 3)
                  (("2" (div-by 3 "t") (("2" (real-props) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (leftmost_vtx_val_le_any_perim_point 0
  (leftmost_vtx_val_le_any_perim_point-1 nil 3874129020
   ("" (skeep)
    (("" (expand "point_on_polygon_perimeter?")
      (("" (skeep - t)
        (("" (expand "edge_of_polygon?")
          (("" (skeep)
            (("" (lemma "leftmost_vertex_val_is_min")
              (("" (inst-cp - "G" "i")
                (("" (inst - "G" "next_index(G, i)")
                  (("" (lemma "leftmost_xval_le_segment")
                    (("" (inst - "e" "p" "leftmost_vertex_val(G)")
                      (("" (expand "edges_of_polygon")
                        (("" (replace -4 :dir rl)
                          (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (topmost_yval_ge_segment 0
  (topmost_yval_ge_segment-1 nil 3874129020
   ("" (skeep)
    (("" (expand "point_on_segment?")
      (("" (skeep)
        (("" (expand "*")
          (("" (replace -5)
            (("" (grind)
              (("" (hide -5)
                (("" (lemma "one_parameter_max")
                  (("" (inst - "s`p1`y" "s`p2`y" "yval" "t")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (topmost_yval_gt_segment 0
  (topmost_yval_gt_segment-1 nil 3874129020
   ("" (skeep)
    (("" (expand "point_on_segment?")
      (("" (skeep)
        (("" (expand "*")
          (("" (replace -5)
            (("" (grind)
              (("" (hide -5)
                (("" (lemma "one_parameter_max_lt")
                  (("" (inst - "s`p1`y" "s`p2`y" "yval" "t")
                    (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (topleft_vertex_bounds_vertices 0
  (topleft_vertex_bounds_vertices-1 nil 3874129020
   ("" (skeep)
    (("" (ground)
      (("1" (skeep + t)
        (("1" (use "leftmost_has_min_x")
          (("1" (use "topmost_has_max_y")
            (("1" (assert)
              (("1" (expand "vertex?")
                (("1" (skeep)
                  (("1" (inst?)
                    (("1" (inst?) (("1" (ground) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "v")
        (("2" (expand "vertex?")
          (("2" (skeep)
            (("2" (lemma "leftmost_has_min_x")
              (("2" (lemma "topmost_has_max_y")
                (("2" (inst - "G" "G`vertices(topleft_vertex_idx(G))")
                  (("2"
                    (inst - "G" "G`vertices(topleft_vertex_idx(G))")
                    (("2" (inst - "i")
                      (("2" (inst - "i")
                        (("2" (inst?)
                          (("1" (apply-extensionality :hide? t)
                            (("1" (ground) nil nil)) nil)
                           ("2" (expand "vertex?")
                            (("2" (inst?) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (topleft_vertex_bounds_all_points 0
  (topleft_vertex_bounds_all_points-1 nil 3874129020
   ("" (skeep)
    (("" (ground)
      (("1" (skeep + t)
        (("1" (expand "point_on_polygon_perimeter?")
          (("1" (skeep - t)
            (("1" (expand "edge_of_polygon?")
              (("1" (skeep)
                (("1" (lemma "topleft_vertex_bounds_vertices")
                  (("1" (inst - "G" "v")
                    (("1" (assert)
                      (("1" (inst-cp - "G`vertices(i)")
                        (("1" (inst - "G`vertices(next_index(G,i))")
                          (("1" (lemma "leftmost_xval_lt_segment")
                            (("1"
                              (inst - "edges_of_polygon(G)(i)" "p"
                               "v`x")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "edges_of_polygon" 1)
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (split -2)
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (hide 1)
                                          (("2"
                                            (case "p = G`vertices(i)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (lemma
                                               "leftmost_xval_lt_segment_eq")
                                              (("2"
                                                (inst - "e" "p" "v`x")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (replace
                                                     -5
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (expand
                                                       "edges_of_polygon"
                                                       -1)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (hide 1)
                                        (("2"
                                          (split -3)
                                          (("1"
                                            (case
                                             "p = G`vertices(next_index(G, i))")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (lemma
                                               "leftmost_xval_lt_segment_eq")
                                              (("2"
                                                (inst
                                                 -
                                                 "reverse_segment(e)"
                                                 "p"
                                                 "v`x")
                                                (("2"
                                                  (rewrite
                                                   "point_on_reverse_segment")
                                                  (("2"
                                                    (replace
                                                     -5
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (expand
                                                       "edges_of_polygon"
                                                       -1)
                                                      (("2"
                                                        (expand
                                                         "reverse_segment")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lemma
                                                 "topmost_yval_ge_segment")
                                                (("2"
                                                  (inst
                                                   -
                                                   "e"
                                                   "p"
                                                   "v`y")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replace
                                                       -6
                                                       -1
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (expand
                                                         "edges_of_polygon"
                                                         -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "point_on_segment?")
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (replace
                                                                 -6
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (expand
                                                                   "edges_of_polygon"
                                                                   -9)
                                                                  (("2"
                                                                    (replace
                                                                     -9
                                                                     2)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "vertex?")
                            (("2" (inst + "next_index(G,i)") nil nil))
                            nil))
                          nil)
                         ("2" (expand "vertex?")
                          (("2" (inst + "i") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (rewrite "topleft_vertex_bounds_vertices")
        (("2" (skeep + t)
          (("2" (inst?)
            (("1" (assert) nil nil)
             ("2" (expand "vertex?")
              (("2" (skeep)
                (("2" (expand "point_on_polygon_perimeter?")
                  (("2" (inst + "edges_of_polygon(G)(i)")
                    (("2" (replace -1 :dir rl) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (min_vertex_yval_TCC1 0
  (min_vertex_yval_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (expand "empty?")
      (("" (inst - "G`vertices(0)`y")
        (("1" (grind) nil nil) ("2" (assert) nil nil)) nil))
      nil))
    nil)
   nil shostak
   (min_vertex_yval subtype
    "{r: reals.real | EXISTS (i: naturalnumbers.below(topleft_vertex.G`num_vertices)): r = topleft_vertex.G`vertices(i)`y}"
    "non_empty_finite_set[real]"))
  (min_vertex_yval_TCC1-1 nil 3874127559 ("" (subtype-tcc) nil nil) nil
   nil
   (min_vertex_yval subtype
    "{r: reals.real | EXISTS (i: naturalnumbers.below(topleft_vertex.G`num_vertices)): r = topleft_vertex.G`vertices(i)`y}"
    "non_empty_finite_set[real]")))
 (not_all_vertices_collinear_horiz 0
  (not_all_vertices_collinear_horiz-1 nil 3874129020
   ("" (skeep)
    ((""
      (name-replace "xmin"
       "min[real,<=]({x: real | exists (j: below(G`num_vertices)): G`vertices(j)`x = x})")
      (("1" (typepred "xmin")
        (("1" (skeep)
          (("1"
            (case "G`vertices(prev_index(G, j))`y = G`vertices(j)`y &
                           G`vertices(next_index(G, j))`y = G`vertices(j)`y")
            (("1" (flatten)
              (("1" (inst-cp - "G`vertices(prev_index(G, j))`x")
                (("1" (inst - "G`vertices(next_index(G, j))`x")
                  (("1" (split -4)
                    (("1" (split -5)
                      (("1" (lemma "adjacent_edges_do_not_fold_back")
                        (("1" (inst - "G" "j")
                          (("1" (flatten)
                            (("1" (apply-extensionality :hide? t)
                              (("1"
                                (apply-extensionality 2 :hide? t)
                                (("1"
                                  (expand "dir_parallel?")
                                  (("1"
                                    (inst
                                     +
                                     "(G`vertices(prev_index(G, j)) - G`vertices(j))`x /
                   (G`vertices(next_index(G, j)) - G`vertices(j))`x")
                                    (("1"
                                      (cross-mult 3)
                                      (("1"
                                        (expand "*" 3)
                                        (("1"
                                          (expand "-" 3)
                                          (("1" (real-props) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (splash 1 :reverse? t)
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (cross-mult 1)
                                        (("2"
                                          (expand "-" 1)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "-" 1)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst + "prev_index(G, j)") nil nil))
                      nil)
                     ("2" (inst + "next_index(G, j)") nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "G`vertices(j)`y = yval")
              (("1" (inst-cp + "prev_index(G, j)")
                (("1" (inst + "next_index(G, j)")
                  (("1" (ground) nil nil)) nil))
                nil)
               ("2" (inst + "j") (("2" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "empty?")
        (("2" (inst - "G`vertices(0)`x")
          (("1" (expand "member")
            (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (falling_edge_exists 0
  (falling_edge_exists-1 nil 3874129020
   ("" (skeep)
    ((""
      (case "forall (n, i, j: below(G`num_vertices)):
                                        n = rem(G`num_vertices)(j - i) &
                      		  G`vertices(j)`y < G`vertices(i)`y =>
                                        exists (k: nat): k < n &
                                          segment_falling?(edges_of_polygon(G)(rem(G`num_vertices)(i + k)))")
      (("1" (lemma "not_all_vertices_collinear_horiz")
        (("1" (inst - "G" "max_vertex_yval(G)")
          (("1" (skeep)
            (("1" (name-replace "m" "max_vertex_yval(G)" :hide? nil)
              (("1" (expand "max_vertex_yval")
                (("1"
                  (typepred "max[real, <=]
                              ({r: real |
                                  EXISTS (i: below(G`num_vertices)): r = G`vertices(i)`y})")
                  (("1" (skeep)
                    (("1" (replace -3)
                      (("1"
                        (inst -4 "rem(G`num_vertices)(i - i_1)" "i_1"
                         "i")
                        (("1" (inst - "G`vertices(i)`y")
                          (("1" (split -2)
                            (("1" (assert)
                              (("1"
                                (skeep)
                                (("1" (inst?) nil nil))
                                nil))
                              nil)
                             ("2" (inst + "i") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "empty?")
                    (("2" (inst - "G`vertices(i)`y")
                      (("2" (expand "member")
                        (("2" (inst + "i") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (generalize "i" "i")
          (("2" (generalize "n" "n")
            (("2" (induct "n")
              (("1" (assert)
                (("1" (skeep)
                  (("1" (case-replace "j = i!1")
                    (("1" (assert) nil nil)
                     ("2" (typepred "rem(G`num_vertices)(j - i!1)")
                      (("2" (skeep)
                        (("2" (case-replace "q = 0")
                          (("1" (assert) nil nil)
                           ("2" (case "abs(j - i!1) < G`num_vertices")
                            (("1" (case "q > 0")
                              (("1"
                                (case
                                 "G`num_vertices * q >= G`num_vertices")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (mult-cases 1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (case
                                 "G`num_vertices * q <= -G`num_vertices")
                                (("1" (assert) nil nil)
                                 ("2" (mult-cases 1) nil nil))
                                nil))
                              nil)
                             ("2" (expand "abs")
                              (("2"
                                (lift-if)
                                (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep*)
                (("2" (inst - "rem(G`num_vertices)(i!1 + 1)")
                  (("2"
                    (case "G`vertices(i!1)`y > G`vertices(rem(G`num_vertices)(i!1 + 1))`y")
                    (("1" (hide -3)
                      (("1" (rewrite "rem_plus_1_eq_next_index")
                        (("1" (inst 2 "i!1")
                          (("1" (expand "segment_falling?")
                            (("1" (expand "edges_of_polygon")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (split -2)
                        (("1" (skeep)
                          (("1" (rewrite "rem_sum2")
                            (("1" (inst + "1 + k")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil)
                         ("3" (rewrite "rem_diff2")
                          (("3" (lemma "rem_add_one")
                            (("3"
                              (inst - "G`num_vertices" "-1 - i!1 + j")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (rising_edge_exists 0
  (rising_edge_exists-1 nil 3874129020
   ("" (skeep)
    ((""
      (case "forall (n, i, j: below(G`num_vertices)):
                                               n = rem(G`num_vertices)(j - i) &
                             		  G`vertices(j)`y > G`vertices(i)`y =>
                                               exists (k: nat): k < n &
                                                 segment_rising?(edges_of_polygon(G)(rem(G`num_vertices)(i + k)))")
      (("1" (lemma "not_all_vertices_collinear_horiz")
        (("1" (inst - "G" "min_vertex_yval(G)")
          (("1" (skeep)
            (("1" (name-replace "m" "min_vertex_yval(G)" :hide? nil)
              (("1" (expand "min_vertex_yval")
                (("1"
                  (typepred "min[real, <=]
                                  ({r: real |
                                      EXISTS (i: below(G`num_vertices)): r = G`vertices(i)`y})")
                  (("1" (skeep)
                    (("1" (replace -3)
                      (("1"
                        (inst -4 "rem(G`num_vertices)(i - i_1)" "i_1"
                         "i")
                        (("1" (inst - "G`vertices(i)`y")
                          (("1" (split -2)
                            (("1" (assert)
                              (("1"
                                (skeep)
                                (("1" (inst?) nil nil))
                                nil))
                              nil)
                             ("2" (inst + "i") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "empty?")
                    (("2" (inst - "G`vertices(i)`y")
                      (("2" (expand "member")
                        (("2" (inst + "i") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (generalize "i" "i")
          (("2" (generalize "n" "n")
            (("2" (induct "n")
              (("1" (assert)
                (("1" (skeep)
                  (("1" (case-replace "j = i!1")
                    (("1" (assert) nil nil)
                     ("2" (typepred "rem(G`num_vertices)(j - i!1)")
                      (("2" (skeep)
                        (("2" (case-replace "q = 0")
                          (("1" (assert) nil nil)
                           ("2" (case "abs(j - i!1) < G`num_vertices")
                            (("1" (case "q > 0")
                              (("1"
                                (case
                                 "G`num_vertices * q >= G`num_vertices")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (mult-cases 1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (case
                                 "G`num_vertices * q <= -G`num_vertices")
                                (("1" (assert) nil nil)
                                 ("2" (mult-cases 1) nil nil))
                                nil))
                              nil)
                             ("2" (expand "abs")
                              (("2"
                                (lift-if)
                                (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep*)
                (("2" (inst - "rem(G`num_vertices)(i!1 + 1)")
                  (("2"
                    (case "G`vertices(i!1)`y < G`vertices(rem(G`num_vertices)(i!1 + 1))`y")
                    (("1" (hide -3)
                      (("1" (rewrite "rem_plus_1_eq_next_index")
                        (("1" (inst 2 "i!1")
                          (("1" (expand "segment_rising?")
                            (("1" (expand "edges_of_polygon")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (split -2)
                        (("1" (skeep)
                          (("1" (rewrite "rem_sum2")
                            (("1" (inst + "1 + k")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (propax) nil nil)
                         ("3" (rewrite "rem_diff2")
                          (("3" (lemma "rem_add_one")
                            (("3"
                              (inst - "G`num_vertices" "-1 - i!1 + j")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

