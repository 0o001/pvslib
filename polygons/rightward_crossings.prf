(rightward_crossings
 (edge_crossing_point_TCC1 0
  (edge_crossing_point_TCC1-2 nil 3874129021
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (edge_crossing_point subtype "rightward_crossings.dy" "nznum"))
  (edge_crossing_point_TCC1-1 nil 3874128233 ("" (subtype-tcc) nil nil)
   nil nil
   (edge_crossing_point subtype "rightward_crossings.dy" "nznum")))
 (rightward_crossing_set_nonempty 0
  (rightward_crossing_set_nonempty-1 nil 3874129021
   ("" (skeep)
    (("" (expand "rightward_crossing_set")
      (("" (expand "empty?")
        (("" (expand "member")
          (("" (typepred "p")
            (("" (expand "has_rightward_crossings?")
              (("" (flatten)
                (("" (skeep)
                  ((""
                    (inst -
                     "edge_crossing_point(edges_of_polygon(G)(i), p)`x")
                    (("" (inst?) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (leftmost_crossing_xval_TCC1 0
  (leftmost_crossing_xval_TCC1-2 nil 3874129021
   ("" (skeep) (("" (use "rightward_crossing_set_nonempty") nil nil))
    nil)
   nil shostak
   (leftmost_crossing_xval subtype
    "rightward_crossings.rightward_crossing_set(rightward_crossings.G, rightward_crossings.p)"
    "non_empty_finite_set[real]"))
  (leftmost_crossing_xval_TCC1-1 nil 3874128233
   ("" (subtype-tcc) nil nil) nil nil
   (leftmost_crossing_xval subtype
    "rightward_crossings.rightward_crossing_set(rightward_crossings.G, rightward_crossings.p)"
    "non_empty_finite_set[real]")))
 (edge_crossing_point_on_perim 0
  (edge_crossing_point_on_perim-1 nil 3874129021
   ("" (skeep)
    (("" (expand "point_on_polygon_perimeter?")
      (("" (expand "rightward_edge_crossing?")
        (("" (flatten)
          (("" (skeep)
            (("" (expand "edge_crossing_point" 1)
              (("" (inst + "e")
                (("" (lift-if)
                  (("" (split 1)
                    (("1" (flatten)
                      (("1" (rewrite "point_on_segment_has_offset" -)
                        (("1" (skeep)
                          (("1" (use "comps_eq")
                            (("1" (replace -1 :hide? t)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "+" -)
                                  (("1"
                                    (expand "*" -)
                                    (("1"
                                      (expand "-" -)
                                      (("1"
                                        (replace -3 +)
                                        (("1"
                                          (real-props)
                                          (("1"
                                            (rewrite
                                             "point_on_segment_has_offset")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (apply-extensionality
                                                   :hide?
                                                   t)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (grind)
                                                      (("1"
                                                        (cross-mult 1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (leftmost_crossing_on_perim 0
  (leftmost_crossing_on_perim-1 nil 3874129021
   ("" (skeep)
    (("" (expand "leftmost_intersection_point")
      (("" (expand "leftmost_crossing_xval")
        (("" (typepred "min[real, <=](rightward_crossing_set(G, p))")
          (("" (hide -2)
            (("" (expand "rightward_crossing_set")
              (("" (skeep)
                (("" (replace -2 :hide? t)
                  (("" (use "edge_crossing_point_on_perim")
                    (("" (assert)
                      ((""
                        (case-replace
                         "p`y = edge_crossing_point(edges_of_polygon
                                                                         (G)(i_1), p)`y")
                        (("1" (equate (! 1 1) (! -2 1))
                          (("1" (apply-extensionality :hide? t) nil
                            nil))
                          nil)
                         ("2" (hide -1 2)
                          (("2" (expand "edge_crossing_point")
                            (("2" (lift-if)
                              (("2"
                                (split 1 :depth 1)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand
                                         "rightward_edge_crossing?")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (rewrite
                                               "point_on_segment_has_offset")
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (use "comps_eq")
                                                  (("2"
                                                    (replace
                                                     -1
                                                     :hide?
                                                     t)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (hide -2)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (edge_crossing_point_xval_bound 0
  (edge_crossing_point_xval_bound-1 nil 3874129021
   ("" (skeep)
    (("" (expand "rightward_edge_crossing?")
      (("" (flatten)
        (("" (skeep)
          (("" (rewrite "point_on_segment_has_offset")
            (("" (skeep)
              (("" (use "comps_eq")
                (("" (replace -1 :hide? t)
                  (("" (flatten)
                    (("" (expand "+" -)
                      (("" (expand "*" -)
                        (("" (expand "-" -)
                          (("" (move-terms -2 l 2)
                            (("" (expand "edge_crossing_point" +)
                              ((""
                                (lift-if)
                                ((""
                                  (split 1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (real-props)
                                          (("1"
                                            (cancel-add 2)
                                            (("1"
                                              (cross-mult 2)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (replace -3 1)
                                                  (("1"
                                                    (real-props)
                                                    (("1"
                                                      (cancel-add 1)
                                                      (("1"
                                                        (move-terms
                                                         1
                                                         l
                                                         3)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (factor
                                                             1
                                                             l)
                                                            (("1"
                                                              (mult-cases
                                                               1)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -2 2)
                                                  (("2"
                                                    (real-props)
                                                    (("2"
                                                      (cancel-add 2)
                                                      (("2"
                                                        (move-terms
                                                         2
                                                         r
                                                         3)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (factor
                                                             2
                                                             r)
                                                            (("2"
                                                              (mult-cases
                                                               2)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (leftmost_crossing_xval_bound 0
  (leftmost_crossing_xval_bound-1 nil 3874129021
   ("" (skeep)
    (("" (expand "leftmost_crossing_xval")
      (("" (expand "rightward_crossing_set")
        ((""
          (typepred "min[real, <=]
                 ({x: real |
                     EXISTS (i: below(G`num_vertices)):
                       rightward_edge_crossing?(edges_of_polygon(G)(i))(p) AND
                        x = edge_crossing_point(edges_of_polygon(G)(i), p)`x})")
          (("1" (skeep)
            (("1" (replace -2)
              (("1" (hide -2 -3)
                (("1" (use "edge_crossing_point_xval_bound")
                  (("1" (ground) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (hide +)
            (("2" (use "rightward_crossing_set_nonempty")
              (("2" (expand "rightward_crossing_set")
                (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (leftmost_crossing_xval_is_min 0
  (leftmost_crossing_xval_is_min-1 nil 3874129021
   ("" (skeep)
    (("" (expand "leftmost_crossing_xval")
      (("" (expand "rightward_crossing_set")
        ((""
          (typepred "min[real, <=]
              ({x: real |
                  EXISTS (i: below(G`num_vertices)):
                    rightward_edge_crossing?(edges_of_polygon(G)(i))(p) AND
                     x = edge_crossing_point(edges_of_polygon(G)(i), p)`x})")
          (("1" (skeep)
            (("1" (replace -2 :hide? t)
              (("1" (inst - "edge_crossing_point(e, p)`x")
                (("1" (ground)
                  (("1" (typepred "e")
                    (("1" (expand "edge_of_polygon?")
                      (("1" (skeep - t)
                        (("1" (inst + "i") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide +)
            (("2" (use "rightward_crossing_set_nonempty")
              (("2" (expand "rightward_crossing_set")
                (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (leftmost_has_horiz_dist_from_p 0
  (leftmost_has_horiz_dist_from_p-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin)
      (("" (expand "leftmost_intersection_point")
        (("" (use "leftmost_crossing_xval_bound")
          (("" (replace -2)
            (("" (inst + "leftmost_crossing_xval(G, p) - p`x")
              (("1" (name-replace "lc" "leftmost_crossing_xval(G, p)")
                (("1" (grind) nil nil)) nil)
               ("2" (splash 1 t)
                (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (has_crossing_off_right_side_falling 0
  (has_crossing_off_right_side_falling-1 nil 3874129021
   ("" (skeep*)
    (("" (expand "off_right_side?")
      (("" (expand "rightward_edge_crossing?")
        (("" (flatten)
          (("" (skeep)
            (("" (rewrite "point_on_reverse_segment" :dir rl)
              (("" (expand "reverse_segment")
                (("" (rewrite "point_on_segment_has_offset")
                  (("" (skeep)
                    (("" (move-terms -3 l 2)
                      (("" (replace -3 1)
                        (("" (assert)
                          (("" (rewrite "cross_distrib_sub_2")
                            (("" (move-terms 1 l 2)
                              ((""
                                (assert)
                                ((""
                                  (hide-all-but (-1 1))
                                  ((""
                                    (grind)
                                    ((""
                                      (move-terms 1 r 2)
                                      (("" (cancel-by 1 "d") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (no_point_x_left_of_leftmost_crossing_TCC1 0
  (no_point_x_left_of_leftmost_crossing_TCC1-2 nil 3874129021
   ("" (skeep*)
    (("" (use "leftmost_crossing_on_perim")
      (("" (typepred "p")
        (("" (expand "has_rightward_crossings?")
          (("" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak
   (no_point_x_left_of_leftmost_crossing subtype
    "rightward_crossings.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= rightward_crossings.p}"))
  (no_point_x_left_of_leftmost_crossing_TCC1-1 nil 3874128233
   ("" (subtype-tcc) nil nil) nil nil
   (no_point_x_left_of_leftmost_crossing subtype
    "rightward_crossings.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= rightward_crossings.p}")))
 (no_point_x_left_of_leftmost_crossing 0
  (no_point_x_left_of_leftmost_crossing-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin)
      (("" (skeep)
        (("" (use "leftmost_crossing_on_perim")
          (("" (typepred "p")
            (("" (expand "has_rightward_crossings?")
              (("" (flatten)
                (("" (use "leftmost_crossing_xval_bound")
                  (("" (use "leftmost_crossing_xval_is_min")
                    (("" (prop)
                      (("" (expand "leftmost_intersection_point" -8)
                        ((""
                          (case "edge_crossing_point(e, p)`x <= r`x")
                          (("1" (assert) nil nil)
                           ("2"
                            (rewrite* "point_on_segment_has_offset")
                            (("2" (hide -3)
                              (("2"
                                (skeep*)
                                (("2"
                                  (expand "edge_crossing_point" 1)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (replace -5 1)
                                      (("2"
                                        (ground)
                                        (("1"
                                          (expand "+" +)
                                          (("1"
                                            (expand "*" +)
                                            (("1"
                                              (expand "-" +)
                                              (("1"
                                                (cancel-add 2)
                                                (("1"
                                                  (cross-mult 2)
                                                  (("1"
                                                    (case "p`y = r`y")
                                                    (("1"
                                                      (replace -6 -1)
                                                      (("1"
                                                        (replace -1 +)
                                                        (("1"
                                                          (hide-all-but
                                                           (1 2))
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 3)
                                                      (("2"
                                                        (replace -7 1)
                                                        (("2"
                                                          (case
                                                           "q`y = p`y")
                                                          (("1"
                                                            (hide-all-but
                                                             (-1 1))
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-1 1))
                                          (("2"
                                            (grind)
                                            (("2"
                                              (cancel-add 1)
                                              (("2"
                                                (factor 1 r)
                                                (("2"
                                                  (mult-cases 1)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide-all-but (1 2))
                                          (("3"
                                            (grind)
                                            (("3"
                                              (move-terms 2 r 2)
                                              (("3"
                                                (factor 2 *)
                                                (("3"
                                                  (cancel-by 2 "1-d")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (no_edge_point_left_of_leftmost_crossing 0
  (no_edge_point_left_of_leftmost_crossing-1 nil 3874129021
   ("" (skeep)
    (("" (assert)
      (("" (skeep)
        (("" (use "no_point_x_left_of_leftmost_crossing")
          (("" (assert)
            (("" (inst?)
              (("" (assert)
                (("" (rewrite "point_on_segment_has_offset" -4)
                  (("1" (skeep)
                    (("1" (replace -4)
                      (("1" (case-replace "d = 1")
                        (("1" (hide-all-but 1) (("1" (grind) nil nil))
                          nil)
                         ("2" (expand "+" -1)
                          (("2" (expand "*" -1)
                            (("2" (expand "-" -1)
                              (("2"
                                (expand
                                 "leftmost_intersection_point"
                                 (-1 2))
                                (("2"
                                  (distrib 2)
                                  (("2"
                                    (apply-extensionality 2 :hide? t)
                                    (("1"
                                      (move-terms -1 r 2)
                                      (("1"
                                        (factor -1 *)
                                        (("1"
                                          (cancel-by -1 "1 - d")
                                          (("1"
                                            (use
                                             "leftmost_crossing_xval_bound")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "p")
                    (("2" (expand "has_rightward_crossings?")
                      (("2" (use "leftmost_crossing_on_perim")
                        (("2" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (left_of_leftmost_crossing_not_on_perim_TCC1 0
  (left_of_leftmost_crossing_not_on_perim_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (use "leftmost_crossing_on_perim")
      (("" (typepred "p")
        (("" (expand "has_rightward_crossings?")
          (("" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak
   (left_of_leftmost_crossing_not_on_perim subtype
    "rightward_crossings.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= rightward_crossings.p}"))
  (left_of_leftmost_crossing_not_on_perim_TCC1-1 nil 3874128233
   ("" (subtype-tcc) nil nil) nil nil
   (left_of_leftmost_crossing_not_on_perim subtype
    "rightward_crossings.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= rightward_crossings.p}")))
 (left_of_leftmost_crossing_not_on_perim 0
  (left_of_leftmost_crossing_not_on_perim-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin)
      (("" (skeep)
        (("" (expand "point_on_polygon_perimeter?")
          (("" (skeep - t)
            (("" (use "no_point_x_left_of_leftmost_crossing")
              (("" (assert)
                (("" (replace -5 :dir rl)
                  (("" (inst?)
                    (("" (assert)
                      (("" (case "p`x < q`x")
                        (("1" (rewrite "point_on_segment_has_offset")
                          (("1" (skeep)
                            (("1" (case-replace "d = 1")
                              (("1"
                                (hide-all-but (-5 1))
                                (("1"
                                  (assert)
                                  (("1" (cancel-add -1) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (ground)
                                (("1"
                                  (replace -4)
                                  (("1"
                                    (hide -3 -6 -7)
                                    (("1"
                                      (grind)
                                      (("1"
                                        (move-terms -1 r 2)
                                        (("1"
                                          (equate
                                           "(q)`x - q`x * d"
                                           "q`x - q`x * d"
                                           (assert))
                                          (("1"
                                            (factor -1 *)
                                            (("1"
                                              (cancel-by -1 "1 - d")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "p")
                                  (("2"
                                    (expand "has_rightward_crossings?")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (case "p`x < r`x")
                                          (("1"
                                            (case "p`y = q`y")
                                            (("1"
                                              (case "p`y = r`y")
                                              (("1"
                                                (expand
                                                 "rightward_edge_crossing?")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (expand
                                                     "point_on_polygon_perimeter?")
                                                    (("1"
                                                      (inst + "e")
                                                      (("1"
                                                        (expand "min")
                                                        (("1"
                                                          (case
                                                           "max(e`p1`x, e`p2`x) < r`x")
                                                          (("1"
                                                            (hide-all-but
                                                             (-1 -10))
                                                            (("1"
                                                              (rewrite
                                                               "point_on_segment_has_offset")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (replace
                                                                   -2)
                                                                  (("1"
                                                                    (case-replace
                                                                     "d!1 = 1")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      (("1"
                                                                        (move-terms
                                                                         -2
                                                                         r
                                                                         2)
                                                                        (("1"
                                                                          (factor
                                                                           -2
                                                                           *)
                                                                          (("1"
                                                                            (cancel-by
                                                                             -2
                                                                             "1 - d!1")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (cancel-add
                                                                         -1)
                                                                        (("2"
                                                                          (move-terms
                                                                           -1
                                                                           r
                                                                           2)
                                                                          (("2"
                                                                            (cancel-by
                                                                             -1
                                                                             "d!1")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide -10)
                                                            (("2"
                                                              (lemma
                                                               "point_on_reverse_segment")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "r"
                                                                 "e")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "point_on_reverse_segment")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "p"
                                                                       "e")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (flip-ineq
                                                                           2)
                                                                          (("2"
                                                                            (expand
                                                                             "max")
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (case
                                                                                 "e`p1`x = e`p2`x")
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (ground)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "point_on_segment_has_norm_offset"
                                                                                     5)
                                                                                    (("1"
                                                                                      (inst
                                                                                       +
                                                                                       "p`x - e`p1`x")
                                                                                      (("1"
                                                                                        (ground)
                                                                                        (("1"
                                                                                          (apply-extensionality
                                                                                           :hide?
                                                                                           t)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "+"
                                                                                             1)
                                                                                            (("1"
                                                                                              (move-terms
                                                                                               1
                                                                                               r
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "*"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (factor
                                                                                                   1
                                                                                                   r)
                                                                                                  (("1"
                                                                                                    (equate
                                                                                                     "^(e`p2 - e`p1)`x"
                                                                                                     "1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "^"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "*"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (cross-mult
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (rewrite
                                                                                                             "norm_diff_horiz")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "abs")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "-"
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "length")
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "norm_diff_horiz")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "abs")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (rewrite
                                                                                     "point_on_segment_has_norm_offset"
                                                                                     4)
                                                                                    (("2"
                                                                                      (inst
                                                                                       +
                                                                                       "p`x - e`p2`x")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "reverse_segment")
                                                                                        (("2"
                                                                                          (ground)
                                                                                          (("1"
                                                                                            (apply-extensionality
                                                                                             :hide?
                                                                                             t)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "+"
                                                                                               1)
                                                                                              (("1"
                                                                                                (move-terms
                                                                                                 1
                                                                                                 r
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "*"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (factor
                                                                                                     1
                                                                                                     r)
                                                                                                    (("1"
                                                                                                      (equate
                                                                                                       "^(e`p1 - e`p2)`x"
                                                                                                       "1")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "^"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "*"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (cross-mult
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (rewrite
                                                                                                               "norm_diff_horiz")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "abs")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "-"
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "length")
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "norm_diff_horiz")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "abs")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst
                                                     +
                                                     "d * (q - p)`x")
                                                    (("1"
                                                      (equate
                                                       "(# x := d * (q - p)`x, y := 0 #)"
                                                       "d * (q - p)")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (grind-with-ext)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (splash 1 t)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replace -5)
                                                (("2"
                                                  (hide-all-but (-1 1))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand
                                               "leftmost_intersection_point")
                                              (("2"
                                                (replace -7 1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (replace -3 1)
                                            (("2"
                                              (case-replace "d = 0")
                                              (("1"
                                                (expand
                                                 "point_on_polygon_perimeter?")
                                                (("1"
                                                  (inst + "e")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (-1 1 2))
                                                (("2"
                                                  (grind)
                                                  (("2"
                                                    (cancel-add 2)
                                                    (("2"
                                                      (move-terms
                                                       2
                                                       r
                                                       2)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (div-by
                                                           2
                                                           "d")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (use "leftmost_crossing_xval_bound")
                          (("2" (expand "leftmost_intersection_point")
                            (("2" (replace -6 1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (left_of_leftmost_crossing_not_on_perim_2 0
  (left_of_leftmost_crossing_not_on_perim_2-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin)
      (("" (skeep)
        (("" (use "left_of_leftmost_crossing_not_on_perim")
          (("" (assert)
            (("" (replace -6 :dir rl)
              (("" (inst?)
                (("" (ground)
                  (("" (rewrite "point_on_segment_has_norm_offset")
                    (("" (inst + "r`x - p`x")
                      (("" (case "p`y = q`y")
                        (("1" (ground)
                          (("1" (apply-extensionality :hide? t)
                            (("1" (expand "^")
                              (("1"
                                (hide -5 -6)
                                (("1"
                                  (expand + "+")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (move-terms 1 r 2)
                                      (("1"
                                        (rewrite "norm_diff_horiz")
                                        (("1"
                                          (expand "abs")
                                          (("1"
                                            (name-replace
                                             "n"
                                             "(1 / ((q)`x - p`x))")
                                            (("1"
                                              (expand "*" 1)
                                              (("1"
                                                (factor 1 r)
                                                (("1"
                                                  (cancel-by
                                                   1
                                                   "r`x - p`x")
                                                  (("1"
                                                    (expand "n")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -5 -6) (("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (expand "length")
                            (("2" (rewrite "norm_diff_horiz")
                              (("2"
                                (expand "abs")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "leftmost_intersection_point")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (leftmost_crossing_on_polygon_edge 0
  (leftmost_crossing_on_polygon_edge-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin)
      (("" (use "leftmost_crossing_on_perim")
        (("" (replace -2 :dir rl)
          (("" (expand "point_on_polygon_perimeter?")
            (("" (skeep - t)
              (("" (expand "edge_of_polygon?")
                (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (leftmost_is_horiz_edge_endpoint 0
  (leftmost_is_horiz_edge_endpoint-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin*)
      (("" (expand "segment_endpoint?")
        (("" (flatten)
          (("" (typepred "p")
            (("" (expand "has_rightward_crossings?")
              (("" (flatten)
                (("" (hide -1)
                  (("" (use "leftmost_crossing_on_perim")
                    (("" (replace -5 :dir rl)
                      (("" (case "p`y = q`y & p`y = e`p1`y")
                        (("1" (flatten)
                          (("1"
                            (case "point_on_polygon_perimeter?(G)(e`p1)")
                            (("1"
                              (case "point_on_polygon_perimeter?(G)(e`p2)")
                              (("1"
                                (case "p`x < q`x")
                                (("1"
                                  (case "e`p1`x < e`p2`x")
                                  (("1"
                                    (case "p`x <= e`p1`x")
                                    (("1"
                                      (use
                                       "endpoint_on_straddling_horiz_segment")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (use
                                           "left_of_leftmost_crossing_not_on_perim")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst - "e`p1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -13 :dir rl)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma
                                       "horiz_segment_straddles_point")
                                      (("2"
                                        (inst - "p" "e" "q`x - p`x")
                                        (("1"
                                          (ground)
                                          (("1"
                                            (expand
                                             "point_on_polygon_perimeter?")
                                            (("1"
                                              (inst? +)
                                              (("1"
                                                (expand
                                                 "edge_of_polygon?")
                                                (("1"
                                                  (inst? +)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (equate
                                             "p + (# x := q`x - p`x, y := 0 #)"
                                             "q")
                                            (("2"
                                              (apply-extensionality
                                               :hide?
                                               t)
                                              (("1"
                                                (hide-all-but 1)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (-5 1))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (splash 1 t)
                                          (("1" (assert) nil nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case "p`x <= e`p2`x")
                                    (("1"
                                      (lemma
                                       "endpoint_on_straddling_horiz_segment")
                                      (("1"
                                        (inst
                                         -
                                         "p"
                                         "q"
                                         "reverse_segment(e)")
                                        (("1"
                                          (expand "reverse_segment")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (use
                                                 "left_of_leftmost_crossing_not_on_perim")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst - "e`p2")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace
                                                         -12
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "e`p1 = e`p2")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (apply-extensionality
                                                   :hide?
                                                   t)
                                                  nil
                                                  nil))
                                                nil)
                                               ("3"
                                                (rewrite
                                                 "point_on_reverse_segment"
                                                 1
                                                 :dir
                                                 rl)
                                                (("3"
                                                  (expand
                                                   "reverse_segment")
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (equate
                                                       "(# p1 := e`p1, p2 := e`p2 #)"
                                                       "e")
                                                      (("3"
                                                        (apply-extensionality
                                                         :hide?
                                                         t)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma
                                       "horiz_segment_straddles_point")
                                      (("2"
                                        (inst - "p" "e" "q`x - p`x")
                                        (("1"
                                          (ground)
                                          (("1"
                                            (expand
                                             "point_on_polygon_perimeter?")
                                            (("1"
                                              (inst? +)
                                              (("1"
                                                (expand
                                                 "edge_of_polygon?")
                                                (("1"
                                                  (inst? +)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (equate
                                             "p + (# x := q`x - p`x, y := 0 #)"
                                             "q")
                                            (("2"
                                              (apply-extensionality
                                               :hide?
                                               t)
                                              (("1"
                                                (hide-all-but 1)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (-4 1))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (splash 1 t)
                                          (("1" (assert) nil nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (use "leftmost_crossing_xval_bound")
                                  (("2"
                                    (expand
                                     "leftmost_intersection_point")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -7)
                                (("2"
                                  (expand
                                   "point_on_polygon_perimeter?"
                                   1)
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (expand "point_on_polygon_perimeter?" 1)
                              (("2"
                                (inst?)
                                (("1"
                                  (replace -6)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (expand "edge_of_polygon?")
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "leftmost_intersection_point")
                          (("2" (assert)
                            (("2"
                              (rewrite "point_on_segment_has_offset")
                              (("2"
                                (skeep)
                                (("2"
                                  (rewrite "comps_eq")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (replace -7 -3)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide-all-but (-3 -5 1))
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (left_of_leftmost_not_on_perim_edge 0
  (left_of_leftmost_not_on_perim_edge-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin)
      (("" (skeep)
        (("" (case "q`y = p`y")
          (("1" (use "leftmost_crossing_on_perim")
            (("1" (replace -7 :dir rl)
              (("1" (typepred "p")
                (("1" (expand "has_rightward_crossings?")
                  (("1" (flatten)
                    (("1" (hide -1)
                      (("1" (use "leftmost_crossing_xval_bound")
                        (("1"
                          (case "leftmost_crossing_xval(G, p) = q`x")
                          (("1"
                            (use "left_of_leftmost_crossing_not_on_perim")
                            (("1" (assert)
                              (("1"
                                (replace -10 :dir rl)
                                (("1"
                                  (case "p`x <= e`p1`x")
                                  (("1"
                                    (inst - "e`p1")
                                    (("1"
                                      (split -2)
                                      (("1"
                                        (expand
                                         "point_on_polygon_perimeter?")
                                        (("1"
                                          (ground)
                                          (("1"
                                            (inst? +)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (inst
                                             +
                                             "reverse_segment(e)")
                                            (("2"
                                              (rewrite
                                               "point_on_reverse_segment")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite
                                         "point_on_segment_has_norm_offset")
                                        (("2"
                                          (inst + "e`p1`x - p`x")
                                          (("1"
                                            (expand "length")
                                            (("1"
                                              (expand "^")
                                              (("1"
                                                (rewrite
                                                 "norm_diff_horiz")
                                                (("1"
                                                  (expand "abs")
                                                  (("1"
                                                    (move-terms 1 r 1)
                                                    (("1"
                                                      (rewrite
                                                       "scal_assoc")
                                                      (("1"
                                                        (apply-extensionality
                                                         :hide?
                                                         t)
                                                        (("1"
                                                          (hide-all-but
                                                           (-1
                                                            -6
                                                            -8
                                                            1))
                                                          (("1"
                                                            (mult-by
                                                             1
                                                             "q`x - p`x")
                                                            (("1"
                                                              (expand*
                                                               "-"
                                                               "*")
                                                              (("1"
                                                                (real-props)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-5
                                                            -6
                                                            -7
                                                            1))
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("3" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand
                                     "point_on_polygon_perimeter?")
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (ground)
                                        (("1"
                                          (inst + "e")
                                          (("1"
                                            (rewrite
                                             "point_on_segment_has_norm_offset")
                                            (("1"
                                              (inst + "p`x - e`p1`x")
                                              (("1"
                                                (expand "length")
                                                (("1"
                                                  (expand "^")
                                                  (("1"
                                                    (rewrite
                                                     "norm_diff_horiz")
                                                    (("1"
                                                      (expand "abs")
                                                      (("1"
                                                        (replace -2)
                                                        (("1"
                                                          (apply-extensionality
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (hide-all-but
                                                             (-3
                                                              -6
                                                              -8
                                                              +))
                                                            (("1"
                                                              (expand
                                                               "+")
                                                              (("1"
                                                                (move-terms
                                                                 1
                                                                 r
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "*")
                                                                  (("1"
                                                                    (factor
                                                                     1
                                                                     r)
                                                                    (("1"
                                                                      (cancel-by
                                                                       1
                                                                       "p`x - e`p1`x")
                                                                      (("1"
                                                                        (cross-mult
                                                                         2)
                                                                        (("1"
                                                                          (expand
                                                                           "-")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-5
                                                              -6
                                                              -7
                                                              1))
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst + "reverse_segment(e)")
                                          (("2"
                                            (rewrite
                                             "point_on_reverse_segment")
                                            (("2"
                                              (rewrite
                                               "point_on_segment_has_norm_offset")
                                              (("2"
                                                (inst + "p`x - e`p1`x")
                                                (("2"
                                                  (expand "length")
                                                  (("2"
                                                    (expand "^")
                                                    (("2"
                                                      (rewrite
                                                       "norm_diff_horiz")
                                                      (("2"
                                                        (expand "abs")
                                                        (("2"
                                                          (replace -2)
                                                          (("2"
                                                            (apply-extensionality
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (hide-all-but
                                                               (-3
                                                                -6
                                                                -8
                                                                +))
                                                              (("1"
                                                                (expand
                                                                 "+")
                                                                (("1"
                                                                  (move-terms
                                                                   1
                                                                   r
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "*")
                                                                    (("1"
                                                                      (factor
                                                                       1
                                                                       r)
                                                                      (("1"
                                                                        (cancel-by
                                                                         1
                                                                         "p`x - e`p1`x")
                                                                        (("1"
                                                                          (cross-mult
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "-")
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-5
                                                                -6
                                                                -7
                                                                1))
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replace -8 1)
                            (("2"
                              (expand "leftmost_intersection_point")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (replace -5)
            (("2" (expand "leftmost_intersection_point")
              (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (only_one_edge_adj_leftmost_is_horiz 0
  (only_one_edge_adj_leftmost_is_horiz-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin)
      (("" (skeep)
        (("" (use "left_of_leftmost_not_on_perim_edge")
          (("" (assert)
            (("" (replace -7 :dir rl)
              (("" (inst-cp + "s")
                (("" (inst + "reverse_segment(e)")
                  (("" (rewrite "reverse_reverse_segment")
                    (("" (expand "reverse_segment" 1)
                      (("" (assert)
                        (("" (split 1)
                          (("1" (split 2)
                            (("1"
                              (lemma "adjacent_edges_do_not_fold_back")
                              (("1"
                                (inst - "G" "i")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "edges_of_polygon")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (rewrite
                                               "dir_parallel_eqv_normalized_diffs_eq")
                                              (("1"
                                                (replace -3 :dir rl)
                                                (("1"
                                                  (expand "^")
                                                  (("1"
                                                    (rewrite
                                                     "norm_diff_horiz")
                                                    (("1"
                                                      (rewrite
                                                       "norm_diff_horiz")
                                                      (("1"
                                                        (cross-mult 3)
                                                        (("1"
                                                          (expand
                                                           "abs")
                                                          (("1"
                                                            (hide
                                                             -1
                                                             -2
                                                             -3
                                                             -6)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (expand "edge_of_polygon?")
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "edge_of_polygon?")
                              (("2"
                                (inst 2 "i")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

