(polygon_membership
 (serpentine_ray_TCC1 0
  (serpentine_ray_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (serpentine_ray subtype "polygon_membership.i"
    "below[S`body`length]"))
  (serpentine_ray_TCC1-1 nil 3874128956 ("" (subtype-tcc) nil nil) nil
   nil
   (serpentine_ray subtype "polygon_membership.i"
    "below[S`body`length]")))
 (serpentine_ray_TCC2 0
  (serpentine_ray_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (serpentine_ray subtype "(number_fields.+)(polygon_membership.i, 1)"
    "below[S`body`length]"))
  (serpentine_ray_TCC2-1 nil 3874128956 ("" (subtype-tcc) nil nil) nil
   nil
   (serpentine_ray subtype "(number_fields.+)(polygon_membership.i, 1)"
    "below[S`body`length]")))
 (serp_ray_outside?_TCC1 0
  (serp_ray_outside?_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (serp_ray_outside? subtype "polygon_membership.i"
    "below[S`body`length]"))
  (serp_ray_outside?_TCC1-1 nil 3874128956 ("" (subtype-tcc) nil nil)
   nil nil
   (serp_ray_outside? subtype "polygon_membership.i"
    "below[S`body`length]")))
 (serp_ray_outside?_TCC2 0
  (serp_ray_outside?_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (serp_ray_outside? subtype
    "(number_fields.+)(polygon_membership.i, 1)"
    "below[S`body`length]"))
  (serp_ray_outside?_TCC2-1 nil 3874128956 ("" (subtype-tcc) nil nil)
   nil nil
   (serp_ray_outside? subtype
    "(number_fields.+)(polygon_membership.i, 1)"
    "below[S`body`length]")))
 (serp_ray_outside?_TCC3 0
  (serp_ray_outside?_TCC3-2 nil 3874129021
   ("" (skeep + t) (("" (inst - "i") (("" (assert) nil nil)) nil)) nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (serpentine_ray type-eq-decl nil polygon_membership nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (serp_ray_outside? subtype
    "polygon_membership.S`body`seq((number_fields.+)(polygon_membership.i, 1))"
    "{p: vectors_cross_2d.point_2d | p /= polygon_membership.S`body`seq(polygon_membership.i)}"))
  (serp_ray_outside?_TCC3-1 nil 3874128956 ("" (subtype-tcc) nil nil)
   nil nil
   (serp_ray_outside? subtype
    "polygon_membership.S`body`seq((number_fields.+)(polygon_membership.i, 1))"
    "{p: vectors_cross_2d.point_2d | p /= polygon_membership.S`body`seq(polygon_membership.i)}")))
 (serp_ray_outside?_TCC4 0
  (serp_ray_outside?_TCC4-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (serp_ray_outside? subtype
    "(number_fields.-)(polygon_membership.S`body`length, 1)"
    "below[S`body`length]"))
  (serp_ray_outside?_TCC4-1 nil 3874128956 ("" (subtype-tcc) nil nil)
   nil nil
   (serp_ray_outside? subtype
    "(number_fields.-)(polygon_membership.S`body`length, 1)"
    "below[S`body`length]")))
 (point_outside_polygon?_TCC1 0
  (point_outside_polygon?_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak (point_outside_polygon? subtype "0" "below[S`body`length]"))
  (point_outside_polygon?_TCC1-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (point_outside_polygon? subtype "0" "below[S`body`length]")))
 (perimeter_not_outside 0
  (perimeter_not_outside-1 nil 3874129021
   ("" (skeep)
    (("" (expand "point_outside_polygon?")
      (("" (skeep - t)
        (("" (expand "serp_ray_outside?")
          (("" (flatten)
            (("" (case "S`body`length = 1")
              (("1" (inst -6 "0") (("1" (assert) nil)))
               ("2" (inst -4 "0" "p")
                (("1" (ground)
                  (("1" (hide -3 -4)
                    (("1" (inst -2 "0")
                      (("1" (expand "point_on_segment?")
                        (("1" (inst + "0")
                          (("1" (ground) nil)))))))))))
                 ("2" (assert) nil))))))))))))))
    nil)
   ((point_outside_polygon? const-decl "bool" polygon_membership nil)
    (serp_ray_outside? const-decl "bool" polygon_membership nil)
    (serpentine_ray type-eq-decl nil polygon_membership nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (scal_0 formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (scal_1 formula-decl nil vectors_2D vectors)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (S skolem-const-decl "serpentine_ray" polygon_membership nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (point_on_serp_ray?_TCC1 0
  (point_on_serp_ray?_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (point_on_serp_ray? subtype
    "(number_fields.-)(polygon_membership.S`body`length, 1)"
    "below[S`body`length]"))
  (point_on_serp_ray?_TCC1-1 nil 3874128956 ("" (subtype-tcc) nil nil)
   nil nil
   (point_on_serp_ray? subtype
    "(number_fields.-)(polygon_membership.S`body`length, 1)"
    "below[S`body`length]")))
 (downstream_point_outside 0
  (downstream_point_outside-1 nil 3874129021
   ("" (skeep*)
    (("" (expand "point_outside_polygon?")
      (("" (expand "point_on_serp_ray?")
        (("" (expand "serp_ray_outside?")
          (("" (flatten)
            (("" (split -3)
              (("1" (skeep)
                (("1" (typepred "i")
                  (("1" (case "S`body`length = 1")
                    (("1" (ground) nil nil)
                     ("2" (case "q = S`body`seq(1+i)")
                      (("1"
                        (inst +
                         "(# body := S`body ^ (i+1, S`body`length -1), tail := S`tail #)")
                        (("1" (expand "^")
                          (("1" (expand "min")
                            (("1" (ground)
                              (("1"
                                (skeep)
                                (("1"
                                  (typepred "i_1")
                                  (("1"
                                    (expand "^")
                                    (("1"
                                      (expand "min")
                                      (("1"
                                        (inst? -7)
                                        (("1" (ground) nil nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "^")
                          (("2" (expand "min")
                            (("2" (skeep)
                              (("2"
                                (typepred "S")
                                (("2"
                                  (inst? -2)
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (typepred "i_1")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2"
                        (inst +
                         "(# body := (# length := 1, seq := lambda (j: below(1)): q #) o S`body ^ (i+1, S`body`length - 1), tail := S`tail #)")
                        (("1" (expand "o")
                          (("1" (ground)
                            (("1" (skeep)
                              (("1"
                                (typepred "i_1")
                                (("1"
                                  (expand "^")
                                  (("1"
                                    (expand "min")
                                    (("1"
                                      (expand "o")
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (split -2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (inst -7 "i_1 + i" "p")
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (hide -4 -7)
                                                  (("1"
                                                    (equate
                                                     "i_1"
                                                     "0"
                                                     t)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "point_on_segment?")
                                                        (("1"
                                                          (skeep*)
                                                          (("1"
                                                            (replace
                                                             -9)
                                                            (("1"
                                                              (inst
                                                               +
                                                               "t + t!1 - t*t!1")
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (use
                                                                   "two_parameter_bounds")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (use
                                                                   "two_parameter_bounds")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (rewrite
                                                                   "scal_add_right")
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (replace
                                                                       -4)
                                                                      (("3"
                                                                        (factor
                                                                         1
                                                                         l
                                                                         (2
                                                                          3))
                                                                        (("3"
                                                                          (hide
                                                                           -4
                                                                           -9
                                                                           -10
                                                                           2)
                                                                          (("3"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (inst? -6)
                                              (("1" (ground) nil nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (expand "^")
                                (("2"
                                  (expand "min")
                                  (("2" (inst? -5) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (ground)
                          (("1" (expand "o")
                            (("1" (expand "^")
                              (("1"
                                (expand "min")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (expand "o")
                              (("2"
                                (expand "^")
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (ground)
                                    (("2"
                                      (typepred "S")
                                      (("2"
                                        (inst? -2)
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (typepred "i_1")
                                          (("2"
                                            (expand "o")
                                            (("2"
                                              (expand "^")
                                              (("2"
                                                (expand "min")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2"
                (inst +
                 "(# body := (# length := 1, seq := lambda (i: below(1)): q #), tail := S`tail #)")
                (("1" (ground)
                  (("1" (skeep) nil nil)
                   ("2" (skeep)
                    (("2" (expand "point_on_arb_ray?")
                      (("2" (skeep)
                        (("2" (inst -4 "d + d!1")
                          (("2" (replace -2)
                            (("2" (rewrite "scal_add_left")
                              (("2"
                                (rewrite "add_comm" +)
                                (("2" (rewrite "add_assoc" +) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((point_outside_polygon? const-decl "bool" polygon_membership nil)
    (serp_ray_outside? const-decl "bool" polygon_membership nil)
    (serpentine_ray type-eq-decl nil polygon_membership nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (i_1 skolem-const-decl
     "below((S`body ^ (1 + i, S`body`length - 1))`length - 1)"
     polygon_membership nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (i_1 skolem-const-decl
     "below((S`body ^ (1 + i, S`body`length - 1))`length - 1)"
     polygon_membership nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (i skolem-const-decl "below(S`body`length - 1)" polygon_membership
       nil)
    (S skolem-const-decl "serpentine_ray" polygon_membership nil)
    (^ const-decl "finseq" finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (i_1 skolem-const-decl
     "below(((# length := 1, seq := LAMBDA (j: below(1)): q #) o
        S`body ^ (1 + i, S`body`length - 1))`length
       - 1)" polygon_membership nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (i_1 skolem-const-decl
     "below(((# length := 1, seq := LAMBDA (j: below(1)): q #) o
        S`body ^ (1 + i, S`body`length - 1))`length
       - 1)" polygon_membership nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (scal_add_right formula-decl nil vectors_2D vectors)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (scal_add_left formula-decl nil vectors_2D vectors)
    (scal_sub_left formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (two_parameter_bounds formula-decl nil segments_2d nil)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (q skolem-const-decl "point_2d" polygon_membership nil)
    (O const-decl "finseq" finite_sequences nil)
    (point_on_arb_ray? const-decl "bool" vectors_cross_2d nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (add_assoc formula-decl nil vectors_2D vectors)
    (add_comm formula-decl nil vectors_2D vectors)
    (FALSE const-decl "bool" booleans nil)
    (point_on_serp_ray? const-decl "bool" polygon_membership nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (pt_inside_imp_inside_rev_polygon_TCC1 0
  (pt_inside_imp_inside_rev_polygon_TCC1-2 nil 3874129021
   ("" (skeep) (("" (use "reverse_polygon_is_simple") nil nil)) nil)
   ((simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (reverse_polygon_is_simple judgement-tcc nil reverse_polygons nil))
   shostak
   (pt_inside_imp_inside_rev_polygon subtype
    "reverse_polygons.reverse_polygon(polygon_membership.G)"
    "simple_polygon_2d"))
  (pt_inside_imp_inside_rev_polygon_TCC1-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (pt_inside_imp_inside_rev_polygon subtype
    "reverse_polygons.reverse_polygon(polygon_membership.G)"
    "simple_polygon_2d")))
 (pt_inside_imp_inside_rev_polygon 0
  (pt_inside_imp_inside_rev_polygon-1 nil 3874129021
   ("" (skeep)
    (("" (expand "point_in_polygon?")
      (("" (use "on_rev_perim_eqv_on_perim")
        (("" (replace -1 :hide? t)
          (("" (ground)
            (("" (hide 2)
              ((""
                (equate "right_crossing_set(p, reverse_polygon(G))"
                 "right_crossing_set(p, G)")
                (("" (hide -1 2)
                  (("" (apply-extensionality :hide? t)
                    (("" (iff)
                      (("" (ground)
                        (("1" (expand "right_crossing_set")
                          (("1" (skeep)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "counted_crossing?")
                                  (("1"
                                    (equate
                                     "vertex?(reverse_polygon(G))(p_1)"
                                     "vertex?(G)(p_1)")
                                    (("1"
                                      (ground)
                                      (("1"
                                        (expand
                                         "count_adjacent_edges?")
                                        (("1"
                                          (skeep - t)
                                          (("1"
                                            (rewrite
                                             "prev_index_of_reverse")
                                            (("1"
                                              (rewrite
                                               "next_index_of_reverse")
                                              (("1"
                                                (inst
                                                 +
                                                 "rev_polygon_index(G, i)")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (expand
                                                     "reverse_polygon")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "reverse_polygon")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "reverse_polygon")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "reverse_polygon")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand
                                               "reverse_polygon")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep - t)
                                        (("2"
                                          (expand "edge_of_polygon?")
                                          (("2"
                                            (skeep - t)
                                            (("2"
                                              (rewrite
                                               "edges_of_reverse_polygon")
                                              (("1"
                                                (inst
                                                 +
                                                 "reverse_segment(s)")
                                                (("1"
                                                  (rewrite
                                                   "point_on_reverse_segment")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide-all-but
                                                       (-3 3))
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace
                                                   -2
                                                   1
                                                   :dir
                                                   rl
                                                   :hide?
                                                   t)
                                                  (("2"
                                                    (rewrite
                                                     "reverse_reverse_segment")
                                                    (("2"
                                                      (expand
                                                       "edge_of_polygon?")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (expand
                                                           "reverse_polygon")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "reverse_polygon")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (expand "reverse_polygon")
                                        (("2"
                                          (expand "vertex?")
                                          (("2"
                                            (iff)
                                            (("2"
                                              (ground)
                                              (("1"
                                                (skeep)
                                                (("1" (inst?) nil nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (inst
                                                   +
                                                   "rev_polygon_index(G, i)")
                                                  (("2"
                                                    (rewrite
                                                     "rev_rev_polygon_index")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "right_crossing_set")
                          (("2" (skeep)
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "counted_crossing?")
                                  (("2"
                                    (equate
                                     "vertex?(reverse_polygon(G))(p_1)"
                                     "vertex?(G)(p_1)")
                                    (("1"
                                      (ground)
                                      (("1"
                                        (expand
                                         "count_adjacent_edges?")
                                        (("1"
                                          (skeep - t)
                                          (("1"
                                            (inst
                                             +
                                             "rev_polygon_index(G, i)")
                                            (("1"
                                              (rewrite
                                               "prev_index_of_reverse")
                                              (("1"
                                                (rewrite
                                                 "next_index_of_reverse")
                                                (("1"
                                                  (rewrite
                                                   "rev_rev_polygon_index")
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (expand
                                                       "reverse_polygon")
                                                      (("1"
                                                        (rewrite
                                                         "rev_rev_polygon_index")
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "reverse_polygon")
                                                      (("2"
                                                        (rewrite
                                                         "rev_rev_polygon_index")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand
                                               "reverse_polygon")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep - t)
                                        (("2"
                                          (expand "edge_of_polygon?")
                                          (("2"
                                            (skeep - t)
                                            (("2"
                                              (inst
                                               +
                                               "reverse_segment(s)")
                                              (("1"
                                                (rewrite
                                                 "point_on_reverse_segment")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide-all-but
                                                     (-3 3))
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "edge_of_polygon?")
                                                (("2"
                                                  (inst
                                                   +
                                                   "prev_index(G, rev_polygon_index(G, i))")
                                                  (("1"
                                                    (rewrite
                                                     "edges_of_reverse_polygon")
                                                    (("1"
                                                      (rewrite
                                                       "prev_index_rev_index_next")
                                                      (("1"
                                                        (rewrite
                                                         "rev_rev_polygon_index")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "reverse_polygon")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (expand "reverse_polygon")
                                        (("2"
                                          (expand "vertex?")
                                          (("2"
                                            (iff)
                                            (("2"
                                              (ground)
                                              (("1"
                                                (skeep)
                                                (("1" (inst?) nil nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (inst
                                                   +
                                                   "rev_polygon_index(G, i)")
                                                  (("2"
                                                    (rewrite
                                                     "rev_rev_polygon_index")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((point_in_polygon? const-decl "bool" horiz_edge_crossing nil)
    (i skolem-const-decl "below(G`num_vertices)" polygon_membership
       nil)
    (s skolem-const-decl "(edge_of_polygon?(G))" polygon_membership
     nil)
    (i skolem-const-decl "below(G`num_vertices)" polygon_membership
       nil)
    (prev_index_rev_index_next formula-decl nil reverse_polygons nil)
    (prev_next_is_original formula-decl nil polygons_2d nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (counted_crossing? const-decl "bool" horiz_edge_crossing nil)
    (rev_rev_polygon_index formula-decl nil reverse_polygons nil)
    (next_index_of_reverse formula-decl nil reverse_polygons nil)
    (rev_polygon_index const-decl "below(G`num_vertices)"
     reverse_polygons nil)
    (i skolem-const-decl "below(reverse_polygon(G)`num_vertices)"
       polygon_membership nil)
    (G skolem-const-decl "simple_polygon_2d" polygon_membership nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (prev_index_of_reverse formula-decl nil reverse_polygons nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (count_adjacent_edges? const-decl "bool" horiz_edge_crossing nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (edges_of_reverse_polygon formula-decl nil reverse_polygons nil)
    (i skolem-const-decl "below(reverse_polygon(G)`num_vertices)"
       polygon_membership nil)
    (reverse_reverse_segment formula-decl nil segments_2d nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (point_on_reverse_segment formula-decl nil segments_2d nil)
    (horizontal_segment? const-decl "bool" horiz_edge_crossing nil)
    (s skolem-const-decl "(edge_of_polygon?(reverse_polygon(G)))"
     polygon_membership nil)
    (reverse_segment const-decl "segment_2d" segments_2d nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (pred type-eq-decl nil defined_types nil)
    (vertex? const-decl "pred[point_2d]" polygons_2d nil)
    (reverse_polygon const-decl "polygon_2d" reverse_polygons nil)
    (right_crossing_set const-decl "finite_set[real]"
     horiz_edge_crossing nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (on_rev_perim_eqv_on_perim formula-decl nil reverse_polygons nil))
   shostak))
 (pt_inside_eqv_inside_rev_polygon_TCC1 0
  (pt_inside_eqv_inside_rev_polygon_TCC1-2 nil 3874129021
   ("" (skeep) (("" (use "reverse_polygon_is_simple") nil nil)) nil)
   ((simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (reverse_polygon_is_simple judgement-tcc nil reverse_polygons nil))
   shostak
   (pt_inside_eqv_inside_rev_polygon subtype
    "reverse_polygons.reverse_polygon(polygon_membership.G)"
    "simple_polygon_2d"))
  (pt_inside_eqv_inside_rev_polygon_TCC1-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (pt_inside_eqv_inside_rev_polygon subtype
    "reverse_polygons.reverse_polygon(polygon_membership.G)"
    "simple_polygon_2d")))
 (pt_inside_eqv_inside_rev_polygon 0
  (pt_inside_eqv_inside_rev_polygon-1 nil 3874129021
   ("" (skeep)
    (("" (ground)
      (("1" (use "pt_inside_imp_inside_rev_polygon")
        (("1" (assert) nil nil)) nil)
       ("2" (lemma "pt_inside_imp_inside_rev_polygon")
        (("2" (inst - "reverse_polygon(G)" "p")
          (("2" (rewrite "reverse_reverse_polygon")
            (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (pt_inside_imp_inside_rev_polygon formula-decl nil
     polygon_membership nil)
    (reverse_polygon const-decl "polygon_2d" reverse_polygons nil)
    (reverse_reverse_polygon formula-decl nil reverse_polygons nil))
   shostak))
 (pt_outside_eqv_outside_rev_polygon 0
  (pt_outside_eqv_outside_rev_polygon-1 nil 3874129021
   ("" (skeep)
    (("" (lemma "on_rev_perim_eqv_on_perim")
      (("" (expand "point_outside_polygon?")
        (("" (ground)
          (("1" (skeep)
            (("1" (inst?)
              (("1" (assert)
                (("1" (expand "serp_ray_outside?")
                  (("1" (ground)
                    (("1" (skeep)
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (inst? -5) (("1" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (hide -2)
                        (("2" (inst?)
                          (("2" (inst?) (("2" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (inst?)
              (("2" (assert)
                (("2" (expand "serp_ray_outside?")
                  (("2" (ground)
                    (("1" (skeep)
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (inst? -5) (("1" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1)
                      (("2" (skeep)
                        (("2" (inst?)
                          (("2" (inst?) (("2" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((on_rev_perim_eqv_on_perim formula-decl nil reverse_polygons nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (serpentine_ray type-eq-decl nil polygon_membership nil)
    (serp_ray_outside? const-decl "bool" polygon_membership nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (point_outside_polygon? const-decl "bool" polygon_membership nil))
   shostak))
 (prev_edge_not_crossed_by_perp_left_segment_TCC1 0
  (prev_edge_not_crossed_by_perp_left_segment_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "perp_left_nzvect_neq_zero")
      (("" (inst?) (("1" (ground) nil nil) ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((perp_left_nzvect_neq_zero formula-decl nil vectors_cross_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (e skolem-const-decl "segment_2d" polygon_membership nil))
   shostak
   (prev_edge_not_crossed_by_perp_left_segment subtype
    "vectors_cross_2d.perp_left((vectors_2D.-)(polygon_membership.e`p2, polygon_membership.e`p1))"
    "Nz_vector"))
  (prev_edge_not_crossed_by_perp_left_segment_TCC1-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (prev_edge_not_crossed_by_perp_left_segment subtype
    "vectors_cross_2d.perp_left((vectors_2D.-)(polygon_membership.e`p2, polygon_membership.e`p1))"
    "Nz_vector")))
 (prev_edge_not_crossed_by_perp_left_segment 0
  (prev_edge_not_crossed_by_perp_left_segment-1 nil 3874129021
   ("" (skeep)
    (("" (lemma "vertex_neq_prev")
      (("" (inst - "G" "i")
        (("" (lemma "vertex_neq_next")
          (("" (inst - "G" "i")
            (("" (flatten)
              (("" (expand "edges_of_polygon")
                (("" (replace -1 :hide? t)
                  (("" (assert)
                    (("" (expand "outward_edge_offset_dist")
                      (("" (typepred "min_edge_angle_sine(G)")
                        (("" (expand "min_edge_angle_sine")
                          ((""
                            (name-replace "cos_a"
                             "vcos(^(G`vertices(prev_index(G, i)) - G`vertices(i)),
                                         ^(G`vertices(next_index(G, i)) - G`vertices(i)))")
                            ((""
                              (name-replace "sin_a"
                               "vsin(^(G`vertices(prev_index(G, i)) - G`vertices(i)),
                                                 ^(G`vertices(next_index(G, i)) - G`vertices(i)))")
                              ((""
                                (case "sin_a > 0 and cos_a > 0")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (use
                                     "no_perp_mid_segment_intersection_2")
                                    (("1"
                                      (ground)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand "segment_midpoint")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (replace -3)
                                          (("2"
                                            (replace -4)
                                            (("2"
                                              (hide -10 -11)
                                              (("2"
                                                (expand
                                                 "scaled_min_edge_sep")
                                                (("2"
                                                  (lemma
                                                   "separation_distance_bounds_edge_length")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "G"
                                                     "edges_of_polygon(G)(i)")
                                                    (("2"
                                                      (expand
                                                       "edges_of_polygon")
                                                      (("2"
                                                        (expand
                                                         "length")
                                                        (("2"
                                                          (cross-mult
                                                           1)
                                                          (("2"
                                                            (case
                                                             "min[real,<=](sines_of_edge_angles(G)) <= sin_a")
                                                            (("1"
                                                              (typepred
                                                               "cos_a")
                                                              (("1"
                                                                (name-replace*
                                                                 ("ms"
                                                                  "min[real,<=](sines_of_edge_angles(G))"
                                                                  "len"
                                                                  "norm(G`vertices(next_index(G, i)) - G`vertices(i))"))
                                                                (("1"
                                                                  (equate
                                                                   "len * sin_a"
                                                                   "sin_a * len"
                                                                   (assert))
                                                                  (("1"
                                                                    (name-replace*
                                                                     ("mm"
                                                                      "ms * min_edge_sep(G)"
                                                                      "sl"
                                                                      "sin_a * len"))
                                                                    (("1"
                                                                      (case
                                                                       "mm <= sl")
                                                                      (("1"
                                                                        (case
                                                                         "mm * cos_a <= mm")
                                                                        (("1"
                                                                          (case
                                                                           "mm * cos_a > 0")
                                                                          (("1"
                                                                            (mult-cases
                                                                             1)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (mult-cases
                                                                             1)
                                                                            (("2"
                                                                              (replace
                                                                               -4
                                                                               :dir
                                                                               rl)
                                                                              (("2"
                                                                                (mult-cases
                                                                                 1)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (mult-cases
                                                                           1)
                                                                          (("1"
                                                                            (ground)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (replace
                                                                             -3
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (mult-cases
                                                                               1)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "mm")
                                                                        (("2"
                                                                          (expand
                                                                           "sl")
                                                                          (("2"
                                                                            (mult-cases
                                                                             1)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "min[real,<=](sines_of_edge_angles(G))")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "sin_a")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "sines_of_edge_angles"
                                                                     1)
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (expand
                                                                         "vsin")
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (ground)
                                                                            (("2"
                                                                              (expand
                                                                               "vcos")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (use
                                         "prev_vertex_neq_next_vertex")
                                        (("1" (ground) nil nil)
                                         ("2"
                                          (typepred "G")
                                          (("2"
                                            (expand
                                             "simple_polygon_2d?")
                                            (("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (real-props) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma
                                   "no_perp_segment_intersection_4")
                                  (("2"
                                    (inst
                                     -
                                     "G`vertices(i)"
                                     "G`vertices(next_index(G, i))"
                                     "G`vertices(prev_index(G, i))"
                                     "segment_midpoint((# p1 := G`vertices(i),
                                                                         p2 := G`vertices(next_index(G, i)) #))"
                                     "d * (scaled_min_edge_sep(G) * (min[real,<=](sines_of_edge_angles(G)) / 2))")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -1)
                                        (("1" (ground) nil nil)
                                         ("2"
                                          (use
                                           "prev_vertex_neq_next_vertex")
                                          (("1" (ground) nil nil)
                                           ("2"
                                            (typepred "G")
                                            (("2"
                                              (expand
                                               "simple_polygon_2d?")
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (lemma
                                           "segment_endpoints_neq_midpoint")
                                          (("3"
                                            (inst
                                             -
                                             "(# p1 := G`vertices(i),
                                                                                                  p2 := G`vertices(next_index(G, i)) #)")
                                            (("3" (ground) nil nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (rewrite
                                           "segment_midpoint_on_segment")
                                          nil
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (real-props) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vertex_neq_prev formula-decl nil polygons_2d nil)
    (vertex_neq_next formula-decl nil polygons_2d nil)
    (outward_edge_offset_dist const-decl "posreal" polygon_attributes
     nil)
    (vsin const-decl "{x: real | -1 <= x AND x <= 1}" vectors_2d_trig
     nil)
    (no_perp_segment_intersection_4 formula-decl nil segments_2d_trig
     nil)
    (neg_times_ge formula-decl nil real_props nil)
    (segment_midpoint_on_segment formula-decl nil segments_2d nil)
    (segment_endpoints_neq_midpoint formula-decl nil segments_2d nil)
    (d skolem-const-decl "posreal" polygon_membership nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (pos_div_gt formula-decl nil real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (neg_times_gt formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (separation_distance_bounds_edge_length formula-decl nil
     polygon_attributes nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (times_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (min_edge_sep const-decl "{D_min: posreal |
   FORALL (i, j: below(G`num_vertices)):
     j /= i AND j /= prev_index(G, i) IMPLIES
      FORALL (p: point_2d):
        point_on_segment?(p, edges_of_polygon(G)(j)) IMPLIES
         D_min <= norm(G`vertices(i) - p)}" polygon_attributes nil)
    (times_div2 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (pos_times_ge formula-decl nil real_props nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (sl skolem-const-decl "real" polygon_membership nil)
    (mm skolem-const-decl "real" polygon_membership nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (length const-decl "posreal" segments_2d nil)
    (edge_is_edge formula-decl nil polygons_2d nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (segment_midpoint const-decl "point_2d" segments_2d nil)
    (prev_vertex_neq_next_vertex formula-decl nil polygons_2d nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (scaled_min_edge_sep const-decl "posreal" polygon_attributes nil)
    (G skolem-const-decl "simple_polygon_2d" polygon_membership nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (min const-decl
         "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (sines_of_edge_angles const-decl "finite_set[real]"
     polygon_attributes nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (no_perp_mid_segment_intersection_2 formula-decl nil
     segments_2d_trig nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (vcos const-decl "{x: real | -1 <= x AND x <= 1}" vectors_2d_trig
     nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (vertices_diff_next_nonzero formula-decl nil polygons_2d nil)
    (min_edge_angle_sine const-decl "{a: posreal | a <= 1 / 2}"
     polygon_attributes nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (next_prev_is_original formula-decl nil polygons_2d nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil))
   shostak))
 (prev_edge_not_crossed_by_perp_right_segment_TCC1 0
  (prev_edge_not_crossed_by_perp_right_segment_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "perp_right_nzvect_neq_zero")
      (("" (inst?) (("1" (ground) nil nil) ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((perp_right_nzvect_neq_zero formula-decl nil vectors_cross_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (e skolem-const-decl "segment_2d" polygon_membership nil))
   shostak
   (prev_edge_not_crossed_by_perp_right_segment subtype
    "vectors_cross_2d.perp_right((vectors_2D.-)(polygon_membership.e`p2, polygon_membership.e`p1))"
    "Nz_vector"))
  (prev_edge_not_crossed_by_perp_right_segment_TCC1-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (prev_edge_not_crossed_by_perp_right_segment subtype
    "vectors_cross_2d.perp_right((vectors_2D.-)(polygon_membership.e`p2, polygon_membership.e`p1))"
    "Nz_vector")))
 (prev_edge_not_crossed_by_perp_right_segment 0
  (prev_edge_not_crossed_by_perp_right_segment-1 nil 3874129021
   ("" (skeep)
    (("" (lemma "vertex_neq_prev")
      (("" (inst - "G" "i")
        (("" (lemma "vertex_neq_next")
          (("" (inst - "G" "i")
            (("" (flatten)
              (("" (expand "edges_of_polygon")
                (("" (replace -1 :hide? t)
                  (("" (assert)
                    (("" (expand "inward_edge_offset_dist")
                      (("" (typepred "min_inward_edge_angle_sine(G)")
                        (("" (expand "min_inward_edge_angle_sine")
                          ((""
                            (name-replace "cos_a"
                             "vcos(^(G`vertices(next_index(G, i)) - G`vertices(i)),
                                             ^(G`vertices(prev_index(G, i)) - G`vertices(i)))")
                            ((""
                              (name-replace "sin_a"
                               "vsin(^(G`vertices(next_index(G, i)) - G`vertices(i)),
                                             ^(G`vertices(prev_index(G, i)) - G`vertices(i)))")
                              ((""
                                (case "sin_a > 0 and cos_a > 0")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (use
                                     "no_perp_mid_segment_intersection_1")
                                    (("1"
                                      (ground)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand "segment_midpoint")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (replace -3)
                                          (("2"
                                            (replace -4)
                                            (("2"
                                              (hide -10 -11)
                                              (("2"
                                                (expand
                                                 "scaled_min_edge_sep")
                                                (("2"
                                                  (lemma
                                                   "separation_distance_bounds_edge_length")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "G"
                                                     "edges_of_polygon(G)(i)")
                                                    (("2"
                                                      (expand
                                                       "edges_of_polygon")
                                                      (("2"
                                                        (expand
                                                         "length")
                                                        (("2"
                                                          (cross-mult
                                                           1)
                                                          (("2"
                                                            (case
                                                             "min[real,<=](sines_of_inward_edge_angles(G)) <= sin_a")
                                                            (("1"
                                                              (typepred
                                                               "cos_a")
                                                              (("1"
                                                                (name-replace*
                                                                 ("ms"
                                                                  "min[real,<=](sines_of_inward_edge_angles(G))"
                                                                  "len"
                                                                  "norm(G`vertices(next_index(G, i)) - G`vertices(i))"))
                                                                (("1"
                                                                  (equate
                                                                   "len * sin_a"
                                                                   "sin_a * len"
                                                                   (assert))
                                                                  (("1"
                                                                    (name-replace*
                                                                     ("mm"
                                                                      "ms * min_edge_sep(G)"
                                                                      "sl"
                                                                      "sin_a * len"))
                                                                    (("1"
                                                                      (case
                                                                       "mm <= sl")
                                                                      (("1"
                                                                        (case
                                                                         "mm * cos_a <= mm")
                                                                        (("1"
                                                                          (case
                                                                           "mm * cos_a > 0")
                                                                          (("1"
                                                                            (mult-cases
                                                                             1)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (mult-cases
                                                                             1)
                                                                            (("2"
                                                                              (replace
                                                                               -4
                                                                               :dir
                                                                               rl)
                                                                              (("2"
                                                                                (mult-cases
                                                                                 1)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (mult-cases
                                                                           1)
                                                                          (("1"
                                                                            (ground)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (replace
                                                                             -3
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (mult-cases
                                                                               1)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "mm")
                                                                        (("2"
                                                                          (expand
                                                                           "sl")
                                                                          (("2"
                                                                            (mult-cases
                                                                             1)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "min[real,<=](sines_of_inward_edge_angles(G))")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "sin_a")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "sines_of_inward_edge_angles"
                                                                     1)
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (expand
                                                                         "vsin")
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (ground)
                                                                            (("2"
                                                                              (expand
                                                                               "vcos")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (use
                                         "prev_vertex_neq_next_vertex")
                                        (("1" (ground) nil nil)
                                         ("2"
                                          (typepred "G")
                                          (("2"
                                            (expand
                                             "simple_polygon_2d?")
                                            (("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (real-props) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma
                                   "no_perp_segment_intersection_3")
                                  (("2"
                                    (inst
                                     -
                                     "G`vertices(i)"
                                     "G`vertices(next_index(G, i))"
                                     "G`vertices(prev_index(G, i))"
                                     "segment_midpoint((# p1 := G`vertices(i),
                                                                                 p2 := G`vertices(next_index(G, i)) #))"
                                     "d * (scaled_min_edge_sep(G) * (min[real,<=](sines_of_inward_edge_angles(G)) / 2))")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -1)
                                        (("1" (ground) nil nil)
                                         ("2"
                                          (use
                                           "prev_vertex_neq_next_vertex")
                                          (("1" (ground) nil nil)
                                           ("2"
                                            (typepred "G")
                                            (("2"
                                              (expand
                                               "simple_polygon_2d?")
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (lemma
                                           "segment_endpoints_neq_midpoint")
                                          (("3"
                                            (inst
                                             -
                                             "(# p1 := G`vertices(i),
                                                                                                                  p2 := G`vertices(next_index(G, i)) #)")
                                            (("3" (ground) nil nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (rewrite
                                           "segment_midpoint_on_segment")
                                          nil
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (real-props) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vertex_neq_prev formula-decl nil polygons_2d nil)
    (vertex_neq_next formula-decl nil polygons_2d nil)
    (inward_edge_offset_dist const-decl "posreal" polygon_attributes
     nil)
    (vsin const-decl "{x: real | -1 <= x AND x <= 1}" vectors_2d_trig
     nil)
    (no_perp_segment_intersection_3 formula-decl nil segments_2d_trig
     nil)
    (neg_times_ge formula-decl nil real_props nil)
    (segment_midpoint_on_segment formula-decl nil segments_2d nil)
    (segment_endpoints_neq_midpoint formula-decl nil segments_2d nil)
    (d skolem-const-decl "posreal" polygon_membership nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (pos_div_gt formula-decl nil real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (neg_times_gt formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (separation_distance_bounds_edge_length formula-decl nil
     polygon_attributes nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (times_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (min_edge_sep const-decl "{D_min: posreal |
   FORALL (i, j: below(G`num_vertices)):
     j /= i AND j /= prev_index(G, i) IMPLIES
      FORALL (p: point_2d):
        point_on_segment?(p, edges_of_polygon(G)(j)) IMPLIES
         D_min <= norm(G`vertices(i) - p)}" polygon_attributes nil)
    (times_div2 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (pos_times_ge formula-decl nil real_props nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (sl skolem-const-decl "real" polygon_membership nil)
    (mm skolem-const-decl "real" polygon_membership nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (perp_right const-decl "vector_2d" vectors_cross_2d nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (length const-decl "posreal" segments_2d nil)
    (edge_is_edge formula-decl nil polygons_2d nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (segment_midpoint const-decl "point_2d" segments_2d nil)
    (prev_vertex_neq_next_vertex formula-decl nil polygons_2d nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (scaled_min_edge_sep const-decl "posreal" polygon_attributes nil)
    (G skolem-const-decl "simple_polygon_2d" polygon_membership nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (min const-decl
         "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (sines_of_inward_edge_angles const-decl "finite_set[real]"
     polygon_attributes nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (no_perp_mid_segment_intersection_1 formula-decl nil
     segments_2d_trig nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (vcos const-decl "{x: real | -1 <= x AND x <= 1}" vectors_2d_trig
     nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (vertices_diff_next_nonzero formula-decl nil polygons_2d nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (min_inward_edge_angle_sine const-decl "{a: posreal | a <= 1 / 2}"
     polygon_attributes nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (next_prev_is_original formula-decl nil polygons_2d nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil))
   shostak))
 (next_edge_not_crossed_by_perp_left_segment_TCC1 0
  (next_edge_not_crossed_by_perp_left_segment_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "perp_left_nzvect_neq_zero")
      (("" (inst?) (("1" (ground) nil nil) ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((perp_left_nzvect_neq_zero formula-decl nil vectors_cross_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (e skolem-const-decl "segment_2d" polygon_membership nil))
   shostak
   (next_edge_not_crossed_by_perp_left_segment subtype
    "vectors_cross_2d.perp_left((vectors_2D.-)(polygon_membership.e`p1, polygon_membership.e`p2))"
    "Nz_vector"))
  (next_edge_not_crossed_by_perp_left_segment_TCC1-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (next_edge_not_crossed_by_perp_left_segment subtype
    "vectors_cross_2d.perp_left((vectors_2D.-)(polygon_membership.e`p1, polygon_membership.e`p2))"
    "Nz_vector")))
 (next_edge_not_crossed_by_perp_left_segment 0
  (next_edge_not_crossed_by_perp_left_segment-1 nil 3874129021
   ("" (skeep)
    (("" (lemma "vertex_neq_next")
      (("" (inst-cp - "G" "i")
        (("" (inst - "G" "next_index(G, i)")
          (("" (flatten)
            ((""
              (name-replace "vnn"
               "G`vertices(next_index(G, next_index(G, i)))")
              (("" (expand "edges_of_polygon")
                (("" (replace -1 :hide? t)
                  (("" (assert)
                    (("" (expand "inward_edge_offset_dist")
                      (("" (typepred "min_inward_edge_angle_sine(G)")
                        (("" (expand "min_inward_edge_angle_sine")
                          ((""
                            (name-replace "cos_a"
                             "vcos(^(vnn - G`vertices(next_index(G, i))),
                                ^(G`vertices(i) - G`vertices(next_index(G, i))))")
                            ((""
                              (name-replace "sin_a"
                               "vsin(^(vnn - G`vertices(next_index(G, i))),
                                ^(G`vertices(i) - G`vertices(next_index(G, i))))")
                              ((""
                                (case "sin_a > 0 and cos_a > 0")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (use
                                     "no_perp_mid_segment_intersection_2")
                                    (("1"
                                      (ground)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand "segment_midpoint")
                                          (("1"
                                            (equate
                                             "G`vertices(i) + G`vertices(next_index(G, i))"
                                             "G`vertices(next_index(G, i)) + G`vertices(i)"
                                             (rewrite "add_comm"))
                                            (("1"
                                              (use
                                               "point_on_reverse_segment")
                                              (("1"
                                                (expand
                                                 "reverse_segment")
                                                (("1"
                                                  (expand "vnn")
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (replace -9)
                                                      (("1"
                                                        (replace
                                                         -10
                                                         -11)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -3)
                                          (("2"
                                            (replace -4)
                                            (("2"
                                              (hide -10 -11)
                                              (("2"
                                                (expand
                                                 "scaled_min_edge_sep")
                                                (("2"
                                                  (lemma
                                                   "separation_distance_bounds_edge_length")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "G"
                                                     "edges_of_polygon(G)(i)")
                                                    (("2"
                                                      (expand
                                                       "edges_of_polygon")
                                                      (("2"
                                                        (expand
                                                         "length")
                                                        (("2"
                                                          (cross-mult
                                                           1)
                                                          (("2"
                                                            (case
                                                             "min[real,<=](sines_of_inward_edge_angles(G)) <= sin_a")
                                                            (("1"
                                                              (typepred
                                                               "cos_a")
                                                              (("1"
                                                                (name-replace*
                                                                 ("ms"
                                                                  "min[real,<=](sines_of_inward_edge_angles(G))"
                                                                  "len"
                                                                  "norm(G`vertices(i) - G`vertices(next_index(G, i)))"))
                                                                (("1"
                                                                  (equate
                                                                   "len * sin_a"
                                                                   "sin_a * len"
                                                                   (assert))
                                                                  (("1"
                                                                    (name-replace*
                                                                     ("mm"
                                                                      "ms * min_edge_sep(G)"
                                                                      "sl"
                                                                      "sin_a * len"))
                                                                    (("1"
                                                                      (case
                                                                       "mm <= sl")
                                                                      (("1"
                                                                        (case
                                                                         "mm * cos_a <= mm")
                                                                        (("1"
                                                                          (case
                                                                           "mm * cos_a > 0")
                                                                          (("1"
                                                                            (mult-cases
                                                                             1)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (mult-cases
                                                                             1)
                                                                            (("2"
                                                                              (replace
                                                                               -4
                                                                               :dir
                                                                               rl)
                                                                              (("2"
                                                                                (mult-cases
                                                                                 1)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (mult-cases
                                                                           1)
                                                                          (("1"
                                                                            (ground)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (replace
                                                                             -3
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (mult-cases
                                                                               1)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "mm")
                                                                        (("2"
                                                                          (expand
                                                                           "sl")
                                                                          (("2"
                                                                            (mult-cases
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "len")
                                                                              (("2"
                                                                                (hide-all-but
                                                                                 (-8
                                                                                  1))
                                                                                (("2"
                                                                                  (use
                                                                                   "norm_neg")
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1
                                                                                     :dir
                                                                                     rl
                                                                                     :hide?
                                                                                     t)
                                                                                    (("2"
                                                                                      (equate
                                                                                       (!
                                                                                        -1
                                                                                        r
                                                                                        1)
                                                                                       (!
                                                                                        1
                                                                                        r
                                                                                        1))
                                                                                      (("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "min[real,<=](sines_of_inward_edge_angles(G))")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "sin_a")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "sines_of_inward_edge_angles"
                                                                     1)
                                                                    (("2"
                                                                      (inst
                                                                       +
                                                                       "next_index(G, i)")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "vsin")
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (ground)
                                                                              (("1"
                                                                                (expand
                                                                                 "vnn")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "vcos")
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "dot_comm")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "vnn")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (expand
                                                                                 "vnn")
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "prev_vertex_neq_next_vertex")
                                        (("2"
                                          (inst
                                           -
                                           "G"
                                           "next_index(G, i)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "vnn")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "G")
                                            (("2"
                                              (expand
                                               "simple_polygon_2d?")
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (real-props) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma
                                   "no_perp_segment_intersection_4")
                                  (("2"
                                    (inst
                                     -
                                     "G`vertices(next_index(G, i))"
                                     "G`vertices(i)"
                                     "vnn"
                                     "segment_midpoint((# p1 := G`vertices(i),
                                                                     p2 := G`vertices(next_index(G, i)) #))"
                                     "d * (scaled_min_edge_sep(G) * (min[real,<=](sines_of_inward_edge_angles(G)) / 2))")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (use
                                           "point_on_reverse_segment")
                                          (("1"
                                            (expand "vnn")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand
                                                 "reverse_segment")
                                                (("1"
                                                  (replace -9)
                                                  (("1"
                                                    (replace -8)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (ground) nil nil)
                                         ("3"
                                          (expand "vnn")
                                          (("3"
                                            (use
                                             "prev_vertex_neq_next_vertex")
                                            (("1" (ground) nil nil)
                                             ("2"
                                              (typepred "G")
                                              (("2"
                                                (expand
                                                 "simple_polygon_2d?")
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (lemma
                                           "segment_endpoints_neq_midpoint")
                                          (("4"
                                            (inst
                                             -
                                             "(# p1 := G`vertices(i),
                                                                                                                                                                  p2 := G`vertices(next_index(G, i)) #)")
                                            (("4" (ground) nil nil))
                                            nil))
                                          nil)
                                         ("5"
                                          (hide-all-but 1)
                                          (("5"
                                            (rewrite
                                             "point_on_reverse_segment"
                                             :dir
                                             rl)
                                            (("5"
                                              (expand
                                               "reverse_segment")
                                              (("5"
                                                (rewrite
                                                 "segment_midpoint_on_segment")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (real-props) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vertex_neq_next formula-decl nil polygons_2d nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inward_edge_offset_dist const-decl "posreal" polygon_attributes
     nil)
    (vsin const-decl "{x: real | -1 <= x AND x <= 1}" vectors_2d_trig
     nil)
    (no_perp_segment_intersection_4 formula-decl nil segments_2d_trig
     nil)
    (neg_times_ge formula-decl nil real_props nil)
    (segment_midpoint_on_segment formula-decl nil segments_2d nil)
    (segment_endpoints_neq_midpoint formula-decl nil segments_2d nil)
    (vertex_neq_next_2 formula-decl nil polygons_2d nil)
    (d skolem-const-decl "posreal" polygon_membership nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (pos_div_gt formula-decl nil real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (neg_times_gt formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (separation_distance_bounds_edge_length formula-decl nil
     polygon_attributes nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (times_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (min_edge_sep const-decl "{D_min: posreal |
   FORALL (i, j: below(G`num_vertices)):
     j /= i AND j /= prev_index(G, i) IMPLIES
      FORALL (p: point_2d):
        point_on_segment?(p, edges_of_polygon(G)(j)) IMPLIES
         D_min <= norm(G`vertices(i) - p)}" polygon_attributes nil)
    (times_div2 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (dot_comm formula-decl nil vectors_2D vectors)
    (prev_next_is_original formula-decl nil polygons_2d nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (pos_times_ge formula-decl nil real_props nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (sl skolem-const-decl "real" polygon_membership nil)
    (len skolem-const-decl "nnreal" polygon_membership nil)
    (norm_neg formula-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mm skolem-const-decl "real" polygon_membership nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (length const-decl "posreal" segments_2d nil)
    (edge_is_edge formula-decl nil polygons_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (segment_midpoint const-decl "point_2d" segments_2d nil)
    (point_on_reverse_segment formula-decl nil segments_2d nil)
    (* const-decl "Vector" vectors_2D vectors)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (vnn skolem-const-decl "point_2d" polygon_membership nil)
    (reverse_segment const-decl "segment_2d" segments_2d nil)
    (add_comm formula-decl nil vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (prev_vertex_neq_next_vertex formula-decl nil polygons_2d nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (scaled_min_edge_sep const-decl "posreal" polygon_attributes nil)
    (G skolem-const-decl "simple_polygon_2d" polygon_membership nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (min const-decl
         "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (sines_of_inward_edge_angles const-decl "finite_set[real]"
     polygon_attributes nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (no_perp_mid_segment_intersection_2 formula-decl nil
     segments_2d_trig nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (vcos const-decl "{x: real | -1 <= x AND x <= 1}" vectors_2d_trig
     nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (min_inward_edge_angle_sine const-decl "{a: posreal | a <= 1 / 2}"
     polygon_attributes nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil))
   shostak))
 (next_edge_not_crossed_by_perp_right_segment_TCC1 0
  (next_edge_not_crossed_by_perp_right_segment_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "perp_right_nzvect_neq_zero")
      (("" (inst?) (("1" (ground) nil nil) ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((perp_right_nzvect_neq_zero formula-decl nil vectors_cross_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (e skolem-const-decl "segment_2d" polygon_membership nil))
   shostak
   (next_edge_not_crossed_by_perp_right_segment subtype
    "vectors_cross_2d.perp_right((vectors_2D.-)(polygon_membership.e`p1, polygon_membership.e`p2))"
    "Nz_vector"))
  (next_edge_not_crossed_by_perp_right_segment_TCC1-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (next_edge_not_crossed_by_perp_right_segment subtype
    "vectors_cross_2d.perp_right((vectors_2D.-)(polygon_membership.e`p1, polygon_membership.e`p2))"
    "Nz_vector")))
 (next_edge_not_crossed_by_perp_right_segment 0
  (next_edge_not_crossed_by_perp_right_segment-1 nil 3874129021
   ("" (skeep)
    (("" (lemma "vertex_neq_next")
      (("" (inst-cp - "G" "i")
        (("" (inst - "G" "next_index(G, i)")
          (("" (flatten)
            ((""
              (name-replace "vnn"
               "G`vertices(next_index(G, next_index(G, i)))")
              (("" (expand "edges_of_polygon")
                (("" (replace -1 :hide? t)
                  (("" (assert)
                    (("" (expand "outward_edge_offset_dist")
                      (("" (typepred "min_edge_angle_sine(G)")
                        (("" (expand "min_edge_angle_sine")
                          ((""
                            (name-replace "cos_a"
                             "vcos(^(G`vertices(i) - G`vertices(next_index(G, i))),
                            ^(vnn - G`vertices(next_index(G, i))))")
                            ((""
                              (name-replace "sin_a"
                               "vsin(^(G`vertices(i) - G`vertices(next_index(G, i))),
                            ^(vnn - G`vertices(next_index(G, i))))")
                              ((""
                                (case "sin_a > 0 and cos_a > 0")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (use
                                     "no_perp_mid_segment_intersection_1")
                                    (("1"
                                      (ground)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand "segment_midpoint")
                                          (("1"
                                            (equate
                                             "G`vertices(i) + G`vertices(next_index(G, i))"
                                             "G`vertices(next_index(G, i)) + G`vertices(i)"
                                             (rewrite "add_comm"))
                                            (("1"
                                              (use
                                               "point_on_reverse_segment")
                                              (("1"
                                                (expand
                                                 "reverse_segment")
                                                (("1"
                                                  (expand "vnn")
                                                  (("1"
                                                    (hide 2)
                                                    (("1"
                                                      (replace -9)
                                                      (("1"
                                                        (replace
                                                         -10
                                                         -11)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -3)
                                          (("2"
                                            (replace -4)
                                            (("2"
                                              (hide -10 -11)
                                              (("2"
                                                (expand
                                                 "scaled_min_edge_sep")
                                                (("2"
                                                  (lemma
                                                   "separation_distance_bounds_edge_length")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "G"
                                                     "edges_of_polygon(G)(i)")
                                                    (("2"
                                                      (expand
                                                       "edges_of_polygon")
                                                      (("2"
                                                        (expand
                                                         "length")
                                                        (("2"
                                                          (cross-mult
                                                           1)
                                                          (("2"
                                                            (case
                                                             "min[real,<=](sines_of_edge_angles(G)) <= sin_a")
                                                            (("1"
                                                              (typepred
                                                               "cos_a")
                                                              (("1"
                                                                (name-replace*
                                                                 ("ms"
                                                                  "min[real,<=](sines_of_edge_angles(G))"
                                                                  "len"
                                                                  "norm(G`vertices(i) - G`vertices(next_index(G, i)))"))
                                                                (("1"
                                                                  (equate
                                                                   "len * sin_a"
                                                                   "sin_a * len"
                                                                   (assert))
                                                                  (("1"
                                                                    (name-replace*
                                                                     ("mm"
                                                                      "ms * min_edge_sep(G)"
                                                                      "sl"
                                                                      "sin_a * len"))
                                                                    (("1"
                                                                      (case
                                                                       "mm <= sl")
                                                                      (("1"
                                                                        (case
                                                                         "mm * cos_a <= mm")
                                                                        (("1"
                                                                          (case
                                                                           "mm * cos_a > 0")
                                                                          (("1"
                                                                            (mult-cases
                                                                             1)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (mult-cases
                                                                             1)
                                                                            (("2"
                                                                              (replace
                                                                               -4
                                                                               :dir
                                                                               rl)
                                                                              (("2"
                                                                                (mult-cases
                                                                                 1)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (mult-cases
                                                                           1)
                                                                          (("1"
                                                                            (ground)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (replace
                                                                             -3
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (mult-cases
                                                                               1)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "mm")
                                                                        (("2"
                                                                          (expand
                                                                           "sl")
                                                                          (("2"
                                                                            (mult-cases
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "len")
                                                                              (("2"
                                                                                (hide-all-but
                                                                                 (-8
                                                                                  1))
                                                                                (("2"
                                                                                  (use
                                                                                   "norm_neg")
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1
                                                                                     :dir
                                                                                     rl
                                                                                     :hide?
                                                                                     t)
                                                                                    (("2"
                                                                                      (equate
                                                                                       (!
                                                                                        -1
                                                                                        r
                                                                                        1)
                                                                                       (!
                                                                                        1
                                                                                        r
                                                                                        1))
                                                                                      (("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "min[real,<=](sines_of_edge_angles(G))")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "sin_a")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "sines_of_edge_angles"
                                                                     1)
                                                                    (("2"
                                                                      (inst
                                                                       +
                                                                       "next_index(G, i)")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "vsin")
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (ground)
                                                                              (("1"
                                                                                (expand
                                                                                 "vnn")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "vcos")
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "dot_comm")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "vnn")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (expand
                                                                                 "vnn")
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "prev_vertex_neq_next_vertex")
                                        (("2"
                                          (inst
                                           -
                                           "G"
                                           "next_index(G, i)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "vnn")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "G")
                                            (("2"
                                              (expand
                                               "simple_polygon_2d?")
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (real-props) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma
                                   "no_perp_segment_intersection_3")
                                  (("2"
                                    (inst
                                     -
                                     "G`vertices(next_index(G, i))"
                                     "G`vertices(i)"
                                     "vnn"
                                     "segment_midpoint((# p1 := G`vertices(i),
                                                             p2 := G`vertices(next_index(G, i)) #))"
                                     "d * (scaled_min_edge_sep(G) * (min[real,<=](sines_of_edge_angles(G)) / 2))")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (use
                                           "point_on_reverse_segment")
                                          (("1"
                                            (expand "vnn")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand
                                                 "reverse_segment")
                                                (("1"
                                                  (replace -9)
                                                  (("1"
                                                    (replace -8)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (ground) nil nil)
                                         ("3"
                                          (expand "vnn")
                                          (("3"
                                            (use
                                             "prev_vertex_neq_next_vertex")
                                            (("1" (ground) nil nil)
                                             ("2"
                                              (typepred "G")
                                              (("2"
                                                (expand
                                                 "simple_polygon_2d?")
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (lemma
                                           "segment_endpoints_neq_midpoint")
                                          (("4"
                                            (inst
                                             -
                                             "(# p1 := G`vertices(i),
                                                                                                                                                  p2 := G`vertices(next_index(G, i)) #)")
                                            (("4" (ground) nil nil))
                                            nil))
                                          nil)
                                         ("5"
                                          (hide-all-but 1)
                                          (("5"
                                            (rewrite
                                             "point_on_reverse_segment"
                                             :dir
                                             rl)
                                            (("5"
                                              (expand
                                               "reverse_segment")
                                              (("5"
                                                (rewrite
                                                 "segment_midpoint_on_segment")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (real-props) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vertex_neq_next formula-decl nil polygons_2d nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (outward_edge_offset_dist const-decl "posreal" polygon_attributes
     nil)
    (vsin const-decl "{x: real | -1 <= x AND x <= 1}" vectors_2d_trig
     nil)
    (no_perp_segment_intersection_3 formula-decl nil segments_2d_trig
     nil)
    (neg_times_ge formula-decl nil real_props nil)
    (segment_midpoint_on_segment formula-decl nil segments_2d nil)
    (segment_endpoints_neq_midpoint formula-decl nil segments_2d nil)
    (vertex_neq_next_2 formula-decl nil polygons_2d nil)
    (d skolem-const-decl "posreal" polygon_membership nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (pos_div_gt formula-decl nil real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (neg_times_gt formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (separation_distance_bounds_edge_length formula-decl nil
     polygon_attributes nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (times_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (min_edge_sep const-decl "{D_min: posreal |
   FORALL (i, j: below(G`num_vertices)):
     j /= i AND j /= prev_index(G, i) IMPLIES
      FORALL (p: point_2d):
        point_on_segment?(p, edges_of_polygon(G)(j)) IMPLIES
         D_min <= norm(G`vertices(i) - p)}" polygon_attributes nil)
    (times_div2 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (dot_comm formula-decl nil vectors_2D vectors)
    (prev_next_is_original formula-decl nil polygons_2d nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (pos_times_ge formula-decl nil real_props nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (sl skolem-const-decl "real" polygon_membership nil)
    (len skolem-const-decl "nnreal" polygon_membership nil)
    (norm_neg formula-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mm skolem-const-decl "real" polygon_membership nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (length const-decl "posreal" segments_2d nil)
    (edge_is_edge formula-decl nil polygons_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (segment_midpoint const-decl "point_2d" segments_2d nil)
    (point_on_reverse_segment formula-decl nil segments_2d nil)
    (* const-decl "Vector" vectors_2D vectors)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (perp_right const-decl "vector_2d" vectors_cross_2d nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (vnn skolem-const-decl "point_2d" polygon_membership nil)
    (reverse_segment const-decl "segment_2d" segments_2d nil)
    (add_comm formula-decl nil vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (prev_vertex_neq_next_vertex formula-decl nil polygons_2d nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (scaled_min_edge_sep const-decl "posreal" polygon_attributes nil)
    (G skolem-const-decl "simple_polygon_2d" polygon_membership nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (min const-decl
         "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (sines_of_edge_angles const-decl "finite_set[real]"
     polygon_attributes nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (no_perp_mid_segment_intersection_1 formula-decl nil
     segments_2d_trig nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (- const-decl "Vector" vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (vcos const-decl "{x: real | -1 <= x AND x <= 1}" vectors_2d_trig
     nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (min_edge_angle_sine const-decl "{a: posreal | a <= 1 / 2}"
     polygon_attributes nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil))
   shostak))
 (nearby_perp_right_segment_not_on_perim_TCC1 0
  (nearby_perp_right_segment_not_on_perim_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "perp_right_nzvect_neq_zero")
      (("" (inst?) (("1" (ground) nil nil) ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((perp_right_nzvect_neq_zero formula-decl nil vectors_cross_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (e skolem-const-decl "segment_2d" polygon_membership nil))
   shostak
   (nearby_perp_right_segment_not_on_perim subtype
    "vectors_cross_2d.perp_right((vectors_2D.-)(polygon_membership.e`p2, polygon_membership.e`p1))"
    "Nz_vector"))
  (nearby_perp_right_segment_not_on_perim_TCC1-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (nearby_perp_right_segment_not_on_perim subtype
    "vectors_cross_2d.perp_right((vectors_2D.-)(polygon_membership.e`p2, polygon_membership.e`p1))"
    "Nz_vector")))
 (nearby_perp_right_segment_not_on_perim 0
  (nearby_perp_right_segment_not_on_perim-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (case "point_on_segment?(m, e)")
          (("1"
            (case "^(perp_left(e`p2 - e`p1)) = -^(perp_right(e`p2 - e`p1))")
            (("1" (expand "point_on_polygon_perimeter?")
              (("1" (skeep - t)
                (("1" (expand "edge_of_polygon?")
                  (("1" (skeep)
                    (("1" (lemma "min_edge_sep_all_points")
                      (("1" (inst - "G" "i" "i!1" "m" "q")
                        (("1" (ground)
                          (("1" (replace -8 -1)
                            (("1"
                              (equate (! -1 2 1)
                               "-d * c * ^(perp_right(e`p2 - e`p1))")
                              (("1"
                                (assert)
                                (("1"
                                  (equate "-(-d * c)" "d*c")
                                  (("1"
                                    (expand "inward_edge_offset_dist")
                                    (("1"
                                      (expand "scaled_min_edge_sep")
                                      (("1"
                                        (replace -9 -1)
                                        (("1"
                                          (cancel-by
                                           -1
                                           "min_edge_sep(G)")
                                          (("1"
                                            (typepred
                                             "min_inward_edge_angle_sine(G)")
                                            (("1"
                                              (cross-mult -4)
                                              (("1"
                                                (rewrite "norm_scal")
                                                (("1"
                                                  (expand "abs")
                                                  (("1"
                                                    (cancel-by
                                                     -4
                                                     "min_edge_sep(G)")
                                                    (("1"
                                                      (cross-mult -1)
                                                      (("1"
                                                        (mult-cases -1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -8)
                                (("2"
                                  (replace -7)
                                  (("2"
                                    (hide-all-but 1)
                                    (("2" (grind-with-ext) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replace -2 :dir rl)
                            (("2" (replace -1)
                              (("2"
                                (replace -8 -4)
                                (("2"
                                  (use
                                   "perp_right_point_not_on_segment")
                                  (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3"
                            (lemma
                             "prev_edge_not_crossed_by_perp_right_segment")
                            (("3"
                              (inst - "G" "e" "i" "q"
                               "^(perp_right(e`p2 - e`p1))" "d")
                              (("3" (ground) nil nil)) nil))
                            nil)
                           ("4"
                            (lemma
                             "next_edge_not_crossed_by_perp_left_segment")
                            (("4"
                              (inst - "G" "e" "i" "q"
                               "^(perp_right(e`p2 - e`p1))" "d")
                              (("4"
                                (ground)
                                (("4"
                                  (hide-all-but 1)
                                  (("4" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
             ("3" (hide-all-but 1)
              (("3" (flatten)
                (("3" (use "comps_eq")
                  (("3" (replace -1 :hide? t)
                    (("3" (typepred "e`p2")
                      (("3" (flatten) (("3" (grind-with-ext) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (replace -4 1)
            (("2" (rewrite "segment_midpoint_on_segment") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (below type-eq-decl nil naturalnumbers nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (inward_edge_offset_dist const-decl "posreal" polygon_attributes
     nil)
    (segment_midpoint const-decl "point_2d" segments_2d nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (perp_right const-decl "vector_2d" vectors_cross_2d nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (comps_eq formula-decl nil vectors_2D vectors)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (comp_zero_y formula-decl nil vectors_2D vectors)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (min_edge_sep_all_points formula-decl nil polygon_attributes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (scaled_min_edge_sep const-decl "posreal" polygon_attributes nil)
    (min_edge_sep const-decl "{D_min: posreal |
   FORALL (i, j: below(G`num_vertices)):
     j /= i AND j /= prev_index(G, i) IMPLIES
      FORALL (p: point_2d):
        point_on_segment?(p, edges_of_polygon(G)(j)) IMPLIES
         D_min <= norm(G`vertices(i) - p)}" polygon_attributes nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min_inward_edge_angle_sine const-decl "{a: posreal | a <= 1 / 2}"
     polygon_attributes nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (neg_mult formula-decl nil extra_tegies nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (le_times_le_any2 formula-decl nil extra_real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (norm_scal_norm formula-decl nil vectors_cross_2d nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (perp_right_point_not_on_segment formula-decl nil segments_2d nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (prev_edge_not_crossed_by_perp_right_segment formula-decl nil
     polygon_membership nil)
    (next_edge_not_crossed_by_perp_left_segment formula-decl nil
     polygon_membership nil)
    (- const-decl "Vector" vectors_2D vectors)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (neg_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (segment_midpoint_on_segment formula-decl nil segments_2d nil))
   shostak))
 (nearby_perp_left_segment_not_on_perim_TCC1 0
  (nearby_perp_left_segment_not_on_perim_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "perp_left_nzvect_neq_zero")
      (("" (inst?) (("1" (ground) nil nil) ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((perp_left_nzvect_neq_zero formula-decl nil vectors_cross_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (e skolem-const-decl "segment_2d" polygon_membership nil))
   shostak
   (nearby_perp_left_segment_not_on_perim subtype
    "vectors_cross_2d.perp_left((vectors_2D.-)(polygon_membership.e`p2, polygon_membership.e`p1))"
    "Nz_vector"))
  (nearby_perp_left_segment_not_on_perim_TCC1-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (nearby_perp_left_segment_not_on_perim subtype
    "vectors_cross_2d.perp_left((vectors_2D.-)(polygon_membership.e`p2, polygon_membership.e`p1))"
    "Nz_vector")))
 (nearby_perp_left_segment_not_on_perim 0
  (nearby_perp_left_segment_not_on_perim-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (case "point_on_segment?(m, e)")
          (("1"
            (case "^(perp_left(e`p2 - e`p1)) = -^(perp_right(e`p2 - e`p1))")
            (("1" (expand "point_on_polygon_perimeter?")
              (("1" (skeep - t)
                (("1" (expand "edge_of_polygon?")
                  (("1" (skeep)
                    (("1" (lemma "min_edge_sep_all_points")
                      (("1" (inst - "G" "i" "i!1" "m" "p")
                        (("1" (ground)
                          (("1" (replace -8 -1)
                            (("1"
                              (equate (! -1 2 1)
                               "-d * c * ^(perp_left(e`p2 - e`p1))")
                              (("1"
                                (assert)
                                (("1"
                                  (equate "-(-d * c)" "d*c")
                                  (("1"
                                    (expand "outward_edge_offset_dist")
                                    (("1"
                                      (expand "scaled_min_edge_sep")
                                      (("1"
                                        (replace -9 -1)
                                        (("1"
                                          (cancel-by
                                           -1
                                           "min_edge_sep(G)")
                                          (("1"
                                            (typepred
                                             "min_edge_angle_sine(G)")
                                            (("1"
                                              (cross-mult -4)
                                              (("1"
                                                (rewrite "norm_scal")
                                                (("1"
                                                  (expand "abs")
                                                  (("1"
                                                    (cancel-by
                                                     -4
                                                     "min_edge_sep(G)")
                                                    (("1"
                                                      (cross-mult -1)
                                                      (("1"
                                                        (mult-cases -1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -8)
                                (("2"
                                  (replace -7)
                                  (("2"
                                    (hide-all-but 1)
                                    (("2" (grind-with-ext) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replace -2 :dir rl)
                            (("2" (replace -1)
                              (("2"
                                (replace -8 -4)
                                (("2"
                                  (use
                                   "perp_left_point_not_on_segment")
                                  (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3"
                            (lemma
                             "prev_edge_not_crossed_by_perp_left_segment")
                            (("3"
                              (inst - "G" "e" "i" "p"
                               "^(perp_left(e`p2 - e`p1))" "d")
                              (("3" (ground) nil nil)) nil))
                            nil)
                           ("4"
                            (lemma
                             "next_edge_not_crossed_by_perp_right_segment")
                            (("4"
                              (inst - "G" "e" "i" "p"
                               "^(perp_left(e`p2 - e`p1))" "d")
                              (("4"
                                (ground)
                                (("4"
                                  (replace -3)
                                  (("4"
                                    (hide-all-but 1)
                                    (("4" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil)
             ("3" (hide-all-but 1)
              (("3" (flatten)
                (("3" (use "comps_eq")
                  (("3" (replace -1 :hide? t)
                    (("3" (typepred "e`p2")
                      (("3" (flatten) (("3" (grind-with-ext) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (replace -4 1)
            (("2" (rewrite "segment_midpoint_on_segment") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (below type-eq-decl nil naturalnumbers nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (outward_edge_offset_dist const-decl "posreal" polygon_attributes
     nil)
    (segment_midpoint const-decl "point_2d" segments_2d nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (comps_eq formula-decl nil vectors_2D vectors)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (comp_zero_y formula-decl nil vectors_2D vectors)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (min_edge_sep_all_points formula-decl nil polygon_attributes nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (scaled_min_edge_sep const-decl "posreal" polygon_attributes nil)
    (min_edge_sep const-decl "{D_min: posreal |
   FORALL (i, j: below(G`num_vertices)):
     j /= i AND j /= prev_index(G, i) IMPLIES
      FORALL (p: point_2d):
        point_on_segment?(p, edges_of_polygon(G)(j)) IMPLIES
         D_min <= norm(G`vertices(i) - p)}" polygon_attributes nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min_edge_angle_sine const-decl "{a: posreal | a <= 1 / 2}"
     polygon_attributes nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (neg_mult formula-decl nil extra_tegies nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (le_times_le_any2 formula-decl nil extra_real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (norm_scal_norm formula-decl nil vectors_cross_2d nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (perp_left_point_not_on_segment formula-decl nil segments_2d nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (prev_edge_not_crossed_by_perp_left_segment formula-decl nil
     polygon_membership nil)
    (next_edge_not_crossed_by_perp_right_segment formula-decl nil
     polygon_membership nil)
    (perp_right const-decl "vector_2d" vectors_cross_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (neg_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (segment_midpoint_on_segment formula-decl nil segments_2d nil))
   shostak))
 (rightward_offset_pt_not_on_perim 0
  (rightward_offset_pt_not_on_perim-1 nil 3874129021
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (lemma "nearby_perp_left_segment_not_on_perim")
          (("" (inst - "G" "i" "d / outward_edge_offset_dist(G)")
            (("" (assert)
              (("" (real-props)
                (("" (expand "rightward_segment_offset")
                  (("" (assert)
                    (("" (expand "in_out_edge_offset_dist")
                      (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nearby_perp_left_segment_not_on_perim formula-decl nil
     polygon_membership nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (rightward_segment_offset const-decl "point_2d" segments_2d nil)
    (in_out_edge_offset_dist const-decl "posreal" polygon_attributes
     nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (TRUE const-decl "bool" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (outward_edge_offset_dist const-decl "posreal" polygon_attributes
     nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   shostak))
 (leftward_offset_pt_not_on_perim 0
  (leftward_offset_pt_not_on_perim-1 nil 3874129021
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (lemma "nearby_perp_right_segment_not_on_perim")
          (("" (inst - "G" "i" "d / inward_edge_offset_dist(G)")
            (("" (assert)
              (("" (real-props)
                (("" (expand "leftward_segment_offset")
                  (("" (assert)
                    (("" (expand "in_out_edge_offset_dist")
                      (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nearby_perp_right_segment_not_on_perim formula-decl nil
     polygon_membership nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (leftward_segment_offset const-decl "point_2d" segments_2d nil)
    (in_out_edge_offset_dist const-decl "posreal" polygon_attributes
     nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (TRUE const-decl "bool" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (inward_edge_offset_dist const-decl "posreal" polygon_attributes
     nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   shostak))
 (on_perimeter_edge_path?_TCC1 0
  (on_perimeter_edge_path?_TCC1-2 nil 3874129021
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rem_nonneg expr-judgement "nat" polygon_membership nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (on_perimeter_edge_path? subtype
    "modulo_arithmetic.rem(polygon_membership.n)((number_fields.+)(polygon_membership.i, polygon_membership.k))"
    "naturalnumbers.below(polygon_membership.G`num_vertices)"))
  (on_perimeter_edge_path?_TCC1-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (on_perimeter_edge_path? subtype
    "modulo_arithmetic.rem(polygon_membership.n)((number_fields.+)(polygon_membership.i, polygon_membership.k))"
    "naturalnumbers.below(polygon_membership.G`num_vertices)")))
 (on_perimeter_vertex_path?_TCC1 0
  (on_perimeter_vertex_path?_TCC1-2 nil 3874129021
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rem_nonneg expr-judgement "nat" polygon_membership nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (on_perimeter_vertex_path? subtype
    "modulo_arithmetic.rem(polygon_membership.n)((number_fields.+)(polygon_membership.i, polygon_membership.k))"
    "naturalnumbers.below(polygon_membership.G`num_vertices)"))
  (on_perimeter_vertex_path?_TCC1-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (on_perimeter_vertex_path? subtype
    "modulo_arithmetic.rem(polygon_membership.n)((number_fields.+)(polygon_membership.i, polygon_membership.k))"
    "naturalnumbers.below(polygon_membership.G`num_vertices)")))
 (perimeter_segment_path_TCC1 0
  (perimeter_segment_path_TCC1-2 nil 3874129021
   ("" (skeep* + t)
    (("" (ground)
      (("" (use "perimeter_find_index_any") (("" (ground) nil nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (perimeter_find_index_any formula-decl nil polygons_2d nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (perimeter_segment_path subtype "polygon_membership.i"
    "naturalnumbers.below(polygon_membership.G`num_vertices)"))
  (perimeter_segment_path_TCC1-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (perimeter_segment_path subtype "polygon_membership.i"
    "naturalnumbers.below(polygon_membership.G`num_vertices)")))
 (perimeter_segment_path_TCC2 0
  (perimeter_segment_path_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((int_times_int_is_int application-judgement "int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (find_index_any_rec def-decl
     "{n: int | n = -1 OR 0 <= n AND n < G`num_vertices}" polygons_2d
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (find_index_any const-decl
     "{n: int | n = -1 OR 0 <= n AND n < G`num_vertices}" polygons_2d
     nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_edges_do_not_cross? const-decl "bool" polygons_2d nil)
    (is_point_on_segment? const-decl "bool" segments_2d nil)
    (is_point_on_segment? const-decl "bool" segments_2d nil)
    (* const-decl "real" vectors_2D vectors)
    (are_vectors_collinear? const-decl
     "{b: bool | b = (abs(v1 * v2) = norm(v1) * norm(v2))}"
     vectors_cross_2d nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (vector_from_point_to_point const-decl "vector_2d" vectors_cross_2d
     nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (rem_nonneg expr-judgement "nat" polygon_membership nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (perimeter_segment_path subtype
    "(# length := 1, seq := LAMBDA (i: naturalnumbers.below(1)): polygon_membership.p #)"
    "segment_endpoint_seq"))
  (perimeter_segment_path_TCC2-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (perimeter_segment_path subtype
    "(# length := 1, seq := LAMBDA (i: naturalnumbers.below(1)): polygon_membership.p #)"
    "segment_endpoint_seq")))
 (perimeter_segment_path_TCC3 0
  (perimeter_segment_path_TCC3-2 nil 3874129021
   ("" (skeep* + t)
    (("" (ground)
      (("1" (use "perimeter_find_index_any") (("1" (ground) nil nil))
        nil)
       ("2" (use "perimeter_find_index_any") (("2" (ground) nil nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (perimeter_find_index_any formula-decl nil polygons_2d nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   shostak
   (perimeter_segment_path subtype "polygon_membership.i"
    "naturalnumbers.below(polygon_membership.G`num_vertices)"))
  (perimeter_segment_path_TCC3-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (perimeter_segment_path subtype "polygon_membership.i"
    "naturalnumbers.below(polygon_membership.G`num_vertices)")))
 (perimeter_segment_path_TCC4 0
  (perimeter_segment_path_TCC4-2 nil 3874129021
   ("" (skeep* + t)
    (("" (ground)
      (("1" (use "perimeter_find_index_any") (("1" (ground) nil nil))
        nil)
       ("2" (use "perimeter_find_index_any")
        (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (perimeter_find_index_any formula-decl nil polygons_2d nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   shostak
   (perimeter_segment_path subtype "polygon_membership.len" "nat"))
  (perimeter_segment_path_TCC4-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (perimeter_segment_path subtype "polygon_membership.len" "nat")))
 (perimeter_segment_path_TCC5 0
  (perimeter_segment_path_TCC5-2 nil 3874129021
   ("" (skeep* + t)
    (("" (ground)
      (("1" (use "perimeter_find_index_any") (("1" (ground) nil nil))
        nil)
       ("2" (lemma "perimeter_find_index_any")
        (("2" (inst - "G" "q") (("2" (ground) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (perimeter_find_index_any formula-decl nil polygons_2d nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   shostak
   (perimeter_segment_path subtype "polygon_membership.j"
    "naturalnumbers.below(polygon_membership.G`num_vertices)"))
  (perimeter_segment_path_TCC5-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (perimeter_segment_path subtype "polygon_membership.j"
    "naturalnumbers.below(polygon_membership.G`num_vertices)")))
 (perimeter_segment_path_TCC6 0
  (perimeter_segment_path_TCC6-2 nil 3874129021
   ("" (skeep* + t)
    (("" (lemma "perimeter_find_index_any")
      (("" (inst-cp - "G" "p")
        (("" (inst - "G" "q")
          (("" (assert)
            (("" (split 2)
              (("1" (expand "o")
                (("1" (apply (repeat (lift-if)))
                  (("1" (expand "empty_seq")
                    (("1" (assert)
                      (("1" (case "len > 0")
                        (("1" (ground) nil nil)
                         ("2" (split -11)
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2" (flatten)
                            (("2" (split 3)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (split 1)
                                    (("1"
                                      (use "rem_diff_eq_0_shift")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (replace -2)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (ground) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep + t)
                (("2" (expand "o")
                  (("2" (expand "empty_seq")
                    (("2" (apply (repeat (lift-if)))
                      (("2" (assert)
                        (("2" (split -1)
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (split -2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma
                                       "rem_plus_1_eq_next_index_2")
                                      (("1"
                                        (inst - "G" "1 + i_1" "i")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (use "vertex_neq_next")
                                            (("1" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split -3)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (lemma
                                           "rem_plus_1_eq_next_index_2")
                                          (("1"
                                            (inst - "G" "1 + i_1" "i")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (use "vertex_neq_next")
                                                (("1"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (case-replace
                                           "1 + i_1 = len")
                                          (("1"
                                            (split -15)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (replace -3)
                                                (("1"
                                                  (rewrite
                                                   "rem_sum1"
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (rewrite
                                                     "rem_self")
                                                    (("1"
                                                      (rewrite
                                                       "rem_mod")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (replace -1 -3)
                                                (("2"
                                                  (rewrite "rem_sum1")
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (rewrite
                                                       "rem_mod")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -3)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (equate "i_1" "0" (assert))
                                        (("1"
                                          (rewrite
                                           "rem_plus_1_eq_next_index")
                                          nil
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (rewrite
                                         "rem_plus_1_eq_next_index_2")
                                        (("2"
                                          (use "vertex_neq_next")
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (split -2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (split -2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (equate "i_1" "0" (assert))
                                            (("1"
                                              (rewrite
                                               "rem_plus_1_eq_next_index")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (rewrite
                                             "rem_plus_1_eq_next_index_2")
                                            (("1"
                                              (use "vertex_neq_next")
                                              (("1" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (equate
                                             "i_1"
                                             "len"
                                             (assert))
                                            (("2"
                                              (split -13)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (replace -3 -4)
                                                  (("1"
                                                    (rewrite
                                                     "rem_sum1"
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (rewrite
                                                       "rem_self")
                                                      (("1"
                                                        (rewrite
                                                         "rem_mod")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (replace -1 -2)
                                                  (("2"
                                                    (rewrite
                                                     "rem_sum1")
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (rewrite
                                                         "rem_mod")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((perimeter_find_index_any formula-decl nil polygons_2d nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rem_diff_eq_0_shift formula-decl nil polygons_2d nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (sub_eq_args formula-decl nil vectors_2D vectors)
    (norm_zero formula-decl nil vectors_2D vectors)
    (norm_diff_pos formula-decl nil vectors_cross_2d nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (rem_sum1 formula-decl nil modulo_arithmetic nil)
    (rem_mod formula-decl nil modulo_arithmetic nil)
    (rem_self formula-decl nil modulo_arithmetic nil)
    (rem_plus_1_eq_next_index_2 formula-decl nil polygons_2d nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (vertex_neq_next formula-decl nil polygons_2d nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rem_nonneg expr-judgement "nat" polygon_membership nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (rem_plus_1_eq_next_index formula-decl nil polygons_2d nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (perimeter_segment_path subtype
    "finite_sequences[point_2d].o(finite_sequences[point_2d].o(IF polygon_membership.p = polygon_membership.G`vertices(polygons_2d.next_index(polygon_membership.G, polygon_membership.i)) THEN finite_sequences[point_2d].empty_seq ELSE (# length := 1, seq := LAMBDA (i: naturalnumbers.below(1)): polygon_membership.p #) ENDIF, (# length := polygon_membership.len, seq := LAMBDA (k: naturalnumbers.below(polygon_membership.len)): polygon_membership.G`vertices(modulo_arithmetic.rem(polygon_membership.G`num_vertices)((number_fields.+)((number_fields.+)(polygon_membership.i, 1), k))) #)), IF polygon_membership.q = polygon_membership.G`vertices(polygon_membership.j) THEN finite_sequences[point_2d].empty_seq ELSE (# length := 1, seq := LAMBDA (i: naturalnumbers.below(1)): polygon_membership.q #) ENDIF)"
    "segment_endpoint_seq"))
  (perimeter_segment_path_TCC6-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (perimeter_segment_path subtype
    "finite_sequences[point_2d].o(finite_sequences[point_2d].o(IF polygon_membership.p = polygon_membership.G`vertices(polygons_2d.next_index(polygon_membership.G, polygon_membership.i)) THEN finite_sequences[point_2d].empty_seq ELSE (# length := 1, seq := LAMBDA (i: naturalnumbers.below(1)): polygon_membership.p #) ENDIF, (# length := polygon_membership.len, seq := LAMBDA (k: naturalnumbers.below(polygon_membership.len)): polygon_membership.G`vertices(modulo_arithmetic.rem(polygon_membership.G`num_vertices)((number_fields.+)((number_fields.+)(polygon_membership.i, 1), k))) #)), IF polygon_membership.q = polygon_membership.G`vertices(polygon_membership.j) THEN finite_sequences[point_2d].empty_seq ELSE (# length := 1, seq := LAMBDA (i: naturalnumbers.below(1)): polygon_membership.q #) ENDIF)"
    "segment_endpoint_seq")))
 (initial_point_perimeter_segment_path_TCC1 0
  (initial_point_perimeter_segment_path_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (initial_point_perimeter_segment_path subtype "0"
    "below[perimeter_segment_path(G, p, q)`length]"))
  (initial_point_perimeter_segment_path_TCC1-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (initial_point_perimeter_segment_path subtype "0"
    "below[perimeter_segment_path(G, p, q)`length]")))
 (initial_point_perimeter_segment_path 0
  (initial_point_perimeter_segment_path-1 nil 3874129021
   ("" (skeep)
    (("" (expand "perimeter_segment_path")
      (("" (lift-if)
        (("" (split 1)
          (("1" (propax) nil nil)
           ("2" (flatten)
            (("2" (expand "o ")
              (("2" (expand "empty_seq")
                (("2" (apply (repeat (lift-if)))
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (hide +)
                        (("1" (use "point_on_find_index_segment")
                          (("1" (use "perimeter_find_index_any")
                            (("1" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split 2)
                        (("1" (flatten) (("1" (ground) nil nil)) nil)
                         ("2" (flatten) (("2" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_times_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (perimeter_segment_path const-decl "segment_endpoint_seq"
     polygon_membership nil)
    (O const-decl "finseq" finite_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (point_on_find_index_segment formula-decl nil polygons_2d nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (perimeter_find_index_any formula-decl nil polygons_2d nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   shostak))
 (final_point_perimeter_segment_path_TCC1 0
  (final_point_perimeter_segment_path_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (final_point_perimeter_segment_path subtype
    "(number_fields.-)(polygon_membership.S`length, 1)"
    "below[S`length]"))
  (final_point_perimeter_segment_path_TCC1-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (final_point_perimeter_segment_path subtype
    "(number_fields.-)(polygon_membership.S`length, 1)"
    "below[S`length]")))
 (final_point_perimeter_segment_path 0
  (final_point_perimeter_segment_path-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin)
      (("" (expand "perimeter_segment_path")
        (("" (lift-if)
          (("" (split -1)
            (("1" (grind) nil nil)
             ("2" (flatten)
              (("2" (split -1)
                (("1" (flatten)
                  (("1" (replace -2 :hide? t)
                    (("1" (expand "o ")
                      (("1" (expand "empty_seq")
                        (("1" (apply (repeat (lift-if)))
                          (("1" (assert)
                            (("1" (split 2)
                              (("1"
                                (flatten)
                                (("1"
                                  (rewrite "rem_sum1" :dir rl)
                                  (("1"
                                    (rewrite "rem_self")
                                    (("1"
                                      (rewrite "rem_mod")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (typepred
                                           "find_index_any(G, p)")
                                          (("2"
                                            (ground)
                                            (("2"
                                              (use
                                               "perimeter_find_index_any")
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (hide +)
                                  (("2"
                                    (use "point_on_find_index_segment")
                                    (("2"
                                      (use "perimeter_find_index_any")
                                      (("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (replace -1 3 :hide? t)
                    (("2" (expand "o")
                      (("2" (apply (repeat (lift-if)))
                        (("2" (assert)
                          (("2" (expand "empty_seq")
                            (("2" (split 3)
                              (("1"
                                (ground)
                                (("1"
                                  (rewrite "rem_sum1" :dir rl)
                                  (("1"
                                    (rewrite "rem_self")
                                    (("1"
                                      (rewrite "rem_mod")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (typepred
                                           "find_index_any(G, p)")
                                          (("2"
                                            (use
                                             "perimeter_find_index_any")
                                            (("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (use "rem_diff_eq_0_shift")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -3 1)
                                            (("1"
                                              (replace -1 1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (use
                                           "perimeter_find_index_any")
                                          (("2" (assert) nil nil))
                                          nil)
                                         ("3"
                                          (use
                                           "perimeter_find_index_any")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (rewrite "rem_sum1")
                                          (("2"
                                            (use
                                             "perimeter_find_index_any")
                                            (("2"
                                              (typepred
                                               "find_index_any(G, q)")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but
                                                     (- 2))
                                                    (("2"
                                                      (rewrite
                                                       "rem_mod")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (perimeter_segment_path const-decl "segment_endpoint_seq"
     polygon_membership nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (norm_diff_pos formula-decl nil vectors_cross_2d nil)
    (norm_zero formula-decl nil vectors_2D vectors)
    (sub_eq_args formula-decl nil vectors_2D vectors)
    (G skolem-const-decl "simple_polygon_2d" polygon_membership nil)
    (p skolem-const-decl "(point_on_polygon_perimeter?(G))"
     polygon_membership nil)
    (q skolem-const-decl "(point_on_polygon_perimeter?(G))"
     polygon_membership nil)
    (rem_diff_eq_0_shift formula-decl nil polygons_2d nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (O const-decl "finseq" finite_sequences nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (rem_nonneg expr-judgement "nat" polygon_membership nil)
    (find_index_any const-decl
     "{n: int | n = -1 OR 0 <= n AND n < G`num_vertices}" polygons_2d
     nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (rem_sum1 formula-decl nil modulo_arithmetic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (rem_mod formula-decl nil modulo_arithmetic nil)
    (perimeter_find_index_any formula-decl nil polygons_2d nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rem_self formula-decl nil modulo_arithmetic nil)
    (point_on_find_index_segment formula-decl nil polygons_2d nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   shostak))
 (perim_segment_path_on_perim 0
  (perim_segment_path_on_perim-1 nil 3874129021
   ("" (skeep*)
    (("" (expand "point_on_segment_seq?")
      (("" (ground)
        (("1" (rewrite "initial_point_perimeter_segment_path")
          (("1" (assert) nil nil)) nil)
         ("2" (skeep - t)
          (("2"
            (name-replace "path" "perimeter_segment_path(G, p, q)"
             :hide? nil)
            (("2" (expand "perimeter_segment_path")
              (("2"
                (name-replace*
                 ("ip" "find_index_any(G, p)" "iq"
                  "find_index_any(G, q)"))
                (("2"
                  (case "ip >= 0 and ip < G`num_vertices and iq >= 0 and iq < G`num_vertices")
                  (("1" (flatten)
                    (("1" (lift-if)
                      (("1" (split -7)
                        (("1" (flatten)
                          (("1" (replace -2 1 :dir rl)
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (flatten)
                          (("2" (split -1)
                            (("1" (flatten)
                              (("1"
                                (hide-all-but -1)
                                (("1"
                                  (expand "ip")
                                  (("1"
                                    (use "point_on_find_index_segment")
                                    (("1"
                                      (use "perimeter_find_index_any")
                                      (("1" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (replace -1 - :dir rl :hide? t)
                                (("2"
                                  (expand "o")
                                  (("2"
                                    (expand "empty_seq")
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (split -7)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (split -10)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (split -2)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (equate
                                                         "i"
                                                         "0"
                                                         (assert))
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (rewrite
                                                             "rem_plus_1_eq_next_index")
                                                            (("1"
                                                              (expand
                                                               "point_on_polygon_perimeter?")
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "edges_of_polygon(G)(ip)")
                                                                (("1"
                                                                  (lemma
                                                                   "point_on_subsegment")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "u"
                                                                     "(# p1 := p, p2 := G`vertices(next_index(G, ip)) #)"
                                                                     "edges_of_polygon(G)(ip)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "subsegment?")
                                                                          (("2"
                                                                            (split
                                                                             1)
                                                                            (("1"
                                                                              (lemma
                                                                               "point_on_find_index_segment")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "G"
                                                                                 "p")
                                                                                (("1"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (ground)
                                                          (("1"
                                                            (lemma
                                                             "point_on_segment_rem_endpoints_2")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "G"
                                                               "u"
                                                               "i"
                                                               "ip")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "point_on_segment_rem_endpoints_2")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "G"
                                                               "u"
                                                               "i"
                                                               "ip")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (expand
                                                             "point_on_polygon_perimeter?")
                                                            (("3"
                                                              (name-replace
                                                               "k"
                                                               "rem(G`num_vertices)(i + ip)"
                                                               :hide?
                                                               nil)
                                                              (("3"
                                                                (inst
                                                                 +
                                                                 "edges_of_polygon(G)(k)")
                                                                (("3"
                                                                  (lemma
                                                                   "point_on_subsegment")
                                                                  (("3"
                                                                    (inst
                                                                     -
                                                                     "u"
                                                                     "(# p1 := G`vertices(k), p2 := q #)"
                                                                     "edges_of_polygon(G)(k)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "subsegment?")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lemma
                                                                               "point_on_find_index_segment")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "G"
                                                                                 "q")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (equate
                                                                                       "rem(G`num_vertices)(i + ip)"
                                                                                       "iq")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (equate
                                                                                         "i"
                                                                                         "G`num_vertices"
                                                                                         (assert))
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "rem_sum1"
                                                                                             -2
                                                                                             :dir
                                                                                             rl)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "rem_self")
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "rem_mod"
                                                                                                 -2)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (ground)
                                                                      (("2"
                                                                        (equate
                                                                         "i"
                                                                         "G`num_vertices"
                                                                         (assert))
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (rewrite
                                                                             "rem_sum1"
                                                                             -2
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (rewrite
                                                                               "rem_self")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "rem_mod"
                                                                                 -2)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (lift-if)
                                            (("2"
                                              (split -8)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (split -2)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (equate
                                                             "i"
                                                             "0"
                                                             (assert))
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (split
                                                                   -4)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "rem_plus_1_eq_next_index")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "G"
                                                                           "ip")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             :hide?
                                                                             t)
                                                                            (("1"
                                                                              (lemma
                                                                               "point_on_subsegment")
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "u"
                                                                                 "(# p1 := p, p2 := G`vertices(next_index(G, ip)) #)"
                                                                                 "edges_of_polygon(G)(ip)")
                                                                                (("1"
                                                                                  (expand
                                                                                   "point_on_polygon_perimeter?")
                                                                                  (("1"
                                                                                    (inst
                                                                                     +
                                                                                     "edges_of_polygon(G)(ip)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (split
                                                                                         1)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "subsegment?")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "point_on_find_index_segment")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "G"
                                                                                                 "p")
                                                                                                (("2"
                                                                                                  (ground)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (split
                                                                       -2)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (lemma
                                                                           "rem_plus_1_eq_next_index")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "G"
                                                                             "ip")
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               :hide?
                                                                               t)
                                                                              (("1"
                                                                                (lemma
                                                                                 "point_on_subsegment")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "u"
                                                                                   "(# p1 := p, p2 := G`vertices(next_index(G, ip)) #)"
                                                                                   "edges_of_polygon(G)(ip)")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "point_on_polygon_perimeter?")
                                                                                    (("1"
                                                                                      (inst
                                                                                       +
                                                                                       "edges_of_polygon(G)(ip)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (split
                                                                                           1)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "subsegment?")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "point_on_find_index_segment")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "G"
                                                                                                   "p")
                                                                                                  (("2"
                                                                                                    (ground)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (use
                                                                           "rem_diff_eq_0_shift")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lemma
                                                                               "point_on_subsegment")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "u"
                                                                                 "(# p1 := p, p2 := q #)"
                                                                                 "edges_of_polygon(G)(iq)")
                                                                                (("2"
                                                                                  (expand
                                                                                   "point_on_polygon_perimeter?")
                                                                                  (("2"
                                                                                    (inst
                                                                                     +
                                                                                     "edges_of_polygon(G)(iq)")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (split
                                                                                         1)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "subsegment?")
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "point_on_find_index_segment")
                                                                                            (("2"
                                                                                              (inst-cp
                                                                                               -
                                                                                               "G"
                                                                                               "p")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "G"
                                                                                                 "q")
                                                                                                (("2"
                                                                                                  (ground)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (lemma
                                                                   "point_on_segment_rem_endpoints_2")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "G"
                                                                     "u"
                                                                     "i"
                                                                     "ip")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (split
                                                                     -3)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (case
                                                                         "i = rem(G`num_vertices)(iq - ip)")
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           -2)
                                                                          (("1"
                                                                            (rewrite
                                                                             "rem_sum1")
                                                                            (("1"
                                                                              (rewrite
                                                                               "rem_mod"
                                                                               -2)
                                                                              (("1"
                                                                                (use
                                                                                 "point_on_find_index_segment")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "point_on_polygon_perimeter?")
                                                                                      (("1"
                                                                                        (inst
                                                                                         +
                                                                                         "edges_of_polygon(G)(iq)")
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "point_on_subsegment")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -
                                                                                             "u"
                                                                                             "(# p1 := G`vertices(iq), p2 := q #)"
                                                                                             "edges_of_polygon(G)(iq)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (split
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "subsegment?")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -3)
                    (("2" (lemma "perimeter_find_index_any")
                      (("2" (inst-cp - "G" "p")
                        (("2" (inst - "G" "q")
                          (("2" (lemma "point_on_find_index_segment")
                            (("2" (inst-cp - "G" "p")
                              (("2"
                                (inst - "G" "q")
                                (("2"
                                  (typepred "ip")
                                  (("2"
                                    (typepred "iq")
                                    (("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((point_on_segment_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (rem_diff_eq_0_shift formula-decl nil polygons_2d nil)
    (point_on_segment_rem_endpoints_2 formula-decl nil polygons_2d nil)
    (rem_self formula-decl nil modulo_arithmetic nil)
    (rem_mod formula-decl nil modulo_arithmetic nil)
    (rem_sum1 formula-decl nil modulo_arithmetic nil)
    (vertex_on_edge formula-decl nil polygons_2d nil)
    (k skolem-const-decl
     "{r: mod(G`num_vertices) | EXISTS q: i + ip = r + G`num_vertices * q}"
     polygon_membership nil)
    (i skolem-const-decl
       "below(perimeter_segment_path(G, p, q)`length - 1)"
       polygon_membership nil)
    (p skolem-const-decl "(point_on_polygon_perimeter?(G))"
     polygon_membership nil)
    (q skolem-const-decl "(point_on_polygon_perimeter?(G))"
     polygon_membership nil)
    (G skolem-const-decl "simple_polygon_2d" polygon_membership nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (point_on_subsegment formula-decl nil segments_2d_props nil)
    (subsegment? const-decl "bool" segments_2d_props nil)
    (next_vertex_on_edge formula-decl nil polygons_2d nil)
    (edge_is_edge formula-decl nil polygons_2d nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (rem_plus_1_eq_next_index formula-decl nil polygons_2d nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (ip skolem-const-decl
     "{n: int | n = -1 OR 0 <= n AND n < G`num_vertices}"
     polygon_membership nil)
    (perimeter_find_index_any formula-decl nil polygons_2d nil)
    (point_on_find_index_segment formula-decl nil polygons_2d nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rem_nonneg expr-judgement "nat" polygon_membership nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (O const-decl "finseq" finite_sequences nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (find_index_any const-decl
     "{n: int | n = -1 OR 0 <= n AND n < G`num_vertices}" polygons_2d
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (perimeter_segment_path const-decl "segment_endpoint_seq"
     polygon_membership nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (initial_point_perimeter_segment_path formula-decl nil
     polygon_membership nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (append_path_to_s_ray_TCC1 0
  (append_path_to_s_ray_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (append_path_to_s_ray subtype
    "(number_fields.+)(1, polygon_membership.i)"
    "below[S`body`length]"))
  (append_path_to_s_ray_TCC1-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (append_path_to_s_ray subtype
    "(number_fields.+)(1, polygon_membership.i)"
    "below[S`body`length]")))
 (append_path_to_s_ray_TCC2 0
  (append_path_to_s_ray_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (append_path_to_s_ray subtype
    "(number_fields.-)(polygon_membership.R`length, 1)"
    "below[R`length]"))
  (append_path_to_s_ray_TCC2-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (append_path_to_s_ray subtype
    "(number_fields.-)(polygon_membership.R`length, 1)"
    "below[R`length]")))
 (append_path_to_s_ray_TCC3 0
  (append_path_to_s_ray_TCC3-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak (append_path_to_s_ray subtype "0" "below[S`body`length]"))
  (append_path_to_s_ray_TCC3-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (append_path_to_s_ray subtype "0" "below[S`body`length]")))
 (append_path_to_s_ray_TCC4 0
  (append_path_to_s_ray_TCC4-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (append_path_to_s_ray subtype
    "(number_fields.-)(polygon_membership.R`length, 1)" "nat"))
  (append_path_to_s_ray_TCC4-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (append_path_to_s_ray subtype
    "(number_fields.-)(polygon_membership.R`length, 1)" "nat")))
 (append_path_to_s_ray_TCC5 0
  (append_path_to_s_ray_TCC5-2 nil 3874129021
   ("" (skeep + t)
    (("" (ground)
      (("1" (grind) nil nil)
       ("2" (skeep + t) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (S skolem-const-decl
     "{S: serpentine_ray | R`seq(R`length - 1) = S`body`seq(0)}"
     polygon_membership nil)
    (R skolem-const-decl "segment_endpoint_seq" polygon_membership nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (below type-eq-decl nil nat_types nil)
    (serpentine_ray type-eq-decl nil polygon_membership nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (O const-decl "finseq" finite_sequences nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (i skolem-const-decl
       "below((R ^^ (0, R`length - 1) o S`body)`length - 1)"
       polygon_membership nil))
   shostak
   (append_path_to_s_ray subtype
    "(# body := finite_sequences[point_2d].o(finite_sequences[point_2d].^^(polygon_membership.R, (0, (number_fields.-)(polygon_membership.R`length, 1))), polygon_membership.S`body), tail := polygon_membership.S`tail #)"
    "serpentine_ray"))
  (append_path_to_s_ray_TCC5-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (append_path_to_s_ray subtype
    "(# body := finite_sequences[point_2d].o(finite_sequences[point_2d].^^(polygon_membership.R, (0, (number_fields.-)(polygon_membership.R`length, 1))), polygon_membership.S`body), tail := polygon_membership.S`tail #)"
    "serpentine_ray")))
 (truncated_serp_ray_TCC1 0
  (truncated_serp_ray_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (truncated_serp_ray subtype
    "(number_fields.-)(polygon_membership.S`body`length, 1)"
    "below[S`body`length]"))
  (truncated_serp_ray_TCC1-1 nil 3874128956 ("" (subtype-tcc) nil nil)
   nil nil
   (truncated_serp_ray subtype
    "(number_fields.-)(polygon_membership.S`body`length, 1)"
    "below[S`body`length]")))
 (truncated_serp_ray_TCC2 0
  (truncated_serp_ray_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (point_on_arb_ray? const-decl "bool" vectors_cross_2d nil)
    (point_on_serp_ray? const-decl "bool" polygon_membership nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (truncated_serp_ray subtype "polygon_membership.singleton"
    "finseq[point_2d]"))
  (truncated_serp_ray_TCC2-1 nil 3874128956 ("" (subtype-tcc) nil nil)
   nil nil
   (truncated_serp_ray subtype "polygon_membership.singleton"
    "finseq[point_2d]")))
 (truncated_serp_ray_TCC3 0
  (truncated_serp_ray_TCC3-2 nil 3874129021
   ("" (skeep)
    (("" (ground)
      (("1" (grind) nil nil)
       ("2" (skeep + t)
        (("2" (typepred "S")
          (("2" (expand "o")
            (("2" (apply (repeat (lift-if)))
              (("2" (replace -5)
                (("2" (assert)
                  (("2" (split -4)
                    (("1" (flatten)
                      (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                     ("2" (flatten)
                      (("2" (case-replace "i = S`body`length - 1")
                        (("1" (skeep)
                          (("1" (replace -2)
                            (("1" (hide-all-but -7)
                              (("1"
                                (cancel-add -1)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (O const-decl "finseq" finite_sequences nil)
    (serpentine_ray type-eq-decl nil polygon_membership nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (S skolem-const-decl "serpentine_ray" polygon_membership nil)
    (singleton skolem-const-decl "[# length: odd_posnat,
   seq: [below(1) -> {p: point_2d | point_on_serp_ray?(p, S)}] #]"
     polygon_membership nil)
    (i skolem-const-decl "below((S`body o singleton)`length - 1)"
       polygon_membership nil)
    (point_on_serp_ray? const-decl "bool" polygon_membership nil)
    (odd_posnat nonempty-type-eq-decl nil naturalnumbers nil)
    (odd? const-decl "bool" integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil nat_types nil))
   shostak
   (truncated_serp_ray subtype
    "finite_sequences[point_2d].o(polygon_membership.S`body, polygon_membership.singleton)"
    "segment_endpoint_seq"))
  (truncated_serp_ray_TCC3-1 nil 3874128956 ("" (subtype-tcc) nil nil)
   nil nil
   (truncated_serp_ray subtype
    "finite_sequences[point_2d].o(polygon_membership.S`body, polygon_membership.singleton)"
    "segment_endpoint_seq")))
 (truncated_serp_ray_TCC4 0
  (truncated_serp_ray_TCC4-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (point_on_arb_ray? const-decl "bool" vectors_cross_2d nil)
    (point_on_serp_ray? const-decl "bool" polygon_membership nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (truncated_serp_ray subtype "polygon_membership.singleton"
    "segment_endpoint_seq"))
  (truncated_serp_ray_TCC4-1 nil 3874128956 ("" (subtype-tcc) nil nil)
   nil nil
   (truncated_serp_ray subtype "polygon_membership.singleton"
    "segment_endpoint_seq")))
 (truncated_serp_ray_TCC5 0
  (truncated_serp_ray_TCC5-2 nil 3874129021
   ("" (skeep*)
    (("" (expand "nonempty?")
      (("" (replace -2 :hide? t)
        (("" (expand "empty?")
          (("" (assert)
            (("" (typepred "p")
              (("" (expand "point_on_serp_ray?")
                (("" (ground)
                  (("1" (skeep) (("1" (inst - "i") nil nil)) nil)
                   ("2" (expand "point_on_arb_ray?")
                    (("2" (skeep)
                      (("2" (case-replace "d = 0")
                        (("1" (assert)
                          (("1" (inst - "S`body`length - 2")
                            (("1" (assert)
                              (("1"
                                (expand "point_on_segment?")
                                (("1"
                                  (inst 3 "1")
                                  (("1" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst? +) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (point_on_serp_ray? const-decl "bool" polygon_membership nil)
    (serpentine_ray type-eq-decl nil polygon_membership nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (d skolem-const-decl "nonneg_real" polygon_membership nil)
    (scal_0 formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (add_zero_left formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (point_on_arb_ray? const-decl "bool" vectors_cross_2d nil)
    (member const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (truncated_serp_ray subtype "polygon_membership.J"
    "(sets[naturalnumbers.below((number_fields.-)(polygon_membership.S`body`length, 1))].nonempty?)"))
  (truncated_serp_ray_TCC5-1 nil 3874128956 ("" (subtype-tcc) nil nil)
   nil nil
   (truncated_serp_ray subtype "polygon_membership.J"
    "(sets[naturalnumbers.below((number_fields.-)(polygon_membership.S`body`length, 1))].nonempty?)")))
 (truncated_serp_ray_TCC6 0
  (truncated_serp_ray_TCC6-2 nil 3874129021
   ("" (skeep* + t)
    (("" (ground)
      (("1" (grind) nil nil)
       ("2" (skeep + t)
        (("2" (expand "^")
          (("2" (inst? -) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (S skolem-const-decl "serpentine_ray" polygon_membership nil)
    (J skolem-const-decl "[below(S`body`length - 1) -> bool]"
     polygon_membership nil)
    (i skolem-const-decl "(J)" polygon_membership nil)
    (i_1 skolem-const-decl "below((S`body ^ (0, i))`length - 1)"
     polygon_membership nil)
    (below type-eq-decl nil nat_types nil)
    (serpentine_ray type-eq-decl nil polygon_membership nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (truncated_serp_ray subtype
    "finite_sequences[point_2d].^(polygon_membership.S`body, (0, polygon_membership.i))"
    "segment_endpoint_seq"))
  (truncated_serp_ray_TCC6-1 nil 3874128956 ("" (subtype-tcc) nil nil)
   nil nil
   (truncated_serp_ray subtype
    "finite_sequences[point_2d].^(polygon_membership.S`body, (0, polygon_membership.i))"
    "segment_endpoint_seq")))
 (truncated_serp_ray_TCC7 0
  (truncated_serp_ray_TCC7-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (point_on_arb_ray? const-decl "bool" vectors_cross_2d nil)
    (point_on_serp_ray? const-decl "bool" polygon_membership nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (truncated_serp_ray subtype "polygon_membership.singleton"
    "finseq[point_2d]"))
  (truncated_serp_ray_TCC7-1 nil 3874128956 ("" (subtype-tcc) nil nil)
   nil nil
   (truncated_serp_ray subtype "polygon_membership.singleton"
    "finseq[point_2d]")))
 (truncated_serp_ray_TCC8 0
  (truncated_serp_ray_TCC8-2 nil 3874129021
   ("" (skeep* + t)
    (("" (ground)
      (("1" (grind) nil nil)
       ("2" (skeep + t) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (O const-decl "finseq" finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (point_on_arb_ray? const-decl "bool" vectors_cross_2d nil)
    (point_on_serp_ray? const-decl "bool" polygon_membership nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (serpentine_ray type-eq-decl nil polygon_membership nil)
    (below type-eq-decl nil nat_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (odd? const-decl "bool" integers nil)
    (odd_posnat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (truncated_serp_ray subtype
    "finite_sequences[point_2d].o(finite_sequences[point_2d].^(polygon_membership.S`body, (0, polygon_membership.i)), polygon_membership.singleton)"
    "segment_endpoint_seq"))
  (truncated_serp_ray_TCC8-1 nil 3874128956 ("" (subtype-tcc) nil nil)
   nil nil
   (truncated_serp_ray subtype
    "finite_sequences[point_2d].o(finite_sequences[point_2d].^(polygon_membership.S`body, (0, polygon_membership.i)), polygon_membership.singleton)"
    "segment_endpoint_seq")))
 (initial_point_append_path_to_s_ray_TCC1 0
  (initial_point_append_path_to_s_ray_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (initial_point_append_path_to_s_ray subtype "0"
    "below[append_path_to_s_ray(R, S)`body`length]"))
  (initial_point_append_path_to_s_ray_TCC1-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (initial_point_append_path_to_s_ray subtype "0"
    "below[append_path_to_s_ray(R, S)`body`length]")))
 (initial_point_append_path_to_s_ray_TCC2 0
  (initial_point_append_path_to_s_ray_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (initial_point_append_path_to_s_ray subtype "0" "below[R`length]"))
  (initial_point_append_path_to_s_ray_TCC2-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (initial_point_append_path_to_s_ray subtype "0" "below[R`length]")))
 (initial_point_append_path_to_s_ray 0
  (initial_point_append_path_to_s_ray-1 nil 3874129021
   ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (serpentine_ray type-eq-decl nil polygon_membership nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (append_path_to_s_ray const-decl "serpentine_ray"
     polygon_membership nil))
   shostak))
 (append_outside_seq_to_s_ray 0
  (append_outside_seq_to_s_ray-1 nil 3874129021
   ("" (skeep)
    (("" (expand "append_path_to_s_ray")
      (("" (expand "serp_ray_outside?")
        (("" (ground)
          (("1" (skeep + t)
            (("1" (case "i < R`length - 1")
              (("1" (inst -5 "p")
                (("1" (ground)
                  (("1" (expand "point_on_segment_seq?")
                    (("1" (inst + "i")
                      (("1" (hide-all-but (-1 -3 1))
                        (("1" (expand "^^")
                          (("1" (expand "o ")
                            (("1" (expand "min")
                              (("1"
                                (lift-if)
                                (("1" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst -5 "i - R`length + 1" "p")
                (("1" (expand "^^")
                  (("1" (expand "min")
                    (("1" (typepred "R")
                      (("1" (expand "o ")
                        (("1" (assert)
                          (("1" (apply (repeat (lift-if)))
                            (("1" (expand "empty_seq")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-1 +)) (("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (inst -4 "d")
              (("2" (hide -2 -3) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((append_path_to_s_ray const-decl "serpentine_ray"
     polygon_membership nil)
    (serpentine_ray type-eq-decl nil polygon_membership nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (point_on_segment_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (i skolem-const-decl
       "below((R ^^ (0, R`length - 1) o S`body)`length - 1)"
       polygon_membership nil)
    (S skolem-const-decl
     "{S: serpentine_ray | R`seq(R`length - 1) = S`body`seq(0)}"
     polygon_membership nil)
    (R skolem-const-decl "segment_endpoint_seq" polygon_membership nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (serp_ray_outside? const-decl "bool" polygon_membership nil))
   shostak))
 (initial_point_of_truncated_s_ray_TCC1 0
  (initial_point_of_truncated_s_ray_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (initial_point_of_truncated_s_ray subtype "0"
    "below[truncated_serp_ray(S, p)`length]"))
  (initial_point_of_truncated_s_ray_TCC1-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (initial_point_of_truncated_s_ray subtype "0"
    "below[truncated_serp_ray(S, p)`length]")))
 (initial_point_of_truncated_s_ray 0
  (initial_point_of_truncated_s_ray-1 nil 3874129021
   ("" (skeep + t)
    (("" (expand "truncated_serp_ray")
      (("" (expand "o")
        (("" (expand "^")
          (("" (apply (repeat (lift-if)))
            (("" (split 1)
              (("1" (propax) nil nil)
               ("2" (flatten)
                (("2" (split 2)
                  (("1" (flatten)
                    (("1" (expand "point_on_serp_ray?")
                      (("1" (ground)
                        (("1" (skeep) nil nil)
                         ("2" (expand "point_on_arb_ray?")
                          (("2" (skeep)
                            (("2" (case-replace "d=0")
                              (("1" (assert) nil nil)
                               ("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (ground)
                    (("2" (expand "min" 1) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((truncated_serp_ray const-decl "segment_endpoint_seq"
     polygon_membership nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (^ const-decl "finseq" finite_sequences nil)
    (point_on_serp_ray? const-decl "bool" polygon_membership nil)
    (point_on_arb_ray? const-decl "bool" vectors_cross_2d nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors)
    (d skolem-const-decl "nonneg_real" polygon_membership nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (O const-decl "finseq" finite_sequences nil))
   shostak))
 (point_on_truncated_s_ray_on_s_ray 0
  (point_on_truncated_s_ray_on_s_ray-1 nil 3874129021
   ("" (skeep + t)
    (("" (skeep)
      (("" (expand "point_on_segment_seq?")
        (("" (ground)
          (("1" (use "initial_point_of_truncated_s_ray")
            (("1" (expand "point_on_serp_ray?" +)
              (("1" (flatten)
                (("1" (case "S`body`length = 1")
                  (("1" (expand "point_on_arb_ray?")
                    (("1" (inst 2 "0") (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (inst + "0")
                    (("1" (expand "point_on_segment?")
                      (("1" (inst + "0") (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep - t)
            (("2" (expand "point_on_serp_ray?")
              (("2" (flatten)
                (("2"
                  (name-replace "R" "truncated_serp_ray(S, p)" :hide?
                   nil)
                  (("2" (expand "truncated_serp_ray")
                    (("2" (lift-if)
                      (("2" (split -1)
                        (("1" (flatten)
                          (("1" (expand "o")
                            (("1" (assert)
                              (("1"
                                (replace -2 :dir rl)
                                (("1"
                                  (assert)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (split -4)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (skeep -3)
                                          (("1"
                                            (inst + "i")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (skeep -2)
                                          (("2"
                                            (case
                                             "i = S`body`length - 1")
                                            (("1"
                                              (rewrite
                                               "point_on_segment_has_offset")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (replace -4 -2)
                                                  (("1"
                                                    (replace -1 -2)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "point_on_arb_ray?"
                                                         +)
                                                        (("1"
                                                          (inst? 4)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (replace -2 -1)
                                                  (("2"
                                                    (replace
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (hide-all-but -4)
                                                      (("2"
                                                        (move-terms
                                                         -1
                                                         r
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (split -1)
                            (("1" (flatten)
                              (("1"
                                (replace -2 :dir rl)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (name-replace
                                 "J"
                                 "{j: below(S`body`length - 1) |
                     point_on_segment?(p,
                                       (# p1 := S`body`seq(j),
                                          p2 := S`body`seq(1 + j) #))}"
                                 :hide?
                                 nil)
                                (("1"
                                  (case "empty?(J)")
                                  (("1"
                                    (replace -2 -1 :dir rl)
                                    (("1"
                                      (expand "empty?")
                                      (("1"
                                        (split -8)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst - "i!1")
                                            (("1"
                                              (expand "member")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand
                                           "point_on_arb_ray?"
                                           -)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (case-replace "d=0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst
                                                   -
                                                   "S`body`length - 2")
                                                  (("1"
                                                    (expand
                                                     "point_on_segment?")
                                                    (("1"
                                                      (inst 1 "1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst? +)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (name-replace
                                     "k"
                                     "choose[below(S`body`length - 1)](J)"
                                     :hide?
                                     nil)
                                    (("1"
                                      (split -3)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (replace -2 :dir rl)
                                          (("1"
                                            (expand "^" (-5 -6))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst 5 "i")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (replace -1 :dir rl)
                                          (("2"
                                            (expand "o")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (expand "^" (-4 -5))
                                                  (("2"
                                                    (split -5)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (inst 6 "i")
                                                        (("1"
                                                          (expand
                                                           "min")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand "min")
                                                        (("2"
                                                          (use
                                                           "choose_member[below(S`body`length - 1)]")
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (replace
                                                               -4)
                                                              (("1"
                                                                (replace
                                                                 -5
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (expand
                                                                   "member")
                                                                  (("1"
                                                                    (equate
                                                                     "k"
                                                                     "i"
                                                                     (assert))
                                                                    (("1"
                                                                      (inst
                                                                       7
                                                                       "i")
                                                                      (("1"
                                                                        (lemma
                                                                         "point_on_subsegment")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "q"
                                                                           "(# p1 := S`body`seq(i), p2 := p #)"
                                                                           "(# p1 := S`body`seq(i), p2 := S`body`seq(1 + i) #)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "subsegment?")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split
                                                                                   1)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "point_on_segment?"
                                                                                     1)
                                                                                    (("2"
                                                                                      (inst
                                                                                       +
                                                                                       "0")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (inst
                                                                             -8
                                                                             "i")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (flatten)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "nonempty?")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-5 1))
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst - "j")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors)
    (point_on_arb_ray? const-decl "bool" vectors_cross_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (scal_1 formula-decl nil vectors_2D vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (S skolem-const-decl "serpentine_ray" polygon_membership nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (serpentine_ray type-eq-decl nil polygon_membership nil)
    (point_on_serp_ray? const-decl "bool" polygon_membership nil)
    (initial_point_of_truncated_s_ray formula-decl nil
     polygon_membership nil)
    (below type-eq-decl nil nat_types nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (truncated_serp_ray const-decl "segment_endpoint_seq"
     polygon_membership nil)
    (set type-eq-decl nil sets nil) (empty? const-decl "bool" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (add_zero_left formula-decl nil vectors_2D vectors)
    (d skolem-const-decl "nonneg_real" polygon_membership nil)
    (member const-decl "bool" sets nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (choose_member formula-decl nil sets_lemmas nil)
    (subsegment? const-decl "bool" segments_2d_props nil)
    (point_on_subsegment formula-decl nil segments_2d_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (i skolem-const-decl "below(truncated_serp_ray(S, p)`length - 1)"
       polygon_membership nil)
    (p skolem-const-decl "{p: point_2d | point_on_serp_ray?(p, S)}"
     polygon_membership nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (point_on_segment_has_offset formula-decl nil segments_2d nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (add_cancel formula-decl nil vectors_2D vectors)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (sub_eq_args formula-decl nil vectors_2D vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (O const-decl "finseq" finite_sequences nil)
    (point_on_segment_seq? const-decl "bool" segment_endpoint_sequences
     nil))
   shostak))
 (truncated_s_ray_outside 0
  (truncated_s_ray_outside-1 nil 3874129021
   ("" (skeep)
    (("" (expand "segment_seq_outside?")
      (("" (skeep)
        (("" (use "point_on_truncated_s_ray_on_s_ray")
          (("" (assert)
            (("" (lemma "downstream_point_outside")
              (("" (inst - "G" "S")
                (("" (assert)
                  (("" (inst?) (("" (ground) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((segment_seq_outside? const-decl "bool" polygon_membership nil)
    (point_on_truncated_s_ray_on_s_ray formula-decl nil
     polygon_membership nil)
    (point_on_serp_ray? const-decl "bool" polygon_membership nil)
    (serpentine_ray type-eq-decl nil polygon_membership nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (downstream_point_outside formula-decl nil polygon_membership nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil))
   shostak))
 (point_in_polygon_conds_equiv_horiz_TCC1 0
  (point_in_polygon_conds_equiv_horiz_TCC1-1 nil 3874423279
   ("" (subtype-tcc) nil nil)
   ((norm const-decl "nnreal" vectors_2D vectors)
    (sqrt_1 formula-decl nil sqrt reals)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors))
   nil
   (point_in_polygon_conds_equiv_horiz subtype "(# x := 1, y := 0 #)"
    "Normalized")))
 (point_in_polygon_conds_equiv_horiz 0
  (point_in_polygon_conds_equiv_horiz-1 nil 3874423396
   ("" (skeep)
    (("" (expand "point_in_polygon?")
      (("" (expand "point_in_polygon_arb?")
        ((""
          (equate "card(arb_crossing_set(p, (# x := 1, y := 0 #), G))"
           "card(right_crossing_set(p, G))")
          (("1" (assert) nil nil)
           ("2" (hide 2)
            (("2" (rewrite "card_eq_bij[point_2d, real]")
              (("2"
                (inst +
                 "lambda (q: (arb_crossing_set(p, (# x := 1, y := 0 #), G))): q`x")
                (("1" (expand "bijective?")
                  (("1" (ground)
                    (("1" (expand "injective?")
                      (("1" (skeep + t)
                        (("1" (expand "arb_crossing_set")
                          (("1" (flatten)
                            (("1" (expand "point_on_arb_ray?")
                              (("1"
                                (skeep*)
                                (("1"
                                  (apply-extensionality :hide? t)
                                  (("1"
                                    (hide -2 -4)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "surjective?")
                      (("2" (skeep + t)
                        (("2" (expand "right_crossing_set")
                          (("2" (skeep)
                            (("2" (inst?)
                              (("1" (assert) nil nil)
                               ("2"
                                (expand "arb_crossing_set")
                                (("2"
                                  (ground)
                                  (("1"
                                    (hide -3)
                                    (("1"
                                      (expand "point_on_ray?")
                                      (("1"
                                        (expand "point_on_arb_ray?")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (inst + "p_1`x - p`x")
                                            (("1"
                                              (grind-with-ext)
                                              nil
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "counted_crossing?")
                                    (("2"
                                      (expand "counted_crossing_arb?")
                                      (("2"
                                        (ground)
                                        (("1"
                                          (expand
                                           "adjacent_edges_counted?")
                                          (("1"
                                            (expand
                                             "count_adjacent_edges?")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "cross")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep + t)
                  (("2" (expand "arb_crossing_set")
                    (("2" (flatten)
                      (("2" (expand "right_crossing_set")
                        (("2" (inst + "q")
                          (("2" (ground)
                            (("1" (hide -2) (("1" (grind) nil nil))
                              nil)
                             ("2" (expand "counted_crossing_arb?")
                              (("2"
                                (expand "counted_crossing?")
                                (("2"
                                  (ground)
                                  (("1"
                                    (expand "adjacent_edges_counted?")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (expand
                                         "count_adjacent_edges?")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (expand "cross")
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "parallel?")
                                          (("2"
                                            (expand
                                             "horizontal_segment?")
                                            (("2"
                                              (inst
                                               +
                                               "s`p2`x - s`p1`x")
                                              (("1"
                                                (hide-all-but (-2 2))
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (ground)
                                                (("2"
                                                  (typepred "s`p2")
                                                  (("2"
                                                    (ground)
                                                    (("2"
                                                      (apply-extensionality
                                                       :hide?
                                                       t)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (grind) nil nil))
                nil))
              nil))
            nil)
           ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((point_in_polygon? const-decl "bool" horiz_edge_crossing nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (arb_crossing_set const-decl "finite_set[point_2d]"
     arb_direc_edge_crossing nil)
    (right_crossing_set const-decl "finite_set[real]"
     horiz_edge_crossing nil)
    (card_eq_bij formula-decl nil finite_sets_card_eq finite_sets)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sqrt_1 formula-decl nil sqrt reals)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (s skolem-const-decl "(edge_of_polygon?(G))" polygon_membership
     nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (p_1 skolem-const-decl "point_2d" polygon_membership nil)
    (point_on_ray? const-decl "bool" horiz_edge_crossing nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (counted_crossing_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (horizontal_segment? const-decl "bool" horiz_edge_crossing nil)
    (parallel? const-decl "bool" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (adjacent_edges_counted? const-decl "bool" arb_direc_edge_crossing
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (- const-decl "Vector" vectors_2D vectors)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (vertex? const-decl "pred[point_2d]" polygons_2d nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (count_adjacent_edges? const-decl "bool" horiz_edge_crossing nil)
    (counted_crossing? const-decl "bool" horiz_edge_crossing nil)
    (injective? const-decl "bool" functions nil)
    (point_on_arb_ray? const-decl "bool" vectors_cross_2d nil)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (TRUE const-decl "bool" booleans nil)
    (G skolem-const-decl "simple_polygon_2d" polygon_membership nil)
    (p skolem-const-decl "point_2d" polygon_membership nil)
    (point_in_polygon_arb? const-decl "bool" arb_direc_edge_crossing
     nil))
   nil))
 (extend_points_inside_polygon 0
  (extend_points_inside_polygon-1 nil 3874129021
   ("" (skeep*)
    (("" (lemma "point_in_polygon_conds_equiv")
      (("" (inst-cp - "p" "^(e`p2 - p)" "G")
        (("1" (inst - "q" "^(e`p2 - p)" "G")
          (("1" (assert)
            (("1" (hide -2 2)
              (("1" (expand "point_in_polygon_arb?")
                (("1" (ground)
                  (("1" (inst - "q") (("1" (assert) nil nil)) nil)
                   ("2" (lemma "before_arb_crossings_empty")
                    (("2" (inst - "p" "q" "^(e`p2 - p)" "G")
                      (("2" (ground)
                        (("1" (hide -1 -3 2 3)
                          (("1" (expand "point_on_arb_ray?")
                            (("1" (expand "point_on_segment?")
                              (("1"
                                (skeep)
                                (("1"
                                  (expand "^")
                                  (("1"
                                    (replace -4)
                                    (("1"
                                      (inst + "t*norm(e`p2-p)")
                                      (("1" (grind) nil nil)
                                       ("2" (mult-cases 1) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -1 2)
                          (("2" (apply-extensionality :hide? t)
                            (("2" (expand "emptyset")
                              (("2"
                                (expand "arb_crossing_set")
                                (("2"
                                  (expand "set_before_p")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand "point_on_arb_ray?")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst - "x!1")
                                          (("2"
                                            (expand
                                             "counted_crossing_arb?")
                                            (("2"
                                              (split -5)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (rewrite
                                                   "vertex_on_perimeter")
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (expand
                                                     "point_on_polygon_perimeter?")
                                                    (("2"
                                                      (inst?)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -2)
                                                (("2"
                                                  (use
                                                   "between_points_on_subsegment")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (split -1)
                                                      (("1"
                                                        (equate
                                                         (! -1 2)
                                                         "e")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (apply-extensionality
                                                           :hide?
                                                           t)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace -1 -2)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "abs")
                                                            (("2"
                                                              (lemma
                                                               "endpoint_norm_bound")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "q"
                                                                 "e")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "e`p2") (("2" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   ((point_in_polygon_conds_equiv formula-decl nil polygon_membership
     nil)
    (pred type-eq-decl nil defined_types nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (vertex_on_perimeter formula-decl nil horiz_edge_crossing nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (between_points_on_subsegment formula-decl nil segments_2d_props
     nil)
    (add_cancel formula-decl nil vectors_2D vectors)
    (norm_scal_norm formula-decl nil vectors_cross_2d nil)
    (endpoint_norm_bound formula-decl nil segments_2d_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (counted_crossing_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (emptyset const-decl "set" sets nil)
    (arb_crossing_set const-decl "finite_set[point_2d]"
     arb_direc_edge_crossing nil)
    (set_before_p const-decl "finite_set[point_2d]"
     arb_direc_edge_crossing nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (t skolem-const-decl "real" polygon_membership nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (pos_times_ge formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (point_on_arb_ray? const-decl "bool" vectors_cross_2d nil)
    (before_arb_crossings_empty formula-decl nil
     arb_direc_edge_crossing nil)
    (point_in_polygon_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "Vector" vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (e skolem-const-decl "segment_2d" polygon_membership nil)
    (p skolem-const-decl "point_2d" polygon_membership nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (extend_points_inside_polygon_excl 0
  (extend_points_inside_polygon_excl-1 nil 3874129021
   ("" (skeep*)
    (("" (lemma "point_in_polygon_conds_equiv")
      (("" (inst-cp - "p" "^(e`p2 - p)" "G")
        (("1" (inst - "q" "^(e`p2 - p)" "G")
          (("1" (assert)
            (("1" (hide -2 3)
              (("1" (expand "point_in_polygon_arb?")
                (("1" (ground)
                  (("1" (inst - "q") (("1" (assert) nil nil)) nil)
                   ("2" (lemma "before_arb_crossings_empty")
                    (("2" (inst - "p" "q" "^(e`p2 - p)" "G")
                      (("2" (ground)
                        (("1" (hide -1 -3 2 3)
                          (("1" (expand "point_on_arb_ray?")
                            (("1" (expand "point_on_segment?")
                              (("1"
                                (skeep)
                                (("1"
                                  (expand "^")
                                  (("1"
                                    (replace -4)
                                    (("1"
                                      (inst + "t*norm(e`p2-p)")
                                      (("1" (grind) nil nil)
                                       ("2" (mult-cases 1) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -1 2)
                          (("2" (apply-extensionality :hide? t)
                            (("2" (expand "emptyset")
                              (("2"
                                (expand "arb_crossing_set")
                                (("2"
                                  (expand "set_before_p")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand "point_on_arb_ray?")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst - "x!1")
                                          (("2"
                                            (expand
                                             "counted_crossing_arb?")
                                            (("2"
                                              (split -5)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (rewrite
                                                   "vertex_on_perimeter")
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (expand
                                                     "point_on_polygon_perimeter?")
                                                    (("2"
                                                      (inst?)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -2)
                                                (("2"
                                                  (use
                                                   "between_points_on_subsegment")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (split -1)
                                                      (("1"
                                                        (equate
                                                         (! -1 2)
                                                         "e")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (apply-extensionality
                                                           :hide?
                                                           t)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace -1 -2)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "abs")
                                                            (("2"
                                                              (lemma
                                                               "endpoint_norm_bound")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "q"
                                                                 "e")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (typepred "e`p2")
                                                (("3"
                                                  (flatten)
                                                  (("3"
                                                    (lemma
                                                     "endpoint_norm_bound")
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((point_in_polygon_conds_equiv formula-decl nil polygon_membership
     nil)
    (pred type-eq-decl nil defined_types nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (vertex_on_perimeter formula-decl nil horiz_edge_crossing nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (between_points_on_subsegment formula-decl nil segments_2d_props
     nil)
    (add_cancel formula-decl nil vectors_2D vectors)
    (norm_scal_norm formula-decl nil vectors_cross_2d nil)
    (endpoint_norm_bound formula-decl nil segments_2d_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (counted_crossing_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (emptyset const-decl "set" sets nil)
    (arb_crossing_set const-decl "finite_set[point_2d]"
     arb_direc_edge_crossing nil)
    (set_before_p const-decl "finite_set[point_2d]"
     arb_direc_edge_crossing nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (t skolem-const-decl "real" polygon_membership nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (pos_times_ge formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (point_on_arb_ray? const-decl "bool" vectors_cross_2d nil)
    (before_arb_crossings_empty formula-decl nil
     arb_direc_edge_crossing nil)
    (point_in_polygon_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "Vector" vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (e skolem-const-decl "segment_2d" polygon_membership nil)
    (p skolem-const-decl "point_2d" polygon_membership nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (extend_points_outside_polygon 0
  (extend_points_outside_polygon-1 nil 3874129021
   ("" (skeep*)
    (("" (case "p=q")
      (("1" (assert) nil nil)
       ("2" (expand "point_outside_polygon?")
        (("2" (skeep - t)
          (("2"
            (inst +
             "(# body := (# length := 1+S`body`length, seq := lambda (i: below(1+S`body`length)): if i = 0 then q else S`body`seq(i-1) endif #), tail := S`tail #)")
            (("1" (expand "serp_ray_outside?")
              (("1" (ground)
                (("1" (hide -4)
                  (("1" (skeep)
                    (("1" (lift-if)
                      (("1" (ground)
                        (("1" (hide -5 -6)
                          (("1" (inst?)
                            (("1" (ground)
                              (("1"
                                (lemma "point_on_subsegment")
                                (("1"
                                  (inst
                                   -
                                   "p!1"
                                   "(# p1 := q, p2 := S`body`seq(i_1) #)"
                                   "e")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "subsegment?")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand
                                           "point_on_segment?"
                                           1)
                                          (("1"
                                            (inst + "0")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst - "i_1 - 1" "p!1")
                          (("2" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (lift-if)
                (("2" (ground)
                  (("2" (inst - "i_1 - 1") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (skeep) (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (serp_ray_outside? const-decl "bool" polygon_membership nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (subsegment? const-decl "bool" segments_2d_props nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (scal_1 formula-decl nil vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (point_on_subsegment formula-decl nil segments_2d_props nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (q skolem-const-decl "point_2d" polygon_membership nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (serpentine_ray type-eq-decl nil polygon_membership nil)
    (S skolem-const-decl "serpentine_ray" polygon_membership nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (point_outside_polygon? const-decl "bool" polygon_membership nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (extend_points_outside_polygon_excl 0
  (extend_points_outside_polygon_excl-1 nil 3874129021
   ("" (skeep*)
    (("" (case "p=q")
      (("1" (assert) nil nil)
       ("2" (expand "point_outside_polygon?")
        (("2" (skeep - t)
          (("2"
            (inst +
             "(# body := (# length := 1+S`body`length, seq := lambda (i: below(1+S`body`length)): if i = 0 then q else S`body`seq(i-1) endif #), tail := S`tail #)")
            (("1" (expand "serp_ray_outside?")
              (("1" (ground)
                (("1" (hide -4)
                  (("1" (skeep)
                    (("1" (lift-if)
                      (("1" (ground)
                        (("1" (hide -5 -6)
                          (("1" (inst?)
                            (("1" (ground)
                              (("1"
                                (lemma "point_on_subsegment")
                                (("1"
                                  (inst
                                   -
                                   "p!1"
                                   "(# p1 := q, p2 := S`body`seq(i_1) #)"
                                   "e")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "subsegment?")
                                      (("1"
                                        (expand "point_on_segment?" 1)
                                        (("1"
                                          (inst + "0")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -2 :hide? t)
                                (("2"
                                  (replace -5 :dir rl :hide? t)
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (lemma
                                       "proper_subsegment_excludes_p1")
                                      (("2"
                                        (inst
                                         -
                                         "(# p1 := q, p2 := p #)"
                                         "e")
                                        (("2"
                                          (ground)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (replace -7)
                                              (("1"
                                                (replace -1 -4)
                                                (("1"
                                                  (expand
                                                   "point_on_segment?"
                                                   -4)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (rewrite
                                                       "scal_add_right")
                                                      (("1"
                                                        (factor
                                                         -6
                                                         r
                                                         (1 3))
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide
                                                             -7
                                                             -8)
                                                            (("1"
                                                              (hide
                                                               -1
                                                               -8)
                                                              (("1"
                                                                (both-sides
                                                                 "-"
                                                                 "e`p1"
                                                                 -5)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "d-d*t = 1")
                                                                    (("1"
                                                                      (factor
                                                                       -1
                                                                       l)
                                                                      (("1"
                                                                        (case
                                                                         "1-t <= 1")
                                                                        (("1"
                                                                          (name-replace
                                                                           "T"
                                                                           "1-t")
                                                                          (("1"
                                                                            (div-by
                                                                             -2
                                                                             "d")
                                                                            (("1"
                                                                              (case
                                                                               "1/d > 1")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (cross-mult
                                                                                 1)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (real-props)
                                                                      (("2"
                                                                        (name-replace
                                                                         "V"
                                                                         "e`p2 - e`p1")
                                                                        (("2"
                                                                          (name-replace
                                                                           "D"
                                                                           "d - d * t")
                                                                          (("2"
                                                                            (equate
                                                                             "V"
                                                                             "1*V"
                                                                             t)
                                                                            (("2"
                                                                              (use
                                                                               "scal_cancel")
                                                                              (("1"
                                                                                (ground)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "V")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind-with-ext)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "subsegment?")
                                            (("2"
                                              (expand
                                               "point_on_segment?"
                                               +)
                                              (("2"
                                                (inst + "0")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (expand
                                             "segment_endpoint?")
                                            (("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst - "i_1 - 1" "p!1")
                          (("2" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (lift-if)
                (("2" (ground)
                  (("2" (inst - "i_1 - 1") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (skeep) (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (serp_ray_outside? const-decl "bool" polygon_membership nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (subsegment? const-decl "bool" segments_2d_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (point_on_subsegment formula-decl nil segments_2d_props nil)
    (proper_subsegment_excludes_p1 formula-decl nil segments_2d_props
     nil)
    (- const-decl "Vector" vectors_2D vectors)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (scal_add_right formula-decl nil vectors_2D vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (scal_cancel formula-decl nil vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (V skolem-const-decl "Vector" polygon_membership nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (<= const-decl "bool" reals nil)
    (add_cancel formula-decl nil vectors_2D vectors)
    (scal_sub_left formula-decl nil vectors_2D vectors)
    (scal_sub_right formula-decl nil vectors_2D vectors)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint? const-decl "bool" segments_2d nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (q skolem-const-decl "point_2d" polygon_membership nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (serpentine_ray type-eq-decl nil polygon_membership nil)
    (S skolem-const-decl "serpentine_ray" polygon_membership nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (point_outside_polygon? const-decl "bool" polygon_membership nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (point_out_pts_on_non_perim_path_out_TCC1 0
  (point_out_pts_on_non_perim_path_out_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (point_out_pts_on_non_perim_path_out subtype "0" "below[S`length]"))
  (point_out_pts_on_non_perim_path_out_TCC1-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (point_out_pts_on_non_perim_path_out subtype "0"
    "below[S`length]")))
 (point_out_pts_on_non_perim_path_out 0
  (point_out_pts_on_non_perim_path_out-1 nil 3874129021
   ("" (skeep*)
    (("" (case "segment_seq_outside?(reverse_segment_seq(S), G)")
      (("1" (expand "segment_seq_outside?")
        (("1" (skeep)
          (("1" (inst - "p!1")
            (("1" (ground)
              (("1" (lemma "point_on_reverse_segment_seq")
                (("1" (inst - "p!1" "S") (("1" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (expand "segment_seq_outside?")
          (("2" (skeep)
            (("2" (expand "point_outside_polygon?")
              (("2" (skeep)
                (("2" (expand "reverse_segment_seq")
                  (("2" (expand "point_on_segment_seq?" -1)
                    (("2" (ground)
                      (("1" (replace -1)
                        (("1" (assert)
                          (("1" (inst?) (("1" (ground) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (skeep - t)
                        (("2" (case "p!1 = S`seq(S`length - 2 - i_1)")
                          (("1"
                            (name-replace "R"
                             "(# length := S`length - 1 - i_1,
                               seq := lambda (j: below(S`length - 1 - i_1)):
                                 S`seq(S`length - 2 - i_1 - j) #)")
                            (("1"
                              (inst + "append_path_to_s_ray(R, S!1)")
                              (("1"
                                (ground)
                                (("1"
                                  (use "append_outside_seq_to_s_ray")
                                  (("1"
                                    (ground)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (ground)
                                          (("1"
                                            (expand
                                             "point_on_segment_seq?")
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (replace -4 :dir rl)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst + "0")
                                                      (("1"
                                                        (expand
                                                         "point_on_segment?")
                                                        (("1"
                                                          (inst + "0")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skeep - t)
                                                  (("2"
                                                    (replace
                                                     -4
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (inst
                                                         +
                                                         "S`length - 3 - i_1 - i")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             "point_on_reverse_segment")
                                                            (("2"
                                                              (rewrite
                                                               -1
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (expand
                                                                 "reverse_segment")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite
                                   "initial_point_append_path_to_s_ray")
                                  (("2"
                                    (replace -1 :dir rl)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -1 :dir rl)
                                (("2" (assert) nil nil))
                                nil)
                               ("3"
                                (replace -1 :dir rl)
                                (("3"
                                  (assert)
                                  (("3"
                                    (skeep)
                                    (("3"
                                      (typepred "S")
                                      (("3"
                                        (inst
                                         -
                                         "S`length - 3 - i_1 - i")
                                        (("3" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (name-replace "R"
                             "(# length := S`length - i_1,
                               seq := lambda (j: below(S`length - i_1)):
                                 if j = 0 then p!1 else S`seq(S`length - 1 - i_1 - j) endif #)")
                            (("2"
                              (inst + "append_path_to_s_ray(R, S!1)")
                              (("1"
                                (ground)
                                (("1"
                                  (use "append_outside_seq_to_s_ray")
                                  (("1"
                                    (ground)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (ground)
                                          (("1"
                                            (expand
                                             "point_on_segment_seq?")
                                            (("1"
                                              (skeep - t)
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (replace -4 :dir rl)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (inst
                                                           +
                                                           "S`length - 2 - i_1 - i")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "point_on_subsegment")
                                                              (("1"
                                                                (invoke
                                                                 (inst
                                                                  -
                                                                  "p!2"
                                                                  "%1"
                                                                  "%2")
                                                                 (!
                                                                  -3
                                                                  2)
                                                                 (!
                                                                  1
                                                                  2))
                                                                (("1"
                                                                  (ground)
                                                                  (("1"
                                                                    (expand
                                                                     "subsegment?")
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (ground)
                                                                        (("1"
                                                                          (lemma
                                                                           "point_on_reverse_segment")
                                                                          (("1"
                                                                            (rewrite
                                                                             -1
                                                                             1
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (expand
                                                                               "reverse_segment")
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "point_on_segment?"
                                                                           1)
                                                                          (("2"
                                                                            (inst
                                                                             +
                                                                             "0")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "S")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "S`length - 2 - i_1 - i")
                                                                    (("2"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst
                                                           +
                                                           "S`length - 2 - i_1 - i")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "point_on_reverse_segment")
                                                              (("2"
                                                                (rewrite
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (expand
                                                                   "reverse_segment")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite
                                   "initial_point_append_path_to_s_ray")
                                  (("2"
                                    (replace -1 :dir rl)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -1 :dir rl)
                                (("2" (assert) nil nil))
                                nil)
                               ("3"
                                (replace -1 :dir rl)
                                (("3"
                                  (assert)
                                  (("3"
                                    (skeep)
                                    (("3"
                                      (lift-if)
                                      (("3"
                                        (ground)
                                        (("3"
                                          (typepred "S")
                                          (("3"
                                            (inst
                                             -
                                             "S`length - 2 - i_1 - i")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((reverse_segment_seq const-decl "segment_endpoint_seq"
     segment_endpoint_sequences nil)
    (segment_seq_outside? const-decl "bool" polygon_membership nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (point_on_reverse_segment_seq formula-decl nil
     segment_endpoint_sequences nil)
    (point_outside_polygon? const-decl "bool" polygon_membership nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (serpentine_ray type-eq-decl nil polygon_membership nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (S skolem-const-decl "segment_endpoint_seq" polygon_membership nil)
    (i_1 skolem-const-decl "below(S`length - 1)" polygon_membership
     nil)
    (R skolem-const-decl
     "[# length: int, seq: [below(S`length - 1 - i_1) -> point_2d] #]"
     polygon_membership nil)
    (S!1 skolem-const-decl "serpentine_ray" polygon_membership nil)
    (append_path_to_s_ray const-decl "serpentine_ray"
     polygon_membership nil)
    (initial_point_append_path_to_s_ray formula-decl nil
     polygon_membership nil)
    (append_outside_seq_to_s_ray formula-decl nil polygon_membership
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (reverse_segment const-decl "segment_2d" segments_2d nil)
    (point_on_reverse_segment formula-decl nil segments_2d nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (R skolem-const-decl
     "[# length: int, seq: [below(S`length - i_1) -> point_2d] #]"
     polygon_membership nil)
    (point_on_subsegment formula-decl nil segments_2d_props nil)
    (subsegment? const-decl "bool" segments_2d_props nil)
    (i skolem-const-decl "below(R`length - 1)" polygon_membership nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (point_on_segment_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (point_in_pts_on_non_perim_path_in_TCC1 0
  (point_in_pts_on_non_perim_path_in_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (point_in_pts_on_non_perim_path_in subtype "0" "below[S`length]"))
  (point_in_pts_on_non_perim_path_in_TCC1-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (point_in_pts_on_non_perim_path_in subtype "0" "below[S`length]")))
 (point_in_pts_on_non_perim_path_in 0
  (point_in_pts_on_non_perim_path_in-1 nil 3874129021
   ("" (expand "segment_seq_inside?")
    (("" (induct "n")
      (("1" (grind) nil nil) ("2" (assert) nil nil)
       ("3" (skeep)
        (("3" (case-replace "j=0")
          (("1" (hide -2 -3)
            (("1" (skeep*)
              (("1" (expand "point_on_segment_seq?")
                (("1" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (skeep*)
              (("2" (case "S`length = j+1")
                (("1" (inst - "p" "G" "S ^^ (0, S`length - 1)")
                  (("1" (expand "^^" -2 (1 2))
                    (("1" (assert)
                      (("1" (expand "min")
                        (("1" (ground)
                          (("1" (expand "point_on_segment_seq?")
                            (("1" (skeep - t)
                              (("1"
                                (expand "^^" -2 (1 2))
                                (("1"
                                  (expand "min")
                                  (("1"
                                    (case "i = S`length - 2")
                                    (("1"
                                      (inst - "S`seq(i)")
                                      (("1"
                                        (ground)
                                        (("1"
                                          (lemma
                                           "before_arb_crossings_empty")
                                          (("1"
                                            (inst
                                             -
                                             "S`seq(i)"
                                             "p!1"
                                             "^(S`seq(i + 1) - S`seq(i))"
                                             "G")
                                            (("1"
                                              (ground)
                                              (("1"
                                                (lemma
                                                 "point_in_polygon_conds_equiv")
                                                (("1"
                                                  (inst-cp
                                                   -
                                                   "S`seq(i)"
                                                   "^(S`seq(1 + i) - S`seq(i))"
                                                   "G")
                                                  (("1"
                                                    (inst
                                                     -
                                                     "p!1"
                                                     "^(S`seq(1 + i) - S`seq(i))"
                                                     "G")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "point_in_polygon_arb?")
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (inst?)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "point_on_arb_ray?")
                                                (("2"
                                                  (rewrite
                                                   "point_on_segment_has_norm_offset")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst?)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "S")
                                                    (("2"
                                                      (inst - "i")
                                                      (("2"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (apply-extensionality
                                                 :hide?
                                                 t)
                                                (("3"
                                                  (expand "emptyset")
                                                  (("3"
                                                    (expand
                                                     "set_before_p")
                                                    (("3"
                                                      (flatten)
                                                      (("3"
                                                        (expand
                                                         "arb_crossing_set")
                                                        (("3"
                                                          (flatten)
                                                          (("3"
                                                            (use
                                                             "counted_crossing_on_perimeter")
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (expand
                                                                 "point_on_arb_ray?")
                                                                (("3"
                                                                  (skeep)
                                                                  (("3"
                                                                    (replace
                                                                     -2
                                                                     -4)
                                                                    (("3"
                                                                      (assert)
                                                                      (("3"
                                                                        (expand
                                                                         "abs")
                                                                        (("3"
                                                                          (inst?)
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (inst?)
                                                                              (("3"
                                                                                (rewrite
                                                                                 "point_on_segment_has_norm_offset")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "length")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "point_on_segment_has_norm_offset")
                                                                                      (("1"
                                                                                        (skeep)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -13
                                                                                           -4)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "length")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "abs")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (typepred
                                                                                         "S")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "i")
                                                                                          (("2"
                                                                                            (ground)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (typepred
                                                                                   "S")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "i")
                                                                                    (("2"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "S")
                                              (("2"
                                                (inst - "i")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst + "i - 1")
                                          (("1"
                                            (expand "^^")
                                            (("1"
                                              (expand
                                               "point_on_segment?")
                                              (("1"
                                                (inst + "1")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "^^")
                                            (("2"
                                              (expand "min")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst - "p!1")
                                      (("2"
                                        (ground)
                                        (("2"
                                          (inst + "i")
                                          (("1"
                                            (expand "^^")
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (expand "^^")
                                            (("2"
                                              (expand "min")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (inst?)
                              (("2"
                                (ground)
                                (("2"
                                  (expand "point_on_segment_seq?")
                                  (("2"
                                    (expand "^^")
                                    (("2"
                                      (expand "min")
                                      (("2"
                                        (ground)
                                        (("1"
                                          (inst + "0")
                                          (("1"
                                            (expand
                                             "point_on_segment?")
                                            (("1"
                                              (inst + "0")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep - t)
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (expand "^^")
                                              (("2"
                                                (expand "min")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "^^")
                    (("2" (assert)
                      (("2" (expand "min")
                        (("2" (typepred "S")
                          (("2" (skeep)
                            (("2" (inst?)
                              (("2"
                                (typepred "i")
                                (("2"
                                  (expand "^^")
                                  (("2"
                                    (expand "min")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst?)
                  (("2" (inst?)
                    (("2" (ground)
                      (("2" (inst - "p!1") (("2" (ground) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (point_in_polygon? const-decl "bool" horiz_edge_crossing nil)
    (<= const-decl "bool" reals nil)
    (point_on_segment_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (S skolem-const-decl "segment_endpoint_seq" polygon_membership nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (scal_0 formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (add_zero_left formula-decl nil vectors_2D vectors)
    (before_arb_crossings_empty formula-decl nil
     arb_direc_edge_crossing nil)
    (point_in_polygon_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (point_in_polygon_conds_equiv formula-decl nil polygon_membership
     nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (point_on_segment_has_norm_offset formula-decl nil segments_2d nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (point_on_arb_ray? const-decl "bool" vectors_cross_2d nil)
    (add_cancel formula-decl nil vectors_2D vectors)
    (norm_scal_norm formula-decl nil vectors_cross_2d nil)
    (length const-decl "posreal" segments_2d nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (counted_crossing_on_perimeter formula-decl nil
     arb_direc_edge_crossing nil)
    (emptyset const-decl "set" sets nil)
    (arb_crossing_set const-decl "finite_set[point_2d]"
     arb_direc_edge_crossing nil)
    (set_before_p const-decl "finite_set[point_2d]"
     arb_direc_edge_crossing nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (i skolem-const-decl "below(S`length - 1)" polygon_membership nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (i skolem-const-decl "below((S ^^ (0, S`length - 1))`length - 1)"
       polygon_membership nil)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (i skolem-const-decl "below((S ^^ (0, S`length - 1))`length - 1)"
       polygon_membership nil)
    (segment_seq_inside? const-decl "bool" polygon_membership nil))
   shostak))
 (topleft_miter_point_in_or_out_TCC1 0
  (topleft_miter_point_in_or_out_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (use "vertex_neq_next") (("" (assert) nil nil)) nil)) nil)
   ((vertex_neq_next formula-decl nil polygons_2d nil)
    (topleft_vertex_val const-decl "real" topleft_vertex nil)
    (leftmost_vertex_val const-decl "real" topleft_vertex nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (next_prev_is_original formula-decl nil polygons_2d nil))
   shostak
   (topleft_miter_point_in_or_out subtype
    "polygon_membership.G`vertices(polygons_2d.prev_index(polygon_membership.G, polygon_membership.i))"
    "{p: vectors_cross_2d.point_2d | p /= polygon_membership.G`vertices(polygon_membership.i)}"))
  (topleft_miter_point_in_or_out_TCC1-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (topleft_miter_point_in_or_out subtype
    "polygon_membership.G`vertices(polygons_2d.prev_index(polygon_membership.G, polygon_membership.i))"
    "{p: vectors_cross_2d.point_2d | p /= polygon_membership.G`vertices(polygon_membership.i)}")))
 (topleft_miter_point_in_or_out_TCC2 0
  (topleft_miter_point_in_or_out_TCC2-2 nil 3874129021
   ("" (skeep)
    (("" (use "adjacent_edges_do_not_fold_back")
      (("" (ground) nil nil)) nil))
    nil)
   ((adjacent_edges_do_not_fold_back formula-decl nil polygons_2d nil)
    (topleft_vertex_val const-decl "real" topleft_vertex nil)
    (leftmost_vertex_val const-decl "real" topleft_vertex nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil))
   shostak
   (topleft_miter_point_in_or_out subtype
    "polygon_membership.G`vertices(polygons_2d.next_index(polygon_membership.G, polygon_membership.i))"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= polygon_membership.G`vertices(polygon_membership.i), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(polygon_membership.G`vertices(polygons_2d.prev_index(polygon_membership.G, polygon_membership.i)), polygon_membership.G`vertices(polygon_membership.i)), (vectors_2D.-)(p, polygon_membership.G`vertices(polygon_membership.i)))))}"))
  (topleft_miter_point_in_or_out_TCC2-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (topleft_miter_point_in_or_out subtype
    "polygon_membership.G`vertices(polygons_2d.next_index(polygon_membership.G, polygon_membership.i))"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= polygon_membership.G`vertices(polygon_membership.i), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(polygon_membership.G`vertices(polygons_2d.prev_index(polygon_membership.G, polygon_membership.i)), polygon_membership.G`vertices(polygon_membership.i)), (vectors_2D.-)(p, polygon_membership.G`vertices(polygon_membership.i)))))}")))
 (topleft_miter_point_in_or_out 0
  (topleft_miter_point_in_or_out-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (use "ccw_miter_pt_left_of_topleft_vtx")
          (("" (assert)
            (("" (replace -4 :dir rl)
              (("" (replace -3 :dir rl)
                (("" (ground)
                  (("1" (expand "point_outside_polygon?")
                    (("1"
                      (inst +
                       "(# body := (# length := 1, seq := lambda (i: below(1)): mp #),
                                                             tail := (-1,0) #)")
                      (("1" (expand "serp_ray_outside?")
                        (("1" (ground)
                          (("1" (skeep) nil nil)
                           ("2" (skeep)
                            (("2"
                              (lemma
                               "topleft_vertex_bounds_all_points")
                              (("2"
                                (inst - "G" "G`vertices(i)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst
                                     -
                                     "mp + d!1 * (# x := -1, y := 0 #)")
                                    (("1"
                                      (hide-all-but (-1 -5))
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "vertex?")
                                  (("2" (inst?) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep) nil nil)
                       ("3" (hide-all-but 1) (("3" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "mp = G`vertices(i)")
                    (("1" (use "miter_point_neq_vtx")
                      (("1" (ground) nil nil)
                       ("2" (expand "three_point_miniseq?")
                        (("2" (ground) nil nil)) nil))
                      nil)
                     ("2" (lemma "vertex_neq_prev")
                      (("2" (inst - "G" "i")
                        (("2" (lemma "vertex_neq_next")
                          (("2" (inst - "G" "i")
                            (("2" (ground)
                              (("2"
                                (use
                                 "seg_from_miter_point_not_on_perim")
                                (("2"
                                  (assert)
                                  (("2"
                                    (replace -4 :dir rl)
                                    (("2"
                                      (lemma
                                       "point_in_polygon_conds_equiv")
                                      (("2"
                                        (inst
                                         -
                                         "mp"
                                         "^(G`vertices(i) - mp)"
                                         "G")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand
                                             "point_in_polygon_arb?")
                                            (("2"
                                              (ground)
                                              (("1"
                                                (rewrite
                                                 "point_on_perim_iff_on_vertex_seq")
                                                (("1"
                                                  (lemma
                                                   "no_intersection_with_closed_skimming_segs")
                                                  (("1"
                                                    (inst
                                                     -
                                                     "S"
                                                     "d"
                                                     "mp")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         "miter_point_in_polygon_miter_seg_seq")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -7 1)
                                                      (("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          (("2"
                                                            (rewrite
                                                             "rem_self")
                                                            (("2"
                                                              (rewrite
                                                               "rem_mod")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case-replace
                                                 "arb_crossing_set(mp, ^(G`vertices(i) - mp), G) =
                                                     singleton(G`vertices(i))")
                                                (("1"
                                                  (rewrite
                                                   "card_singleton")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (apply-extensionality
                                                     :hide?
                                                     t)
                                                    (("2"
                                                      (expand
                                                       "singleton")
                                                      (("2"
                                                        (iff)
                                                        (("2"
                                                          (expand
                                                           "arb_crossing_set")
                                                          (("2"
                                                            (ground)
                                                            (("1"
                                                              (case
                                                               "point_on_polygon_perimeter?(G)(x!1)")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "x!1")
                                                                (("1"
                                                                  (ground)
                                                                  (("1"
                                                                    (expand
                                                                     "point_on_arb_ray?")
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (rewrite
                                                                         "point_on_segment_has_norm_offset")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "length")
                                                                              (("1"
                                                                                (lemma
                                                                                 "topleft_vertex_bounds_all_points")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "G"
                                                                                   "G`vertices(i)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "x!1")
                                                                                      (("1"
                                                                                        (ground)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -3
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "+"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "^"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (real-props)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "*"
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (move-terms
                                                                                                     -1
                                                                                                     r
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (cross-mult
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "-"
                                                                                                         -1
                                                                                                         4)
                                                                                                        (("1"
                                                                                                          (factor
                                                                                                           -1
                                                                                                           *)
                                                                                                          (("1"
                                                                                                            (mult-cases
                                                                                                             -1)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replace
                                                                                           -4
                                                                                           -1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "+"
                                                                                             -1)
                                                                                            (("2"
                                                                                              (move-terms
                                                                                               -1
                                                                                               r
                                                                                               2)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "^"
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (real-props)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "*"
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "-"
                                                                                                       -1
                                                                                                       3)
                                                                                                      (("2"
                                                                                                        (factor
                                                                                                         -1
                                                                                                         r)
                                                                                                        (("2"
                                                                                                          (cancel-by
                                                                                                           -1
                                                                                                           "G`vertices(i)`x - mp`x")
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "vertex?")
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "counted_crossing_arb?")
                                                                (("2"
                                                                  (ground)
                                                                  (("1"
                                                                    (rewrite
                                                                     "vertex_on_perimeter")
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (skeep
                                                                     -
                                                                     t)
                                                                    (("2"
                                                                      (expand
                                                                       "point_on_polygon_perimeter?")
                                                                      (("2"
                                                                        (inst
                                                                         +
                                                                         "s")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "point_on_arb_ray?")
                                                              (("2"
                                                                (inst
                                                                 +
                                                                 "norm(G`vertices(i) - mp)")
                                                                (("2"
                                                                  (expand
                                                                   "^"
                                                                   1)
                                                                  (("2"
                                                                    (real-props)
                                                                    (("2"
                                                                      (move-terms
                                                                       1
                                                                       r
                                                                       2)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (expand
                                                               "counted_crossing_arb?")
                                                              (("3"
                                                                (ground)
                                                                (("1"
                                                                  (replace
                                                                   -2)
                                                                  (("1"
                                                                    (use
                                                                     "ccw_eqv_cross_topleft_edges_neg")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "edges_of_polygon")
                                                                        (("1"
                                                                          (replace
                                                                           -7
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "adjacent_edges_counted?")
                                                                              (("1"
                                                                                (use
                                                                                 "miter_point_between_edges")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -7
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "point_between_edges?")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "between_rays?")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "edges_of_polygon")
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (inst
                                                                                               +
                                                                                               "i")
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (equate
                                                                                                   "cross(^(G`vertices(i) - mp),
            G`vertices(prev_index(G, i)) - G`vertices(i))"
                                                                                                   "cross(G`vertices(prev_index(G, i)) - G`vertices(i), ^(mp - G`vertices(i)))")
                                                                                                  (("1"
                                                                                                    (equate
                                                                                                     "cross(^(G`vertices(i) - mp),
            G`vertices(next_index(G, i)) - G`vertices(i))"
                                                                                                     "cross(G`vertices(next_index(G, i)) - G`vertices(i), ^(mp - G`vertices(i)))")
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "cross_norm_gt_0")
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "cross_norm_gt_0")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (hide-all-but
                                                                                                             (-2
                                                                                                              2))
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "^")
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "cross_scales_2")
                                                                                                                (("1"
                                                                                                                  (real-props)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         "cross_antisymmetric")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "^")
                                                                                                          (("2"
                                                                                                            (rewrite*
                                                                                                             "cross_scales_2")
                                                                                                            (("2"
                                                                                                              (rewrite
                                                                                                               "cross_diff_2")
                                                                                                              (("2"
                                                                                                                (rewrite
                                                                                                                 "norm_sym")
                                                                                                                (("2"
                                                                                                                  (real-props)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (rewrite
                                                                                                       "cross_antisymmetric")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "^")
                                                                                                        (("2"
                                                                                                          (rewrite*
                                                                                                           "cross_scales_2")
                                                                                                          (("2"
                                                                                                            (rewrite
                                                                                                             "norm_sym")
                                                                                                            (("2"
                                                                                                              (rewrite
                                                                                                               "cross_diff_2")
                                                                                                              (("2"
                                                                                                                (real-props)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "vertex?")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (leftmost_vertex_val const-decl "real" topleft_vertex nil)
    (topleft_vertex_val const-decl "real" topleft_vertex nil)
    (polygon_vertex_seq const-decl "edge_parallel_endpoint_seq"
     polygon_miter_sequences nil)
    (topleft_vertex_idx const-decl "{i: below(p`num_vertices) |
   p`vertices(i)`x = leftmost_vertex_val(p) AND
    p`vertices(i)`y = topleft_vertex_val(p)}" topleft_vertex nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (point_in_polygon? const-decl "bool" horiz_edge_crossing nil)
    (point_outside_polygon? const-decl "bool" polygon_membership nil)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (vertex_neq_prev_2 formula-decl nil polygons_2d nil)
    (vertex_neq_next_2 formula-decl nil polygons_2d nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ccw_miter_pt_left_of_topleft_vtx formula-decl nil reverse_polygons
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (FALSE const-decl "bool" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (serpentine_ray type-eq-decl nil polygon_membership nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (topleft_vertex_bounds_all_points formula-decl nil topleft_vertex
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (d!1 skolem-const-decl "nonneg_real" polygon_membership nil)
    (* const-decl "Vector" vectors_2D vectors)
    (mp skolem-const-decl "point_2d" polygon_membership nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (i skolem-const-decl "{i: below(G`num_vertices) |
   G`vertices(i)`x = leftmost_vertex_val(G) AND
    G`vertices(i)`y = topleft_vertex_val(G)}" polygon_membership nil)
    (G skolem-const-decl "simple_polygon_2d" polygon_membership nil)
    (vertex? const-decl "pred[point_2d]" polygons_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (serp_ray_outside? const-decl "bool" polygon_membership nil)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sqrt_1 formula-decl nil sqrt reals)
    (vertex_neq_prev formula-decl nil polygons_2d nil)
    (vertex_neq_next formula-decl nil polygons_2d nil)
    (vertex_on_edge formula-decl nil polygons_2d nil)
    (point_in_polygon_conds_equiv formula-decl nil polygon_membership
     nil)
    (no_intersection_with_closed_skimming_segs formula-decl nil
     miter_point_sequences nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (rem_nonneg expr-judgement "nat" polygon_membership nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (rem_mod formula-decl nil modulo_arithmetic nil)
    (rem_self formula-decl nil modulo_arithmetic nil)
    (miter_point_in_polygon_miter_seg_seq formula-decl nil
     polygon_miter_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (S skolem-const-decl "edge_parallel_endpoint_seq"
     polygon_membership nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (point_on_perim_iff_on_vertex_seq formula-decl nil
     polygon_miter_sequences nil)
    (adjacent_edges_counted? const-decl "bool" arb_direc_edge_crossing
     nil)
    (point_between_edges? const-decl "bool" polygon_attributes nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (cross_diff_2 formula-decl nil vectors_cross_2d nil)
    (div_cancel4 formula-decl nil real_props nil)
    (norm_sym formula-decl nil vectors_2D vectors)
    (minus_real_is_real application-judgement "real" reals nil)
    (cross_antisymmetric formula-decl nil vectors_cross_2d nil)
    (cross_norm_gt_0 formula-decl nil vectors_cross_2d nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (cross_scales_2 formula-decl nil vectors_cross_2d nil)
    (between_rays? const-decl "bool" between_rays nil)
    (miter_point_between_edges formula-decl nil polygon_attributes nil)
    (next_prev_is_original formula-decl nil polygons_2d nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (ccw_eqv_cross_topleft_edges_neg formula-decl nil
     polygon_attributes nil)
    (sub_eq_args formula-decl nil vectors_2D vectors)
    (div_cancel1 formula-decl nil real_props nil)
    (scal_1 formula-decl nil vectors_2D vectors)
    (length const-decl "posreal" segments_2d nil)
    (norm_diff_nonzero_2 formula-decl nil vectors_cross_2d nil)
    (div_567 skolem-const-decl "real" polygon_membership nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (norm_diff_pos formula-decl nil vectors_cross_2d nil)
    (lt_times_lt_any2 formula-decl nil extra_real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (times_div1 formula-decl nil real_props nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (point_on_segment_has_norm_offset formula-decl nil segments_2d nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (point_on_arb_ray? const-decl "bool" vectors_cross_2d nil)
    (vertex_on_perimeter formula-decl nil horiz_edge_crossing nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (counted_crossing_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (card_singleton formula-decl nil finite_sets nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (arb_crossing_set const-decl "finite_set[point_2d]"
     arb_direc_edge_crossing nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (point_in_polygon_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (seg_from_miter_point_not_on_perim formula-decl nil
     polygon_miter_sequences nil)
    (miter_point_neq_vtx formula-decl nil miter_point_sequences nil)
    (three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil))
   shostak))
 (polygon_miter_sequence_in_or_out_TCC1 0
  (polygon_miter_sequence_in_or_out_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (replace -1)
      (("" (hide -)
        (("" (expand "polygon_vertex_seq")
          (("" (rewrite "rem_self") (("" (rewrite "rem_mod") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_times_int_is_int application-judgement "int" integers nil)
    (polygon_vertex_seq const-decl "edge_parallel_endpoint_seq"
     polygon_miter_sequences nil)
    (rem_mod formula-decl nil modulo_arithmetic nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (rem_self formula-decl nil modulo_arithmetic nil))
   shostak
   (polygon_miter_sequence_in_or_out subtype "polygon_membership.S"
    "{S: segment_endpoint_sequences.edge_parallel_endpoint_seq | S`seq(0) = S`seq((number_fields.-)(S`length, 1))}"))
  (polygon_miter_sequence_in_or_out_TCC1-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (polygon_miter_sequence_in_or_out subtype "polygon_membership.S"
    "{S: segment_endpoint_sequences.edge_parallel_endpoint_seq | S`seq(0) = S`seq((number_fields.-)(S`length, 1))}")))
 (polygon_miter_sequence_in_or_out 0
  (polygon_miter_sequence_in_or_out-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (case "MS`length = G`num_vertices + 1")
          (("1" (name-replace "tli" "topleft_vertex_idx(G)")
            (("1" (name-replace "tl_mp" "MS`seq(tli)")
              (("1" (lemma "topleft_miter_point_in_or_out")
                (("1" (inst - "G" "d")
                  (("1" (skoletin*)
                    (("1" (ground)
                      (("1" (hide -1)
                        (("1" (expand "segment_seq_outside?")
                          (("1" (skeep)
                            (("1" (expand "point_on_segment_seq?")
                              (("1"
                                (skeep)
                                (("1"
                                  (case "p = mp")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (name-replace
                                     "MS_path"
                                     "(# length := 1 + rem(G`num_vertices)(i!1 - tli),
                                            seq := lambda (k: upto(rem(G`num_vertices)(i!1 - tli))):
                                                                 MS`seq(rem(G`num_vertices)(tli + k)) #)")
                                    (("1"
                                      (name-replace
                                       "last_seg"
                                       "two_point_endpt_seq(MS`seq(i!1), p)")
                                      (("1"
                                        (lemma
                                         "point_out_pts_on_non_perim_path_out")
                                        (("1"
                                          (inst
                                           -
                                           "mp"
                                           "G"
                                           "append_segment_seqs(MS_path, last_seg)")
                                          (("1"
                                            (ground)
                                            (("1"
                                              (expand
                                               "segment_seq_outside?")
                                              (("1"
                                                (inst - "p")
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (rewrite
                                                     "point_on_append_seg_seqs_on_either")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide-all-but
                                                         (-1 -13 2))
                                                        (("1"
                                                          (replace
                                                           -1
                                                           :dir
                                                           rl
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (expand
                                                             "two_point_endpt_seq")
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (expand
                                                                 "point_on_segment_seq?")
                                                                (("1"
                                                                  (ground)
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "0")
                                                                    (("1"
                                                                      (expand
                                                                       "point_on_segment?")
                                                                      (("1"
                                                                        (inst
                                                                         +
                                                                         "1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (use
                                               "initial_point_append_segment_seqs")
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (replace
                                                   -3
                                                   1
                                                   :dir
                                                   rl)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (rewrite
                                                       "rem_mod")
                                                      (("2"
                                                        (replace -14 1)
                                                        (("2"
                                                          (expand
                                                           "closed_miter_point_seq"
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "o")
                                                            (("2"
                                                              (expand
                                                               "singleton_seq")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (replace
                                                                   -15
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "polygon_vertex_seq"
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "miter_point_seq"
                                                                         1)
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (ground)
                                                                            (("1"
                                                                              (rewrite*
                                                                               "rem_mod")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-8
                                                                                  1))
                                                                                (("1"
                                                                                  (expand
                                                                                   "prev_index")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "next_index")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (rewrite
                                                                               "rem_mod")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "rem_mod")
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "rem_plus_1_eq_next_index")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "prev_index")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skeep)
                                              (("3"
                                                (use
                                                 "point_on_append_seg_seqs_on_either")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (use
                                                     "no_intersection_with_closed_skimming_segs")
                                                    (("3"
                                                      (rewrite
                                                       "point_on_perim_iff_on_vertex_seq")
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (split -1)
                                                          (("1"
                                                            (lemma
                                                             "point_on_segment_subseq")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "q"
                                                               "MS_path"
                                                               "MS"
                                                               "G`num_vertices")
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (replace
                                                                   -16
                                                                   1)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "closed_miter_point_seq")
                                                                      (("1"
                                                                        (expand
                                                                         "singleton_seq")
                                                                        (("1"
                                                                          (expand
                                                                           "o ")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   -16
                                                                   1)
                                                                  (("2"
                                                                    (replace
                                                                     -5
                                                                     1
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "segment_endpoint_subseq?")
                                                                        (("2"
                                                                          (expand
                                                                           "closed_miter_point_seq")
                                                                          (("2"
                                                                            (expand
                                                                             "singleton_seq")
                                                                            (("2"
                                                                              (expand
                                                                               "o")
                                                                              (("2"
                                                                                (inst
                                                                                 +
                                                                                 "tli")
                                                                                (("2"
                                                                                  (skeep
                                                                                   +
                                                                                   t)
                                                                                  (("2"
                                                                                    (lift-if)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "MS")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "closed_miter_point_seq")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "singleton_seq")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "o")
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "point_on_segment_on_seq")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "q"
                                                               "MS"
                                                               "i!1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "two_point_endpt_seq")
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (ground)
                                                                      (("1"
                                                                        (replace
                                                                         -2
                                                                         -3
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (expand
                                                                           "point_on_segment_seq?"
                                                                           -3)
                                                                          (("1"
                                                                            (expand
                                                                             "point_on_segment?")
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "0")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (replace
                                                                         -1
                                                                         -2
                                                                         :dir
                                                                         rl)
                                                                        (("2"
                                                                          (expand
                                                                           "point_on_segment_seq?"
                                                                           -2)
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (lemma
                                                                               "point_on_subsegment")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "q"
                                                                                 "(# p1 := MS`seq(i!1), p2 := p #)"
                                                                                 "(# p1 := MS`seq(i!1), p2 := MS`seq(1 + i!1) #)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "subsegment?")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "point_on_segment?")
                                                                                      (("1"
                                                                                        (inst
                                                                                         +
                                                                                         "0")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (typepred
                                                                                   "MS")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "i!1")
                                                                                    (("2"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-1 -2 1))
                                            (("2"
                                              (replace -2 :dir rl)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (rewrite "rem_sum1")
                                                  (("2"
                                                    (rewrite "rem_mod")
                                                    (("2"
                                                      (replace
                                                       -1
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (expand
                                                         "two_point_endpt_seq")
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (replace -2 + :dir rl)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (ground)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (lemma
                                                     "rem_add_one")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "G`num_vertices"
                                                       "i!2 + tli")
                                                      (("2"
                                                        (ground)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (typepred
                                                             "MS")
                                                            (("1"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace
                                                           -1
                                                           :hide?
                                                           t)
                                                          (("2"
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t)
                                                            (("2"
                                                              (replace
                                                               -14
                                                               -1)
                                                              (("2"
                                                                (expand
                                                                 "closed_miter_point_seq"
                                                                 -1)
                                                                (("2"
                                                                  (expand
                                                                   "o")
                                                                  (("2"
                                                                    (expand
                                                                     "singleton_seq")
                                                                    (("2"
                                                                      (expand
                                                                       "miter_point_seq"
                                                                       -1)
                                                                      (("2"
                                                                        (case-replace
                                                                         "S`length = G`num_vertices + 1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (use
                                                                             "wrapped_miter_points_neq")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (use
                                                                                 "polygon_vertex_seq_intercept")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -18
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (ground)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -2)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (equate
                                                                                               "S`seq(G`num_vertices)"
                                                                                               "S`seq(0)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replace
                                                                                                 -17
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "polygon_vertex_seq"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "rem_self")
                                                                                                    (("2"
                                                                                                      (rewrite
                                                                                                       "rem_mod")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replace
                                                                                           -17
                                                                                           1)
                                                                                          (("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (grind)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "rem_self")
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "rem_mod")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replace
                                                                           -15
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "polygon_vertex_seq"
                                                                             1)
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 1)
                        (("2" (expand "segment_seq_inside?")
                          (("2" (skeep)
                            (("2" (expand "point_on_segment_seq?")
                              (("2"
                                (skeep)
                                (("2"
                                  (case "p = mp")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (name-replace
                                     "MS_path"
                                     "(# length := 1 + rem(G`num_vertices)(i!1 - tli),
                                                      seq := lambda (k: upto(rem(G`num_vertices)(i!1 - tli))):
                                                                           MS`seq(rem(G`num_vertices)(tli + k)) #)")
                                    (("1"
                                      (name-replace
                                       "last_seg"
                                       "two_point_endpt_seq(MS`seq(i!1), p)")
                                      (("1"
                                        (lemma
                                         "point_in_pts_on_non_perim_path_in")
                                        (("1"
                                          (inst
                                           -
                                           "mp"
                                           "G"
                                           "append_segment_seqs(MS_path, last_seg)"
                                           "S`length")
                                          (("1"
                                            (ground)
                                            (("1"
                                              (expand
                                               "segment_seq_inside?")
                                              (("1"
                                                (inst - "p")
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (rewrite
                                                     "point_on_append_seg_seqs_on_either")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide-all-but
                                                         (-1 -12 2))
                                                        (("1"
                                                          (replace
                                                           -1
                                                           :dir
                                                           rl
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (expand
                                                             "two_point_endpt_seq")
                                                            (("1"
                                                              (lift-if)
                                                              (("1"
                                                                (expand
                                                                 "point_on_segment_seq?")
                                                                (("1"
                                                                  (ground)
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "0")
                                                                    (("1"
                                                                      (expand
                                                                       "point_on_segment?")
                                                                      (("1"
                                                                        (inst
                                                                         +
                                                                         "1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (use
                                               "initial_point_append_segment_seqs")
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (replace
                                                   -3
                                                   1
                                                   :dir
                                                   rl)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (rewrite
                                                       "rem_mod")
                                                      (("2"
                                                        (replace -13 1)
                                                        (("2"
                                                          (expand
                                                           "closed_miter_point_seq"
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "o")
                                                            (("2"
                                                              (expand
                                                               "singleton_seq")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (replace
                                                                   -14
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "polygon_vertex_seq"
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "miter_point_seq"
                                                                         1)
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (ground)
                                                                            (("1"
                                                                              (rewrite*
                                                                               "rem_mod")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-7
                                                                                  1))
                                                                                (("1"
                                                                                  (expand
                                                                                   "prev_index")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "next_index")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (rewrite
                                                                               "rem_mod")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "rem_mod")
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "rem_plus_1_eq_next_index")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "prev_index")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (case
                                               "S`length = G`num_vertices + 1")
                                              (("1"
                                                (replace -2 1 :dir rl)
                                                (("1"
                                                  (replace
                                                   -3
                                                   1
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (hide-all-but
                                                     (-1 1))
                                                    (("1"
                                                      (expand
                                                       "append_segment_seqs")
                                                      (("1"
                                                        (expand
                                                         "two_point_endpt_seq")
                                                        (("1"
                                                          (typepred
                                                           "rem(G`num_vertices)(i!1 - tli)")
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replace -13 1)
                                                (("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (expand
                                                     "polygon_vertex_seq")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (skeep)
                                              (("4"
                                                (use
                                                 "point_on_append_seg_seqs_on_either")
                                                (("4"
                                                  (assert)
                                                  (("4"
                                                    (use
                                                     "no_intersection_with_closed_skimming_segs")
                                                    (("4"
                                                      (rewrite
                                                       "point_on_perim_iff_on_vertex_seq")
                                                      (("4"
                                                        (assert)
                                                        (("4"
                                                          (split -1)
                                                          (("1"
                                                            (lemma
                                                             "point_on_segment_subseq")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "q"
                                                               "MS_path"
                                                               "MS"
                                                               "G`num_vertices")
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (replace
                                                                   -15
                                                                   1)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "closed_miter_point_seq")
                                                                      (("1"
                                                                        (expand
                                                                         "singleton_seq")
                                                                        (("1"
                                                                          (expand
                                                                           "o ")
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   -15
                                                                   1)
                                                                  (("2"
                                                                    (replace
                                                                     -5
                                                                     1
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "segment_endpoint_subseq?")
                                                                        (("2"
                                                                          (expand
                                                                           "closed_miter_point_seq")
                                                                          (("2"
                                                                            (expand
                                                                             "singleton_seq")
                                                                            (("2"
                                                                              (expand
                                                                               "o")
                                                                              (("2"
                                                                                (inst
                                                                                 +
                                                                                 "tli")
                                                                                (("2"
                                                                                  (skeep
                                                                                   +
                                                                                   t)
                                                                                  (("2"
                                                                                    (lift-if)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "MS")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "closed_miter_point_seq")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "singleton_seq")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "o")
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "point_on_segment_on_seq")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "q"
                                                               "MS"
                                                               "i!1")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "two_point_endpt_seq")
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (ground)
                                                                      (("1"
                                                                        (replace
                                                                         -2
                                                                         -3
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (expand
                                                                           "point_on_segment_seq?"
                                                                           -3)
                                                                          (("1"
                                                                            (expand
                                                                             "point_on_segment?")
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "0")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (replace
                                                                         -1
                                                                         -2
                                                                         :dir
                                                                         rl)
                                                                        (("2"
                                                                          (expand
                                                                           "point_on_segment_seq?"
                                                                           -2)
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (lemma
                                                                               "point_on_subsegment")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "q"
                                                                                 "(# p1 := MS`seq(i!1), p2 := p #)"
                                                                                 "(# p1 := MS`seq(i!1), p2 := MS`seq(1 + i!1) #)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "subsegment?")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "point_on_segment?")
                                                                                      (("1"
                                                                                        (inst
                                                                                         +
                                                                                         "0")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (typepred
                                                                                   "MS")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "i!1")
                                                                                    (("2"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-1 -2 1))
                                            (("2"
                                              (replace -2 :dir rl)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (rewrite "rem_sum1")
                                                  (("2"
                                                    (rewrite "rem_mod")
                                                    (("2"
                                                      (replace
                                                       -1
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (expand
                                                         "two_point_endpt_seq")
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (replace -2 + :dir rl)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (ground)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (lemma
                                                     "rem_add_one")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "G`num_vertices"
                                                       "i!2 + tli")
                                                      (("2"
                                                        (ground)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (typepred
                                                             "MS")
                                                            (("1"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace
                                                           -1
                                                           :hide?
                                                           t)
                                                          (("2"
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t)
                                                            (("2"
                                                              (replace
                                                               -13
                                                               -1)
                                                              (("2"
                                                                (expand
                                                                 "closed_miter_point_seq"
                                                                 -1)
                                                                (("2"
                                                                  (expand
                                                                   "o")
                                                                  (("2"
                                                                    (expand
                                                                     "singleton_seq")
                                                                    (("2"
                                                                      (expand
                                                                       "miter_point_seq"
                                                                       -1)
                                                                      (("2"
                                                                        (case-replace
                                                                         "S`length = G`num_vertices + 1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (use
                                                                             "wrapped_miter_points_neq")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (use
                                                                                 "polygon_vertex_seq_intercept")
                                                                                (("1"
                                                                                  (replace
                                                                                   -17
                                                                                   :dir
                                                                                   rl)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (splash
                                                                                       -2)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -3)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         (-16
                                                                                          1))
                                                                                        (("2"
                                                                                          (grind)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "rem_self")
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "rem_mod")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replace
                                                                           -14
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "polygon_vertex_seq"
                                                                             1)
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil)
           ("2" (use "length_closed_miter_point_seq")
            (("2" (replace -4)
              (("2" (expand "polygon_vertex_seq" -1 2)
                (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (polygon_vertex_seq const-decl "edge_parallel_endpoint_seq"
     polygon_miter_sequences nil)
    (<= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (segment_seq_outside? const-decl "bool" polygon_membership nil)
    (segment_seq_inside? const-decl "bool" polygon_membership nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (closed_miter_point_seq const-decl "segment_endpoint_seq"
     miter_point_sequences nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (point_on_segment_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (two_point_endpt_seq const-decl "segment_endpoint_seq"
     segment_endpoint_sequences nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (G skolem-const-decl "simple_polygon_2d" polygon_membership nil)
    (MS skolem-const-decl "segment_endpoint_seq" polygon_membership
     nil)
    (i!1 skolem-const-decl "below(MS`length - 1)" polygon_membership
     nil)
    (tli skolem-const-decl "{i: below(G`num_vertices) |
   G`vertices(i)`x = leftmost_vertex_val(G) AND
    G`vertices(i)`y = topleft_vertex_val(G)}" polygon_membership nil)
    (MS_path skolem-const-decl "[# length: posint,
   seq: [upto(rem(G`num_vertices)(i!1 - tli)) -> point_2d] #]"
     polygon_membership nil)
    (last_seg skolem-const-decl "segment_endpoint_seq"
     polygon_membership nil)
    (append_segment_seqs const-decl "segment_endpoint_seq"
     segment_endpoint_sequences nil)
    (point_on_perim_iff_on_vertex_seq formula-decl nil
     polygon_miter_sequences nil)
    (segment_endpoint_subseq? const-decl "bool"
     segment_endpoint_sequences nil)
    (point_on_segment_subseq formula-decl nil
     segment_endpoint_sequences nil)
    (point_on_subsegment formula-decl nil segments_2d_props nil)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (subsegment? const-decl "bool" segments_2d_props nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (point_on_segment_on_seq formula-decl nil
     segment_endpoint_sequences nil)
    (no_intersection_with_closed_skimming_segs formula-decl nil
     miter_point_sequences nil)
    (initial_point_append_segment_seqs formula-decl nil
     segment_endpoint_sequences nil)
    (rem_mod formula-decl nil modulo_arithmetic nil)
    (singleton_seq const-decl "{uvs: uniq_vertex_seq | uvs`length = 1}"
     vertex_list nil)
    (rem_plus_1_eq_next_index formula-decl nil polygons_2d nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (miter_point_seq const-decl "segment_endpoint_seq"
     miter_point_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (scal_0 formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (add_zero_left formula-decl nil vectors_2D vectors)
    (point_on_append_seg_seqs_on_either formula-decl nil
     segment_endpoint_sequences nil)
    (rem_sum1 formula-decl nil modulo_arithmetic nil)
    (rem_self formula-decl nil modulo_arithmetic nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (polygon_vertex_seq_intercept formula-decl nil
     polygon_miter_sequences nil)
    (wrapped_miter_points_neq formula-decl nil miter_point_sequences
     nil)
    (rem_add_one formula-decl nil modulo_arithmetic nil)
    (point_out_pts_on_non_perim_path_out formula-decl nil
     polygon_membership nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (rem_nonneg expr-judgement "nat" polygon_membership nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (i!1 skolem-const-decl "below(MS`length - 1)" polygon_membership
     nil)
    (MS_path skolem-const-decl "[# length: posint,
   seq: [upto(rem(G`num_vertices)(i!1 - tli)) -> point_2d] #]"
     polygon_membership nil)
    (last_seg skolem-const-decl "segment_endpoint_seq"
     polygon_membership nil)
    (point_in_pts_on_non_perim_path_in formula-decl nil
     polygon_membership nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (vertex_neq_next_2 formula-decl nil polygons_2d nil)
    (vertex_neq_prev_2 formula-decl nil polygons_2d nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (point_in_polygon? const-decl "bool" horiz_edge_crossing nil)
    (point_outside_polygon? const-decl "bool" polygon_membership nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (topleft_miter_point_in_or_out formula-decl nil polygon_membership
     nil)
    (leftmost_vertex_val const-decl "real" topleft_vertex nil)
    (topleft_vertex_val const-decl "real" topleft_vertex nil)
    (topleft_vertex_idx const-decl "{i: below(p`num_vertices) |
   p`vertices(i)`x = leftmost_vertex_val(p) AND
    p`vertices(i)`y = topleft_vertex_val(p)}" topleft_vertex nil)
    (length_closed_miter_point_seq formula-decl nil
     miter_point_sequences nil))
   shostak))
 (falling_edge_imp_ccw_in_or_out 0
  (falling_edge_imp_ccw_in_or_out-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (lemma "path_to_miter_pt_seq_contact_free")
          ((""
            (inst - "G" "p" "max_miter_offset(polygon_vertex_seq(G))")
            (("" (assert)
              (("" (replace -3 :dir rl)
                (("" (assert)
                  (("" (skeep)
                    ((""
                      (name-replace "d"
                       "max_miter_offset(polygon_vertex_seq(G))" :hide?
                       nil)
                      (("" (lemma "polygon_miter_sequence_in_or_out")
                        (("" (inst - "G" "d")
                          (("" (assert)
                            (("" (assert)
                              ((""
                                (name-replace
                                 "MS"
                                 "closed_miter_point_seq(polygon_vertex_seq(G), d)"
                                 :hide?
                                 nil)
                                (("1"
                                  (ground)
                                  (("1"
                                    (expand "segment_seq_outside?")
                                    (("1"
                                      (use
                                       "miter_point_in_polygon_miter_seg_seq")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -8 :dir rl)
                                          (("1"
                                            (replace -5)
                                            (("1"
                                              (inst
                                               -
                                               "S`seq(S`length - 1)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "point_out_pts_on_non_perim_path_out")
                                                  (("1"
                                                    (inst
                                                     -
                                                     "S`seq(S`length - 1)"
                                                     "G"
                                                     "reverse_segment_seq(S)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "reverse_segment_seq"
                                                         -1
                                                         1)
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (expand
                                                             "reverse_segment_seq")
                                                            (("1"
                                                              (expand
                                                               "segment_seq_outside?")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "p")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "point_on_segment_seq?")
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "S`length - 2")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           (-7
                                                                            1))
                                                                          (("1"
                                                                            (expand
                                                                             "point_on_segment?")
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "1")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skeep)
                                                            (("2"
                                                              (expand
                                                               "contact_free_path?")
                                                              (("2"
                                                                (rewrite
                                                                 "point_on_reverse_segment_seq"
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "segment_seq_inside?")
                                    (("2"
                                      (use
                                       "miter_point_in_polygon_miter_seg_seq")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replace -6 :dir rl)
                                          (("2"
                                            (replace -3)
                                            (("2"
                                              (inst
                                               -
                                               "S`seq(S`length - 1)")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma
                                                   "point_in_pts_on_non_perim_path_in")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "S`seq(S`length - 1)"
                                                     "G"
                                                     "reverse_segment_seq(S)"
                                                     "S`length")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "reverse_segment_seq"
                                                         -1
                                                         (1 2))
                                                        (("2"
                                                          (ground)
                                                          (("1"
                                                            (expand
                                                             "reverse_segment_seq")
                                                            (("1"
                                                              (expand
                                                               "segment_seq_inside?")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "p")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "point_on_segment_seq?")
                                                                    (("1"
                                                                      (inst
                                                                       +
                                                                       "S`length - 2")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "point_on_segment?")
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skeep)
                                                            (("2"
                                                              (expand
                                                               "contact_free_path?")
                                                              (("2"
                                                                (rewrite
                                                                 "point_on_reverse_segment_seq"
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (grind)
                                    (("2"
                                      (rewrite "rem_self")
                                      (("2"
                                        (rewrite "rem_mod")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (has_rightward_crossings? const-decl "bool" rightward_crossings
     nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (rightward_crossing_index const-decl "below(G`num_vertices)"
     polygon_miter_sequences nil)
    (point_in_polygon? const-decl "bool" horiz_edge_crossing nil)
    (point_outside_polygon? const-decl "bool" polygon_membership nil)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (segment_falling? const-decl "bool" segments_2d_props nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (path_to_miter_pt_seq_contact_free formula-decl nil
     polygon_miter_sequences nil)
    (rem_self formula-decl nil modulo_arithmetic nil)
    (rem_mod formula-decl nil modulo_arithmetic nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (rem_nonneg expr-judgement "nat" polygon_membership nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (miter_point_in_polygon_miter_seg_seq formula-decl nil
     polygon_miter_sequences nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (point_out_pts_on_non_perim_path_out formula-decl nil
     polygon_membership nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (add_zero_left formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (point_on_segment_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (contact_free_path? const-decl "bool" polygon_miter_sequences nil)
    (point_on_reverse_segment_seq formula-decl nil
     segment_endpoint_sequences nil)
    (reverse_segment_seq const-decl "segment_endpoint_seq"
     segment_endpoint_sequences nil)
    (segment_seq_outside? const-decl "bool" polygon_membership nil)
    (point_in_pts_on_non_perim_path_in formula-decl nil
     polygon_membership nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (segment_seq_inside? const-decl "bool" polygon_membership nil)
    (<= const-decl "bool" reals nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (closed_miter_point_seq const-decl "segment_endpoint_seq"
     miter_point_sequences nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (polygon_miter_sequence_in_or_out formula-decl nil
     polygon_membership nil)
    (polygon_vertex_seq const-decl "edge_parallel_endpoint_seq"
     polygon_miter_sequences nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil))
   shostak))
 (ccw_imp_falling_edge_in_or_out 0
  (ccw_imp_falling_edge_in_or_out-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (lemma "path_to_miter_pt_seq_contact_free")
          (("" (ground)
            (("1"
              (inst - "G" "p"
               "max_miter_offset(polygon_vertex_seq(G))")
              (("1" (assert)
                (("1" (replace -4 :dir rl)
                  (("1" (skeep)
                    (("1"
                      (name-replace "d"
                       "max_miter_offset(polygon_vertex_seq(G))" :hide?
                       nil)
                      (("1" (lemma "polygon_miter_sequence_in_or_out")
                        (("1" (inst - "G" "d")
                          (("1" (assert)
                            (("1" (assert)
                              (("1"
                                (name-replace
                                 "MS"
                                 "closed_miter_point_seq(polygon_vertex_seq(G), d)"
                                 :hide?
                                 nil)
                                (("1"
                                  (expand "segment_seq_outside?")
                                  (("1"
                                    (use
                                     "miter_point_in_polygon_miter_seg_seq")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -7 :dir rl)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (inst
                                             -
                                             "S`seq(S`length - 1)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 "point_out_pts_on_non_perim_path_out")
                                                (("1"
                                                  (inst
                                                   -
                                                   "S`seq(S`length - 1)"
                                                   "G"
                                                   "reverse_segment_seq(S)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "reverse_segment_seq"
                                                       -1
                                                       1)
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (expand
                                                           "reverse_segment_seq")
                                                          (("1"
                                                            (expand
                                                             "segment_seq_outside?")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "p")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "point_on_segment_seq?")
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "S`length - 2")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         (-6
                                                                          1))
                                                                        (("1"
                                                                          (expand
                                                                           "point_on_segment?")
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skeep)
                                                          (("2"
                                                            (expand
                                                             "contact_free_path?")
                                                            (("2"
                                                              (rewrite
                                                               "point_on_reverse_segment_seq"
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2"
              (inst - "reverse_polygon(G)" "p"
               "max_miter_offset(polygon_vertex_seq(reverse_polygon(G)))")
              (("1" (assert)
                (("1" (use "rightward_crossing_index_reverse")
                  (("1" (replace -1)
                    (("1" (replace -4 :dir rl)
                      (("1" (use "prev_index_rev_index_next")
                        (("1" (use "next_index_rev_index_prev")
                          (("1" (replace -2)
                            (("1" (ground)
                              (("1"
                                (skeep)
                                (("1"
                                  (name-replace
                                   "d"
                                   "max_miter_offset(polygon_vertex_seq(reverse_polygon(G)))")
                                  (("1"
                                    (lemma
                                     "polygon_miter_sequence_in_or_out")
                                    (("1"
                                      (inst - "reverse_polygon(G)" "d")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (rewrite
                                               "ccw_reverse_polygon"
                                               -9)
                                              nil
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (name-replace
                                               "MS"
                                               "closed_miter_point_seq(polygon_vertex_seq(reverse_polygon(G)), d)"
                                               :hide?
                                               nil)
                                              (("2"
                                                (expand
                                                 "segment_seq_inside?")
                                                (("2"
                                                  (lemma
                                                   "miter_point_in_polygon_miter_seg_seq")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "reverse_polygon(G)"
                                                     "rev_polygon_index(G, next_index(G, i))"
                                                     "d")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (replace -2)
                                                          (("1"
                                                            (rewrite*
                                                             "reverse_vertex_rev_index")
                                                            (("1"
                                                              (replace
                                                               -5
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (lemma
                                                                 "point_in_pts_on_non_perim_path_in")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "S`seq(S`length - 1)"
                                                                   "G"
                                                                   "reverse_segment_seq(S)"
                                                                   "S`length")
                                                                  (("1"
                                                                    (ground)
                                                                    (("1"
                                                                      (expand
                                                                       "reverse_segment_seq")
                                                                      (("1"
                                                                        (expand
                                                                         "segment_seq_inside?")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "S`seq(0)")
                                                                          (("1"
                                                                            (ground)
                                                                            (("1"
                                                                              (expand
                                                                               "point_on_segment_seq?"
                                                                               1)
                                                                              (("1"
                                                                                (ground)
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "S`length - 2")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "point_on_segment?"
                                                                                       +)
                                                                                      (("1"
                                                                                        (inst
                                                                                         +
                                                                                         "1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -
                                                                       "S`seq(S`length - 1)")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (rewrite
                                                                           "pt_inside_eqv_inside_rev_polygon"
                                                                           1)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (expand
                                                                       "reverse_segment_seq")
                                                                      (("3"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (expand
                                                                       "reverse_segment_seq")
                                                                      (("4"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("5"
                                                                      (expand
                                                                       "contact_free_path?")
                                                                      (("5"
                                                                        (skeep)
                                                                        (("5"
                                                                          (inst
                                                                           -8
                                                                           "q")
                                                                          (("5"
                                                                            (ground)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-1
                                                                                1))
                                                                              (("1"
                                                                                (expand
                                                                                 "reverse_segment_seq")
                                                                                (("1"
                                                                                  (expand
                                                                                   "point_on_segment_seq?")
                                                                                  (("1"
                                                                                    (ground)
                                                                                    (("1"
                                                                                      (skeep)
                                                                                      (("1"
                                                                                        (inst
                                                                                         +
                                                                                         "S`length - 2 - i_1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "point_on_segment?")
                                                                                            (("1"
                                                                                              (skeep)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 +
                                                                                                 "1 - t")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "add_comm")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (rewrite
                                                                               "on_rev_perim_eqv_on_perim")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand "d")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (expand "d")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (use "crossed_edge_rising_or_falling")
                                (("2"
                                  (assert)
                                  (("2"
                                    (replace -4)
                                    (("2"
                                      (rewrite
                                       "edges_of_reverse_polygon")
                                      (("2"
                                        (rewrite
                                         "rev_rev_polygon_index")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide-all-but (-1 2))
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "reverse_has_rightward_crossings")
                (("2" (inst - "G" "p") (("2" (ground) nil nil)) nil))
                nil)
               ("3" (use "reverse_polygon_is_simple") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (has_rightward_crossings? const-decl "bool" rightward_crossings
     nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (rightward_crossing_index const-decl "below(G`num_vertices)"
     polygon_miter_sequences nil)
    (point_in_polygon? const-decl "bool" horiz_edge_crossing nil)
    (point_outside_polygon? const-decl "bool" polygon_membership nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (segment_falling? const-decl "bool" segments_2d_props nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (path_to_miter_pt_seq_contact_free formula-decl nil
     polygon_miter_sequences nil)
    (reverse_polygon const-decl "polygon_2d" reverse_polygons nil)
    (G skolem-const-decl "simple_polygon_2d" polygon_membership nil)
    (p skolem-const-decl "(has_rightward_crossings?(G))"
     polygon_membership nil)
    (rightward_crossing_index_reverse formula-decl nil
     polygon_miter_sequences nil)
    (next_index_rev_index_prev formula-decl nil reverse_polygons nil)
    (ccw_reverse_polygon formula-decl nil reverse_polygons nil)
    (d skolem-const-decl "posreal" polygon_membership nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (on_rev_perim_eqv_on_perim formula-decl nil reverse_polygons nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (add_comm formula-decl nil vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pt_inside_eqv_inside_rev_polygon formula-decl nil
     polygon_membership nil)
    (point_in_pts_on_non_perim_path_in formula-decl nil
     polygon_membership nil)
    (reverse_vertex_rev_index formula-decl nil reverse_polygons nil)
    (rev_polygon_index const-decl "below(G`num_vertices)"
     reverse_polygons nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (segment_seq_inside? const-decl "bool" polygon_membership nil)
    (edges_of_reverse_polygon formula-decl nil reverse_polygons nil)
    (prev_next_is_original formula-decl nil polygons_2d nil)
    (segment_rising? const-decl "bool" segments_2d_props nil)
    (reverse_segment const-decl "segment_2d" segments_2d nil)
    (rev_rev_polygon_index formula-decl nil reverse_polygons nil)
    (crossed_edge_rising_or_falling formula-decl nil
     polygon_miter_sequences nil)
    (prev_index_rev_index_next formula-decl nil reverse_polygons nil)
    (reverse_has_rightward_crossings formula-decl nil reverse_polygons
     nil)
    (reverse_polygon_is_simple judgement-tcc nil reverse_polygons nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (polygon_vertex_seq const-decl "edge_parallel_endpoint_seq"
     polygon_miter_sequences nil)
    (segment_seq_outside? const-decl "bool" polygon_membership nil)
    (reverse_segment_seq const-decl "segment_endpoint_seq"
     segment_endpoint_sequences nil)
    (point_on_reverse_segment_seq formula-decl nil
     segment_endpoint_sequences nil)
    (contact_free_path? const-decl "bool" polygon_miter_sequences nil)
    (point_on_segment_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (scal_0 formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (add_zero_left formula-decl nil vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (point_out_pts_on_non_perim_path_out formula-decl nil
     polygon_membership nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (miter_point_in_polygon_miter_seg_seq formula-decl nil
     polygon_miter_sequences nil)
    (<= const-decl "bool" reals nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (closed_miter_point_seq const-decl "segment_endpoint_seq"
     miter_point_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (polygon_miter_sequence_in_or_out formula-decl nil
     polygon_membership nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (point_in_has_rightward_crossings 0
  (point_in_has_rightward_crossings-1 nil 3874129021
   ("" (skeep)
    (("" (expand "has_rightward_crossings?")
      (("" (expand "point_in_polygon?")
        (("" (flatten)
          (("" (assert)
            (("" (case "empty?(right_crossing_set(p, G))")
              (("1" (use "empty_card[real]")
                (("1" (ground)
                  (("1" (expand "odd?") (("1" (propax) nil nil)) nil))
                  nil))
                nil)
               ("2" (hide -1)
                (("2" (expand "empty?")
                  (("2" (skeep)
                    (("2" (expand "member")
                      (("2" (expand "right_crossing_set")
                        (("2" (skeep)
                          (("2" (expand "counted_crossing?")
                            (("2" (expand "point_on_ray?")
                              (("2"
                                (flatten)
                                (("2"
                                  (case "p = p_1")
                                  (("1"
                                    (ground)
                                    (("1"
                                      (use "vertex_on_perimeter")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (expand
                                         "point_on_polygon_perimeter?")
                                        (("2"
                                          (inst?)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (ground)
                                    (("1"
                                      (expand "count_adjacent_edges?")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (expand
                                           "rightward_edge_crossing?")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (split 3)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand
                                                   "edges_of_polygon")
                                                  (("1"
                                                    (replace
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (apply-extensionality
                                                       2
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (expand "min")
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (replace
                                                               -4
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (expand
                                                                 "point_on_polygon_perimeter?")
                                                                (("1"
                                                                  (inst
                                                                   +
                                                                   "edges_of_polygon(G)(i)")
                                                                  (("1"
                                                                    (rewrite
                                                                     "point_on_reverse_segment"
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (expand
                                                                       "edges_of_polygon")
                                                                      (("1"
                                                                        (expand
                                                                         "reverse_segment")
                                                                        (("1"
                                                                          (rewrite
                                                                           "point_on_segment_has_offset")
                                                                          (("1"
                                                                            (name-replace
                                                                             "q"
                                                                             "G`vertices(next_index(G, i))"
                                                                             :hide?
                                                                             nil)
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "(p`x - q`x) / (p_1`x - q`x)")
                                                                              (("1"
                                                                                (real-props)
                                                                                (("1"
                                                                                  (replace
                                                                                   -5
                                                                                   :dir
                                                                                   rl)
                                                                                  (("1"
                                                                                    (move-terms
                                                                                     3
                                                                                     r
                                                                                     1)
                                                                                    (("1"
                                                                                      (cross-mult
                                                                                       3)
                                                                                      (("1"
                                                                                        (apply-extensionality
                                                                                         3
                                                                                         :hide?
                                                                                         t)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (cross-mult
                                                                                 1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -3)
                                                (("2"
                                                  (inst
                                                   +
                                                   "p_1`x - p`x")
                                                  (("1"
                                                    (equate
                                                     "p + (# x := p_1`x - p`x, y := 0 #)"
                                                     "p_1")
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply-extensionality
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (apply-extensionality
                                                     2
                                                     :hide?
                                                     t)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep - t)
                                      (("2"
                                        (expand "edge_of_polygon?")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (expand
                                               "rightward_edge_crossing?")
                                              (("2"
                                                (expand
                                                 "edges_of_polygon")
                                                (("2"
                                                  (expand
                                                   "horizontal_segment?")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (inst
                                                         +
                                                         "x - p`x")
                                                        (("1"
                                                          (case-replace
                                                           "p + (# x := x - p`x, y := 0 #) = p_1")
                                                          (("1"
                                                            (apply-extensionality
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (hide-all-but
                                                               (-3
                                                                -5
                                                                1))
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-5 1))
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (apply-extensionality
                                                           4
                                                           :hide?
                                                           t)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((has_rightward_crossings? const-decl "bool" rightward_crossings
     nil)
    (right_crossing_set const-decl "finite_set[real]"
     horiz_edge_crossing nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (empty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (odd? const-decl "bool" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (empty_card formula-decl nil finite_sets nil)
    (member const-decl "bool" sets nil)
    (point_on_ray? const-decl "bool" horiz_edge_crossing nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (vertex_on_perimeter formula-decl nil horiz_edge_crossing nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (horizontal_segment? const-decl "bool" horiz_edge_crossing nil)
    (x skolem-const-decl "real" polygon_membership nil)
    (count_adjacent_edges? const-decl "bool" horiz_edge_crossing nil)
    (rightward_edge_crossing? const-decl "bool" rightward_crossings
     nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (edge_is_edge formula-decl nil polygons_2d nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (point_on_segment_has_offset formula-decl nil segments_2d nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (p_1 skolem-const-decl "point_2d" polygon_membership nil)
    (q skolem-const-decl "point_2d" polygon_membership nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (p skolem-const-decl "point_2d" polygon_membership nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (scal_div_mult_right formula-decl nil vectors_2D vectors)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (TRUE const-decl "bool" booleans nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (reverse_segment const-decl "segment_2d" segments_2d nil)
    (point_on_reverse_segment formula-decl nil segments_2d nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (vertex_on_edge formula-decl nil polygons_2d nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (counted_crossing? const-decl "bool" horiz_edge_crossing nil)
    (point_in_polygon? const-decl "bool" horiz_edge_crossing nil))
   shostak))
 (point_outside_imp_not_inside 0
  (point_outside_imp_not_inside-1 nil 3874129021
   ("" (induct "n")
    (("1" (skeep) (("1" (skeep - t) (("1" (assert) nil nil)) nil)) nil)
     ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (case-replace "j=0")
        (("1" (hide -2 -3)
          (("1" (skeep)
            (("1" (skeep - t)
              (("1" (claim "%1 = 1" (assert) (! -1 l))
                (("1" (expand "serp_ray_outside?")
                  (("1" (flatten)
                    (("1" (hide -5)
                      (("1" (lemma "point_in_polygon_conds_equiv")
                        (("1" (inst - "p" "S`tail" "G")
                          (("1" (replace -1 :hide? t)
                            (("1" (expand "point_in_polygon_arb?")
                              (("1"
                                (flatten)
                                (("1"
                                  (equate (! -8 1 1) "emptyset")
                                  (("1"
                                    (rewrite "card_emptyset")
                                    (("1"
                                      (expand "odd?")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (apply-extensionality :hide? t)
                                    (("2"
                                      (expand "emptyset")
                                      (("2"
                                        (expand "arb_crossing_set")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (expand
                                             "point_on_arb_ray?")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst? -7)
                                                (("2"
                                                  (use
                                                   "counted_crossing_on_perimeter")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (skeep)
            (("2" (skeep - t)
              (("2" (case "S`body`length = j+1")
                (("1" (hide -2 -8)
                  (("1" (expand "serp_ray_outside?" -5)
                    (("1" (flatten)
                      (("1" (lemma "point_in_polygon_conds_equiv")
                        (("1" (inst -1 "p" "^(S`body`seq(1) - p)" "G")
                          (("1" (replace -1 :hide? t)
                            (("1" (inst-cp -5 "0" _)
                              (("1"
                                (inst -3 "S`body`seq(1)" "G")
                                (("1"
                                  (ground)
                                  (("1"
                                    (lemma
                                     "point_in_polygon_conds_equiv")
                                    (("1"
                                      (inst
                                       -1
                                       "S`body`seq(1)"
                                       "^(S`body`seq(1) - p)"
                                       "G")
                                      (("1"
                                        (replace -1 :hide? t)
                                        (("1"
                                          (hide -4 -6)
                                          (("1"
                                            (expand
                                             "point_in_polygon_arb?")
                                            (("1"
                                              (ground)
                                              (("1"
                                                (inst? -5)
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (expand
                                                     "point_on_segment?")
                                                    (("1"
                                                      (inst + "1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "before_arb_crossings_empty")
                                                (("2"
                                                  (inst
                                                   -
                                                   "p"
                                                   "S`body`seq(1)"
                                                   "^(S`body`seq(1) - p)"
                                                   "G")
                                                  (("2"
                                                    (ground)
                                                    (("1"
                                                      (rewrite
                                                       "point_on_arb_ray_norm")
                                                      (("1"
                                                        (rewrite
                                                         "normalized_id")
                                                        (("1"
                                                          (cancel-add
                                                           1)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply-extensionality
                                                       :hide?
                                                       t)
                                                      (("2"
                                                        (expand
                                                         "emptyset")
                                                        (("2"
                                                          (expand
                                                           "set_before_p")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide
                                                               -8
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "arb_crossing_set")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (use
                                                                     "counted_crossing_on_perimeter")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "point_on_arb_ray?")
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (inst?
                                                                             -8)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "point_on_segment?")
                                                                                (("2"
                                                                                  (inst
                                                                                   +
                                                                                   "d/norm(S`body`seq(1) - p)")
                                                                                  (("2"
                                                                                    (ground)
                                                                                    (("1"
                                                                                      (cross-mult
                                                                                       1)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (cross-mult
                                                                                       1)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -2)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (replace
                                                                                       -2)
                                                                                      (("3"
                                                                                        (replace
                                                                                         -8
                                                                                         :dir
                                                                                         rl)
                                                                                        (("3"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "^")
                                                                                            (("3"
                                                                                              (rewrite
                                                                                               "scal_sub_right")
                                                                                              (("3"
                                                                                                (rewrite
                                                                                                 "scal_sub_left")
                                                                                                (("3"
                                                                                                  (mult-by
                                                                                                   1
                                                                                                   "norm(S`body`seq(1) - p)")
                                                                                                  (("3"
                                                                                                    (grind-with-ext)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst
                                     +
                                     "S with [body := S`body ^ (1,S`body`length-1), tail := S`tail]")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand "serp_ray_outside?")
                                          (("1"
                                            (expand "^")
                                            (("1"
                                              (expand "min")
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (skeep + t)
                                                  (("1"
                                                    (expand "^")
                                                    (("1"
                                                      (expand "min")
                                                      (("1"
                                                        (inst? -7)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "^")
                                          (("2" (propax) nil nil))
                                          nil)
                                         ("3"
                                          (expand "^")
                                          (("3"
                                            (expand "min")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (ground)
                                      (("1"
                                        (expand "^")
                                        (("1"
                                          (expand "min")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (expand "^")
                                          (("2"
                                            (inst -3 "1+i")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (typepred "i")
                                              (("2"
                                                (expand "^")
                                                (("2"
                                                  (expand "min")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (inst - "0")
                            (("1" (assert) nil nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("3" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst? -3)
                  (("2" (assert)
                    (("2" (inst? +) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (S skolem-const-decl "serpentine_ray" polygon_membership nil)
    (p skolem-const-decl "point_2d" polygon_membership nil)
    (- const-decl "Vector" vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (add_zero_left formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (set_before_p const-decl "finite_set[point_2d]"
     arb_direc_edge_crossing nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (scal_sub_right formula-decl nil vectors_2D vectors)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (dot_divby formula-decl nil vectors_2D vectors)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (* const-decl "Vector" vectors_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (scal_sub_left formula-decl nil vectors_2D vectors)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (add_cancel formula-decl nil vectors_2D vectors)
    (norm_scal_norm formula-decl nil vectors_cross_2d nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (point_on_arb_ray_norm formula-decl nil vectors_cross_2d nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (normalized_id formula-decl nil vectors_2D vectors)
    (before_arb_crossings_empty formula-decl nil
     arb_direc_edge_crossing nil)
    (i skolem-const-decl
       "below((S`body ^ (1, S`body`length - 1))`length - 1)"
       polygon_membership nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (i skolem-const-decl
       "below((S`body ^ (1, S`body`length - 1))`length - 1)"
       polygon_membership nil)
    (^ const-decl "finseq" finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (point_in_polygon_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (emptyset const-decl "set" sets nil)
    (arb_crossing_set const-decl "finite_set[point_2d]"
     arb_direc_edge_crossing nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (odd? const-decl "bool" integers nil)
    (card_emptyset formula-decl nil finite_sets nil)
    (counted_crossing_on_perimeter formula-decl nil
     arb_direc_edge_crossing nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (point_on_arb_ray? const-decl "bool" vectors_cross_2d nil)
    (point_in_polygon_conds_equiv formula-decl nil polygon_membership
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (point_in_polygon? const-decl "bool" horiz_edge_crossing nil)
    (<= const-decl "bool" reals nil)
    (serp_ray_outside? const-decl "bool" polygon_membership nil)
    (serpentine_ray type-eq-decl nil polygon_membership nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (finseq type-eq-decl nil finite_sequences nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (point_outside_imp_not_in 0
  (point_outside_imp_not_in-1 nil 3874129021
   ("" (skeep)
    (("" (expand "point_outside_polygon?")
      (("" (skeep)
        (("" (use "point_outside_imp_not_inside")
          (("" (inst - "S`body`length")
            (("" (ground) (("" (inst?) (("" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((point_outside_polygon? const-decl "bool" polygon_membership nil)
    (point_outside_imp_not_inside formula-decl nil polygon_membership
     nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (serpentine_ray type-eq-decl nil polygon_membership nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (finseq type-eq-decl nil finite_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (point_not_in_imp_outside 0
  (point_not_in_imp_outside-1 nil 3874129021
   ("" (skeep)
    (("" (case "has_rightward_crossings?(G)(p)")
      (("1" (name-replace "i" "rightward_crossing_index(G, p)")
        (("1" (case "segment_falling?(edges_of_polygon(G)(i))")
          (("1" (use "falling_edge_imp_ccw_in_or_out")
            (("1" (assert) (("1" (ground) nil nil)) nil)) nil)
           ("2" (use "crossed_edge_rising_or_falling")
            (("2" (assert)
              (("2" (replace -2)
                (("2" (assert)
                  (("2"
                    (case "segment_falling?(reverse_segment(edges_of_polygon(G)(i)))")
                    (("1" (hide -2)
                      (("1" (hide 1)
                        (("1"
                          (equate "edges_of_polygon(G)(i)"
                           "edges_of_polygon(reverse_polygon(reverse_polygon(G)))(i)")
                          (("1" (rewrite "edges_of_reverse_polygon")
                            (("1" (rewrite "reverse_reverse_segment")
                              (("1"
                                (lemma
                                 "falling_edge_imp_ccw_in_or_out")
                                (("1"
                                  (rewrite "rev_polygon_index_reverse")
                                  (("1"
                                    (inst - "reverse_polygon(G)" "p")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite
                                         "rightward_crossing_index_reverse")
                                        (("1"
                                          (replace -3)
                                          (("1"
                                            (equate
                                             "prev_index(reverse_polygon(G), rev_polygon_index(G, i))"
                                             "prev_index(G, rev_polygon_index(G, i))")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (rewrite
                                                   "pt_outside_eqv_outside_rev_polygon"
                                                   :dir
                                                   rl)
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   "pt_inside_eqv_inside_rev_polygon"
                                                   :dir
                                                   rl)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite
                                       "reverse_has_rightward_crossings"
                                       :dir
                                       rl)
                                      nil
                                      nil)
                                     ("3"
                                      (rewrite
                                       "reverse_polygon_is_simple")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "reverse_polygon" +)
                              (("2" (assert) nil nil)) nil))
                            nil)
                           ("2" (rewrite "reverse_reverse_polygon") nil
                            nil)
                           ("3" (expand "reverse_polygon" +)
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-1 1)) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "has_rightward_crossings?")
        (("2" (assert)
          (("2" (expand "point_outside_polygon?")
            (("2"
              (inst 4
               "(# body := (# length := 1, seq := lambda (i: below(1)): p #),
                                                 tail := (1, 0) #)")
              (("1" (expand "serp_ray_outside?")
                (("1" (ground)
                  (("1" (skeep) nil nil)
                   ("2" (skeep)
                    (("2" (expand "point_on_polygon_perimeter?")
                      (("2" (skeep - t)
                        (("2" (expand "edge_of_polygon?")
                          (("2" (skeep)
                            (("2" (inst?)
                              (("2"
                                (expand "rightward_edge_crossing?")
                                (("2"
                                  (ground)
                                  (("1"
                                    (replace -2)
                                    (("1"
                                      (expand "*" -3)
                                      (("1"
                                        (lemma
                                         "horiz_segment_straddles_point")
                                        (("1"
                                          (inst - "p" "e" "d")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst?)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (case-replace "d = 0")
                                              (("1"
                                                (inst + "e")
                                                (("1"
                                                  (equate
                                                   "p + (# x := 0, y := 0 #)"
                                                   "p")
                                                  (("1"
                                                    (hide-all-but 1)
                                                    (("1"
                                                      (grind-with-ext)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst + "d")
                                    (("1"
                                      (hide 2 3)
                                      (("1"
                                        (expand "point_on_segment?")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst?)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (equate "d" "0" (assert))
                                      (("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep) nil nil)
               ("3" (hide-all-but 1) (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((has_rightward_crossings? const-decl "bool" rightward_crossings
     nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (segment_falling? const-decl "bool" segments_2d_props nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (falling_edge_imp_ccw_in_or_out formula-decl nil polygon_membership
     nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (segment_rising? const-decl "bool" segments_2d_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reverse_polygon const-decl "polygon_2d" reverse_polygons nil)
    (rev_polygon_index const-decl "below(G`num_vertices)"
     reverse_polygons nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (reverse_reverse_segment formula-decl nil segments_2d nil)
    (rev_polygon_index_reverse formula-decl nil reverse_polygons nil)
    (reverse_polygon_is_simple judgement-tcc nil reverse_polygons nil)
    (reverse_has_rightward_crossings formula-decl nil reverse_polygons
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (pt_inside_eqv_inside_rev_polygon formula-decl nil
     polygon_membership nil)
    (pt_outside_eqv_outside_rev_polygon formula-decl nil
     polygon_membership nil)
    (rightward_crossing_index_reverse formula-decl nil
     polygon_miter_sequences nil)
    (p skolem-const-decl "point_2d" polygon_membership nil)
    (G skolem-const-decl "simple_polygon_2d" polygon_membership nil)
    (edges_of_reverse_polygon formula-decl nil reverse_polygons nil)
    (reverse_reverse_polygon formula-decl nil reverse_polygons nil)
    (reverse_segment const-decl "segment_2d" segments_2d nil)
    (crossed_edge_rising_or_falling formula-decl nil
     polygon_miter_sequences nil)
    (rightward_crossing_index const-decl "below(G`num_vertices)"
     polygon_miter_sequences nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (FALSE const-decl "bool" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (serpentine_ray type-eq-decl nil polygon_membership nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (* const-decl "Vector" vectors_2D vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (d skolem-const-decl "nonneg_real" polygon_membership nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (pred type-eq-decl nil defined_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (horiz_segment_straddles_point formula-decl nil segments_2d_props
     nil)
    (scal_0 formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (rightward_edge_crossing? const-decl "bool" rightward_crossings
     nil)
    (serp_ray_outside? const-decl "bool" polygon_membership nil)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sqrt_1 formula-decl nil sqrt reals)
    (point_outside_polygon? const-decl "bool" polygon_membership nil))
   shostak))
 (point_out_not_in 0
  (point_out_not_in-1 nil 3874129021
   ("" (skeep)
    (("" (use "point_outside_imp_not_in")
      (("" (use "point_not_in_imp_outside")
        (("" (ground)
          (("1" (expand "point_in_polygon?") (("1" (propax) nil nil))
            nil)
           ("2" (expand "point_in_polygon?") (("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((point_outside_imp_not_in formula-decl nil polygon_membership nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_in_polygon? const-decl "bool" horiz_edge_crossing nil)
    (point_not_in_imp_outside formula-decl nil polygon_membership nil))
   shostak))
 (same_perim_pts_imp_same_exterior_pts 0
  (same_perim_pts_imp_same_exterior_pts-1 nil 3874129021
   ("" (skeep*)
    (("" (expand "point_outside_polygon?")
      (("" (ground)
        (("1" (skeep)
          (("1" (inst?)
            (("1" (assert)
              (("1" (expand "serp_ray_outside?")
                (("1" (ground)
                  (("1" (skeep)
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (inst? -5) (("1" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (hide -2)
                      (("2" (inst?)
                        (("2" (inst?) (("2" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (inst?)
            (("2" (assert)
              (("2" (expand "serp_ray_outside?")
                (("2" (ground)
                  (("1" (skeep)
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (inst? -5) (("1" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1)
                    (("2" (skeep)
                      (("2" (inst?)
                        (("2" (inst?) (("2" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((point_outside_polygon? const-decl "bool" polygon_membership nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (serp_ray_outside? const-decl "bool" polygon_membership nil)
    (serpentine_ray type-eq-decl nil polygon_membership nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (same_perim_pts_imp_same_interior_pts 0
  (same_perim_pts_imp_same_interior_pts-1 nil 3874129021
   ("" (skeep*)
    (("" (use "same_perim_pts_imp_same_exterior_pts")
      (("" (split -1)
        (("1" (inst?)
          (("1" (inst?)
            (("1" (lemma "point_out_not_in")
              (("1" (inst-cp - "q" "A")
                (("1" (inst - "q" "B") (("1" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (propax) nil nil))
        nil))
      nil))
    nil)
   ((same_perim_pts_imp_same_exterior_pts formula-decl nil
     polygon_membership nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_out_not_in formula-decl nil polygon_membership nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (falling_edge_ccw_in_or_out 0
  (falling_edge_ccw_in_or_out-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin*)
      (("" (split 1)
        (("1" (flatten)
          (("1" (use "falling_edge_imp_ccw_in_or_out")
            (("1" (assert) (("1" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (flatten)
          (("2" (rewrite "pt_inside_eqv_inside_rev_polygon")
            (("2" (rewrite "pt_outside_eqv_outside_rev_polygon")
              (("2" (lemma "falling_edge_imp_ccw_in_or_out")
                (("2" (inst - "reverse_polygon(G)" "p")
                  (("1" (skoletin)
                    (("1" (lemma "ccw_reverse_polygon")
                      (("1" (inst - "G")
                        (("1" (replace -1)
                          (("1" (split -2)
                            (("1" (ground)
                              (("1"
                                (rewrite "point_out_not_in")
                                nil
                                nil))
                              nil)
                             ("2" (ground)
                              (("2"
                                (rewrite "point_out_not_in")
                                nil
                                nil))
                              nil)
                             ("3" (hide -3)
                              (("3"
                                (lemma
                                 "crossed_edge_rising_or_falling")
                                (("3"
                                  (inst - "G" "p")
                                  (("3"
                                    (assert)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (rewrite
                                         "edges_of_reverse_polygon")
                                        (("1"
                                          (rewrite
                                           "rightward_crossing_index_reverse")
                                          (("1"
                                            (replace -3)
                                            (("1"
                                              (rewrite
                                               "prev_index_rev_index_next")
                                              (("1"
                                                (rewrite
                                                 "rev_rev_polygon_index")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide-all-but
                                                     (-1 1))
                                                    (("1"
                                                      (expand
                                                       "reverse_segment")
                                                      (("1"
                                                        (expand
                                                         "segment_falling?")
                                                        (("1"
                                                          (expand
                                                           "segment_rising?")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "i_1")
                                          (("2"
                                            (expand "reverse_polygon")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (rewrite "reverse_has_rightward_crossings" :dir rl)
                    nil nil)
                   ("3" (rewrite "reverse_polygon_is_simple") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (has_rightward_crossings? const-decl "bool" rightward_crossings
     nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (rightward_crossing_index const-decl "below(G`num_vertices)"
     polygon_miter_sequences nil)
    (point_in_polygon? const-decl "bool" horiz_edge_crossing nil)
    (point_outside_polygon? const-decl "bool" polygon_membership nil)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (segment_falling? const-decl "bool" segments_2d_props nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (pt_outside_eqv_outside_rev_polygon formula-decl nil
     polygon_membership nil)
    (reverse_polygon const-decl "polygon_2d" reverse_polygons nil)
    (G skolem-const-decl "simple_polygon_2d" polygon_membership nil)
    (p skolem-const-decl "(has_rightward_crossings?(G))"
     polygon_membership nil)
    (ccw_reverse_polygon formula-decl nil reverse_polygons nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rightward_crossing_index_reverse formula-decl nil
     polygon_miter_sequences nil)
    (prev_index_rev_index_next formula-decl nil reverse_polygons nil)
    (prev_next_is_original formula-decl nil polygons_2d nil)
    (reverse_segment const-decl "segment_2d" segments_2d nil)
    (segment_rising? const-decl "bool" segments_2d_props nil)
    (rev_rev_polygon_index formula-decl nil reverse_polygons nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (edges_of_reverse_polygon formula-decl nil reverse_polygons nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (crossed_edge_rising_or_falling formula-decl nil
     polygon_miter_sequences nil)
    (point_out_not_in formula-decl nil polygon_membership nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (reverse_has_rightward_crossings formula-decl nil reverse_polygons
     nil)
    (reverse_polygon_is_simple judgement-tcc nil reverse_polygons nil)
    (pt_inside_eqv_inside_rev_polygon formula-decl nil
     polygon_membership nil)
    (falling_edge_imp_ccw_in_or_out formula-decl nil polygon_membership
     nil))
   shostak))
 (ccw_falling_edge_in_or_out 0
  (ccw_falling_edge_in_or_out-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin*)
      (("" (split 1)
        (("1" (flatten)
          (("1" (use "ccw_imp_falling_edge_in_or_out")
            (("1" (assert) (("1" (ground) nil nil)) nil)) nil))
          nil)
         ("2" (flatten)
          (("2" (ground)
            (("1" (use "falling_edge_imp_ccw_in_or_out")
              (("1" (assert)
                (("1" (use "point_out_not_in") (("1" (ground) nil nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "ccw_imp_falling_edge_in_or_out")
              (("2" (inst - "reverse_polygon(G)" "p")
                (("1" (skoletin)
                  (("1" (lemma "ccw_reverse_polygon")
                    (("1" (inst - "G")
                      (("1" (replace -1)
                        (("1" (assert)
                          (("1" (ground)
                            (("1"
                              (rewrite
                               "pt_outside_eqv_outside_rev_polygon"
                               :dir rl)
                              (("1"
                                (use "point_out_not_in")
                                (("1" (ground) nil nil))
                                nil))
                              nil)
                             ("2"
                              (lemma "crossed_edge_rising_or_falling")
                              (("2"
                                (inst - "G" "p")
                                (("2"
                                  (assert)
                                  (("2"
                                    (rewrite
                                     "edges_of_reverse_polygon")
                                    (("1"
                                      (rewrite
                                       "rightward_crossing_index_reverse")
                                      (("1"
                                        (replace -6 :dir rl)
                                        (("1"
                                          (expand "edges_of_polygon" 1)
                                          (("1"
                                            (expand "reverse_segment")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (rewrite
                                                 "prev_index_rev_index_next")
                                                (("1"
                                                  (replace -3 1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (rewrite
                                                       "prev_index_rev_index_next")
                                                      (("1"
                                                        (rewrite
                                                         "rev_rev_polygon_index")
                                                        (("1"
                                                          (rewrite
                                                           "rev_rev_polygon_index")
                                                          (("1"
                                                            (hide-all-but
                                                             (-1 1))
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "i_1")
                                      (("2"
                                        (expand "reverse_polygon")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (rewrite "reverse_has_rightward_crossings" :dir rl)
                  nil nil)
                 ("3" (rewrite "reverse_polygon_is_simple") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (has_rightward_crossings? const-decl "bool" rightward_crossings
     nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (rightward_crossing_index const-decl "below(G`num_vertices)"
     polygon_miter_sequences nil)
    (point_in_polygon? const-decl "bool" horiz_edge_crossing nil)
    (point_outside_polygon? const-decl "bool" polygon_membership nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (segment_falling? const-decl "bool" segments_2d_props nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (ccw_vertex_order? const-decl "bool" polygon_attributes nil)
    (reverse_polygon_is_simple judgement-tcc nil reverse_polygons nil)
    (reverse_has_rightward_crossings formula-decl nil reverse_polygons
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (crossed_edge_rising_or_falling formula-decl nil
     polygon_miter_sequences nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rightward_crossing_index_reverse formula-decl nil
     polygon_miter_sequences nil)
    (next_prev_is_original formula-decl nil polygons_2d nil)
    (segment_rising? const-decl "bool" segments_2d_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rev_rev_polygon_index formula-decl nil reverse_polygons nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (prev_index_rev_index_next formula-decl nil reverse_polygons nil)
    (reverse_segment const-decl "segment_2d" segments_2d nil)
    (edges_of_reverse_polygon formula-decl nil reverse_polygons nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pt_outside_eqv_outside_rev_polygon formula-decl nil
     polygon_membership nil)
    (ccw_reverse_polygon formula-decl nil reverse_polygons nil)
    (p skolem-const-decl "(has_rightward_crossings?(G))"
     polygon_membership nil)
    (G skolem-const-decl "simple_polygon_2d" polygon_membership nil)
    (reverse_polygon const-decl "polygon_2d" reverse_polygons nil)
    (falling_edge_imp_ccw_in_or_out formula-decl nil polygon_membership
     nil)
    (point_out_not_in formula-decl nil polygon_membership nil)
    (ccw_imp_falling_edge_in_or_out formula-decl nil polygon_membership
     nil))
   shostak))
 (nearest_rightward_crossing_in_or_out 0
  (nearest_rightward_crossing_in_or_out-1 nil 3874129021
   ("" (skeep)
    (("" (assert)
      ((""
        (case "point_outside_polygon?(p, G) or point_in_polygon?(p, G)")
        (("1" (use "ccw_falling_edge_in_or_out")
          (("1" (ground) nil nil)) nil)
         ("2" (hide 2)
          (("2" (use "point_out_not_in")
            (("2" (ground)
              (("2" (typepred "p")
                (("2" (expand "has_rightward_crossings?")
                  (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (point_out_not_in formula-decl nil polygon_membership nil)
    (ccw_falling_edge_in_or_out formula-decl nil polygon_membership
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (point_outside_polygon? const-decl "bool" polygon_membership nil)
    (has_rightward_crossings? const-decl "bool" rightward_crossings
     nil)
    (point_in_polygon? const-decl "bool" horiz_edge_crossing nil))
   shostak))
 (point_in_has_inside_segments_TCC1 0
  (point_in_has_inside_segments_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (point_in_has_inside_segments subtype
    "(number_fields.-)(polygon_membership.S`length, 1)"
    "below[S`length]"))
  (point_in_has_inside_segments_TCC1-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (point_in_has_inside_segments subtype
    "(number_fields.-)(polygon_membership.S`length, 1)"
    "below[S`length]")))
 (point_in_has_inside_segments 0
  (point_in_has_inside_segments-1 nil 3874129021
   ("" (skeep*)
    (("" (name-replace "rci" "rightward_crossing_index(G, p)")
      (("1"
        (name-replace "H"
         "if segment_falling?(edges_of_polygon(G)(rci)) then G else reverse_polygon(G) endif")
        (("1" (case "simple_polygon_2d?(H)")
          (("1"
            (case "forall (p: point_2d): point_in_polygon?(p, G) iff  point_in_polygon?(p, H)")
            (("1" (inst? -)
              (("1" (assert)
                (("1" (lemma "path_to_miter_pt_seq_contact_free")
                  (("1"
                    (name-replace "d"
                     "max_miter_offset(polygon_vertex_seq(H))")
                    (("1" (inst - "H" "p" "d")
                      (("1" (assert)
                        (("1"
                          (name-replace "i"
                           "rightward_crossing_index(H, p)" :hide? nil)
                          (("1"
                            (name-replace "mp"
                             "miter_point(H`vertices(i), H`vertices(prev_index(H, i)),
                           H`vertices(next_index(H, i)), d)" :hide?
                             nil)
                            (("1"
                              (name-replace "H_1"
                               "polygon_vertex_seq(H)" :hide? nil)
                              (("1"
                                (case
                                 "point_on_segment_seq?(mp, closed_miter_point_seq(H_1, d))")
                                (("1"
                                  (case
                                   "point_on_polygon_perimeter?(H)(q)")
                                  (("1"
                                    (copy -1)
                                    (("1"
                                      (expand
                                       "point_on_polygon_perimeter?"
                                       -1)
                                      (("1"
                                        (skeep - t)
                                        (("1"
                                          (expand "edge_of_polygon?")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (split -9)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (lemma
                                                   "seg_from_miter_point_not_on_perim")
                                                  (("1"
                                                    (inst
                                                     -
                                                     "H"
                                                     "q"
                                                     "i!1"
                                                     "d")
                                                    (("1"
                                                      (skoletin*)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (name-replace
                                                           "Z"
                                                           "(# length := 2, seq := lambda (i: below(2)):
                                                                                                 if i = 0 then mp_1 else q endif #)"
                                                           :hide?
                                                           nil)
                                                          (("1"
                                                            (name-replace
                                                             "M"
                                                             "closed_miter_point_seq(H_1, d)"
                                                             :hide?
                                                             nil)
                                                            (("1"
                                                              (case
                                                               "G`num_vertices = H`num_vertices and M`length = H`num_vertices + 1 and H_1`length = H`num_vertices + 1")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (case
                                                                   "M`seq(i) = mp and M`seq(i!1) = mp_1")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (name-replace
                                                                       "Y"
                                                                       "if i <= i!1 then M ^ (i, i!1)
                                                                         else append_segment_seqs(M ^ (i, G`num_vertices), M ^ (0, i!1)) endif")
                                                                      (("1"
                                                                        (case
                                                                         "Y`length > 0")
                                                                        (("1"
                                                                          (case
                                                                           "Y`seq(0) = mp & Y`seq(Y`length - 1) = mp_1")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (case
                                                                               "contact_free_path?(H)(Y)")
                                                                              (("1"
                                                                                (name-replace
                                                                                 "A"
                                                                                 "append_segment_seqs(append_segment_seqs(S, Y), Z)")
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "A")
                                                                                  (("1"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "A"
                                                                                       1)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "initial_point_append_segment_seqs"
                                                                                         1)
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "initial_point_append_segment_seqs"
                                                                                           1)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "A"
                                                                                       1)
                                                                                      (("2"
                                                                                        (use
                                                                                         "final_point_append_segment_seqs")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "Z"
                                                                                               1)
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (skeep)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "A"
                                                                                         -1)
                                                                                        (("3"
                                                                                          (rewrite
                                                                                           "point_on_append_seg_seqs_on_either")
                                                                                          (("3"
                                                                                            (split
                                                                                             -1)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "append_contact_free_paths")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "H"
                                                                                                 "S"
                                                                                                 "Y")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "point_in_pts_on_non_perim_path_in")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -
                                                                                                       "p"
                                                                                                       "H"
                                                                                                       "append_segment_seqs(S, Y)"
                                                                                                       "append_segment_seqs(S, Y)`length")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "segment_seq_inside?")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "r")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (hide-all-but
                                                                                                                   (-1
                                                                                                                    -33
                                                                                                                    2))
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -2
                                                                                                                     :dir
                                                                                                                     rl
                                                                                                                     :hide?
                                                                                                                     t)
                                                                                                                    (("1"
                                                                                                                      (lift-if)
                                                                                                                      (("1"
                                                                                                                        (ground)
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "pt_inside_eqv_inside_rev_polygon"
                                                                                                                           :dir
                                                                                                                           rl)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (rewrite
                                                                                                             "initial_point_append_segment_seqs")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (skeep)
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "contact_free_path?"
                                                                                                               -3)
                                                                                                              (("3"
                                                                                                                (inst?)
                                                                                                                (("3"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "point_on_segment_seq?"
                                                                                               -1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "Z"
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (skeep)
                                                                                                  (("2"
                                                                                                    (case
                                                                                                     "mp_1 = q")
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "miter_point_seqs_not_on_perim")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "H"
                                                                                                         "q"
                                                                                                         "d")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "miter_point_in_polygon_miter_seg_seq")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (lemma
                                                                                                       "extend_points_inside_polygon_excl")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "mp_1"
                                                                                                         "(# p1 := mp_1, p2 := q #)"
                                                                                                         "H")
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "r")
                                                                                                            (("1"
                                                                                                              (ground)
                                                                                                              (("1"
                                                                                                                (hide-all-but
                                                                                                                 (-1
                                                                                                                  -32
                                                                                                                  3))
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -2
                                                                                                                   :dir
                                                                                                                   rl
                                                                                                                   :hide?
                                                                                                                   t)
                                                                                                                  (("1"
                                                                                                                    (lift-if)
                                                                                                                    (("1"
                                                                                                                      (ground)
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "pt_inside_eqv_inside_rev_polygon"
                                                                                                                         :dir
                                                                                                                         rl)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (lemma
                                                                                                             "point_in_pts_on_non_perim_path_in")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "p"
                                                                                                               "H"
                                                                                                               "append_segment_seqs(S, Y)"
                                                                                                               "append_segment_seqs(S, Y)`length")
                                                                                                              (("2"
                                                                                                                (ground)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "segment_seq_inside?")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "mp_1")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "point_on_append_seg_seqs_on_either"
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "point_on_segment_seq?"
                                                                                                                             2)
                                                                                                                            (("1"
                                                                                                                              (ground)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 +
                                                                                                                                 "Y`length - 2")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "point_on_segment?")
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     +
                                                                                                                                     "1")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (rewrite
                                                                                                                   "initial_point_append_segment_seqs"
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (lemma
                                                                                                                   "append_contact_free_paths")
                                                                                                                  (("3"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "H"
                                                                                                                     "S"
                                                                                                                     "Y")
                                                                                                                    (("3"
                                                                                                                      (prop)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "contact_free_path?"
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (skeep)
                                                                                                                          (("1"
                                                                                                                            (inst?)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (ground)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (skeep)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "Z"
                                                                                         1)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "Z"
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (skeep
                                                                                       +
                                                                                       t)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "Z"
                                                                                         (-1
                                                                                          -2))
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (lemma
                                                                                             "miter_point_seqs_not_on_perim")
                                                                                            (("3"
                                                                                              (inst
                                                                                               -
                                                                                               "H"
                                                                                               "q"
                                                                                               "d")
                                                                                              (("3"
                                                                                                (assert)
                                                                                                (("3"
                                                                                                  (use
                                                                                                   "miter_point_in_polygon_miter_seg_seq")
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("4"
                                                                                      (lemma
                                                                                       "final_point_append_segment_seqs")
                                                                                      (("4"
                                                                                        (inst
                                                                                         -
                                                                                         "S"
                                                                                         "Y")
                                                                                        (("4"
                                                                                          (assert)
                                                                                          (("4"
                                                                                            (replace
                                                                                             -1
                                                                                             1)
                                                                                            (("4"
                                                                                              (expand
                                                                                               "Z"
                                                                                               1)
                                                                                              (("4"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (expand
                                                                                   "Y"
                                                                                   1)
                                                                                  (("2"
                                                                                    (ground)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "polygon_miter_pt_subseq_contact_free")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "H"
                                                                                         "i!1"
                                                                                         "i"
                                                                                         "d")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (lemma
                                                                                       "polygon_miter_pt_subseq_pair_contact_free")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "H"
                                                                                         "i"
                                                                                         "i!1"
                                                                                         "d")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (hide
                                                                                 2)
                                                                                (("3"
                                                                                  (assert)
                                                                                  (("3"
                                                                                    (skeep)
                                                                                    (("3"
                                                                                      (expand
                                                                                       "Y"
                                                                                       -1)
                                                                                      (("3"
                                                                                        (lift-if)
                                                                                        (("3"
                                                                                          (split
                                                                                           -1)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "M")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "i + i!2")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "^"
                                                                                                   -3)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (typepred
                                                                                                   "i!2")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -8
                                                                                                       -1
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "^"
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "min")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "i!2")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -6
                                                                                                   -1
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "append_segment_seqs"
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "^"
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "min")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "append_segment_seqs"
                                                                                                           -2)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "o ")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "^"
                                                                                                               -2)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "min")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "^^"
                                                                                                                     -2)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "min")
                                                                                                                      (("2"
                                                                                                                        (lift-if)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (split
                                                                                                                             -2)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (lift-if)
                                                                                                                                (("1"
                                                                                                                                  (typepred
                                                                                                                                   "M")
                                                                                                                                  (("1"
                                                                                                                                    (split
                                                                                                                                     -4)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "i!2 + i")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (case-replace
                                                                                                                                         "i!2 = G`num_vertices - i - 1")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -13
                                                                                                                                             -2)
                                                                                                                                            (("1"
                                                                                                                                              (hide-all-but
                                                                                                                                               -2)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "M")
                                                                                                                                                (("1"
                                                                                                                                                  (rewrite*
                                                                                                                                                   "closed_miter_point_seq_element")
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "H_1")
                                                                                                                                                    (("1"
                                                                                                                                                      (use
                                                                                                                                                       "polygon_vertex_seq_intercept")
                                                                                                                                                      (("1"
                                                                                                                                                        (lemma
                                                                                                                                                         "wrapped_miter_points_neq")
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -
                                                                                                                                                           "polygon_vertex_seq(H)"
                                                                                                                                                           "d")
                                                                                                                                                          (("1"
                                                                                                                                                            (ground)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -2)
                                                                                                                                                              (("1"
                                                                                                                                                                (ground)
                                                                                                                                                                (("1"
                                                                                                                                                                  (equate
                                                                                                                                                                   "polygon_vertex_seq(H)`length"
                                                                                                                                                                   "H`num_vertices + 1")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (equate
                                                                                                                                                                       "polygon_vertex_seq(H)`seq(H`num_vertices)"
                                                                                                                                                                       "polygon_vertex_seq(H)`seq(0)")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (hide-all-but
                                                                                                                                                                         1)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (grind)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (rewrite
                                                                                                                                                                             "rem_self")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (rewrite
                                                                                                                                                                               "rem_mod")
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (hide-all-but
                                                                                                                                                                     1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (grind)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (hide-all-but
                                                                                                                                                                   1)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (grind)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (rewrite
                                                                                                                                                                       "rem_self")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (rewrite
                                                                                                                                                                         "rem_mod")
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (typepred
                                                                                                                                 "M")
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   "i!2 - G`num_vertices + i")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (expand
                                                                               "Y"
                                                                               1)
                                                                              (("2"
                                                                                (split
                                                                                 1)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "^"
                                                                                     1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "append_segment_seqs"
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "min")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "o")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "^^")
                                                                                              (("1"
                                                                                                (split
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "min")
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "^"
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "min")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "append_segment_seqs"
                                                                                         +)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "o ")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "^"
                                                                                             +)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "min")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "^^")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "min")
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (flatten)
                                                                            (("3"
                                                                              (hide
                                                                               2)
                                                                              (("3"
                                                                                (expand
                                                                                 "Y"
                                                                                 1)
                                                                                (("3"
                                                                                  (lift-if)
                                                                                  (("3"
                                                                                    (expand
                                                                                     "append_segment_seqs"
                                                                                     1)
                                                                                    (("3"
                                                                                      (expand
                                                                                       "^"
                                                                                       1)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "min")
                                                                                        (("3"
                                                                                          (expand
                                                                                           "empty_seq")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (expand
                                                                             "Y"
                                                                             1)
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (split
                                                                                 1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "^"
                                                                                     1)
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "min")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "append_segment_seqs"
                                                                                     2)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "^"
                                                                                       2)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "min")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (expand
                                                                           "^"
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "min")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (split
                                                                                   2)
                                                                                  (("1"
                                                                                    (skeep
                                                                                     +
                                                                                     t)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "M")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "i!2")
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           (-2
                                                                                            1))
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "M"
                                                                                     1)
                                                                                    (("2"
                                                                                      (rewrite*
                                                                                       "closed_miter_point_seq_element")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (hide
                                                                         2)
                                                                        (("3"
                                                                          (ground)
                                                                          (("1"
                                                                            (expand
                                                                             "^")
                                                                            (("1"
                                                                              (expand
                                                                               "min")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skeep
                                                                             +
                                                                             t)
                                                                            (("2"
                                                                              (expand
                                                                               "^")
                                                                              (("2"
                                                                                (typepred
                                                                                 "M")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "i_1 + i")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "min")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "M"
                                                                       1)
                                                                      (("2"
                                                                        (rewrite*
                                                                         "closed_miter_point_seq_element")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "H_1"
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "polygon_vertex_seq"
                                                                               1)
                                                                              (("2"
                                                                                (ground)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "rem_plus_1_eq_next_index")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "H"
                                                                                           "i")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             :hide?
                                                                                             t)
                                                                                            (("1"
                                                                                              (rewrite*
                                                                                               "rem_mod")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "prev_index")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (rewrite*
                                                                                         "rem_mod")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "next_index")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "prev_index")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "rem_plus_1_eq_next_index")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "H"
                                                                                           "i!1")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             :hide?
                                                                                             t)
                                                                                            (("1"
                                                                                              (rewrite*
                                                                                               "rem_mod")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "prev_index")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (rewrite*
                                                                                         "rem_mod")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "prev_index")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "next_index")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("4"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (use
                                                                   "length_closed_miter_point_seq")
                                                                  (("2"
                                                                    (expand
                                                                     "H_1"
                                                                     (-1
                                                                      1))
                                                                    (("2"
                                                                      (expand
                                                                       "polygon_vertex_seq"
                                                                       -1
                                                                       2)
                                                                      (("2"
                                                                        (expand
                                                                         "polygon_vertex_seq"
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "M"
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (hide-all-but
                                                                               (-20
                                                                                1))
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (ground)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "reverse_polygon")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (ground)
                                                    (("2"
                                                      (replace
                                                       -1
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (rewrite
                                                         "rightward_crossing_index_reverse")
                                                        (("2"
                                                          (replace -12)
                                                          (("2"
                                                            (use
                                                             "segment_falling_reverse_rising")
                                                            (("2"
                                                              (case
                                                               "segment_rising?(reverse_segment(edges_of_polygon(reverse_polygon(G))(i)))")
                                                              (("1"
                                                                (hide-all-but
                                                                 (-1
                                                                  2))
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -9
                                                                 1
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (rewrite
                                                                   "edges_of_reverse_polygon")
                                                                  (("2"
                                                                    (rewrite
                                                                     "reverse_reverse_segment")
                                                                    (("2"
                                                                      (rewrite
                                                                       "prev_index_rev_index_next")
                                                                      (("2"
                                                                        (rewrite
                                                                         "rev_rev_polygon_index")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (use
                                                                             "crossed_edge_rising_or_falling")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (typepred "q")
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (split -10)
                                          (("1"
                                            (flatten)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (use
                                               "on_rev_perim_eqv_on_perim")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma
                                   "miter_point_in_polygon_miter_seg_seq")
                                  (("2"
                                    (use
                                     "miter_point_in_polygon_miter_seg_seq")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("3" (assert) nil nil)
                                 ("4"
                                  (assert)
                                  (("4"
                                    (expand "H_1" 1)
                                    (("4"
                                      (hide-all-but 1)
                                      (("4"
                                        (grind)
                                        (("4"
                                          (rewrite "rem_self")
                                          (("4"
                                            (rewrite "rem_mod")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (use "adjacent_edges_do_not_fold_back")
                              (("2" (ground) nil nil)) nil))
                            nil)
                           ("2"
                            (use "point_in_has_rightward_crossings")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (use "point_in_has_rightward_crossings")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (lift-if)
                (("2" (ground)
                  (("1" (replace -2) (("1" (assert) nil nil)) nil)
                   ("2" (skeep)
                    (("2" (use "pt_inside_eqv_inside_rev_polygon")
                      (("2" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (propax) nil nil))
            nil)
           ("2" (hide 2)
            (("2" (lift-if)
              (("2" (ground)
                (("2" (use "reverse_polygon_is_simple")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "point_in_has_rightward_crossings")
        (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (has_rightward_crossings? const-decl "bool" rightward_crossings
     nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (rightward_crossing_index const-decl "below(G`num_vertices)"
     polygon_miter_sequences nil)
    (path_to_miter_pt_seq_contact_free formula-decl nil
     polygon_miter_sequences nil)
    (H skolem-const-decl "polygon_2d" polygon_membership nil)
    (p skolem-const-decl "point_2d" polygon_membership nil)
    (adjacent_edges_do_not_fold_back formula-decl nil polygons_2d nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (seg_from_miter_point_not_on_perim formula-decl nil
     polygon_miter_sequences nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (even_posnat nonempty-type-eq-decl nil naturalnumbers nil)
    (even? const-decl "bool" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (append_segment_seqs const-decl "segment_endpoint_seq"
     segment_endpoint_sequences nil)
    (^ const-decl "finseq" finite_sequences nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (contact_free_path? const-decl "bool" polygon_miter_sequences nil)
    (point_on_append_seg_seqs_on_either formula-decl nil
     segment_endpoint_sequences nil)
    (extend_points_inside_polygon_excl formula-decl nil
     polygon_membership nil)
    (scal_0 formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (add_zero_left formula-decl nil vectors_2D vectors)
    (mp_1 skolem-const-decl "point_2d" polygon_membership nil)
    (q skolem-const-decl "(point_on_polygon_perimeter?(G))"
     polygon_membership nil)
    (G skolem-const-decl "simple_polygon_2d" polygon_membership nil)
    (miter_point_seqs_not_on_perim formula-decl nil
     polygon_miter_sequences nil)
    (miter_point_in_polygon_miter_seg_seq formula-decl nil
     polygon_miter_sequences nil)
    (append_contact_free_paths formula-decl nil polygon_miter_sequences
     nil)
    (pt_inside_eqv_inside_rev_polygon formula-decl nil
     polygon_membership nil)
    (segment_seq_inside? const-decl "bool" polygon_membership nil)
    (point_in_pts_on_non_perim_path_in formula-decl nil
     polygon_membership nil)
    (Z skolem-const-decl
     "[# length: even_posnat, seq: [below(2) -> point_2d] #]"
     polygon_membership nil)
    (final_point_append_segment_seqs formula-decl nil
     segment_endpoint_sequences nil)
    (A skolem-const-decl "segment_endpoint_seq" polygon_membership nil)
    (initial_point_append_segment_seqs formula-decl nil
     segment_endpoint_sequences nil)
    (Y skolem-const-decl "finseq[point_2d]" polygon_membership nil)
    (polygon_miter_pt_subseq_pair_contact_free formula-decl nil
     polygon_miter_sequences nil)
    (polygon_miter_pt_subseq_contact_free formula-decl nil
     polygon_miter_sequences nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (M skolem-const-decl "segment_endpoint_seq" polygon_membership nil)
    (i skolem-const-decl "below(H`num_vertices)" polygon_membership
       nil)
    (i!2 skolem-const-decl "below(Y`length - 1)" polygon_membership
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (closed_miter_point_seq_element formula-decl nil
     miter_point_sequences nil)
    (polygon_vertex_seq_intercept formula-decl nil
     polygon_miter_sequences nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (rem_nonneg expr-judgement "nat" polygon_membership nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (rem_mod formula-decl nil modulo_arithmetic nil)
    (rem_self formula-decl nil modulo_arithmetic nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (wrapped_miter_points_neq formula-decl nil miter_point_sequences
     nil)
    (H_1 skolem-const-decl "edge_parallel_endpoint_seq"
     polygon_membership nil)
    (^^ const-decl "finseq" finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (i!2 skolem-const-decl "below((M ^ (0, i!1))`length - 1)"
     polygon_membership nil)
    (i!1 skolem-const-decl "below(H`num_vertices)" polygon_membership
     nil)
    (i_1 skolem-const-decl
     "below((M ^ (i, G`num_vertices))`length - 1)" polygon_membership
     nil)
    (rem_plus_1_eq_next_index formula-decl nil polygons_2d nil)
    (length_closed_miter_point_seq formula-decl nil
     miter_point_sequences nil)
    (segment_rising? const-decl "bool" segments_2d_props nil)
    (reverse_segment const-decl "segment_2d" segments_2d nil)
    (rev_polygon_index const-decl "below(G`num_vertices)"
     reverse_polygons nil)
    (edges_of_reverse_polygon formula-decl nil reverse_polygons nil)
    (prev_index_rev_index_next formula-decl nil reverse_polygons nil)
    (prev_next_is_original formula-decl nil polygons_2d nil)
    (crossed_edge_rising_or_falling formula-decl nil
     polygon_miter_sequences nil)
    (rev_rev_polygon_index formula-decl nil reverse_polygons nil)
    (reverse_reverse_segment formula-decl nil segments_2d nil)
    (segment_falling_reverse_rising formula-decl nil reverse_polygons
     nil)
    (rightward_crossing_index_reverse formula-decl nil
     polygon_miter_sequences nil)
    (on_rev_perim_eqv_on_perim formula-decl nil reverse_polygons nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (closed_miter_point_seq const-decl "segment_endpoint_seq"
     miter_point_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (<= const-decl "bool" reals nil)
    (point_on_segment_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (vertex_neq_prev_2 formula-decl nil polygons_2d nil)
    (vertex_neq_next_2 formula-decl nil polygons_2d nil)
    (point_in_has_rightward_crossings formula-decl nil
     polygon_membership nil)
    (polygon_vertex_seq const-decl "edge_parallel_endpoint_seq"
     polygon_miter_sequences nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (point_in_polygon? const-decl "bool" horiz_edge_crossing nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (reverse_polygon_is_simple judgement-tcc nil reverse_polygons nil)
    (reverse_polygon const-decl "polygon_2d" reverse_polygons nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (segment_falling? const-decl "bool" segments_2d_props nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (point_outside_not_in_polygon_arb 0
  (point_outside_not_in_polygon_arb-1 nil 3874129021
   ("" (skeep)
    (("" (use "point_out_not_in")
      (("" (use "point_in_polygon_conds_equiv") (("" (ground) nil))))))
    nil)
   ((point_out_not_in formula-decl nil polygon_membership nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (* const-decl "Vector" vectors_2D vectors)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_in_polygon_conds_equiv formula-decl nil polygon_membership
     nil))
   shostak))
 (point_outside_not_in_polygon_arb_neg 0
  (point_outside_not_in_polygon_arb_neg-1 nil 3874129021
   ("" (skeep)
    (("" (use "point_out_not_in")
      (("" (use "point_in_polygon_conds_equiv") (("" (ground) nil))))))
    nil)
   ((point_out_not_in formula-decl nil polygon_membership nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (* const-decl "Vector" vectors_2D vectors)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (- const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_in_polygon_conds_equiv formula-decl nil polygon_membership
     nil))
   shostak))
 (left_right_midpoints_in_out 0
  (left_right_midpoints_in_out-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin)
      (("" (flatten)
        (("" (lemma "point_in_polygon_conds_equiv")
          ((""
            (inst-cp - "leftward_segment_offset(e, d)"
             "^(perp_left(e`p2 - e`p1))" "G")
            (("1"
              (inst - "rightward_segment_offset(e, d)"
               "^(perp_left(e`p2 - e`p1))" "G")
              (("1" (lemma "point_out_not_in")
                (("1" (inst - "rightward_segment_offset(e, d)" "G")
                  (("1" (ground)
                    (("1" (use "rightward_offset_pt_not_on_perim")
                      (("1" (assert) nil nil)) nil)
                     ("2" (expand "point_in_polygon_arb?")
                      (("2" (flatten)
                        (("2" (lemma "arb_crossings_before_diff")
                          (("2"
                            (inst - "leftward_segment_offset(e, d)"
                             "rightward_segment_offset(e, d)" _ _)
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (case-replace
                                   "let R = arb_crossing_set(leftward_segment_offset(e, d),
                                                 ^(perp_left(e`p2 - e`p1)),
                                                 G) in
             difference(R,
                                  set_before_p(R, rightward_segment_offset(e, d),
                                               leftward_segment_offset(e, d))) =
               remove(segment_midpoint(e), R)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -1 :hide? t)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (replace -1 :hide? t)
                                          (("1"
                                            (rewrite "card_remove")
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (rewrite
                                                   "odd_iff_even_succ")
                                                  (("1"
                                                    (rewrite
                                                     "even_iff_not_odd")
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (expand
                                                     "arb_crossing_set")
                                                    (("2"
                                                      (ground)
                                                      (("1"
                                                        (expand
                                                         "point_on_arb_ray?")
                                                        (("1"
                                                          (expand
                                                           "leftward_segment_offset")
                                                          (("1"
                                                            (inst
                                                             +
                                                             "d")
                                                            (("1"
                                                              (cancel-add
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "^")
                                                                (("1"
                                                                  (real-props)
                                                                  (("1"
                                                                    (rewrite
                                                                     "norm_perp_right_is_norm_right")
                                                                    (("1"
                                                                      (rewrite
                                                                       "norm_perp_left_is_norm_left")
                                                                      (("1"
                                                                        (case-replace
                                                                         "perp_right(e`p2 - e`p1) = -perp_left(e`p2 - e`p1)")
                                                                        (("1"
                                                                          (rewrite
                                                                           "scal_neg")
                                                                          (("1"
                                                                            (move-terms
                                                                             1
                                                                             r
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (grind-with-ext)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (grind-with-ext)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "counted_crossing_arb?")
                                                        (("2"
                                                          (ground)
                                                          (("1"
                                                            (lemma
                                                             "interior_point_is_nonvertex")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "segment_midpoint(e)"
                                                               "G"
                                                               "1/2"
                                                               "i")
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (expand
                                                                   "segment_midpoint")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "e")
                                                                      (("1"
                                                                        (expand
                                                                         "edges_of_polygon")
                                                                        (("1"
                                                                          (distrib
                                                                           1)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             +
                                                             "e")
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (expand
                                                                 "segment_midpoint")
                                                                (("1"
                                                                  (expand
                                                                   "point_on_segment?")
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "1/2")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (distrib
                                                                         1)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (rewrite
                                                                 "parallel_normalized")
                                                                (("2"
                                                                  (rewrite
                                                                   "perp_left_not_parallel")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "e")
                                                              (("2"
                                                                (expand
                                                                 "edge_of_polygon?")
                                                                (("2"
                                                                  (inst?)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (expand
                                             "rightward_segment_offset")
                                            (("2"
                                              (expand
                                               "leftward_segment_offset")
                                              (("2"
                                                (expand
                                                 "point_on_arb_ray?")
                                                (("2"
                                                  (inst + "2*d")
                                                  (("2"
                                                    (equate
                                                     "^(perp_right(e`p2-e`p1))"
                                                     "-^(perp_left(e`p2 - e`p1))")
                                                    (("1"
                                                      (name-replace
                                                       "v"
                                                       "^(perp_left(e`p2 - e`p1))")
                                                      (("1"
                                                        (cancel-add 1)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (grind-with-ext)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "remove")
                                        (("2"
                                          (expand "difference")
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (expand "set_before_p")
                                              (("2"
                                                (apply-extensionality
                                                 :hide?
                                                 t)
                                                (("2"
                                                  (iff)
                                                  (("2"
                                                    (ground)
                                                    (("1"
                                                      (replace
                                                       -1
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (hide -)
                                                        (("1"
                                                          (expand
                                                           "leftward_segment_offset")
                                                          (("1"
                                                            (expand
                                                             "rightward_segment_offset")
                                                            (("1"
                                                              (expand
                                                               "segment_midpoint")
                                                              (("1"
                                                                (equate
                                                                 "^(perp_right(e`p2 - e`p1))"
                                                                 "-^(perp_left(e`p2 - e`p1))")
                                                                (("1"
                                                                  (name-replace
                                                                   "v"
                                                                   "^(perp_left(e`p2 - e`p1))")
                                                                  (("1"
                                                                    (rewrite
                                                                     "scal_neg")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (cancel-add!
                                                                         (!
                                                                          1
                                                                          r
                                                                          1))
                                                                        (("1"
                                                                          (factor!
                                                                           (!
                                                                            1
                                                                            r
                                                                            1))
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (grind-with-ext)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -3)
                                                      (("2"
                                                        (expand
                                                         "arb_crossing_set")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (expand
                                                             "counted_crossing_arb?")
                                                            (("2"
                                                              (expand
                                                               "point_on_arb_ray?")
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (case
                                                                   "norm(x!1 - leftward_segment_offset(e, d)) < d")
                                                                  (("1"
                                                                    (lemma
                                                                     "leftward_offset_pt_not_on_perim")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "G"
                                                                       "i"
                                                                       "d - d_1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "leftward_segment_offset")
                                                                          (("1"
                                                                            (equate
                                                                             (!
                                                                              1
                                                                              1)
                                                                             "x!1")
                                                                            (("1"
                                                                              (ground)
                                                                              (("1"
                                                                                (use
                                                                                 "vertex_on_perimeter")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (expand
                                                                                   "point_on_polygon_perimeter?")
                                                                                  (("2"
                                                                                    (inst
                                                                                     +
                                                                                     "s")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (replace
                                                                               -2
                                                                               1)
                                                                              (("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (equate
                                                                                   "edges_of_polygon(G)(i)"
                                                                                   "e"
                                                                                   (assert))
                                                                                  (("2"
                                                                                    (equate
                                                                                     "^(perp_left(e`p2 - e`p1))"
                                                                                     "-^(perp_right(e`p2 - e`p1))")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "scal_neg")
                                                                                      (("1"
                                                                                        (name-replace
                                                                                         "v"
                                                                                         "^(perp_right(e`p2 - e`p1))")
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (grind-with-ext)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (replace
                                                                         -2
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "norm(x!1 - leftward_segment_offset(e, d)) > d")
                                                                    (("1"
                                                                      (lemma
                                                                       "rightward_offset_pt_not_on_perim")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "G"
                                                                         "i"
                                                                         "d_1 - d")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -3
                                                                             -2)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "abs")
                                                                                (("1"
                                                                                  (replace
                                                                                   -3
                                                                                   -5)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "abs")
                                                                                      (("1"
                                                                                        (equate
                                                                                         (!
                                                                                          -5
                                                                                          r)
                                                                                         "2*d")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (equate
                                                                                             (!
                                                                                              1
                                                                                              1)
                                                                                             "x!1")
                                                                                            (("1"
                                                                                              (ground)
                                                                                              (("1"
                                                                                                (use
                                                                                                 "vertex_on_perimeter")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skeep)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "point_on_polygon_perimeter?")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     +
                                                                                                     "s")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               -3
                                                                                               2)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (equate
                                                                                                     "edges_of_polygon(G)(i)"
                                                                                                     "e"
                                                                                                     (assert))
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "rightward_segment_offset")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "leftward_segment_offset")
                                                                                                        (("2"
                                                                                                          (hide-all-but
                                                                                                           (-1
                                                                                                            1))
                                                                                                          (("2"
                                                                                                            (equate
                                                                                                             "^(perp_right(e`p2 - e`p1))"
                                                                                                             "-^(perp_left(e`p2 - e`p1))")
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "scal_neg")
                                                                                                              (("1"
                                                                                                                (name-replace
                                                                                                                 "v"
                                                                                                                 "^(perp_left(e`p2 - e`p1))")
                                                                                                                (("1"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide-all-but
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "rightward_segment_offset")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "leftward_segment_offset")
                                                                                              (("2"
                                                                                                (equate
                                                                                                 "^(perp_right(e`p2 - e`p1))"
                                                                                                 "-^(perp_left(e`p2 - e`p1))")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "scal_neg")
                                                                                                  (("1"
                                                                                                    (name-replace
                                                                                                     "v"
                                                                                                     "^(perp_left(e`p2 - e`p1))")
                                                                                                    (("1"
                                                                                                      (equate
                                                                                                       (!
                                                                                                        1
                                                                                                        l
                                                                                                        1)
                                                                                                       "2*d*v")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "abs")
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replace
                                                                           -2
                                                                           -1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "abs")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -2)
                                                                      (("2"
                                                                        (expand
                                                                         "leftward_segment_offset")
                                                                        (("2"
                                                                          (replace
                                                                           -1)
                                                                          (("2"
                                                                            (equate
                                                                             "^(perp_right(e`p2 - e`p1))"
                                                                             "-^(perp_left(e`p2 - e`p1))")
                                                                            (("1"
                                                                              (rewrite*
                                                                               "scal_neg")
                                                                              (("1"
                                                                                (name-replace
                                                                                 "v"
                                                                                 "^(perp_left(e`p2 - e`p1))")
                                                                                (("1"
                                                                                  (equate
                                                                                   (!
                                                                                    1
                                                                                    l
                                                                                    1)
                                                                                   "d_1 * v")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "abs")
                                                                                      (("1"
                                                                                        (equate
                                                                                         "d_1"
                                                                                         "d"
                                                                                         (assert))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (use "perp_left_nzvect_neq_zero")
              (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (below type-eq-decl nil naturalnumbers nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (in_out_edge_offset_dist const-decl "posreal" polygon_attributes
     nil)
    (point_in_polygon? const-decl "bool" horiz_edge_crossing nil)
    (leftward_segment_offset const-decl "point_2d" segments_2d nil)
    (point_outside_polygon? const-decl "bool" polygon_membership nil)
    (rightward_segment_offset const-decl "point_2d" segments_2d nil)
    (point_in_polygon_conds_equiv formula-decl nil polygon_membership
     nil)
    (point_in_polygon_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (arb_crossings_before_diff formula-decl nil arb_direc_edge_crossing
     nil)
    (arb_crossing_set const-decl "finite_set[point_2d]"
     arb_direc_edge_crossing nil)
    (segment_midpoint const-decl "point_2d" segments_2d nil)
    (remove const-decl "set" sets nil)
    (set_before_p const-decl "finite_set[point_2d]"
     arb_direc_edge_crossing nil)
    (difference const-decl "set" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (neg_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (perp_right const-decl "vector_2d" vectors_cross_2d nil)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (times_div1 formula-decl nil real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (norm_perp_left_is_norm_left formula-decl nil vectors_cross_2d nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (scal_neg formula-decl nil vectors_2D vectors)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (add_zero_left formula-decl nil vectors_2D vectors)
    (point_sub_neg_scal formula-decl nil vectors_cross_2d nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "Vector" vectors_2D vectors)
    (norm_perp_right_is_norm_right formula-decl nil vectors_cross_2d
     nil)
    (point_on_arb_ray? const-decl "bool" vectors_cross_2d nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (scal_add_right formula-decl nil vectors_2D vectors)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (interior_point_is_nonvertex formula-decl nil polygons_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (perp_left_not_parallel formula-decl nil vectors_cross_2d nil)
    (parallel_normalized formula-decl nil vectors_cross_2d nil)
    (G skolem-const-decl "simple_polygon_2d" polygon_membership nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (counted_crossing_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (odd_iff_even_succ formula-decl nil naturalnumbers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (even_iff_not_odd formula-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (card_remove formula-decl nil finite_sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (d skolem-const-decl "posreal" polygon_membership nil)
    (d_1 skolem-const-decl "nonneg_real" polygon_membership nil)
    (vertex_on_perimeter formula-decl nil horiz_edge_crossing nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (add_cancel formula-decl nil vectors_2D vectors)
    (leftward_offset_pt_not_on_perim formula-decl nil
     polygon_membership nil)
    (add_cancel2 formula-decl nil vectors_2D vectors)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (point_add_neg_scal formula-decl nil vectors_cross_2d nil)
    (norm_diff_scal_norm formula-decl nil vectors_cross_2d nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (norm_scal_norm formula-decl nil vectors_cross_2d nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (perp_left_nzvect_neq_zero formula-decl nil vectors_cross_2d nil)
    (member const-decl "bool" sets nil)
    (rightward_offset_pt_not_on_perim formula-decl nil
     polygon_membership nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (point_out_not_in formula-decl nil polygon_membership nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (e skolem-const-decl "segment_2d" polygon_membership nil)
    (- const-decl "Vector" vectors_2D vectors)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (Vector type-eq-decl nil vectors_2D vectors))
   shostak))
 (right_left_midpoints_in_out 0
  (right_left_midpoints_in_out-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin)
      (("" (flatten)
        (("" (lemma "point_in_polygon_conds_equiv")
          ((""
            (inst-cp - "rightward_segment_offset(e, d)"
             "^(perp_right(e`p2 - e`p1))" "G")
            (("1"
              (inst - "leftward_segment_offset(e, d)"
               "^(perp_right(e`p2 - e`p1))" "G")
              (("1" (lemma "point_out_not_in")
                (("1" (inst - "leftward_segment_offset(e, d)" "G")
                  (("1" (ground)
                    (("1" (use "leftward_offset_pt_not_on_perim")
                      (("1" (assert) nil nil)) nil)
                     ("2" (expand "point_in_polygon_arb?")
                      (("2" (flatten)
                        (("2" (lemma "arb_crossings_before_diff")
                          (("2"
                            (inst - "rightward_segment_offset(e, d)"
                             "leftward_segment_offset(e, d)" _ _)
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (case-replace
                                   "let R = arb_crossing_set(rightward_segment_offset(e, d),
                                                       ^(perp_right(e`p2 - e`p1)),
                                                       G) in
                   difference(R,
                                        set_before_p(R, leftward_segment_offset(e, d),
                                                     rightward_segment_offset(e, d))) =
                     remove(segment_midpoint(e), R)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -1 :hide? t)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (replace -1 :hide? t)
                                          (("1"
                                            (rewrite "card_remove")
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (rewrite
                                                   "odd_iff_even_succ")
                                                  (("1"
                                                    (rewrite
                                                     "even_iff_not_odd")
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (expand
                                                     "arb_crossing_set")
                                                    (("2"
                                                      (ground)
                                                      (("1"
                                                        (expand
                                                         "point_on_arb_ray?")
                                                        (("1"
                                                          (expand
                                                           "rightward_segment_offset")
                                                          (("1"
                                                            (inst
                                                             +
                                                             "d")
                                                            (("1"
                                                              (cancel-add
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "^")
                                                                (("1"
                                                                  (real-props)
                                                                  (("1"
                                                                    (rewrite
                                                                     "norm_perp_left_is_norm_left")
                                                                    (("1"
                                                                      (rewrite
                                                                       "norm_perp_right_is_norm_right")
                                                                      (("1"
                                                                        (case-replace
                                                                         "perp_left(e`p2 - e`p1) = -perp_right(e`p2 - e`p1)")
                                                                        (("1"
                                                                          (rewrite
                                                                           "scal_neg")
                                                                          (("1"
                                                                            (move-terms
                                                                             1
                                                                             r
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (grind-with-ext)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (grind-with-ext)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "counted_crossing_arb?")
                                                        (("2"
                                                          (ground)
                                                          (("1"
                                                            (lemma
                                                             "interior_point_is_nonvertex")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "segment_midpoint(e)"
                                                               "G"
                                                               "1/2"
                                                               "i")
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (expand
                                                                   "segment_midpoint")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "e")
                                                                      (("1"
                                                                        (expand
                                                                         "edges_of_polygon")
                                                                        (("1"
                                                                          (distrib
                                                                           1)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             +
                                                             "e")
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (expand
                                                                 "segment_midpoint")
                                                                (("1"
                                                                  (expand
                                                                   "point_on_segment?")
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "1/2")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (distrib
                                                                         1)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (rewrite
                                                                 "parallel_normalized")
                                                                (("2"
                                                                  (rewrite
                                                                   "perp_right_not_parallel")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "e")
                                                              (("2"
                                                                (expand
                                                                 "edge_of_polygon?")
                                                                (("2"
                                                                  (inst?)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (expand
                                             "leftward_segment_offset")
                                            (("2"
                                              (expand
                                               "rightward_segment_offset")
                                              (("2"
                                                (expand
                                                 "point_on_arb_ray?")
                                                (("2"
                                                  (inst + "2*d")
                                                  (("2"
                                                    (equate
                                                     "^(perp_left(e`p2-e`p1))"
                                                     "-^(perp_right(e`p2 - e`p1))")
                                                    (("1"
                                                      (name-replace
                                                       "v"
                                                       "^(perp_right(e`p2 - e`p1))")
                                                      (("1"
                                                        (cancel-add 1)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (grind-with-ext)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "remove")
                                        (("2"
                                          (expand "difference")
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (expand "set_before_p")
                                              (("2"
                                                (apply-extensionality
                                                 :hide?
                                                 t)
                                                (("2"
                                                  (iff)
                                                  (("2"
                                                    (ground)
                                                    (("1"
                                                      (replace
                                                       -1
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (hide -)
                                                        (("1"
                                                          (expand
                                                           "rightward_segment_offset")
                                                          (("1"
                                                            (expand
                                                             "leftward_segment_offset")
                                                            (("1"
                                                              (expand
                                                               "segment_midpoint")
                                                              (("1"
                                                                (equate
                                                                 "^(perp_left(e`p2 - e`p1))"
                                                                 "-^(perp_right(e`p2 - e`p1))")
                                                                (("1"
                                                                  (name-replace
                                                                   "v"
                                                                   "^(perp_right(e`p2 - e`p1))")
                                                                  (("1"
                                                                    (rewrite
                                                                     "scal_neg")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (cancel-add!
                                                                         (!
                                                                          1
                                                                          r
                                                                          1))
                                                                        (("1"
                                                                          (factor!
                                                                           (!
                                                                            1
                                                                            r
                                                                            1))
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (grind-with-ext)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -3)
                                                      (("2"
                                                        (expand
                                                         "arb_crossing_set")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (expand
                                                             "counted_crossing_arb?")
                                                            (("2"
                                                              (expand
                                                               "point_on_arb_ray?")
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (case
                                                                   "norm(x!1 - rightward_segment_offset(e, d)) < d")
                                                                  (("1"
                                                                    (lemma
                                                                     "rightward_offset_pt_not_on_perim")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "G"
                                                                       "i"
                                                                       "d - d_1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "rightward_segment_offset")
                                                                          (("1"
                                                                            (equate
                                                                             (!
                                                                              1
                                                                              1)
                                                                             "x!1")
                                                                            (("1"
                                                                              (ground)
                                                                              (("1"
                                                                                (use
                                                                                 "vertex_on_perimeter")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (expand
                                                                                   "point_on_polygon_perimeter?")
                                                                                  (("2"
                                                                                    (inst
                                                                                     +
                                                                                     "s")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (replace
                                                                               -2
                                                                               1)
                                                                              (("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (equate
                                                                                   "edges_of_polygon(G)(i)"
                                                                                   "e"
                                                                                   (assert))
                                                                                  (("2"
                                                                                    (equate
                                                                                     "^(perp_right(e`p2 - e`p1))"
                                                                                     "-^(perp_left(e`p2 - e`p1))")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "scal_neg")
                                                                                      (("1"
                                                                                        (name-replace
                                                                                         "v"
                                                                                         "^(perp_left(e`p2 - e`p1))")
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (grind-with-ext)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (replace
                                                                         -2
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (case
                                                                     "norm(x!1 - rightward_segment_offset(e, d)) > d")
                                                                    (("1"
                                                                      (lemma
                                                                       "leftward_offset_pt_not_on_perim")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "G"
                                                                         "i"
                                                                         "d_1 - d")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -3
                                                                             -2)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "abs")
                                                                                (("1"
                                                                                  (replace
                                                                                   -3
                                                                                   -5)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "abs")
                                                                                      (("1"
                                                                                        (equate
                                                                                         (!
                                                                                          -5
                                                                                          r)
                                                                                         "2*d")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (equate
                                                                                             (!
                                                                                              1
                                                                                              1)
                                                                                             "x!1")
                                                                                            (("1"
                                                                                              (ground)
                                                                                              (("1"
                                                                                                (use
                                                                                                 "vertex_on_perimeter")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skeep)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "point_on_polygon_perimeter?")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     +
                                                                                                     "s")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               -3
                                                                                               2)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (equate
                                                                                                     "edges_of_polygon(G)(i)"
                                                                                                     "e"
                                                                                                     (assert))
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "leftward_segment_offset")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "rightward_segment_offset")
                                                                                                        (("2"
                                                                                                          (hide-all-but
                                                                                                           (-1
                                                                                                            1))
                                                                                                          (("2"
                                                                                                            (equate
                                                                                                             "^(perp_left(e`p2 - e`p1))"
                                                                                                             "-^(perp_right(e`p2 - e`p1))")
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "scal_neg")
                                                                                                              (("1"
                                                                                                                (name-replace
                                                                                                                 "v"
                                                                                                                 "^(perp_right(e`p2 - e`p1))")
                                                                                                                (("1"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide-all-but
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "leftward_segment_offset")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "rightward_segment_offset")
                                                                                              (("2"
                                                                                                (equate
                                                                                                 "^(perp_left(e`p2 - e`p1))"
                                                                                                 "-^(perp_right(e`p2 - e`p1))")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "scal_neg")
                                                                                                  (("1"
                                                                                                    (name-replace
                                                                                                     "v"
                                                                                                     "^(perp_right(e`p2 - e`p1))")
                                                                                                    (("1"
                                                                                                      (equate
                                                                                                       (!
                                                                                                        1
                                                                                                        l
                                                                                                        1)
                                                                                                       "2*d*v")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "abs")
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replace
                                                                           -2
                                                                           -1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "abs")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -2)
                                                                      (("2"
                                                                        (expand
                                                                         "rightward_segment_offset")
                                                                        (("2"
                                                                          (replace
                                                                           -1)
                                                                          (("2"
                                                                            (equate
                                                                             "^(perp_left(e`p2 - e`p1))"
                                                                             "-^(perp_right(e`p2 - e`p1))")
                                                                            (("1"
                                                                              (rewrite*
                                                                               "scal_neg")
                                                                              (("1"
                                                                                (name-replace
                                                                                 "v"
                                                                                 "^(perp_right(e`p2 - e`p1))")
                                                                                (("1"
                                                                                  (equate
                                                                                   (!
                                                                                    1
                                                                                    l
                                                                                    1)
                                                                                   "d_1 * v")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "abs")
                                                                                      (("1"
                                                                                        (equate
                                                                                         "d_1"
                                                                                         "d"
                                                                                         (assert))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (use "perp_right_nzvect_neq_zero")
              (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (below type-eq-decl nil naturalnumbers nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (in_out_edge_offset_dist const-decl "posreal" polygon_attributes
     nil)
    (point_in_polygon? const-decl "bool" horiz_edge_crossing nil)
    (rightward_segment_offset const-decl "point_2d" segments_2d nil)
    (point_outside_polygon? const-decl "bool" polygon_membership nil)
    (leftward_segment_offset const-decl "point_2d" segments_2d nil)
    (point_in_polygon_conds_equiv formula-decl nil polygon_membership
     nil)
    (point_in_polygon_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (arb_crossings_before_diff formula-decl nil arb_direc_edge_crossing
     nil)
    (arb_crossing_set const-decl "finite_set[point_2d]"
     arb_direc_edge_crossing nil)
    (segment_midpoint const-decl "point_2d" segments_2d nil)
    (remove const-decl "set" sets nil)
    (set_before_p const-decl "finite_set[point_2d]"
     arb_direc_edge_crossing nil)
    (difference const-decl "set" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (neg_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (times_div1 formula-decl nil real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (norm_perp_right_is_norm_right formula-decl nil vectors_cross_2d
     nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (scal_neg formula-decl nil vectors_2D vectors)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (add_zero_left formula-decl nil vectors_2D vectors)
    (point_sub_neg_scal formula-decl nil vectors_cross_2d nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "Vector" vectors_2D vectors)
    (norm_perp_left_is_norm_left formula-decl nil vectors_cross_2d nil)
    (point_on_arb_ray? const-decl "bool" vectors_cross_2d nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (scal_add_right formula-decl nil vectors_2D vectors)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (interior_point_is_nonvertex formula-decl nil polygons_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (perp_right_not_parallel formula-decl nil vectors_cross_2d nil)
    (parallel_normalized formula-decl nil vectors_cross_2d nil)
    (G skolem-const-decl "simple_polygon_2d" polygon_membership nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (counted_crossing_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (odd_iff_even_succ formula-decl nil naturalnumbers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (even_iff_not_odd formula-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (card_remove formula-decl nil finite_sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (d skolem-const-decl "posreal" polygon_membership nil)
    (d_1 skolem-const-decl "nonneg_real" polygon_membership nil)
    (vertex_on_perimeter formula-decl nil horiz_edge_crossing nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (add_cancel formula-decl nil vectors_2D vectors)
    (rightward_offset_pt_not_on_perim formula-decl nil
     polygon_membership nil)
    (add_cancel2 formula-decl nil vectors_2D vectors)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (point_add_neg_scal formula-decl nil vectors_cross_2d nil)
    (norm_diff_scal_norm formula-decl nil vectors_cross_2d nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (norm_scal_norm formula-decl nil vectors_cross_2d nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (perp_right_nzvect_neq_zero formula-decl nil vectors_cross_2d nil)
    (member const-decl "bool" sets nil)
    (leftward_offset_pt_not_on_perim formula-decl nil
     polygon_membership nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (point_out_not_in formula-decl nil polygon_membership nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (e skolem-const-decl "segment_2d" polygon_membership nil)
    (- const-decl "Vector" vectors_2D vectors)
    (perp_right const-decl "vector_2d" vectors_cross_2d nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (Vector type-eq-decl nil vectors_2D vectors))
   shostak))
 (left_right_midpoints_out_in 0
  (left_right_midpoints_out_in-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin)
      (("" (flatten)
        (("" (lemma "point_in_polygon_conds_equiv")
          ((""
            (inst - "rightward_segment_offset(e, d)"
             "^(perp_left(e`p2 - e`p1))" "G")
            (("1" (assert)
              (("1" (lemma "point_out_not_in")
                (("1" (inst-cp - "rightward_segment_offset(e, d)" "G")
                  (("1" (inst - "leftward_segment_offset(e, d)" "G")
                    (("1" (assert)
                      (("1" (ground)
                        (("1" (use "rightward_offset_pt_not_on_perim")
                          (("1" (assert) nil nil)) nil)
                         ("2" (lemma "point_in_polygon_conds_equiv")
                          (("2"
                            (inst - "leftward_segment_offset(e, d)"
                             "^(perp_left(e`p2 - e`p1))" "G")
                            (("2" (assert)
                              (("2"
                                (expand "point_in_polygon_arb?")
                                (("2"
                                  (use
                                   "rightward_offset_pt_not_on_perim")
                                  (("2"
                                    (use
                                     "leftward_offset_pt_not_on_perim")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lemma
                                         "arb_crossings_before_diff")
                                        (("2"
                                          (inst
                                           -
                                           "leftward_segment_offset(e, d)"
                                           "rightward_segment_offset(e, d)"
                                           _
                                           _)
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (case-replace
                                                 "let R = arb_crossing_set(leftward_segment_offset(e, d),
                                                             ^(perp_left(e`p2 - e`p1)),
                                                             G) in
                         difference(R,
                                              set_before_p(R, rightward_segment_offset(e, d),
                                                           leftward_segment_offset(e, d))) =
                           remove(segment_midpoint(e), R)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace
                                                     -1
                                                     :hide?
                                                     t)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         :hide?
                                                         t)
                                                        (("1"
                                                          (rewrite
                                                           "card_remove")
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (rewrite
                                                                 "odd_iff_even_succ")
                                                                (("1"
                                                                  (rewrite
                                                                   "even_iff_not_odd")
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "arb_crossing_set")
                                                                  (("2"
                                                                    (ground)
                                                                    (("1"
                                                                      (expand
                                                                       "point_on_arb_ray?")
                                                                      (("1"
                                                                        (expand
                                                                         "leftward_segment_offset")
                                                                        (("1"
                                                                          (inst
                                                                           +
                                                                           "d")
                                                                          (("1"
                                                                            (cancel-add
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "^")
                                                                              (("1"
                                                                                (real-props)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "norm_perp_right_is_norm_right")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "norm_perp_left_is_norm_left")
                                                                                    (("1"
                                                                                      (case-replace
                                                                                       "perp_right(e`p2 - e`p1) = -perp_left(e`p2 - e`p1)")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "scal_neg")
                                                                                        (("1"
                                                                                          (move-terms
                                                                                           1
                                                                                           r
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (grind-with-ext)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (grind-with-ext)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "counted_crossing_arb?")
                                                                      (("2"
                                                                        (ground)
                                                                        (("1"
                                                                          (lemma
                                                                           "interior_point_is_nonvertex")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "segment_midpoint(e)"
                                                                             "G"
                                                                             "1/2"
                                                                             "i")
                                                                            (("1"
                                                                              (ground)
                                                                              (("1"
                                                                                (expand
                                                                                 "segment_midpoint")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "e")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "edges_of_polygon")
                                                                                      (("1"
                                                                                        (distrib
                                                                                         1)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (inst
                                                                           +
                                                                           "e")
                                                                          (("1"
                                                                            (ground)
                                                                            (("1"
                                                                              (expand
                                                                               "segment_midpoint")
                                                                              (("1"
                                                                                (expand
                                                                                 "point_on_segment?")
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "1/2")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (distrib
                                                                                       1)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (rewrite
                                                                               "parallel_normalized")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "perp_left_not_parallel")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "e")
                                                                            (("2"
                                                                              (expand
                                                                               "edge_of_polygon?")
                                                                              (("2"
                                                                                (inst?)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "rightward_segment_offset")
                                                          (("2"
                                                            (expand
                                                             "leftward_segment_offset")
                                                            (("2"
                                                              (expand
                                                               "point_on_arb_ray?")
                                                              (("2"
                                                                (inst
                                                                 +
                                                                 "2*d")
                                                                (("2"
                                                                  (equate
                                                                   "^(perp_right(e`p2-e`p1))"
                                                                   "-^(perp_left(e`p2 - e`p1))")
                                                                  (("1"
                                                                    (name-replace
                                                                     "v"
                                                                     "^(perp_left(e`p2 - e`p1))")
                                                                    (("1"
                                                                      (cancel-add
                                                                       1)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (grind-with-ext)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "remove")
                                                      (("2"
                                                        (expand
                                                         "difference")
                                                        (("2"
                                                          (expand
                                                           "member")
                                                          (("2"
                                                            (expand
                                                             "set_before_p")
                                                            (("2"
                                                              (apply-extensionality
                                                               :hide?
                                                               t)
                                                              (("2"
                                                                (iff)
                                                                (("2"
                                                                  (ground)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (hide
                                                                       -)
                                                                      (("1"
                                                                        (expand
                                                                         "leftward_segment_offset")
                                                                        (("1"
                                                                          (expand
                                                                           "rightward_segment_offset")
                                                                          (("1"
                                                                            (expand
                                                                             "segment_midpoint")
                                                                            (("1"
                                                                              (equate
                                                                               "^(perp_right(e`p2 - e`p1))"
                                                                               "-^(perp_left(e`p2 - e`p1))")
                                                                              (("1"
                                                                                (name-replace
                                                                                 "v"
                                                                                 "^(perp_left(e`p2 - e`p1))")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "scal_neg")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (cancel-add!
                                                                                       (!
                                                                                        1
                                                                                        r
                                                                                        1))
                                                                                      (("1"
                                                                                        (factor!
                                                                                         (!
                                                                                          1
                                                                                          r
                                                                                          1))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (grind-with-ext)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     -3)
                                                                    (("2"
                                                                      (expand
                                                                       "arb_crossing_set")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand
                                                                           "counted_crossing_arb?")
                                                                          (("2"
                                                                            (expand
                                                                             "point_on_arb_ray?")
                                                                            (("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (case
                                                                                 "norm(x!1 - leftward_segment_offset(e, d)) < d")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "leftward_offset_pt_not_on_perim")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "G"
                                                                                     "i"
                                                                                     "d - d_1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "leftward_segment_offset")
                                                                                        (("1"
                                                                                          (equate
                                                                                           (!
                                                                                            1
                                                                                            1)
                                                                                           "x!1")
                                                                                          (("1"
                                                                                            (ground)
                                                                                            (("1"
                                                                                              (use
                                                                                               "vertex_on_perimeter")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (skeep)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "point_on_polygon_perimeter?")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "s")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (replace
                                                                                             -2
                                                                                             1)
                                                                                            (("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (equate
                                                                                                 "edges_of_polygon(G)(i)"
                                                                                                 "e"
                                                                                                 (assert))
                                                                                                (("2"
                                                                                                  (equate
                                                                                                   "^(perp_left(e`p2 - e`p1))"
                                                                                                   "-^(perp_right(e`p2 - e`p1))")
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "scal_neg")
                                                                                                    (("1"
                                                                                                      (name-replace
                                                                                                       "v"
                                                                                                       "^(perp_right(e`p2 - e`p1))")
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (grind-with-ext)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (replace
                                                                                       -2
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "norm(x!1 - leftward_segment_offset(e, d)) > d")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "rightward_offset_pt_not_on_perim")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "G"
                                                                                       "i"
                                                                                       "d_1 - d")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -3
                                                                                           -2)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "abs")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -3
                                                                                                 -5)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "abs")
                                                                                                    (("1"
                                                                                                      (equate
                                                                                                       (!
                                                                                                        -5
                                                                                                        r)
                                                                                                       "2*d")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (equate
                                                                                                           (!
                                                                                                            1
                                                                                                            1)
                                                                                                           "x!1")
                                                                                                          (("1"
                                                                                                            (ground)
                                                                                                            (("1"
                                                                                                              (use
                                                                                                               "vertex_on_perimeter")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (skeep)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "point_on_polygon_perimeter?")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   +
                                                                                                                   "s")
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide
                                                                                                             -3
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -2)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (equate
                                                                                                                   "edges_of_polygon(G)(i)"
                                                                                                                   "e"
                                                                                                                   (assert))
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "rightward_segment_offset")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "leftward_segment_offset")
                                                                                                                      (("2"
                                                                                                                        (hide-all-but
                                                                                                                         (-1
                                                                                                                          1))
                                                                                                                        (("2"
                                                                                                                          (equate
                                                                                                                           "^(perp_right(e`p2 - e`p1))"
                                                                                                                           "-^(perp_left(e`p2 - e`p1))")
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "scal_neg")
                                                                                                                            (("1"
                                                                                                                              (name-replace
                                                                                                                               "v"
                                                                                                                               "^(perp_left(e`p2 - e`p1))")
                                                                                                                              (("1"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (hide-all-but
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "rightward_segment_offset")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "leftward_segment_offset")
                                                                                                            (("2"
                                                                                                              (equate
                                                                                                               "^(perp_right(e`p2 - e`p1))"
                                                                                                               "-^(perp_left(e`p2 - e`p1))")
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "scal_neg")
                                                                                                                (("1"
                                                                                                                  (name-replace
                                                                                                                   "v"
                                                                                                                   "^(perp_left(e`p2 - e`p1))")
                                                                                                                  (("1"
                                                                                                                    (equate
                                                                                                                     (!
                                                                                                                      1
                                                                                                                      l
                                                                                                                      1)
                                                                                                                     "2*d*v")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "abs")
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replace
                                                                                         -2
                                                                                         -1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "abs")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "leftward_segment_offset")
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (equate
                                                                                           "^(perp_right(e`p2 - e`p1))"
                                                                                           "-^(perp_left(e`p2 - e`p1))")
                                                                                          (("1"
                                                                                            (rewrite*
                                                                                             "scal_neg")
                                                                                            (("1"
                                                                                              (name-replace
                                                                                               "v"
                                                                                               "^(perp_left(e`p2 - e`p1))")
                                                                                              (("1"
                                                                                                (equate
                                                                                                 (!
                                                                                                  1
                                                                                                  l
                                                                                                  1)
                                                                                                 "d_1 * v")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "abs")
                                                                                                    (("1"
                                                                                                      (equate
                                                                                                       "d_1"
                                                                                                       "d"
                                                                                                       (assert))
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (use "perp_left_nzvect_neq_zero")
              (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (below type-eq-decl nil naturalnumbers nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (in_out_edge_offset_dist const-decl "posreal" polygon_attributes
     nil)
    (point_outside_polygon? const-decl "bool" polygon_membership nil)
    (leftward_segment_offset const-decl "point_2d" segments_2d nil)
    (point_in_polygon? const-decl "bool" horiz_edge_crossing nil)
    (rightward_segment_offset const-decl "point_2d" segments_2d nil)
    (point_in_polygon_conds_equiv formula-decl nil polygon_membership
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (perp_left_nzvect_neq_zero formula-decl nil vectors_cross_2d nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (norm_scal_norm formula-decl nil vectors_cross_2d nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (norm_diff_scal_norm formula-decl nil vectors_cross_2d nil)
    (point_add_neg_scal formula-decl nil vectors_cross_2d nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (add_cancel2 formula-decl nil vectors_2D vectors)
    (add_cancel formula-decl nil vectors_2D vectors)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (vertex_on_perimeter formula-decl nil horiz_edge_crossing nil)
    (d_1 skolem-const-decl "nonneg_real" polygon_membership nil)
    (d skolem-const-decl "posreal" polygon_membership nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (card_remove formula-decl nil finite_sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_iff_not_odd formula-decl nil naturalnumbers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (odd_iff_even_succ formula-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (counted_crossing_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (pred type-eq-decl nil defined_types nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (G skolem-const-decl "simple_polygon_2d" polygon_membership nil)
    (parallel_normalized formula-decl nil vectors_cross_2d nil)
    (perp_left_not_parallel formula-decl nil vectors_cross_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (interior_point_is_nonvertex formula-decl nil polygons_2d nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (scal_add_right formula-decl nil vectors_2D vectors)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (point_on_arb_ray? const-decl "bool" vectors_cross_2d nil)
    (norm_perp_right_is_norm_right formula-decl nil vectors_cross_2d
     nil)
    (- const-decl "Vector" vectors_2D vectors)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (point_sub_neg_scal formula-decl nil vectors_cross_2d nil)
    (add_zero_left formula-decl nil vectors_2D vectors)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (scal_neg formula-decl nil vectors_2D vectors)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (norm_perp_left_is_norm_left formula-decl nil vectors_cross_2d nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (times_div1 formula-decl nil real_props nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (perp_right const-decl "vector_2d" vectors_cross_2d nil)
    (neg_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (difference const-decl "set" sets nil)
    (set_before_p const-decl "finite_set[point_2d]"
     arb_direc_edge_crossing nil)
    (remove const-decl "set" sets nil)
    (segment_midpoint const-decl "point_2d" segments_2d nil)
    (arb_crossing_set const-decl "finite_set[point_2d]"
     arb_direc_edge_crossing nil)
    (arb_crossings_before_diff formula-decl nil arb_direc_edge_crossing
     nil)
    (leftward_offset_pt_not_on_perim formula-decl nil
     polygon_membership nil)
    (point_in_polygon_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (rightward_offset_pt_not_on_perim formula-decl nil
     polygon_membership nil)
    (point_out_not_in formula-decl nil polygon_membership nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (e skolem-const-decl "segment_2d" polygon_membership nil)
    (- const-decl "Vector" vectors_2D vectors)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (Vector type-eq-decl nil vectors_2D vectors))
   shostak))
 (right_left_midpoints_out_in 0
  (right_left_midpoints_out_in-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin)
      (("" (flatten)
        (("" (lemma "point_in_polygon_conds_equiv")
          ((""
            (inst - "leftward_segment_offset(e, d)"
             "^(perp_right(e`p2 - e`p1))" "G")
            (("1" (assert)
              (("1" (lemma "point_out_not_in")
                (("1" (inst-cp - "leftward_segment_offset(e, d)" "G")
                  (("1" (inst - "rightward_segment_offset(e, d)" "G")
                    (("1" (assert)
                      (("1" (ground)
                        (("1" (use "leftward_offset_pt_not_on_perim")
                          (("1" (assert) nil nil)) nil)
                         ("2" (lemma "point_in_polygon_conds_equiv")
                          (("2"
                            (inst - "rightward_segment_offset(e, d)"
                             "^(perp_right(e`p2 - e`p1))" "G")
                            (("2" (assert)
                              (("2"
                                (expand "point_in_polygon_arb?")
                                (("2"
                                  (use
                                   "leftward_offset_pt_not_on_perim")
                                  (("2"
                                    (use
                                     "rightward_offset_pt_not_on_perim")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lemma
                                         "arb_crossings_before_diff")
                                        (("2"
                                          (inst
                                           -
                                           "rightward_segment_offset(e, d)"
                                           "leftward_segment_offset(e, d)"
                                           _
                                           _)
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (case-replace
                                                 "let R = arb_crossing_set(rightward_segment_offset(e, d),
                                                                   ^(perp_right(e`p2 - e`p1)),
                                                                   G) in
                               difference(R,
                                                    set_before_p(R, leftward_segment_offset(e, d),
                                                                 rightward_segment_offset(e, d))) =
                                 remove(segment_midpoint(e), R)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace
                                                     -1
                                                     :hide?
                                                     t)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         :hide?
                                                         t)
                                                        (("1"
                                                          (rewrite
                                                           "card_remove")
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (rewrite
                                                                 "odd_iff_even_succ")
                                                                (("1"
                                                                  (rewrite
                                                                   "even_iff_not_odd")
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "arb_crossing_set")
                                                                  (("2"
                                                                    (ground)
                                                                    (("1"
                                                                      (expand
                                                                       "point_on_arb_ray?")
                                                                      (("1"
                                                                        (expand
                                                                         "rightward_segment_offset")
                                                                        (("1"
                                                                          (inst
                                                                           +
                                                                           "d")
                                                                          (("1"
                                                                            (cancel-add
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "^")
                                                                              (("1"
                                                                                (real-props)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "norm_perp_left_is_norm_left")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "norm_perp_right_is_norm_right")
                                                                                    (("1"
                                                                                      (case-replace
                                                                                       "perp_left(e`p2 - e`p1) = -perp_right(e`p2 - e`p1)")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "scal_neg")
                                                                                        (("1"
                                                                                          (move-terms
                                                                                           1
                                                                                           r
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (grind-with-ext)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (grind-with-ext)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "counted_crossing_arb?")
                                                                      (("2"
                                                                        (ground)
                                                                        (("1"
                                                                          (lemma
                                                                           "interior_point_is_nonvertex")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "segment_midpoint(e)"
                                                                             "G"
                                                                             "1/2"
                                                                             "i")
                                                                            (("1"
                                                                              (ground)
                                                                              (("1"
                                                                                (expand
                                                                                 "segment_midpoint")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "e")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "edges_of_polygon")
                                                                                      (("1"
                                                                                        (distrib
                                                                                         1)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (inst
                                                                           +
                                                                           "e")
                                                                          (("1"
                                                                            (ground)
                                                                            (("1"
                                                                              (expand
                                                                               "segment_midpoint")
                                                                              (("1"
                                                                                (expand
                                                                                 "point_on_segment?")
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "1/2")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (distrib
                                                                                       1)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (rewrite
                                                                               "parallel_normalized")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "perp_right_not_parallel")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "e")
                                                                            (("2"
                                                                              (expand
                                                                               "edge_of_polygon?")
                                                                              (("2"
                                                                                (inst?)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "leftward_segment_offset")
                                                          (("2"
                                                            (expand
                                                             "rightward_segment_offset")
                                                            (("2"
                                                              (expand
                                                               "point_on_arb_ray?")
                                                              (("2"
                                                                (inst
                                                                 +
                                                                 "2*d")
                                                                (("2"
                                                                  (equate
                                                                   "^(perp_left(e`p2-e`p1))"
                                                                   "-^(perp_right(e`p2 - e`p1))")
                                                                  (("1"
                                                                    (name-replace
                                                                     "v"
                                                                     "^(perp_right(e`p2 - e`p1))")
                                                                    (("1"
                                                                      (cancel-add
                                                                       1)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (grind-with-ext)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "remove")
                                                      (("2"
                                                        (expand
                                                         "difference")
                                                        (("2"
                                                          (expand
                                                           "member")
                                                          (("2"
                                                            (expand
                                                             "set_before_p")
                                                            (("2"
                                                              (apply-extensionality
                                                               :hide?
                                                               t)
                                                              (("2"
                                                                (iff)
                                                                (("2"
                                                                  (ground)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (hide
                                                                       -)
                                                                      (("1"
                                                                        (expand
                                                                         "rightward_segment_offset")
                                                                        (("1"
                                                                          (expand
                                                                           "leftward_segment_offset")
                                                                          (("1"
                                                                            (expand
                                                                             "segment_midpoint")
                                                                            (("1"
                                                                              (equate
                                                                               "^(perp_left(e`p2 - e`p1))"
                                                                               "-^(perp_right(e`p2 - e`p1))")
                                                                              (("1"
                                                                                (name-replace
                                                                                 "v"
                                                                                 "^(perp_right(e`p2 - e`p1))")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "scal_neg")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (cancel-add!
                                                                                       (!
                                                                                        1
                                                                                        r
                                                                                        1))
                                                                                      (("1"
                                                                                        (factor!
                                                                                         (!
                                                                                          1
                                                                                          r
                                                                                          1))
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (grind-with-ext)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     -3)
                                                                    (("2"
                                                                      (expand
                                                                       "arb_crossing_set")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (expand
                                                                           "counted_crossing_arb?")
                                                                          (("2"
                                                                            (expand
                                                                             "point_on_arb_ray?")
                                                                            (("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (case
                                                                                 "norm(x!1 - rightward_segment_offset(e, d)) < d")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "rightward_offset_pt_not_on_perim")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "G"
                                                                                     "i"
                                                                                     "d - d_1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "rightward_segment_offset")
                                                                                        (("1"
                                                                                          (equate
                                                                                           (!
                                                                                            1
                                                                                            1)
                                                                                           "x!1")
                                                                                          (("1"
                                                                                            (ground)
                                                                                            (("1"
                                                                                              (use
                                                                                               "vertex_on_perimeter")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (skeep)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "point_on_polygon_perimeter?")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   +
                                                                                                   "s")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (replace
                                                                                             -2
                                                                                             1)
                                                                                            (("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (equate
                                                                                                 "edges_of_polygon(G)(i)"
                                                                                                 "e"
                                                                                                 (assert))
                                                                                                (("2"
                                                                                                  (equate
                                                                                                   "^(perp_right(e`p2 - e`p1))"
                                                                                                   "-^(perp_left(e`p2 - e`p1))")
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "scal_neg")
                                                                                                    (("1"
                                                                                                      (name-replace
                                                                                                       "v"
                                                                                                       "^(perp_left(e`p2 - e`p1))")
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (grind-with-ext)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (replace
                                                                                       -2
                                                                                       -1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "norm(x!1 - rightward_segment_offset(e, d)) > d")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "leftward_offset_pt_not_on_perim")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -
                                                                                       "G"
                                                                                       "i"
                                                                                       "d_1 - d")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -3
                                                                                           -2)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "abs")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -3
                                                                                                 -5)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "abs")
                                                                                                    (("1"
                                                                                                      (equate
                                                                                                       (!
                                                                                                        -5
                                                                                                        r)
                                                                                                       "2*d")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (equate
                                                                                                           (!
                                                                                                            1
                                                                                                            1)
                                                                                                           "x!1")
                                                                                                          (("1"
                                                                                                            (ground)
                                                                                                            (("1"
                                                                                                              (use
                                                                                                               "vertex_on_perimeter")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (skeep)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "point_on_polygon_perimeter?")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   +
                                                                                                                   "s")
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide
                                                                                                             -3
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -2)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (equate
                                                                                                                   "edges_of_polygon(G)(i)"
                                                                                                                   "e"
                                                                                                                   (assert))
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "leftward_segment_offset")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "rightward_segment_offset")
                                                                                                                      (("2"
                                                                                                                        (hide-all-but
                                                                                                                         (-1
                                                                                                                          1))
                                                                                                                        (("2"
                                                                                                                          (equate
                                                                                                                           "^(perp_left(e`p2 - e`p1))"
                                                                                                                           "-^(perp_right(e`p2 - e`p1))")
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "scal_neg")
                                                                                                                            (("1"
                                                                                                                              (name-replace
                                                                                                                               "v"
                                                                                                                               "^(perp_right(e`p2 - e`p1))")
                                                                                                                              (("1"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (hide-all-but
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "leftward_segment_offset")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "rightward_segment_offset")
                                                                                                            (("2"
                                                                                                              (equate
                                                                                                               "^(perp_left(e`p2 - e`p1))"
                                                                                                               "-^(perp_right(e`p2 - e`p1))")
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "scal_neg")
                                                                                                                (("1"
                                                                                                                  (name-replace
                                                                                                                   "v"
                                                                                                                   "^(perp_right(e`p2 - e`p1))")
                                                                                                                  (("1"
                                                                                                                    (equate
                                                                                                                     (!
                                                                                                                      1
                                                                                                                      l
                                                                                                                      1)
                                                                                                                     "2*d*v")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "abs")
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replace
                                                                                         -2
                                                                                         -1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "abs")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "rightward_segment_offset")
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (equate
                                                                                           "^(perp_left(e`p2 - e`p1))"
                                                                                           "-^(perp_right(e`p2 - e`p1))")
                                                                                          (("1"
                                                                                            (rewrite*
                                                                                             "scal_neg")
                                                                                            (("1"
                                                                                              (name-replace
                                                                                               "v"
                                                                                               "^(perp_right(e`p2 - e`p1))")
                                                                                              (("1"
                                                                                                (equate
                                                                                                 (!
                                                                                                  1
                                                                                                  l
                                                                                                  1)
                                                                                                 "d_1 * v")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "abs")
                                                                                                    (("1"
                                                                                                      (equate
                                                                                                       "d_1"
                                                                                                       "d"
                                                                                                       (assert))
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (use "perp_right_nzvect_neq_zero")
              (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (below type-eq-decl nil naturalnumbers nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (in_out_edge_offset_dist const-decl "posreal" polygon_attributes
     nil)
    (point_outside_polygon? const-decl "bool" polygon_membership nil)
    (rightward_segment_offset const-decl "point_2d" segments_2d nil)
    (point_in_polygon? const-decl "bool" horiz_edge_crossing nil)
    (leftward_segment_offset const-decl "point_2d" segments_2d nil)
    (point_in_polygon_conds_equiv formula-decl nil polygon_membership
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (perp_right_nzvect_neq_zero formula-decl nil vectors_cross_2d nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (norm_scal_norm formula-decl nil vectors_cross_2d nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (norm_diff_scal_norm formula-decl nil vectors_cross_2d nil)
    (point_add_neg_scal formula-decl nil vectors_cross_2d nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (add_cancel2 formula-decl nil vectors_2D vectors)
    (add_cancel formula-decl nil vectors_2D vectors)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (vertex_on_perimeter formula-decl nil horiz_edge_crossing nil)
    (d_1 skolem-const-decl "nonneg_real" polygon_membership nil)
    (d skolem-const-decl "posreal" polygon_membership nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (card_remove formula-decl nil finite_sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_iff_not_odd formula-decl nil naturalnumbers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (odd_iff_even_succ formula-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (counted_crossing_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (pred type-eq-decl nil defined_types nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (G skolem-const-decl "simple_polygon_2d" polygon_membership nil)
    (parallel_normalized formula-decl nil vectors_cross_2d nil)
    (perp_right_not_parallel formula-decl nil vectors_cross_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (interior_point_is_nonvertex formula-decl nil polygons_2d nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (scal_add_right formula-decl nil vectors_2D vectors)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (point_on_arb_ray? const-decl "bool" vectors_cross_2d nil)
    (norm_perp_left_is_norm_left formula-decl nil vectors_cross_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (point_sub_neg_scal formula-decl nil vectors_cross_2d nil)
    (add_zero_left formula-decl nil vectors_2D vectors)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (scal_neg formula-decl nil vectors_2D vectors)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (norm_perp_right_is_norm_right formula-decl nil vectors_cross_2d
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (times_div1 formula-decl nil real_props nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (neg_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (difference const-decl "set" sets nil)
    (set_before_p const-decl "finite_set[point_2d]"
     arb_direc_edge_crossing nil)
    (remove const-decl "set" sets nil)
    (segment_midpoint const-decl "point_2d" segments_2d nil)
    (arb_crossing_set const-decl "finite_set[point_2d]"
     arb_direc_edge_crossing nil)
    (arb_crossings_before_diff formula-decl nil arb_direc_edge_crossing
     nil)
    (rightward_offset_pt_not_on_perim formula-decl nil
     polygon_membership nil)
    (point_in_polygon_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (leftward_offset_pt_not_on_perim formula-decl nil
     polygon_membership nil)
    (point_out_not_in formula-decl nil polygon_membership nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (e skolem-const-decl "segment_2d" polygon_membership nil)
    (- const-decl "Vector" vectors_2D vectors)
    (perp_right const-decl "vector_2d" vectors_cross_2d nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (Vector type-eq-decl nil vectors_2D vectors))
   shostak))
 (counted_crossing_direction_exists 0
  (counted_crossing_direction_exists-1 nil 3874129021
   ("" (skeep)
    (("" (case "vertex?(G)(p)")
      (("1" (copy -1)
        (("1" (expand "vertex?" -1)
          (("1" (copy -3)
            (("1" (expand "point_on_polygon_perimeter?" -1)
              (("1" (skeep*)
                (("1"
                  (case "parallel?(G`vertices(prev_index(G, i)) - p, G`vertices(next_index(G, i)) - p)")
                  (("1" (lemma "adjacent_edges_not_dir_parallel")
                    (("1" (inst - "G" "i" "prev_index(G,i)")
                      (("1" (ground)
                        (("1" (expand "edges_of_polygon")
                          (("1" (rewrite* "next_prev_is_original")
                            (("1"
                              (inst +
                               "^(perp_right(G`vertices(next_index(G, i)) - p))")
                              (("1"
                                (expand "counted_crossing_direction?")
                                (("1"
                                  (inst + "i")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma
                                       "perp_left_right_parallel")
                                      (("1"
                                        (invoke
                                         (inst - "%1" "%2")
                                         (! -2 *))
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (use
                                             "cross_normalized_perp_right_pos")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "parallel?")
                                                (("1"
                                                  (expand
                                                   "dir_parallel?")
                                                  (("1"
                                                    (skeep*)
                                                    (("1"
                                                      (case "nzk > 0")
                                                      (("1"
                                                        (inst
                                                         +
                                                         "1/nzk")
                                                        (("1"
                                                          (replace -6)
                                                          (("1"
                                                            (replace
                                                             -4)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-1 1))
                                                          (("2"
                                                            (real-props)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "cross_scales")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "G`vertices(next_index(G, i)) - p"
                                                           "^(perp_right(G`vertices(next_index(G, i)) - p))"
                                                           "nzk"
                                                           "1")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (replace
                                                               -4)
                                                              (("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (mult-cases
                                                                   3)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (lemma
                                                 "vertex_neq_next")
                                                (("2"
                                                  (inst - "G" "i")
                                                  (("2"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 3)
                                            (("2"
                                              (rewrite "parallel_symm")
                                              (("2"
                                                (expand "parallel?")
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (expand
                                                     "dir_parallel?")
                                                    (("2"
                                                      (case "nzk > 0")
                                                      (("1"
                                                        (inst 2 "nzk")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst
                                                         2
                                                         "-1/nzk")
                                                        (("1"
                                                          (rewrite
                                                           "scal_neg")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (real-props)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "vertex_neq_next")
                                          (("2"
                                            (inst - "G" "i")
                                            (("2" (ground) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (lemma "vertex_neq_prev")
                                          (("3"
                                            (inst - "G" "i")
                                            (("3" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (-3 1))
                                (("2"
                                  (replace -1 :dir rl)
                                  (("2"
                                    (lemma "vertex_neq_next")
                                    (("2"
                                      (inst - "G" "i")
                                      (("2"
                                        (ground)
                                        (("2"
                                          (expand "perp_right")
                                          (("2"
                                            (decompose-equality -1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "-" -)
                                                (("2"
                                                  (apply-extensionality
                                                   :hide?
                                                   t)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (inst +
                     "^(bisect_vector(p, G`vertices(prev_index(G, i)), G`vertices(next_index(G, i))))")
                    (("1" (expand "counted_crossing_direction?")
                      (("1" (ground)
                        (("1" (inst + "i")
                          (("1" (assert)
                            (("1"
                              (lemma
                               "bisect_not_parallel_cross_nonzero")
                              (("1"
                                (assert)
                                (("1"
                                  (invoke
                                   (inst - "G" "%1" "i")
                                   (! 1 1 1 1 2))
                                  (("1" (ground) nil nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (use "bisect_vector_nonzero")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lemma "vertex_neq_next")
                                          (("2"
                                            (lemma "vertex_neq_prev")
                                            (("2"
                                              (inst -1 "G" "i")
                                              (("2"
                                                (inst - "G" "i")
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (use "bisect_vector_nonzero")
                      (("2" (assert)
                        (("2" (lemma "vertex_neq_next")
                          (("2" (lemma "vertex_neq_prev")
                            (("2" (inst - "G" "i")
                              (("2"
                                (inst - "G" "i")
                                (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (copy -1)
        (("2" (expand "point_on_polygon_perimeter?" -1)
          (("2" (skeep)
            (("2" (inst + "^(perp_right(e`p2 - e`p1))")
              (("1" (expand "counted_crossing_direction?")
                (("1" (ground)
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (rewrite "parallel_normalized")
                        (("1" (rewrite "perp_right_not_parallel") nil
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (use "perp_right_segment_nonzero") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (vertex? const-decl "pred[point_2d]" polygons_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (- const-decl "Vector" vectors_2D vectors)
    (parallel? const-decl "bool" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (adjacent_edge? const-decl "bool" polygons_2d nil)
    (G skolem-const-decl "simple_polygon_2d" polygon_membership nil)
    (i skolem-const-decl "below(G`num_vertices)" polygon_membership
       nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (/= const-decl "boolean" notequal nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (perp_right const-decl "vector_2d" vectors_cross_2d nil)
    (p skolem-const-decl "point_2d" polygon_membership nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (perp_left_right_parallel formula-decl nil vectors_cross_2d nil)
    (vertex_neq_prev formula-decl nil polygons_2d nil)
    (vertex_neq_next formula-decl nil polygons_2d nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (> const-decl "bool" reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (pos_div_gt formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (scal_1 formula-decl nil vectors_2D vectors)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nzk skolem-const-decl "nzreal" polygon_membership nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (neg_times_lt formula-decl nil real_props nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (cross_scales formula-decl nil vectors_cross_2d nil)
    (cross_normalized_perp_right_pos formula-decl nil vectors_cross_2d
     nil)
    (parallel_symm formula-decl nil vectors_2D vectors)
    (nzk skolem-const-decl "nzreal" polygon_membership nil)
    (div_mult_neg_ge1 formula-decl nil real_props nil)
    (scal_neg formula-decl nil vectors_2D vectors)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (counted_crossing_direction? const-decl "bool"
     arb_direc_edge_crossing nil)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (comp_zero_y formula-decl nil vectors_2D vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (next_prev_is_original formula-decl nil polygons_2d nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (adjacent_edges_not_dir_parallel formula-decl nil polygons_2d nil)
    (bisect_not_parallel_cross_nonzero formula-decl nil
     arb_direc_edge_crossing nil)
    (bisect_vector_nonzero formula-decl nil arb_direc_edge_crossing
     nil)
    (bisect_vector const-decl "vector_2d" arb_direc_edge_crossing nil)
    (TRUE const-decl "bool" booleans nil)
    (e skolem-const-decl "(edge_of_polygon?(G))" polygon_membership
     nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (perp_right_not_parallel formula-decl nil vectors_cross_2d nil)
    (parallel_normalized formula-decl nil vectors_cross_2d nil)
    (perp_right_segment_nonzero formula-decl nil segments_2d_props
     nil))
   shostak))
 (free_ray_point_outside 0
  (free_ray_point_outside-1 nil 3874129021
   ("" (skeep*)
    (("" (expand "point_outside_polygon?")
      ((""
        (inst +
         "(# body := (# length := 1, seq := lambda (i: below(1)): p + d * v #), tail := v #)")
        (("1" (expand "serp_ray_outside?")
          (("1" (ground)
            (("1" (skeep) nil)
             ("2" (skeep)
              (("2" (rewrite "add_assoc" :dir rl)
                (("2" (rewrite "scal_add_left" :dir rl)
                  (("2" (rewrite "empty_ray_intersection_sets")
                    (("2" (flatten)
                      (("2" (use "empty_key_arb_only_parallel")
                        (("2" (assert)
                          (("2" (inst - "d_1+d")
                            (("2" (expand "only_parallel_edges?")
                              (("2"
                                (expand "point_on_polygon_perimeter?")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (use
                                         "empty_parallel_intersections_not_on")
                                        (("2"
                                          (assert)
                                          nil)))))))))))))))))))))))))))))))))
         ("2" (skeep) nil))))))
    nil)
   ((point_outside_polygon? const-decl "bool" polygon_membership nil)
    (serp_ray_outside? const-decl "bool" polygon_membership nil)
    (scal_add_left formula-decl nil vectors_2D vectors)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (only_parallel_edges? const-decl "bool" arb_direc_edge_crossing
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty_parallel_intersections_not_on formula-decl nil
     arb_direc_edge_crossing nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (empty_key_arb_only_parallel formula-decl nil
     arb_direc_edge_crossing nil)
    (empty_ray_intersection_sets formula-decl nil
     arb_direc_edge_crossing nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (add_assoc formula-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (serpentine_ray type-eq-decl nil polygon_membership nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (FALSE const-decl "bool" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (only_parallel_ray_point_outside 0
  (only_parallel_ray_point_outside-1 nil 3874129021
   ("" (skeep)
    (("" (use "point_out_not_in")
      (("" (assert)
        (("" (claim "%1" nil (! -1 r))
          (("1" (assert)
            (("1" (use "empty_key_arb_only_parallel")
              (("1" (assert)
                (("1" (inst?)
                  (("1" (expand "only_parallel_edges?")
                    (("1" (expand "point_on_polygon_perimeter?")
                      (("1" (skeep)
                        (("1" (inst?)
                          (("1" (assert)
                            (("1"
                              (use "empty_parallel_intersections_not_on")
                              (("1" (assert) nil)))))))))))))))))))))
           ("2" (assert)
            (("2" (use "point_in_polygon_conds_equiv")
              (("2" (assert)
                (("2" (expand "point_in_polygon_arb?")
                  (("2" (rewrite "empty_key_arb_crossings_emptyset")
                    (("2" (rewrite "card_emptyset")
                      (("2" (expand "odd?")
                        (("2" (propax) nil))))))))))))))))))))))
    nil)
   ((point_out_not_in formula-decl nil polygon_membership nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (* const-decl "Vector" vectors_2D vectors)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (empty_key_arb_only_parallel formula-decl nil
     arb_direc_edge_crossing nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (empty_parallel_intersections_not_on formula-decl nil
     arb_direc_edge_crossing nil)
    (only_parallel_edges? const-decl "bool" arb_direc_edge_crossing
     nil)
    (point_in_polygon_conds_equiv formula-decl nil polygon_membership
     nil)
    (point_in_polygon_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (card_emptyset formula-decl nil finite_sets nil)
    (odd? const-decl "bool" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (empty_key_arb_crossings_emptyset formula-decl nil
     arb_direc_edge_crossing nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors))
   shostak))
 (one_dir_empty_intersections_TCC1 0
  (one_dir_empty_intersections_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (neg_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (norm_neg formula-decl nil vectors_2D vectors))
   shostak
   (one_dir_empty_intersections subtype
    "(vectors_2D.-)(polygon_membership.v)" "Normalized"))
  (one_dir_empty_intersections_TCC1-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (one_dir_empty_intersections subtype
    "(vectors_2D.-)(polygon_membership.v)" "Normalized")))
 (one_dir_empty_intersections 0
  (one_dir_empty_intersections-1 nil 3874129021
   ("" (skeep)
    (("" (auto-rewrite "scal_neg" "crossing_direction_neg")
      (("" (case "empty?(parallel_intersections(p,-v,G))")
        (("1" (use "empty_ray_intersection_sets")
          (("1" (assert)
            (("1" (lemma "free_ray_point_outside")
              (("1" (inst - "p" "-v" "G")
                (("1" (assert)
                  (("1" (inst - "1")
                    (("1" (assert)
                      (("1" (use "point_out_not_in")
                        (("1" (assert)
                          (("1" (lemma "point_in_polygon_conds_equiv")
                            (("1" (inst - "p-v" "v" "G")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "point_in_polygon_arb?")
                                  (("1"
                                    (use "empty_all_not_on_perimeter")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst - "1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "empty_key_arb_no_crossings_neg")
                                            (("1"
                                              (inst - "p" "v" "G" "1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (lemma
                                                     "empty_key_arb_no_crossings_add")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "p"
                                                       "v"
                                                       "G")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "crossing_direction_counted")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "p"
                                                             "p"
                                                             "v"
                                                             "G")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -2)
                                                                (("1"
                                                                  (rewrite
                                                                   "card_add")
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (rewrite
                                                                       "card_emptyset")
                                                                      (("1"
                                                                        (hide-all-but
                                                                         2)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (use "parallel_intersections_pos")
          (("2" (assert)
            (("2" (lemma "only_parallel_ray_point_outside")
              (("2"
                (inst - "p" "-v" "G"
                 "min[real,<=](parallel_intersections(p, -v, G))/2")
                (("2" (assert)
                  (("2"
                    (name-replace "d"
                     "min[real,<=](parallel_intersections(p, -v, G)) / 2")
                    (("2" (use "point_out_not_in")
                      (("2" (assert)
                        (("2" (lemma "point_in_polygon_conds_equiv")
                          (("2" (inst - "p-d*v" "v" "G")
                            (("2" (assert)
                              (("2"
                                (expand "point_in_polygon_arb?")
                                (("2"
                                  (ground)
                                  (("1"
                                    (use
                                     "below_min_all_arb_not_on_neg")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite
                                         "empty_ray_intersection_sets")
                                        (("1"
                                          (expand "d" 1)
                                          (("1"
                                            (expand
                                             "all_arb_intersections")
                                            (("1"
                                              (equate
                                               (! 1 r 1)
                                               (! 1 r 1 2))
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide 2 3)
                                                (("2"
                                                  (rewrite
                                                   "emptyset_is_empty?"
                                                   -5)
                                                  (("2"
                                                    (replace -5)
                                                    (("2"
                                                      (rewrite
                                                       "union_commutative")
                                                      (("2"
                                                        (rewrite
                                                         "union_empty")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "d" 1)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma
                                     "empty_key_arb_no_crossings_neg")
                                    (("2"
                                      (inst - "p" "v" "G" "d")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (lemma
                                             "empty_key_arb_no_crossings_add")
                                            (("1"
                                              (inst - "p" "v" "G")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "crossing_direction_counted")
                                                  (("1"
                                                    (inst
                                                     -
                                                     "p"
                                                     "p"
                                                     "v"
                                                     "G")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -2)
                                                        (("1"
                                                          (rewrite
                                                           "card_add")
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (rewrite
                                                               "card_emptyset")
                                                              (("1"
                                                                (hide-all-but
                                                                 1)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (expand "d" 1)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((parallel_intersections_pos formula-decl nil
     arb_direc_edge_crossing nil)
    (only_parallel_ray_point_outside formula-decl nil
     polygon_membership nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "Vector" vectors_2D vectors)
    (key_arb_intersections const-decl "finite_set[real]"
     arb_direc_edge_crossing nil)
    (union const-decl "set" sets nil)
    (emptyset_is_empty? formula-decl nil sets_lemmas nil)
    (union_commutative formula-decl nil sets_lemmas nil)
    (union_empty formula-decl nil sets_lemmas nil)
    (all_arb_intersections const-decl "finite_set[real]"
     arb_direc_edge_crossing nil)
    (d skolem-const-decl "real" polygon_membership nil)
    (below_min_all_arb_not_on_neg formula-decl nil
     arb_direc_edge_crossing nil)
    (min const-decl
         "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty_ray_intersection_sets formula-decl nil
     arb_direc_edge_crossing nil)
    (free_ray_point_outside formula-decl nil polygon_membership nil)
    (crossing_direction_neg formula-decl nil arb_direc_edge_crossing
     nil)
    (scal_neg formula-decl nil vectors_2D vectors)
    (point_add_neg_scal formula-decl nil vectors_cross_2d nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (point_in_polygon_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (crossing_direction_counted formula-decl nil
     arb_direc_edge_crossing nil)
    (point_on_arb_ray_refl formula-decl nil vectors_cross_2d nil)
    (emptyset const-decl "set" sets nil)
    (card_add formula-decl nil finite_sets nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (card_emptyset formula-decl nil finite_sets nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (empty_key_arb_no_crossings_add formula-decl nil
     arb_direc_edge_crossing nil)
    (empty_key_arb_no_crossings_neg formula-decl nil
     arb_direc_edge_crossing nil)
    (empty_all_not_on_perimeter formula-decl nil
     arb_direc_edge_crossing nil)
    (point_in_polygon_conds_equiv formula-decl nil polygon_membership
     nil)
    (- const-decl "Vector" vectors_2D vectors)
    (point_out_not_in formula-decl nil polygon_membership nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (neg_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (empty? const-decl "bool" sets nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (parallel_intersections const-decl "finite_set[real]"
     arb_direc_edge_crossing nil)
    (- const-decl "Vector" vectors_2D vectors))
   shostak))
 (one_dir_empty_point_outside 0
  (one_dir_empty_point_outside-1 nil 3874129021
   (""
    (auto-rewrite "scal_neg" "crossing_direction_neg"
                  "empty_ray_intersection_sets")
    (("" (skeep)
      (("" (case "empty?(parallel_intersections(p,-v,G))")
        (("1" (lemma "free_ray_point_outside")
          (("1" (inst - "p" "-v" "G")
            (("1" (rewrite "empty_ray_intersection_sets")
              (("1" (assert)
                (("1" (inst - "1")
                  (("1" (assert)
                    (("1" (use "point_out_not_in")
                      (("1" (assert)
                        (("1" (use "point_in_polygon_conds_equiv")
                          (("1" (assert)
                            (("1" (expand "point_in_polygon_arb?")
                              (("1"
                                (ground)
                                (("1"
                                  (lemma "empty_all_not_on_perimeter")
                                  (("1"
                                    (inst - "p" "-v" "G")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst - "1")
                                        (("1" (assert) nil)))))))))
                                 ("2"
                                  (lemma
                                   "empty_key_arb_no_crossings_neg")
                                  (("2"
                                    (inst - "p" "v" "G" "1")
                                    (("2"
                                      (assert)
                                      nil)))))))))))))))))))))))))))))
         ("2" (use "parallel_intersections_pos")
          (("2" (assert)
            (("2" (invoke (name-replace "M" "%1") (! -1 l))
              (("2" (lemma "only_parallel_ray_point_outside")
                (("2" (inst - "p" "-v" "G" "M/2")
                  (("1" (assert)
                    (("1" (ground)
                      (("1" (use "point_out_not_in")
                        (("1" (assert)
                          (("1" (use "point_in_polygon_conds_equiv")
                            (("1" (assert)
                              (("1"
                                (expand "point_in_polygon_arb?")
                                (("1"
                                  (ground)
                                  (("1"
                                    (lemma
                                     "below_min_all_arb_not_on_neg")
                                    (("1"
                                      (inst - "p" "v" "G" "M / 2")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "M")
                                          (("1"
                                            (expand
                                             "all_arb_intersections")
                                            (("1"
                                              (lemma
                                               "emptyset_is_empty?[real]")
                                              (("1"
                                                (inst? -1 :where -6)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (rewrite
                                                       "union_commutative")
                                                      (("1"
                                                        (rewrite
                                                         "union_empty")
                                                        (("1"
                                                          (assert)
                                                          nil)))))))))))))))))))))))
                                   ("2"
                                    (use
                                     "empty_key_arb_no_crossings_neg")
                                    (("2" (assert) nil)))))))))))))))
                       ("2" (expand "M") (("2" (assert) nil)))))))
                   ("2" (expand "M")
                    (("2" (propax) nil))))))))))))))))))
    nil)
   ((parallel_intersections_pos formula-decl nil
     arb_direc_edge_crossing nil)
    (min const-decl
         "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (p skolem-const-decl "point_2d" polygon_membership nil)
    (v skolem-const-decl "Normalized" polygon_membership nil)
    (G skolem-const-decl "simple_polygon_2d" polygon_membership nil)
    (M skolem-const-decl "{a: real |
   parallel_intersections(p, -v, G)(a) AND
    FORALL (x: real): parallel_intersections(p, -v, G)(x) IMPLIES a <= x}"
     polygon_membership nil)
    (emptyset_is_empty? formula-decl nil sets_lemmas nil)
    (emptyset const-decl "set" sets nil)
    (union_commutative formula-decl nil sets_lemmas nil)
    (union_empty formula-decl nil sets_lemmas nil)
    (key_arb_intersections const-decl "finite_set[real]"
     arb_direc_edge_crossing nil)
    (all_arb_intersections const-decl "finite_set[real]"
     arb_direc_edge_crossing nil)
    (below_min_all_arb_not_on_neg formula-decl nil
     arb_direc_edge_crossing nil)
    (* const-decl "Vector" vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (only_parallel_ray_point_outside formula-decl nil
     polygon_membership nil)
    (free_ray_point_outside formula-decl nil polygon_membership nil)
    (empty_ray_intersection_sets formula-decl nil
     arb_direc_edge_crossing nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (point_out_not_in formula-decl nil polygon_membership nil)
    (- const-decl "Vector" vectors_2D vectors)
    (point_in_polygon_conds_equiv formula-decl nil polygon_membership
     nil)
    (point_in_polygon_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (empty_key_arb_no_crossings_neg formula-decl nil
     arb_direc_edge_crossing nil)
    (empty_all_not_on_perimeter formula-decl nil
     arb_direc_edge_crossing nil)
    (scal_1 formula-decl nil vectors_2D vectors)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (point_add_neg_scal formula-decl nil vectors_cross_2d nil)
    (scal_neg formula-decl nil vectors_2D vectors)
    (crossing_direction_neg formula-decl nil arb_direc_edge_crossing
     nil)
    (neg_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (empty? const-decl "bool" sets nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (parallel_intersections const-decl "finite_set[real]"
     arb_direc_edge_crossing nil)
    (- const-decl "Vector" vectors_2D vectors))
   shostak))
 (one_dir_out_other_in_polygon 0
  (one_dir_out_other_in_polygon-1 nil 3874129021
   ("" (skeep)
    (("" (auto-rewrite "scal_neg" "crossing_direction_neg")
      (("" (use "later_point_ray_crossing_set")
        (("" (assert)
          (("" (replace -1 :hide? t)
            (("" (expand "point_in_polygon_arb?")
              (("" (split 3)
                (("1" (use "below_min_all_arb_not_on")
                  (("1" (assert)
                    (("1" (rewrite "empty_ray_intersection_sets")
                      (("1" (expand "all_arb_intersections")
                        (("1" (claim "%1" nil (! -4 1))
                          (("1" (use "emptyset_is_empty?[real]")
                            (("1" (assert)
                              (("1"
                                (replace -1)
                                (("1" (rewrite "union_empty") nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "min_union[real,<=]")
                            (("2"
                              (invoke
                               (inst
                                -
                                "%1"
                                "%2"
                                "min[real,<=](%1)"
                                "min[real,<=](%2)")
                               (! 2 r 1 *))
                              (("2"
                                (expand "fsmin")
                                (("2"
                                  (lift-if)
                                  (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "card_add")
                  (("2" (lift-if)
                    (("2" (split 2)
                      (("1" (flatten)
                        (("1" (expand "arb_crossing_set")
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (flatten)
                        (("2" (use "even_iff_odd_succ")
                          (("2" (rewrite "even_or_odd")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (point_in_polygon_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (card_add formula-decl nil finite_sets nil)
    (arb_crossing_set const-decl "finite_set[point_2d]"
     arb_direc_edge_crossing nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (point_not_on_arb_ray_add formula-decl nil vectors_cross_2d nil)
    (even_iff_odd_succ formula-decl nil naturalnumbers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_or_odd formula-decl nil naturalnumbers nil)
    (below_min_all_arb_not_on formula-decl nil arb_direc_edge_crossing
     nil)
    (empty_ray_intersection_sets formula-decl nil
     arb_direc_edge_crossing nil)
    (parallel_intersections const-decl "finite_set[real]"
     arb_direc_edge_crossing nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (empty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (key_arb_intersections const-decl "finite_set[real]"
     arb_direc_edge_crossing nil)
    (union_empty formula-decl nil sets_lemmas nil)
    (emptyset_is_empty? formula-decl nil sets_lemmas nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (min const-decl
         "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (G skolem-const-decl "simple_polygon_2d" polygon_membership nil)
    (v skolem-const-decl "Normalized" polygon_membership nil)
    (p skolem-const-decl "point_2d" polygon_membership nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (fsmin const-decl "T" finite_sets_minmax finite_sets)
    (<= const-decl "bool" reals nil)
    (min_union formula-decl nil finite_sets_minmax finite_sets)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (all_arb_intersections const-decl "finite_set[real]"
     arb_direc_edge_crossing nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (later_point_ray_crossing_set formula-decl nil
     arb_direc_edge_crossing nil))
   shostak))
 (opposite_sides_of_crossing_arb 0
  (opposite_sides_of_crossing_arb-1 nil 3874129021
   ("" (skeep*)
    (("" (lemma "below_min_all_arb_not_on_neg")
      (("" (inst-cp -1 "p" "v" "G" "d2")
        (("" (inst -1 "p" "v" "G" "d2!1")
          (("" (assert)
            (("" (lemma "below_min_all_arb_not_on")
              (("" (inst-cp -1 "p" "v" "G" "d1")
                (("" (inst -1 "p" "v" "G" "d1!1")
                  (("" (assert)
                    (("" (lemma "point_in_polygon_conds_equiv")
                      (("" (inst-cp -1 "p+d1*v" "v" "G")
                        (("" (inst -1 "p-d2!1*v" "v" "G")
                          (("" (lemma "point_out_not_in")
                            (("" (inst-cp -1 "p+d1*v" "G")
                              ((""
                                (inst -1 "p-d2!1*v" "G")
                                ((""
                                  (assert)
                                  ((""
                                    (replace -1 :dir rl :hide? t)
                                    ((""
                                      (replace -1 :dir rl :hide? t)
                                      ((""
                                        (replace -1 :hide? t)
                                        ((""
                                          (replace -1 :hide? t)
                                          ((""
                                            (expand
                                             "point_in_polygon_arb?")
                                            ((""
                                              (claim
                                               "%1 = add(p, %2) and %3 = add(p, %4) and %2 = %4"
                                               nil
                                               (! 7 l 1 1)
                                               (! 7 r 1 1 1)
                                               (! 8 l 1 1 1)
                                               (! 8 r 1 1))
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (replace
                                                   -3
                                                   :dir
                                                   rl
                                                   :hide?
                                                   t)
                                                  (("1"
                                                    (replace
                                                     -1
                                                     :hide?
                                                     t)
                                                    (("1"
                                                      (replace
                                                       -1
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (rewrite*
                                                         "card_add")
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (split 7)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "arb_crossing_set"
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  nil)))))
                                                             ("2"
                                                              (split 8)
                                                              (("1"
                                                                (flatten)
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (rewrite
                                                                   "even_iff_odd_succ"
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (rewrite
                                                                     "even_or_odd")
                                                                    (("2"
                                                                      (ground)
                                                                      nil)))))))))))))))))))))))
                                               ("2"
                                                (hide 8 9)
                                                (("2"
                                                  (lemma
                                                   "prev_point_ray_crossing_set")
                                                  (("2"
                                                    (lemma
                                                     "later_point_ray_crossing_set")
                                                    (("2"
                                                      (inst-cp
                                                       -1
                                                       "p"
                                                       "v"
                                                       "G"
                                                       "d1")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "p"
                                                         "v"
                                                         "G"
                                                         "d1!1")
                                                        (("2"
                                                          (inst-cp
                                                           -3
                                                           "p"
                                                           "v"
                                                           "G"
                                                           "d2")
                                                          (("2"
                                                            (inst
                                                             -3
                                                             "p"
                                                             "v"
                                                             "G"
                                                             "d2!1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "nonempty_min_key_arb_intersections")
                                                                (("2"
                                                                  (inst-cp
                                                                   -1
                                                                   "p"
                                                                   "v"
                                                                   "G"
                                                                   "d1!1")
                                                                  (("2"
                                                                    (inst-cp
                                                                     -1
                                                                     "p"
                                                                     "v"
                                                                     "G"
                                                                     "d1")
                                                                    (("2"
                                                                      (inst-cp
                                                                       -1
                                                                       "p"
                                                                       "-v"
                                                                       "G"
                                                                       "d2!1")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "p"
                                                                         "-v"
                                                                         "G"
                                                                         "d2")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lemma
                                                                             "empty_key_arb_crossings_emptyset")
                                                                            (("2"
                                                                              (inst-cp
                                                                               -1
                                                                               "p"
                                                                               "v"
                                                                               "G"
                                                                               "d1")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "p"
                                                                                 "v"
                                                                                 "G"
                                                                                 "d1!1")
                                                                                (("2"
                                                                                  (lemma
                                                                                   "empty_key_arb_no_crossings_neg")
                                                                                  (("2"
                                                                                    (inst-cp
                                                                                     -1
                                                                                     "p"
                                                                                     "v"
                                                                                     "G"
                                                                                     "d2")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "p"
                                                                                       "v"
                                                                                       "G"
                                                                                       "d2!1")
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "empty_key_arb_no_crossings_add")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "p"
                                                                                           "v"
                                                                                           "G")
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "crossing_direction_counted")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "p"
                                                                                               "p"
                                                                                               "v"
                                                                                               "G")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (case
                                                                                                   "empty?(key_arb_intersections(p, v, G))")
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "empty?(key_arb_intersections(p, -v, G))")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      nil)))
                                                                                                   ("2"
                                                                                                    (lemma
                                                                                                     "below_min_key_same_crossing_set")
                                                                                                    (("2"
                                                                                                      (inst-cp
                                                                                                       -1
                                                                                                       "p"
                                                                                                       "v"
                                                                                                       "G"
                                                                                                       "d1")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "p"
                                                                                                         "v"
                                                                                                         "G"
                                                                                                         "d1!1")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (case
                                                                                                             "empty?(key_arb_intersections(p, -v, G))")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   ((below_min_all_arb_not_on_neg formula-decl nil
     arb_direc_edge_crossing nil)
    (below_min_all_arb_not_on formula-decl nil arb_direc_edge_crossing
     nil)
    (point_in_polygon_conds_equiv formula-decl nil polygon_membership
     nil)
    (- const-decl "Vector" vectors_2D vectors)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (arb_crossing_set const-decl "finite_set[point_2d]"
     arb_direc_edge_crossing nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (even_iff_odd_succ formula-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_or_odd formula-decl nil naturalnumbers nil)
    (point_not_on_arb_ray_add formula-decl nil vectors_cross_2d nil)
    (card_add formula-decl nil finite_sets nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (prev_point_ray_crossing_set formula-decl nil
     arb_direc_edge_crossing nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "Vector" vectors_2D vectors)
    (empty_key_arb_no_crossings_neg formula-decl nil
     arb_direc_edge_crossing nil)
    (empty? const-decl "bool" sets nil)
    (key_arb_intersections const-decl "finite_set[real]"
     arb_direc_edge_crossing nil)
    (below_min_key_same_crossing_set formula-decl nil
     arb_direc_edge_crossing nil)
    (point_on_arb_ray_refl formula-decl nil vectors_cross_2d nil)
    (crossing_direction_counted formula-decl nil
     arb_direc_edge_crossing nil)
    (empty_key_arb_no_crossings_add formula-decl nil
     arb_direc_edge_crossing nil)
    (empty_key_arb_crossings_emptyset formula-decl nil
     arb_direc_edge_crossing nil)
    (nonempty_min_key_arb_intersections formula-decl nil
     arb_direc_edge_crossing nil)
    (later_point_ray_crossing_set formula-decl nil
     arb_direc_edge_crossing nil)
    (point_in_polygon_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (point_out_not_in formula-decl nil polygon_membership nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (neg_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (nearby_point_outside_exists_either 0
  (nearby_point_outside_exists_either-1 nil 3874129021
   ("" (skeep)
    ((""
      (auto-rewrite "scal_neg" "crossing_direction_neg"
                    "empty_ray_intersection_sets")
      (("" (use "counted_crossing_direction_exists")
        (("" (assert)
          (("" (skeep)
            (("" (case "empty?[real](all_arb_intersections(p, -v, G))")
              (("1" (assert)
                (("1" (flatten)
                  (("1" (lemma "free_ray_point_outside")
                    (("1" (inst - "p" "-v" "G")
                      (("1" (assert)
                        (("1"
                          (case "empty?[real](all_arb_intersections(p, v, G))")
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (hide 1)
                                (("1"
                                  (lemma "free_ray_point_outside")
                                  (("1"
                                    (inst - "p" "v" "G")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst - "1")
                                        (("1"
                                          (inst - "1")
                                          (("1"
                                            (use
                                             "point_outside_not_in_polygon_arb")
                                            (("1"
                                              (use
                                               "point_outside_not_in_polygon_arb_neg")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   "point_in_polygon_arb?")
                                                  (("1"
                                                    (lemma
                                                     "empty_all_not_on_perimeter")
                                                    (("1"
                                                      (inst-cp
                                                       -
                                                       "p"
                                                       "v"
                                                       "G")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "p"
                                                         "-v"
                                                         "G")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "1")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "empty_key_arb_no_crossings_neg")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "p"
                                                                     "v"
                                                                     "G"
                                                                     "1")
                                                                    (("1"
                                                                      (lemma
                                                                       "empty_key_arb_no_crossings_add")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "p"
                                                                         "v"
                                                                         "G")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (lemma
                                                                             "crossing_direction_counted")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "p"
                                                                               "p"
                                                                               "v"
                                                                               "G")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -2
                                                                                   :hide?
                                                                                   t)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2
                                                                                     :hide?
                                                                                     t)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "card_add")
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         3)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "card_emptyset")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (claim "%1" nil (! 1 1))
                              (("1"
                                (assert)
                                (("1"
                                  (inst
                                   +
                                   "min[real,<=](parallel_intersections(p, v, G))"
                                   "1"
                                   "v")
                                  (("1"
                                    (hide 2)
                                    (("1"
                                      (lemma
                                       "one_dir_empty_point_outside")
                                      (("1"
                                        (inst - "p" "v" "G")
                                        (("1"
                                          (rewrite
                                           "empty_key_arb_no_crossings_add")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (rewrite "card_add")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (rewrite
                                                     "card_emptyset")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma
                                             "crossing_direction_counted")
                                            (("2"
                                              (inst - "p" "p" "v" "G")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (use "parallel_intersections_pos")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (case
                                   "empty?[real](parallel_intersections(p, v, G))")
                                  (("1"
                                    (inst
                                     +
                                     "min[real,<=](key_arb_intersections(p, v, G))"
                                     "1"
                                     "v")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (skeep 3)
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (use
                                                   "point_outside_not_in_polygon_arb_neg")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "point_in_polygon_arb?")
                                                      (("1"
                                                        (lemma
                                                         "empty_all_not_on_perimeter")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "p"
                                                           "-v"
                                                           "G")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (use
                                                                   "below_min_all_arb_not_on")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (use
                                                                       "min_all_intersections_key")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (rewrite
                                                                           "empty_key_arb_no_crossings_neg")
                                                                          (("1"
                                                                            (use
                                                                             "later_point_ray_crossing_set")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (use
                                                                                   "card_add_crossing_set")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (use "key_arb_intersections_pos")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst
                                     +
                                     "min[real,<=](all_arb_intersections(p, v, G))"
                                     "1"
                                     "v")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide 3)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (use
                                                   "nonempty_min_parallel_intersections")
                                                  (("1"
                                                    (use
                                                     "nonempty_min_key_arb_intersections")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "point_in_polygon_arb?")
                                                        (("1"
                                                          (rewrite
                                                           "below_min_all_arb_not_on")
                                                          (("1"
                                                            (use
                                                             "point_outside_not_in_polygon_arb_neg")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "point_in_polygon_arb?")
                                                                (("1"
                                                                  (lemma
                                                                   "empty_all_not_on_perimeter")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "p"
                                                                     "-v"
                                                                     "G")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (use
                                                                             "empty_key_arb_no_crossings_neg")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 :hide?
                                                                                 t)
                                                                                (("1"
                                                                                  (use
                                                                                   "later_point_ray_crossing_set")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       :hide?
                                                                                       t)
                                                                                      (("1"
                                                                                        (use
                                                                                         "card_add_crossing_set")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (use "all_intersections_pos")
                                      (("2" (assert) nil nil))
                                      nil)
                                     ("3" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (case "empty?(all_arb_intersections(p, v, G))")
                (("1" (assert)
                  (("1" (claim "%1" nil (! 1 1))
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (lemma "free_ray_point_outside")
                          (("1" (inst - "p" "v" "G")
                            (("1" (assert)
                              (("1"
                                (inst - "1")
                                (("1"
                                  (inst
                                   +
                                   "1"
                                   "min[real,<=](parallel_intersections(p, -v, G))"
                                   "v")
                                  (("1"
                                    (hide 2)
                                    (("1"
                                      (lemma
                                       "one_dir_empty_point_outside")
                                      (("1"
                                        (inst - "p" "v" "G")
                                        (("1"
                                          (rewrite
                                           "empty_key_arb_no_crossings_add")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (rewrite "card_add")
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (rewrite
                                                     "card_emptyset")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma
                                             "crossing_direction_counted")
                                            (("2"
                                              (inst - "p" "p" "v" "G")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (use "parallel_intersections_pos")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (flatten)
                        (("2"
                          (case "empty?[real](parallel_intersections(p, -v, G))")
                          (("1"
                            (inst + "1"
                             "min[real,<=](key_arb_intersections(p, -v, G))"
                             "v")
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (skeep 2)
                                  (("1"
                                    (hide 3)
                                    (("1"
                                      (lemma "free_ray_point_outside")
                                      (("1"
                                        (inst - "p" "v" "G")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (use
                                                 "point_outside_not_in_polygon_arb")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "point_in_polygon_arb?")
                                                    (("1"
                                                      (lemma
                                                       "empty_all_not_on_perimeter")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "p"
                                                         "v"
                                                         "G")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "below_min_all_arb_not_on")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "p"
                                                                   "-v"
                                                                   "G"
                                                                   "d")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (use
                                                                       "min_all_intersections_key")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (rewrite
                                                                           "empty_key_arb_no_crossings_neg")
                                                                          (("1"
                                                                            (lemma
                                                                             "empty_key_arb_no_crossings_add")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "p"
                                                                               "v"
                                                                               "G")
                                                                              (("1"
                                                                                (lemma
                                                                                 "crossing_direction_counted")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "p"
                                                                                   "p"
                                                                                   "v"
                                                                                   "G")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -2)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "card_add")
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           5)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "card_emptyset")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (use
                                                                             "prev_point_ray_crossing_set")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (replace
                                                                                 -1
                                                                                 :hide?
                                                                                 t)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "empty_key_arb_no_crossings_add")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "p"
                                                                                     "v"
                                                                                     "G")
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "crossing_direction_counted")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -
                                                                                         "p"
                                                                                         "p"
                                                                                         "v"
                                                                                         "G")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -2
                                                                                             :hide?
                                                                                             t)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "card_add")
                                                                                              (("2"
                                                                                                (hide-all-but
                                                                                                 6)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "card_emptyset")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (use "key_arb_intersections_pos")
                              (("2" (assert) nil nil)) nil))
                            nil)
                           ("2"
                            (inst + "1"
                             "min[real,<=](all_arb_intersections(p, -v, G))"
                             "v")
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (hide 4)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (lemma "free_ray_point_outside")
                                      (("1"
                                        (inst - "p" "v" "G")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (use
                                                 "nonempty_min_parallel_intersections")
                                                (("1"
                                                  (use
                                                   "nonempty_min_key_arb_intersections")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "point_in_polygon_arb?")
                                                      (("1"
                                                        (rewrite
                                                         "below_min_all_arb_not_on_neg")
                                                        (("1"
                                                          (use
                                                           "point_outside_not_in_polygon_arb")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "point_in_polygon_arb?")
                                                              (("1"
                                                                (lemma
                                                                 "empty_all_not_on_perimeter")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "p"
                                                                   "v"
                                                                   "G")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (use
                                                                           "prev_point_ray_crossing_set")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               :hide?
                                                                               t)
                                                                              (("1"
                                                                                (lemma
                                                                                 "empty_key_arb_no_crossings_add")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "p"
                                                                                   "v"
                                                                                   "G")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "crossing_direction_counted")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "p"
                                                                                         "p"
                                                                                         "v"
                                                                                         "G")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -2)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "card_add")
                                                                                              (("1"
                                                                                                (hide-all-but
                                                                                                 5)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "card_emptyset")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (use "all_intersections_pos")
                              (("2" (assert) nil nil)) nil)
                             ("3" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (inst +
                   "min[real,<=](all_arb_intersections(p, v, G))"
                   "min[real,<=](all_arb_intersections(p, -v, G))" "v")
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (use "opposite_sides_of_crossing_arb")
                        (("1" (split -1)
                          (("1" (skeep 3)
                            (("1" (inst - "c" "d")
                              (("1" (ground) nil nil)) nil))
                            nil)
                           ("2" (skeep 4)
                            (("2" (inst - "c" "d")
                              (("2" (ground) nil nil)) nil))
                            nil)
                           ("3" (propax) nil nil)
                           ("4" (assert) nil nil)
                           ("5" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (use "all_intersections_pos")
                    (("2" (ground) nil nil)) nil)
                   ("3" (assert) nil nil)
                   ("4" (use "all_intersections_pos")
                    (("4" (ground) nil nil)) nil)
                   ("5" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "Vector" vectors_2D vectors)
    (all_arb_intersections const-decl "finite_set[real]"
     arb_direc_edge_crossing nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (empty? const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (neg_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (point_outside_not_in_polygon_arb_neg formula-decl nil
     polygon_membership nil)
    (point_in_polygon_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (empty_key_arb_no_crossings_neg formula-decl nil
     arb_direc_edge_crossing nil)
    (empty_key_arb_no_crossings_add formula-decl nil
     arb_direc_edge_crossing nil)
    (emptyset const-decl "set" sets nil)
    (card_add formula-decl nil finite_sets nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (odd? const-decl "bool" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (card_emptyset formula-decl nil finite_sets nil)
    (point_on_arb_ray_refl formula-decl nil vectors_cross_2d nil)
    (crossing_direction_counted formula-decl nil
     arb_direc_edge_crossing nil)
    (empty_all_not_on_perimeter formula-decl nil
     arb_direc_edge_crossing nil)
    (scal_1 formula-decl nil vectors_2D vectors)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (point_outside_not_in_polygon_arb formula-decl nil
     polygon_membership nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (key_arb_intersections const-decl "finite_set[real]"
     arb_direc_edge_crossing nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (min const-decl
         "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (parallel_intersections const-decl "finite_set[real]"
     arb_direc_edge_crossing nil)
    (p skolem-const-decl "point_2d" polygon_membership nil)
    (v skolem-const-decl "Normalized" polygon_membership nil)
    (G skolem-const-decl "simple_polygon_2d" polygon_membership nil)
    (one_dir_empty_point_outside formula-decl nil polygon_membership
     nil)
    (parallel_intersections_pos formula-decl nil
     arb_direc_edge_crossing nil)
    (key_arb_intersections_pos formula-decl nil arb_direc_edge_crossing
     nil)
    (below_min_all_arb_not_on formula-decl nil arb_direc_edge_crossing
     nil)
    (min_all_intersections_key formula-decl nil arb_direc_edge_crossing
     nil)
    (card_add_crossing_set formula-decl nil arb_direc_edge_crossing
     nil)
    (later_point_ray_crossing_set formula-decl nil
     arb_direc_edge_crossing nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (all_intersections_pos formula-decl nil arb_direc_edge_crossing
     nil)
    (nonempty_min_parallel_intersections formula-decl nil
     arb_direc_edge_crossing nil)
    (nonempty_min_key_arb_intersections formula-decl nil
     arb_direc_edge_crossing nil)
    (point_add_neg_scal formula-decl nil vectors_cross_2d nil)
    (scal_neg formula-decl nil vectors_2D vectors)
    (crossing_direction_neg formula-decl nil arb_direc_edge_crossing
     nil)
    (free_ray_point_outside formula-decl nil polygon_membership nil)
    (empty_ray_intersection_sets formula-decl nil
     arb_direc_edge_crossing nil)
    (opposite_sides_of_crossing_arb formula-decl nil polygon_membership
     nil)
    (prev_point_ray_crossing_set formula-decl nil
     arb_direc_edge_crossing nil)
    (below_min_all_arb_not_on_neg formula-decl nil
     arb_direc_edge_crossing nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (counted_crossing_direction_exists formula-decl nil
     polygon_membership nil))
   shostak))
 (nearby_point_outside_exists 0
  (nearby_point_outside_exists-1 nil 3874129021
   ("" (skeep)
    (("" (auto-rewrite "scal_neg")
      (("" (use "nearby_point_outside_exists_either")
        (("" (assert)
          (("" (skeep)
            (("" (ground)
              (("1" (inst-cp + "a" "b" "v") (("1" (assert) nil)))
               ("2" (inst + "b" "a" "-v")
                (("2" (rewrite "crossing_direction_neg")
                  (("2" (skeep)
                    (("2" (inst - "d" "c")
                      (("2" (assert)
                        (("2"
                          (rewrite* "point_in_polygon_conds_equiv" :dir
                           rl)
                          (("2" (ground) nil))))))))))))))))))))))))
    nil)
   ((Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (crossing_direction_neg formula-decl nil arb_direc_edge_crossing
     nil)
    (point_in_polygon_conds_equiv formula-decl nil polygon_membership
     nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (TRUE const-decl "bool" booleans nil)
    (point_sub_neg_scal formula-decl nil vectors_cross_2d nil)
    (point_add_neg_scal formula-decl nil vectors_cross_2d nil)
    (scal_neg formula-decl nil vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (- const-decl "Vector" vectors_2D vectors)
    (norm_neg formula-decl nil vectors_2D vectors)
    (neg_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (nearby_point_outside_exists_either formula-decl nil
     polygon_membership nil))
   shostak))
 (nearby_point_in_polygon_TCC1 0
  (nearby_point_in_polygon_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (use "key_intersections_empty_arb_crossings")
      (("" (assert)
        (("" (expand "arb_crossing_set")
          (("" (expand "key_arb_intersections")
            (("" (expand "empty?")
              (("" (assert)
                (("" (expand "counted_crossing_arb?")
                  (("" (ground)
                    (("1" (expand "point_in_polygon?")
                      (("1" (use "vertex_on_perimeter")
                        (("1" (ground) nil nil)) nil))
                      nil)
                     ("2" (skeep -)
                      (("2" (expand "point_in_polygon?")
                        (("2" (flatten)
                          (("2" (expand "point_on_polygon_perimeter?")
                            (("2" (inst + "s") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((key_intersections_empty_arb_crossings formula-decl nil
     arb_direc_edge_crossing nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (arb_crossing_set const-decl "finite_set[point_2d]"
     arb_direc_edge_crossing nil)
    (empty? const-decl "bool" sets nil)
    (counted_crossing_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (point_in_polygon? const-decl "bool" horiz_edge_crossing nil)
    (vertex_on_perimeter formula-decl nil horiz_edge_crossing nil)
    (point_on_arb_ray_refl formula-decl nil vectors_cross_2d nil)
    (key_arb_intersections const-decl "finite_set[real]"
     arb_direc_edge_crossing nil)
    (member const-decl "bool" sets nil))
   shostak
   (nearby_point_in_polygon subtype
    "arb_direc_edge_crossing.key_arb_intersections(polygon_membership.p, polygon_membership.v, polygon_membership.G)"
    "non_empty_finite_set[real]"))
  (nearby_point_in_polygon_TCC1-1 nil 3874128956
   ("" (subtype-tcc) nil nil) nil nil
   (nearby_point_in_polygon subtype
    "arb_direc_edge_crossing.key_arb_intersections(polygon_membership.p, polygon_membership.v, polygon_membership.G)"
    "non_empty_finite_set[real]")))
 (nearby_point_in_polygon 0
  (nearby_point_in_polygon-1 nil 3874129021
   ("" (skeep)
    (("" (lemma "point_in_polygon_conds_equiv")
      (("" (inst-cp - "p" "v" "G")
        (("" (inst - "p+d*v" "v" "G")
          (("" (assert)
            (("" (expand "point_in_polygon_arb?")
              (("" (flatten)
                (("" (use "below_min_key_arb_crossing")
                  (("" (assert)
                    (("" (ground)
                      (("1"
                        (use "key_intersections_empty_arb_crossings")
                        (("1" (assert)
                          (("1" (expand "member")
                            (("1" (expand "arb_crossing_set")
                              (("1"
                                (expand "counted_crossing_arb?" -1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (ground)
                                    (("1"
                                      (rewrite "vertex_on_perimeter")
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (expand
                                         "point_on_polygon_perimeter?")
                                        (("2"
                                          (inst?)
                                          nil)))))))))))))))))))
                       ("2" (equate "d" "0" t)
                        (("2" (assert) nil))))))))))))))))))))))
    nil)
   ((point_in_polygon_conds_equiv formula-decl nil polygon_membership
     nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (point_in_polygon_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (below_min_key_arb_crossing formula-decl nil
     arb_direc_edge_crossing nil)
    (member const-decl "bool" sets nil)
    (counted_crossing_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (point_on_arb_ray_refl formula-decl nil vectors_cross_2d nil)
    (vertex_on_perimeter formula-decl nil horiz_edge_crossing nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (arb_crossing_set const-decl "finite_set[point_2d]"
     arb_direc_edge_crossing nil)
    (key_intersections_empty_arb_crossings formula-decl nil
     arb_direc_edge_crossing nil)
    (scal_0 formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil))
   shostak))
 (A_perim_outside_imp_B_perim_inside 0
  (A_perim_outside_imp_B_perim_inside-1 nil 3874129021
   ("" (skeep*)
    (("" (lemma "point_out_not_in")
      (("" (inst - "q" "A")
        (("" (assert)
          (("" (split -1)
            (("1" (inst?)
              (("1" (assert)
                (("1" (lemma "perimeter_not_outside")
                  (("1" (inst - "q" "B") (("1" (ground) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "point_out_not_in")
              (("2" (inst - "u" "A")
                (("2" (assert)
                  (("2" (ground)
                    (("1" (use "point_in_has_inside_segments")
                      (("1" (assert)
                        (("1" (inst - "q")
                          (("1" (skeep)
                            (("1"
                              (expand "point_outside_polygon?" (-5 2))
                              (("1"
                                (skeep)
                                (("1"
                                  (inst
                                   +
                                   "append_path_to_s_ray(S, S!1)")
                                  (("1"
                                    (ground)
                                    (("1"
                                      (rewrite
                                       "append_outside_seq_to_s_ray")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst - "p")
                                          (("1"
                                            (ground)
                                            (("1"
                                              (inst - "p")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (use
                                                   "point_out_not_in")
                                                  (("1"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst - "p")
                                              (("2"
                                                (lemma
                                                 "perimeter_not_outside")
                                                (("2"
                                                  (inst - "p" "B")
                                                  (("2"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite
                                       "initial_point_append_path_to_s_ray")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "point_outside_polygon?" (-2 2))
                      (("2" (skeep)
                        (("2"
                          (inst +
                           "append_path_to_s_ray(perimeter_segment_path(B, u, q), S)")
                          (("1" (ground)
                            (("1" (use "append_outside_seq_to_s_ray")
                              (("1"
                                (assert)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (use "perim_segment_path_on_perim")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst - "p")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (use
                                             "perimeter_not_outside")
                                            (("1" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (rewrite
                               "initial_point_append_path_to_s_ray")
                              (("2"
                                (rewrite
                                 "initial_point_perimeter_segment_path")
                                nil
                                nil))
                              nil))
                            nil)
                           ("2"
                            (use "final_point_perimeter_segment_path")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((point_out_not_in formula-decl nil polygon_membership nil)
    (S skolem-const-decl "serpentine_ray" polygon_membership nil)
    (q skolem-const-decl "point_2d" polygon_membership nil)
    (u skolem-const-decl "point_2d" polygon_membership nil)
    (B skolem-const-decl "simple_polygon_2d" polygon_membership nil)
    (perimeter_segment_path const-decl "segment_endpoint_seq"
     polygon_membership nil)
    (initial_point_perimeter_segment_path formula-decl nil
     polygon_membership nil)
    (perim_segment_path_on_perim formula-decl nil polygon_membership
     nil)
    (final_point_perimeter_segment_path formula-decl nil
     polygon_membership nil)
    (point_in_has_inside_segments formula-decl nil polygon_membership
     nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (point_outside_polygon? const-decl "bool" polygon_membership nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (S!1 skolem-const-decl "serpentine_ray" polygon_membership nil)
    (serpentine_ray type-eq-decl nil polygon_membership nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (S skolem-const-decl "segment_endpoint_seq" polygon_membership nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (append_path_to_s_ray const-decl "serpentine_ray"
     polygon_membership nil)
    (initial_point_append_path_to_s_ray formula-decl nil
     polygon_membership nil)
    (append_outside_seq_to_s_ray formula-decl nil polygon_membership
     nil)
    (perimeter_not_outside formula-decl nil polygon_membership nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (overlap_imp_inside_pt_on_perim 0
  (overlap_imp_inside_pt_on_perim-1 nil 3874129021
   ("" (skeep)
    ((""
      (case "exists (e: (edge_of_polygon?(A))):
            EXISTS (pt: point_2d):
             point_on_segment?(pt, e) AND point_in_polygon?(pt, B)")
      (("1" (skeep)
        (("1" (skeep)
          (("1" (inst?)
            (("1" (expand "point_on_polygon_perimeter?")
              (("1" (inst?) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (expand "polygon_contained?")
        (("2" (skeep)
          (("2" (lemma "point_out_not_in")
            (("2" (inst - "p!1" "A")
              (("2" (assert)
                (("2" (lemma "point_in_has_inside_segments")
                  (("2" (inst - "p" "B")
                    (("2" (assert)
                      (("2" (inst - "p!1")
                        (("2" (skeep)
                          (("2" (expand "point_outside_polygon?")
                            (("2" (skeep)
                              (("2"
                                (lemma "append_outside_seq_to_s_ray")
                                (("2"
                                  (inst - "A" "S" "S!1")
                                  (("1"
                                    (ground)
                                    (("1"
                                      (use
                                       "initial_point_append_path_to_s_ray")
                                      (("1"
                                        (lemma "point_out_not_in")
                                        (("1"
                                          (inst - "p" "A")
                                          (("1"
                                            (ground)
                                            (("1"
                                              (expand
                                               "point_outside_polygon?")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (inst - "p!2")
                                        (("2"
                                          (ground)
                                          (("2"
                                            (inst 4 "p!2")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((point_in_polygon? const-decl "bool" horiz_edge_crossing nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (pt skolem-const-decl "point_2d" polygon_membership nil)
    (A skolem-const-decl "simple_polygon_2d" polygon_membership nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (point_in_has_inside_segments formula-decl nil polygon_membership
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (S!1 skolem-const-decl "serpentine_ray" polygon_membership nil)
    (serpentine_ray type-eq-decl nil polygon_membership nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (S skolem-const-decl "segment_endpoint_seq" polygon_membership nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (initial_point_append_path_to_s_ray formula-decl nil
     polygon_membership nil)
    (append_path_to_s_ray const-decl "serpentine_ray"
     polygon_membership nil)
    (append_outside_seq_to_s_ray formula-decl nil polygon_membership
     nil)
    (point_outside_polygon? const-decl "bool" polygon_membership nil)
    (point_out_not_in formula-decl nil polygon_membership nil)
    (polygon_contained? const-decl "bool" horiz_edge_crossing nil))
   shostak))
 (outside_C_inside_A 0
  (outside_C_inside_A-1 nil 3874129021
   ("" (skeep)
    (("" (use "nearby_point_outside_exists")
      (("" (assert)
        (("" (skeep)
          (("" (use "point_in_polygon_conds_equiv")
            (("" (replace -1 :hide? t)
              (("" (expand "point_in_polygon_arb?")
                (("" (flatten)
                  ((""
                    (case "empty?[real](all_arb_intersections(p, v, A))")
                    (("1" (rewrite "empty_ray_intersection_sets")
                      (("1" (flatten)
                        (("1" (inst - "a/2" "b/2")
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (inst + "p+a/2*v")
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma
                                     "point_in_polygon_conds_equiv")
                                    (("1"
                                      (inst? - :where 3)
                                      (("1"
                                        (inst - "v")
                                        (("1"
                                          (replace -1 :hide? t)
                                          (("1"
                                            (expand
                                             "point_in_polygon_arb?")
                                            (("1"
                                              (rewrite
                                               "empty_key_arb_no_crossings")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "empty_all_not_on_perimeter")
                                                  (("1"
                                                    (inst
                                                     -
                                                     "p"
                                                     "v"
                                                     "A")
                                                    (("1"
                                                      (rewrite
                                                       "empty_ray_intersection_sets")
                                                      (("1"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (case "min(a / 2, min[real,<=](all_arb_intersections(p, v, A)) / 2) > 0 and min(a / 2, min[real,<=](all_arb_intersections(p, v, A)) / 2) < a")
                      (("1" (flatten)
                        (("1"
                          (inst -
                           "min(a/2, min[real,<=](all_arb_intersections(p, v, A))/2)"
                           "b/2")
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (inst? + :where -3)
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide -3)
                                    (("1"
                                      (lemma
                                       "point_in_polygon_conds_equiv")
                                      (("1"
                                        (inst? - :where +)
                                        (("1"
                                          (inst - "v")
                                          (("1"
                                            (replace -1 :hide? t)
                                            (("1"
                                              (rewrite
                                               "empty_ray_intersection_sets")
                                              (("1"
                                                (name-replace
                                                 "M"
                                                 "min(a / 2, min[real,<=](all_arb_intersections(p, v, A)) /2)")
                                                (("1"
                                                  (expand
                                                   "point_in_polygon_arb?")
                                                  (("1"
                                                    (claim
                                                     "%1"
                                                     nil
                                                     (! 1 1))
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (rewrite
                                                         "empty_key_arb_no_crossings")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (use
                                                             "min_all_intersections_parallel")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (use
                                                                 "empty_key_arb_only_parallel")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "point_on_polygon_perimeter?"
                                                                     -10)
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (expand
                                                                           "only_parallel_edges?")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (use
                                                                                 "no_parallel_intersections_not_on_segment")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "point_on_polygon_perimeter?"
                                                                                     3)
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (rewrite
                                                         "below_min_key_arb_crossing")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (use
                                                             "below_min_key_arb_not_on")
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (expand
                                                                 "only_parallel_edges?")
                                                                (("1"
                                                                  (expand
                                                                   "point_on_polygon_perimeter?"
                                                                   -8)
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (use
                                                                           "no_parallel_intersections_not_on_segment")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (ground)
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-2
                                                                                  -3
                                                                                  1
                                                                                  2
                                                                                  3))
                                                                                (("1"
                                                                                  (use
                                                                                   "nonempty_min_parallel_intersections")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "point_on_polygon_perimeter?")
                                                                                (("2"
                                                                                  (inst?
                                                                                   3)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (-1
                                                                  -2
                                                                  1
                                                                  2))
                                                                (("2"
                                                                  (use
                                                                   "nonempty_min_key_arb_intersections")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (1 2))
                                                          (("2"
                                                            (use
                                                             "nonempty_min_key_arb_intersections")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (hide - 4)
                        (("2" (expand "min")
                          (("2" (ground)
                            (("1" (lift-if)
                              (("1"
                                (ground)
                                (("1"
                                  (use "all_intersections_pos")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lift-if) (("2" (ground) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (flatten) nil nil) ("4" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nearby_point_outside_exists formula-decl nil polygon_membership
     nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (min const-decl
         "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (a skolem-const-decl "posreal" polygon_membership nil)
    (p skolem-const-decl "point_2d" polygon_membership nil)
    (v skolem-const-decl "Normalized" polygon_membership nil)
    (A skolem-const-decl "simple_polygon_2d" polygon_membership nil)
    (nonempty_min_parallel_intersections formula-decl nil
     arb_direc_edge_crossing nil)
    (nonempty_min_key_arb_intersections formula-decl nil
     arb_direc_edge_crossing nil)
    (below_min_key_arb_not_on formula-decl nil arb_direc_edge_crossing
     nil)
    (below_min_key_arb_crossing formula-decl nil
     arb_direc_edge_crossing nil)
    (only_parallel_edges? const-decl "bool" arb_direc_edge_crossing
     nil)
    (no_parallel_intersections_not_on_segment formula-decl nil
     arb_direc_edge_crossing nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (empty_key_arb_only_parallel formula-decl nil
     arb_direc_edge_crossing nil)
    (min_all_intersections_parallel formula-decl nil
     arb_direc_edge_crossing nil)
    (key_arb_intersections const-decl "finite_set[real]"
     arb_direc_edge_crossing nil)
    (all_intersections_pos formula-decl nil arb_direc_edge_crossing
     nil)
    (empty_ray_intersection_sets formula-decl nil
     arb_direc_edge_crossing nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (empty_key_arb_no_crossings formula-decl nil
     arb_direc_edge_crossing nil)
    (empty_all_not_on_perimeter formula-decl nil
     arb_direc_edge_crossing nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (set type-eq-decl nil sets nil) (empty? const-decl "bool" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (all_arb_intersections const-decl "finite_set[real]"
     arb_direc_edge_crossing nil)
    (point_in_polygon_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (point_in_polygon_conds_equiv formula-decl nil polygon_membership
     nil))
   shostak))
 (container_edges_not_inside 0
  (container_edges_not_inside-1 nil 3874129021
   ("" (skeep*)
    (("" (lemma "outside_C_inside_A")
      (("" (inst - "p" "A" "C")
        (("" (ground)
          (("1" (skeep)
            (("1" (rewrite "point_out_not_in")
              (("1" (expand "point_outside_polygon?")
                (("1" (skeep)
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (lemma "downstream_point_outside")
                        (("1" (inst - "C" "S")
                          (("1" (assert)
                            (("1" (expand "serp_ray_outside?")
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "polygon_contained?")
                                  (("1"
                                    (ground)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst? -4)
                                        (("1"
                                          (ground)
                                          (("1"
                                            (inst? -6)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (inst? -4)
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (rewrite
                                                     "point_out_not_in")
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "point_on_serp_ray?")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst? +)
                                                        nil)))))))))))))))))))
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (inst? -4)
                                        (("2"
                                          (inst? -5)
                                          (("2"
                                            (ground)
                                            (("2"
                                              (invoke
                                               (inst -3 "%1")
                                               (! -1 1))
                                              (("2"
                                                (ground)
                                                (("1"
                                                  (rewrite
                                                   "point_out_not_in")
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "point_on_serp_ray?")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "point_on_arb_ray?")
                                                      (("2"
                                                        (inst? 2)
                                                        nil)))))))))))))))))))))))))))))))))))))))))))))
           ("2" (hide -1 -3) (("2" (grind) nil))))))))))
    nil)
   ((outside_C_inside_A formula-decl nil polygon_membership nil)
    (point_out_not_in formula-decl nil polygon_membership nil)
    (serp_ray_outside? const-decl "bool" polygon_membership nil)
    (polygon_contained? const-decl "bool" horiz_edge_crossing nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (point_on_arb_ray? const-decl "bool" vectors_cross_2d nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (point_on_serp_ray? const-decl "bool" polygon_membership nil)
    (downstream_point_outside formula-decl nil polygon_membership nil)
    (serpentine_ray type-eq-decl nil polygon_membership nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_outside_polygon? const-decl "bool" polygon_membership nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (contained_not_on_perimeter 0
  (contained_not_on_perimeter-1 nil 3874129021
   ("" (skeep)
    (("" (expand "point_on_polygon_perimeter?")
      (("" (skeep)
        (("" (use "container_edges_not_inside")
          (("" (assert) (("" (inst?) (("" (assert) nil))))))))))))
    nil)
   ((point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (container_edges_not_inside formula-decl nil polygon_membership
     nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil))
   shostak))
 (contained_membership 0
  (contained_membership-1 nil 3874129021
   ("" (skeep)
    (("" (use "point_out_not_in")
      (("" (lemma "point_out_not_in")
        (("" (inst - "p" "C")
          (("" (ground)
            (("1" (use "container_edges_not_inside")
              (("1" (assert)
                (("1" (expand "point_on_polygon_perimeter?")
                  (("1" (skeep)
                    (("1" (inst? -) (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "point_outside_polygon?")
              (("2" (skeep)
                (("2" (inst?)
                  (("2" (assert)
                    (("2" (expand "serp_ray_outside?" +)
                      (("2" (lemma "downstream_point_outside")
                        (("2" (split 2)
                          (("1" (skeep)
                            (("1" (inst - "C" "S")
                              (("1"
                                (assert)
                                (("1"
                                  (inst - "p!1")
                                  (("1"
                                    (ground)
                                    (("1"
                                      (expand "polygon_contained?")
                                      (("1"
                                        (inst - "p!1")
                                        (("1"
                                          (ground)
                                          (("1"
                                            (rewrite
                                             "point_out_not_in")
                                            nil
                                            nil)
                                           ("2"
                                            (use
                                             "perimeter_not_outside")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "point_on_serp_ray?")
                                      (("2"
                                        (flatten)
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (inst - "C" "S")
                              (("2"
                                (assert)
                                (("2"
                                  (invoke (inst - "%1") (! -1 1))
                                  (("2"
                                    (ground)
                                    (("1"
                                      (expand "polygon_contained?")
                                      (("1"
                                        (invoke (inst - "%1") (! -1 1))
                                        (("1"
                                          (ground)
                                          (("1"
                                            (lemma "point_out_not_in")
                                            (("1"
                                              (invoke
                                               (inst - "%1" "C")
                                               (! -2 1))
                                              (("1" (ground) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma
                                             "perimeter_not_outside")
                                            (("2"
                                              (invoke
                                               (inst - "%1" "C")
                                               (! -2 1))
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "point_on_serp_ray?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (expand "point_on_arb_ray?")
                                          (("2" (inst? 2) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((point_out_not_in formula-decl nil polygon_membership nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_outside_polygon? const-decl "bool" polygon_membership nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (serpentine_ray type-eq-decl nil polygon_membership nil)
    (serp_ray_outside? const-decl "bool" polygon_membership nil)
    (point_on_serp_ray? const-decl "bool" polygon_membership nil)
    (polygon_contained? const-decl "bool" horiz_edge_crossing nil)
    (perimeter_not_outside formula-decl nil polygon_membership nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (point_on_arb_ray? const-decl "bool" vectors_cross_2d nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (downstream_point_outside formula-decl nil polygon_membership nil)
    (container_edges_not_inside formula-decl nil polygon_membership
     nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (pred type-eq-decl nil defined_types nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil))
   shostak))
 (contained_membership_cor 0
  (contained_membership_cor-1 nil 3874129021
   ("" (skeep)
    (("" (use "contained_membership")
      (("" (assert)
        (("" (lemma "point_out_not_in")
          (("" (inst-cp - "p" "A")
            (("" (inst - "p" "C")
              (("" (ground)
                (("1" (lemma "perimeter_not_outside")
                  (("1" (inst - "p" "C") (("1" (ground) nil nil)) nil))
                  nil)
                 ("2" (expand "polygon_contained?")
                  (("2" (inst - "p")
                    (("2" (assert)
                      (("2" (lemma "perimeter_not_outside")
                        (("2" (inst - "p" "C") (("2" (ground) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((contained_membership formula-decl nil polygon_membership nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (point_out_not_in formula-decl nil polygon_membership nil)
    (polygon_contained? const-decl "bool" horiz_edge_crossing nil)
    (perimeter_not_outside formula-decl nil polygon_membership nil))
   shostak)))

