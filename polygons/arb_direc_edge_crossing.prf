(arb_direc_edge_crossing
 (points_on_ray_diff_norms 0
  (points_on_ray_diff_norms-1 nil 3874129021
   ("" (skeep)
    (("" (expand "point_on_arb_ray?")
      (("" (skeep*)
        (("" (replace -3)
          (("" (replace -1)
            (("" (assert)
              (("" (expand "abs")
                (("" (case "d * v = d!2 * v + d!1 * v")
                  (("1" (rewrite "scal_add_left" :dir rl)
                    (("1" (use "scal_cancel") (("1" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((point_on_arb_ray? const-decl "bool" vectors_cross_2d
     line_segments)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (norm_scal_norm formula-decl nil vectors_cross_2d line_segments)
    (add_cancel formula-decl nil vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (* const-decl "Vector" vectors_2D vectors)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (scal_cancel formula-decl nil vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (scal_add_left formula-decl nil vectors_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (points_on_ray_norms_on_ray 0
  (points_on_ray_norms_on_ray-1 nil 3874129021
   ("" (skeep)
    (("" (expand "point_on_arb_ray?")
      (("" (skeep*)
        (("" (inst + "d - d!1")
          (("1" (hide -3) (("1" (grind) nil)))
           ("2" (replace -1)
            (("2" (replace -2)
              (("2" (cancel-add! (! -3 * 1))
                (("2" (rewrite* "norm_scal")
                  (("2" (typepred "v")
                    (("2" (replace -1 :hide? t)
                      (("2" (expand "abs")
                        (("2" (assert) nil))))))))))))))))))))))
    nil)
   nil shostak))
 (counted_crossing_on_perimeter 0
  (counted_crossing_on_perimeter-1 nil 3874129021
   ("" (skeep)
    (("" (expand "counted_crossing_arb?")
      (("" (ground)
        (("1" (rewrite "vertex_on_perimeter") nil)
         ("2" (skeep)
          (("2" (expand "point_on_polygon_perimeter?")
            (("2" (inst?) nil))))))))))
    nil)
   nil shostak))
 (arb_crossings_subset 0
  (arb_crossings_subset-1 nil 3874129021
   ("" (skeep)
    (("" (expand "point_on_arb_ray?")
      (("" (expand "subset?")
        (("" (skeep*)
          (("" (expand "member")
            (("" (expand "arb_crossing_set")
              (("" (expand "counted_crossing_arb?")
                (("" (flatten)
                  (("" (split +)
                    (("1" (expand "point_on_arb_ray?")
                      (("1" (skeep)
                        (("1" (inst + "d + d!1")
                          (("1" (grind) nil)))))))
                     ("2" (ground) nil)
                     ("3" (ground) nil))))))))))))))))))
    nil)
   nil shostak))
 (arb_crossings_before_diff 0
  (arb_crossings_before_diff-1 nil 3874129021
   ("" (skeep)
    (("" (ground)
      (("" (apply-extensionality :hide? t)
        (("" (expand "arb_crossing_set")
          (("" (expand "difference")
            (("" (expand "member")
              (("" (iff)
                (("" (ground)
                  (("1" (lemma "point_on_arb_ray_trans")
                    (("1" (inst - "p" "q" "x!1" "v")
                      (("1" (ground) nil)))))
                   ("2" (expand "set_before_p")
                    (("2" (expand "counted_crossing_arb?")
                      (("2" (flatten)
                        (("2" (lemma "points_on_ray_norms_on_ray")
                          (("2" (inst - "p" "x!1" "q" "v")
                            (("2" (assert)
                              (("2"
                                (case-replace "x!1 = q")
                                (("1" (assert) nil)
                                 ("2"
                                  (expand "point_on_arb_ray?")
                                  (("2"
                                    (skeep*)
                                    (("2"
                                      (replace -4)
                                      (("2"
                                        (hide -3 -4 -5)
                                        (("2"
                                          (cancel-add -1)
                                          (("2"
                                            (rewrite
                                             "scal_add_left"
                                             :dir
                                             rl)
                                            (("2"
                                              (lemma "scal_eq_zero")
                                              (("2"
                                                (inst - "d!2 + d" "v")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (typepred "v")
                                                    (("2"
                                                      (ground)
                                                      (("1"
                                                        (case-replace
                                                         "d!2 = 0")
                                                        (("1"
                                                          (assert)
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil)))
                                                       ("2"
                                                        (replace -1)
                                                        (("2"
                                                          (assert)
                                                          nil)))))))))))))))))))))))))))))))))))))))
                   ("3" (expand "set_before_p")
                    (("3" (expand "counted_crossing_arb?")
                      (("3" (lemma "points_on_ray_norms_on_ray")
                        (("3" (inst - "p" "q" "x!1" "v")
                          (("3" (assert) nil))))))))))))))))))))))))
    nil)
   nil shostak))
 (member_arb_crossings_on_perimeter 0
  (member_arb_crossings_on_perimeter-1 nil 3874129021
   ("" (skeep)
    (("" (expand "member")
      (("" (expand "arb_crossing_set")
        (("" (expand "counted_crossing_arb?")
          (("" (flatten)
            (("" (expand "point_on_polygon_perimeter?")
              (("" (ground)
                (("1" (expand "adjacent_edges_counted?")
                  (("1" (expand "vertex?")
                    (("1" (skeep)
                      (("1"
                        (inst +
                         "(# p1 := q, p2 := G`vertices(next_index(G,i)) #)")
                        (("1" (expand "point_on_segment?")
                          (("1" (inst + "0") (("1" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (expand "edge_of_polygon?")
                          (("2" (inst?)
                            (("2" (expand "edges_of_polygon")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("3" (use "vertices_diff_next_nonzero")
                          (("3" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep) (("2" (inst?) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (counted_crossing_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (point_on_polygon_perimeter? const-decl "bool" polygons_2d nil)
    (adjacent_edges_counted? const-decl "bool" arb_direc_edge_crossing
     nil)
    (vertices_diff_next_nonzero formula-decl nil polygons_2d nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (point_on_segment? const-decl "bool" segments_2d line_segments)
    (scal_1 formula-decl nil vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (segment_2d type-eq-decl nil segments_2d line_segments)
    (pred type-eq-decl nil defined_types nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d line_segments)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list
     line_segments)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil) nil
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil) nil
    nil (vertex? const-decl "pred[point_2d]" polygons_2d nil)
    (arb_crossing_set const-decl "finite_set[point_2d]"
     arb_direc_edge_crossing nil))
   shostak))
 (arb_crossings_min 0
  (arb_crossings_min-1 nil 3874129021
   ("" (skeep)
    (("" (ground)
      (("" (flatten)
        (("" (lemma "arb_crossings_subset")
          (("" (inst -1 "p" "q" "v" "G")
            (("" (assert)
              (("" (case "arb_crossing_set(p, v, G) = emptyset")
                (("1" (lemma "emptyset_min[point_2d]")
                  (("1" (inst -1 "arb_crossing_set(q, v, G)")
                    (("1" (assert) nil)))))
                 ("2" (apply-extensionality 2 :hide? t)
                  (("2" (iff)
                    (("2" (ground)
                      (("1" (expand "subset?")
                        (("1" (expand "member")
                          (("1" (inst? -2) (("1" (assert) nil)))))))
                       ("2" (inst - "x!1")
                        (("2" (expand "arb_crossing_set" (-1 1))
                          (("2" (expand "counted_crossing_arb?" (-1 1))
                            (("2" (flatten)
                              (("2"
                                (split 1)
                                (("1"
                                  (hide -2 -3)
                                  (("1"
                                    (lemma
                                     "points_on_ray_norms_on_ray")
                                    (("1"
                                      (inst - "p" "q" "x!1" "v")
                                      (("1" (assert) nil)))))))
                                 ("2" (ground) nil)
                                 ("3"
                                  (ground)
                                  nil))))))))))))))))))))))))))))))
    nil)
   nil shostak))
 (arb_crossings_max 0
  (arb_crossings_max-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin)
      (("" (flatten)
        (("" (apply-extensionality :hide? t)
          (("" (expand "emptyset")
            (("" (lemma "arb_crossings_subset")
              (("" (inst -1 "p" "q" "v" "G")
                (("" (assert)
                  (("" (expand "subset?")
                    (("" (inst -1 "x!1")
                      (("" (expand "member")
                        (("" (inst - "x!1")
                          (("1" (hide -5)
                            (("1" (expand "arb_crossing_set")
                              (("1"
                                (expand "counted_crossing_arb?")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (hide -2 -4)
                                    (("1"
                                      (lemma
                                       "points_on_ray_diff_norms")
                                      (("1"
                                        (inst - "p" "q" "x!1" "v")
                                        (("1"
                                          (assert)
                                          nil)))))))))))))))
                           ("2" (assert) nil))))))))))))))))))))))))
    nil)
   nil shostak))
 (before_arb_crossings_empty 0
  (before_arb_crossings_empty-1 nil 3874129021
   ("" (skeep)
    (("" (lemma "arb_crossings_before_diff")
      (("" (inst - "p" "q" "v" "G")
        (("" (assert)
          (("" (replace -3)
            (("" (rewrite "difference_emptyset1") nil))))))))))
    nil)
   nil shostak))
 (one_adjacent_edge_not_parallel 0
  (one_adjacent_edge_not_parallel-1 nil 3874129021
   ("" (skeep)
    (("" (expand "adjacent_edges_counted?")
      (("" (skeep)
        (("" (inst?)
          (("" (assert)
            (("" (flatten)
              (("" (rewrite* "parallel_equiv_cross_eq_0")
                (("1" (rewrite "cross_antisymmetric" -4)
                  (("1" (rewrite "cross_antisymmetric" -3)
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (replace -1)
                  (("2" (rewrite "cross_antisymmetric" -4)
                    (("2" (assert)
                      (("2" (hide-all-but -3) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (ground)
                  (("1" (replace -3)
                    (("1" (hide-all-but -1) (("1" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (replace -3)
                    (("2" (rewrite "parallel_equiv_cross_eq_0" -6)
                      (("2" (rewrite "cross_antisymmetric" -6)
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((adjacent_edges_counted? const-decl "bool" arb_direc_edge_crossing
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list
     line_segments)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (sub_eq_args formula-decl nil vectors_2D vectors)
    (comp_zero_y formula-decl nil vectors_2D vectors)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (cross const-decl "real" vectors_cross_2d line_segments)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cross_antisymmetric formula-decl nil vectors_cross_2d
     line_segments)
    (vector_2d type-eq-decl nil vectors_cross_2d line_segments)
    (minus_real_is_real application-judgement "real" reals nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (TRUE const-decl "bool" booleans nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (parallel_equiv_cross_eq_0 formula-decl nil vectors_cross_2d
     line_segments)
    (Vector type-eq-decl nil vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors) nil
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (point_2d type-eq-decl nil vectors_cross_2d line_segments)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (key_arb_intersections_nonneg 0
  (key_arb_intersections_nonneg-1 nil 3874129021
   ("" (skeep)
    (("" (expand "key_arb_intersections")
      (("" (skeep) (("" (ground) nil))))))
    nil)
   nil shostak))
 (key_arb_intersections_subset 0
  (key_arb_intersections_subset-1 nil 3874129021
   ("" (skeep)
    (("" (expand "point_on_arb_ray?")
      (("" (skeep)
        (("" (expand "subset?")
          (("" (assert)
            (("" (skeep)
              (("" (expand "key_arb_intersections")
                (("" (expand "with_real_offset")
                  (("" (skeep - t)
                    (("" (skeep)
                      (("" (replace -4 :hide? t)
                        (("" (assert)
                          (("" (expand "abs")
                            (("" (replace -4 :hide? t)
                              ((""
                                (expand "point_on_arb_ray?")
                                ((""
                                  (skeep)
                                  ((""
                                    (inst?)
                                    ((""
                                      (assert)
                                      ((""
                                        (replace -2)
                                        ((""
                                          (ground)
                                          (("1"
                                            (inst + "d+d_1")
                                            (("1"
                                              (hide-all-but 1)
                                              (("1"
                                                (grind-with-ext)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (move-terms -1 r 1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (factor -1 r)
                                                (("2"
                                                  (use "scal_eq_zero")
                                                  (("2"
                                                    (typepred "v")
                                                    (("2"
                                                      (ground)
                                                      (("1"
                                                        (move-terms
                                                         2
                                                         r
                                                         (1 2))
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace -1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (factor! (! 1 r 1) (2 3))
                                            (("3"
                                              (assert)
                                              (("3"
                                                (factor! (! 1 r 1))
                                                (("3"
                                                  (rewrite "norm_scal")
                                                  (("3"
                                                    (expand "abs")
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (on_parallel_not_adj_counted 0
  (on_parallel_not_adj_counted-1 nil 3874129021
   ("" (skeep)
    (("" (expand "only_parallel_edges?")
      (("" (expand "adjacent_edges_counted?")
        (("" (skeep)
          (("" (use "two_adjacent_edges")
            (("" (assert)
              (("" (flatten)
                (("" (inst-cp - "edges_of_polygon(G)(i)")
                  (("" (inst - "edges_of_polygon(G)(prev_index(G,i))")
                    (("" (replace -5)
                      (("" (assert)
                        (("" (rewrite* "parallel_equiv_cross_eq_0")
                          (("" (expand "edges_of_polygon")
                            (("" (assert)
                              ((""
                                (rewrite "cross_antisymmetric" -3)
                                ((""
                                  (rewrite "cross_antisymmetric" -4)
                                  ((""
                                    (assert)
                                    ((""
                                      (hide-all-but (-3 -6))
                                      (("" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((only_parallel_edges? const-decl "bool" arb_direc_edge_crossing
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (edge_is_edge formula-decl nil polygons_2d nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d line_segments)
    (pred type-eq-decl nil defined_types nil)
    (edge_of_polygon? const-decl "pred[segment_2d]" polygons_2d nil)
    (edges_of_polygon const-decl
     "[below(polygon`num_vertices) -> segment_2d]" polygons_2d nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (parallel_equiv_cross_eq_0 formula-decl nil vectors_cross_2d
     line_segments)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (TRUE const-decl "bool" booleans nil)
    (next_prev_is_original formula-decl nil polygons_2d nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cross const-decl "real" vectors_cross_2d line_segments)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cross_antisymmetric formula-decl nil vectors_cross_2d
     line_segments)
    (vector_2d type-eq-decl nil vectors_cross_2d line_segments)
    (vertex_on_prev_edge formula-decl nil polygons_2d nil)
    (vertex_on_edge formula-decl nil polygons_2d nil)
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d line_segments)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list
     line_segments)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (two_adjacent_edges formula-decl nil polygons_2d nil)
    (adjacent_edges_counted? const-decl "bool" arb_direc_edge_crossing
     nil))
   shostak))
 (on_parallel_not_counted_crossing 0
  (on_parallel_not_counted_crossing-1 nil 3874129021
   ("" (skeep)
    (("" (expand "counted_crossing_arb?")
      (("" (ground)
        (("1" (use "on_parallel_not_adj_counted") (("1" (assert) nil)))
         ("2" (skeep)
          (("2" (expand "only_parallel_edges?")
            (("2" (inst?) (("2" (assert) nil))))))))))))
    nil)
   nil shostak))
 (parallel_on_arb_line 0
  (parallel_on_arb_line-1 nil 3874129021
   ("" (skeep)
    (("" (expand "parallel?")
      (("" (expand "point_on_arb_line?")
        (("" (skeep)
          (("" (inst + "nzk")
            (("" (isolate -1 l 1) (("" (grind) nil))))))))))))
    nil)
   nil shostak))
 (parallel_diff_norm 0
  (parallel_diff_norm-1 nil 3874129021
   ("" (skeep)
    (("" (expand "parallel?")
      (("" (skeep)
        (("" (replace -1)
          (("" (typepred "v")
            (("" (rewrite "norm_scal")
              (("" (expand "abs")
                (("" (lift-if) (("" (ground) nil))))))))))))))))
    nil)
   nil shostak))
 (parallel_vectors_diff_segment_endpoints 0
  (parallel_vectors_diff_segment_endpoints-1 nil 3874129021
   ("" (skeep)
    (("" (expand "parallel?")
      (("" (expand "point_on_segment?")
        (("" (skeep*)
          (("" (inst + "(1-t)*nzk + d")
            (("1" (grind) nil)
             ("2" (isolate -1 l 1)
              (("2" (assert)
                (("2" (replace -1)
                  (("2"
                    (equate "(nzk * t - nzk) * v" "(t - 1) * (nzk * v)"
                     t)
                    (("2" (replace -2 :dir rl)
                      (("2" (rewrite "scal_sub_right")
                        (("2" (rewrite* "scal_sub_left")
                          (("2" (isolate -5 l 1)
                            (("2" (cancel-add -5)
                              (("2"
                                (assert)
                                nil))))))))))))))))))))))))))))
    nil)
   nil shostak))
 (parallel_point_diff_norm 0
  (parallel_point_diff_norm-1 nil 3874129021
   ("" (skeep)
    (("" (ground)
      (("1" (lemma "parallel_vectors_diff_segment_endpoints")
        (("1" (inst - "p" "r" "v" "(# p1 := e`p2, p2 := e`p1 #)")
          (("1" (ground)
            (("1" (use "parallel_diff_norm") (("1" (ground) nil)))
             ("2" (expand "parallel?")
              (("2" (skeep)
                (("2" (inst + "-nzk")
                  (("2" (rewrite "neg_distr_sub" :dir rl)
                    (("2" (replace -1) (("2" (grind) nil)))))))))))
             ("3" (hide-all-but (-2 1))
              (("3" (expand "point_on_segment?")
                (("3" (skeep)
                  (("3" (inst + "1-t") (("3" (grind) nil)))))))))))))))
       ("2" (use "parallel_vectors_diff_segment_endpoints")
        (("2" (assert)
          (("2" (use "parallel_diff_norm") (("2" (ground) nil))))))))))
    nil)
   nil shostak))
 (point_not_on_parallel_segment 0
  (point_not_on_parallel_segment-1 nil 3874129021
   ("" (skeep)
    (("" (case "parallel?(e`p1 - e`p2, v)")
      (("1" (case "e`p1 /= p and e`p2 /= p")
        (("1" (flatten)
          (("1" (use "parallel_vectors_diff_segment_endpoints")
            (("1" (assert)
              (("1" (lemma "parallel_vectors_diff_segment_endpoints")
                (("1" (inst - "p" "r" "v" "reverse_segment(e)")
                  (("1" (expand "reverse_segment")
                    (("1" (ground)
                      (("1" (use "parallel_on_arb_line")
                        (("1" (assert)
                          (("1" (lemma "parallel_on_arb_line")
                            (("1" (inst - "e`p2" "p" "v")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "min")
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (expand "point_on_arb_line?")
                                      (("1"
                                        (expand "point_on_segment?")
                                        (("1"
                                          (skeep*)
                                          (("1"
                                            (replace -1 (-7 -11))
                                            (("1"
                                              (replace -2 (-7 -11))
                                              (("1"
                                                (rewrite
                                                 "scal_add_right")
                                                (("1"
                                                  (rewrite
                                                   "scal_add_right")
                                                  (("1"
                                                    (factor
                                                     -11
                                                     r
                                                     (1 3))
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (cancel-add
                                                         -11)
                                                        (("1"
                                                          (factor
                                                           -11
                                                           r
                                                           *)
                                                          (("1"
                                                            (use
                                                             "scal_cancel")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 -8)
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   +)
                                                                  (("1"
                                                                    (replace
                                                                     -3
                                                                     +)
                                                                    (("1"
                                                                      (hide
                                                                       -2
                                                                       -3
                                                                       -4
                                                                       -5
                                                                       -6
                                                                       -9
                                                                       -12)
                                                                      (("1"
                                                                        (case
                                                                         "d!1 < 0 iff d < 0")
                                                                        (("1"
                                                                          (case
                                                                           "d!1 < 0")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (factor
                                                                               -3
                                                                               r
                                                                               (2
                                                                                3))
                                                                              (("1"
                                                                                (claim
                                                                                 "%1 <= 0"
                                                                                 nil
                                                                                 (!
                                                                                  -3
                                                                                  r))
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -5
                                                                                   4)
                                                                                  (("2"
                                                                                    (claim
                                                                                     "d!1 * (-t + 1) <= 0 and t*d <= 0")
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (ground)
                                                                                      (("1"
                                                                                        (factor
                                                                                         1
                                                                                         l
                                                                                         *)
                                                                                        (("1"
                                                                                          (mult-cases
                                                                                           1)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (mult-cases
                                                                                         1)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "abs")
                                                                              (("2"
                                                                                (ground)
                                                                                (("1"
                                                                                  (move-terms
                                                                                   -2
                                                                                   l
                                                                                   3)
                                                                                  (("1"
                                                                                    (factor
                                                                                     -2
                                                                                     l
                                                                                     *)
                                                                                    (("1"
                                                                                      (cancel-by
                                                                                       -2
                                                                                       "d-d!1")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (cancel-add
                                                                                   -1)
                                                                                  (("2"
                                                                                    (move-terms
                                                                                     -1
                                                                                     l
                                                                                     2)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (cancel-by
                                                                                         -1
                                                                                         "t")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (inst
                                                                           +
                                                                           "d!1/(d!1 - d)")
                                                                          (("2"
                                                                            (split
                                                                             4)
                                                                            (("1"
                                                                              (cross-mult
                                                                               1)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (cross-mult
                                                                               1)
                                                                              (("2"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (rewrite
                                                                               "scal_add_right")
                                                                              (("3"
                                                                                (rewrite
                                                                                 "scal_add_right")
                                                                                (("3"
                                                                                  (factor
                                                                                   1
                                                                                   r
                                                                                   (1
                                                                                    3))
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (cancel-add
                                                                                       1)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "scal_add_left"
                                                                                         :dir
                                                                                         rl)
                                                                                        (("1"
                                                                                          (claim
                                                                                           "%1 = 0"
                                                                                           nil
                                                                                           (!
                                                                                            1
                                                                                            r
                                                                                            1))
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "scal_0")
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide
                                                                                             2)
                                                                                            (("2"
                                                                                              (field
                                                                                               1)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (ground)
                                                                                        (("2"
                                                                                          (move-terms
                                                                                           1
                                                                                           r
                                                                                           1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but (-6 1))
                        (("2" (expand "point_on_segment?")
                          (("2" (skeep)
                            (("2" (inst + "1-t")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("2" (use "norm_eq_0")
          (("2" (lemma "norm_eq_0")
            (("2" (inst - "e`p2 - p")
              (("2" (rewrite "sub_eq_zero")
                (("2" (rewrite "sub_eq_zero") (("2" (ground) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "parallel?")
        (("2" (skeep)
          (("2" (inst + "-nzk")
            (("2" (hide-all-but (-3 1)) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (below_min_key_arb_not_on 0
  (below_min_key_arb_not_on-1 nil 3874129021
   ("" (skeep + t)
    (("" (expand "only_parallel_edges?")
      (("" (invoke (typepred "%1") (! -5 2))
        (("" (inst - "norm(r*v)")
          (("" (assert)
            (("" (expand "abs")
              (("" (expand "key_arb_intersections" 1)
                (("" (skeep)
                  (("" (inst?)
                    (("" (assert)
                      (("" (expand "abs")
                        (("" (use "point_add_scal_neq_point")
                          (("" (assert) nil))))))))))))))))))))))))
    nil)
   nil shostak))
 (below_min_key_arb_crossing 0
  (below_min_key_arb_crossing-1 nil 3874129021
   ("" (skeep)
    (("" (use "before_arb_crossings_empty")
      (("" (ground)
        (("1" (expand "point_on_arb_ray?") (("1" (inst + "r") nil)))
         ("2" (hide 4)
          (("2" (apply-extensionality :hide? t)
            (("2" (expand "emptyset")
              (("2" (expand "set_before_p")
                (("2" (flatten)
                  (("2" (expand "arb_crossing_set")
                    (("2" (expand "counted_crossing_arb?")
                      (("2" (flatten)
                        (("2" (expand "point_on_arb_ray?")
                          (("2" (skeep)
                            (("2" (lemma "below_min_key_arb_not_on")
                              (("2"
                                (inst - "p" "v" "G" "d")
                                (("2"
                                  (replace -2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "abs")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (case-replace "d=0")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide -2)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (use
                                                   "vertex_on_perimeter")
                                                  (("1" (assert) nil)))
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (expand
                                                     "point_on_polygon_perimeter?")
                                                    (("2"
                                                      (inst?)
                                                      nil)))))))))))
                                           ("2"
                                            (assert)
                                            (("2"
                                              (ground)
                                              (("1"
                                                (use
                                                 "on_parallel_not_adj_counted")
                                                (("1" (assert) nil)))
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (expand
                                                   "only_parallel_edges?")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      nil))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil shostak))
 (below_min_key_same_crossing_set 0
  (below_min_key_same_crossing_set-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin)
      (("" (flatten)
        (("" (lemma "before_arb_crossings_empty")
          (("" (inst - "p+r*v" "p+min[real,<=](kai)*v" "v" "G")
            (("" (ground)
              (("1" (hide-all-but 1)
                (("1" (expand "point_on_arb_ray?")
                  (("1" (inst + "min[real,<=](kai) - r")
                    (("1" (rewrite "scal_sub_left")
                      (("1" (cancel-add) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 3)
                (("2" (apply-extensionality :hide? t)
                  (("2" (expand "emptyset")
                    (("2" (expand "set_before_p")
                      (("2" (flatten)
                        (("2" (expand "arb_crossing_set")
                          (("2" (expand "counted_crossing_arb?")
                            (("2" (flatten)
                              (("2"
                                (expand "point_on_arb_ray?")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (lemma "below_min_key_arb_not_on")
                                    (("2"
                                      (inst - "p" "v" "G" "r+d")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (cancel-add!
                                                 (! -4 r 1))
                                                (("1"
                                                  (factor! (! -4 r 1))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "abs")
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (use
                                                           "on_parallel_not_adj_counted")
                                                          (("1"
                                                            (rewrite
                                                             "scal_add_left")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (rewrite
                                                                 "add_comm"
                                                                 -3)
                                                                (("1"
                                                                  (rewrite
                                                                   "add_assoc"
                                                                   -3)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skeep)
                                                          (("2"
                                                            (expand
                                                             "only_parallel_edges?")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (ground)
                                                                (("2"
                                                                  (rewrite
                                                                   "scal_add_left")
                                                                  (("2"
                                                                    (rewrite
                                                                     "add_comm"
                                                                     1)
                                                                    (("2"
                                                                      (rewrite
                                                                       "add_assoc"
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (cancel-add! (! -3 r 1))
                                            (("2"
                                              (factor! (! -3 r 1))
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "abs")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (key_intersections_subset_arb_crossings 0
  (key_intersections_subset_arb_crossings-1 nil 3874129021
   ("" (skeep)
    (("" (expand "subset?")
      (("" (expand "member")
        (("" (expand "arb_crossing_set")
          (("" (expand "norms_from_points")
            (("" (skeep*)
              (("" (replace -3 :hide? t)
                (("" (expand "point_on_arb_ray?")
                  (("" (ground)
                    (("1" (inst + "0") (("1" (assert) nil)))
                     ("2" (skeep)
                      (("2" (case-replace "d=0")
                        (("1" (assert) nil)
                         ("2" (expand "key_arb_intersections")
                          (("2" (expand "counted_crossing_arb?")
                            (("2" (replace -1)
                              (("2"
                                (assert)
                                (("2"
                                  (split -2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (use
                                       "one_adjacent_edge_not_parallel")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (use
                                               "two_adjacent_edges")
                                              (("1"
                                                (split -1)
                                                (("1"
                                                  (skoletin*)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (split -6)
                                                      (("1"
                                                        (rewrite
                                                         "parallel_diff_points_comm_left")
                                                        (("1"
                                                          (inst
                                                           +
                                                           "e1"
                                                           "p+d*v")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -4
                                                               +)
                                                              (("1"
                                                                (expand
                                                                 "point_on_segment?")
                                                                (("1"
                                                                  (inst
                                                                   +
                                                                   "1")
                                                                  (("1"
                                                                    (assert)
                                                                    nil)))))))))))))
                                                       ("2"
                                                        (inst
                                                         +
                                                         "e2"
                                                         "p+d*v")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (replace
                                                             -3)
                                                            (("2"
                                                              (expand
                                                               "point_on_segment?")
                                                              (("2"
                                                                (inst
                                                                 +
                                                                 "0")
                                                                (("2"
                                                                  (assert)
                                                                  nil)))))))))))))))))
                                                 ("2"
                                                  (propax)
                                                  nil)))))))))))))))
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          nil))))))))))))))))))))))))))))))))))))))
    nil)
   nil shostak))
 (key_intersections_empty_arb_crossings 0
  (key_intersections_empty_arb_crossings-1 nil 3874129021
   ("" (skeep)
    (("" (expand "empty?")
      (("" (skeep)
        (("" (use "key_intersections_subset_arb_crossings")
          (("" (expand "subset?")
            (("" (expand "member")
              (("" (assert)
                (("" (expand "norms_from_points")
                  (("" (inst -2 "norm(x - p)")
                    (("" (inst?)
                      (("" (assert)
                        (("" (inst + "x") nil))))))))))))))))))))))
    nil)
   nil shostak))
 (empty_key_arb_only_parallel 0
  (empty_key_arb_only_parallel-1 nil 3874129021
   ("" (skeep*)
    (("" (expand "only_parallel_edges?")
      (("" (skeep)
        (("" (expand "empty?")
          (("" (inst - "d")
            (("" (expand "key_arb_intersections")
              (("" (expand "member")
                (("" (inst?)
                  (("" (assert)
                    (("" (expand "abs")
                      (("" (propax) nil))))))))))))))))))))
    nil)
   nil shostak))
 (empty_key_arb_crossings_emptyset 0
  (empty_key_arb_crossings_emptyset-1 nil 3874129021
   ("" (skeep)
    (("" (apply-extensionality :hide? t)
      (("" (expand "emptyset")
        (("" (expand "arb_crossing_set")
          (("" (flatten)
            (("" (expand "key_arb_intersections")
              (("" (expand "empty?")
                (("" (expand "point_on_arb_ray?")
                  (("" (skeep)
                    (("" (inst - "r+d")
                      (("" (expand "member")
                        (("" (equate (! -1 r) "p + (r+d) * v" t)
                          (("" (expand "counted_crossing_arb?")
                            (("" (ground)
                              (("1"
                                (use "on_parallel_not_adj_counted")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "only_parallel_edges?")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (replace -4)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "abs")
                                              (("1"
                                                (inst?)
                                                nil)))))))))))))))))
                               ("2"
                                (skeep)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (replace -2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "abs")
                                        (("2"
                                          (inst?)
                                          nil))))))))))))))))))))))))))))))))))))))
    nil)
   nil shostak))
 (empty_key_arb_before_empty_crossings 0
  (empty_key_arb_before_empty_crossings-1 nil 3874129021
   ("" (skeep)
    (("" (expand "empty?")
      (("" (apply-extensionality :hide? t)
        (("" (expand "emptyset")
          (("" (expand "set_before_p")
            (("" (flatten)
              (("" (expand "arb_crossing_set")
                (("" (expand "counted_crossing_arb?")
                  (("" (flatten)
                    (("" (expand "point_on_arb_ray?")
                      (("" (skeep)
                        (("" (case-replace "d=0")
                          (("1" (assert)
                            (("1" (replace -2)
                              (("1"
                                (ground)
                                (("1"
                                  (rewrite "vertex_on_perimeter")
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (expand
                                     "point_on_polygon_perimeter?")
                                    (("2" (inst?) nil)))))))))))
                           ("2" (inst - "d")
                            (("2" (expand "member")
                              (("2"
                                (expand "key_arb_intersections")
                                (("2"
                                  (replace -1 -3)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "abs")
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (ground)
                                          (("1"
                                            (use
                                             "on_parallel_not_adj_counted")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand
                                                 "only_parallel_edges?")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "abs")
                                                        (("1"
                                                          (propax)
                                                          nil)))))))))))))))
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "abs")
                                                  (("2"
                                                    (propax)
                                                    nil))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil shostak))
 (empty_key_arb_before_empty_crossings_neg_TCC1 0
  (empty_key_arb_before_empty_crossings_neg_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (empty_key_arb_before_empty_crossings_neg subtype
    "(vectors_2D.-)(arb_direc_edge_crossing.v)" "Normalized"))
  (empty_key_arb_before_empty_crossings_neg_TCC1-1 nil 3874128953
   ("" (subtype-tcc) nil nil) nil nil
   (empty_key_arb_before_empty_crossings_neg subtype
    "(vectors_2D.-)(arb_direc_edge_crossing.v)" "Normalized")))
 (empty_key_arb_before_empty_crossings_neg 0
  (empty_key_arb_before_empty_crossings_neg-1 nil 3874129021
   ("" (skeep)
    (("" (expand "empty?")
      (("" (apply-extensionality :hide? t)
        (("" (expand "emptyset")
          (("" (expand "set_before_p")
            (("" (flatten)
              (("" (expand "arb_crossing_set")
                (("" (expand "counted_crossing_arb?")
                  (("" (flatten)
                    (("" (expand "point_on_arb_ray?")
                      (("" (skeep)
                        (("" (inst - "r-d")
                          (("" (expand "member")
                            (("" (expand "key_arb_intersections")
                              ((""
                                (replace -1 -3)
                                ((""
                                  (assert)
                                  ((""
                                    (expand "abs")
                                    ((""
                                      (equate (! -1 r) "p-(r-d)*v" t)
                                      ((""
                                        (replace -1)
                                        ((""
                                          (ground)
                                          (("1"
                                            (use
                                             "on_parallel_not_adj_counted")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand
                                                 "only_parallel_edges?")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "abs")
                                                        (("1"
                                                          (propax)
                                                          nil)))))))))))))))
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "abs")
                                                  (("2"
                                                    (propax)
                                                    nil))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil shostak))
 (empty_key_arb_no_crossings 0
  (empty_key_arb_no_crossings-1 nil 3874129021
   ("" (skeep)
    (("" (lemma "before_arb_crossings_empty")
      (("" (inst - "p" "p+r*v" "v" "G")
        (("" (split -1)
          (("1" (propax) nil) ("2" (assert) nil)
           ("3" (lemma "empty_key_arb_before_empty_crossings")
            (("3" (inst - "p" "v" "G" "r")
              (("3" (assert) nil))))))))))))
    nil)
   nil shostak))
 (empty_key_arb_no_crossings_neg 0
  (empty_key_arb_no_crossings_neg-1 nil 3874129021
   ("" (skeep)
    (("" (lemma "before_arb_crossings_empty")
      (("" (inst - "p-r*v" "p" "v" "G")
        (("" (split -1)
          (("1" (assert) nil) ("2" (assert) nil)
           ("3" (use "empty_key_arb_before_empty_crossings_neg")
            (("3" (ground) nil))))))))))
    nil)
   nil shostak))
 (empty_key_arb_no_crossings_add 0
  (empty_key_arb_no_crossings_add-1 nil 3874129021
   ("" (skeep)
    (("" (apply-extensionality :hide? t)
      (("" (expand "add")
        (("" (expand "member")
          (("" (iff)
            (("" (expand "arb_crossing_set")
              (("" (ground)
                (("1" (expand "point_on_arb_ray?")
                  (("1" (skeep)
                    (("1" (expand "key_arb_intersections")
                      (("1" (expand "empty?")
                        (("1" (inst - "d")
                          (("1" (expand "member")
                            (("1" (expand "counted_crossing_arb?" -2)
                              (("1"
                                (ground)
                                (("1"
                                  (use "on_parallel_not_adj_counted")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "only_parallel_edges?")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (replace -4)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "abs")
                                                (("1"
                                                  (propax)
                                                  nil)))))))))))))))))
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (replace -2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "abs")
                                          (("2"
                                            (propax)
                                            nil)))))))))))))))))))))))))))
                 ("2" (replace -1) (("2" (assert) nil)))
                 ("3" (expand "emptyset") (("3" (propax) nil)))
                 ("4" (expand "emptyset")
                  (("4" (propax) nil))))))))))))))))
    nil)
   nil shostak))
 (card_add_crossing_set 0
  (card_add_crossing_set-1 nil 3874129021
   ("" (skeep)
    (("" (rewrite "card_add")
      (("" (lift-if)
        (("" (ground)
          (("1" (expand "arb_crossing_set") (("1" (assert) nil)))
           ("2" (rewrite "even_iff_odd_succ" :dir rl)
            (("2" (rewrite "even_or_odd") nil))))))))))
    nil)
   nil shostak))
 (point_before_min_key_not_on 0
  (point_before_min_key_not_on-1 nil 3874129021
   ("" (skeep)
    (("" (expand "only_parallel_edges?")
      (("" (skeep)
        (("" (expand "point_on_arb_ray?")
          (("" (skeep)
            (("" (replace -3 :hide? t)
              (("" (assert)
                (("" (expand "abs")
                  (("" (invoke (typepred "%1") (! -2 2))
                    (("" (inst - "d")
                      (("" (assert)
                        (("" (expand "key_arb_intersections" 1)
                          (("" (inst?)
                            (("" (assert)
                              ((""
                                (expand "abs")
                                ((""
                                  (propax)
                                  nil))))))))))))))))))))))))))))))
    nil)
   nil shostak))
 (point_before_min_neg_key_not_on 0
  (point_before_min_neg_key_not_on-1 nil 3874129021
   ("" (skeep)
    (("" (expand "only_parallel_edges?")
      (("" (skeep)
        (("" (invoke (typepred "%1") (! -2 2))
          (("" (inst - "norm(q-p)")
            (("" (ground)
              (("" (expand "point_on_arb_ray?")
                (("" (skeep)
                  (("" (replace -4)
                    (("" (assert)
                      (("" (expand "key_arb_intersections" 1)
                        (("" (inst?)
                          (("" (assert) nil))))))))))))))))))))))))
    nil)
   nil shostak))
 (bisect_vector_nonzero 0
  (bisect_vector_nonzero-1 nil 3874129021
   ("" (skeep)
    (("" (expand "bisect_vector")
      (("" (expand "parallel?")
        (("" (isolate -1 l 1)
          (("" (replace -1)
            (("" (inst + "-1") (("" (grind-with-ext) nil))))))))))))
    nil)
   nil shostak))
 (bisect_not_parallel_prev 0
  (bisect_not_parallel_prev-1 nil 3874129021
   ("" (skeep + t)
    (("" (skoletin*)
      (("" (flatten)
        (("" (replace -2 :hide? t)
          (("" (expand "bisect_vector")
            (("" (expand "parallel?")
              (("" (skeep)
                (("" (move-terms 2 l 3)
                  (("" (assert)
                    (("" (rewrite "scal_sub_right")
                      (("" (rewrite "scal_add_right")
                        (("" (move-terms -2 l 2)
                          (("" (move-terms -2 r 1)
                            (("" (factor -2 l)
                              ((""
                                (factor -2 r (2 3))
                                ((""
                                  (case-replace "nzk = 1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (move-terms -3 r 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -3 :dir rl)
                                          (("1"
                                            (typepred "G`vertices")
                                            (("1"
                                              (expand
                                               "uniq_vertex_list?")
                                              (("1"
                                                (inst
                                                 -
                                                 "i"
                                                 "next_index(G,i)")
                                                (("1" (ground) nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind)
                                                    nil)))))))))))))))))
                                   ("2"
                                    (inst + "nzk/(1 - nzk)")
                                    (("1"
                                      (cross-mult 2)
                                      (("1"
                                        (move-terms -2 r 1)
                                        (("1"
                                          (rewrite "scal_sub_right")
                                          (("1"
                                            (rewrite "scal_sub_right")
                                            (("1"
                                              (replace -2 :dir rl)
                                              (("1"
                                                (cancel-add 2)
                                                (("1"
                                                  (move-terms 2 r)
                                                  (("1"
                                                    (elim-unary 2)
                                                    (("1"
                                                      (factor 2 l)
                                                      (("1"
                                                        (equate
                                                         (! 2 l 1)
                                                         "0"
                                                         t)
                                                        (("1"
                                                          (assert)
                                                          nil)))))))))))))))))))))
                                     ("2"
                                      (hide-all-but (1 2))
                                      (("2"
                                        (grind)
                                        nil))))))))))))))))))))))))))))))))))))
    nil)
   nil shostak))
 (bisect_not_parallel_next 0
  (bisect_not_parallel_next-1 nil 3874129021
   ("" (skeep + t)
    (("" (skoletin*)
      (("" (flatten)
        (("" (replace -2 :hide? t)
          (("" (expand "bisect_vector")
            (("" (rewrite "parallel_symm" +)
              (("" (expand "parallel?")
                (("" (skeep)
                  (("" (case-replace "nzk = 1")
                    (("1" (assert)
                      (("1" (cancel-add -3)
                        (("1" (move-terms -3 r 2)
                          (("1" (equate (! -3 l) "p")
                            (("1" (typepred "G`vertices")
                              (("1"
                                (expand "uniq_vertex_list?")
                                (("1"
                                  (inst - "i" "prev_index(G,i)")
                                  (("1" (ground) nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil)))))))))
                             ("2" (hide-all-but 1)
                              (("2" (grind-with-ext) nil)))))))))))
                     ("2" (inst + "nzk/(1 - nzk)")
                      (("1" (cross-mult 2)
                        (("1" (rewrite "scal_sub_right" -2)
                          (("1" (rewrite "scal_add_right")
                            (("1" (rewrite* "scal_sub_right")
                              (("1"
                                (isolate -2 r 1)
                                (("1"
                                  (replace -2 :dir rl)
                                  (("1"
                                    (rewrite* "scal_sub_left")
                                    (("1"
                                      (cancel-add 2)
                                      (("1"
                                        (factor 2 r)
                                        (("1"
                                          (assert)
                                          nil)))))))))))))))))))
                       ("2" (hide-all-but (1 2))
                        (("2" (grind) nil))))))))))))))))))))))
    nil)
   nil shostak))
 (counted_direction_not_parallel 0
  (counted_direction_not_parallel-1 nil 3874129021
   ("" (skeep* + t)
    (("" (expand "counted_crossing_direction?")
      (("" (flatten)
        (("" (ground)
          (("1" (skeep)
            (("1" (use "vertex_on_two_edges")
              (("1" (assert)
                (("1" (split -1)
                  (("1" (replace -1 -10)
                    (("1" (assert)
                      (("1" (rewrite "parallel_diff_points_comm_left")
                        (("1" (rewrite "parallel_equiv_cross_eq_0")
                          (("1" (replace -10) (("1" (assert) nil)))
                           ("2" (lemma "vertices_diff_prev_nonzero")
                            (("2" (inst - "G" "i")
                              (("2"
                                (flatten)
                                (("2"
                                  (replace -4)
                                  (("2"
                                    (hide-all-but (-1 1))
                                    (("2"
                                      (invoke
                                       (name-replace "P" "%1")
                                       (! -1 l 1))
                                      (("2"
                                        (move-terms -1 l 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (assert)
                                              nil)))))))))))))))))))))))))))
                   ("2" (replace -1 -10)
                    (("2" (assert)
                      (("2" (rewrite "parallel_equiv_cross_eq_0")
                        (("1" (replace -10) (("1" (assert) nil)))
                         ("2" (use "vertices_diff_next_nonzero")
                          (("2" (assert) nil)))))))))))))))))
           ("2" (skeep)
            (("2" (lemma "nonvertex_on_one_edge")
              (("2" (inst - "p" "G" "e!1" "e")
                (("2" (assert)
                  (("2" (expand "nonvertex?")
                    (("2" (propax) nil))))))))))))))))))
    nil)
   nil shostak))
 (bisect_not_parallel_cross_nonzero_TCC1 0
  (bisect_not_parallel_cross_nonzero_TCC1-2 nil 3874129021
   ("" (skeep*)
    (("" (typepred "G`vertices")
      (("" (expand "uniq_vertex_list?")
        (("" (use "bisect_vector_nonzero")
          (("" (ground)
            (("1" (inst - "i" "prev_index(G,i)")
              (("1" (ground) nil nil)
               ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
              nil)
             ("2" (inst - "i" "next_index(G,i)")
              (("1" (ground) nil nil)
               ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (bisect_not_parallel_cross_nonzero subtype
    "arb_direc_edge_crossing.bisect_vector(arb_direc_edge_crossing.p, arb_direc_edge_crossing.prev, arb_direc_edge_crossing.next)"
    "Nz_vector"))
  (bisect_not_parallel_cross_nonzero_TCC1-1 nil 3874128953
   ("" (subtype-tcc) nil nil) nil nil
   (bisect_not_parallel_cross_nonzero subtype
    "arb_direc_edge_crossing.bisect_vector(arb_direc_edge_crossing.p, arb_direc_edge_crossing.prev, arb_direc_edge_crossing.next)"
    "Nz_vector")))
 (bisect_not_parallel_cross_nonzero 0
  (bisect_not_parallel_cross_nonzero-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (lemma "parallel_equiv_cross_eq_0")
          (("" (inst - "u" "w")
            (("1" (assert)
              (("1" (expand "bisect_vector")
                (("1" (replace -3)
                  (("1" (replace -2)
                    (("1" (replace -1)
                      (("1" (ground)
                        (("1" (claim "%1 = 0" nil (! 1 l))
                          (("1" (expand "^" -1)
                            (("1" (expand "cross" -1)
                              (("1" (grind) nil)))))
                           ("2" (ground) nil)))
                         ("2" (grind) nil) ("3" (grind) nil)
                         ("4" (grind) nil)))))))))))))
             ("2" (hide -1 2 3 4)
              (("2" (typepred "G`vertices")
                (("2" (expand "uniq_vertex_list?")
                  (("2" (inst - "i" "next_index(G,i)")
                    (("1" (replace -2)
                      (("1" (flatten)
                        (("1" (move-terms -1 l 2)
                          (("1" (ground) nil)))))))
                     ("2" (hide-all-but 1) (("2" (grind) nil)))))))))))
             ("3" (hide -1 2 3 4)
              (("3" (replace -2)
                (("3" (flatten)
                  (("3" (move-terms -1 l 2)
                    (("3" (typepred "G`vertices")
                      (("3" (expand "uniq_vertex_list?")
                        (("3" (inst - "i" "prev_index(G,i)")
                          (("1" (ground) nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind) nil))))))))))))))))))))))))))
    nil)
   nil shostak))
 (key_arb_intersections_pos 0
  (key_arb_intersections_pos-1 nil 3874129021
   ("" (skeep)
    (("" (invoke (typepred "%1") (! 2 l))
      (("" (expand "key_arb_intersections" -1 1)
        (("" (skeep)
          (("" (expand "point_on_arb_ray?")
            (("" (skeep)
              (("" (replace -2)
                (("" (case-replace "d=0")
                  (("1" (assert) nil) ("2" (assert) nil))))))))))))))))
    nil)
   nil shostak))
 (counted_key_arb_intersections_pos 0
  (counted_key_arb_intersections_pos-1 nil 3874129021
   ("" (skeep)
    (("" (invoke (typepred "%1") (! 2 l))
      (("" (expand "key_arb_intersections" -1 1)
        (("" (skeep)
          (("" (use "norm_eq_0")
            (("" (assert)
              (("" (move-terms -1 l 2) (("" (assert) nil))))))))))))))
    nil)
   nil shostak))
 (counted_key_arb_intersections_reverse_pos 0
  (counted_key_arb_intersections_reverse_pos-1 nil 3874129021
   ("" (skeep)
    (("" (invoke (typepred "%1") (! 2 l))
      (("" (expand "key_arb_intersections" -1 1)
        (("" (skeep)
          (("" (use "norm_eq_0")
            (("" (assert)
              (("" (move-terms -1 l 2) (("" (assert) nil))))))))))))))
    nil)
   nil shostak))
 (crossing_direction_counted 0
  (crossing_direction_counted-1 nil 3874129021
   ("" (skeep)
    (("" (expand "counted_crossing_arb?")
      (("" (ground)
        (("1" (expand "counted_crossing_direction?")
          (("1" (flatten)
            (("1" (skeep)
              (("1" (expand "adjacent_edges_counted?")
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (lemma "cross_antisymmetric")
                        (("1"
                          (inst-cp - "G`vertices(prev_index(G, i)) - q"
                           "v")
                          (("1"
                            (inst - "G`vertices(next_index(G, i)) - q"
                             "v")
                            (("1" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "counted_crossing_direction?")
          (("2" (flatten) nil nil)) nil))
        nil))
      nil))
    nil)
   ((counted_crossing_arb? const-decl "bool" arb_direc_edge_crossing
     nil)
    (counted_crossing_direction? const-decl "bool"
     arb_direc_edge_crossing nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (uniq_vertex_list nonempty-type-eq-decl nil vertex_list
     line_segments)
    (polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (simple_polygon_2d? const-decl "bool" polygons_2d nil)
    (simple_polygon_2d nonempty-type-eq-decl nil polygons_2d nil)
    (below type-eq-decl nil naturalnumbers nil)
    (vector_2d type-eq-decl nil vectors_cross_2d line_segments)
    (Vector type-eq-decl nil vectors_2D vectors) nil
    (prev_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (point_2d type-eq-decl nil vectors_cross_2d line_segments)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (next_index const-decl "below(p`num_vertices)" polygons_2d nil)
    (cross_antisymmetric formula-decl nil vectors_cross_2d
     line_segments)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (adjacent_edges_counted? const-decl "bool" arb_direc_edge_crossing
     nil))
   shostak))
 (crossing_direction_neg 0
  (crossing_direction_neg-1 nil 3874129021
   ("" (skeep)
    (("" (expand "counted_crossing_direction?")
      (("" (flatten)
        (("" (assert)
          (("" (ground)
            (("" (skeep)
              (("" (inst?)
                (("" (assert)
                  (("" (rewrite "neg_cross_neg")
                    (("" (rewrite "neg_cross_neg")
                      (("" (ground) nil))))))))))))))))))))
    nil)
   nil shostak))
 (prev_point_ray_crossing_set 0
  (prev_point_ray_crossing_set-1 nil 3874129021
   ("" (skeep)
    (("" (case-replace "r=0")
      (("1" (assert) nil)
       ("2" (lemma "before_arb_crossings_empty")
        (("2" (inst - "p-r*v" "p" "v" "G")
          (("2" (ground)
            (("1" (assert) nil)
             ("2" (hide 4)
              (("2" (apply-extensionality :hide? t)
                (("2" (expand "emptyset")
                  (("2" (expand "set_before_p")
                    (("2" (flatten)
                      (("2" (expand "arb_crossing_set")
                        (("2" (expand "counted_crossing_arb?")
                          (("2" (flatten)
                            (("2" (expand "point_on_arb_ray?")
                              (("2"
                                (skeep)
                                (("2"
                                  (replace -1 -3)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "abs")
                                      (("2"
                                        (equate (! -1 r) "p-(r-d)*v" t)
                                        (("2"
                                          (replace -1 :hide? t)
                                          (("2"
                                            (lemma
                                             "below_min_key_arb_not_on")
                                            (("2"
                                              (inst
                                               -
                                               "p"
                                               "-v"
                                               "G"
                                               "r-d")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (rewrite "scal_neg")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "only_parallel_edges?")
                                                      (("2"
                                                        (ground)
                                                        (("1"
                                                          (use
                                                           "on_parallel_not_adj_counted")
                                                          (("1"
                                                            (expand
                                                             "only_parallel_edges?")
                                                            (("1"
                                                              (propax)
                                                              nil)))))
                                                         ("2"
                                                          (skeep)
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (assert)
                                                              nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil shostak))
 (later_point_ray_crossing_set 0
  (later_point_ray_crossing_set-1 nil 3874129021
   ("" (skeep)
    (("" (apply-extensionality 2 :hide? t)
      (("" (expand "add")
        (("" (iff)
          (("" (ground)
            (("1" (expand "member")
              (("1" (expand "arb_crossing_set")
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (expand "point_on_arb_ray?")
                      (("1" (skeep)
                        (("1" (case "d<r")
                          (("1" (expand "counted_crossing_arb?")
                            (("1" (lemma "below_min_key_arb_not_on")
                              (("1"
                                (inst - "p" "v" "G" "d")
                                (("1"
                                  (assert)
                                  (("1"
                                    (case-replace "d=0")
                                    (("1" (assert) nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (ground)
                                        (("1"
                                          (use
                                           "on_parallel_not_adj_counted")
                                          (("1" (assert) nil)))
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (expand
                                             "only_parallel_edges?")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                nil)))))))))))))))))))))
                           ("2" (inst + "d-r")
                            (("1" (rewrite "scal_sub_left")
                              (("1" (cancel-add 3) nil)))
                             ("2" (assert) nil)))))))))))))))))
             ("2" (expand "arb_crossing_set")
              (("2" (ground)
                (("1" (expand "point_on_arb_ray?")
                  (("1" (inst + "0") (("1" (assert) nil)))))
                 ("2" (lemma "crossing_direction_counted")
                  (("2" (inst - "p" "p" "v" "G")
                    (("2" (assert)
                      (("2" (expand "point_on_arb_ray?")
                        (("2" (inst + "0")
                          (("2" (assert) nil)))))))))))))))
             ("3" (expand "member")
              (("3" (lemma "arb_crossings_subset")
                (("3" (inst - "p" "p+r*v" "v" "G")
                  (("3" (ground)
                    (("3" (expand "subset?")
                      (("3" (inst - "x!1")
                        (("3" (expand "member")
                          (("3" (propax) nil))))))))))))))))))))))))
    nil)
   nil shostak))
 (empty_ray_intersection_sets 0
  (empty_ray_intersection_sets-1 nil 3874129021
   ("" (skeep)
    (("" (expand "all_arb_intersections")
      (("" (expand "union")
        (("" (expand "empty?")
          (("" (expand "member")
            (("" (ground)
              (("1" (skeep) (("1" (inst?) (("1" (ground) nil)))))
               ("2" (skeep) (("2" (inst?) (("2" (ground) nil)))))
               ("3" (skeep)
                (("3" (inst?)
                  (("3" (inst?) (("3" (ground) nil))))))))))))))))))
    nil)
   nil shostak))
 (parallel_intersections_pos 0
  (parallel_intersections_pos-1 nil 3874129021
   ("" (skeep)
    (("" (invoke (typepred "%1") (! 2 l))
      (("" (expand "parallel_intersections" -1 1)
        (("" (skeep)
          (("" (expand "point_on_arb_ray?")
            (("" (skeep)
              (("" (replace -3)
                (("" (case-replace "d=0")
                  (("1" (assert) nil) ("2" (assert) nil))))))))))))))))
    nil)
   nil shostak))
 (min_all_intersections_key_TCC1 0
  (min_all_intersections_key_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (expand "all_arb_intersections")
      (("" (use "union_empty[real]")
        (("" (lemma "emptyset_is_empty?[real]")
          (("" (inst - "parallel_intersections(p, v, G)")
            (("" (ground) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (min_all_intersections_key subtype
    "arb_direc_edge_crossing.all_arb_intersections(arb_direc_edge_crossing.p, arb_direc_edge_crossing.v, arb_direc_edge_crossing.G)"
    "non_empty_finite_set[real]"))
  (min_all_intersections_key_TCC1-1 nil 3874128953
   ("" (subtype-tcc) nil nil) nil nil
   (min_all_intersections_key subtype
    "arb_direc_edge_crossing.all_arb_intersections(arb_direc_edge_crossing.p, arb_direc_edge_crossing.v, arb_direc_edge_crossing.G)"
    "non_empty_finite_set[real]")))
 (min_all_intersections_key 0
  (min_all_intersections_key-1 nil 3874129021
   ("" (skeep)
    (("" (lemma "emptyset_is_empty?[real]")
      (("" (inst? :where -)
        (("" (assert)
          (("" (expand "all_arb_intersections")
            (("" (replace -1)
              (("" (rewrite "union_empty") nil))))))))))))
    nil)
   nil shostak))
 (min_all_intersections_parallel_TCC1 0
  (min_all_intersections_parallel_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (rewrite "empty_ray_intersection_sets")
      (("" (ground) nil nil)) nil))
    nil)
   nil shostak
   (min_all_intersections_parallel subtype
    "arb_direc_edge_crossing.all_arb_intersections(arb_direc_edge_crossing.p, arb_direc_edge_crossing.v, arb_direc_edge_crossing.G)"
    "non_empty_finite_set[real]"))
  (min_all_intersections_parallel_TCC1-1 nil 3874128953
   ("" (subtype-tcc) nil nil) nil nil
   (min_all_intersections_parallel subtype
    "arb_direc_edge_crossing.all_arb_intersections(arb_direc_edge_crossing.p, arb_direc_edge_crossing.v, arb_direc_edge_crossing.G)"
    "non_empty_finite_set[real]")))
 (min_all_intersections_parallel 0
  (min_all_intersections_parallel-1 nil 3874129021
   ("" (skeep)
    (("" (lemma "emptyset_is_empty?[real]")
      (("" (inst? :where -)
        (("" (assert)
          (("" (expand "all_arb_intersections")
            (("" (replace -1)
              (("" (rewrite "union_commutative")
                (("" (rewrite "union_empty") nil))))))))))))))
    nil)
   nil shostak))
 (all_intersections_pos 0
  (all_intersections_pos-1 nil 3874129021
   ("" (skeep)
    (("" (rewrite "empty_ray_intersection_sets")
      (("" (use "key_arb_intersections_pos")
        (("" (use "parallel_intersections_pos")
          (("" (claim "%1" nil (! 1 1))
            (("1" (use "min_all_intersections_parallel")
              (("1" (ground) nil nil)) nil)
             ("2" (case "empty?(parallel_intersections(p, v, G))")
              (("1" (use "min_all_intersections_key")
                (("1" (ground) nil nil)) nil)
               ("2" (assert)
                (("2" (lemma "min_union[real,<=]")
                  (("2" (expand "all_arb_intersections")
                    (("2" (hide 3)
                      (("2"
                        (invoke
                         (inst - "%1" "%2" "min[real,<=](%1)"
                          "min[real,<=](%2)")
                         (! 3 l 1 *))
                        (("2" (expand "fsmin")
                          (("2" (lift-if) (("2" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (nonempty_min_key_arb_intersections_TCC1 0
  (nonempty_min_key_arb_intersections_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (rewrite "empty_ray_intersection_sets")
      (("" (ground) nil nil)) nil))
    nil)
   nil shostak
   (nonempty_min_key_arb_intersections subtype
    "arb_direc_edge_crossing.all_arb_intersections(arb_direc_edge_crossing.p, arb_direc_edge_crossing.v, arb_direc_edge_crossing.G)"
    "non_empty_finite_set[real]"))
  (nonempty_min_key_arb_intersections_TCC1-1 nil 3874128953
   ("" (subtype-tcc) nil nil) nil nil
   (nonempty_min_key_arb_intersections subtype
    "arb_direc_edge_crossing.all_arb_intersections(arb_direc_edge_crossing.p, arb_direc_edge_crossing.v, arb_direc_edge_crossing.G)"
    "non_empty_finite_set[real]")))
 (nonempty_min_key_arb_intersections 0
  (nonempty_min_key_arb_intersections-1 nil 3874129021
   ("" (skeep)
    (("" (expand "all_arb_intersections")
      (("" (case "empty?(parallel_intersections(p, v, G))")
        (("1" (use "emptyset_is_empty?[real]")
          (("1" (assert)
            (("1" (replace -1) (("1" (rewrite "union_empty") nil nil))
              nil))
            nil))
          nil)
         ("2" (lemma "min_union[real,<=]")
          (("2"
            (invoke
             (inst - "%1" "%2" "min[real,<=](%1)" "min[real,<=](%2)")
             (! -2 r 1 *))
            (("2" (expand "fsmin")
              (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (nonempty_min_parallel_intersections_TCC1 0
  (nonempty_min_parallel_intersections_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (rewrite "empty_ray_intersection_sets")
      (("" (ground) nil nil)) nil))
    nil)
   nil shostak
   (nonempty_min_parallel_intersections subtype
    "arb_direc_edge_crossing.all_arb_intersections(arb_direc_edge_crossing.p, arb_direc_edge_crossing.v, arb_direc_edge_crossing.G)"
    "non_empty_finite_set[real]"))
  (nonempty_min_parallel_intersections_TCC1-1 nil 3874128953
   ("" (subtype-tcc) nil nil) nil nil
   (nonempty_min_parallel_intersections subtype
    "arb_direc_edge_crossing.all_arb_intersections(arb_direc_edge_crossing.p, arb_direc_edge_crossing.v, arb_direc_edge_crossing.G)"
    "non_empty_finite_set[real]")))
 (nonempty_min_parallel_intersections 0
  (nonempty_min_parallel_intersections-1 nil 3874129021
   ("" (skeep)
    (("" (expand "all_arb_intersections")
      (("" (case "empty?(key_arb_intersections(p, v, G))")
        (("1" (use "emptyset_is_empty?[real]")
          (("1" (assert)
            (("1" (replace -1)
              (("1" (rewrite "union_commutative")
                (("1" (rewrite "union_empty") nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (lemma "min_union[real,<=]")
          (("2"
            (invoke
             (inst - "%1" "%2" "min[real,<=](%1)" "min[real,<=](%2)")
             (! -2 r 1 *))
            (("2" (expand "fsmin")
              (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (no_parallel_intersections_not_on_segment 0
  (no_parallel_intersections_not_on_segment-1 nil 3874129021
   ("" (skeep + t)
    (("" (ground)
      (("1" (expand "parallel_intersections")
        (("1" (expand "empty?")
          (("1" (inst-cp -1 "norm(e`p1-p)")
            (("1" (inst -1 "norm(e`p2-p)")
              (("1" (expand "member")
                (("1" (inst 2 "e" "e`p1")
                  (("1" (inst 1 "e" "e`p2")
                    (("1" (assert)
                      (("1" (use "end_points_are_on_segment")
                        (("1" (ground)
                          (("1" (use "on_parallel_segment_on_ray")
                            (("1" (assert) nil)))))))))))))))))))))))
       ("2" (use "on_parallel_segment_within_endpoints")
        (("2" (assert)
          (("2" (skeep)
            (("2" (invoke (typepred "%1") (! -4 r))
              (("2" (claim "b >= %1" nil (! -6 r))
                (("1" (case "a > 0")
                  (("1" (inst - "a")
                    (("1" (assert)
                      (("1" (expand "parallel_intersections" 1)
                        (("1" (inst-cp 1 "e" "e`p1")
                          (("1" (inst 1 "e" "e`p2")
                            (("1" (assert)
                              (("1"
                                (split -6)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (replace -1 +)
                                    (("1"
                                      (replace -2 +)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "abs")
                                          (("1" (propax) nil)))))))))))
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (replace -1 +)
                                    (("2"
                                      (replace -2 +)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "abs")
                                          (("2"
                                            (propax)
                                            nil)))))))))))))))))))))))))
                   ("2" (expand "point_on_segment?" +)
                    (("2" (split -6)
                      (("1" (flatten)
                        (("1" (replace -1 +)
                          (("1" (replace -2 +)
                            (("1" (inst + "a/(a-b)")
                              (("1"
                                (ground)
                                (("1" (cross-mult 1) nil)
                                 ("2" (cross-mult 1) nil)
                                 ("3"
                                  (hide-all-but +)
                                  (("3"
                                    (rewrite* "scal_add_right")
                                    (("3"
                                      (rewrite* "scal_sub_left")
                                      (("3"
                                        (cancel-add 1)
                                        (("3"
                                          (factor 1 r)
                                          (("3"
                                            (claim
                                             "%1 = 0"
                                             nil
                                             (! 1 r 1))
                                            (("1"
                                              (replace -1)
                                              (("1" (assert) nil)))
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (field 1)
                                                nil)))))))))))))))))
                               ("2" (assert) nil)))))))))
                       ("2" (flatten)
                        (("2" (replace -1 +)
                          (("2" (replace -2 +)
                            (("2" (inst + "b/(b-a)")
                              (("1"
                                (ground)
                                (("1" (cross-mult 1) nil)
                                 ("2" (cross-mult 1) nil)
                                 ("3"
                                  (hide-all-but +)
                                  (("3"
                                    (rewrite* "scal_add_right")
                                    (("3"
                                      (rewrite* "scal_sub_left")
                                      (("3"
                                        (cancel-add 1)
                                        (("3"
                                          (factor 1 r)
                                          (("3"
                                            (claim
                                             "%1 = 0"
                                             nil
                                             (! 1 r 1))
                                            (("1"
                                              (replace -1)
                                              (("1" (assert) nil)))
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (field 1)
                                                nil)))))))))))))))))
                               ("2" (assert) nil)))))))))))))))
                 ("2" (inst - "b")
                  (("2" (assert)
                    (("2" (expand "parallel_intersections" 2)
                      (("2" (inst-cp 2 "e" "e`p1")
                        (("2" (inst 2 "e" "e`p2")
                          (("2" (assert)
                            (("2" (split -4)
                              (("1"
                                (flatten)
                                (("1"
                                  (replace -1 +)
                                  (("1"
                                    (replace -2 +)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "abs")
                                        (("1" (propax) nil)))))))))))
                               ("2"
                                (flatten)
                                (("2"
                                  (replace -1 +)
                                  (("2"
                                    (replace -2 +)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "abs")
                                        (("2"
                                          (propax)
                                          nil))))))))))))))))))))))))))))))))))))))
    nil)
   nil shostak))
 (empty_parallel_intersections_not_on 0
  (empty_parallel_intersections_not_on-1 nil 3874129021
   ("" (skeep + t)
    (("" (use "counted_direction_not_parallel")
      (("" (assert)
        (("" (inst?)
          (("" (assert)
            (("" (ground)
              (("1" (expand "parallel_intersections")
                (("1" (expand "empty?")
                  (("1" (inst-cp -1 "norm(e`p1-p)")
                    (("1" (inst -1 "norm(e`p2-p)")
                      (("1" (expand "member")
                        (("1" (inst 2 "e" "e`p1")
                          (("1" (inst 1 "e" "e`p2")
                            (("1" (assert)
                              (("1"
                                (use "end_points_are_on_segment")
                                (("1"
                                  (ground)
                                  (("1"
                                    (use "on_parallel_segment_on_ray")
                                    (("1"
                                      (assert)
                                      nil)))))))))))))))))))))))
               ("2" (use "on_parallel_segment_within_endpoints")
                (("2" (assert)
                  (("2" (skeep)
                    (("2" (invoke (typepred "%1") (! -4 r))
                      (("2" (claim "b >= %1" nil (! -6 r))
                        (("1" (case "a > 0")
                          (("1" (inst - "a")
                            (("1" (assert)
                              (("1"
                                (expand "parallel_intersections" 1)
                                (("1"
                                  (inst-cp 1 "e" "e`p1")
                                  (("1"
                                    (inst 1 "e" "e`p2")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -6)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (replace -1 +)
                                            (("1"
                                              (replace -2 +)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "abs")
                                                  (("1"
                                                    (propax)
                                                    nil)))))))))))
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (replace -1 +)
                                            (("2"
                                              (replace -2 +)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "abs")
                                                  (("2"
                                                    (propax)
                                                    nil)))))))))))))))))))))))))
                           ("2" (expand "point_on_segment?" +)
                            (("2" (split -6)
                              (("1"
                                (flatten)
                                (("1"
                                  (replace -1 +)
                                  (("1"
                                    (replace -2 +)
                                    (("1"
                                      (inst + "a/(a-b)")
                                      (("1"
                                        (ground)
                                        (("1" (cross-mult 1) nil)
                                         ("2" (cross-mult 1) nil)
                                         ("3"
                                          (hide-all-but +)
                                          (("3"
                                            (rewrite* "scal_add_right")
                                            (("3"
                                              (rewrite*
                                               "scal_sub_left")
                                              (("3"
                                                (cancel-add 1)
                                                (("3"
                                                  (factor 1 r)
                                                  (("3"
                                                    (claim
                                                     "%1 = 0"
                                                     nil
                                                     (! 1 r 1))
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (assert)
                                                        nil)))
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (field 1)
                                                        nil)))))))))))))))))
                                       ("2" (assert) nil)))))))))
                               ("2"
                                (flatten)
                                (("2"
                                  (replace -1 +)
                                  (("2"
                                    (replace -2 +)
                                    (("2"
                                      (inst + "b/(b-a)")
                                      (("1"
                                        (ground)
                                        (("1" (cross-mult 1) nil)
                                         ("2" (cross-mult 1) nil)
                                         ("3"
                                          (hide-all-but +)
                                          (("3"
                                            (rewrite* "scal_add_right")
                                            (("3"
                                              (rewrite*
                                               "scal_sub_left")
                                              (("3"
                                                (cancel-add 1)
                                                (("3"
                                                  (factor 1 r)
                                                  (("3"
                                                    (claim
                                                     "%1 = 0"
                                                     nil
                                                     (! 1 r 1))
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (assert)
                                                        nil)))
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (field 1)
                                                        nil)))))))))))))))))
                                       ("2" (assert) nil)))))))))))))))
                         ("2" (inst - "b")
                          (("2" (assert)
                            (("2" (expand "parallel_intersections" 2)
                              (("2"
                                (inst-cp 2 "e" "e`p1")
                                (("2"
                                  (inst 2 "e" "e`p2")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split -4)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (replace -1 +)
                                          (("1"
                                            (replace -2 +)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "abs")
                                                (("1"
                                                  (propax)
                                                  nil)))))))))))
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (replace -1 +)
                                          (("2"
                                            (replace -2 +)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "abs")
                                                (("2"
                                                  (propax)
                                                  nil))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil shostak))
 (empty_all_not_on_perimeter 0
  (empty_all_not_on_perimeter-1 nil 3874129021
   ("" (skeep*)
    (("" (rewrite "empty_ray_intersection_sets")
      (("" (flatten)
        (("" (expand "point_on_polygon_perimeter?")
          (("" (skeep)
            (("" (use "empty_key_arb_only_parallel")
              (("" (assert)
                (("" (inst?)
                  (("" (expand "only_parallel_edges?")
                    (("" (inst?)
                      (("" (assert)
                        ((""
                          (use "no_parallel_intersections_not_on_segment")
                          (("" (assert)
                            (("" (expand "parallel_intersections")
                              ((""
                                (expand "empty?" -4)
                                ((""
                                  (use
                                   "on_parallel_segment_within_endpoints")
                                  ((""
                                    (assert)
                                    ((""
                                      (skeep)
                                      ((""
                                        (ground)
                                        (("1"
                                          (inst - "b")
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (inst + "e" "p+b*v")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "abs")
                                                  (("1"
                                                    (propax)
                                                    nil)))))))))))
                                         ("2"
                                          (inst - "b")
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (inst + "e" "p+b*v")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "abs")
                                                  (("2"
                                                    (propax)
                                                    nil))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil shostak))
 (below_min_all_arb_not_on 0
  (below_min_all_arb_not_on-1 nil 3874129021
   ("" (skeep)
    (("" (expand "point_on_polygon_perimeter?")
      (("" (skeep)
        (("" (use "empty_ray_intersection_sets")
          (("" (assert)
            (("" (use "empty_parallel_intersections_not_on")
              (("" (assert)
                (("" (split 1)
                  (("1" (flatten)
                    (("1" (use "nonempty_min_parallel_intersections")
                      (("1" (assert) nil)))))
                   ("2" (claim "%1" nil (! 2 l))
                    (("1" (use "empty_key_arb_only_parallel")
                      (("1" (assert)
                        (("1" (inst?)
                          (("1" (expand "only_parallel_edges?")
                            (("1" (inst?) (("1" (assert) nil)))))))))))
                     ("2" (use "nonempty_min_key_arb_intersections")
                      (("2" (assert)
                        (("2" (use "below_min_key_arb_not_on")
                          (("2" (assert)
                            (("2" (expand "only_parallel_edges?")
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  nil))))))))))))))))))))))))))))))
    nil)
   nil shostak))
 (below_min_all_arb_not_on_neg 0
  (below_min_all_arb_not_on_neg-1 nil 3874129021
   ("" (skeep)
    (("" (expand "point_on_polygon_perimeter?")
      (("" (skeep)
        (("" (use "empty_ray_intersection_sets")
          (("" (assert)
            (("" (use "empty_parallel_intersections_not_on")
              (("" (auto-rewrite "scal_neg")
                (("" (assert)
                  (("" (split 1)
                    (("1" (flatten)
                      (("1" (use "nonempty_min_parallel_intersections")
                        (("1" (assert) nil)))))
                     ("2" (rewrite "crossing_direction_neg") nil)
                     ("3" (claim "%1" nil (! 2 l))
                      (("1" (use "empty_key_arb_only_parallel")
                        (("1" (assert)
                          (("1" (inst?)
                            (("1" (expand "only_parallel_edges?")
                              (("1"
                                (inst?)
                                (("1" (assert) nil)))))))))))
                       ("2" (use "nonempty_min_key_arb_intersections")
                        (("2" (assert)
                          (("2" (use "below_min_key_arb_not_on")
                            (("2" (assert)
                              (("2"
                                (expand "only_parallel_edges?")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (assert)
                                    nil))))))))))))))))))))))))))))))))
    nil)
   nil shostak)))

