(perp_crossings
 (endpoint_diff_nonzero_1 0
  (endpoint_diff_nonzero_1-2 nil 3874129020
   ("" (skeep) (("" (typepred "s`p2") (("" (assert) nil nil)) nil))
    nil)
   nil shostak
   (endpoint_diff_nonzero_1 subtype
    "(vectors_2D.-)(perp_crossings.s`p2, perp_crossings.s`p1)"
    "Nz_vector"))
  (endpoint_diff_nonzero_1-1 nil 3874127258
   ("" (judgement-tcc) nil nil) nil nil
   (endpoint_diff_nonzero_1 subtype
    "(vectors_2D.-)(perp_crossings.s`p2, perp_crossings.s`p1)"
    "Nz_vector")))
 (endpoint_diff_nonzero_2 0
  (endpoint_diff_nonzero_2-2 nil 3874129020
   ("" (skeep) (("" (typepred "s`p2") (("" (assert) nil nil)) nil))
    nil)
   nil shostak
   (endpoint_diff_nonzero_2 subtype
    "(vectors_2D.-)(perp_crossings.s`p1, perp_crossings.s`p2)"
    "Nz_vector"))
  (endpoint_diff_nonzero_2-1 nil 3874127258
   ("" (judgement-tcc) nil nil) nil nil
   (endpoint_diff_nonzero_2 subtype
    "(vectors_2D.-)(perp_crossings.s`p1, perp_crossings.s`p2)"
    "Nz_vector")))
 (line_crossing_TCC1 0
  (line_crossing_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (line_crossing subtype "perp_crossings.denom" "nznum"))
  (line_crossing_TCC1-1 nil 3874127258 ("" (subtype-tcc) nil nil) nil
   nil (line_crossing subtype "perp_crossings.denom" "nznum")))
 (line_crossing_alt_TCC1 0
  (line_crossing_alt_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (line_crossing_alt subtype "perp_crossings.denom" "nznum"))
  (line_crossing_alt_TCC1-1 nil 3874127258 ("" (subtype-tcc) nil nil)
   nil nil (line_crossing_alt subtype "perp_crossings.denom" "nznum")))
 (line_crossing_eq_line_crossing_alt 0
  (line_crossing_eq_line_crossing_alt-1 nil 3874129020
   ("" (skeep) (("" (grind) nil nil)) nil) nil shostak))
 (line_crossing_alt2_TCC1 0
  (line_crossing_alt2_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (line_crossing_alt2 subtype "perp_crossings.denom" "nznum"))
  (line_crossing_alt2_TCC1-1 nil 3874127258 ("" (subtype-tcc) nil nil)
   nil nil
   (line_crossing_alt2 subtype "perp_crossings.denom" "nznum")))
 (line_crossing_alt_eq_line_crossing_alt2 0
  (line_crossing_alt_eq_line_crossing_alt2-1 nil 3874129020
   ("" (skeep)
    (("" (expand "line_crossing_alt")
      (("" (expand "line_crossing_alt2")
        (("" (apply (repeat (lift-if)))
          (("" (rewrite "cross_diff_both")
            (("" (assert)
              (("" (ground)
                (("" (apply-extensionality 2 :hide? t)
                  ((""
                    (name-replace "denom"
                     "cross(s`p2 - s`p1, e`p2 - e`p1)")
                    (("" (mult-by 1 "denom")
                      (("" (distrib 1)
                        (("" (real-props)
                          (("" (rewrite "cross_distrib_sub_1")
                            (("" (distrib 1)
                              ((""
                                (rewrite "cross_distrib_sub_2")
                                ((""
                                  (distrib 1)
                                  ((""
                                    (rewrite "cross_self_zero")
                                    ((""
                                      (assert)
                                      ((""
                                        (rewrite "cross_distrib_sub_2")
                                        ((""
                                          (distrib 1)
                                          ((""
                                            (cancel-add 1)
                                            ((""
                                              (expand "denom")
                                              (("" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (no_line_crossing_eqv_parallel_or_collinear 0
  (no_line_crossing_eqv_parallel_or_collinear-1 nil 3874129020
   ("" (skeep)
    (("" (rewrite "parallel_defs_almost_same" :dir rl)
      (("" (rewrite "line_crossing_eq_line_crossing_alt")
        (("" (expand "line_crossing_alt")
          (("" (lift-if)
            (("" (ground)
              (("1" (rewrite "cross_diff_both")
                (("1" (rewrite "parallel_equiv_cross_eq_0") nil nil))
                nil)
               ("2" (hide 1)
                (("2" (rewrite "cross_diff_both")
                  (("2" (rewrite "parallel_equiv_cross_eq_0") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (line_crossing_commutative 0
  (line_crossing_commutative-1 nil 3874129020
   ("" (skeep 1 t)
    (("" (expand "line_crossing")
      (("" (apply (repeat (lift-if)))
        (("" (split)
          (("1" (flatten) (("1" (assert) nil nil)) nil)
           ("2" (flatten)
            (("2" (assert)
              (("2"
                (case-replace "(-1 * (e`p1`x * e`p2`y * s`p1`x) -
                              e`p1`x * s`p1`y * s`p2`x
                              - e`p1`y * e`p2`x * s`p2`x
                              - e`p2`x * s`p1`x * s`p2`y
                              + e`p1`x * e`p2`y * s`p2`x
                              + e`p1`x * s`p1`x * s`p2`y
                              + e`p1`y * e`p2`x * s`p1`x
                              + e`p2`x * s`p1`y * s`p2`x)
                             /
                             (e`p1`x * s`p2`y + e`p1`y * s`p1`x + e`p2`x * s`p1`y +
                               e`p2`y * s`p2`x
                               - e`p1`x * s`p1`y
                               - e`p1`y * s`p2`x
                               - e`p2`x * s`p2`y
                               - e`p2`y * s`p1`x) = (-1 * (e`p1`x * e`p2`y * s`p2`x) -
                               e`p1`x * s`p1`x * s`p2`y
                               - e`p1`y * e`p2`x * s`p1`x
                               - e`p2`x * s`p1`y * s`p2`x
                               + e`p1`x * e`p2`y * s`p1`x
                               + e`p1`x * s`p1`y * s`p2`x
                               + e`p1`y * e`p2`x * s`p2`x
                               + e`p2`x * s`p1`x * s`p2`y)
                              /
                              (e`p1`x * s`p1`y + e`p1`y * s`p2`x + e`p2`x * s`p2`y +
                                e`p2`y * s`p1`x
                                - e`p1`x * s`p2`y
                                - e`p1`y * s`p1`x
                                - e`p2`x * s`p1`y
                                - e`p2`y * s`p2`x)" :hide? T)
                (("1"
                  (case-replace "(-1 * (e`p1`x * e`p2`y * s`p1`y) -
                                 e`p1`y * e`p2`x * s`p2`y
                                 - e`p1`y * s`p1`y * s`p2`x
                                 - e`p2`y * s`p1`x * s`p2`y
                                 + e`p1`x * e`p2`y * s`p2`y
                                 + e`p1`y * e`p2`x * s`p1`y
                                 + e`p1`y * s`p1`x * s`p2`y
                                 + e`p2`y * s`p1`y * s`p2`x)
                                /
                                (e`p1`x * s`p2`y + e`p1`y * s`p1`x + e`p2`x * s`p1`y +
                                  e`p2`y * s`p2`x
                                  - e`p1`x * s`p1`y
                                  - e`p1`y * s`p2`x
                                  - e`p2`x * s`p2`y
                                  - e`p2`y * s`p1`x) =
            (-1 * (e`p1`x * e`p2`y * s`p2`y) -
                                  e`p1`y * e`p2`x * s`p1`y
                                  - e`p1`y * s`p1`x * s`p2`y
                                  - e`p2`y * s`p1`y * s`p2`x
                                  + e`p1`x * e`p2`y * s`p1`y
                                  + e`p1`y * e`p2`x * s`p2`y
                                  + e`p1`y * s`p1`y * s`p2`x
                                  + e`p2`y * s`p1`x * s`p2`y)
                                 /
                                 (e`p1`x * s`p1`y + e`p1`y * s`p2`x + e`p2`x * s`p2`y +
                                   e`p2`y * s`p1`x
                                   - e`p1`x * s`p2`y
                                   - e`p1`y * s`p1`x
                                   - e`p2`x * s`p1`y
                                   - e`p2`y * s`p2`x)" :hide? T)
                  (("1" (field) nil nil)) nil)
                 ("2" (field) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (line_crossing_reverse 0
  (line_crossing_reverse-1 nil 3874129020
   ("" (skeep)
    (("" (rewrite* "line_crossing_eq_line_crossing_alt")
      (("" (expand "line_crossing_alt")
        (("" (expand "reverse_segment")
          (("" (apply (repeat (lift-if)))
            (("" (ground)
              (("1" (hide 2) (("1" (grind) nil nil)) nil)
               ("2" (hide 1) (("2" (grind) nil nil)) nil)
               ("3"
                (equate
                 "(cross(s`p1, s`p2) / cross(s`p1 - s`p2, e`p2 - e`p1)) *
             (e`p2 - e`p1)"
                 "(cross(s`p1, s`p2) / cross(s`p1 - s`p2, e`p1 - e`p2)) *
             (e`p1 - e`p2)")
                (("1"
                  (equate
                   "(cross(e`p2, e`p1) / cross(s`p1 - s`p2, e`p2 - e`p1))"
                   "(cross(e`p1, e`p2) / cross(s`p1 - s`p2, e`p1 - e`p2))")
                  (("1" (hide-all-but 1)
                    (("1"
                      (equate "cross(s`p1 - s`p2, e`p2 - e`p1)"
                       "-cross(s`p1 - s`p2, e`p1 - e`p2)")
                      (("1" (rewrite "cross_antisymmetric")
                        (("1" (real-props) nil nil)) nil)
                       ("2" (hide 2) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2"
                    (equate "cross(s`p1 - s`p2, e`p2 - e`p1)"
                     "-cross(s`p1 - s`p2, e`p1 - e`p2)")
                    (("1" (equate "(e`p2 - e`p1)" "-(e`p1 - e`p2)")
                      (("1" (real-props)
                        (("1"
                          (equate
                           "(cross(s`p1, s`p2) / -cross(s`p1 - s`p2, e`p1 - e`p2)) *
        -(e`p1 - e`p2)"
                           "-(cross(s`p1, s`p2) / -cross(s`p1 - s`p2, e`p1 - e`p2)) *
        (e`p1 - e`p2)")
                          (("1"
                            (equate
                             "-(cross(s`p1, s`p2) / -cross(s`p1 - s`p2, e`p1 - e`p2))"
                             "(cross(s`p1, s`p2) / cross(s`p1 - s`p2, e`p1 - e`p2))")
                            (("1" (hide 2) (("1" (real-props) nil nil))
                              nil))
                            nil)
                           ("2" (hide 2) (("2" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (hide 2) (("2" (grind) nil nil)) nil))
                      nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (line_crossing_on_line_TCC1 0
  (line_crossing_on_line_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (line_crossing_on_line subtype "perp_crossings.line_xing"
    "(Maybe[point_2d].some?)"))
  (line_crossing_on_line_TCC1-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (line_crossing_on_line subtype "perp_crossings.line_xing"
    "(Maybe[point_2d].some?)")))
 (line_crossing_on_line 0
  (line_crossing_on_line-1 nil 3874129020
   ("" (skeep)
    (("" (skoletin)
      (("" (flatten)
        (("" (rewrite "line_crossing_eq_line_crossing_alt")
          (("" (replace -1 :hide? t)
            (("" (expand "line_crossing_alt")
              (("" (lift-if)
                (("" (assert)
                  (("" (ground)
                    ((""
                      (name-replace "denom"
                       "cross(s`p1 - s`p2, e`p1 - e`p2)")
                      ((""
                        (inst +
                         "(cross(e`p1, e`p2) + cross(s`p1, e`p1 - e`p2)) / denom")
                        (("1" (apply-extensionality 2 :hide? t)
                          (("1" (expand "+")
                            (("1" (expand "-")
                              (("1"
                                (expand "*")
                                (("1"
                                  (real-props)
                                  (("1"
                                    (expand "denom")
                                    (("1"
                                      (real-props)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand* "+" "-" "*")
                            (("2" (real-props)
                              (("2"
                                (real-props)
                                (("2"
                                  (expand "denom")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (collinear_imp_not_extending_crosses 0
  (collinear_imp_not_extending_crosses-1 nil 3874129020
   ("" (skeep) (("" (grind) nil nil)) nil) nil shostak))
 (intersection_point_for_each_line_TCC1 0
  (intersection_point_for_each_line_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (intersection_point_for_each_line subtype "perp_crossings.denom"
    "nznum"))
  (intersection_point_for_each_line_TCC1-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (intersection_point_for_each_line subtype "perp_crossings.denom"
    "nznum")))
 (intersection_point_for_each_line 0
  (intersection_point_for_each_line-1 nil 3874129020
   ("" (skeep)
    (("" (skoletin*)
      (("" (replace -1)
        (("" (replace -2)
          (("" (hide -1 -2)
            (("" (apply-extensionality 1 :hide? t)
              (("1" (expand "*")
                (("1" (expand "+")
                  (("1" (field 1)
                    (("1" (replace -1)
                      (("1" (expand "cross") (("1" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "*")
                (("2" (expand "+")
                  (("2" (field 1) (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (line_crossing_is_unique_TCC1 0
  (line_crossing_is_unique_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (use "no_line_crossing_eqv_parallel_or_collinear")
      (("" (assert) nil nil)) nil))
    nil)
   nil shostak
   (line_crossing_is_unique subtype
    "perp_crossings.line_crossing(perp_crossings.s, perp_crossings.e)"
    "(Maybe[point_2d].some?)"))
  (line_crossing_is_unique_TCC1-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (line_crossing_is_unique subtype
    "perp_crossings.line_crossing(perp_crossings.s, perp_crossings.e)"
    "(Maybe[point_2d].some?)")))
 (line_crossing_is_unique 0
  (line_crossing_is_unique-1 nil 3874129020
   ("" (skeep*)
    (("" (rewrite "line_crossing_eq_line_crossing_alt")
      (("" (rewrite "line_crossing_alt_eq_line_crossing_alt2")
        (("" (expand "line_crossing_alt2")
          (("" (use "no_line_crossing_eqv_parallel_or_collinear")
            (("" (assert)
              (("" (rewrite "line_crossing_eq_line_crossing_alt")
                (("" (expand "line_crossing_alt")
                  (("" (lift-if)
                    (("" (ground)
                      (("1" (rewrite "cross_diff_both") nil nil)
                       ("2" (hide 4)
                        (("2" (name-replace "DELTA" "e`p1 - s`p1")
                          (("2"
                            (name-replace "denom"
                             "cross(s`p2 - s`p1, e`p2 - e`p1)")
                            (("2" (replace -1)
                              (("2"
                                (case
                                 "k = cross(DELTA, e`p2 - e`p1) / denom")
                                (("1"
                                  (case
                                   "k!1 = cross(DELTA, s`p2 - s`p1) / denom")
                                  (("1"
                                    (replace -2)
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (hide 3)
                                    (("2"
                                      (use
                                       "intersection_point_for_each_line")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "denom")
                                          (("2"
                                            (expand "DELTA")
                                            (("2"
                                              (replace -2 * rl)
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (lemma
                                                     "scal_cancel")
                                                    (("2"
                                                      (hide -2 -3)
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "e`p2 - e`p1")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 3)
                                  (("2"
                                    (cross-mult 1)
                                    (("2"
                                      (expand "DELTA")
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (expand "denom")
                                          (("2"
                                            (hide-all-but (-1 1))
                                            (("2"
                                              (expand "cross")
                                              (("2"
                                                (expand "-")
                                                (("2"
                                                  (case
                                                   "s`p1`x + k * (s`p2 - s`p1)`x = e`p1`x + k!1 * (e`p2 - e`p1)`x")
                                                  (("1"
                                                    (case
                                                     "s`p1`y + k * (s`p2 - s`p1)`y = e`p1`y + k!1 * (e`p2 - e`p1)`y")
                                                    (("1"
                                                      (mult-by
                                                       -1
                                                       "(e`p2 - e`p1)`x")
                                                      (("1"
                                                        (mult-by
                                                         -2
                                                         "(e`p2 - e`p1)`y")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (lemma
                                                             "comp_eq_y")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "+ ")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (lemma
                                                       "comp_eq_x")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (expand "*")
                                                          (("2"
                                                            (expand
                                                             "+ ")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (segment_crossing_is_unique_TCC1 0
  (segment_crossing_is_unique_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (use "no_line_crossing_eqv_parallel_or_collinear")
      (("" (assert) nil nil)) nil))
    nil)
   nil shostak
   (segment_crossing_is_unique subtype
    "perp_crossings.line_crossing(perp_crossings.s, perp_crossings.e)"
    "(Maybe[point_2d].some?)"))
  (segment_crossing_is_unique_TCC1-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (segment_crossing_is_unique subtype
    "perp_crossings.line_crossing(perp_crossings.s, perp_crossings.e)"
    "(Maybe[point_2d].some?)")))
 (segment_crossing_is_unique 0
  (segment_crossing_is_unique-1 nil 3874129020
   ("" (skeep)
    (("" (use "line_crossing_is_unique")
      (("" (ground)
        (("1" (rewrite "point_on_segment_has_offset")
          (("1" (skeep) (("1" (inst?) nil nil)) nil)) nil)
         ("2" (rewrite "point_on_segment_has_offset" -2)
          (("2" (skeep) (("2" (inst?) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (collinear_segments_same_line_crossing 0
  (collinear_segments_same_line_crossing-1 nil 3874129020
   ("" (skeep)
    (("" (rewrite "collinear_as_parallel_with_p1_on_line" -)
      (("" (flatten)
        (("" (skeep)
          (("" (rewrite* "line_crossing_eq_line_crossing_alt")
            (("" (rewrite* "line_crossing_alt_eq_line_crossing_alt2")
              (("" (rewrite "parallel_symm")
                (("" (expand "parallel?")
                  (("" (skeep)
                    (("" (expand "line_crossing_alt2")
                      (("" (replace -1)
                        (("" (replace -2 +)
                          (("" (rewrite* "cross_scales_2")
                            (("" (apply (repeat (lift-if)))
                              ((""
                                (assert)
                                ((""
                                  (ground)
                                  ((""
                                    (equate
                                     "nzk * cross(e`p1 + k * (e`p2 - e`p1) - s`p1, e`p2 - e`p1) /
              (nzk * cross(s`p2 - s`p1, e`p2 - e`p1))"
                                     "cross(e`p1 - s`p1, e`p2 - e`p1) /
              cross(s`p2 - s`p1, e`p2 - e`p1)")
                                    ((""
                                      (hide-all-but 1)
                                      ((""
                                        (equate
                                         "e`p1 + k * (e`p2 - e`p1) - s`p1"
                                         "(e`p1 - s`p1) + k * (e`p2 - e`p1)")
                                        (("1"
                                          (rewrite
                                           "cross_distrib_add_1")
                                          (("1"
                                            (rewrite "cross_scales_1")
                                            (("1"
                                              (rewrite
                                               "cross_self_zero")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (parallel_or_extending_crosses 0
  (parallel_or_extending_crosses-1 nil 3874129020
   ("" (skeep 1 t)
    (("" (use "no_line_crossing_eqv_parallel_or_collinear")
      (("" (assert)
        (("" (expand "are_segments_intersecting_alt?")
          (("" (skeep - t)
            (("" (rewrite* "is_point_on_seg_equiv")
              (("" (expand "extending_s_crosses_e")
                (("" (use "line_crossing_commutative")
                  (("" (assert)
                    (("" (use "segment_crossing_is_unique")
                      (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (are_segments_intersecting?_defs_same 0
  (are_segments_intersecting?_defs_same-1 nil 3874129020
   ("" (skeep)
    (("" (iff)
      (("" (expand "are_segments_intersecting?")
        (("" (expand "are_segments_intersecting_alt?")
          (("" (name-replace* ("s" "s1" "e" "s2"))
            ((""
              (case "forall (p, q: point_2d): vector_from_point_to_point(p, q) = q - p")
              (("1" (ground)
                (("1" (expand "segment_intersect_kernel")
                  (("1" (rewrite -2)
                    (("1" (rewrite -2)
                      (("1" (apply (repeat (lift-if)))
                        (("1" (assert)
                          (("1" (split -1)
                            (("1" (propax) nil nil)
                             ("2" (flatten)
                              (("2"
                                (split -1)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split -1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (inst
                                         +
                                         "val(line_crossing_alt2(e, s))")
                                        (("1"
                                          (rewrite
                                           "is_point_on_seg_equiv")
                                          (("1"
                                            (expand
                                             "line_crossing_alt2")
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (split 3)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (rewrite
                                                     "cross_antisymmetric")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (equate
                                                     "cross(s`p1 - e`p1, s`p2 - s`p1) /
                                                                                   cross(e`p2 - e`p1, s`p2 - s`p1)"
                                                     "cross(e`p1 - s`p1, s`p2 - s`p1) /
                                                                                   cross(s`p2 - s`p1, e`p2 - e`p1)")
                                                    (("1"
                                                      (rewrite
                                                       "point_on_segment_has_offset")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (rewrite
                                                         "cross_diff_1")
                                                        (("2"
                                                          (equate
                                                           "cross(e`p2 - e`p1, s`p2 - s`p1)"
                                                           "-cross(s`p2 - s`p1, e`p2 - e`p1)")
                                                          (("1"
                                                            (real-props)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "cross_antisymmetric")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -7)
                                          (("2"
                                            (rewrite
                                             "is_point_on_seg_equiv")
                                            (("2"
                                              (equate
                                               "line_crossing_alt2(e, s)"
                                               "line_crossing_alt2(s, e)")
                                              (("1"
                                                (expand
                                                 "line_crossing_alt2")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (rewrite
                                                     "point_on_segment_has_offset")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split 1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (rewrite*
                                                   "line_crossing_alt_eq_line_crossing_alt2"
                                                   :dir
                                                   rl)
                                                  (("2"
                                                    (rewrite*
                                                     "line_crossing_eq_line_crossing_alt"
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (rewrite
                                                       "line_crossing_commutative")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (expand "line_crossing_alt2")
                                          (("3"
                                            (rewrite
                                             "cross_antisymmetric"
                                             2)
                                            (("3"
                                              (lift-if)
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (split 1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "segment_intersect_kernel")
                  (("2" (rewrite -2)
                    (("2" (rewrite -2)
                      (("2" (apply (repeat (lift-if)))
                        (("2" (assert)
                          (("2" (split -1)
                            (("1" (flatten)
                              (("1"
                                (split -3)
                                (("1"
                                  (ground)
                                  (("1"
                                    (inst + "e`p1")
                                    (("1"
                                      (rewrite "is_point_on_seg_equiv")
                                      nil
                                      nil)
                                     ("2"
                                      (rewrite "is_point_on_seg_equiv")
                                      (("2"
                                        (replace -7)
                                        (("2"
                                          (rewrite
                                           "point_on_segment_has_offset")
                                          (("2"
                                            (inst
                                             +
                                             "((e`p1 - s`p1) * (s`p2 - s`p1)) / sqv(s`p2 - s`p1)")
                                            (("1"
                                              (ground)
                                              (("1"
                                                (rewrite*
                                                 "parallel_equiv_cross_eq_0"
                                                 :dir
                                                 rl)
                                                (("1"
                                                  (expand "parallel?")
                                                  (("1"
                                                    (skeep*)
                                                    (("1"
                                                      (replace -4)
                                                      (("1"
                                                        (move-terms
                                                         1
                                                         r
                                                         1)
                                                        (("1"
                                                          (replace -4)
                                                          (("1"
                                                            (name-replace
                                                             "ss"
                                                             "s`p2 - s`p1")
                                                            (("1"
                                                              (hide-all-but
                                                               1)
                                                              (("1"
                                                                (cross-mult
                                                                 1)
                                                                (("1"
                                                                  (rewrite
                                                                   "sqv_rew")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (cross-mult 1)
                                                (("2"
                                                  (rewrite "sqv_rew")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (cross-mult 1)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst + "e`p2")
                                    (("1"
                                      (rewrite "is_point_on_seg_equiv")
                                      nil
                                      nil)
                                     ("2"
                                      (rewrite "is_point_on_seg_equiv")
                                      (("2"
                                        (rewrite
                                         "point_on_segment_has_offset")
                                        (("2"
                                          (inst
                                           +
                                           "((e`p2 - s`p1) * (s`p2 - s`p1)) / sqv(s`p2 - s`p1)")
                                          (("1"
                                            (ground)
                                            (("1"
                                              (move-terms 1 r 1)
                                              (("1"
                                                (replace -7)
                                                (("1"
                                                  (case
                                                   "cross((e`p2 - s`p1), s`p2 - s`p1) = 0")
                                                  (("1"
                                                    (rewrite
                                                     "parallel_equiv_cross_eq_0"
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (expand
                                                       "parallel?")
                                                      (("1"
                                                        (skeep*)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (name-replace
                                                             "ss"
                                                             "s`p2 - s`p1")
                                                            (("1"
                                                              (hide-all-but
                                                               1)
                                                              (("1"
                                                                (cross-mult
                                                                 1)
                                                                (("1"
                                                                  (rewrite
                                                                   "sqv_rew")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-3 -4 1))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (cross-mult 1)
                                              (("2"
                                                (rewrite "sqv_rew")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (cross-mult 1)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (inst + "s`p1")
                                    (("1"
                                      (rewrite "is_point_on_seg_equiv")
                                      (("1"
                                        (rewrite
                                         "point_on_segment_has_offset")
                                        (("1"
                                          (equate
                                           "e`p2 - s`p1"
                                           "(e`p1 - s`p1) + (e`p2 - e`p1)")
                                          (("1"
                                            (case
                                             "e`p1 - s`p1 = -(s`p1 - e`p1)")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (rewrite
                                                 "dot_add_left")
                                                (("1"
                                                  (rewrite*
                                                   "parallel_equiv_cross_eq_0"
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (expand
                                                     "parallel?")
                                                    (("1"
                                                      (skeep*)
                                                      (("1"
                                                        (replace -4)
                                                        (("1"
                                                          (replace -5)
                                                          (("1"
                                                            (cancel-by
                                                             -3
                                                             "(e`p2 - e`p1) * (e`p2 - e`p1)")
                                                            (("1"
                                                              (inst
                                                               +
                                                               "-nzk * nzk!1")
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-6
                                                                    1))
                                                                  (("1"
                                                                    (grind-with-ext)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (rewrite
                                                                   "sqv_rew")
                                                                  (("2"
                                                                    (cancel-by
                                                                     -3
                                                                     "sqv(e`p2 - e`p1)")
                                                                    (("2"
                                                                      (cancel-by
                                                                       -4
                                                                       "nzk * nzk")
                                                                      (("2"
                                                                        (case
                                                                         "nzk < 0")
                                                                        (("1"
                                                                          (mult-cases
                                                                           3)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (cancel-by
                                                                           -6
                                                                           "nzk")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (cancel-by
                                                                 -3
                                                                 "(nzk * (e`p2 - e`p1)) * (nzk * (e`p2 - e`p1))")
                                                                (("2"
                                                                  (mult-cases
                                                                   2)
                                                                  (("2"
                                                                    (cancel-by
                                                                     -5
                                                                     "nzk")
                                                                    (("2"
                                                                      (case
                                                                       "nzk * nzk!1 >= 0")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (real-props)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "sqv_rew")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace
                                                     -1
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (equate
                                                       "e`p1"
                                                       "s`p1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite "is_point_on_seg_equiv")
                                      (("2"
                                        (replace -7)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (inst + "s`p1")
                                    (("1"
                                      (rewrite "is_point_on_seg_equiv")
                                      (("1"
                                        (rewrite
                                         "point_on_segment_has_offset")
                                        (("1"
                                          (equate
                                           "e`p2 - s`p1"
                                           "(e`p1 - s`p1) + (e`p2 - e`p1)")
                                          (("1"
                                            (case
                                             "e`p1 - s`p1 = -(s`p1 - e`p1)")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (rewrite
                                                 "dot_add_left")
                                                (("1"
                                                  (rewrite*
                                                   "parallel_equiv_cross_eq_0"
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (expand
                                                     "parallel?")
                                                    (("1"
                                                      (skeep*)
                                                      (("1"
                                                        (replace -4)
                                                        (("1"
                                                          (replace -5)
                                                          (("1"
                                                            (cancel-by
                                                             -3
                                                             "(nzk * (e`p2 - e`p1)) * (nzk * (e`p2 - e`p1))")
                                                            (("1"
                                                              (inst
                                                               +
                                                               "-nzk * nzk!1")
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-6
                                                                    1))
                                                                  (("1"
                                                                    (grind-with-ext)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (rewrite
                                                                   "sqv_rew")
                                                                  (("2"
                                                                    (cancel-by
                                                                     -3
                                                                     "sqv(e`p2 - e`p1)")
                                                                    (("2"
                                                                      (cancel-by
                                                                       -4
                                                                       "nzk")
                                                                      (("2"
                                                                        (mult-cases
                                                                         3)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (mult-cases
                                                                 1)
                                                                (("2"
                                                                  (cancel-by
                                                                   -3
                                                                   "nzk * ((e`p2 - e`p1) * (e`p2 - e`p1))")
                                                                  (("2"
                                                                    (case
                                                                     "nzk * nzk!1 > 0")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (mult-cases
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (rewrite
                                                                 "dot_scal_left")
                                                                (("2"
                                                                  (rewrite
                                                                   "sqv_rew")
                                                                  (("2"
                                                                    (real-props)
                                                                    (("2"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (equate
                                                     "s`p1"
                                                     "e`p1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (rewrite
                                                         "sqv_rew")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (hide-all-but
                                                         (-1 1))
                                                        (("2"
                                                          (case
                                                           "s`p1 - e`p1 = zero")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (grind-with-ext)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "neg_distr_sub")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -7)
                                      (("2"
                                        (rewrite
                                         "is_point_on_seg_equiv")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skeep - t)
                  (("3" (rewrite* "is_point_on_seg_equiv")
                    (("3" (replace -5)
                      (("3" (expand "segment_intersect_kernel")
                        (("3" (rewrite -3)
                          (("3" (rewrite -3)
                            (("3" (apply (repeat (lift-if)))
                              (("3"
                                (assert)
                                (("3"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split 1)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (rewrite*
                                             "point_on_segment_has_offset")
                                            (("2"
                                              (skeep*)
                                              (("2"
                                                (rewrite
                                                 "parallel_equiv_cross_eq_0"
                                                 :dir
                                                 rl)
                                                (("2"
                                                  (expand "parallel?")
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (replace -5 -3)
                                                      (("2"
                                                        (move-terms
                                                         -3
                                                         r
                                                         1)
                                                        (("2"
                                                          (move-terms
                                                           -3
                                                           l
                                                           2)
                                                          (("2"
                                                            (case
                                                             "e`p2 - s`p1 = (e`p1 - s`p1) + (e`p2 - e`p1)")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (replace
                                                                 -2)
                                                                (("1"
                                                                  (replace
                                                                   -4)
                                                                  (("1"
                                                                    (name-replace
                                                                     "ee"
                                                                     "e`p2 - e`p1")
                                                                    (("1"
                                                                      (hide-all-but
                                                                       (-5
                                                                        -7
                                                                        +))
                                                                      (("1"
                                                                        (equate
                                                                         "nzk * ee * (nzk * ee)"
                                                                         "nzk * nzk * sqv(ee)")
                                                                        (("1"
                                                                          (equate
                                                                           "(d * (nzk * ee) - d!1 * ee) * (nzk * ee)"
                                                                           "(d * nzk - d!1) * nzk * sqv(ee)")
                                                                          (("1"
                                                                            (equate
                                                                             "(d * (nzk * ee) - d!1 * ee + ee) * (nzk * ee)"
                                                                             "(d * nzk - d!1 + 1) * nzk * sqv(ee)")
                                                                            (("1"
                                                                              (case
                                                                               "d * nzk >= d!1")
                                                                              (("1"
                                                                                (case
                                                                                 "nzk > 0")
                                                                                (("1"
                                                                                  (split
                                                                                   1)
                                                                                  (("1"
                                                                                    (hide
                                                                                     2
                                                                                     3
                                                                                     4)
                                                                                    (("1"
                                                                                      (mult-cases
                                                                                       1)
                                                                                      (("1"
                                                                                        (factor
                                                                                         1
                                                                                         r)
                                                                                        (("1"
                                                                                          (mult-cases
                                                                                           1)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2
                                                                                     3
                                                                                     4)
                                                                                    (("2"
                                                                                      (cancel-by
                                                                                       1
                                                                                       "nzk * sqv(ee)")
                                                                                      (("2"
                                                                                        (move-terms
                                                                                         2
                                                                                         l)
                                                                                        (("2"
                                                                                          (factor
                                                                                           2
                                                                                           r
                                                                                           (1
                                                                                            2))
                                                                                          (("2"
                                                                                            (case
                                                                                             "nzk * (1 - d) >= 0")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (mult-cases
                                                                                               1)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (split
                                                                                   2)
                                                                                  (("1"
                                                                                    (split
                                                                                     4)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (case
                                                                                       "d * nzk <= 0")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (mult-cases
                                                                                         1)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (cancel-by
                                                                                     1
                                                                                     "nzk * sqv(ee)")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (split
                                                                                 2)
                                                                                (("1"
                                                                                  (cancel-by
                                                                                   1
                                                                                   "nzk * sqv(ee)")
                                                                                  (("1"
                                                                                    (split
                                                                                     5)
                                                                                    (("1"
                                                                                      (cancel-by
                                                                                       1
                                                                                       "nzk * sqv(ee)")
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (split
                                                                                       5)
                                                                                      (("1"
                                                                                        (cancel-by
                                                                                         1
                                                                                         "nzk * sqv(ee)")
                                                                                        (("1"
                                                                                          (cancel-by
                                                                                           3
                                                                                           "nzk * sqv(ee)")
                                                                                          (("1"
                                                                                            (case
                                                                                             "nzk > 0")
                                                                                            (("1"
                                                                                              (case
                                                                                               "d * nzk >= 0")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (mult-cases
                                                                                                 1)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (case
                                                                                               "d * nzk <= 0")
                                                                                              (("1"
                                                                                                (move-terms
                                                                                                 2
                                                                                                 r
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "nzk - d * nzk <= 0")
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "nzk - d * nzk = 0")
                                                                                                    (("1"
                                                                                                      (mult-cases
                                                                                                       -4)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (factor
                                                                                                     1
                                                                                                     l)
                                                                                                    (("2"
                                                                                                      (mult-cases
                                                                                                       1)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (mult-cases
                                                                                                 1)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (cancel-by
                                                                                   1
                                                                                   "nzk * sqv(ee)")
                                                                                  (("1"
                                                                                    (move-terms
                                                                                     2
                                                                                     l)
                                                                                    (("1"
                                                                                      (case
                                                                                       "nzk - d * nzk >= 0")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (factor
                                                                                         1
                                                                                         l)
                                                                                        (("2"
                                                                                          (case
                                                                                           "nzk < 0")
                                                                                          (("1"
                                                                                            (mult-cases
                                                                                             -2)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (mult-cases
                                                                                             2)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "nzk > 0")
                                                                                    (("1"
                                                                                      (mult-cases
                                                                                       1)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (split
                                                                                       8)
                                                                                      (("1"
                                                                                        (cancel-by
                                                                                         1
                                                                                         "nzk * sqv(ee)")
                                                                                        (("1"
                                                                                          (split
                                                                                           9)
                                                                                          (("1"
                                                                                            (cancel-by
                                                                                             1
                                                                                             "nzk * sqv(ee)")
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (cancel-by
                                                                                             1
                                                                                             "nzk * sqv(ee)")
                                                                                            (("2"
                                                                                              (move-terms
                                                                                               3
                                                                                               r
                                                                                               1)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "nzk - d * nzk <= 0")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (factor
                                                                                                   1
                                                                                                   l)
                                                                                                  (("2"
                                                                                                    (mult-cases
                                                                                                     1)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (cancel-by
                                                                                         1
                                                                                         "nzk * sqv(ee)")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (split 2)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split 2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (rewrite*
                                               "point_on_segment_has_offset")
                                              (("1"
                                                (skeep*)
                                                (("1"
                                                  (rewrite
                                                   "parallel_equiv_cross_eq_0"
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (expand
                                                     "parallel?")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (case
                                                           "s`p1 = p1 - d * nzk * (e`p2 - e`p1)")
                                                          (("1"
                                                            (replace
                                                             -5
                                                             -1)
                                                            (("1"
                                                              (factor
                                                               -1
                                                               r
                                                               (2 3))
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (equate
                                                                     "e`p1 - ((d!1 - d * nzk) * (e`p2 - e`p1) + e`p1)"
                                                                     "-(d!1 - d * nzk) * (e`p2 - e`p1)")
                                                                    (("1"
                                                                      (rewrite
                                                                       "cross_scales")
                                                                      (("1"
                                                                        (rewrite
                                                                         "cross_self_zero")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             -2
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (hide 3 4)
                                            (("2"
                                              (split 2)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (lemma
                                                 "segment_crossing_is_unique")
                                                (("2"
                                                  (case
                                                   "parallel?(s)(e) OR collinear?(s, e)")
                                                  (("1"
                                                    (hide -2)
                                                    (("1"
                                                      (split -1)
                                                      (("1"
                                                        (use
                                                         "parallel_defs_almost_same")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (rewrite
                                                             "parallel_equiv_cross_eq_0"
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "cross((e`p1 - s`p1), e`p2 - e`p1) = 0")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "parallel?")
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (replace
                                                                         -1)
                                                                        (("2"
                                                                          (rewrite
                                                                           "cross_scales_2")
                                                                          (("2"
                                                                            (real-props)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "collinear_as_parallel_with_p1_on_line")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (use
                                                             "parallel_equiv_cross_eq_0")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (move-terms
                                                                   -3
                                                                   r
                                                                   1)
                                                                  (("2"
                                                                    (replace
                                                                     -3)
                                                                    (("2"
                                                                      (rewrite*
                                                                       "cross_scales_1")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (split
                                                       3
                                                       :depth
                                                       1)
                                                      (("1"
                                                        (inst
                                                         -
                                                         "s"
                                                         "e"
                                                         "p1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (rewrite
                                                               "point_on_segment_has_offset")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (rewrite
                                                                   "line_crossing_eq_line_crossing_alt")
                                                                  (("1"
                                                                    (rewrite
                                                                     "line_crossing_alt_eq_line_crossing_alt2")
                                                                    (("1"
                                                                      (expand
                                                                       "line_crossing_alt2"
                                                                       -2)
                                                                      (("1"
                                                                        (lift-if)
                                                                        (("1"
                                                                          (split
                                                                           -2)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (use
                                                                               "parallel_defs_almost_same")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "parallel_equiv_cross_eq_0")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (cancel-add
                                                                               -1)
                                                                              (("2"
                                                                                (use
                                                                                 "scal_cancel")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst
                                                         -
                                                         "e"
                                                         "s"
                                                         "p1")
                                                        (("2"
                                                          (rewrite
                                                           "parallel_commutative")
                                                          (("2"
                                                            (rewrite
                                                             "collinear_symmetric")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 :hide?
                                                                 t)
                                                                (("2"
                                                                  (rewrite
                                                                   "cross_diff_1"
                                                                   1)
                                                                  (("2"
                                                                    (equate
                                                                     "cross(s`p2 - s`p1, e`p2 - e`p1)"
                                                                     "-cross(e`p2 - e`p1, s`p2 - s`p1)")
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (rewrite
                                                                         "point_on_segment_has_offset")
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (rewrite
                                                                             "line_crossing_eq_line_crossing_alt")
                                                                            (("1"
                                                                              (rewrite
                                                                               "line_crossing_alt_eq_line_crossing_alt2")
                                                                              (("1"
                                                                                (expand
                                                                                 "line_crossing_alt2")
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (use
                                                                                         "parallel_defs_almost_same")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "parallel_equiv_cross_eq_0")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (cancel-add
                                                                                         -1)
                                                                                        (("2"
                                                                                          (use
                                                                                           "scal_cancel")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (rewrite
                                                                       "cross_antisymmetric")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skeep) (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (are_segments_intersecting?_sym 0
  (are_segments_intersecting?_sym-1 nil 3875281635
   ("" (skeep)
    (("" (rewrite "are_segments_intersecting?_defs_same")
      (("" (rewrite "are_segments_intersecting?_defs_same")
        (("" (use "are_segments_intersecting_alt_symmetric") nil nil))
        nil))
      nil))
    nil)
   ((are_segments_intersecting?_defs_same formula-decl nil
     perp_crossings nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (are_segments_intersecting_alt_symmetric formula-decl nil
     segments_2d nil))
   shostak))
 (perp_lines_cross_TCC1 0
  (perp_lines_cross_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (typepred "e`p2") (("" (grind-with-ext) nil nil)) nil)) nil)
   nil shostak
   (perp_lines_cross subtype
    "(vectors_2D.+)(perp_crossings.p, vectors_cross_2d.perp_right((vectors_2D.-)(perp_crossings.e`p2, perp_crossings.e`p1)))"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= perp_crossings.p}"))
  (perp_lines_cross_TCC1-1 nil 3874127258 ("" (subtype-tcc) nil nil)
   nil nil
   (perp_lines_cross subtype
    "(vectors_2D.+)(perp_crossings.p, vectors_cross_2d.perp_right((vectors_2D.-)(perp_crossings.e`p2, perp_crossings.e`p1)))"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= perp_crossings.p}")))
 (perp_lines_cross 0
  (perp_lines_cross-1 nil 3874129020
   ("" (skeep)
    (("" (assert)
      (("" (expand "line_crossing")
        (("" (lift-if)
          (("" (assert)
            (("" (split)
              (("1" (typepred "e`p2")
                (("1" (grind-with-ext)
                  (("1"
                    (case "sq(e`p2`x - e`p1`x) + sq(e`p2`y - e`p1`y) = 0")
                    (("1" (use "sq_plus_eq_0") (("1" (assert) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil)
                   ("2"
                    (case "sq(e`p2`x - e`p1`x) + sq(e`p2`y - e`p1`y) = 0")
                    (("1" (use "sq_plus_eq_0") (("1" (assert) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (collinear_perp_line_crossings_same_TCC1 0
  (collinear_perp_line_crossings_same_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (move-terms -1 l 1)
      (("" (use "perp_right_nzvect_neq_zero") (("" (ground) nil nil))
        nil))
      nil))
    nil)
   nil shostak
   (collinear_perp_line_crossings_same subtype
    "(vectors_2D.+)(perp_crossings.p, vectors_cross_2d.perp_right((vectors_2D.-)(perp_crossings.s`p2, perp_crossings.s`p1)))"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= perp_crossings.p}"))
  (collinear_perp_line_crossings_same_TCC1-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (collinear_perp_line_crossings_same subtype
    "(vectors_2D.+)(perp_crossings.p, vectors_cross_2d.perp_right((vectors_2D.-)(perp_crossings.s`p2, perp_crossings.s`p1)))"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= perp_crossings.p}")))
 (collinear_perp_line_crossings_same 0
  (collinear_perp_line_crossings_same-1 nil 3874129020
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (use "collinear_as_parallel_with_p1_on_line")
          (("" (assert)
            (("" (flatten)
              (("" (expand "parallel?")
                (("" (skeep)
                  (("" (rewrite* "line_crossing_eq_line_crossing_alt")
                    ((""
                      (rewrite*
                       "line_crossing_alt_eq_line_crossing_alt2")
                      (("" (expand "line_crossing_alt2")
                        (("" (replace -4 1)
                          (("" (replace -5 1)
                            (("" (assert)
                              ((""
                                (replace -1)
                                ((""
                                  (equate
                                   "perp_right(nzk * (e`p2 - e`p1))"
                                   "nzk * perp_right(e`p2 - e`p1)")
                                  (("1"
                                    (rewrite* "cross_scales_1")
                                    (("1"
                                      (rewrite* "cross_scales_2")
                                      (("1"
                                        (real-props)
                                        (("1"
                                          (apply (repeat (lift-if)))
                                          (("1"
                                            (ground)
                                            (("1"
                                              (equate
                                               "cross(s`p1 - p, e`p2 - e`p1) * nzk * nzk /
             (nzk * (nzk * cross(perp_right(e`p2 - e`p1), e`p2 - e`p1)))"
                                               "cross(s`p1 - p, e`p2 - e`p1) /
             cross(perp_right(e`p2 - e`p1), e`p2 - e`p1)")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (equate
                                                   "e`p1 - p"
                                                   "(s`p1 - p) + (k * nzk) * (e`p2 - e`p1)")
                                                  (("1"
                                                    (rewrite
                                                     "cross_distrib_add_1")
                                                    (("1"
                                                      (rewrite
                                                       "cross_scales_1")
                                                      (("1"
                                                        (rewrite
                                                         "cross_self_zero")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-2 1))
                                                    (("2"
                                                      (name-replace
                                                       "ee"
                                                       "e`p2 - e`p1")
                                                      (("2"
                                                        (replace
                                                         -1
                                                         :hide?
                                                         t)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (name-replace
                                                   "cp"
                                                   "cross(perp_right(e`p2 - e`p1), e`p2 - e`p1)")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (collinear_imp_seg_line_crossings_same 0
  (collinear_imp_seg_line_crossings_same-1 nil 3874129020
   ("" (skeep)
    (("" (rewrite* "collinear_as_parallel_with_p1_on_line")
      (("" (flatten)
        (("" (expand "parallel?")
          (("" (skeep*)
            (("" (rewrite* "line_crossing_eq_line_crossing_alt")
              (("" (rewrite* "line_crossing_alt_eq_line_crossing_alt2")
                (("" (expand "line_crossing_alt2")
                  (("" (replace -1)
                    (("" (replace -3)
                      (("" (rewrite "cross_scales")
                        ((""
                          (name-replace "hh" "h`p2 - h`p1" :hide? nil)
                          (("" (rewrite "cross_scales_2")
                            (("" (real-props)
                              ((""
                                (apply (repeat (lift-if)))
                                ((""
                                  (ground)
                                  ((""
                                    (replace -3)
                                    ((""
                                      (name-replace
                                       "gg"
                                       "g`p2 - g`p1"
                                       :hide?
                                       nil)
                                      ((""
                                        (replace -6)
                                        ((""
                                          (name-replace
                                           "gs"
                                           "g`p2 - (s`p1 + (k * nzk) * gg)"
                                           :hide?
                                           nil)
                                          ((""
                                            (equate
                                             "e`p1 + (k!1 * nzk!1) * hh - (s`p1 + (k * nzk) * gg)"
                                             "(e`p1 - s`p1) + (k!1 * nzk!1) * hh - (k * nzk) * gg")
                                            (("1"
                                              (equate
                                               "cross(e`p1 - s`p1, hh) * nzk!1 * nzk /
             (cross(gs, hh) * nzk!1 * nzk)"
                                               "cross(e`p1 - s`p1, hh) / cross(gs, hh)")
                                              (("1"
                                                (equate
                                                 "cross((e`p1 - s`p1) + (k!1 * nzk!1) * hh - (k * nzk) * gg, hh)"
                                                 "cross(e`p1 - s`p1, hh) - k * nzk * cross(gg, hh)")
                                                (("1"
                                                  (equate
                                                   "(cross(e`p1 - s`p1, hh) - k * nzk * cross(gg, hh)) /
               cross(gs, hh) * gs"
                                                   "(cross(e`p1 - s`p1, hh) / cross(gs, hh)) * gs
         - k * nzk * cross(gg, hh) / cross(gs, hh) * gs")
                                                  (("1"
                                                    (name-replace
                                                     "es"
                                                     "cross(e`p1 - s`p1, hh) / cross(gs, hh) * gs")
                                                    (("1"
                                                      (equate
                                                       "s`p1 + (k * nzk) * gg +
             (es - k * nzk * cross(gg, hh) / cross(gs, hh) * gs)"
                                                       "s`p1 + es")
                                                      (("1"
                                                        (hide 3)
                                                        (("1"
                                                          (cancel-add
                                                           1)
                                                          (("1"
                                                            (move-terms
                                                             1
                                                             l
                                                             2)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (real-props)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (perp_line_crossing_on_other_line_TCC1 0
  (perp_line_crossing_on_other_line_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (perp_line_crossing_on_other_line subtype "perp_crossings.perp_s"
    "segment_2d"))
  (perp_line_crossing_on_other_line_TCC1-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (perp_line_crossing_on_other_line subtype "perp_crossings.perp_s"
    "segment_2d")))
 (perp_line_crossing_on_other_line_TCC2 0
  (perp_line_crossing_on_other_line_TCC2-2 nil 3874129020
   ("" (skeep)
    (("" (lemma "perp_lines_cross")
      (("" (inst - "e" "s" "q") (("" (assert) nil nil)) nil)) nil))
    nil)
   nil shostak
   (perp_line_crossing_on_other_line subtype
    "perp_crossings.line_crossing(perp_crossings.perp_s, perp_crossings.s)"
    "(Maybe[point_2d].some?)"))
  (perp_line_crossing_on_other_line_TCC2-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (perp_line_crossing_on_other_line subtype
    "perp_crossings.line_crossing(perp_crossings.perp_s, perp_crossings.s)"
    "(Maybe[point_2d].some?)")))
 (perp_line_crossing_on_other_line 0
  (perp_line_crossing_on_other_line-1 nil 3874129020
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (skeep)
          (("" (typepred "e")
            (("" (use "parallel_defs_almost_same")
              (("" (assert)
                (("" (hide -2)
                  (("" (rewrite "line_crossing_eq_line_crossing_alt")
                    ((""
                      (rewrite
                       "line_crossing_alt_eq_line_crossing_alt2")
                      (("" (expand "line_crossing_alt2")
                        (("" (lift-if)
                          (("" (expand "perp_s" 1)
                            (("" (assert)
                              ((""
                                (ground)
                                (("1"
                                  (rewrite "cross_antisymmetric")
                                  (("1"
                                    (use "cross_perp_right_pos")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (move-terms 2 r 2)
                                  (("2"
                                    (cancel-add 2)
                                    (("2"
                                      (rewrite "parallel_symm")
                                      (("2"
                                        (expand "parallel?")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (replace -1 -2)
                                            (("2"
                                              (replace -3 -2)
                                              (("2"
                                                (replace -2 +)
                                                (("2"
                                                  (replace -5 :dir rl)
                                                  (("2"
                                                    (equate
                                                     "s`p1 -
                  (s`p1 + a * dir_s + b * perp_right(dir_s) +
                    d * (nzk * (dir_s)))"
                                                     "-b * perp_right(dir_s) - (a + d * nzk) * (dir_s)")
                                                    (("1"
                                                      (rewrite
                                                       "cross_distrib_sub_1")
                                                      (("1"
                                                        (rewrite*
                                                         "cross_scales_1")
                                                        (("1"
                                                          (rewrite
                                                           "cross_self_zero")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (name-replace
                                                               "c"
                                                               "cross(perp_right(dir_s), (dir_s))")
                                                              (("1"
                                                                (factor
                                                                 2
                                                                 l)
                                                                (("1"
                                                                  (real-props)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (find_perp_ray_crossing_TCC1 0
  (find_perp_ray_crossing_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (typepred "e`p2") (("" (grind-with-ext) nil nil)) nil)) nil)
   nil shostak
   (find_perp_ray_crossing subtype
    "(vectors_2D.+)(perp_crossings.p, vectors_cross_2d.perp_right((vectors_2D.-)(perp_crossings.e`p2, perp_crossings.e`p1)))"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= perp_crossings.p}"))
  (find_perp_ray_crossing_TCC1-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (find_perp_ray_crossing subtype
    "(vectors_2D.+)(perp_crossings.p, vectors_cross_2d.perp_right((vectors_2D.-)(perp_crossings.e`p2, perp_crossings.e`p1)))"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= perp_crossings.p}")))
 (find_perp_ray_crossing_TCC2 0
  (find_perp_ray_crossing_TCC2-2 nil 3874129020
   ("" (skeep)
    (("" (use "perp_lines_cross") (("" (assert) nil nil)) nil)) nil)
   nil shostak
   (find_perp_ray_crossing subtype "perp_crossings.line_xing"
    "(Maybe[point_2d].some?)"))
  (find_perp_ray_crossing_TCC2-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (find_perp_ray_crossing subtype "perp_crossings.line_xing"
    "(Maybe[point_2d].some?)")))
 (find_perp_ray_line_crossing_TCC1 0
  (find_perp_ray_line_crossing_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (rewrite "line_crossing_eq_line_crossing_alt")
      (("" (expand "line_crossing_alt")
        (("" (lift-if)
          (("" (ground)
            (("" (replace -2)
              (("" (assert)
                ((""
                  (equate "p - (p + perp_right(e`p2 - e`p1))"
                   "-perp_right(e`p2 - e`p1)")
                  (("1"
                    (equate
                     "cross(-perp_right(e`p2 - e`p1), e`p1 - e`p2)"
                     "-cross(e`p2 - e`p1, perp_right(e`p2 - e`p1))")
                    (("1" (use "cross_perp_right_pos")
                      (("1" (assert) nil nil)) nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (find_perp_ray_line_crossing subtype
    "perp_crossings.line_crossing(perp_crossings.e_perp_rt, perp_crossings.e)"
    "(Maybe[point_2d].some?)"))
  (find_perp_ray_line_crossing_TCC1-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (find_perp_ray_line_crossing subtype
    "perp_crossings.line_crossing(perp_crossings.e_perp_rt, perp_crossings.e)"
    "(Maybe[point_2d].some?)")))
 (perp_ray_crossing_is_perp_ray_line_crossing_TCC1 0
  (perp_ray_crossing_is_perp_ray_line_crossing_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (perp_ray_crossing_is_perp_ray_line_crossing subtype
    "perp_crossings.find_perp_ray_crossing(perp_crossings.e, perp_crossings.v)"
    "(Maybe[point_2d].some?)"))
  (perp_ray_crossing_is_perp_ray_line_crossing_TCC1-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (perp_ray_crossing_is_perp_ray_line_crossing subtype
    "perp_crossings.find_perp_ray_crossing(perp_crossings.e, perp_crossings.v)"
    "(Maybe[point_2d].some?)")))
 (perp_ray_crossing_is_perp_ray_line_crossing 0
  (perp_ray_crossing_is_perp_ray_line_crossing-1 nil 3874129020
   ("" (skeep) (("" (grind) nil nil)) nil) nil shostak))
 (perp_ray_line_crossing_distance_exists 0
  (perp_ray_line_crossing_distance_exists-1 nil 3874129020
   ("" (skeep)
    (("" (expand "find_perp_ray_line_crossing")
      ((""
        (case "v + perp_right(e`p2 - e`p1) = v or
 cross(v - (v + perp_right(e`p2 - e`p1)), e`p1 - e`p2) = 0")
        (("1" (hide +)
          (("1" (ground)
            (("1" (move-terms -1 l 1)
              (("1" (use "perp_right_nzvect_neq_zero")
                (("1" (ground) nil nil)) nil))
              nil)
             ("2"
              (equate "v - (v + perp_right(e`p2 - e`p1))"
               "-perp_right(e`p2 - e`p1)")
              (("1" (rewrite "cross_antisymmetric")
                (("1" (rewrite "neg_cross_neg")
                  (("1" (use "cross_perp_right_pos")
                    (("1" (rewrite "cross_diff_1" -2)
                      (("1" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2"
            (name-replace "lc"
             "line_crossing((# p1 := v, p2 := v + perp_right(e`p2 - e`p1) #), e)")
            (("1" (inst-cp + "norm(val(lc) - v) / norm(e`p2 - e`p1)")
              (("1" (inst + "-(norm(val(lc) - v) / norm(e`p2 - e`p1))")
                (("1"
                  (case "val(lc) - v =
                  norm(val(lc) - v) / norm(e`p2 - e`p1) * perp_right(e`p2 - e`p1)")
                  (("1"
                    (name-replace "n"
                     "norm(val(lc) - v) / norm(e`p2 - e`p1)")
                    (("1" (move-terms -1 l 2)
                      (("1" (replace -1 :hide? t)
                        (("1" (hide-all-but 4) (("1" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (case "val(lc) - v =
                  -(norm(val(lc) - v) / norm(e`p2 - e`p1)) * perp_right(e`p2 - e`p1)")
                    (("1"
                      (name-replace "n"
                       "-(norm(val(lc) - v) / norm(e`p2 - e`p1))")
                      (("1" (move-terms -1 l 2)
                        (("1" (replace -1 :hide? t)
                          (("1" (hide-all-but 4)
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 5 6)
                      (("2" (cross-mult 2)
                        (("2" (mult-by 1 "norm(e`p2 - e`p1)")
                          (("2"
                            (equate
                             "(norm(e`p2 - e`p1) * -(norm(val(lc) - v) / norm(e`p2 - e`p1)))"
                             "-norm(val(lc) - v)")
                            (("1" (expand "lc")
                              (("1"
                                (use "line_crossing_on_line")
                                (("1"
                                  (assert)
                                  (("1"
                                    (ground)
                                    (("1"
                                      (hide +)
                                      (("1"
                                        (rewrite
                                         "line_crossing_eq_line_crossing_alt")
                                        (("1"
                                          (expand "line_crossing_alt")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (rewrite "norm_scal")
                                            (("2"
                                              (expand "abs")
                                              (("2"
                                                (lift-if)
                                                (("2"
                                                  (ground)
                                                  (("1"
                                                    (equate
                                                     "-(-k * norm(perp_right(e`p2 - e`p1)))"
                                                     "norm(perp_right(e`p2 - e`p1)) * k")
                                                    (("1"
                                                      (rewrite
                                                       "norm_perp_right_is_norm_right")
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "norm_perp_right_is_norm_right")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (ground) nil nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "lc")
                (("2" (rewrite "line_crossing_eq_line_crossing_alt")
                  (("2" (expand "line_crossing_alt")
                    (("2" (lift-if) (("2" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (ground) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (perp_ray_line_crossing_distance_norm 0
  (perp_ray_line_crossing_distance_norm-1 nil 3874129020
   ("" (skeep)
    (("" (use "perp_ray_line_crossing_distance_exists")
      (("" (skeep)
        (("" (replace -1 :hide? t)
          ((""
            (equate "perp_right(^(e`p2 - e`p1))"
             "(1 / norm(e`p2 - e`p1)) * perp_right(e`p2 - e`p1)")
            (("1" (inst + "b * norm(e`p2 - e`p1)")
              (("1" (real-props)
                (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (inst + "b * norm(e`p2 - e`p1)")
              (("2" (real-props) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (perp_crossing_reverse_TCC1 0
  (perp_crossing_reverse_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (move-terms -1 l 1)
      (("" (use "perp_right_nzvect_neq_zero")
        (("1" (ground) nil nil) ("2" (assert) nil nil)) nil))
      nil))
    nil)
   nil shostak
   (perp_crossing_reverse subtype
    "(vectors_2D.+)(perp_crossings.p, vectors_cross_2d.perp_right((vectors_2D.-)(perp_crossings.e`p1, perp_crossings.e`p2)))"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= perp_crossings.p}"))
  (perp_crossing_reverse_TCC1-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (perp_crossing_reverse subtype
    "(vectors_2D.+)(perp_crossings.p, vectors_cross_2d.perp_right((vectors_2D.-)(perp_crossings.e`p1, perp_crossings.e`p2)))"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= perp_crossings.p}")))
 (perp_crossing_reverse 0
  (perp_crossing_reverse-1 nil 3874129020
   ("" (skeep)
    (("" (rewrite* "line_crossing_eq_line_crossing_alt")
      (("1" (expand "line_crossing_alt")
        (("1" (apply (repeat (lift-if)))
          (("1" (ground)
            (("1" (hide 2) (("1" (grind) nil nil)) nil)
             ("2" (hide 1) (("2" (grind) nil nil)) nil)
             ("3"
              (equate "p - (p + perp_right(e`p1 - e`p2))"
               "-perp_right(e`p1 - e`p2)")
              (("1"
                (equate "p - (p + perp_right(e`p2 - e`p1))"
                 "-perp_right(e`p2 - e`p1)")
                (("1"
                  (equate "-perp_right(e`p1 - e`p2)"
                   "perp_right(e`p2 - e`p1)")
                  (("1"
                    (equate "cross(p, p + perp_right(e`p2 - e`p1))"
                     "cross(p, perp_right(e`p2 - e`p1))")
                    (("1"
                      (equate "cross(p, p + perp_right(e`p1 - e`p2))"
                       "cross(p, perp_right(e`p1 - e`p2))")
                      (("1"
                        (equate "(cross(p, perp_right(e`p2 - e`p1)) /
             cross(-perp_right(e`p2 - e`p1), e`p1 - e`p2))"
                         "(cross(p, perp_right(e`p1 - e`p2)) /
             cross(perp_right(e`p2 - e`p1), e`p1 - e`p2))")
                        (("1"
                          (equate "(cross(e`p1, e`p2) /
              cross(-perp_right(e`p2 - e`p1), e`p1 - e`p2))
             * -perp_right(e`p2 - e`p1)" "(cross(e`p1, e`p2) /
              cross(perp_right(e`p2 - e`p1), e`p1 - e`p2))
             * perp_right(e`p2 - e`p1)")
                          (("1" (hide-all-but 1)
                            (("1"
                              (equate
                               "cross(-perp_right(e`p2 - e`p1), e`p1 - e`p2)"
                               "-cross(perp_right(e`p2 - e`p1), e`p1 - e`p2)")
                              (("1"
                                (name-replace
                                 "pr"
                                 "perp_right(e`p2 - e`p1)")
                                (("1"
                                  (equate
                                   "(cross(e`p1, e`p2) / -cross(pr, e`p1 - e`p2))"
                                   "-(cross(e`p1, e`p2) / cross(pr, e`p1 - e`p2))")
                                  (("1"
                                    (name-replace
                                     "cc"
                                     "(cross(e`p1, e`p2) / cross(pr, e`p1 - e`p2))")
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (real-props) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2"
                            (equate "perp_right(e`p2 - e`p1)"
                             "-perp_right(e`p1 - e`p2)")
                            (("1" (rewrite "neg_cross_neg")
                              (("1"
                                (equate
                                 "cross(-perp_right(e`p1 - e`p2), e`p1 - e`p2)"
                                 "-cross(perp_right(e`p1 - e`p2), e`p1 - e`p2)")
                                (("1" (real-props) nil nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil)
                 ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                nil)
               ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (flatten)
          (("2" (move-terms -1 l 1)
            (("2" (use "perp_right_nzvect_neq_zero")
              (("2" (ground) nil nil)) nil))
            nil))
          nil))
        nil)
       ("3" (hide 2)
        (("3" (flatten)
          (("3" (move-terms -1 l 1)
            (("3" (use "perp_right_nzvect_neq_zero")
              (("3" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (perp_crossing_reverse_2 0
  (perp_crossing_reverse_2-1 nil 3874129020
   ("" (skeep)
    (("" (use "perp_crossing_reverse")
      (("" (replace -1 :hide? t)
        (("" (rewrite* "line_crossing_eq_line_crossing_alt")
          (("1" (expand "line_crossing_alt")
            (("1" (expand "reverse_segment")
              (("1"
                (equate "p - (p + perp_right(e`p1 - e`p2))"
                 "perp_right(e`p2 - e`p1)")
                (("1"
                  (equate "cross(p, p + perp_right(e`p1 - e`p2))"
                   "cross(p, perp_right(e`p1 - e`p2))")
                  (("1" (apply (repeat (lift-if)))
                    (("1" (ground)
                      (("1" (hide 2) (("1" (grind) nil nil)) nil)
                       ("2" (hide 1) (("2" (grind) nil nil)) nil)
                       ("3"
                        (name-replace "c1"
                         "cross(p, perp_right(e`p1 - e`p2))")
                        (("3"
                          (equate
                           "(c1 / cross(perp_right(e`p2 - e`p1), e`p1 - e`p2)) *
            (e`p1 - e`p2)"
                           "(c1 / cross(perp_right(e`p2 - e`p1), e`p2 - e`p1)) *
            (e`p2 - e`p1)")
                          (("1"
                            (equate "cross(e`p1, e`p2) /
              cross(perp_right(e`p2 - e`p1), e`p1 - e`p2)"
                             "cross(e`p2, e`p1) /
              cross(perp_right(e`p2 - e`p1), e`p2 - e`p1)")
                            (("1" (hide-all-but 1)
                              (("1"
                                (equate
                                 "cross(perp_right(e`p2 - e`p1), e`p1 - e`p2)"
                                 "-cross(perp_right(e`p2 - e`p1), e`p2 - e`p1)")
                                (("1"
                                  (rewrite "cross_antisymmetric")
                                  (("1" (real-props) nil nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2"
                              (equate
                               "cross(perp_right(e`p2 - e`p1), e`p1 - e`p2)"
                               "-cross(perp_right(e`p2 - e`p1), e`p2 - e`p1)")
                              (("1"
                                (name-replace
                                 "c2"
                                 "cross(perp_right(e`p2 - e`p1), e`p2 - e`p1)")
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil)
                 ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (flatten)
              (("2" (move-terms -1 l 1)
                (("2" (use "perp_right_nzvect_neq_zero")
                  (("2" (ground) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (hide-all-but 1)
            (("3" (flatten)
              (("3" (move-terms -1 l 1)
                (("3" (use "perp_right_nzvect_neq_zero")
                  (("3" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (find_perp_ray_crossing_reverse 0
  (find_perp_ray_crossing_reverse-1 nil 3874129020
   ("" (skeep)
    (("" (expand "find_perp_ray_crossing")
      (("" (apply (repeat (lift-if)))
        (("" (expand "reverse_segment")
          (("" (use "perp_crossing_reverse_2")
            (("" (expand "reverse_segment")
              (("" (replace -1 :dir rl)
                ((""
                  (name-replace "lc" "val(line_crossing
                                    ((# p1 := v,
                                        p2
                                        := v + perp_right(e`p2 - e`p1) #),
                                     e))")
                  (("1" (use "point_on_reverse_segment")
                    (("1" (expand "reverse_segment")
                      (("1" (replace -1) (("1" (ground) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (use "perp_lines_cross")
                      (("2" (ground)
                        (("2" (flatten)
                          (("2" (assert)
                            (("2"
                              (name-replace "lc"
                               "line_crossing((# p1 := v, p2 := v + perp_right(e`p2 - e`p1) #), e)")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (move-terms -1 l 1)
                                    (("2"
                                      (use
                                       "perp_right_nzvect_neq_zero")
                                      (("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide-all-but 1)
                    (("3" (flatten)
                      (("3" (move-terms -1 l 1)
                        (("3" (use "perp_right_nzvect_neq_zero")
                          (("3" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (perp_ray_line_crossing_swapped_endpoints 0
  (perp_ray_line_crossing_swapped_endpoints-1 nil 3874129020
   ("" (skeep)
    (("" (expand "find_perp_ray_line_crossing")
      ((""
        (case "p + perp_right(e`p1 - e`p2) = p or
         q + perp_right(s`p1 - s`p2) = q")
        (("1" (hide-all-but -1)
          (("1" (ground)
            (("1" (move-terms -1 l 1)
              (("1" (use "perp_right_nzvect_neq_zero")
                (("1" (ground) nil nil)) nil))
              nil)
             ("2" (move-terms -1 l 1)
              (("2" (use "perp_right_nzvect_neq_zero")
                (("2" (ground) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (lemma "line_crossing_reverse")
            (("2" (ground)
              (("1" (replace -1)
                (("1" (expand "reverse_segment")
                  (("1" (rewrite "perp_crossing_reverse")
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                  nil))
                nil)
               ("2" (replace -2)
                (("2" (expand "reverse_segment")
                  (("2" (rewrite "perp_crossing_reverse")
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil)
               ("3" (replace -1)
                (("3" (expand "reverse_segment")
                  (("3" (rewrite "perp_crossing_reverse")
                    (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
                  nil))
                nil)
               ("4" (replace -2)
                (("4" (expand "reverse_segment")
                  (("4" (rewrite "perp_crossing_reverse")
                    (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (find_perp_ray_crossing_subseq 0
  (find_perp_ray_crossing_subseq-1 nil 3874129020
   ("" (skeep)
    (("" (expand "find_perp_ray_crossing")
      ((""
        (name-replace*
         ("lce" "line_crossing((# p1 := v,
                                                   p2
                                                   := v
                                                      +
                                                      perp_right
                                                      (e`p2 - e`p1) #), e)"
          "lch" "line_crossing((# p1 := v,
                                                   p2
                                                   := v
                                                      +
                                                      perp_right
                                                      (h`p2 - h`p1) #), h)"))
        (("" (lift-if)
          (("" (case-replace "lch = lce")
            (("1" (ground)
              (("1" (lemma "point_on_interior_segment")
                (("1" (inst - "val(lce)" "e" "h")
                  (("1" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (lemma "collinear_perp_line_crossings_same")
              (("2" (inst - "h" "e" "v")
                (("2" (assert)
                  (("2" (split -1)
                    (("1" (assert) nil nil)
                     ("2" (hide-all-but (-3 -4 1))
                      (("2"
                        (rewrite
                         "collinear_as_parallel_with_p1_on_line")
                        (("2" (rewrite* "point_on_segment_has_offset")
                          (("2" (skeep*)
                            (("2" (replace -1)
                              (("2"
                                (replace -3)
                                (("2"
                                  (case-replace "d!1 = d")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (ground)
                                    (("1"
                                      (equate
                                       "h`p1 + d!1 * (h`p2 - h`p1) - (h`p1 + d * (h`p2 - h`p1))"
                                       "(d!1 - d) * (h`p2 - h`p1)")
                                      (("1"
                                        (expand "parallel?")
                                        (("1"
                                          (inst + "1/(d!1 - d)")
                                          (("1" (real-props) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2" (inst + "d") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (perp_line_crossing_is_perp_pt 0
  (perp_line_crossing_is_perp_pt-1 nil 3874129020
   ("" (skeep :preds? T)
    (("" (assert)
      (("" (expand "find_perp_ray_line_crossing")
        (("" (rewrite "line_crossing_eq_line_crossing_alt")
          (("1" (expand "line_crossing_alt")
            (("1"
              (equate "p - (p + perp_right(e`p2 - e`p1))"
               "perp_right(e`p1 - e`p2)")
              (("1" (lift-if)
                (("1" (ground)
                  (("1" (rewrite "cross_antisymmetric")
                    (("1" (rewrite "cross_perp_right_eq_pos_dot")
                      (("1" (rewrite "sqv_rew")
                        (("1" (use "sqv_eq_0") (("1" (ground) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (equate
                     "cross(perp_right(e`p1 - e`p2), e`p1 - e`p2)"
                     "-sqv(e`p2 - e`p1)")
                    (("1" (expand "perp_pt")
                      (("1" (rewrite "sqv_rew")
                        (("1" (rewrite "cross_distrib_add_2")
                          (("1" (rewrite "cross_self_zero")
                            (("1" (assert)
                              (("1"
                                (rewrite "cross_perp_right_eq_pos_dot")
                                (("1"
                                  (mult-by 2 "sqv(e`p2 - e`p1)")
                                  (("1"
                                    (distrib 1)
                                    (("1"
                                      (real-props)
                                      (("1"
                                        (equate
                                         "sqv(e`p2 - e`p1) * (p * (e`p2 - e`p1)) / -sqv(e`p2 - e`p1)"
                                         "-(p * (e`p2 - e`p1))")
                                        (("1"
                                          (equate
                                           "sqv(e`p2 - e`p1) * cross(e`p1, e`p2) / -sqv(e`p2 - e`p1)"
                                           "-cross(e`p1, e`p2)")
                                          (("1"
                                            (grind-with-ext)
                                            nil
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (real-props)
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (real-props) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (rewrite "cross_antisymmetric")
                        (("2" (rewrite "cross_perp_right_eq_pos_dot")
                          (("2" (rewrite "sqv_rew")
                            (("2" (rewrite "sqv_sym") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (flatten)
              (("2" (move-terms -1 l 1)
                (("2" (assert)
                  (("2" (use "perp_right_nzvect_neq_zero")
                    (("2" (ground) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (find_perp_ray_crossing_is_perp_pt 0
  (find_perp_ray_crossing_is_perp_pt-1 nil 3874129020
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (use "perp_line_crossing_is_perp_pt")
          (("" (assert)
            ((""
              (rewrite "perp_ray_crossing_is_perp_ray_line_crossing")
              nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (perp_is_min 0
  (perp_is_min-1 nil 3874129020
   ("" (apply (repeat (then (skeep :preds? T) (assert) (flatten))))
    (("" (lemma "perp_is_min")
      ((""
        (inst -1 "e`p1" "p" "e`p2 - e`p1" "t"
         "perp_pt(p, e`p1, e`p2 - e`p1)")
        (("" (assert) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (t_exists_on_line_seg 0
  (t_exists_on_line_seg-1 nil 3874129020
   ("" (skeep 1 t)
    (("" (assert)
      (("" (expand* "point_on_segment?" "point_on_segment?")
        (("" (skeep -1 t) (("" (inst 1 t) (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (perp_is_shortest 0
  (perp_is_shortest-1 nil 3874129020
   ("" (skeep 1 t)
    (("" (skeep 2 t)
      (("" (lemma "perp_is_min")
        (("" (inst -1 "e" "v")
          (("" (assert)
            (("" (lemma "t_exists_on_line_seg")
              (("" (inst -1 "e" "q")
                (("" (assert)
                  (("" (skeep -1)
                    (("" (inst -2 "t")
                      (("" (lemma "find_perp_ray_crossing_is_perp_pt")
                        (("" (inst -1 "e" "v")
                          (("" (assert)
                            (("" (replace -1 :hide? T)
                              ((""
                                (name-replace
                                 "r"
                                 "(e`p1 + perp_pt(v, e`p1, e`p2 - e`p1) * (e`p2 - e`p1))")
                                (("" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (exists_parallel_parameterization 0
  (exists_parallel_parameterization-1 nil 3874129020
   ("" (skeep 1 t)
    (("" (skeep 1 t)
      (("" (inst 1 "s`p1" "_" "s`p2 - s`p1" "_")
        (("" (case "(s`p2`x - s`p1`x) /= 0")
          (("1"
            (inst 1
             "q - (p`x - s`p1`x) / (s`p2`x - s`p1`x) * (s`p2 - s`p1)"
             "(p`x - s`p1`x) / (s`p2`x - s`p1`x)")
            (("1" (split)
              (("1" (grind-with-ext)
                (("1" (field) nil nil) ("2" (field) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil)
           ("2"
            (inst 2
             "q - (p`y - s`p1`y) / (s`p2`y - s`p1`y) * (s`p2 - s`p1)"
             "(p`y - s`p1`y) / (s`p2`y - s`p1`y)")
            (("1" (split)
              (("1" (grind-with-ext) (("1" (field) nil nil)) nil)
               ("2" (grind) nil nil))
              nil)
             ("2" (typepred "s`p2") (("2" (grind-with-ext) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (exists_parallel_parameterization_generalization 0
  (exists_parallel_parameterization_generalization-1 nil 3874129020
   ("" (apply (repeat (skeep 1 t)))
    (("" (inst 1 "s`p1" "_" "s`p2 - s`p1" "_")
      (("" (case "(s`p2`x - s`p1`x) /= 0")
        (("1"
          (inst 1
           "q - (p`x - s`p1`x) / (s`p2`x - s`p1`x) * (s`p2 - s`p1)"
           "(p`x - s`p1`x) / (s`p2`x - s`p1`x)")
          (("1" (split)
            (("1" (grind-with-ext)
              (("1" (field) nil nil) ("2" (field) nil nil)) nil)
             ("2" (grind) nil nil))
            nil))
          nil)
         ("2"
          (inst 2
           "q - (p`y - s`p1`y) / (s`p2`y - s`p1`y) * (s`p2 - s`p1)"
           "(p`y - s`p1`y) / (s`p2`y - s`p1`y)")
          (("1" (split)
            (("1" (grind-with-ext) (("1" (field) nil nil)) nil)
             ("2" (grind) nil nil))
            nil)
           ("2" (typepred "s`p2") (("2" (grind-with-ext) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (perp_is_shortest_on_line 0
  (perp_is_shortest_on_line-1 nil 3874129020
   ("" (skeep*)
    (("" (use "perp_line_crossing_is_perp_pt")
      (("" (assert)
        (("" (replace -1 :hide? t)
          (("" (lemma "perp_is_min")
            (("" (inst -1 "e" "p")
              (("" (assert)
                (("" (inst - "k")
                  (("" (rewrite "norm_sym" 1)
                    (("" (lemma "norm_sym")
                      (("" (inst - "p" "(e`p1 + k * (e`p2 - e`p1))")
                        (("" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (not_perp_p1_closer_p2_imp_p1_closest 0
  (not_perp_p1_closer_p2_imp_p1_closest-1 nil 3874129020
   ("" (skeep)
    (("" (expand "find_perp_ray_crossing")
      (("" (lift-if)
        (("" (ground)
          (("1" (use "perp_lines_cross") (("1" (assert) nil nil)) nil)
           ("2" (lemma "perp_line_crossing_is_perp_pt")
            (("2" (inst - "e" "p")
              (("2" (assert)
                (("2" (expand "find_perp_ray_line_crossing")
                  (("2" (replace -1 :hide? t)
                    (("2" (lemma "perp_comps")
                      (("2" (inst - "e`p1" "p" "e`p2 - e`p1" _ _)
                        (("2" (rewrite* "point_on_segment_has_offset")
                          (("2" (skeep)
                            (("2"
                              (name-replace "pp"
                               "perp_pt(p, e`p1, e`p2 - e`p1)")
                              (("2"
                                (inst - _ "pp")
                                (("2"
                                  (inst-cp - "0")
                                  (("2"
                                    (inst-cp - "1")
                                    (("2"
                                      (inst - "d")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (equate
                                           "e`p1 + (e`p2 - e`p1)"
                                           "e`p2")
                                          (("1"
                                            (rewrite "norm_sym" -2)
                                            (("1"
                                              (rewrite
                                               "sq_le"
                                               -4
                                               :dir
                                               rl)
                                              (("1"
                                                (rewrite
                                                 "sq_le"
                                                 2
                                                 :dir
                                                 rl)
                                                (("1"
                                                  (replace -2 :hide? t)
                                                  (("1"
                                                    (move-terms -1 r 1)
                                                    (("1"
                                                      (replace
                                                       -1
                                                       :dir
                                                       rl
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (rewrite
                                                         "norm_sym"
                                                         -1)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (replace
                                                             -2
                                                             2)
                                                            (("1"
                                                              (equate
                                                               "norm((e`p1 + d * (e`p2 - e`p1)) - p)"
                                                               "norm(p - (e`p1 + d * (e`p2 - e`p1)))")
                                                              (("1"
                                                                (cancel-add
                                                                 -1)
                                                                (("1"
                                                                  (cancel-add
                                                                   2)
                                                                  (("1"
                                                                    (move-terms
                                                                     2
                                                                     l
                                                                     2)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (rewrite*
                                                                         "sq_le")
                                                                        (("1"
                                                                          (rewrite*
                                                                           "norm_scal")
                                                                          (("1"
                                                                            (cancel-by
                                                                             -1
                                                                             "norm((e`p2 - e`p1))")
                                                                            (("1"
                                                                              (cancel-by
                                                                               3
                                                                               "norm((e`p2 - e`p1))")
                                                                              (("1"
                                                                                (expand
                                                                                 "abs")
                                                                                (("1"
                                                                                  (apply
                                                                                   (repeat
                                                                                    (lift-if)))
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (ground)
                                                                                      (("1"
                                                                                        (inst
                                                                                         +
                                                                                         "pp")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (inst
                                                                                         +
                                                                                         "pp")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (grind-with-ext)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (perp_line_orthogonal 0
  (perp_line_orthogonal-1 nil 3874129020
   ("" (skeep + t)
    (("" (skoletin)
      (("" (expand "find_perp_ray_line_crossing")
        ((""
          (name-replace "qpr"
           "(# p1 := q, p2 := q + perp_right(s`p2 - s`p1) #)")
          (("" (case "line_crossing(qpr, s) = None")
            (("1"
              (rewrite "no_line_crossing_eqv_parallel_or_collinear")
              (("1" (rewrite "parallel_defs_almost_same" :dir rl)
                (("1" (expand "qpr" -1)
                  (("1" (assert)
                    (("1" (hide-all-but -1)
                      (("1" (rewrite "parallel_symm")
                        (("1" (use "perp_right_not_parallel") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (use "line_crossing_commutative")
              (("2" (lemma "line_crossing_on_line")
                (("2" (inst-cp - "s" "qpr")
                  (("2" (inst - "qpr" "s")
                    (("2" (assert)
                      (("2" (assert)
                        (("2" (skeep*)
                          (("2" (replace -4 -1 :dir rl)
                            (("2" (expand "qpr" -1)
                              (("2"
                                (assert)
                                (("2"
                                  (replace -3 -2 :dir rl)
                                  (("2"
                                    (replace -4 -2 :dir rl)
                                    (("2"
                                      (equate
                                       "q - u"
                                       "-k * perp_right(s`p2 - s`p1)")
                                      (("1"
                                        (expand "point_on_segment?")
                                        (("1"
                                          (rewrite
                                           "point_on_segment_has_offset")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (equate
                                               "u - p"
                                               "(k!1 - d) * (s`p2 - s`p1)")
                                              (("1"
                                                (hide-all-but 2)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (replace -2 1)
                                                (("2"
                                                  (replace -5 1)
                                                  (("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -1 1)
                                        (("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (cos_neg_inner_point_closer_TCC1 0
  (cos_neg_inner_point_closer_TCC1-2 nil 3874129020
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (cos_neg_inner_point_closer subtype
    "(vectors_2D.-)(perp_crossings.u, perp_crossings.v)" "Nz_vector"))
  (cos_neg_inner_point_closer_TCC1-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (cos_neg_inner_point_closer subtype
    "(vectors_2D.-)(perp_crossings.u, perp_crossings.v)" "Nz_vector")))
 (cos_neg_inner_point_closer_TCC2 0
  (cos_neg_inner_point_closer_TCC2-2 nil 3874129020
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (cos_neg_inner_point_closer subtype
    "(vectors_2D.-)(perp_crossings.w, perp_crossings.v)" "Nz_vector"))
  (cos_neg_inner_point_closer_TCC2-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (cos_neg_inner_point_closer subtype
    "(vectors_2D.-)(perp_crossings.w, perp_crossings.v)" "Nz_vector")))
 (cos_neg_inner_point_closer 0
  (cos_neg_inner_point_closer-1 nil 3874129020
   ("" (skeep*)
    (("" (lemma "law_of_cosines_sq_vcos")
      (("" (inst-cp - "u" "v" "w")
        (("" (inst - "p" "v" "w")
          (("" (assert)
            (("" (lemma "sq_le")
              (("" (inst - "norm(u - w)" "norm(p - w)")
                (("" (replace -1 :dir rl)
                  (("" (rewrite "norm_sym" -2)
                    (("" (rewrite "norm_sym" -3)
                      (("" (replace -2 + :hide? t)
                        (("" (replace -2 + :hide? t)
                          (("" (expand "vcos")
                            (("" (equate "^(p - v)" "^(u - v)")
                              (("1"
                                (hide -1)
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (rewrite "norm_scal")
                                      (("1"
                                        (expand "abs")
                                        (("1"
                                          (rewrite "sq_times")
                                          (("1"
                                            (ground)
                                            (("1"
                                              (cancel-add -1)
                                              (("1"
                                                (cancel-by
                                                 1
                                                 "norm(u - v)")
                                                (("1"
                                                  (name-replace
                                                   "nn"
                                                   "norm(u - v) * norm(w - v) * (^(u - v) * ^(w - v))")
                                                  (("1"
                                                    (move-terms -2 r)
                                                    (("1"
                                                      (factor
                                                       -2
                                                       l
                                                       (1 3))
                                                      (("1"
                                                        (factor
                                                         -2
                                                         l
                                                         (2 3))
                                                        (("1"
                                                          (case
                                                           "2 * nn * (-1 + k) > 0 & sq(norm(u - v)) * (1 - sq(k)) > 0")
                                                          (("1"
                                                            (ground)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (ground)
                                                            (("1"
                                                              (move-terms
                                                               1
                                                               l
                                                               2)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (cancel-by
                                                                   1
                                                                   "2 * nn")
                                                                  (("1"
                                                                    (expand
                                                                     "nn"
                                                                     -1)
                                                                    (("1"
                                                                      (mult-cases
                                                                       -1)
                                                                      (("1"
                                                                        (mult-cases
                                                                         -1)
                                                                        (("1"
                                                                          (mult-cases
                                                                           -1)
                                                                          (("1"
                                                                            (rewrite
                                                                             "norm_eq_0")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "nn"
                                                                     -1)
                                                                    (("2"
                                                                      (mult-cases
                                                                       -1)
                                                                      (("2"
                                                                        (mult-cases
                                                                         -1)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (factor
                                                               1
                                                               l)
                                                              (("2"
                                                                (mult-cases
                                                                 1)
                                                                (("2"
                                                                  (ground)
                                                                  (("1"
                                                                    (rewrite
                                                                     "sq_gt_0")
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (move-terms
                                                                     1
                                                                     l
                                                                     2)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "sq")
                                                                        (("2"
                                                                          (mult-cases
                                                                           1)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (cancel-add 1)
                                              (("2"
                                                (cancel-by
                                                 -1
                                                 "norm(u - v)")
                                                (("2"
                                                  (move-terms 2 l)
                                                  (("2"
                                                    (factor 2 r (1 3))
                                                    (("2"
                                                      (factor
                                                       2
                                                       r
                                                       (2 3))
                                                      (("2"
                                                        (case
                                                         "2 * norm(u - v) * norm(w - v) * (^(u - v) * ^(w - v)) * (-k + 1) >= 0")
                                                        (("1"
                                                          (case
                                                           "sq(norm(u - v)) * (sq(k) - 1) >= 0")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (case-replace
                                                             "k = 1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "sq(k) - 1 > 0")
                                                              (("1"
                                                                (mult-cases
                                                                 2)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (move-terms
                                                                 1
                                                                 l
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "sq")
                                                                  (("2"
                                                                    (mult-cases
                                                                     1)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (mult-cases
                                                           1)
                                                          (("2"
                                                            (name-replace
                                                             "nn"
                                                             "norm(u - v) * norm(w - v)")
                                                            (("2"
                                                              (mult-cases
                                                               1)
                                                              (("2"
                                                                (mult-cases
                                                                 1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -1 5)
                                (("2"
                                  (replace -2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (rewrite "normalize_scal")
                                      (("1"
                                        (expand "sign")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (replace -1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (cos_neg_inner_point_closer_lt 0
  (cos_neg_inner_point_closer_lt-1 nil 3874129020
   ("" (skeep*)
    (("" (lemma "law_of_cosines_sq_vcos")
      (("" (inst-cp - "u" "v" "w")
        (("" (inst - "p" "v" "w")
          (("" (assert)
            (("" (lemma "sq_lt")
              (("" (inst - "norm(u - w)" "norm(p - w)")
                (("" (replace -1 :dir rl)
                  (("" (rewrite "norm_sym" -2)
                    (("" (rewrite "norm_sym" -3)
                      (("" (replace -2 + :hide? t)
                        (("" (replace -2 + :hide? t)
                          (("" (expand "vcos")
                            (("" (equate "^(p - v)" "^(u - v)")
                              (("1"
                                (hide -1)
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (rewrite "norm_scal")
                                      (("1"
                                        (expand "abs")
                                        (("1"
                                          (rewrite "sq_times")
                                          (("1"
                                            (ground)
                                            (("1"
                                              (cancel-add -1)
                                              (("1"
                                                (cancel-by
                                                 1
                                                 "norm(u - v)")
                                                (("1"
                                                  (name-replace
                                                   "nn"
                                                   "norm(u - v) * norm(w - v) * (^(u - v) * ^(w - v))")
                                                  (("1"
                                                    (move-terms -2 r)
                                                    (("1"
                                                      (factor
                                                       -2
                                                       l
                                                       (1 3))
                                                      (("1"
                                                        (factor
                                                         -2
                                                         l
                                                         (2 3))
                                                        (("1"
                                                          (case
                                                           "2 * nn * (-1 + k) > 0 & sq(norm(u - v)) * (1 - sq(k)) > 0")
                                                          (("1"
                                                            (ground)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (ground)
                                                            (("1"
                                                              (move-terms
                                                               1
                                                               l
                                                               2)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (cancel-by
                                                                   1
                                                                   "2 * nn")
                                                                  (("1"
                                                                    (expand
                                                                     "nn"
                                                                     -1)
                                                                    (("1"
                                                                      (mult-cases
                                                                       -1)
                                                                      (("1"
                                                                        (mult-cases
                                                                         -1)
                                                                        (("1"
                                                                          (mult-cases
                                                                           -1)
                                                                          (("1"
                                                                            (rewrite
                                                                             "norm_eq_0")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "nn"
                                                                     -1)
                                                                    (("2"
                                                                      (mult-cases
                                                                       -1)
                                                                      (("2"
                                                                        (mult-cases
                                                                         -1)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (ground)
                                                                    (("3"
                                                                      (expand
                                                                       "sq")
                                                                      (("3"
                                                                        (case-replace
                                                                         "k = 1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (factor
                                                               1
                                                               l)
                                                              (("2"
                                                                (mult-cases
                                                                 1)
                                                                (("2"
                                                                  (ground)
                                                                  (("1"
                                                                    (rewrite
                                                                     "sq_gt_0")
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (move-terms
                                                                     1
                                                                     l
                                                                     2)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "sq")
                                                                        (("2"
                                                                          (mult-cases
                                                                           1)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (cancel-add 1)
                                              (("2"
                                                (cancel-by
                                                 -1
                                                 "norm(u - v)")
                                                (("2"
                                                  (move-terms 2 l)
                                                  (("2"
                                                    (factor 2 r (1 3))
                                                    (("2"
                                                      (factor
                                                       2
                                                       r
                                                       (2 3))
                                                      (("2"
                                                        (case
                                                         "2 * norm(u - v) * norm(w - v) * (^(u - v) * ^(w - v)) * (-k + 1) >= 0")
                                                        (("1"
                                                          (case
                                                           "sq(norm(u - v)) * (sq(k) - 1) > 0")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (case-replace
                                                             "k = 1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "sq(k) - 1 > 0")
                                                              (("1"
                                                                (mult-cases
                                                                 2)
                                                                (("1"
                                                                  (rewrite
                                                                   "sq_gt_0")
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (move-terms
                                                                 1
                                                                 l
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "sq")
                                                                  (("2"
                                                                    (mult-cases
                                                                     1)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (mult-cases
                                                           1)
                                                          (("2"
                                                            (name-replace
                                                             "nn"
                                                             "norm(u - v) * norm(w - v)")
                                                            (("2"
                                                              (mult-cases
                                                               1)
                                                              (("2"
                                                                (mult-cases
                                                                 1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -1 5)
                                (("2"
                                  (replace -2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (rewrite "normalize_scal")
                                      (("1"
                                        (expand "sign")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (replace -1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (cos_pos_len_le_imp_find_perp_ray_crossing_TCC1 0
  (cos_pos_len_le_imp_find_perp_ray_crossing_TCC1-2 nil 3874129020
   ("" (skeep*) (("" (assert) nil nil)) nil) nil shostak
   (cos_pos_len_le_imp_find_perp_ray_crossing subtype
    "(vectors_2D.-)(perp_crossings.u, perp_crossings.v)" "Nz_vector"))
  (cos_pos_len_le_imp_find_perp_ray_crossing_TCC1-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (cos_pos_len_le_imp_find_perp_ray_crossing subtype
    "(vectors_2D.-)(perp_crossings.u, perp_crossings.v)" "Nz_vector")))
 (cos_pos_len_le_imp_find_perp_ray_crossing_TCC2 0
  (cos_pos_len_le_imp_find_perp_ray_crossing_TCC2-2 nil 3874129020
   ("" (skeep*) (("" (assert) nil nil)) nil) nil shostak
   (cos_pos_len_le_imp_find_perp_ray_crossing subtype
    "(vectors_2D.-)(perp_crossings.w, perp_crossings.v)" "Nz_vector"))
  (cos_pos_len_le_imp_find_perp_ray_crossing_TCC2-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (cos_pos_len_le_imp_find_perp_ray_crossing subtype
    "(vectors_2D.-)(perp_crossings.w, perp_crossings.v)" "Nz_vector")))
 (cos_pos_len_le_imp_find_perp_ray_crossing_TCC3 0
  (cos_pos_len_le_imp_find_perp_ray_crossing_TCC3-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (cos_pos_len_le_imp_find_perp_ray_crossing subtype
    "perp_crossings.wv_seg" "segment_2d"))
  (cos_pos_len_le_imp_find_perp_ray_crossing_TCC3-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (cos_pos_len_le_imp_find_perp_ray_crossing subtype
    "perp_crossings.wv_seg" "segment_2d")))
 (cos_pos_len_le_imp_find_perp_ray_crossing 0
  (cos_pos_len_le_imp_find_perp_ray_crossing-1 nil 3874129020
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (expand "find_perp_ray_crossing")
          ((""
            (name-replace "lc" "line_crossing((# p1 := u,
                                          p2
                                            := u +
                                                perp_right(wv_seg`p2 - wv_seg`p1) #),
                                       wv_seg)" :hide? nil)
            (("1" (split 1)
              (("1" (flatten)
                (("1" (lift-if)
                  (("1" (ground)
                    (("1" (use "perp_lines_cross")
                      (("1" (assert) nil nil)) nil)
                     ("2" (expand "wv_seg" -2 (1 2))
                      (("2" (lemma "perp_line_crossing_is_perp_pt")
                        (("2" (inst - "wv_seg" "u")
                          (("2" (assert)
                            (("2"
                              (expand "find_perp_ray_line_crossing")
                              (("2"
                                (expand "wv_seg" -1)
                                (("2"
                                  (expand "wv_seg" -3)
                                  (("2"
                                    (replace -3)
                                    (("2"
                                      (rewrite
                                       "point_on_segment_has_offset")
                                      (("2"
                                        (expand "wv_seg" 1)
                                        (("2"
                                          (expand "vcos")
                                          (("2"
                                            (expand "^")
                                            (("2"
                                              (real-props)
                                              (("2"
                                                (case
                                                 "(w - v) * (w - v) > 0")
                                                (("1"
                                                  (inst
                                                   +
                                                   "perp_pt(u, v, w - v)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "perp_pt")
                                                      (("1"
                                                        (cross-mult 1)
                                                        (("1"
                                                          (mult-by
                                                           -3
                                                           "norm(w - v)")
                                                          (("1"
                                                            (rewrite
                                                             "sqv_rew")
                                                            (("1"
                                                              (rewrite
                                                               "sq_rew")
                                                              (("1"
                                                                (rewrite
                                                                 "sq_norm")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "perp_pt")
                                                    (("2"
                                                      (cross-mult 1)
                                                      (("2"
                                                        (replace
                                                         -6
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (real-props)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite "sqv_rew")
                                                  (("2"
                                                    (use "nz_sqv_gt_0")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (lift-if)
                  (("2" (ground)
                    (("2" (expand "wv_seg" -2 (1 2))
                      (("2" (lemma "perp_line_crossing_is_perp_pt")
                        (("2" (inst - "wv_seg" "u")
                          (("2" (assert)
                            (("2"
                              (expand "find_perp_ray_line_crossing")
                              (("2"
                                (expand "wv_seg" -1)
                                (("2"
                                  (expand "wv_seg" -3)
                                  (("2"
                                    (replace -3)
                                    (("2"
                                      (rewrite
                                       "point_on_segment_has_offset")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (expand "wv_seg" -2)
                                          (("2"
                                            (expand "vcos")
                                            (("2"
                                              (expand "^")
                                              (("2"
                                                (real-props)
                                                (("2"
                                                  (replace -2 -1)
                                                  (("2"
                                                    (cancel-add -1)
                                                    (("2"
                                                      (use
                                                       "scal_cancel")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (case
                                                           "(w - v) * (w - v) > 0")
                                                          (("1"
                                                            (expand
                                                             "perp_pt")
                                                            (("1"
                                                              (replace
                                                               -2
                                                               -5)
                                                              (("1"
                                                                (cross-mult
                                                                 -5)
                                                                (("1"
                                                                  (replace
                                                                   -8
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (rewrite
                                                                     "sqv_rew")
                                                                    (("1"
                                                                      (mult-by
                                                                       2
                                                                       "norm(w - v)")
                                                                      (("1"
                                                                        (rewrite
                                                                         "sq_rew")
                                                                        (("1"
                                                                          (rewrite
                                                                           "sq_norm")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "sqv_rew")
                                                            (("2"
                                                              (use
                                                               "sqv_eq_0")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "wv_seg") (("2" (propax) nil nil)) nil)
             ("3" (hide-all-but (1 4))
              (("3" (flatten)
                (("3" (move-terms -1 l 1)
                  (("3" (use "perp_right_nzvect_neq_zero")
                    (("1" (ground) nil nil)
                     ("2" (expand "wv_seg") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (parallel_segment_imp_points_on_same_side_TCC1 0
  (parallel_segment_imp_points_on_same_side_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (parallel_segment_imp_points_on_same_side subtype "perp_crossings.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= perp_crossings.p}"))
  (parallel_segment_imp_points_on_same_side_TCC1-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (parallel_segment_imp_points_on_same_side subtype "perp_crossings.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= perp_crossings.p}")))
 (parallel_segment_imp_points_on_same_side 0
  (parallel_segment_imp_points_on_same_side-1 nil 3874129020
   ("" (skeep*)
    (("" (expand "parallel?")
      (("" (rewrite* "point_on_segment_has_offset")
        (("" (skeep*)
          (("" (replace -1)
            (("" (rewrite* "cross_scales_1")
              (("" (replace -3 :hide? t)
                (("" (replace -4 :hide? t)
                  (("" (real-props)
                    (("" (flatten)
                      (("" (split -2)
                        (("1" (flatten)
                          (("1" (hide 3)
                            (("1" (assert)
                              (("1"
                                (equate
                                 "p + d * (q - p) - s`p1"
                                 "(p - s`p1) + d * (q - p)"
                                 t)
                                (("1"
                                  (equate
                                   "p + d!1 * (q - p) - s`p1"
                                   "(p - s`p1) + d!1 * (q - p)"
                                   t)
                                  (("1"
                                    (rewrite* "cross_distrib_add_2")
                                    (("1"
                                      (rewrite* "cross_scales_2")
                                      (("1"
                                        (rewrite "cross_self_zero")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (hide 2)
                            (("2" (assert)
                              (("2"
                                (equate
                                 "p + d * (q - p) - s`p1"
                                 "(p - s`p1) + d * (q - p)"
                                 t)
                                (("2"
                                  (equate
                                   "p + d!1 * (q - p) - s`p1"
                                   "(p - s`p1) + d!1 * (q - p)"
                                   t)
                                  (("2"
                                    (rewrite* "cross_distrib_add_2")
                                    (("2"
                                      (rewrite* "cross_scales_2")
                                      (("2"
                                        (rewrite "cross_self_zero")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (parallel_line_crossing_points_same_vectors 0
  (parallel_line_crossing_points_same_vectors-1 nil 3874129020
   ("" (skeep)
    (("" (skeep*)
      (("" (skoletin*)
        (("" (expand "find_perp_ray_line_crossing")
          (("" (rewrite* "line_crossing_eq_line_crossing_alt")
            (("1" (rewrite* "line_crossing_alt_eq_line_crossing_alt2")
              (("1" (expand "line_crossing_alt2")
                (("1" (apply (repeat (lift-if)))
                  (("1" (assert)
                    (("1" (ground)
                      (("1" (rewrite "cross_antisymmetric")
                        (("1" (use "cross_perp_right_pos")
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (typepred "e")
                        (("2" (use "parallel_defs_almost_same")
                          (("2" (assert)
                            (("2" (expand "parallel?")
                              (("2"
                                (skeep)
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (replace -3 :hide? t)
                                    (("2"
                                      (replace -3 :hide? t)
                                      (("2"
                                        (move-terms 3 r 3)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -3)
                                            (("2"
                                              (case-replace
                                               "(cross(e`p1 - q, e`p2 - e`p1) /
          cross(perp_right(e`p2 - e`p1), e`p2 - e`p1))
         * perp_right(e`p2 - e`p1)
        =
        (cross(e`p1 - (s`p1 + (k * nzk) * (e`p2 - e`p1)), e`p2 - e`p1) /
          cross(perp_right(e`p2 - e`p1), e`p2 - e`p1))
         * perp_right(e`p2 - e`p1)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide 4)
                                                (("2"
                                                  (replace -4)
                                                  (("2"
                                                    (equate
                                                     "e`p1 - (s`p1 + (k * nzk) * (e`p2 - e`p1))"
                                                     "(e`p1 - s`p1) - (k * nzk) * (e`p2 - e`p1)")
                                                    (("1"
                                                      (equate
                                                       "e`p1 - (s`p1 + (k!1 * nzk) * (e`p2 - e`p1))"
                                                       "(e`p1 - s`p1) - (k!1 * nzk) * (e`p2 - e`p1)")
                                                      (("1"
                                                        (rewrite*
                                                         "cross_distrib_sub_1")
                                                        (("1"
                                                          (rewrite*
                                                           "cross_scales_1")
                                                          (("1"
                                                            (rewrite
                                                             "cross_self_zero")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (hide-all-but -1)
                  (("2" (move-terms -1 l 1)
                    (("2" (use "perp_right_nzvect_neq_zero")
                      (("2" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("3" (flatten)
                (("3" (hide-all-but -1)
                  (("3" (move-terms -1 l 1)
                    (("3" (use "perp_right_nzvect_neq_zero")
                      (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (hide-all-but -1)
                (("2" (move-terms -1 l 1)
                  (("2" (use "perp_right_nzvect_neq_zero")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (flatten)
              (("3" (hide-all-but -1)
                (("3" (move-terms -1 l 1)
                  (("3" (use "perp_right_nzvect_neq_zero")
                    (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (parallel_lines_same_distance_at_all_points 0
  (parallel_lines_same_distance_at_all_points-1 nil 3874129020
   ("" (skeep)
    (("" (skeep*)
      (("" (expand "find_perp_ray_line_crossing")
        (("" (rewrite* "line_crossing_eq_line_crossing_alt")
          (("1" (rewrite* "line_crossing_alt_eq_line_crossing_alt2")
            (("1" (expand "line_crossing_alt2")
              (("1" (apply (repeat (lift-if)))
                (("1" (assert)
                  (("1" (ground)
                    (("1" (rewrite "cross_antisymmetric")
                      (("1" (use "cross_perp_right_pos")
                        (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (typepred "e")
                      (("2" (use "parallel_defs_almost_same")
                        (("2" (assert)
                          (("2" (expand "parallel?")
                            (("2" (skeep)
                              (("2"
                                (replace -1)
                                (("2"
                                  (replace -3 :hide? t)
                                  (("2"
                                    (replace -3 :hide? t)
                                    (("2"
                                      (equate
                                       "e`p1 - (s`p1 + k * (nzk * (e`p2 - e`p1)))"
                                       "(e`p1 - s`p1) - (k * nzk) * (e`p2 - e`p1)")
                                      (("1"
                                        (rewrite "cross_distrib_sub_1")
                                        (("1"
                                          (equate
                                           "e`p1 - (s`p1 + k!1 * (nzk * (e`p2 - e`p1)))"
                                           "(e`p1 - s`p1) - (k!1 * nzk) * (e`p2 - e`p1)")
                                          (("1"
                                            (name-replace
                                             "cc"
                                             "cross((e`p1 - s`p1) - (k!1 * nzk) * (e`p2 - e`p1),
                   e`p2 - e`p1)"
                                             :hide?
                                             nil)
                                            (("1"
                                              (rewrite
                                               "cross_distrib_sub_1"
                                               -1)
                                              (("1"
                                                (rewrite*
                                                 "cross_scales_1")
                                                (("1"
                                                  (rewrite
                                                   "cross_self_zero")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (hide-all-but -1)
                (("2" (move-terms -1 l 1)
                  (("2" (assert)
                    (("2" (use "perp_right_nzvect_neq_zero")
                      (("2" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (flatten)
              (("3" (hide-all-but -1)
                (("3" (move-terms -1 l 1)
                  (("3" (assert)
                    (("3" (use "perp_right_nzvect_neq_zero")
                      (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (hide-all-but -1)
              (("2" (move-terms -1 l 1)
                (("2" (assert)
                  (("2" (use "perp_right_nzvect_neq_zero")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (flatten)
            (("3" (hide-all-but -1)
              (("3" (move-terms -1 l 1)
                (("3" (assert)
                  (("3" (use "perp_right_nzvect_neq_zero")
                    (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (points_on_parallel_lines_rectangular 0
  (points_on_parallel_lines_rectangular-1 nil 3874129020
   ("" (skeep + t)
    (("" (skeep*)
      (("" (skoletin*)
        (("" (expand "find_perp_ray_line_crossing")
          (("" (rewrite* "line_crossing_eq_line_crossing_alt")
            (("1" (rewrite* "line_crossing_alt_eq_line_crossing_alt2")
              (("1" (expand "line_crossing_alt2")
                (("1" (apply (repeat (lift-if)))
                  (("1" (assert)
                    (("1"
                      (case "forall (v: Nz_vector): cross(perp_right(v), v) /= 0")
                      (("1" (inst-cp - "s`p2 - s`p1")
                        (("1" (inst - "e`p2 - e`p1")
                          (("1" (assert)
                            (("1" (use "parallel_defs_almost_same")
                              (("1"
                                (assert)
                                (("1"
                                  (hide -6)
                                  (("1"
                                    (move-terms 1 l 2)
                                    (("1"
                                      (move-terms 1 r 2)
                                      (("1"
                                        (replace -4)
                                        (("1"
                                          (replace -5)
                                          (("1"
                                            (cancel-add 1)
                                            (("1"
                                              (expand "parallel?")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (replace
                                                     -4
                                                     :hide?
                                                     t)
                                                    (("1"
                                                      (replace
                                                       -4
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (equate
                                                         "perp_right(nzk * (e`p2 - e`p1))"
                                                         "nzk * perp_right(e`p2 - e`p1)")
                                                        (("1"
                                                          (rewrite
                                                           "cross_scales")
                                                          (("1"
                                                            (name-replace
                                                             "pr"
                                                             "perp_right(e`p2 - e`p1)")
                                                            (("1"
                                                              (name-replace
                                                               "c"
                                                               "cross(pr, e`p2 - e`p1)")
                                                              (("1"
                                                                (rewrite
                                                                 "cross_scales_2")
                                                                (("1"
                                                                  (equate
                                                                   "e`p1 - (s`p1 + k * (nzk * (e`p2 - e`p1)))"
                                                                   "(e`p1 - s`p1) - k * (nzk * (e`p2 - e`p1))")
                                                                  (("1"
                                                                    (equate
                                                                     "s`p1 - (e`p1 + k!1 * (e`p2 - e`p1))"
                                                                     "(s`p1 - e`p1) - k!1 * (e`p2 - e`p1)")
                                                                    (("1"
                                                                      (name-replace*
                                                                       ("es1"
                                                                        "e`p1 - s`p1"
                                                                        "se1"
                                                                        "s`p1 - e`p1"))
                                                                      (("1"
                                                                        (rewrite*
                                                                         "cross_distrib_sub_1")
                                                                        (("1"
                                                                          (rewrite*
                                                                           "cross_scales_1")
                                                                          (("1"
                                                                            (rewrite
                                                                             "cross_self_zero")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "es1")
                                                                                (("1"
                                                                                  (expand
                                                                                   "se1")
                                                                                  (("1"
                                                                                    (equate
                                                                                     "cross((s`p1 - e`p1), e`p2 - e`p1)"
                                                                                     "-1 * cross((e`p1 - s`p1), e`p2 - e`p1)")
                                                                                    (("1"
                                                                                      (name-replace
                                                                                       "ces"
                                                                                       "cross((e`p1 - s`p1), e`p2 - e`p1)")
                                                                                      (("1"
                                                                                        (real-props)
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           +)
                                                                                          (("1"
                                                                                            (move-terms
                                                                                             3
                                                                                             l
                                                                                             1)
                                                                                            (("1"
                                                                                              (equate
                                                                                               "-1 * (ces * nzk * nzk) / (c * nzk * nzk) * pr"
                                                                                               "-(ces / c) * pr")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (skeep)
                          (("2" (rewrite "cross_antisymmetric")
                            (("2" (use "cross_perp_right_pos")
                              (("2" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (ground)
                  (("2" (move-terms -1 l 1)
                    (("2" (use "perp_right_nzvect_neq_zero")
                      (("2" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("3" (hide-all-but 1)
                (("3" (flatten)
                  (("3" (move-terms -1 l 1)
                    (("3" (use "perp_right_nzvect_neq_zero")
                      (("3" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (flatten)
                (("2" (move-terms -1 l 1)
                  (("2" (use "perp_right_nzvect_neq_zero")
                    (("2" (ground) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (hide-all-but 1)
              (("3" (flatten)
                (("3" (move-terms -1 l 1)
                  (("3" (use "perp_right_nzvect_neq_zero")
                    (("3" (ground) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (parallel_segment_offset_TCC1 0
  (parallel_segment_offset_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (assert)
      (("" (expand "find_perp_ray_line_crossing")
        (("" (use "line_crossing_on_line")
          (("1" (assert)
            (("1" (ground)
              (("1" (use "perp_lines_cross")
                (("1" (assert) (("1" (ground) nil nil)) nil)
                 ("2" (expand "point_on_segment?")
                  (("2" (assert) nil nil)) nil))
                nil)
               ("2" (skeep)
                (("2" (replace -1)
                  (("2" (replace -4)
                    (("2" (inst + "-k * norm(s`p2 - s`p1)")
                      (("2"
                        (equate "perp_right(^(s`p2 - s`p1))"
                         "1 / norm(s`p2 - s`p1) * perp_right(s`p2 - s`p1)")
                        (("1" (rewrite "scal_assoc")
                          (("1" (move-terms -2 r 2)
                            (("1" (replace -2 1 :dir rl)
                              (("1"
                                (hide-all-but 1)
                                (("1"
                                  (name-replace
                                   "n"
                                   "norm(s`p2 - s`p1)")
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (ground)
              (("2" (move-terms -1 l 1)
                (("2" (use "perp_right_nzvect_neq_zero")
                  (("2" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (parallel_segment_offset subtype "0"
    "{a: reals.real | EXISTS (b: reals.real): perp_crossings.e`p1 = (vectors_2D.+)((vectors_2D.+)(perp_crossings.s`p1, vectors_2D.*(a, vectors_2D.^((vectors_2D.-)(perp_crossings.s`p2, perp_crossings.s`p1)))), vectors_2D.*(b, vectors_cross_2d.perp_right(vectors_2D.^((vectors_2D.-)(perp_crossings.s`p2, perp_crossings.s`p1)))))}"))
  (parallel_segment_offset_TCC1-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (parallel_segment_offset subtype "0"
    "{a: reals.real | EXISTS (b: reals.real): perp_crossings.e`p1 = (vectors_2D.+)((vectors_2D.+)(perp_crossings.s`p1, vectors_2D.*(a, vectors_2D.^((vectors_2D.-)(perp_crossings.s`p2, perp_crossings.s`p1)))), vectors_2D.*(b, vectors_cross_2d.perp_right(vectors_2D.^((vectors_2D.-)(perp_crossings.s`p2, perp_crossings.s`p1)))))}")))
 (parallel_segment_offset_TCC2 0
  (parallel_segment_offset_TCC2-2 nil 3874129020
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (parallel_segment_offset subtype
    "(vectors_2D.-)(perp_crossings.xing_pt, perp_crossings.s`p1)"
    "Nz_vector"))
  (parallel_segment_offset_TCC2-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (parallel_segment_offset subtype
    "(vectors_2D.-)(perp_crossings.xing_pt, perp_crossings.s`p1)"
    "Nz_vector")))
 (parallel_segment_offset_TCC3 0
  (parallel_segment_offset_TCC3-2 nil 3874129020
   ("" (skeep)
    (("" (expand "find_perp_ray_line_crossing")
      (("" (use "line_crossing_on_line")
        (("1" (assert)
          (("1" (ground)
            (("1" (use "perp_lines_cross")
              (("1" (assert) (("1" (ground) nil nil)) nil)
               ("2" (expand "point_on_segment?")
                (("2" (assert) nil nil)) nil))
              nil)
             ("2" (skeep)
              (("2" (replace -1)
                (("2" (replace -3)
                  (("2" (replace -4 :dir rl)
                    (("2" (expand "^" 2 1)
                      (("2" (real-props)
                        (("2" (replace -4)
                          (("2" (replace -2 2)
                            (("2" (inst + "-k * norm(s`p2 - s`p1)")
                              (("2"
                                (equate
                                 "perp_right(^(s`p2 - s`p1))"
                                 "1 / norm(s`p2 - s`p1) * perp_right(s`p2 - s`p1)")
                                (("1"
                                  (rewrite "scal_assoc")
                                  (("1"
                                    (name-replace
                                     "n"
                                     "norm(s`p2 - s`p1)")
                                    (("1"
                                      (real-props)
                                      (("1"
                                        (hide-all-but 2)
                                        (("1"
                                          (name-replace
                                           "pr"
                                           "perp_right(s`p2 - s`p1)")
                                          (("1"
                                            (cancel-add 1)
                                            (("1"
                                              (grind-with-ext)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (ground)
            (("2" (move-terms -1 l 1)
              (("2" (use "perp_right_nzvect_neq_zero")
                (("2" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (parallel_segment_offset subtype "perp_crossings.dist"
    "{a: reals.real | EXISTS (b: reals.real): perp_crossings.e`p1 = (vectors_2D.+)((vectors_2D.+)(perp_crossings.s`p1, vectors_2D.*(a, vectors_2D.^((vectors_2D.-)(perp_crossings.s`p2, perp_crossings.s`p1)))), vectors_2D.*(b, vectors_cross_2d.perp_right(vectors_2D.^((vectors_2D.-)(perp_crossings.s`p2, perp_crossings.s`p1)))))}"))
  (parallel_segment_offset_TCC3-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (parallel_segment_offset subtype "perp_crossings.dist"
    "{a: reals.real | EXISTS (b: reals.real): perp_crossings.e`p1 = (vectors_2D.+)((vectors_2D.+)(perp_crossings.s`p1, vectors_2D.*(a, vectors_2D.^((vectors_2D.-)(perp_crossings.s`p2, perp_crossings.s`p1)))), vectors_2D.*(b, vectors_cross_2d.perp_right(vectors_2D.^((vectors_2D.-)(perp_crossings.s`p2, perp_crossings.s`p1)))))}")))
 (parallel_segment_offset_TCC4 0
  (parallel_segment_offset_TCC4-2 nil 3874129020
   ("" (skeep)
    (("" (expand "find_perp_ray_line_crossing")
      (("" (use "line_crossing_on_line")
        (("1" (assert)
          (("1" (ground)
            (("1" (use "perp_lines_cross")
              (("1" (assert) (("1" (ground) nil nil)) nil)
               ("2" (expand "point_on_segment?")
                (("2" (assert) nil nil)) nil))
              nil)
             ("2" (skeep)
              (("2" (replace -1)
                (("2" (case "^(s`p2 - s`p1) = -^(xing_pt - s`p1)")
                  (("1" (replace -4)
                    (("1" (replace -1 3)
                      (("1" (expand "^" 3 1)
                        (("1" (rewrite "scal_neg")
                          (("1" (replace -1 :dir rl)
                            (("1" (replace -3 3)
                              (("1"
                                (inst + "-k * norm(s`p2 - s`p1)")
                                (("1"
                                  (equate
                                   "perp_right(^(s`p2 - s`p1))"
                                   "1 / norm(s`p2 - s`p1) * perp_right(s`p2 - s`p1)")
                                  (("1"
                                    (rewrite "scal_assoc")
                                    (("1"
                                      (name-replace
                                       "n"
                                       "norm(s`p2 - s`p1)")
                                      (("1"
                                        (real-props)
                                        (("1"
                                          (hide-all-but 3)
                                          (("1"
                                            (name-replace
                                             "pr"
                                             "perp_right(s`p2 - s`p1)")
                                            (("1"
                                              (cancel-add 1)
                                              (("1"
                                                (grind-with-ext)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but (1 2))
                            (("2" (ground)
                              (("2"
                                (use "norm_eq_0")
                                (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replace -2 :dir rl)
                    (("2" (hide 4)
                      (("2" (rewrite "line_crossing_commutative")
                        (("1" (use "line_crossing_on_line")
                          (("1" (assert)
                            (("1" (ground)
                              (("1"
                                (rewrite "line_crossing_commutative")
                                (("1"
                                  (use "perp_lines_cross")
                                  (("1"
                                    (assert)
                                    (("1" (ground) nil nil))
                                    nil)
                                   ("2"
                                    (expand "point_on_segment?")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (ground)
                                    (("2"
                                      (move-terms -1 l 1)
                                      (("2"
                                        (use
                                         "perp_right_nzvect_neq_zero")
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (replace -2 + :dir rl)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (rewrite "normalize_scal")
                                        (("1"
                                          (expand "sign")
                                          (("1"
                                            (lift-if)
                                            (("1" (ground) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (ground)
                                          (("2"
                                            (replace -1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (ground)
                              (("2"
                                (move-terms -1 l 1)
                                (("2"
                                  (use "perp_right_nzvect_neq_zero")
                                  (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (ground)
                            (("2" (move-terms -1 l 1)
                              (("2"
                                (use "perp_right_nzvect_neq_zero")
                                (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (ground)
            (("2" (move-terms -1 l 1)
              (("2" (use "perp_right_nzvect_neq_zero")
                (("2" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (parallel_segment_offset subtype
    "(number_fields.-)(perp_crossings.dist)"
    "{a: reals.real | EXISTS (b: reals.real): perp_crossings.e`p1 = (vectors_2D.+)((vectors_2D.+)(perp_crossings.s`p1, vectors_2D.*(a, vectors_2D.^((vectors_2D.-)(perp_crossings.s`p2, perp_crossings.s`p1)))), vectors_2D.*(b, vectors_cross_2d.perp_right(vectors_2D.^((vectors_2D.-)(perp_crossings.s`p2, perp_crossings.s`p1)))))}"))
  (parallel_segment_offset_TCC4-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (parallel_segment_offset subtype
    "(number_fields.-)(perp_crossings.dist)"
    "{a: reals.real | EXISTS (b: reals.real): perp_crossings.e`p1 = (vectors_2D.+)((vectors_2D.+)(perp_crossings.s`p1, vectors_2D.*(a, vectors_2D.^((vectors_2D.-)(perp_crossings.s`p2, perp_crossings.s`p1)))), vectors_2D.*(b, vectors_cross_2d.perp_right(vectors_2D.^((vectors_2D.-)(perp_crossings.s`p2, perp_crossings.s`p1)))))}")))
 (parallel_segment_line_crossings_rectangular 0
  (parallel_segment_line_crossings_rectangular-1 nil 3874129020
   ("" (skeep)
    (("" (skoletin*)
      (("" (use "points_on_parallel_lines_rectangular")
        (("" (ground)
          (("1" (inst + "0") (("1" (assert) nil nil)) nil)
           ("2" (inst + "0") (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (parallel_segment_offset_semi_commutative_TCC1 0
  (parallel_segment_offset_semi_commutative_TCC1-2 nil 3874129020
   ("" (skeep + t) (("" (rewrite "parallel_commutative") nil nil)) nil)
   nil shostak
   (parallel_segment_offset_semi_commutative subtype "perp_crossings.e"
    "(segments_2d.parallel?(perp_crossings.s))"))
  (parallel_segment_offset_semi_commutative_TCC1-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (parallel_segment_offset_semi_commutative subtype "perp_crossings.e"
    "(segments_2d.parallel?(perp_crossings.s))")))
 (parallel_segment_offset_semi_commutative_TCC2 0
  (parallel_segment_offset_semi_commutative_TCC2-2 nil 3874129020
   ("" (skeep + t) (("" (rewrite "parallel_commutative") nil nil)) nil)
   nil shostak
   (parallel_segment_offset_semi_commutative subtype "perp_crossings.e"
    "(segments_2d.parallel?(perp_crossings.s))"))
  (parallel_segment_offset_semi_commutative_TCC2-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (parallel_segment_offset_semi_commutative subtype "perp_crossings.e"
    "(segments_2d.parallel?(perp_crossings.s))")))
 (parallel_segment_offset_semi_commutative 0
  (parallel_segment_offset_semi_commutative-1 nil 3874129020
   ("" (skeep + t)
    (("" (lift-if)
      (("" (expand "parallel_segment_offset")
        ((""
          (name-replace*
           ("xps" "find_perp_ray_line_crossing(e, s`p1)" "xpe"
            "find_perp_ray_line_crossing(s, e`p1)"))
          (("" (case-replace "xps = e`p1 + s`p1 - xpe")
            (("1" (assert)
              (("1" (equate "norm(s`p1 - xpe)" "norm(xpe - s`p1)")
                (("1" (case "^(s`p2 - s`p1) = -^(s`p2 - s`p1)")
                  (("1" (hide-all-but -1)
                    (("1" (use "sub_zero_left")
                      (("1" (replace -1 :dir rl :hide? t)
                        (("1" (move-terms -1 r 2)
                          (("1" (factor -1 l)
                            (("1" (use "scal_eq_zero")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (use "parallel_normalized_cases")
                    (("2" (ground)
                      (("1" (apply (repeat (lift-if)))
                        (("1" (split 1)
                          (("1" (flatten)
                            (("1" (cancel-add -1)
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (flatten)
                            (("2" (ground)
                              (("1"
                                (replace -1)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (case-replace
                                 "^(s`p1 - xpe) = -^(s`p2 - s`p1)")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide-all-but (-1 1))
                                  (("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (replace -1)
                                (("3" (assert) nil nil))
                                nil)
                               ("4"
                                (replace -1)
                                (("4"
                                  (equate
                                   "^(s`p1 - xpe)"
                                   "-^(xpe - s`p1)")
                                  (("1"
                                    (lemma
                                     "parallel_normalized_vector_cases")
                                    (("1"
                                      (inst
                                       -
                                       "s"
                                       "(# p1 := s`p1, p2 := xpe #)")
                                      (("1"
                                        (ground)
                                        (("1"
                                          (hide -4)
                                          (("1"
                                            (expand
                                             "find_perp_ray_line_crossing")
                                            (("1"
                                              (rewrite
                                               "line_crossing_commutative")
                                              (("1"
                                                (use
                                                 "line_crossing_on_line")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (rewrite
                                                       "line_crossing_commutative")
                                                      (("1"
                                                        (use
                                                         "perp_lines_cross")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "point_on_segment?")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (move-terms
                                                             -1
                                                             l
                                                             1)
                                                            (("2"
                                                              (use
                                                               "perp_right_nzvect_neq_zero")
                                                              (("2"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (replace
                                                           -4
                                                           1
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (case-replace
                                                               "k = 0")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (1 2))
                                                                (("2"
                                                                  (expand
                                                                   "parallel?")
                                                                  (("2"
                                                                    (inst
                                                                     +
                                                                     "1 / k")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (move-terms
                                                       -1
                                                       l
                                                       1)
                                                      (("2"
                                                        (use
                                                         "perp_right_nzvect_neq_zero")
                                                        (("2"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (move-terms -1 l 1)
                                                    (("2"
                                                      (use
                                                       "perp_right_nzvect_neq_zero")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (expand "^")
                                      (("2"
                                        (rewrite "norm_sym")
                                        (("2"
                                          (cross-mult 1)
                                          (("2"
                                            (rewrite "scal_neg")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (apply (repeat (lift-if)))
                        (("2" (split 2)
                          (("1" (flatten)
                            (("1" (cancel-add -1)
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (flatten)
                            (("2" (ground)
                              (("1"
                                (replace -1)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (case-replace
                                 "^(xpe - s`p1) = -^(e`p2 - e`p1)")
                                (("1"
                                  (replace -3)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-1 1))
                                  (("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (replace -1)
                                (("3" (assert) nil nil))
                                nil)
                               ("4"
                                (case-replace
                                 "^(s`p1 - xpe) = -^(s`p2 - s`p1)")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide-all-but (-1 1))
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (split 2)
                  (("1" (flatten)
                    (("1" (apply (repeat (lift-if)))
                      (("1" (split 1)
                        (("1" (flatten)
                          (("1" (cancel-add -1)
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (rewrite "norm_sym") nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (apply (repeat (lift-if)))
                      (("2" (split 2)
                        (("1" (flatten)
                          (("1" (cancel-add -1)
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (rewrite "norm_sym") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2"
                (lemma "parallel_segment_line_crossings_rectangular")
                (("2" (inst - "e" "s")
                  (("2" (assert)
                    (("2" (replace -2)
                      (("2" (replace -3)
                        (("2" (move-terms -1 l 2)
                          (("2" (assert)
                            (("2" (replace -1)
                              (("2"
                                (hide-all-but 1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (parallel_perp_crossing_on_segment 0
  (parallel_perp_crossing_on_segment-1 nil 3874129020
   ("" (skeep)
    (("" (typepred "e")
      (("" (skoletin*)
        (("" (flatten)
          (("" (typepred "a")
            (("" (skeep)
              (("" (expand "find_perp_ray_crossing")
                (("" (lift-if)
                  (("" (use "perp_lines_cross")
                    (("" (assert)
                      (("" (flatten)
                        (("" (lemma "perp_line_crossing_on_other_line")
                          ((""
                            (inst - "s" "e" "q" "a / norm(s`p2 - s`p1)"
                             "b / norm(s`p2 - s`p1)")
                            (("" (assert)
                              ((""
                                (split -1)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (equate
                                     "b / norm(s`p2 - s`p1) * perp_right(s`p2 - s`p1)"
                                     "b * perp_right(^(s`p2 - s`p1))")
                                    (("1"
                                      (replace -2 -3)
                                      (("1"
                                        (replace -3 2)
                                        (("1"
                                          (equate
                                           "s`p1 + a * ^(s`p2 - s`p1) +
                                                    b * perp_right(^(s`p2 - s`p1))
                                                    + d * dir_e
                                                    - b * perp_right(^(s`p2 - s`p1))"
                                           "s`p1 + a * ^(s`p2 - s`p1) +  d * dir_e")
                                          (("1"
                                            (case-replace
                                             "dir_e = dir_s")
                                            (("1"
                                              (replace -9 :dir rl)
                                              (("1"
                                                (split 2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (rewrite
                                                     "point_on_segment_has_norm_offset")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (replace
                                                         -11
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (cancel-add
                                                           -1)
                                                          (("1"
                                                            (equate
                                                             "a * (dir_s) + d * dir_s"
                                                             "(a + d) * dir_s")
                                                            (("1"
                                                              (use
                                                               "scal_cancel")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (rewrite
                                                     "point_on_segment_has_norm_offset")
                                                    (("2"
                                                      (inst + "a + d")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace
                                                           -11
                                                           1
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (cancel-add
                                                             1)
                                                            (("1"
                                                              (distrib
                                                               1)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "dir_e = -dir_s")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (replace -9 :dir rl)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (equate
                                                       "s`p1 + a * (dir_s) + d * -dir_s"
                                                       "s`p1 + (a - d) * dir_s")
                                                      (("1"
                                                        (split 3)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (rewrite
                                                             "point_on_segment_has_norm_offset")
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (replace
                                                                 -11
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (cancel-add
                                                                   -1)
                                                                  (("1"
                                                                    (use
                                                                     "scal_cancel")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (rewrite
                                                             "point_on_segment_has_norm_offset")
                                                            (("2"
                                                              (inst
                                                               +
                                                               "a - d")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "parallel_normalized_cases")
                                                (("2"
                                                  (inst - "e" "s")
                                                  (("1"
                                                    (ground)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "parallel_commutative")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (name-replace
                                               "ss"
                                               "^(s`p2 - s`p1)")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (expand "^")
                                        (("2"
                                          (name-replace
                                           "n"
                                           "norm(s`p2 - s`p1)")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst + "d / norm(e`p2 - e`p1)")
                                  (("2"
                                    (replace -6 -2)
                                    (("2"
                                      (expand "^" -2)
                                      (("2" (real-props) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (expand "^" -1)
                                  (("3"
                                    (hide-all-but (-1 1))
                                    (("3"
                                      (name-replace
                                       "n"
                                       "norm(s`p2 - s`p1)")
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (parallel_perp_crossing_is_p1_plus_offset 0
  (parallel_perp_crossing_is_p1_plus_offset-1 nil 3874129020
   ("" (skeep)
    (("" (expand "parallel_segment_offset")
      (("" (lift-if)
        (("" (ground)
          (("1"
            (name-replace "xp" "find_perp_ray_line_crossing(s, e`p1)")
            (("1" (replace -1 :dir rl :hide? t)
              (("1" (expand "^")
                (("1" (real-props) (("1" (grind-with-ext) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2"
            (name-replace "xp" "find_perp_ray_line_crossing(s, e`p1)")
            (("2" (case "-^(xp - s`p1) = ^(s`p2 - s`p1)")
              (("1" (replace -1 :dir rl :hide? t)
                (("1" (rewrite "scal_neg")
                  (("1" (expand "^" 2)
                    (("1" (real-props)
                      (("1" (hide 1) (("1" (grind-with-ext) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "parallel_normalized_vector_cases")
                (("2" (inst - "(# p1 := s`p1, p2 := xp #)" "s")
                  (("1" (ground)
                    (("1" (replace -1) (("1" (assert) nil nil)) nil)
                     ("2" (hide-all-but (1 5))
                      (("2" (expand "xp")
                        (("2" (expand "find_perp_ray_line_crossing")
                          (("2" (use "line_crossing_commutative")
                            (("1" (replace -1 :hide? t)
                              (("1"
                                (use "line_crossing_on_line")
                                (("1"
                                  (assert)
                                  (("1"
                                    (ground)
                                    (("1"
                                      (use "perp_lines_cross")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (ground)
                                          (("1"
                                            (rewrite
                                             "line_crossing_commutative")
                                            (("1"
                                              (hide-all-but 1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (move-terms -1 l 1)
                                                  (("1"
                                                    (use
                                                     "perp_right_nzvect_neq_zero")
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (replace -1 :hide? t)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "parallel?")
                                            (("2"
                                              (inst + "k")
                                              (("2"
                                                (ground)
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (move-terms -1 l 1)
                                      (("2"
                                        (use
                                         "perp_right_nzvect_neq_zero")
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (flatten)
                                (("2"
                                  (move-terms -1 l 1)
                                  (("2"
                                    (use "perp_right_nzvect_neq_zero")
                                    (("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (ground) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (parallel_seg_with_no_xing_imp_other_seg_has_0_or_2_xing 0
  (parallel_seg_with_no_xing_imp_other_seg_has_0_or_2_xing-1 nil
   3874129020
   ("" (skeep + t)
    (("" (lemma "parallel_perp_crossing_on_segment")
      (("" (inst-cp - "e" "s" "s`p1" "0")
        (("1" (inst-cp - "e" "s" "s`p2" "length(s)")
          (("1" (assert)
            (("1" (split -2)
              (("1" (assert)
                (("1" (inst-cp - "s" "e" "e`p1" "0")
                  (("1" (inst - "s" "e" "e`p2" "length(e)")
                    (("1" (assert)
                      (("1" (split -1)
                        (("1" (assert)
                          (("1"
                            (lemma
                             "parallel_segment_offset_semi_commutative")
                            (("1" (inst - "e" "s")
                              (("1"
                                (lift-if)
                                (("1"
                                  (split -1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -2)
                                        (("1"
                                          (name-replace
                                           "pso"
                                           "parallel_segment_offset(s, e)")
                                          (("1"
                                            (split 3)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split 4)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (flatten)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "parallel_commutative")
                                nil
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (expand "length")
                            (("2" (expand "^")
                              (("2"
                                (real-props)
                                (("2" (move-terms 1 r 1) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (expand "length")
                  (("2" (expand "^")
                    (("2" (real-props)
                      (("2" (move-terms 1 r 1) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (rewrite "parallel_commutative") nil nil))
          nil)
         ("2" (rewrite "parallel_commutative") nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (parallel_segments_point_distance_bound 0
  (parallel_segments_point_distance_bound-1 nil 3874129020
   ("" (skeep)
    (("" (expand "parallel?")
      (("" (rewrite* "point_on_segment_has_norm_offset")
        (("" (skeep*)
          (("" (div-by -2 "nzk")
            (("" (replace -1 :dir rl :hide? t)
              (("" (replace -1 :dir rl :hide? t)
                (("" (replace -1 :hide? t)
                  (("" (replace -2 :hide? t)
                    (("" (replace -3 :hide? t)
                      ((""
                        (equate (! 1 r 1)
                         "(d - a - d!1 / nzk) * v + b * perp_left(v)")
                        (("1" (rewrite "sq_le" 1 :dir rl)
                          (("1" (rewrite "sq_norm")
                            (("1" (rewrite "pythagorean")
                              (("1"
                                (rewrite* "sqv_scal")
                                (("1"
                                  (rewrite "sqv_normalized_eq_1")
                                  (("1"
                                    (rewrite "sqv_normalized_eq_1")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (rewrite
                                         "norm_perp_left_is_norm_left")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (projected_point_preserves_distance_ordering 0
  (projected_point_preserves_distance_ordering-1 nil 3874129020
   ("" (skeep + t)
    (("" (expand "point_on_segment?")
      (("" (skoletin)
        (("" (lemma "pythagorean")
          (("" (inst-cp - "u - p" "r - u")
            (("" (inst - "u - q" "r - u")
              (("" (split -1)
                (("1" (split -2)
                  (("1" (equate "u - p + (r - u)" "r - p")
                    (("1" (equate "u - q + (r - u)" "r - q")
                      (("1" (lemma "norm_le_sqv")
                        (("1" (inst-cp - "u - q" "u - p")
                          (("1" (inst - "r - q" "r - p")
                            (("1" (ground) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (lemma "perp_line_orthogonal")
                    (("2" (inst - "s" "p" "r") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "perp_line_orthogonal")
                  (("2" (inst - "s" "q" "r") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (perp_line_crossing_point_val_TCC1 0
  (perp_line_crossing_point_val_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (use "no_line_crossing_eqv_parallel_or_collinear")
      (("" (assert) nil nil)) nil))
    nil)
   nil shostak
   (perp_line_crossing_point_val subtype
    "perp_crossings.line_crossing(perp_crossings.s, perp_crossings.e)"
    "(Maybe[point_2d].some?)"))
  (perp_line_crossing_point_val_TCC1-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (perp_line_crossing_point_val subtype
    "perp_crossings.line_crossing(perp_crossings.s, perp_crossings.e)"
    "(Maybe[point_2d].some?)")))
 (perp_line_crossing_point_val_TCC2 0
  (perp_line_crossing_point_val_TCC2-2 nil 3874129020
   ("" (skeep*) (("" (assert) nil nil)) nil) nil shostak
   (perp_line_crossing_point_val subtype
    "(vectors_2D.-)(perp_crossings.v, perp_crossings.xing_pt)"
    "Nz_vector"))
  (perp_line_crossing_point_val_TCC2-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (perp_line_crossing_point_val subtype
    "(vectors_2D.-)(perp_crossings.v, perp_crossings.xing_pt)"
    "Nz_vector")))
 (perp_line_crossing_point_val 0
  (perp_line_crossing_point_val-1 nil 3874129020
   ("" (skeep + t)
    (("" (skoletin*)
      (("" (flatten)
        (("" (use "perp_line_crossing_is_perp_pt")
          (("" (assert)
            (("" (replace -1 :hide? t)
              (("" (expand "^")
                (("" (replace -4 :dir rl :hide? t)
                  (("" (name-replace "evec" "e`p2 - e`p1")
                    (("" (expand "perp_pt")
                      (("" (replace -2)
                        (("" (replace -3)
                          (("" (replace -1)
                            (("" (expand "vcos")
                              ((""
                                (real-props)
                                ((""
                                  (equate
                                   "norm(evec) * norm(evec)"
                                   "evec * evec")
                                  (("1"
                                    (lemma "line_crossing_on_line")
                                    (("1"
                                      (inst - "e" "s")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (use
                                           "line_crossing_commutative")
                                          (("1"
                                            (replace -1 :hide? t)
                                            (("1"
                                              (replace -5 :dir rl)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (rewrite
                                                   "no_line_crossing_eqv_parallel_or_collinear")
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (replace -1 2)
                                                    (("2"
                                                      (hide-all-but 2)
                                                      (("2"
                                                        (cancel-add 1)
                                                        (("2"
                                                          (equate
                                                           "(evec * (v - (e`p1 + k * (e`p2 - e`p1)))) * c / (evec * evec * (c))"
                                                           "(evec * ((v - e`p1) - (k * (e`p2 - e`p1)))) / (evec * evec)")
                                                          (("1"
                                                            (rewrite
                                                             "dot_sub_right")
                                                            (("1"
                                                              (equate
                                                               "(evec * (v - e`p1) - k * (evec * (e`p2 - e`p1))) / (evec * evec) *
                 evec"
                                                               "((evec * (v - e`p1) / (evec * evec)) - (k * (evec * (e`p2 - e`p1))) / (evec * evec)) *
                 evec")
                                                              (("1"
                                                                (equate
                                                                 "((evec * (v - e`p1) / (evec * evec)) -
                    (k * (evec * (e`p2 - e`p1))) / (evec * evec))
                   * evec"
                                                                 "((v - e`p1) * evec / (evec * evec)) * evec -
                    ((k * (evec * (e`p2 - e`p1))) / (evec * evec))
                   * evec")
                                                                (("1"
                                                                  (cancel-add
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "evec")
                                                                    (("1"
                                                                      (name-replace
                                                                       "ee"
                                                                       "e`p2 - e`p1")
                                                                      (("1"
                                                                        (equate
                                                                         "((k * (ee * ee)) / (ee * ee))"
                                                                         "k")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (cancel-by
                                                                             1
                                                                             "k")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (equate
                                                               "evec * evec"
                                                               "sqv(evec)")
                                                              (("1"
                                                                (name-replace
                                                                 "evk"
                                                                 "(evec * (v - (e`p1 + k * (e`p2 - e`p1))))")
                                                                (("1"
                                                                  (real-props)
                                                                  (("1"
                                                                    (cancel-by
                                                                     1
                                                                     "c")
                                                                    (("1"
                                                                      (expand
                                                                       "evk")
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (expand "norm")
                                      (("2"
                                        (rewrite "sqrt_times" :dir rl)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (perp_line_crossing_at_line_crossing_self 0
  (perp_line_crossing_at_line_crossing_self-1 nil 3874129020
   ("" (skeep + t)
    (("" (skoletin)
      (("" (use "perp_line_crossing_is_perp_pt")
        (("" (assert)
          (("" (replace -1 :hide? t)
            (("" (expand "perp_pt")
              (("" (use "line_crossing_commutative")
                (("" (lemma "line_crossing_on_line")
                  (("" (inst - "e" "s")
                    (("" (assert)
                      (("" (replace -2 :dir rl)
                        ((""
                          (rewrite
                           "no_line_crossing_eqv_parallel_or_collinear")
                          (("" (skeep)
                            (("" (replace -3 :dir rl)
                              ((""
                                (replace -1 +)
                                (("" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (closer_point_imp_closer_perp_crossing 0
  (closer_point_imp_closer_perp_crossing-1 nil 3874129020
   ("" (skeep + t)
    (("" (expand "point_on_segment?")
      (("" (skoletin*)
        (("" (flatten)
          (("" (case "u = xing_pt")
            (("1" (replace -1) (("1" (assert) nil nil)) nil)
             ("2"
              (case "^(u - xing_pt) = ^(v - xing_pt) or
           ^(u - xing_pt) = -^(v - xing_pt)")
              (("1" (lemma "perp_line_crossing_point_val")
                (("1" (inst-cp - "s" "e" "v")
                  (("1" (inst - "s" "e" "u")
                    (("1" (assert)
                      (("1" (replace -7 :dir rl)
                        (("1"
                          (case "forall (r: point_2d): norm(xing_pt - r) = norm(r - xing_pt)")
                          (("1" (rewrite -1)
                            (("1" (rewrite -1)
                              (("1"
                                (rewrite -1)
                                (("1"
                                  (rewrite -1)
                                  (("1"
                                    (replace -2 :hide? t)
                                    (("1"
                                      (replace -2 :hide? t)
                                      (("1"
                                        (replace -4 :hide? t)
                                        (("1"
                                          (replace -4 :hide? t)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -2)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (name-replace
                                                   "cos"
                                                   "vcos(^(e`p2 - e`p1), ^(v - xing_pt))")
                                                  (("1"
                                                    (split 4)
                                                    (("1"
                                                      (name-replace*
                                                       ("cu"
                                                        "norm(u - xing_pt)"
                                                        "cv"
                                                        "norm(v - xing_pt)"))
                                                      (("1"
                                                        (lemma
                                                         "segment_far_endpoint_length")
                                                        (("1"
                                                          (inst-cp
                                                           -
                                                           "(# p1 := xing_pt, p2 := u #)")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "(# p1 := xing_pt, p2 := v #)")
                                                            (("1"
                                                              (expand
                                                               "length")
                                                              (("1"
                                                                (replace
                                                                 -5)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   1
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (replace
                                                                         -2)
                                                                        (("1"
                                                                          (name-replace*
                                                                           ("ee"
                                                                            "^(e`p2 - e`p1) "
                                                                            "vx"
                                                                            "^(v - xing_pt)"))
                                                                          (("1"
                                                                            (equate
                                                                             (!
                                                                              1
                                                                              l
                                                                              1)
                                                                             "cu * (cos * ee - vx)")
                                                                            (("1"
                                                                              (equate
                                                                               (!
                                                                                1
                                                                                r
                                                                                1)
                                                                               "cv * (cos * ee - vx)")
                                                                              (("1"
                                                                                (rewrite*
                                                                                 "norm_scal")
                                                                                (("1"
                                                                                  (expand
                                                                                   "abs")
                                                                                  (("1"
                                                                                    (mult-cases
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (rewrite*
                                                       "norm_scal")
                                                      (("2"
                                                        (expand "abs")
                                                        (("2"
                                                          (apply
                                                           (repeat
                                                            (lift-if)))
                                                          (("2"
                                                            (split 1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (mult-cases
                                                                 -1)
                                                                (("1"
                                                                  (ground)
                                                                  (("1"
                                                                    (cancel-by
                                                                     1
                                                                     "cos")
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (mult-cases
                                                                     1)
                                                                    (("2"
                                                                      (use
                                                                       "norm_eq_0")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (split
                                                                 2)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (mult-cases
                                                                     -1)
                                                                    (("1"
                                                                      (mult-cases
                                                                       2)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (cancel-by
                                                                     2
                                                                     "cos")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replace -1)
                                                (("2"
                                                  (equate
                                                   "vcos(^(e`p2 - e`p1), -^(v - xing_pt))"
                                                   "-vcos(^(e`p2 - e`p1), ^(v - xing_pt))")
                                                  (("1"
                                                    (name-replace
                                                     "cos"
                                                     "vcos(^(e`p2 - e`p1), ^(v - xing_pt))")
                                                    (("1"
                                                      (split 4)
                                                      (("1"
                                                        (name-replace*
                                                         ("cu"
                                                          "norm(u - xing_pt)"
                                                          "cv"
                                                          "norm(v - xing_pt)"))
                                                        (("1"
                                                          (lemma
                                                           "segment_far_endpoint_length")
                                                          (("1"
                                                            (inst-cp
                                                             -
                                                             "(# p1 := xing_pt, p2 := u #)")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "(# p1 := xing_pt, p2 := v #)")
                                                              (("1"
                                                                (expand
                                                                 "length")
                                                                (("1"
                                                                  (replace
                                                                   -5)
                                                                  (("1"
                                                                    (rewrite
                                                                     "scal_neg")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       1
                                                                       :hide?
                                                                       t)
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         1
                                                                         :hide?
                                                                         t)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (replace
                                                                             -2)
                                                                            (("1"
                                                                              (name-replace*
                                                                               ("ee"
                                                                                "^(e`p2 - e`p1) "
                                                                                "vx"
                                                                                "^(v - xing_pt)"))
                                                                              (("1"
                                                                                (equate
                                                                                 (!
                                                                                  1
                                                                                  l
                                                                                  1)
                                                                                 "-cu * (cos * ee - vx)")
                                                                                (("1"
                                                                                  (equate
                                                                                   (!
                                                                                    1
                                                                                    r
                                                                                    1)
                                                                                   "cv * (cos * ee - vx)")
                                                                                  (("1"
                                                                                    (rewrite*
                                                                                     "norm_scal")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "abs")
                                                                                      (("1"
                                                                                        (ground)
                                                                                        (("1"
                                                                                          (mult-cases
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite*
                                                         "norm_scal")
                                                        (("2"
                                                          (expand
                                                           "abs")
                                                          (("2"
                                                            (apply
                                                             (repeat
                                                              (lift-if)))
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (mult-cases
                                                                   -1)
                                                                  (("1"
                                                                    (ground)
                                                                    (("1"
                                                                      (cancel-by
                                                                       1
                                                                       "cos")
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (cancel-by
                                                                       2
                                                                       "cos")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (split
                                                                   2)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (mult-cases
                                                                       -1)
                                                                      (("1"
                                                                        (cancel-by
                                                                         1
                                                                         "cos")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (mult-cases
                                                                       1)
                                                                      (("2"
                                                                        (mult-cases
                                                                         3)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (expand "vcos")
                                                      (("2"
                                                        (rewrite
                                                         "dot_neg_right")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (rewrite "norm_sym") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (use "line_crossing_on_line")
                  (("2" (assert)
                    (("2" (split -1)
                      (("1"
                        (rewrite
                         "no_line_crossing_eqv_parallel_or_collinear")
                        nil nil)
                       ("2" (skeep)
                        (("2" (replace -5 :dir rl)
                          (("2"
                            (rewrite* "point_on_segment_has_offset")
                            (("2" (skeep*)
                              (("2"
                                (replace -1 (1 2))
                                (("2"
                                  (replace -6 (1 2))
                                  (("2"
                                    (replace -8 (1 2))
                                    (("2"
                                      (equate
                                       (! 1 l 1)
                                       "(d - k) * (s`p2 - s`p1)")
                                      (("1"
                                        (equate
                                         (! 1 r 1)
                                         "(d!1 - k) * (s`p2 - s`p1)")
                                        (("1"
                                          (rewrite* "normalize_scal")
                                          (("1"
                                            (equate
                                             (! 2 r)
                                             "(-sign(d!1 - k)) * ^(s`p2 - s`p1)")
                                            (("1"
                                              (hide-all-but (1 2))
                                              (("1"
                                                (name-replace
                                                 "ss"
                                                 "^(s`p2 - s`p1)")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (ground) nil nil) ("4" (ground) nil nil)
               ("5" (propax) nil nil) ("6" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (point_on_seg_farther_from_perp_xing 0
  (point_on_seg_farther_from_perp_xing-1 nil 3874129020
   ("" (skeep + t)
    (("" (skoletin*)
      (("" (flatten)
        (("" (expand "point_on_segment?")
          (("" (copy -2)
            (("" (expand "find_perp_ray_line_crossing" -1)
              (("" (case "u + perp_right(e`p2 - e`p1) = u")
                (("1" (hide-all-but -1)
                  (("1" (move-terms -1 l 1)
                    (("1" (use "perp_right_nzvect_neq_zero")
                      (("1" (ground) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (rewrite "line_crossing_commutative")
                  (("2" (use "line_crossing_on_line")
                    (("1" (assert)
                      (("1" (ground)
                        (("1" (rewrite "line_crossing_commutative")
                          (("1" (use "perp_lines_cross")
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (skeep)
                          (("2" (replace -2 :dir rl)
                            (("2"
                              (lemma
                               "projected_point_preserves_distance_ordering")
                              (("2"
                                (inst - "e" "ov" "v" "u")
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -5 :dir rl)
                                    (("1"
                                      (equate
                                       "norm(u - ov) >= norm(u - v)"
                                       "norm(ov - u) >= norm(v - u)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand
                                           "find_perp_ray_crossing")
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (use
                                                 "perp_lines_cross")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite
                                                 "line_crossing_commutative"
                                                 1)
                                                (("2"
                                                  (replace -3 :dir rl)
                                                  (("2"
                                                    (rewrite*
                                                     "point_on_segment_has_offset")
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (case
                                                         "0 <= k <= 1")
                                                        (("1"
                                                          (inst + "k")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace -9)
                                                          (("2"
                                                            (replace
                                                             -2
                                                             4)
                                                            (("2"
                                                              (equate
                                                               (!
                                                                4
                                                                r
                                                                1)
                                                               "(k - d) * (e`p2 - e`p1)")
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 -1)
                                                                (("1"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (case-replace
                                                                     "v = e`p1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (rewrite*
                                                                         "norm_scal")
                                                                        (("1"
                                                                          (expand
                                                                           "abs")
                                                                          (("1"
                                                                            (mult-cases
                                                                             4)
                                                                            (("1"
                                                                              (expand
                                                                               "abs")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (case-replace
                                                                       "v = e`p2")
                                                                      (("1"
                                                                        (case-replace
                                                                         "ov = e`p1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (equate
                                                                             "e`p1 + k * (e`p2 - e`p1) - e`p2"
                                                                             "(k - 1) * (e`p2 - e`p1)")
                                                                            (("1"
                                                                              (rewrite*
                                                                               "norm_scal")
                                                                              (("1"
                                                                                (expand
                                                                                 "abs")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "opposite_endpoint")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "segment_endpoint?")
                                                                        (("2"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (case-replace
                                                                     "v = e`p1")
                                                                    (("1"
                                                                      (case-replace
                                                                       "ov = e`p2")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (equate
                                                                           "e`p1 + k * (e`p2 - e`p1) - e`p2"
                                                                           "(k - 1) * (e`p2 - e`p1)")
                                                                          (("1"
                                                                            (rewrite*
                                                                             "norm_scal")
                                                                            (("1"
                                                                              (expand
                                                                               "abs")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "opposite_endpoint")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (case-replace
                                                                       "v = e`p2")
                                                                      (("1"
                                                                        (case-replace
                                                                         "ov = e`p1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (equate
                                                                             "e`p1 + k * (e`p2 - e`p1) - e`p2"
                                                                             "(k - 1) * (e`p2 - e`p1)")
                                                                            (("1"
                                                                              (rewrite*
                                                                               "norm_scal")
                                                                              (("1"
                                                                                (expand
                                                                                 "abs")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (equate
                                                                                     "k * norm((e`p2 - e`p1))"
                                                                                     "norm((e`p2 - e`p1)) * k"
                                                                                     (assert))
                                                                                    (("1"
                                                                                      (cancel-add
                                                                                       -3)
                                                                                      (("1"
                                                                                        (cancel-add
                                                                                         5)
                                                                                        (("1"
                                                                                          (move-terms
                                                                                           5
                                                                                           l
                                                                                           1)
                                                                                          (("1"
                                                                                            (move-terms
                                                                                             5
                                                                                             r
                                                                                             1)
                                                                                            (("1"
                                                                                              (elim-unary
                                                                                               5)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (mult-cases
                                                                                                   5)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "abs")
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "opposite_endpoint")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "segment_endpoint?")
                                                                        (("2"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "point_on_segment?" +)
                                  (("2"
                                    (rewrite
                                     "point_on_segment_has_offset"
                                     +)
                                    (("2"
                                      (expand "segment_endpoint?")
                                      (("2"
                                        (inst-cp + "0")
                                        (("2"
                                          (inst + "1")
                                          (("2"
                                            (hide-all-but (-7 1 2))
                                            (("2"
                                              (ground)
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (hide-all-but 2)
                                                  (("2"
                                                    (grind-with-ext)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (expand "point_on_segment?" +)
                                  (("3"
                                    (rewrite
                                     "point_on_segment_has_offset"
                                     +)
                                    (("3"
                                      (expand "segment_endpoint?")
                                      (("3"
                                        (inst-cp + "0")
                                        (("3"
                                          (inst + "1")
                                          (("3"
                                            (hide-all-but (-5 -7 1 2))
                                            (("3"
                                              (expand
                                               "opposite_endpoint")
                                              (("3"
                                                (ground)
                                                (("3"
                                                  (replace -2)
                                                  (("3"
                                                    (hide-all-but 2)
                                                    (("3"
                                                      (grind-with-ext)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (ground) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (perp_crossing_at_endpoint_is_closest_TCC1 0
  (perp_crossing_at_endpoint_is_closest_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (perp_crossing_at_endpoint_is_closest subtype
    "perp_crossings.find_perp_ray_crossing(perp_crossings.e, perp_crossings.s`p1)"
    "(Maybe[point_2d].some?)"))
  (perp_crossing_at_endpoint_is_closest_TCC1-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (perp_crossing_at_endpoint_is_closest subtype
    "perp_crossings.find_perp_ray_crossing(perp_crossings.e, perp_crossings.s`p1)"
    "(Maybe[point_2d].some?)")))
 (perp_crossing_at_endpoint_is_closest 0
  (perp_crossing_at_endpoint_is_closest-1 nil 3874129020
   ("" (skeep + t)
    (("" (skoletin*)
      (("" (flatten)
        (("" (use "line_crossing_commutative")
          (("" (use "no_line_crossing_eqv_parallel_or_collinear")
            (("" (assert)
              (("" (case "xing_pt = s`p1")
                (("1" (expand "extending_s_crosses_e")
                  (("1" (replace -2 :dir rl)
                    (("1" (replace -5 :dir rl)
                      (("1" (replace -1) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (case "exists (k: posreal): xing_pt = s`p1 - k * (s`p2 - s`p1)")
                  (("1" (skeep)
                    (("1" (expand "point_on_segment?")
                      (("1" (case-replace "p = s`p1")
                        (("1" (use "perp_is_shortest")
                          (("1" (assert)
                            (("1" (inst - "q") (("1" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (expand "point_on_segment?")
                            (("2" (assert) nil nil)) nil))
                          nil)
                         ("2"
                          (name "v"
                                "find_perp_ray_line_crossing(e, p)")
                          (("2"
                            (use "perp_ray_crossing_is_perp_ray_line_crossing")
                            (("2" (assert)
                              (("2"
                                (replace -6 :dir rl)
                                (("2"
                                  (lemma
                                   "closer_point_imp_closer_perp_crossing")
                                  (("2"
                                    (inst - "s" "e" "p" "s`p1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (replace -3 :dir rl)
                                          (("1"
                                            (replace -4)
                                            (("1"
                                              (lemma
                                               "perp_is_shortest_on_line")
                                              (("1"
                                                (inst - "e" "p" "q")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (rewrite
                                                     "norm_sym"
                                                     +)
                                                    (("1"
                                                      (rewrite
                                                       "norm_sym"
                                                       -1)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-11 1))
                                                    (("2"
                                                      (rewrite
                                                       "point_on_segment_has_offset")
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -7 :dir rl)
                                          (("2"
                                            (rewrite
                                             "point_on_segment_has_offset")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (replace -8 1)
                                                (("2"
                                                  (replace -3 (-5 1))
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (equate
                                                       "s`p1 - k * (s`p2 - s`p1) - (s`p1 + d * (s`p2 - s`p1))"
                                                       "-(k + d) * (s`p2 - s`p1)")
                                                      (("1"
                                                        (rewrite*
                                                         "norm_scal")
                                                        (("1"
                                                          (cancel-by
                                                           1
                                                           "norm((s`p2 - s`p1))")
                                                          (("1"
                                                            (expand
                                                             "abs")
                                                            (("1"
                                                              (case-replace
                                                               "d = 0")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "point_on_segment?")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (use "line_crossing_on_line")
                    (("2" (assert)
                      (("2" (skeep)
                        (("2" (inst + "-k")
                          (("1" (assert) nil nil)
                           ("2" (splash 1 t)
                            (("1" (assert) nil nil)
                             ("2" (replace -5 :dir rl)
                              (("2"
                                (replace -1 -3)
                                (("2"
                                  (equate
                                   "s`p1 - (s`p1 + k * (s`p2 - s`p1))"
                                   "-k * (s`p2 - s`p1)")
                                  (("1"
                                    (equate
                                     "s`p2 - (s`p1 + k * (s`p2 - s`p1))"
                                     "(1 - k) * (s`p2 - s`p1)")
                                    (("1"
                                      (rewrite* "norm_scal")
                                      (("1"
                                        (cancel-by
                                         -3
                                         "norm((s`p2 - s`p1))")
                                        (("1"
                                          (expand "abs")
                                          (("1"
                                            (apply (repeat (lift-if)))
                                            (("1"
                                              (ground)
                                              (("1"
                                                (expand
                                                 "extending_s_crosses_e")
                                                (("1"
                                                  (rewrite
                                                   "point_on_segment_has_offset"
                                                   +)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case-replace "k = 0")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (cos_pos_perp_crossing_cases_TCC1 0
  (cos_pos_perp_crossing_cases_TCC1-2 nil 3874129020
   ("" (skeep*) (("" (assert) nil nil)) nil) nil shostak
   (cos_pos_perp_crossing_cases subtype
    "(vectors_2D.-)(perp_crossings.s`p1, perp_crossings.xing_pt)"
    "Nz_vector"))
  (cos_pos_perp_crossing_cases_TCC1-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (cos_pos_perp_crossing_cases subtype
    "(vectors_2D.-)(perp_crossings.s`p1, perp_crossings.xing_pt)"
    "Nz_vector")))
 (cos_pos_perp_crossing_cases_TCC2 0
  (cos_pos_perp_crossing_cases_TCC2-2 nil 3874129020
   ("" (skeep*)
    (("" (move-terms -6 l 2)
      (("" (assert)
        (("" (replace -6 :dir rl) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak
   (cos_pos_perp_crossing_cases subtype
    "(vectors_2D.-)(perp_crossings.e`p1, perp_crossings.xing_pt)"
    "Nz_vector"))
  (cos_pos_perp_crossing_cases_TCC2-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (cos_pos_perp_crossing_cases subtype
    "(vectors_2D.-)(perp_crossings.e`p1, perp_crossings.xing_pt)"
    "Nz_vector")))
 (cos_pos_perp_crossing_cases_TCC3 0
  (cos_pos_perp_crossing_cases_TCC3-2 nil 3874129020
   ("" (skeep*)
    (("" (replace -2)
      (("" (assert)
        (("" (replace -7 :dir rl) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak
   (cos_pos_perp_crossing_cases subtype "perp_crossings.pre_seg"
    "segment_2d"))
  (cos_pos_perp_crossing_cases_TCC3-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (cos_pos_perp_crossing_cases subtype "perp_crossings.pre_seg"
    "segment_2d")))
 (cos_pos_perp_crossing_cases 0
  (cos_pos_perp_crossing_cases-1 nil 3874129020
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (skeep)
          (("" (case "norm(e`p1 - xing_pt) < norm(e`p2 - xing_pt)")
            (("1" (hide -2)
              (("1" (case "xing_pt = e`p1 or xing_pt = e`p2")
                (("1" (split -1)
                  (("1" (replace -1) (("1" (assert) nil nil)) nil)
                   ("2" (replace -1) (("2" (assert) nil nil)) nil))
                  nil)
                 ("2" (flatten)
                  (("2"
                    (case "^(e`p1 - xing_pt) = ^(e`p2 - e`p1) &
                                                  ^(e`p1 - xing_pt) = ^(e`p2 - xing_pt)")
                    (("1" (flatten)
                      (("1" (use "perp_line_crossing_point_val")
                        (("1" (assert)
                          (("1" (split -1)
                            (("1" (replace -9 :dir rl)
                              (("1"
                                (case-replace
                                 "^(p - (xing_pt)) = ^(s`p1 - xing_pt)")
                                (("1"
                                  (equate
                                   "vcos(^(e`p2 - e`p1), ^(s`p1 - xing_pt))"
                                   "vcos(^(s`p1 - xing_pt), ^(e`p2 - e`p1))")
                                  (("1"
                                    (replace -3 -2 :dir rl)
                                    (("1"
                                      (name-replace
                                       "cos_a"
                                       "vcos(^(s`p1 - xing_pt), ^(e`p1 - xing_pt))"
                                       :hide?
                                       nil)
                                      (("1"
                                        (replace -3)
                                        (("1"
                                          (case
                                           "norm(p - xing_pt) * cos_a < norm(e`p1 - xing_pt)")
                                          (("1"
                                            (split 6)
                                            (("1"
                                              (expand "pre_seg" 1)
                                              (("1"
                                                (rewrite
                                                 "point_on_segment_has_norm_offset")
                                                (("1"
                                                  (inst
                                                   +
                                                   "norm(p - (xing_pt)) * cos_a")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "length")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (mult-cases 1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma "pythagorean")
                                              (("2"
                                                (inst-cp
                                                 -
                                                 "perp_xing - e`p1"
                                                 "p - perp_xing")
                                                (("2"
                                                  (inst
                                                   -
                                                   "perp_xing - e`p2"
                                                   "p - perp_xing")
                                                  (("2"
                                                    (lemma
                                                     "perp_line_orthogonal")
                                                    (("2"
                                                      (inst-cp
                                                       -
                                                       "e"
                                                       "e`p1"
                                                       "p")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "e"
                                                         "e`p2"
                                                         "p")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (equate
                                                             "perp_xing - e`p2 + (p - perp_xing)"
                                                             "p - e`p2")
                                                            (("1"
                                                              (equate
                                                               "perp_xing - e`p1 + (p - perp_xing)"
                                                               "p - e`p1")
                                                              (("1"
                                                                (rewrite
                                                                 "norm_lt_sqv")
                                                                (("1"
                                                                  (case
                                                                   "sqv(p - e`p1) < sqv(p - e`p2)")
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-1
                                                                      1))
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     -3)
                                                                    (("2"
                                                                      (replace
                                                                       -4)
                                                                      (("2"
                                                                        (cancel-add
                                                                         1)
                                                                        (("2"
                                                                          (case
                                                                           "sqv(e`p1 - perp_xing) < sqv(e`p2 - perp_xing)")
                                                                          (("1"
                                                                            (hide-all-but
                                                                             (-1
                                                                              1))
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (replace
                                                                             -14
                                                                             1)
                                                                            (("2"
                                                                              (name-replace
                                                                               "nc"
                                                                               "norm(p - (xing_pt)) * cos_a")
                                                                              (("2"
                                                                                (equate
                                                                                 "e`p1 - ((xing_pt) + nc * ^(e`p1 - xing_pt))"
                                                                                 "(norm(e`p1 - xing_pt) - nc) * ^(e`p1 - xing_pt)")
                                                                                (("1"
                                                                                  (equate
                                                                                   "e`p2 - ((xing_pt) + nc * ^(e`p1 - xing_pt))"
                                                                                   "(norm(e`p2 - xing_pt) - nc) * ^(e`p2 - xing_pt)")
                                                                                  (("1"
                                                                                    (rewrite*
                                                                                     "sqv_scal")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "sqv_normalized_eq_1"
                                                                                       1)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "sqv_normalized_eq_1"
                                                                                         1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "sq_lt")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (replace
                                                                                     -10
                                                                                     1)
                                                                                    (("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "point_on_segment?")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "point_on_segment?")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case
                                             "norm(p - xing_pt) * cos_a <= norm(e`p2 - xing_pt)")
                                            (("1"
                                              (rewrite
                                               "point_on_segment_has_norm_offset"
                                               6)
                                              (("1"
                                                (inst
                                                 +
                                                 "norm(p - xing_pt) * cos_a - norm(e`p1 - xing_pt)")
                                                (("1"
                                                  (split 6)
                                                  (("1"
                                                    (replace
                                                     -5
                                                     1
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (expand "^" 1)
                                                      (("1"
                                                        (replace -10 1)
                                                        (("1"
                                                          (hide-all-but
                                                           1)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "length")
                                                    (("2"
                                                      (add-formulas
                                                       1
                                                       -1)
                                                      (("2"
                                                        (cancel-add 1)
                                                        (("2"
                                                          (lemma
                                                           "collinear_distances_additive_line")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "xing_pt"
                                                             "e`p1"
                                                             "e`p2")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (rewrite
                                                                 "dir_parallel_eqv_normalized_diffs_eq")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand
                                               "point_beyond_segment?")
                                              (("2"
                                                (split 9)
                                                (("1"
                                                  (case
                                                   "e`p2 - e`p1 = norm(e`p2 - e`p1) * ^(e`p2 - e`p1)")
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (replace -10 1)
                                                      (("1"
                                                        (inst
                                                         +
                                                         "(norm(p - xing_pt) * cos_a - norm(e`p1 - xing_pt)) / norm(e`p2 - e`p1)")
                                                        (("1"
                                                          (split 1)
                                                          (("1"
                                                            (cross-mult
                                                             1)
                                                            (("1"
                                                              (lemma
                                                               "collinear_distances_additive_line")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "xing_pt"
                                                                 "e`p1"
                                                                 "e`p2")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (rewrite
                                                                     "dir_parallel_eqv_normalized_diffs_eq")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "scal_assoc"
                                                             1)
                                                            (("2"
                                                              (real-props)
                                                              (("2"
                                                                (replace
                                                                 -5
                                                                 1
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (expand "^")
                                                      (("2"
                                                        (real-props)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma "pythagorean")
                                                  (("2"
                                                    (inst-cp
                                                     -
                                                     "perp_xing - e`p1"
                                                     "p - perp_xing")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "perp_xing - e`p2"
                                                       "p - perp_xing")
                                                      (("2"
                                                        (lemma
                                                         "perp_line_orthogonal")
                                                        (("2"
                                                          (inst-cp
                                                           -
                                                           "e"
                                                           "e`p1"
                                                           "p")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "e"
                                                             "e`p2"
                                                             "p")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (equate
                                                                 "perp_xing - e`p2 + (p - perp_xing)"
                                                                 "p - e`p2")
                                                                (("1"
                                                                  (equate
                                                                   "perp_xing - e`p1 + (p - perp_xing)"
                                                                   "p - e`p1")
                                                                  (("1"
                                                                    (rewrite
                                                                     "norm_lt_sqv")
                                                                    (("1"
                                                                      (case
                                                                       "sqv(p - e`p2) < sqv(p - e`p1)")
                                                                      (("1"
                                                                        (hide-all-but
                                                                         (-1
                                                                          1))
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (replace
                                                                         -3)
                                                                        (("2"
                                                                          (replace
                                                                           -4)
                                                                          (("2"
                                                                            (cancel-add
                                                                             1)
                                                                            (("2"
                                                                              (case
                                                                               "sqv(e`p2 - perp_xing) < sqv(e`p1 - perp_xing)")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  1))
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -13
                                                                                 1)
                                                                                (("2"
                                                                                  (name-replace
                                                                                   "nc"
                                                                                   "norm(p - (xing_pt)) * cos_a")
                                                                                  (("2"
                                                                                    (equate
                                                                                     "e`p1 - ((xing_pt) + nc * ^(e`p1 - xing_pt))"
                                                                                     "(norm(e`p1 - xing_pt) - nc) * ^(e`p1 - xing_pt)")
                                                                                    (("1"
                                                                                      (equate
                                                                                       "e`p2 - ((xing_pt) + nc * ^(e`p1 - xing_pt))"
                                                                                       "(norm(e`p2 - xing_pt) - nc) * ^(e`p2 - xing_pt)")
                                                                                      (("1"
                                                                                        (rewrite*
                                                                                         "sqv_scal")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "sqv_normalized_eq_1"
                                                                                           1)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "sqv_normalized_eq_1"
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "sq_neg_minus"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (equate
                                                                                                   "sq((norm(e`p1 - xing_pt) - nc))"
                                                                                                   "sq(nc - (norm(e`p1 - xing_pt)))")
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "sq_lt")
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (rewrite
                                                                                                     "sq_neg_minus"
                                                                                                     1)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replace
                                                                                         -9
                                                                                         1)
                                                                                        (("2"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "point_on_segment?")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "point_on_segment?")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (expand "vcos")
                                      (("2"
                                        (rewrite "dot_comm")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -5 1)
                                  (("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (rewrite "normalize_scal")
                                        (("2"
                                          (expand "sign")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -8 :dir rl)
                              (("2"
                                (replace -4 1)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (cancel-add -1)
                                    (("2"
                                      (use "scal_eq_zero")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "line_crossing_on_line")
                      (("2" (inst - "e" "s")
                        (("2" (assert)
                          (("2"
                            (rewrite "line_crossing_commutative" -1)
                            (("2"
                              (rewrite
                               "no_line_crossing_eqv_parallel_or_collinear")
                              (("2"
                                (skeep)
                                (("2"
                                  (replace -7 :dir rl)
                                  (("2"
                                    (replace -1 (-2 1))
                                    (("2"
                                      (equate
                                       "e`p1 - (e`p1 + k!1 * (e`p2 - e`p1))"
                                       "-k!1 * (e`p2 - e`p1)")
                                      (("1"
                                        (equate
                                         "e`p2 - (e`p1 + k!1 * (e`p2 - e`p1))"
                                         "(1 - k!1) * (e`p2 - e`p1)")
                                        (("1"
                                          (rewrite "normalize_scal" 1)
                                          (("1"
                                            (rewrite
                                             "normalize_scal"
                                             1)
                                            (("1"
                                              (expand "sign")
                                              (("1"
                                                (apply
                                                 (repeat (lift-if)))
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split 1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (rewrite*
                                                         "norm_scal")
                                                        (("2"
                                                          (cancel-by
                                                           -2
                                                           "norm((e`p2 - e`p1))")
                                                          (("2"
                                                            (expand
                                                             "abs")
                                                            (("2"
                                                              (apply
                                                               (repeat
                                                                (lift-if)))
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (rewrite
                                                                   "point_on_segment_has_offset"
                                                                   8)
                                                                  (("2"
                                                                    (inst
                                                                     +
                                                                     "k!1")
                                                                    (("2"
                                                                      (equate
                                                                       "k!1"
                                                                       "1"
                                                                       (assert))
                                                                      (("1"
                                                                        (equate
                                                                         "xing_pt"
                                                                         "e`p2"
                                                                         (assert))
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (split
                                                                         -3)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (rewrite
                                                                             "point_on_segment_has_offset"
                                                                             9)
                                                                            (("2"
                                                                              (inst
                                                                               +
                                                                               "k!1")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (equate
                                               "k!1"
                                               "1"
                                               (assert))
                                              (("2"
                                                (equate
                                                 "xing_pt"
                                                 "e`p2"
                                                 (assert))
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (equate "k!1" "0" (assert))
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (ground) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "line_crossing_on_line")
              (("2" (inst - "e" "s")
                (("2" (assert)
                  (("2" (rewrite "line_crossing_commutative" -1)
                    (("2"
                      (rewrite
                       "no_line_crossing_eqv_parallel_or_collinear")
                      (("2" (skeep)
                        (("2" (replace -7 :dir rl)
                          (("2"
                            (case "norm(e`p1 - xing_pt) = norm(e`p2 - xing_pt)")
                            (("1" (replace -2 -1)
                              (("1"
                                (equate
                                 "e`p1 - (e`p1 + k!1 * (e`p2 - e`p1))"
                                 "-k!1 * (e`p2 - e`p1)")
                                (("1"
                                  (equate
                                   "e`p2 - (e`p1 + k!1 * (e`p2 - e`p1))"
                                   "(1 - k!1) * (e`p2 - e`p1)")
                                  (("1"
                                    (rewrite* "norm_scal")
                                    (("1"
                                      (cancel-by
                                       -1
                                       "norm(e`p2 - e`p1)")
                                      (("1"
                                        (expand "abs")
                                        (("1"
                                          (apply (repeat (lift-if)))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide 6 7)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (rewrite
                                                   "point_on_segment_has_offset"
                                                   5)
                                                  (("1"
                                                    (inst + "k!1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (cos_pos_find_perp_crossing_cases_TCC1 0
  (cos_pos_find_perp_crossing_cases_TCC1-2 nil 3874129020
   ("" (skeep*) (("" (assert) nil nil)) nil) nil shostak
   (cos_pos_find_perp_crossing_cases subtype
    "(vectors_2D.-)(perp_crossings.s`p1, perp_crossings.xing_pt)"
    "Nz_vector"))
  (cos_pos_find_perp_crossing_cases_TCC1-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (cos_pos_find_perp_crossing_cases subtype
    "(vectors_2D.-)(perp_crossings.s`p1, perp_crossings.xing_pt)"
    "Nz_vector")))
 (cos_pos_find_perp_crossing_cases_TCC2 0
  (cos_pos_find_perp_crossing_cases_TCC2-2 nil 3874129020
   ("" (skeep*)
    (("" (equate "xing_pt" "e`p1" (assert)) (("" (assert) nil nil))
      nil))
    nil)
   nil shostak
   (cos_pos_find_perp_crossing_cases subtype
    "(vectors_2D.-)(perp_crossings.e`p1, perp_crossings.xing_pt)"
    "Nz_vector"))
  (cos_pos_find_perp_crossing_cases_TCC2-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (cos_pos_find_perp_crossing_cases subtype
    "(vectors_2D.-)(perp_crossings.e`p1, perp_crossings.xing_pt)"
    "Nz_vector")))
 (cos_pos_find_perp_crossing_cases_TCC3 0
  (cos_pos_find_perp_crossing_cases_TCC3-2 nil 3874129020
   ("" (skeep*)
    (("" (replace -2)
      (("" (assert)
        (("" (replace -8 :dir rl) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak
   (cos_pos_find_perp_crossing_cases subtype "perp_crossings.pre_seg_e"
    "segment_2d"))
  (cos_pos_find_perp_crossing_cases_TCC3-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (cos_pos_find_perp_crossing_cases subtype "perp_crossings.pre_seg_e"
    "segment_2d")))
 (cos_pos_find_perp_crossing_cases_TCC4 0
  (cos_pos_find_perp_crossing_cases_TCC4-2 nil 3874129020
   ("" (skeep*)
    (("" (replace -3)
      (("" (assert)
        (("" (replace -8 :dir rl) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak
   (cos_pos_find_perp_crossing_cases subtype
    "perp_crossings.full_seg_e" "segment_2d"))
  (cos_pos_find_perp_crossing_cases_TCC4-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (cos_pos_find_perp_crossing_cases subtype
    "perp_crossings.full_seg_e" "segment_2d")))
 (cos_pos_find_perp_crossing_cases 0
  (cos_pos_find_perp_crossing_cases-1 nil 3874129020
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        ((""
          (case "forall (p: point_2d, s: segment_2d):
                p + perp_right(s`p2 - s`p1) /= p")
          (("1"
            (case "^(e`p1 - xing_pt) = ^(e`p2 - e`p1) &
                         ^(e`p1 - xing_pt) = ^(e`p2 - xing_pt)")
            (("1" (flatten)
              (("1" (case "collinear?(pre_seg_e, e)")
                (("1" (rewrite "collinear_symmetric")
                  (("1" (use "cos_pos_perp_crossing_cases")
                    (("1" (assert)
                      (("1" (split -1)
                        (("1" (expand "find_perp_ray_crossing" -)
                          (("1" (lift-if)
                            (("1" (split -9)
                              (("1"
                                (use "perp_lines_cross")
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (expand "find_perp_ray_line_crossing")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (expand "find_perp_ray_crossing" -11)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (split -11)
                                    (("1"
                                      (use "perp_lines_cross")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (expand
                                       "find_perp_ray_line_crossing")
                                      (("2"
                                        (expand "pre_seg_e" 1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma
                                             "collinear_imp_seg_line_crossings_same")
                                            (("2"
                                              (inst
                                               -
                                               "(# p1 := p,
                                                                         p2
                                                                         := p
                                                                            +
                                                                            perp_right(e`p2 - e`p1) #)"
                                               "e"
                                               "(# p1 := p,
                                                                         p2
                                                                         := p
                                                                            +
                                                                            perp_right
                                                                            (e`p1 - xing_pt) #)"
                                               "(# p1 := (xing_pt), p2 := e`p1 #)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide -1 2)
                                                  (("1"
                                                    (hide 5)
                                                    (("1"
                                                      (rewrite
                                                       "collinear_as_parallel_with_p1_on_line")
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (expand
                                                           "parallel?"
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "^"
                                                             -3)
                                                            (("1"
                                                              (inst
                                                               +
                                                               "norm(e`p2 - e`p1) / norm(e`p1 - xing_pt)")
                                                              (("1"
                                                                (cross-mult
                                                                 1)
                                                                (("1"
                                                                  (cross-mult
                                                                   -3)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-3
                                                                      1))
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst + "0")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst
                                                         -
                                                         "p"
                                                         "pre_seg_e")
                                                        (("2"
                                                          (expand
                                                           "pre_seg_e")
                                                          (("2"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (inst
                                                         -
                                                         "p"
                                                         "e")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (replace -1 :dir rl)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (inst
                                                 -
                                                 "p"
                                                 "pre_seg_e")
                                                (("3"
                                                  (hide-all-but (-6 1))
                                                  (("3"
                                                    (expand
                                                     "pre_seg_e")
                                                    (("3"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (inst - "p" "e")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (flatten)
                          (("3" (expand "point_beyond_segment?")
                            (("3" (skeep)
                              (("3"
                                (assert)
                                (("3"
                                  (hide 4)
                                  (("3"
                                    (expand
                                     "find_perp_ray_line_crossing")
                                    (("3"
                                      (expand
                                       "find_perp_ray_crossing"
                                       +)
                                      (("3"
                                        (lift-if)
                                        (("3"
                                          (ground)
                                          (("3"
                                            (lemma
                                             "collinear_imp_seg_line_crossings_same")
                                            (("3"
                                              (inst
                                               -
                                               _
                                               "full_seg_e"
                                               _
                                               "e")
                                              (("3"
                                                (inst
                                                 -
                                                 "(# p1 := p,
                                                       p2
                                                       := p
                                                          +
                                                          perp_right
                                                          (full_seg_e`p2
                                                           -
                                                           full_seg_e`p1) #)"
                                                 "(# p1 := p, p2 := p + perp_right(e`p2 - e`p1) #)")
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (replace
                                                     -1
                                                     :hide?
                                                     t)
                                                    (("1"
                                                      (replace -3)
                                                      (("1"
                                                        (expand
                                                         "full_seg_e")
                                                        (("1"
                                                          (rewrite
                                                           "point_on_segment_has_norm_offset")
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (replace
                                                               -8
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (case
                                                                 "e`p2 - e`p1 = norm(e`p2 - e`p1) * ^(e`p1 - xing_pt)")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   -2)
                                                                  (("1"
                                                                    (case
                                                                     "(norm(e`p1 - xing_pt) + k * norm(e`p2 - e`p1)) * ^(e`p1 - xing_pt) = d * ^(e`p1 - xing_pt)")
                                                                    (("1"
                                                                      (use
                                                                       "scal_cancel")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           -5
                                                                           :dir
                                                                           rl)
                                                                          (("1"
                                                                            (expand
                                                                             "length")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (equate
                                                                                 "norm(e`p2 - xing_pt)"
                                                                                 "norm(e`p1 - xing_pt) + norm(e`p2 - e`p1)")
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   (-5
                                                                                    -6))
                                                                                  (("1"
                                                                                    (cancel-add
                                                                                     -1)
                                                                                    (("1"
                                                                                      (mult-cases
                                                                                       -1
                                                                                       :mult-op
                                                                                       1*)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (rewrite
                                                                                   "collinear_distances_additive_line")
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "dir_parallel_eqv_normalized_diffs_eq")
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1
                                                                                         :dir
                                                                                         rl)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-2
                                                                        1))
                                                                      (("2"
                                                                        (name-replace
                                                                         "ex"
                                                                         "^(e`p1 - xing_pt)")
                                                                        (("2"
                                                                          (move-terms
                                                                           -1
                                                                           r
                                                                           1)
                                                                          (("2"
                                                                            (replace
                                                                             -1
                                                                             :dir
                                                                             rl
                                                                             :hide?
                                                                             t)
                                                                            (("2"
                                                                              (distrib
                                                                               1)
                                                                              (("2"
                                                                                (cancel-add
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "ex")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "^")
                                                                                    (("2"
                                                                                      (real-props)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   -7
                                                                   1)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "^")
                                                                      (("2"
                                                                        (real-props)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -1 -3 2)
                                                    (("2"
                                                      (rewrite
                                                       "collinear_as_parallel_with_p1_on_line")
                                                      (("1"
                                                        (expand
                                                         "full_seg_e")
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (expand
                                                             "parallel?")
                                                            (("1"
                                                              (inst
                                                               +
                                                               "norm(e`p2 - xing_pt) / norm(e`p2 - e`p1)")
                                                              (("1"
                                                                (hide-all-but
                                                                 (-4
                                                                  -5
                                                                  1))
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (expand
                                                                     "^")
                                                                    (("1"
                                                                      (cross-mult
                                                                       1)
                                                                      (("1"
                                                                        (cross-mult
                                                                         -1)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (cross-mult
                                                                   -1)
                                                                  (("2"
                                                                    (use
                                                                     "norm_eq_0")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             +
                                                             "0")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst
                                                         -
                                                         "p"
                                                         "e")
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (inst
                                                         -
                                                         "p"
                                                         "full_seg_e")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide -1 -3 2)
                                                    (("3"
                                                      (rewrite
                                                       "collinear_as_parallel_with_p1_on_line")
                                                      (("3"
                                                        (expand
                                                         "full_seg_e")
                                                        (("3"
                                                          (case
                                                           "e`p2 - xing_pt = norm(e`p2 - xing_pt) * ^(e`p2 - xing_pt)")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             1)
                                                            (("1"
                                                              (replace
                                                               -6
                                                               1
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (expand
                                                                   "parallel?")
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "norm(e`p2 - xing_pt) / norm(e`p2 - e`p1)")
                                                                    (("1"
                                                                      (hide-all-but
                                                                       (-5
                                                                        1
                                                                        4))
                                                                      (("1"
                                                                        (expand
                                                                         "^")
                                                                        (("1"
                                                                          (cross-mult
                                                                           1)
                                                                          (("1"
                                                                            (cross-mult
                                                                             1)
                                                                            (("1"
                                                                              (cross-mult
                                                                               -1)
                                                                              (("1"
                                                                                (div-by
                                                                                 1
                                                                                 "norm(e`p2 - xing_pt)")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (use
                                                                                     "norm_eq_0")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (cross-mult
                                                                         -1)
                                                                        (("2"
                                                                          (use
                                                                           "norm_eq_0")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (inst
                                                                   +
                                                                   "norm(e`p1 - xing_pt) / norm(e`p2 - xing_pt)")
                                                                  (("1"
                                                                    (real-props)
                                                                    (("1"
                                                                      (expand
                                                                       "^")
                                                                      (("1"
                                                                        (real-props)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("1"
                                                                            (grind-with-ext)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (use
                                                                       "norm_eq_0")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "^")
                                                              (("2"
                                                                (real-props)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst - "p" "e")
                                                  nil
                                                  nil)
                                                 ("3"
                                                  (inst
                                                   -
                                                   "p"
                                                   "full_seg_e")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (skeep)
                          (("4" (inst + "k") (("4" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "collinear_as_parallel_with_p1_on_line")
                  (("2" (expand "pre_seg_e")
                    (("2" (split 1)
                      (("1" (expand "parallel?" 1)
                        (("1"
                          (inst +
                           "norm(e`p1 - xing_pt) / norm(e`p2 - e`p1)")
                          (("1" (hide-all-but (-1 1))
                            (("1" (expand "^")
                              (("1"
                                (cross-mult 1)
                                (("1" (cross-mult -1) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (cross-mult -1)
                              (("2"
                                (use "norm_eq_0")
                                (("2"
                                  (assert)
                                  (("2"
                                    (replace -1 :dir rl)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst + "1")
                        (("2" (hide-all-but 1)
                          (("2" (grind-with-ext) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (expand "pre_seg_e")
                  (("3" (replace -1 :dir rl) (("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 5 6)
              (("2" (lemma "line_crossing_on_line")
                (("2" (inst - "e" "s")
                  (("2" (assert)
                    (("2" (rewrite "line_crossing_commutative" -1)
                      (("2"
                        (rewrite
                         "no_line_crossing_eqv_parallel_or_collinear")
                        (("2" (skeep)
                          (("2" (replace -9 :dir rl)
                            (("2" (replace -1 (-3 1))
                              (("2"
                                (equate
                                 "e`p1 - (e`p1 + k * (e`p2 - e`p1))"
                                 "-k * (e`p2 - e`p1)")
                                (("1"
                                  (equate
                                   "e`p2 - (e`p1 + k * (e`p2 - e`p1))"
                                   "(1 - k) * (e`p2 - e`p1)")
                                  (("1"
                                    (rewrite "normalize_scal" 1)
                                    (("1"
                                      (rewrite "normalize_scal" 1)
                                      (("1"
                                        (expand "sign")
                                        (("1"
                                          (apply (repeat (lift-if)))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split 1)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (rewrite*
                                                   "norm_scal")
                                                  (("2"
                                                    (cancel-by
                                                     -3
                                                     "norm((e`p2 - e`p1))")
                                                    (("2"
                                                      (expand "abs")
                                                      (("2"
                                                        (apply
                                                         (repeat
                                                          (lift-if)))
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (rewrite
                                                                 "point_on_segment_has_offset"
                                                                 +)
                                                                (("2"
                                                                  (inst
                                                                   +
                                                                   "k")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (equate "k" "1" (assert))
                                        (("2"
                                          (equate
                                           "xing_pt"
                                           "e`p2"
                                           (assert))
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (equate "k" "0" (assert))
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replace -1 5)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (flatten)
              (("3" (replace -2 :dir rl) (("3" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (skeep)
              (("2" (move-terms -1 l 1)
                (("2" (use "perp_right_nzvect_neq_zero")
                  (("2" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (nearest_endpoints_is_nearest_pair 0
  (nearest_endpoints_is_nearest_pair-1 nil 3874129020
   ("" (skeep)
    (("" (expand "nearest_endpoints")
      (("" (apply (repeat (lift-if)))
        (("" (expand "is_nearest_endpoint_pair?")
          (("" (ground)
            (("1" (expand "min")
              (("1" (apply (repeat (lift-if))) (("1" (ground) nil nil))
                nil))
              nil)
             ("2" (expand "min")
              (("2" (apply (repeat (lift-if))) (("2" (ground) nil nil))
                nil))
              nil)
             ("3" (expand "min")
              (("3" (apply (repeat (lift-if))) (("3" (ground) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (nearest_endpoint_pair_swapped 0
  (nearest_endpoint_pair_swapped-1 nil 3874129020
   ("" (skeep)
    (("" (expand "is_nearest_endpoint_pair?")
      ((""
        (equate "norm(e`p1 - s`p1)" "norm(s`p1 - e`p1)"
         (rewrite "norm_sym"))
        ((""
          (equate "norm(e`p2 - s`p1)" "norm(s`p1 - e`p2)"
           (rewrite "norm_sym"))
          ((""
            (equate "norm(e`p2 - s`p2)" "norm(s`p2 - e`p2)"
             (rewrite "norm_sym"))
            ((""
              (equate "norm(e`p1 - s`p2)" "norm(s`p2 - e`p1)"
               (rewrite "norm_sym"))
              ((""
                (equate "norm(pair`2 - pair`1)" "norm(pair`1 - pair`2)"
                 (rewrite "norm_sym"))
                (("" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (overlapping_symmetric_TCC1 0
  (overlapping_symmetric_TCC1-2 nil 3874129020
   ("" (skeep + t)
    (("" (expand "parallel?")
      (("" (expand "segment_intersect_kernel")
        (("" (apply (repeat (lift-if)))
          (("" (assert)
            (("" (split -1)
              (("1" (propax) nil nil)
               ("2" (flatten)
                (("2" (split -1)
                  (("1" (flatten)
                    (("1"
                      (case "forall (u, v: point_2d):
  vector_from_point_to_point(u, v) = v - u")
                      (("1" (rewrite -1)
                        (("1" (rewrite -1)
                          (("1" (hide -1)
                            (("1" (split 3)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite*
                                     "parallel_equiv_cross_eq_0"
                                     :dir
                                     rl)
                                    (("1"
                                      (expand "parallel?")
                                      (("1"
                                        (skeep*)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (replace -3)
                                            (("1"
                                              (inst + "-(nzk * nzk!1)")
                                              (("1"
                                                (hide -1 -3)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -1)
                                      (("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (replace -1)
                                      (("3"
                                        (hide-all-but 1)
                                        (("3" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (split 2)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (assert)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (overlapping_symmetric subtype "perp_crossings.s"
    "(segments_2d.parallel?(perp_crossings.e))"))
  (overlapping_symmetric_TCC1-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (overlapping_symmetric subtype "perp_crossings.s"
    "(segments_2d.parallel?(perp_crossings.e))")))
 (overlapping_symmetric 0
  (overlapping_symmetric-1 nil 3874129020
   ("" (skeep + t)
    (("" (expand "overlapping?") (("" (ground) nil nil)) nil)) nil)
   nil shostak))
 (overlapping_reverse_TCC1 0
  (overlapping_reverse_TCC1-2 nil 3874129020
   ("" (skeep) (("" (rewrite "parallel_reverse" :dir rl) nil nil)) nil)
   nil shostak
   (overlapping_reverse subtype
    "segments_2d.reverse_segment(perp_crossings.e)"
    "(segments_2d.parallel?(perp_crossings.s))"))
  (overlapping_reverse_TCC1-1 nil 3874127258 ("" (subtype-tcc) nil nil)
   nil nil
   (overlapping_reverse subtype
    "segments_2d.reverse_segment(perp_crossings.e)"
    "(segments_2d.parallel?(perp_crossings.s))")))
 (overlapping_reverse 0
  (overlapping_reverse-1 nil 3874129020
   ("" (skeep)
    (("" (expand "overlapping?")
      (("" (rewrite "find_perp_ray_crossing_reverse" :dir rl)
        (("1" (rewrite "find_perp_ray_crossing_reverse" :dir rl)
          (("1" (ground)
            (("1" (hide-all-but (-4 1))
              (("1" (expand "reverse_segment")
                (("1" (expand "find_perp_ray_crossing")
                  (("1" (propax) nil nil)) nil))
                nil))
              nil)
             ("2" (hide-all-but (-3 1))
              (("2" (expand "reverse_segment")
                (("2" (expand "find_perp_ray_crossing")
                  (("2" (propax) nil nil)) nil))
                nil))
              nil)
             ("3" (hide-all-but (-4 1))
              (("3" (expand "reverse_segment")
                (("3" (expand "find_perp_ray_crossing")
                  (("3" (propax) nil nil)) nil))
                nil))
              nil)
             ("4" (hide-all-but (-3 1))
              (("4" (expand "reverse_segment")
                (("4" (expand "find_perp_ray_crossing")
                  (("4" (propax) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (expand "point_on_segment?") (("2" (assert) nil nil))
            nil))
          nil)
         ("2" (expand "point_on_segment?") (("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (overlapping_covered 0
  (overlapping_covered-1 nil 3874129020
   ("" (skeep 1 t)
    (("" (expand "overlapping?")
      ((""
        (use "parallel_seg_with_no_xing_imp_other_seg_has_0_or_2_xing")
        (("" (assert)
          (("" (split -3)
            (("1" (split 1)
              (("1" (propax) nil nil)
               ("2" (split)
                (("1" (flatten) nil nil) ("2" (flatten) nil nil)) nil))
              nil)
             ("2" (split)
              (("1" (flatten) nil nil) ("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (parallel_nonoverlapping_imp_no_point_crossings 0
  (parallel_nonoverlapping_imp_no_point_crossings-1 nil 3874129020
   ("" (skeep* + t)
    (("" (expand "point_on_segment?")
      (("" (expand "overlapping?")
        (("" (ground)
          (("" (rewrite "point_on_segment_has_norm_offset")
            (("" (skeep)
              (("" (expand "find_perp_ray_crossing" +)
                (("" (lift-if)
                  (("" (ground)
                    ((""
                      (name-replace "xp"
                       "line_crossing((# p1 := p, p2 := p + perp_right(e`p2 - e`p1) #), e)"
                       :hide? nil)
                      (("1"
                        (rewrite "point_on_segment_has_norm_offset")
                        (("1" (skeep)
                          (("1"
                            (case-replace
                             "^(s`p2 - s`p1) = ^(e`p2 - e`p1)")
                            (("1" (case "d <= d!1")
                              (("1"
                                (expand "find_perp_ray_crossing" -9)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (ground)
                                    (("1"
                                      (lemma "perp_lines_cross")
                                      (("1"
                                        (inst - "s" "e" "s`p1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma
                                       "parallel_line_crossing_points_same_vectors")
                                      (("2"
                                        (inst - "s" "e" "s`p1" "p")
                                        (("2"
                                          (ground)
                                          (("1"
                                            (expand
                                             "find_perp_ray_line_crossing")
                                            (("1"
                                              (replace -4)
                                              (("1"
                                                (name-replace
                                                 "xs"
                                                 "val(line_crossing((# p1 := s`p1,
                                                     p2 := s`p1 + perp_right(e`p2 - e`p1) #),
                                                  e))")
                                                (("1"
                                                  (move-terms -1 r 2)
                                                  (("1"
                                                    (move-terms
                                                     -1
                                                     l
                                                     (1 2))
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (replace -5)
                                                        (("1"
                                                          (replace -7)
                                                          (("1"
                                                            (equate
                                                             "e`p1 + d!1 * ^(e`p2 - e`p1) -
                                                     (s`p1 + d * ^(e`p2 - e`p1))
                                                     + s`p1"
                                                             "e`p1 + (d!1 - d) * ^(e`p2 - e`p1)")
                                                            (("1"
                                                              (rewrite
                                                               "point_on_segment_has_norm_offset")
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "d!1 - d")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (move-terms
                                                       -1
                                                       l
                                                       1)
                                                      (("2"
                                                        (use
                                                         "perp_right_nzvect_neq_zero")
                                                        (("2"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst + "0")
                                            (("2" (assert) nil nil))
                                            nil)
                                           ("3"
                                            (replace -2 :dir rl)
                                            (("3"
                                              (inst
                                               +
                                               "d / norm(s`p2 - s`p1)")
                                              (("3"
                                                (expand "^" -6)
                                                (("3"
                                                  (real-props)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "find_perp_ray_crossing" -10)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (ground)
                                    (("1"
                                      (lemma "perp_lines_cross")
                                      (("1"
                                        (inst - "e" "s" "e`p1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma
                                       "points_on_parallel_lines_rectangular")
                                      (("2"
                                        (inst - "s" "e" "p" "e`p1")
                                        (("2"
                                          (ground)
                                          (("1"
                                            (expand
                                             "find_perp_ray_line_crossing")
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (name-replace
                                                 "xe"
                                                 "val(line_crossing((# p1 := e`p1,
                                       p2 := e`p1 + perp_right(s`p2 - s`p1) #),
                                    s))")
                                                (("1"
                                                  (move-terms -1 l 2)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (replace -4)
                                                      (("1"
                                                        (replace -6)
                                                        (("1"
                                                          (equate
                                                           "e`p1 - (e`p1 + d!1 * ^(e`p2 - e`p1)) +
                                       (s`p1 + d * ^(e`p2 - e`p1))"
                                                           "s`p1 + (d - d!1) * ^(e`p2 - e`p1)")
                                                          (("1"
                                                            (replace
                                                             -2
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (rewrite
                                                               "point_on_segment_has_norm_offset")
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "d - d!1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (move-terms
                                                       -1
                                                       l
                                                       1)
                                                      (("2"
                                                        (use
                                                         "perp_right_nzvect_neq_zero")
                                                        (("2"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (replace -1 :dir rl)
                                            (("2"
                                              (inst
                                               +
                                               "d / norm(s`p2 - s`p1)")
                                              (("2"
                                                (expand "^" -5)
                                                (("2"
                                                  (real-props)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (inst + "0")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (use "parallel_normalized_vector_cases")
                              (("2"
                                (ground)
                                (("1"
                                  (hide 1)
                                  (("1"
                                    (case
                                     "^(e`p2 - e`p1) = -^(s`p2 - s`p1)")
                                    (("1"
                                      (case "length(s) - d <= d!1")
                                      (("1"
                                        (expand
                                         "find_perp_ray_crossing"
                                         -11)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (ground)
                                            (("1"
                                              (lemma
                                               "perp_lines_cross")
                                              (("1"
                                                (inst - "s" "e" "s`p2")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "parallel_line_crossing_points_same_vectors")
                                              (("2"
                                                (inst
                                                 -
                                                 "s"
                                                 "e"
                                                 "s`p2"
                                                 "p")
                                                (("2"
                                                  (ground)
                                                  (("1"
                                                    (expand
                                                     "find_perp_ray_line_crossing")
                                                    (("1"
                                                      (replace -5)
                                                      (("1"
                                                        (name-replace
                                                         "xs"
                                                         "val(line_crossing((# p1 := s`p2,
                                                  p2 := s`p2 + perp_right(e`p2 - e`p1) #),
                                                                  e))")
                                                        (("1"
                                                          (move-terms
                                                           -1
                                                           r
                                                           2)
                                                          (("1"
                                                            (move-terms
                                                             -1
                                                             l
                                                             (1 2))
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (replace
                                                                 -6)
                                                                (("1"
                                                                  (replace
                                                                   -8)
                                                                  (("1"
                                                                    (equate
                                                                     "e`p1 + d!1 * ^(e`p2 - e`p1) -
                                           (s`p1 + d * ^(s`p2 - s`p1)) + s`p2"
                                                                     "e`p1 + (d!1 + d - length(s)) * ^(e`p2 - e`p1)")
                                                                    (("1"
                                                                      (rewrite
                                                                       "point_on_segment_has_norm_offset")
                                                                      (("1"
                                                                        (inst
                                                                         +
                                                                         "d!1 - length(s) + d")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replace
                                                                       -3)
                                                                      (("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (move-terms
                                                               -1
                                                               l
                                                               1)
                                                              (("2"
                                                                (use
                                                                 "perp_right_nzvect_neq_zero")
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (inst + "1")
                                                      (("2"
                                                        (grind-with-ext)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (replace -7)
                                                    (("3"
                                                      (inst
                                                       +
                                                       "d / norm(s`p2 - s`p1)")
                                                      (("3"
                                                        (hide-all-but
                                                         1)
                                                        (("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand
                                         "find_perp_ray_crossing"
                                         -11)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (ground)
                                            (("1"
                                              (lemma
                                               "perp_lines_cross")
                                              (("1"
                                                (inst - "e" "s" "e`p1")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "points_on_parallel_lines_rectangular")
                                              (("2"
                                                (inst
                                                 -
                                                 "s"
                                                 "e"
                                                 "p"
                                                 "e`p1")
                                                (("2"
                                                  (ground)
                                                  (("1"
                                                    (expand
                                                     "find_perp_ray_line_crossing")
                                                    (("1"
                                                      (replace -4)
                                                      (("1"
                                                        (name-replace
                                                         "xe"
                                                         "val(line_crossing((# p1 := e`p1,
                                                       p2 := e`p1 + perp_right(s`p2 - s`p1) #),
                                                    s))")
                                                        (("1"
                                                          (move-terms
                                                           -1
                                                           l
                                                           2)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (replace
                                                               -5)
                                                              (("1"
                                                                (replace
                                                                 -7)
                                                                (("1"
                                                                  (equate
                                                                   "e`p1 - (e`p1 + d!1 * ^(e`p2 - e`p1)) +
                                           (s`p1 + d * ^(s`p2 - s`p1))"
                                                                   "s`p1 - (d + d!1) * ^(e`p2 - e`p1)")
                                                                  (("1"
                                                                    (replace
                                                                     -2)
                                                                    (("1"
                                                                      (equate
                                                                       "s`p1 - (d + d!1) * -^(s`p2 - s`p1)"
                                                                       "s`p1 + (d + d!1) * ^(s`p2 - s`p1)")
                                                                      (("1"
                                                                        (rewrite
                                                                         "point_on_segment_has_norm_offset")
                                                                        (("1"
                                                                          (inst
                                                                           +
                                                                           "d!1 + d")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     -3)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (move-terms
                                                               -1
                                                               l
                                                               1)
                                                              (("2"
                                                                (use
                                                                 "perp_right_nzvect_neq_zero")
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -6)
                                                    (("2"
                                                      (inst
                                                       +
                                                       "d / norm(s`p2 - s`p1)")
                                                      (("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (inst + "0")
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -1)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (use "parallel_defs_almost_same")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (flatten)
                          (("2" (move-terms -1 l 1)
                            (("2" (use "perp_right_nzvect_neq_zero")
                              (("2" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (large_parallel_seg_offset_imp_p2_closer 0
  (large_parallel_seg_offset_imp_p2_closer-1 nil 3874129020
   ("" (skeep + t)
    (("" (expand "parallel_segment_offset")
      (("" (lift-if)
        (("" (ground)
          ((""
            (name-replace "xp" "find_perp_ray_line_crossing(s, e`p1)"
             :hide? nil)
            (("" (lemma "projected_point_preserves_distance_ordering")
              (("" (inst - "s" "s`p1" "s`p2" "e`p1")
                (("1" (assert)
                  (("1" (replace -2)
                    (("1"
                      (equate "norm(e`p1 - s`p1)" "norm(s`p1 - e`p1)"
                       (rewrite "norm_sym"))
                      (("1"
                        (equate "norm(e`p1 - s`p2)" "norm(s`p2 - e`p1)"
                         (rewrite "norm_sym"))
                        (("1"
                          (case "norm(s`p1 - e`p1) = norm(s`p2 - e`p1)")
                          (("1" (assert)
                            (("1" (lemma "law_of_cosines_sq")
                              (("1"
                                (inst-cp - "s`p1" "xp" "e`p1")
                                (("1"
                                  (inst - "s`p2" "xp" "e`p1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (equate
                                       "norm(s`p1 - e`p1)"
                                       "norm(e`p1 - s`p1)"
                                       (rewrite "norm_sym"))
                                      (("1"
                                        (equate
                                         "norm(s`p2 - e`p1)"
                                         "norm(e`p1 - s`p2)"
                                         (rewrite "norm_sym"))
                                        (("1"
                                          (rewrite "sq_gt" + :dir rl)
                                          (("1"
                                            (replace -1 :hide? t)
                                            (("1"
                                              (replace -1 :hide? t)
                                              (("1"
                                                (cancel-add 2)
                                                (("1"
                                                  (equate
                                                   "(s`p1 - xp) * (e`p1 - xp)"
                                                   "0")
                                                  (("1"
                                                    (equate
                                                     "(s`p2 - xp) * (e`p1 - xp)"
                                                     "0")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (equate
                                                         "norm(xp - s`p1)"
                                                         "norm(s`p1 - xp)")
                                                        (("1"
                                                          (case
                                                           "xp = s`p1 + norm(s`p1 - xp) * ^(xp - s`p1)")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             2)
                                                            (("1"
                                                              (replace
                                                               -5)
                                                              (("1"
                                                                (hide-all-but
                                                                 (-6
                                                                  2))
                                                                (("1"
                                                                  (name-replace
                                                                   "ss"
                                                                   "^(s`p2 - s`p1)")
                                                                  (("1"
                                                                    (name-replace
                                                                     "nn"
                                                                     "norm(s`p1 - xp)")
                                                                    (("1"
                                                                      (equate
                                                                       "s`p1 - (s`p1 + nn * ss)"
                                                                       "-nn * ss")
                                                                      (("1"
                                                                        (equate
                                                                         "s`p2 - (s`p1 + nn * ss)"
                                                                         "(norm(s`p2 - s`p1) - nn) * ss")
                                                                        (("1"
                                                                          (rewrite*
                                                                           "norm_scal")
                                                                          (("1"
                                                                            (rewrite
                                                                             "sq_gt")
                                                                            (("1"
                                                                              (cancel-by
                                                                               1
                                                                               "norm(ss)")
                                                                              (("1"
                                                                                (expand
                                                                                 "length")
                                                                                (("1"
                                                                                  (expand
                                                                                   "abs")
                                                                                  (("1"
                                                                                    (apply
                                                                                     (repeat
                                                                                      (lift-if)))
                                                                                    (("1"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "ss")
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (equate
                                                               "norm(s`p1 - xp)"
                                                               "norm(xp - s`p1)"
                                                               (rewrite
                                                                "norm_sym"))
                                                              (("2"
                                                                (expand
                                                                 "^")
                                                                (("2"
                                                                  (real-props)
                                                                  (("2"
                                                                    (grind-with-ext)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           "norm_sym")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "perp_line_orthogonal")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "s"
                                                         "s`p2"
                                                         "e`p1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -4)
                                                            (("1"
                                                              (hide-all-but
                                                               (-1 1))
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "point_on_segment?")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "perp_line_orthogonal")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "s"
                                                       "s`p1"
                                                       "e`p1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace -4)
                                                          (("1"
                                                            (hide-all-but
                                                             (-1 1))
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "point_on_segment?")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2"
                              (case "exists (k: real): xp = s`p1 + k * (s`p2 - s`p1)")
                              (("1"
                                (skeep)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (rewrite "normalize_scal")
                                      (("1"
                                        (lemma "scal_cancel")
                                        (("1"
                                          (inst
                                           -
                                           "sign(k)"
                                           "1"
                                           "^(s`p2 - s`p1)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "sign" -1)
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (rewrite
                                                     "norm_scal")
                                                    (("1"
                                                      (expand "abs")
                                                      (("1"
                                                        (expand
                                                         "length")
                                                        (("1"
                                                          (mult-cases
                                                           -5
                                                           :mult-op
                                                           1*)
                                                          (("1"
                                                            (equate
                                                             "s`p1 + k * (s`p2 - s`p1) - s`p2"
                                                             "(k - 1) * (s`p2 - s`p1)")
                                                            (("1"
                                                              (rewrite
                                                               "norm_scal")
                                                              (("1"
                                                                (expand
                                                                 "abs")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (replace -1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "find_perp_ray_line_crossing")
                                (("2"
                                  (name-replace
                                   "xing"
                                   "line_crossing((# p1 := e`p1,
                                             p2 := e`p1 + perp_right(s`p2 - s`p1) #),
                                          s)"
                                   :hide?
                                   nil)
                                  (("1"
                                    (use "line_crossing_commutative")
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (use "line_crossing_on_line")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (ground)
                                            (("1"
                                              (use "perp_lines_cross")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (move-terms -1 l 1)
                                              (("2"
                                                (use
                                                 "perp_right_nzvect_neq_zero")
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (move-terms -1 l 1)
                                          (("2"
                                            (use
                                             "perp_right_nzvect_neq_zero")
                                            (("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (move-terms -1 l 1)
                                        (("2"
                                          (use
                                           "perp_right_nzvect_neq_zero")
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "point_on_segment?")
                  (("2" (assert) nil nil)) nil)
                 ("3" (expand "point_on_segment?")
                  (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (parallel_nonoverlapping_dir_offset_neg 0
  (parallel_nonoverlapping_dir_offset_neg-1 nil 3874129020
   ("" (skeep + t)
    (("" (expand "overlapping?")
      (("" (flatten)
        (("" (splash 1)
          (("1" (case "parallel_segment_offset(s, e) <= length(s)")
            (("1" (lemma "parallel_perp_crossing_on_segment")
              (("1" (inst - "s" "e" "e`p1" "0")
                (("1" (assert) (("1" (assert) nil nil)) nil)) nil))
              nil)
             ("2" (lemma "large_parallel_seg_offset_imp_p2_closer")
              (("2" (inst - "s" "e") (("2" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (use "parallel_normalized_vector_cases")
            (("2" (ground)
              (("1" (hide 1)
                (("1" (case "parallel_segment_offset(s, e) < 0")
                  (("1"
                    (use "parallel_segment_offset_semi_commutative")
                    (("1" (assert)
                      (("1"
                        (case "parallel_segment_offset(e, s) <= length(e)")
                        (("1"
                          (lemma "parallel_perp_crossing_on_segment")
                          (("1" (inst - "e" "s" "s`p1" "0")
                            (("1" (assert) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (lemma
                           "large_parallel_seg_offset_imp_p2_closer")
                          (("2" (inst - "e" "s")
                            (("2" (assert)
                              (("2"
                                (equate
                                 "norm(e`p1 - s`p1)"
                                 "norm(s`p1 - e`p1)"
                                 (rewrite "norm_sym"))
                                (("2"
                                  (equate
                                   "norm(e`p2 - s`p1)"
                                   "norm(s`p1 - e`p2)"
                                   (rewrite "norm_sym"))
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2"
                    (case "parallel_segment_offset(s, e) <= length(s)")
                    (("1" (lemma "parallel_perp_crossing_on_segment")
                      (("1" (inst - "s" "e" "e`p1" "0")
                        (("1" (assert) (("1" (ground) nil nil)) nil))
                        nil))
                      nil)
                     ("2"
                      (lemma "large_parallel_seg_offset_imp_p2_closer")
                      (("2" (inst - "s" "e") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (use "parallel_defs_almost_same")
                (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (parallel_nonoverlapping_xing_pt_offsets_TCC1 0
  (parallel_nonoverlapping_xing_pt_offsets_TCC1-2 nil 3874129020
   ("" (skeep*)
    (("" (hide-all-but (-1 2))
      (("" (replace -1 :hide? t)
        (("" (expand "nearest_endpoints")
          (("" (expand "segment_endpoint?") (("" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (parallel_nonoverlapping_xing_pt_offsets subtype "perp_crossings.u"
    "(segments_2d.segment_endpoint?(perp_crossings.s))"))
  (parallel_nonoverlapping_xing_pt_offsets_TCC1-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (parallel_nonoverlapping_xing_pt_offsets subtype "perp_crossings.u"
    "(segments_2d.segment_endpoint?(perp_crossings.s))")))
 (parallel_nonoverlapping_xing_pt_offsets_TCC2 0
  (parallel_nonoverlapping_xing_pt_offsets_TCC2-2 nil 3874129020
   ("" (skeep*)
    (("" (hide-all-but (-2 2))
      (("" (replace -1 :hide? t)
        (("" (expand "nearest_endpoints")
          (("" (expand "segment_endpoint?") (("" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (parallel_nonoverlapping_xing_pt_offsets subtype "perp_crossings.v"
    "(segments_2d.segment_endpoint?(perp_crossings.e))"))
  (parallel_nonoverlapping_xing_pt_offsets_TCC2-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (parallel_nonoverlapping_xing_pt_offsets subtype "perp_crossings.v"
    "(segments_2d.segment_endpoint?(perp_crossings.e))")))
 (parallel_nonoverlapping_xing_pt_offsets_TCC3 0
  (parallel_nonoverlapping_xing_pt_offsets_TCC3-2 nil 3874129020
   ("" (skeep*)
    (("" (hide -2 -4)
      (("" (expand "opposite_endpoint")
        (("" (expand "nearest_endpoints")
          (("" (apply (repeat (lift-if))) (("" (ground) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (parallel_nonoverlapping_xing_pt_offsets subtype
    "(vectors_2D.-)(perp_crossings.ou, perp_crossings.u)" "Nz_vector"))
  (parallel_nonoverlapping_xing_pt_offsets_TCC3-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (parallel_nonoverlapping_xing_pt_offsets subtype
    "(vectors_2D.-)(perp_crossings.ou, perp_crossings.u)"
    "Nz_vector")))
 (parallel_nonoverlapping_xing_pt_offsets_TCC4 0
  (parallel_nonoverlapping_xing_pt_offsets_TCC4-2 nil 3874129020
   ("" (skeep*)
    (("" (hide -1 -3)
      (("" (expand "nearest_endpoints")
        (("" (expand "opposite_endpoint")
          (("" (apply (repeat (lift-if))) (("" (ground) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (parallel_nonoverlapping_xing_pt_offsets subtype
    "(vectors_2D.-)(perp_crossings.ov, perp_crossings.v)" "Nz_vector"))
  (parallel_nonoverlapping_xing_pt_offsets_TCC4-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (parallel_nonoverlapping_xing_pt_offsets subtype
    "(vectors_2D.-)(perp_crossings.ov, perp_crossings.v)"
    "Nz_vector")))
 (parallel_nonoverlapping_xing_pt_offsets 0
  (parallel_nonoverlapping_xing_pt_offsets-1 nil 3874129020
   ("" (skeep* + t)
    (("" (skoletin*)
      (("" (expand "point_on_segment?")
        ((""
          (case "segment_endpoint?(s)(u) and segment_endpoint?(e)(v)")
          (("1" (flatten)
            (("1" (case "u = ou or v = ov")
              (("1" (hide +)
                (("1" (expand "opposite_endpoint")
                  (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil))
                nil)
               ("2" (flatten)
                (("2"
                  (name-replace*
                   ("useg" "(# p1 := u, p2 := ou #)" "vseg"
                    "(# p1 := v, p2 := ov #)"))
                  (("2"
                    (case "point_on_segment?(p, useg) & point_on_segment?(q, vseg)")
                    (("1" (flatten)
                      (("1"
                        (lemma
                         "parallel_nonoverlapping_dir_offset_neg")
                        (("1" (inst - "useg" "vseg")
                          (("1" (split -1)
                            (("1" (flatten)
                              (("1"
                                (expand "useg" -1)
                                (("1"
                                  (expand "vseg" -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (use
                                       "parallel_segment_offset_semi_commutative")
                                      (("1"
                                        (expand "useg" -1 (2 3))
                                        (("1"
                                          (expand "vseg" -1 (2 3))
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (hide-all-but
                                                   (-1 -3 1 2))
                                                  (("1"
                                                    (replace
                                                     -1
                                                     :hide?
                                                     t)
                                                    (("1"
                                                      (move-terms -1 r)
                                                      (("1"
                                                        (elim-unary -1)
                                                        (("1"
                                                          (factor -1 l)
                                                          (("1"
                                                            (use
                                                             "scal_eq_zero")
                                                            (("1"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (split 4)
                                                  (("1"
                                                    (lemma
                                                     "parallel_perp_crossing_is_p1_plus_offset")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "vseg"
                                                       "useg")
                                                      (("1"
                                                        (lemma
                                                         "parallel_line_crossing_points_same_vectors")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "useg"
                                                           "vseg"
                                                           "u"
                                                           "p")
                                                          (("1"
                                                            (expand
                                                             "useg"
                                                             (-1 -2))
                                                            (("1"
                                                              (expand
                                                               "vseg"
                                                               (-1 -2))
                                                              (("1"
                                                                (replace
                                                                 -8)
                                                                (("1"
                                                                  (replace
                                                                   -9)
                                                                  (("1"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (rewrite
                                                                       "point_on_segment_has_norm_offset"
                                                                       -6)
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (expand
                                                                           "useg"
                                                                           -6)
                                                                          (("1"
                                                                            (name-replace*
                                                                             ("xpp"
                                                                              "find_perp_ray_line_crossing(vseg, p)"
                                                                              "xpu"
                                                                              "find_perp_ray_line_crossing(vseg, u)"))
                                                                            (("1"
                                                                              (replace
                                                                               -8
                                                                               -3)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (equate
                                                                                   "find_perp_ray_line_crossing(e, p)"
                                                                                   "xpp")
                                                                                  (("1"
                                                                                    (move-terms
                                                                                     -3
                                                                                     r
                                                                                     2)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -4
                                                                                       -3)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -6)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -3
                                                                                           1
                                                                                           :dir
                                                                                           rl)
                                                                                          (("1"
                                                                                            (inst
                                                                                             +
                                                                                             "(parallel_segment_offset(useg, vseg) - d) / norm(ov - v)")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -5)
                                                                                              (("1"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (name-replace
                                                                                                   "pso"
                                                                                                   "parallel_segment_offset(vseg, useg)")
                                                                                                  (("1"
                                                                                                    (cancel-add
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "scal_neg")
                                                                                                      (("1"
                                                                                                        (factor
                                                                                                         1
                                                                                                         l)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "^")
                                                                                                          (("1"
                                                                                                            (real-props)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (splash
                                                                                               1
                                                                                               t)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 (-7
                                                                                                  1))
                                                                                                (("2"
                                                                                                  (real-props)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (hide-all-but
                                                                                               (1
                                                                                                4))
                                                                                              (("3"
                                                                                                (use
                                                                                                 "norm_eq_0")
                                                                                                (("3"
                                                                                                  (ground)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (name-replace
                                                                                       "uu"
                                                                                       "^(ou - u)")
                                                                                      (("2"
                                                                                        (grind-with-ext)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lemma
                                                                                     "perp_ray_line_crossing_swapped_endpoints")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "s"
                                                                                       "e"
                                                                                       "useg"
                                                                                       "vseg"
                                                                                       "p"
                                                                                       "q")
                                                                                      (("2"
                                                                                        (ground)
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           (-12
                                                                                            -13
                                                                                            -16
                                                                                            1
                                                                                            2))
                                                                                          (("1"
                                                                                            (grind-with-ext)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide-all-but
                                                                                           (-11
                                                                                            -14
                                                                                            -15
                                                                                            1
                                                                                            2))
                                                                                          (("2"
                                                                                            (grind-with-ext)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       +
                                                                       "0")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (rewrite
                                                                       "point_on_segment_has_offset"
                                                                       -5)
                                                                      (("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (expand
                                                                           "useg"
                                                                           -5)
                                                                          (("3"
                                                                            (inst
                                                                             +
                                                                             "d")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (use
                                                     "parallel_perp_crossing_is_p1_plus_offset")
                                                    (("2"
                                                      (lemma
                                                       "parallel_line_crossing_points_same_vectors")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "vseg"
                                                         "useg"
                                                         "v"
                                                         "q")
                                                        (("2"
                                                          (expand
                                                           "useg"
                                                           (-1 -2))
                                                          (("2"
                                                            (expand
                                                             "vseg"
                                                             (-1 -2))
                                                            (("2"
                                                              (replace
                                                               -8)
                                                              (("2"
                                                                (replace
                                                                 -9)
                                                                (("2"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (rewrite
                                                                     "point_on_segment_has_norm_offset"
                                                                     -7)
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (expand
                                                                         "vseg"
                                                                         -7)
                                                                        (("1"
                                                                          (name-replace*
                                                                           ("xpq"
                                                                            "find_perp_ray_line_crossing(useg, q)"
                                                                            "xpv"
                                                                            "find_perp_ray_line_crossing(useg, v)"))
                                                                          (("1"
                                                                            (replace
                                                                             -9
                                                                             -3)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (equate
                                                                                 "find_perp_ray_line_crossing(s, q)"
                                                                                 "xpq")
                                                                                (("1"
                                                                                  (move-terms
                                                                                   -3
                                                                                   r
                                                                                   2)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -4
                                                                                     -3)
                                                                                    (("1"
                                                                                      (case-replace
                                                                                       "^(ov -v) = -^(ou - u)")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -4
                                                                                         1
                                                                                         :dir
                                                                                         rl)
                                                                                        (("1"
                                                                                          (inst
                                                                                           +
                                                                                           "(parallel_segment_offset(useg, vseg) - d) / norm(ou - u)")
                                                                                          (("1"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("1"
                                                                                              (name-replace
                                                                                               "pso"
                                                                                               "parallel_segment_offset(useg, vseg)")
                                                                                              (("1"
                                                                                                (cancel-add
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "scal_neg")
                                                                                                  (("1"
                                                                                                    (factor
                                                                                                     1
                                                                                                     l)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "^")
                                                                                                      (("1"
                                                                                                        (real-props)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (splash
                                                                                             1
                                                                                             t)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               (-8
                                                                                                1))
                                                                                              (("2"
                                                                                                (real-props)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (hide-all-but
                                                                                             (1
                                                                                              3))
                                                                                            (("3"
                                                                                              (use
                                                                                               "norm_eq_0")
                                                                                              (("3"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replace
                                                                                         -6
                                                                                         1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (name-replace
                                                                                     "vv"
                                                                                     "^(ov - v)")
                                                                                    (("2"
                                                                                      (grind-with-ext)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   "perp_ray_line_crossing_swapped_endpoints")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "s"
                                                                                     "e"
                                                                                     "useg"
                                                                                     "vseg"
                                                                                     "p"
                                                                                     "q")
                                                                                    (("2"
                                                                                      (ground)
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (-12
                                                                                          -13
                                                                                          -16
                                                                                          1
                                                                                          2))
                                                                                        (("1"
                                                                                          (grind-with-ext)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         (-11
                                                                                          -14
                                                                                          -15
                                                                                          1
                                                                                          2))
                                                                                        (("2"
                                                                                          (grind-with-ext)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (inst
                                                                     +
                                                                     "0")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (rewrite
                                                                     "point_on_segment_has_offset"
                                                                     -6)
                                                                    (("3"
                                                                      (skeep)
                                                                      (("3"
                                                                        (expand
                                                                         "vseg"
                                                                         -6)
                                                                        (("3"
                                                                          (inst
                                                                           +
                                                                           "d")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "overlapping?")
                              (("2"
                                (flatten)
                                (("2"
                                  (hide 3)
                                  (("2"
                                    (case
                                     "(useg = s or useg = reverse_segment(s)) and
                                    (vseg = e or vseg = reverse_segment(e))")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (split -2)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (use
                                             "find_perp_ray_crossing_reverse")
                                            (("2"
                                              (replace -3)
                                              (("2"
                                                (replace -2)
                                                (("2"
                                                  (rewrite
                                                   "reverse_reverse_segment")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       "find_perp_ray_crossing_reverse")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "e"
                                                         "s`p2")
                                                        (("2"
                                                          (replace
                                                           -1
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "reverse_segment"
                                                               -5)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -1)
                                          (("2"
                                            (split -2)
                                            (("1"
                                              (lemma
                                               "find_perp_ray_crossing_reverse")
                                              (("1"
                                                (inst-cp
                                                 -
                                                 "useg"
                                                 "vseg`p1")
                                                (("1"
                                                  (inst
                                                   -
                                                   "useg"
                                                   "vseg`p2")
                                                  (("1"
                                                    (replace
                                                     -4
                                                     (-1 -2))
                                                    (("1"
                                                      (rewrite
                                                       "reverse_reverse_segment")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "reverse_segment"
                                                           -5)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "useg")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -1 :hide? t)
                                              (("2"
                                                (ground)
                                                (("1"
                                                  (expand
                                                   "reverse_segment"
                                                   1
                                                   2)
                                                  (("1"
                                                    (use
                                                     "find_perp_ray_crossing_reverse")
                                                    (("1"
                                                      (rewrite
                                                       "reverse_reverse_segment")
                                                      (("1"
                                                        (replace
                                                         -1
                                                         :hide?
                                                         t)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "reverse_segment"
                                                   1
                                                   2)
                                                  (("2"
                                                    (use
                                                     "find_perp_ray_crossing_reverse")
                                                    (("2"
                                                      (rewrite
                                                       "reverse_reverse_segment")
                                                      (("2"
                                                        (replace
                                                         -1
                                                         :hide?
                                                         t)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (expand
                                                   "reverse_segment"
                                                   1
                                                   2)
                                                  (("3"
                                                    (use
                                                     "find_perp_ray_crossing_reverse")
                                                    (("3"
                                                      (rewrite
                                                       "reverse_reverse_segment")
                                                      (("3"
                                                        (replace
                                                         -1
                                                         :hide?
                                                         t)
                                                        (("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (expand
                                                   "reverse_segment"
                                                   1
                                                   2)
                                                  (("4"
                                                    (use
                                                     "find_perp_ray_crossing_reverse")
                                                    (("4"
                                                      (rewrite
                                                       "reverse_reverse_segment")
                                                      (("4"
                                                        (replace
                                                         -1
                                                         :hide?
                                                         t)
                                                        (("4"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but
                                       (-4 -5 -6 -7 -8 -9 1))
                                      (("2" (grind-with-ext) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide 4 5)
                              (("3"
                                (expand "useg")
                                (("3"
                                  (expand "vseg")
                                  (("3"
                                    (expand "nearest_endpoints")
                                    (("3"
                                      (apply (repeat (lift-if)))
                                      (("3"
                                        (ground)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (replace -4)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -2)
                                          (("2"
                                            (replace -4)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (replace -1)
                                          (("3"
                                            (replace -3)
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (replace -1)
                                          (("4"
                                            (replace -2)
                                            (("4"
                                              (expand "min")
                                              (("4"
                                                (apply
                                                 (repeat (lift-if)))
                                                (("4"
                                                  (ground)
                                                  (("1"
                                                    (expand
                                                     "opposite_endpoint")
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "opposite_endpoint")
                                                    (("2"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand
                                                     "opposite_endpoint")
                                                    (("3"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (expand
                                                     "opposite_endpoint")
                                                    (("4"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (hide 4 5)
                              (("4"
                                (expand "useg")
                                (("4"
                                  (expand "vseg")
                                  (("4"
                                    (expand "nearest_endpoints")
                                    (("4"
                                      (apply (repeat (lift-if)))
                                      (("4"
                                        (ground)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (replace -4)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -2)
                                          (("2"
                                            (replace -4)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (replace -1)
                                          (("3"
                                            (replace -3)
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (replace -1)
                                          (("4"
                                            (replace -2)
                                            (("4"
                                              (expand "min")
                                              (("4"
                                                (apply
                                                 (repeat (lift-if)))
                                                (("4"
                                                  (ground)
                                                  (("1"
                                                    (expand
                                                     "opposite_endpoint")
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "opposite_endpoint")
                                                    (("2"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand
                                                     "opposite_endpoint")
                                                    (("3"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (expand
                                                     "opposite_endpoint")
                                                    (("4"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("5" (hide 4 5)
                              (("5"
                                (expand "useg")
                                (("5"
                                  (expand "vseg")
                                  (("5"
                                    (expand "nearest_endpoints")
                                    (("5"
                                      (apply (repeat (lift-if)))
                                      (("5"
                                        (ground)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (replace -4)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -2)
                                          (("2"
                                            (replace -4)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (replace -1)
                                          (("3"
                                            (replace -3)
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (replace -1)
                                          (("4"
                                            (replace -2)
                                            (("4"
                                              (expand "min")
                                              (("4"
                                                (apply
                                                 (repeat (lift-if)))
                                                (("4"
                                                  (ground)
                                                  (("1"
                                                    (expand
                                                     "opposite_endpoint")
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "opposite_endpoint")
                                                    (("2"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand
                                                     "opposite_endpoint")
                                                    (("3"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (expand
                                                     "opposite_endpoint")
                                                    (("4"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 4 5)
                            (("2"
                              (case "(useg = s or useg = reverse_segment(s)) and
                                                 (vseg = e or vseg = reverse_segment(e))")
                              (("1"
                                (ground)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (rewrite
                                     "parallel_reverse"
                                     :dir
                                     rl)
                                    nil
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -2)
                                  (("2"
                                    (rewrite "parallel_commutative")
                                    (("2"
                                      (rewrite
                                       "parallel_reverse"
                                       :dir
                                       rl)
                                      (("2"
                                        (rewrite
                                         "parallel_commutative")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (replace -1)
                                  (("3"
                                    (replace -2)
                                    (("3"
                                      (rewrite
                                       "parallel_reverse"
                                       :dir
                                       rl)
                                      (("3"
                                        (rewrite
                                         "parallel_commutative")
                                        (("3"
                                          (rewrite
                                           "parallel_reverse"
                                           :dir
                                           rl)
                                          (("3"
                                            (rewrite
                                             "parallel_commutative")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (-3 -4 -5 -6 -7 -8 1))
                                (("2" (grind-with-ext) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 4 5)
                      (("2" (rewrite* "point_on_segment_has_offset")
                        (("1" (skeep*)
                          (("1" (expand "segment_endpoint?")
                            (("1" (expand "useg" +)
                              (("1"
                                (expand "vseg" +)
                                (("1"
                                  (expand "opposite_endpoint")
                                  (("1"
                                    (split -3)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -4)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (ground)
                                            (("1"
                                              (inst + "d")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (inst + "d!1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (ground)
                                            (("1"
                                              (inst + "d")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (inst + "1 - d!1")
                                              (("2"
                                                (assert)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (ground)
                                      (("1"
                                        (inst + "1 - d")
                                        (("1"
                                          (ground)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst + "1 - d")
                                        (("2" (grind) nil nil))
                                        nil)
                                       ("3"
                                        (inst + "d!1")
                                        (("3" (ground) nil nil))
                                        nil)
                                       ("4"
                                        (inst + "1 - d!1")
                                        (("4" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "vseg") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand "vseg") (("3" (ground) nil nil)) nil)
                     ("4" (expand "useg") (("4" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but (-3 -4 1))
            (("2" (expand "nearest_endpoints")
              (("2" (apply (repeat (lift-if)))
                (("2" (expand "segment_endpoint?")
                  (("2" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (points_where_segment_crosses_segment_TCC1 0
  (points_where_segment_crosses_segment_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (points_where_segment_crosses_segment subtype
    "vertex_list.singleton_seq(segments_2d.segment_intersect_kernel(perp_crossings.s, perp_crossings.cur_segment)`2)"
    "{uvs: vertex_list.uniq_vertex_seq_with_empty | reals.<=(uvs`length, 2)}"))
  (points_where_segment_crosses_segment_TCC1-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (points_where_segment_crosses_segment subtype
    "vertex_list.singleton_seq(segments_2d.segment_intersect_kernel(perp_crossings.s, perp_crossings.cur_segment)`2)"
    "{uvs: vertex_list.uniq_vertex_seq_with_empty | reals.<=(uvs`length, 2)}")))
 (points_where_segment_crosses_segment_TCC2 0
  (points_where_segment_crosses_segment_TCC2-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (points_where_segment_crosses_segment subtype
    "vertex_list.singleton_seq(perp_crossings.cur_segment`p1)"
    "{uvs: vertex_list.uniq_vertex_seq_with_empty | reals.<=(uvs`length, 2)}"))
  (points_where_segment_crosses_segment_TCC2-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (points_where_segment_crosses_segment subtype
    "vertex_list.singleton_seq(perp_crossings.cur_segment`p1)"
    "{uvs: vertex_list.uniq_vertex_seq_with_empty | reals.<=(uvs`length, 2)}")))
 (points_where_segment_crosses_segment_TCC3 0
  (points_where_segment_crosses_segment_TCC3-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (points_where_segment_crosses_segment subtype
    "vertex_list.singleton_seq(perp_crossings.cur_segment`p1)"
    "{uvs: vertex_list.uniq_vertex_seq_with_empty | reals.<=(uvs`length, 2)}"))
  (points_where_segment_crosses_segment_TCC3-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (points_where_segment_crosses_segment subtype
    "vertex_list.singleton_seq(perp_crossings.cur_segment`p1)"
    "{uvs: vertex_list.uniq_vertex_seq_with_empty | reals.<=(uvs`length, 2)}")))
 (points_where_segment_crosses_segment_TCC4 0
  (points_where_segment_crosses_segment_TCC4-2 nil 3874129020
   ("" (skeep)
    (("" (expand "empty_seq")
      (("" (expand "uniq_vertex_seq_with_empty?")
        (("" (skeep) nil nil)) nil))
      nil))
    nil)
   nil shostak
   (points_where_segment_crosses_segment subtype
    "finite_sequences[point_2d].empty_seq"
    "{uvs: vertex_list.uniq_vertex_seq_with_empty | reals.<=(uvs`length, 2)}"))
  (points_where_segment_crosses_segment_TCC4-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (points_where_segment_crosses_segment subtype
    "finite_sequences[point_2d].empty_seq"
    "{uvs: vertex_list.uniq_vertex_seq_with_empty | reals.<=(uvs`length, 2)}")))
 (points_where_segment_crosses_segment_TCC5 0
  (points_where_segment_crosses_segment_TCC5-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (points_where_segment_crosses_segment subtype
    "finite_sequences[point_2d].empty_seq"
    "{uvs: vertex_list.uniq_vertex_seq_with_empty | reals.<=(uvs`length, 2)}"))
  (points_where_segment_crosses_segment_TCC5-1 nil 3874127258
   ("" (subtype-tcc) nil nil) nil nil
   (points_where_segment_crosses_segment subtype
    "finite_sequences[point_2d].empty_seq"
    "{uvs: vertex_list.uniq_vertex_seq_with_empty | reals.<=(uvs`length, 2)}"))))

