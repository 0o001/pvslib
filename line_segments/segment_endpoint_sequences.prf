(segment_endpoint_sequences
 (segment_endpoint_cond_TCC1 0
  (segment_endpoint_cond_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (segment_endpoint_cond subtype "segment_endpoint_sequences.i"
    "below[S`length]"))
  (segment_endpoint_cond_TCC1-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (segment_endpoint_cond subtype "segment_endpoint_sequences.i"
    "below[S`length]")))
 (segment_endpoint_cond_TCC2 0
  (segment_endpoint_cond_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (segment_endpoint_cond subtype
    "(number_fields.+)(segment_endpoint_sequences.i, 1)"
    "below[S`length]"))
  (segment_endpoint_cond_TCC2-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (segment_endpoint_cond subtype
    "(number_fields.+)(segment_endpoint_sequences.i, 1)"
    "below[S`length]")))
 (point_on_segment_seq?_TCC1 0
  (point_on_segment_seq?_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (point_on_segment_seq? subtype "0" "below[S`length]"))
  (point_on_segment_seq?_TCC1-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (point_on_segment_seq? subtype "0" "below[S`length]")))
 (point_on_segment_seq?_TCC2 0
  (point_on_segment_seq?_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (point_on_segment_seq? subtype "segment_endpoint_sequences.i"
    "below[S`length]"))
  (point_on_segment_seq?_TCC2-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (point_on_segment_seq? subtype "segment_endpoint_sequences.i"
    "below[S`length]")))
 (point_on_segment_seq?_TCC3 0
  (point_on_segment_seq?_TCC3-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (point_on_segment_seq? subtype
    "(number_fields.+)(segment_endpoint_sequences.i, 1)"
    "below[S`length]"))
  (point_on_segment_seq?_TCC3-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (point_on_segment_seq? subtype
    "(number_fields.+)(segment_endpoint_sequences.i, 1)"
    "below[S`length]")))
 (point_on_segment_seq?_TCC4 0
  (point_on_segment_seq?_TCC4-2 nil 3874129021
   ("" (skeep + t)
    (("" (skeep) (("" (inst - "i") (("" (assert) nil nil)) nil)) nil))
    nil)
   nil shostak
   (point_on_segment_seq? subtype
    "segment_endpoint_sequences.S`seq((number_fields.+)(segment_endpoint_sequences.i, 1))"
    "{p: vectors_cross_2d.point_2d | p /= segment_endpoint_sequences.S`seq(segment_endpoint_sequences.i)}"))
  (point_on_segment_seq?_TCC4-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (point_on_segment_seq? subtype
    "segment_endpoint_sequences.S`seq((number_fields.+)(segment_endpoint_sequences.i, 1))"
    "{p: vectors_cross_2d.point_2d | p /= segment_endpoint_sequences.S`seq(segment_endpoint_sequences.i)}")))
 (reverse_segment_seq_TCC1 0
  (reverse_segment_seq_TCC1-2 nil 3874129021
   ("" (skeep + t) (("" (ground) nil nil)) nil) nil shostak
   (reverse_segment_seq subtype
    "(number_fields.-)((number_fields.-)(segment_endpoint_sequences.S`length, 1), segment_endpoint_sequences.i)"
    "below[S`length]"))
  (reverse_segment_seq_TCC1-1 nil 3874128237 ("" (subtype-tcc) nil nil)
   nil nil
   (reverse_segment_seq subtype
    "(number_fields.-)((number_fields.-)(segment_endpoint_sequences.S`length, 1), segment_endpoint_sequences.i)"
    "below[S`length]")))
 (reverse_segment_seq_TCC2 0
  (reverse_segment_seq_TCC2-2 nil 3874129021
   ("" (skeep + t)
    (("" (ground)
      (("" (skeep)
        (("" (inst - "S`length - 2 - i_1") (("" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (reverse_segment_seq subtype
    "(# length := segment_endpoint_sequences.S`length, seq := LAMBDA (i: naturalnumbers.below(segment_endpoint_sequences.S`length)): segment_endpoint_sequences.S`seq((number_fields.-)((number_fields.-)(segment_endpoint_sequences.S`length, 1), i)) #)"
    "segment_endpoint_seq"))
  (reverse_segment_seq_TCC2-1 nil 3874128237 ("" (subtype-tcc) nil nil)
   nil nil
   (reverse_segment_seq subtype
    "(# length := segment_endpoint_sequences.S`length, seq := LAMBDA (i: naturalnumbers.below(segment_endpoint_sequences.S`length)): segment_endpoint_sequences.S`seq((number_fields.-)((number_fields.-)(segment_endpoint_sequences.S`length, 1), i)) #)"
    "segment_endpoint_seq")))
 (reverse_reverse_segment_seq 0
  (reverse_reverse_segment_seq-1 nil 3874129021
   ("" (skeep)
    (("" (expand "reverse_segment_seq")
      (("" (apply-extensionality :hide? t)
        (("" (apply-extensionality :hide? t) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (point_on_reverse_segment_seq 0
  (point_on_reverse_segment_seq-1 nil 3874129021
   ("" (skeep)
    (("" (expand "reverse_segment_seq")
      (("" (expand "point_on_segment_seq?")
        (("" (ground)
          (("1" (skeep)
            (("1" (lemma "point_on_reverse_segment")
              (("1" (expand "reverse_segment")
                (("1" (inst + "S`length - 2 - i")
                  (("1" (assert) (("1" (rewrite -1 :dir rl) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (lemma "point_on_reverse_segment")
              (("2" (expand "reverse_segment")
                (("2" (inst + "S`length - 2 - i_1")
                  (("2" (assert) (("2" (rewrite -1 :dir rl) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (singleton_endpoint_seq_TCC1 0
  (singleton_endpoint_seq_TCC1-2 nil 3874129021
   ("" (judgement-tcc) nil nil) nil shostak
   (singleton_endpoint_seq subtype
    "(# length := 1, seq := LAMBDA (i: naturalnumbers.below(1)): segment_endpoint_sequences.p #)"
    "segment_endpoint_seq"))
  (singleton_endpoint_seq_TCC1-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (singleton_endpoint_seq subtype
    "(# length := 1, seq := LAMBDA (i: naturalnumbers.below(1)): segment_endpoint_sequences.p #)"
    "segment_endpoint_seq")))
 (two_point_endpt_seq_TCC1 0
  (two_point_endpt_seq_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (two_point_endpt_seq subtype
    "(# length := 2, seq := LAMBDA (i: naturalnumbers.below(2)): IF i = 0 THEN segment_endpoint_sequences.p ELSE segment_endpoint_sequences.q ENDIF #)"
    "segment_endpoint_seq"))
  (two_point_endpt_seq_TCC1-1 nil 3874128237 ("" (subtype-tcc) nil nil)
   nil nil
   (two_point_endpt_seq subtype
    "(# length := 2, seq := LAMBDA (i: naturalnumbers.below(2)): IF i = 0 THEN segment_endpoint_sequences.p ELSE segment_endpoint_sequences.q ENDIF #)"
    "segment_endpoint_seq")))
 (alternative_endpt_seqs_TCC1 0
  (alternative_endpt_seqs_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (alternative_endpt_seqs subtype "segment_endpoint_sequences.X"
    "segment_endpoint_seq"))
  (alternative_endpt_seqs_TCC1-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (alternative_endpt_seqs subtype "segment_endpoint_sequences.X"
    "segment_endpoint_seq")))
 (alternative_endpt_seqs_TCC2 0
  (alternative_endpt_seqs_TCC2-2 nil 3874129021
   ("" (skeep + t)
    (("" (ground)
      (("1" (expand "segment_endpoint_cond") (("1" (propax) nil nil))
        nil)
       ("2" (expand "segment_endpoint_cond") (("2" (flatten) nil nil))
        nil)
       ("3" (expand "segment_endpoint_cond") (("3" (propax) nil nil))
        nil)
       ("4" (expand "segment_endpoint_cond") (("4" (flatten) nil nil))
        nil))
      nil))
    nil)
   nil shostak
   (alternative_endpt_seqs subtype "segment_endpoint_sequences.Y"
    "segment_endpoint_seq"))
  (alternative_endpt_seqs_TCC2-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (alternative_endpt_seqs subtype "segment_endpoint_sequences.Y"
    "segment_endpoint_seq")))
 (segment_endpoint_subseq?_TCC1 0
  (segment_endpoint_subseq?_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (segment_endpoint_subseq? subtype
    "modulo_arithmetic.rem(segment_endpoint_sequences.m)((number_fields.+)(segment_endpoint_sequences.i, segment_endpoint_sequences.j))"
    "below[Y`length]"))
  (segment_endpoint_subseq?_TCC1-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (segment_endpoint_subseq? subtype
    "modulo_arithmetic.rem(segment_endpoint_sequences.m)((number_fields.+)(segment_endpoint_sequences.i, segment_endpoint_sequences.j))"
    "below[Y`length]")))
 (append_segment_seqs_TCC1 0
  (append_segment_seqs_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (append_segment_seqs subtype
    "(number_fields.+)(1, segment_endpoint_sequences.i)"
    "below[S`length]"))
  (append_segment_seqs_TCC1-1 nil 3874128237 ("" (subtype-tcc) nil nil)
   nil nil
   (append_segment_seqs subtype
    "(number_fields.+)(1, segment_endpoint_sequences.i)"
    "below[S`length]")))
 (append_segment_seqs_TCC2 0
  (append_segment_seqs_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (append_segment_seqs subtype
    "(number_fields.-)(segment_endpoint_sequences.X`length, 1)"
    "below[X`length]"))
  (append_segment_seqs_TCC2-1 nil 3874128237 ("" (subtype-tcc) nil nil)
   nil nil
   (append_segment_seqs subtype
    "(number_fields.-)(segment_endpoint_sequences.X`length, 1)"
    "below[X`length]")))
 (append_segment_seqs_TCC3 0
  (append_segment_seqs_TCC3-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (append_segment_seqs subtype "0" "below[S`length]"))
  (append_segment_seqs_TCC3-1 nil 3874128237 ("" (subtype-tcc) nil nil)
   nil nil (append_segment_seqs subtype "0" "below[S`length]")))
 (append_segment_seqs_TCC4 0
  (append_segment_seqs_TCC4-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (append_segment_seqs subtype
    "(number_fields.-)((number_fields.+)(segment_endpoint_sequences.X`length, segment_endpoint_sequences.Y`length), 1)"
    "nat"))
  (append_segment_seqs_TCC4-1 nil 3874128237 ("" (subtype-tcc) nil nil)
   nil nil
   (append_segment_seqs subtype
    "(number_fields.-)((number_fields.+)(segment_endpoint_sequences.X`length, segment_endpoint_sequences.Y`length), 1)"
    "nat")))
 (append_segment_seqs_TCC5 0
  (append_segment_seqs_TCC5-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (append_segment_seqs subtype
    "(number_fields.-)(segment_endpoint_sequences.X`length, 1)" "nat"))
  (append_segment_seqs_TCC5-1 nil 3874128237 ("" (subtype-tcc) nil nil)
   nil nil
   (append_segment_seqs subtype
    "(number_fields.-)(segment_endpoint_sequences.X`length, 1)"
    "nat")))
 (append_segment_seqs_TCC6 0
  (append_segment_seqs_TCC6-2 nil 3874129021
   ("" (skeep*)
    (("" (expand "o")
      (("" (expand "^^")
        (("" (lift-if)
          (("" (expand "empty_seq")
            (("" (ground)
              (("" (expand "min") (("" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (append_segment_seqs subtype
    "(finite_sequences[point_2d].o(finite_sequences[point_2d].^^(segment_endpoint_sequences.X, (0, (number_fields.-)(segment_endpoint_sequences.X`length, 1))), segment_endpoint_sequences.Y))`seq"
    "[below[X`length + Y`length - 1] -> point_2d]"))
  (append_segment_seqs_TCC6-1 nil 3874128237 ("" (subtype-tcc) nil nil)
   nil nil
   (append_segment_seqs subtype
    "(finite_sequences[point_2d].o(finite_sequences[point_2d].^^(segment_endpoint_sequences.X, (0, (number_fields.-)(segment_endpoint_sequences.X`length, 1))), segment_endpoint_sequences.Y))`seq"
    "[below[X`length + Y`length - 1] -> point_2d]")))
 (append_segment_seqs_TCC7 0
  (append_segment_seqs_TCC7-2 nil 3874129021
   ("" (skeep + t)
    (("" (assert)
      (("" (skeep + t)
        (("" (expand "o")
          (("" (expand "^^")
            (("" (expand "empty_seq")
              (("" (apply (repeat (lift-if)))
                (("" (assert)
                  (("" (ground)
                    (("1" (inst? -7) nil nil) ("2" (inst? -6) nil nil)
                     ("3" (expand "min")
                      (("3" (equate "i" "X`length - 2" (assert))
                        (("3" (assert)
                          (("3" (inst -5 "X`length - 2")
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("4" (inst? -6)
                      (("1" (assert) nil nil)
                       ("2" (expand "min") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (append_segment_seqs subtype
    "(# length := (number_fields.-)((number_fields.+)(segment_endpoint_sequences.X`length, segment_endpoint_sequences.Y`length), 1), seq := (finite_sequences[point_2d].o(finite_sequences[point_2d].^^(segment_endpoint_sequences.X, (0, (number_fields.-)(segment_endpoint_sequences.X`length, 1))), segment_endpoint_sequences.Y))`seq #)"
    "segment_endpoint_seq"))
  (append_segment_seqs_TCC7-1 nil 3874128237 ("" (subtype-tcc) nil nil)
   nil nil
   (append_segment_seqs subtype
    "(# length := (number_fields.-)((number_fields.+)(segment_endpoint_sequences.X`length, segment_endpoint_sequences.Y`length), 1), seq := (finite_sequences[point_2d].o(finite_sequences[point_2d].^^(segment_endpoint_sequences.X, (0, (number_fields.-)(segment_endpoint_sequences.X`length, 1))), segment_endpoint_sequences.Y))`seq #)"
    "segment_endpoint_seq")))
 (initial_point_append_segment_seqs_TCC1 0
  (initial_point_append_segment_seqs_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (initial_point_append_segment_seqs subtype "0"
    "below[append_segment_seqs(X, Y)`length]"))
  (initial_point_append_segment_seqs_TCC1-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (initial_point_append_segment_seqs subtype "0"
    "below[append_segment_seqs(X, Y)`length]")))
 (initial_point_append_segment_seqs 0
  (initial_point_append_segment_seqs-1 nil 3874129021
   ("" (skeep) (("" (grind) nil nil)) nil) nil shostak))
 (final_point_append_segment_seqs_TCC1 0
  (final_point_append_segment_seqs_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (final_point_append_segment_seqs subtype
    "(number_fields.-)(segment_endpoint_sequences.Z`length, 1)"
    "below[Z`length]"))
  (final_point_append_segment_seqs_TCC1-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (final_point_append_segment_seqs subtype
    "(number_fields.-)(segment_endpoint_sequences.Z`length, 1)"
    "below[Z`length]")))
 (final_point_append_segment_seqs_TCC2 0
  (final_point_append_segment_seqs_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (final_point_append_segment_seqs subtype
    "(number_fields.-)(segment_endpoint_sequences.Y`length, 1)"
    "below[Y`length]"))
  (final_point_append_segment_seqs_TCC2-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (final_point_append_segment_seqs subtype
    "(number_fields.-)(segment_endpoint_sequences.Y`length, 1)"
    "below[Y`length]")))
 (final_point_append_segment_seqs 0
  (final_point_append_segment_seqs-1 nil 3874129021
   ("" (skeep) (("" (grind) nil nil)) nil) nil shostak))
 (point_on_append_seg_seqs_on_either 0
  (point_on_append_seg_seqs_on_either-1 nil 3874129021
   ("" (skeep)
    (("" (typepred "Y")
      (("" (expand "append_segment_seqs")
        (("" (split 1)
          (("1" (flatten)
            (("1" (expand "point_on_segment_seq?")
              (("1" (split -1)
                (("1" (flatten)
                  (("1" (case "X`length = 1 & Y`length = 1")
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (expand "o ")
                          (("1" (expand "^^")
                            (("1" (expand "empty_seq")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (skeep)
                    (("2" (split 2)
                      (("1" (flatten)
                        (("1" (replace -1)
                          (("1" (assert)
                            (("1" (expand "o ")
                              (("1"
                                (expand "^^")
                                (("1"
                                  (expand "empty_seq")
                                  (("1" (inst? +) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split 4)
                          (("1" (flatten)
                            (("1" (expand "o ")
                              (("1"
                                (expand "^^")
                                (("1"
                                  (expand "empty_seq")
                                  (("1"
                                    (expand "min")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (ground)
                                          (("1" (inst? +) nil nil)
                                           ("2"
                                            (typepred "i")
                                            (("2"
                                              (replace -3)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (equate
                                                   "i"
                                                   "X`length - 2"
                                                   (assert))
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst
                                                       +
                                                       "X`length - 2")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "o ")
                              (("2"
                                (expand "^^")
                                (("2"
                                  (expand "empty_seq")
                                  (("2"
                                    (expand "min")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (apply (repeat (lift-if)))
                                        (("2"
                                          (ground)
                                          (("1" (inst? 4) nil nil)
                                           ("2"
                                            (equate
                                             "i"
                                             "X`length - 2"
                                             (assert))
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst 5 "X`length - 2")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (inst? 4)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (expand "point_on_segment_seq?")
              (("2" (split -1 :depth 1)
                (("1" (split -1)
                  (("1" (flatten)
                    (("1" (ground)
                      (("1" (grind) nil nil)
                       ("2" (replace -1)
                        (("2" (assert)
                          (("2" (expand "^^")
                            (("2" (expand "o ")
                              (("2"
                                (expand "empty_seq")
                                (("2"
                                  (inst + "0")
                                  (("2"
                                    (expand "point_on_segment?")
                                    (("2"
                                      (inst + "0")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (skeep)
                      (("2" (ground)
                        (("2" (inst + "i")
                          (("2" (expand "o ")
                            (("2" (expand "^^")
                              (("2"
                                (expand "min")
                                (("2"
                                  (lift-if)
                                  (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (split -1)
                  (("1" (flatten)
                    (("1" (ground)
                      (("1" (grind) nil nil)
                       ("2" (inst + "X`length - 2")
                        (("2" (expand "o ")
                          (("2" (expand "^^")
                            (("2" (expand "min")
                              (("2"
                                (expand "point_on_segment?")
                                (("2"
                                  (inst + "1")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (skeep)
                      (("2" (ground)
                        (("2" (inst + "X`length - 1 + i")
                          (("2" (expand "o ")
                            (("2" (expand "^^")
                              (("2"
                                (expand "min")
                                (("2"
                                  (expand "empty_seq")
                                  (("2"
                                    (apply (repeat (lift-if)))
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (point_on_segment_subseq_TCC1 0
  (point_on_segment_subseq_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (point_on_segment_subseq subtype "0" "below[Y`length]"))
  (point_on_segment_subseq_TCC1-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (point_on_segment_subseq subtype "0" "below[Y`length]")))
 (point_on_segment_subseq_TCC2 0
  (point_on_segment_subseq_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (point_on_segment_subseq subtype
    "(number_fields.-)(segment_endpoint_sequences.Y`length, 1)"
    "below[Y`length]"))
  (point_on_segment_subseq_TCC2-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (point_on_segment_subseq subtype
    "(number_fields.-)(segment_endpoint_sequences.Y`length, 1)"
    "below[Y`length]")))
 (point_on_segment_subseq 0
  (point_on_segment_subseq-1 nil 3874129021
   ("" (skeep)
    (("" (expand "point_on_segment_seq?")
      (("" (expand "segment_endpoint_subseq?")
        (("" (flatten)
          (("" (skeep)
            (("" (ground)
              (("1" (inst - "0")
                (("1" (rewrite "rem_mod")
                  (("1" (inst + "i")
                    (("1" (expand "point_on_segment?")
                      (("1" (inst + "0") (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (inst-cp - "i!1")
                  (("2" (inst - "1 + i!1")
                    (("2" (inst + "rem(m)(i!1 + i)")
                      (("1" (lemma "rem_add_one")
                        (("1" (inst - "m" "i!1 + i")
                          (("1" (assert)
                            (("1" (flatten) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (point_on_segment_on_seq_TCC1 0
  (point_on_segment_on_seq_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (point_on_segment_on_seq subtype "segment_endpoint_sequences.i"
    "below[S`length]"))
  (point_on_segment_on_seq_TCC1-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (point_on_segment_on_seq subtype "segment_endpoint_sequences.i"
    "below[S`length]")))
 (point_on_segment_on_seq_TCC2 0
  (point_on_segment_on_seq_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (point_on_segment_on_seq subtype
    "(number_fields.+)(segment_endpoint_sequences.i, 1)"
    "below[S`length]"))
  (point_on_segment_on_seq_TCC2-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (point_on_segment_on_seq subtype
    "(number_fields.+)(segment_endpoint_sequences.i, 1)"
    "below[S`length]")))
 (point_on_segment_on_seq_TCC3 0
  (point_on_segment_on_seq_TCC3-2 nil 3874129021
   ("" (skeep)
    (("" (typepred "S") (("" (inst - "i") (("" (assert) nil nil)) nil))
      nil))
    nil)
   nil shostak
   (point_on_segment_on_seq subtype
    "segment_endpoint_sequences.S`seq((number_fields.+)(segment_endpoint_sequences.i, 1))"
    "{p: vectors_cross_2d.point_2d | p /= segment_endpoint_sequences.S`seq(segment_endpoint_sequences.i)}"))
  (point_on_segment_on_seq_TCC3-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (point_on_segment_on_seq subtype
    "segment_endpoint_sequences.S`seq((number_fields.+)(segment_endpoint_sequences.i, 1))"
    "{p: vectors_cross_2d.point_2d | p /= segment_endpoint_sequences.S`seq(segment_endpoint_sequences.i)}")))
 (point_on_segment_on_seq 0
  (point_on_segment_on_seq-1 nil 3874129021
   ("" (skeep)
    (("" (expand "point_on_segment_seq?")
      (("" (inst + "i") (("" (assert) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (point_on_segment_seq_subrange_on_seq_TCC1 0
  (point_on_segment_seq_subrange_on_seq_TCC1-2 nil 3874129021
   ("" (skeep* + t)
    (("" (ground)
      (("1" (grind) nil nil)
       ("2" (skeep + t)
        (("2" (expand "^")
          (("2" (inst?) (("1" (assert) nil nil) ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (point_on_segment_seq_subrange_on_seq subtype
    "finite_sequences[point_2d].^(segment_endpoint_sequences.S, (segment_endpoint_sequences.i, segment_endpoint_sequences.j))"
    "segment_endpoint_seq"))
  (point_on_segment_seq_subrange_on_seq_TCC1-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (point_on_segment_seq_subrange_on_seq subtype
    "finite_sequences[point_2d].^(segment_endpoint_sequences.S, (segment_endpoint_sequences.i, segment_endpoint_sequences.j))"
    "segment_endpoint_seq")))
 (point_on_segment_seq_subrange_on_seq 0
  (point_on_segment_seq_subrange_on_seq-1 nil 3874129021
   ("" (skeep)
    (("" (expand "point_on_segment_seq?")
      (("" (ground)
        (("1" (grind) nil nil)
         ("2" (typepred "i")
          (("2" (expand "^")
            (("2" (case "i = S`length - 1")
              (("1" (inst + "S`length - 2")
                (("1" (expand "point_on_segment?")
                  (("1" (inst + "1") (("1" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (inst + "i")
                (("1" (expand "point_on_segment?")
                  (("1" (inst + "0") (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep - t) (("3" (grind) nil nil)) nil)
         ("4" (skeep - t) (("4" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (three_point_offset_dist?_TCC1 0
  (three_point_offset_dist?_TCC1-2 nil 3874129021
   ("" (skeep + t)
    (("" (expand "three_point_miniseq?") (("" (ground) nil nil)) nil))
    nil)
   nil shostak
   (three_point_offset_dist? subtype
    "(vectors_2D.-)(segment_endpoint_sequences.u, segment_endpoint_sequences.v)"
    "Nz_vector"))
  (three_point_offset_dist?_TCC1-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (three_point_offset_dist? subtype
    "(vectors_2D.-)(segment_endpoint_sequences.u, segment_endpoint_sequences.v)"
    "Nz_vector")))
 (three_point_offset_dist?_TCC2 0
  (three_point_offset_dist?_TCC2-2 nil 3874129021
   ("" (skeep + t)
    (("" (expand "three_point_miniseq?") (("" (ground) nil nil)) nil))
    nil)
   nil shostak
   (three_point_offset_dist? subtype
    "(vectors_2D.-)(segment_endpoint_sequences.w, segment_endpoint_sequences.v)"
    "Nz_vector"))
  (three_point_offset_dist?_TCC2-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (three_point_offset_dist? subtype
    "(vectors_2D.-)(segment_endpoint_sequences.w, segment_endpoint_sequences.v)"
    "Nz_vector")))
 (four_point_offset_dist?_TCC1 0
  (four_point_offset_dist?_TCC1-2 nil 3874129021
   ("" (skeep + t)
    (("" (expand "four_point_miniseq?") (("" (ground) nil nil)) nil))
    nil)
   nil shostak
   (four_point_offset_dist? subtype
    "(vectors_2D.-)(segment_endpoint_sequences.u, segment_endpoint_sequences.v)"
    "Nz_vector"))
  (four_point_offset_dist?_TCC1-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (four_point_offset_dist? subtype
    "(vectors_2D.-)(segment_endpoint_sequences.u, segment_endpoint_sequences.v)"
    "Nz_vector")))
 (four_point_offset_dist?_TCC2 0
  (four_point_offset_dist?_TCC2-2 nil 3874129021
   ("" (skeep + t)
    (("" (expand "four_point_miniseq?") (("" (ground) nil nil)) nil))
    nil)
   nil shostak
   (four_point_offset_dist? subtype
    "(vectors_2D.-)(segment_endpoint_sequences.w, segment_endpoint_sequences.v)"
    "Nz_vector"))
  (four_point_offset_dist?_TCC2-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (four_point_offset_dist? subtype
    "(vectors_2D.-)(segment_endpoint_sequences.w, segment_endpoint_sequences.v)"
    "Nz_vector")))
 (four_point_offset_dist?_TCC3 0
  (four_point_offset_dist?_TCC3-2 nil 3874129021
   ("" (skeep + t)
    (("" (expand "four_point_miniseq?") (("" (ground) nil nil)) nil))
    nil)
   nil shostak
   (four_point_offset_dist? subtype
    "(vectors_2D.-)(segment_endpoint_sequences.v, segment_endpoint_sequences.w)"
    "Nz_vector"))
  (four_point_offset_dist?_TCC3-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (four_point_offset_dist? subtype
    "(vectors_2D.-)(segment_endpoint_sequences.v, segment_endpoint_sequences.w)"
    "Nz_vector")))
 (four_point_offset_dist?_TCC4 0
  (four_point_offset_dist?_TCC4-2 nil 3874129021
   ("" (skeep + t)
    (("" (expand "four_point_miniseq?") (("" (ground) nil nil)) nil))
    nil)
   nil shostak
   (four_point_offset_dist? subtype
    "(vectors_2D.-)(segment_endpoint_sequences.x, segment_endpoint_sequences.w)"
    "Nz_vector"))
  (four_point_offset_dist?_TCC4-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (four_point_offset_dist? subtype
    "(vectors_2D.-)(segment_endpoint_sequences.x, segment_endpoint_sequences.w)"
    "Nz_vector")))
 (segments_do_not_cross?_TCC1 0
  (segments_do_not_cross?_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (segments_do_not_cross? subtype "segment_endpoint_sequences.j"
    "below[S`length]"))
  (segments_do_not_cross?_TCC1-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (segments_do_not_cross? subtype "segment_endpoint_sequences.j"
    "below[S`length]")))
 (segments_do_not_cross?_TCC2 0
  (segments_do_not_cross?_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (segments_do_not_cross? subtype
    "(number_fields.+)(segment_endpoint_sequences.j, 1)"
    "below[S`length]"))
  (segments_do_not_cross?_TCC2-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (segments_do_not_cross? subtype
    "(number_fields.+)(segment_endpoint_sequences.j, 1)"
    "below[S`length]")))
 (segments_do_not_cross?_TCC3 0
  (segments_do_not_cross?_TCC3-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (segments_do_not_cross? subtype "segment_endpoint_sequences.si"
    "segment_2d"))
  (segments_do_not_cross?_TCC3-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (segments_do_not_cross? subtype "segment_endpoint_sequences.si"
    "segment_2d")))
 (segments_do_not_cross?_TCC4 0
  (segments_do_not_cross?_TCC4-2 nil 3874129021
   ("" (skeep*)
    (("" (typepred "S") (("" (inst - "j") (("" (ground) nil nil)) nil))
      nil))
    nil)
   nil shostak
   (segments_do_not_cross? subtype "segment_endpoint_sequences.sj"
    "segment_2d"))
  (segments_do_not_cross?_TCC4-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (segments_do_not_cross? subtype "segment_endpoint_sequences.sj"
    "segment_2d")))
 (subseq_segments_do_not_cross_TCC1 0
  (subseq_segments_do_not_cross_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (expand "^")
      (("" (assert)
        (("" (expand "min")
          (("" (skeep)
            (("" (typepred "S")
              (("" (inst?)
                (("1" (assert) nil nil)
                 ("2" (typepred "i_1")
                  (("2" (expand "^")
                    (("2" (expand "min") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (subseq_segments_do_not_cross subtype
    "finite_sequences[point_2d].^(segment_endpoint_sequences.S, (segment_endpoint_sequences.i, segment_endpoint_sequences.j))"
    "segment_endpoint_seq"))
  (subseq_segments_do_not_cross_TCC1-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (subseq_segments_do_not_cross subtype
    "finite_sequences[point_2d].^(segment_endpoint_sequences.S, (segment_endpoint_sequences.i, segment_endpoint_sequences.j))"
    "segment_endpoint_seq")))
 (subseq_segments_do_not_cross 0
  (subseq_segments_do_not_cross-1 nil 3874129021
   ("" (skeep)
    (("" (expand "segments_do_not_cross?")
      (("" (flatten)
        (("" (skeep + t)
          (("" (skeep)
            (("" (ground)
              (("1" (expand "^" 1)
                (("1" (expand "min") (("1" (assert) nil nil)) nil))
                nil)
               ("2" (inst - "i_1 + i" "j_1 + i")
                (("1" (inst?)
                  (("1" (expand "^") (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (hide -3 -4 4 5) (("2" (grind) nil nil)) nil)
                 ("3" (hide -3 -4 4 5) (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (single_loop_back_seq?_TCC1 0
  (single_loop_back_seq?_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (single_loop_back_seq? subtype "segment_endpoint_sequences.i"
    "below[S`length]"))
  (single_loop_back_seq?_TCC1-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (single_loop_back_seq? subtype "segment_endpoint_sequences.i"
    "below[S`length]")))
 (single_loop_back_seq?_TCC2 0
  (single_loop_back_seq?_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (single_loop_back_seq? subtype
    "(number_fields.-)(segment_endpoint_sequences.S`length, 1)"
    "below[S`length]"))
  (single_loop_back_seq?_TCC2-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (single_loop_back_seq? subtype
    "(number_fields.-)(segment_endpoint_sequences.S`length, 1)"
    "below[S`length]")))
 (single_loop_back_seq?_TCC3 0
  (single_loop_back_seq?_TCC3-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (single_loop_back_seq? subtype
    "(number_fields.-)(segment_endpoint_sequences.S`length, 3)"
    "below[S`length]"))
  (single_loop_back_seq?_TCC3-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (single_loop_back_seq? subtype
    "(number_fields.-)(segment_endpoint_sequences.S`length, 3)"
    "below[S`length]")))
 (single_loop_back_seq?_TCC4 0
  (single_loop_back_seq?_TCC4-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (single_loop_back_seq? subtype
    "(number_fields.-)(segment_endpoint_sequences.S`length, 1)"
    "below[S`length]"))
  (single_loop_back_seq?_TCC4-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (single_loop_back_seq? subtype
    "(number_fields.-)(segment_endpoint_sequences.S`length, 1)"
    "below[S`length]")))
 (loop_back_intercept_rec_TCC1 0
  (loop_back_intercept_rec_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (loop_back_intercept_rec subtype
    "(number_fields.-)(segment_endpoint_sequences.S`length, 2)" "nat"))
  (loop_back_intercept_rec_TCC1-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (loop_back_intercept_rec subtype
    "(number_fields.-)(segment_endpoint_sequences.S`length, 2)"
    "nat")))
 (loop_back_intercept_rec_TCC2 0
  (loop_back_intercept_rec_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (loop_back_intercept_rec subtype "0"
    "naturalnumbers.below((number_fields.-)(segment_endpoint_sequences.S`length, 2))"))
  (loop_back_intercept_rec_TCC2-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (loop_back_intercept_rec subtype "0"
    "naturalnumbers.below((number_fields.-)(segment_endpoint_sequences.S`length, 2))")))
 (loop_back_intercept_rec_TCC3 0
  (loop_back_intercept_rec_TCC3-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (loop_back_intercept_rec subtype "segment_endpoint_sequences.n"
    "below[S`length]"))
  (loop_back_intercept_rec_TCC3-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (loop_back_intercept_rec subtype "segment_endpoint_sequences.n"
    "below[S`length]")))
 (loop_back_intercept_rec_TCC4 0
  (loop_back_intercept_rec_TCC4-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (loop_back_intercept_rec subtype
    "(number_fields.-)(segment_endpoint_sequences.S`length, 1)"
    "below[S`length]"))
  (loop_back_intercept_rec_TCC4-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (loop_back_intercept_rec subtype
    "(number_fields.-)(segment_endpoint_sequences.S`length, 1)"
    "below[S`length]")))
 (loop_back_intercept_rec_TCC5 0
  (loop_back_intercept_rec_TCC5-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (loop_back_intercept_rec subtype
    "(number_fields.-)(segment_endpoint_sequences.n, 1)"
    "naturalnumbers.below((number_fields.-)(segment_endpoint_sequences.S`length, 2))"))
  (loop_back_intercept_rec_TCC5-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (loop_back_intercept_rec subtype
    "(number_fields.-)(segment_endpoint_sequences.n, 1)"
    "naturalnumbers.below((number_fields.-)(segment_endpoint_sequences.S`length, 2))")))
 (loop_back_intercept_rec_TCC6 0
  (loop_back_intercept_rec_TCC6-2 nil 3874129021
   ("" (termination-tcc) nil nil) nil shostak
   (loop_back_intercept_rec termination
    "segment_endpoint_sequences.loop_back_intercept_rec(segment_endpoint_sequences.S, (number_fields.-)(segment_endpoint_sequences.n, 1))"
    "nil"))
  (loop_back_intercept_rec_TCC6-1 nil 3874128237
   ("" (termination-tcc) nil nil) nil nil
   (loop_back_intercept_rec termination
    "segment_endpoint_sequences.loop_back_intercept_rec(segment_endpoint_sequences.S, (number_fields.-)(segment_endpoint_sequences.n, 1))"
    "nil")))
 (loop_back_intercept_rec_prop_TCC1 0
  (loop_back_intercept_rec_prop_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (loop_back_intercept_rec_prop subtype "segment_endpoint_sequences.j"
    "below[S`length]"))
  (loop_back_intercept_rec_prop_TCC1-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (loop_back_intercept_rec_prop subtype "segment_endpoint_sequences.j"
    "below[S`length]")))
 (loop_back_intercept_rec_prop_TCC2 0
  (loop_back_intercept_rec_prop_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (loop_back_intercept_rec_prop subtype
    "(number_fields.-)(segment_endpoint_sequences.S`length, 1)"
    "below[S`length]"))
  (loop_back_intercept_rec_prop_TCC2-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (loop_back_intercept_rec_prop subtype
    "(number_fields.-)(segment_endpoint_sequences.S`length, 1)"
    "below[S`length]")))
 (loop_back_intercept_rec_prop_TCC3 0
  (loop_back_intercept_rec_prop_TCC3-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (loop_back_intercept_rec_prop subtype
    "segment_endpoint_sequences.lbi" "below[S`length]"))
  (loop_back_intercept_rec_prop_TCC3-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (loop_back_intercept_rec_prop subtype
    "segment_endpoint_sequences.lbi" "below[S`length]")))
 (loop_back_intercept_rec_prop 0
  (loop_back_intercept_rec_prop-1 nil 3874129021
   ("" (skeep)
    (("" (generalize "n" "n" "below(S`length - 2)")
      (("1" (induct "n")
        (("1" (assert) (("1" (ground) nil nil)) nil)
         ("2" (assert) (("2" (ground) nil nil)) nil)
         ("3" (ground)
          (("1" (expand "loop_back_intercept_rec")
            (("1" (propax) nil nil)) nil)
           ("2" (expand "loop_back_intercept_rec")
            (("2" (assert) nil nil)) nil)
           ("3" (grind) nil nil))
          nil)
         ("4" (skeep)
          (("4" (expand "loop_back_intercept_rec" +)
            (("4" (apply (repeat (lift-if)))
              (("4" (assert)
                (("4" (ground)
                  (("1" (inst?) (("1" (ground) nil nil)) nil)
                   ("2" (skeep)
                    (("2" (case "j = 1 + jb")
                      (("1" (typepred "S")
                        (("1" (expand "single_loop_back_seq?")
                          (("1" (flatten)
                            (("1" (hide -3) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst - "j") (("2" (ground) nil nil)) nil))
                      nil))
                    nil)
                   ("3" (skeep)
                    (("3" (case "j = 1 + jb")
                      (("1" (assert) nil nil)
                       ("2" (inst - "j") (("2" (ground) nil nil)) nil))
                      nil))
                    nil)
                   ("4" (skeep)
                    (("4" (inst - "j") (("4" (ground) nil nil)) nil))
                    nil)
                   ("5" (skeep)
                    (("5" (inst - "j") (("5" (ground) nil nil)) nil))
                    nil)
                   ("6" (skeep)
                    (("6" (inst - "j") (("6" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("5" (skeep*) (("5" (assert) nil nil)) nil))
        nil)
       ("2" (hide 2) (("2" (skeep*) (("2" (assert) nil nil)) nil)) nil)
       ("3" (hide 2)
        (("3" (flatten) (("3" (skeep*) (("3" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (loop_back_intercept_TCC1 0
  (loop_back_intercept_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (loop_back_intercept subtype "segment_endpoint_sequences.j"
    "below[S`length]"))
  (loop_back_intercept_TCC1-1 nil 3874128237 ("" (subtype-tcc) nil nil)
   nil nil
   (loop_back_intercept subtype "segment_endpoint_sequences.j"
    "below[S`length]")))
 (loop_back_intercept_TCC2 0
  (loop_back_intercept_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (loop_back_intercept subtype
    "(number_fields.-)(segment_endpoint_sequences.S`length, 1)"
    "below[S`length]"))
  (loop_back_intercept_TCC2-1 nil 3874128237 ("" (subtype-tcc) nil nil)
   nil nil
   (loop_back_intercept subtype
    "(number_fields.-)(segment_endpoint_sequences.S`length, 1)"
    "below[S`length]")))
 (loop_back_intercept_TCC3 0
  (loop_back_intercept_TCC3-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (loop_back_intercept subtype "segment_endpoint_sequences.i"
    "below[S`length]"))
  (loop_back_intercept_TCC3-1 nil 3874128237 ("" (subtype-tcc) nil nil)
   nil nil
   (loop_back_intercept subtype "segment_endpoint_sequences.i"
    "below[S`length]")))
 (loop_back_intercept_TCC4 0
  (loop_back_intercept_TCC4-2 nil 3874129021
   (""
    (inst + "lambda (S: (single_loop_back_seq?)):
                   if S`length = 3 then 0
                      else loop_back_intercept_rec(S, S`length - 3) endif")
    (("1" (skeep)
      (("1" (use "loop_back_intercept_rec_prop")
        (("1" (assert)
          (("1" (ground)
            (("1" (skeep)
              (("1" (inst - "j") (("1" (ground) nil nil)) nil)) nil)
             ("2" (skeep)
              (("2" (case "j = S`length - 3")
                (("1" (typepred "S")
                  (("1" (expand "single_loop_back_seq?")
                    (("1" (ground) nil nil)) nil))
                  nil)
                 ("2" (inst - "j")
                  (("1" (ground) nil nil) ("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "S")
          (("2" (expand "single_loop_back_seq?")
            (("2" (ground) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (typepred "S")
        (("2" (expand "single_loop_back_seq?") (("2" (ground) nil nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (split 1)
        (("1" (typepred "S")
          (("1" (expand "single_loop_back_seq?")
            (("1" (ground) nil nil)) nil))
          nil)
         ("2" (propax) nil nil)
         ("3" (flatten) (("3" (skeep) (("3" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (loop_back_intercept existence ""
    "[S: (segment_endpoint_sequences.single_loop_back_seq?) -> {i: naturalnumbers.below((number_fields.-)(S`length, 2)) | IF FORALL (j: naturalnumbers.below((number_fields.-)(S`length, 3))): S`seq(j) /= S`seq((number_fields.-)(S`length, 1)) THEN i = 0 ELSE booleans.AND(reals.<(i, (number_fields.-)(S`length, 3)), S`seq(i) = S`seq((number_fields.-)(S`length, 1))) ENDIF}]"))
  (loop_back_intercept_TCC4-1 nil 3874128237
   ("" (existence-tcc) nil nil) nil nil
   (loop_back_intercept existence ""
    "[S: (segment_endpoint_sequences.single_loop_back_seq?) -> {i: naturalnumbers.below((number_fields.-)(S`length, 2)) | IF FORALL (j: naturalnumbers.below((number_fields.-)(S`length, 3))): S`seq(j) /= S`seq((number_fields.-)(S`length, 1)) THEN i = 0 ELSE booleans.AND(reals.<(i, (number_fields.-)(S`length, 3)), S`seq(i) = S`seq((number_fields.-)(S`length, 1))) ENDIF}]")))
 (intercept_0_cond_TCC1 0
  (intercept_0_cond_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (intercept_0_cond subtype
    "(number_fields.-)(segment_endpoint_sequences.S`length, 1)"
    "below[S`length]"))
  (intercept_0_cond_TCC1-1 nil 3874128237 ("" (subtype-tcc) nil nil)
   nil nil
   (intercept_0_cond subtype
    "(number_fields.-)(segment_endpoint_sequences.S`length, 1)"
    "below[S`length]")))
 (intercept_0_cond_TCC2 0
  (intercept_0_cond_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (intercept_0_cond subtype "segment_endpoint_sequences.k"
    "below[S`length]"))
  (intercept_0_cond_TCC2-1 nil 3874128237 ("" (subtype-tcc) nil nil)
   nil nil
   (intercept_0_cond subtype "segment_endpoint_sequences.k"
    "below[S`length]")))
 (intercept_0_cond 0
  (intercept_0_cond-1 nil 3874129021
   ("" (skeep + t)
    (("" (expand "single_loop_back_seq?")
      (("" (flatten)
        (("" (typepred "loop_back_intercept(S)")
          (("" (skeep)
            (("" (split -7)
              (("1" (skeep)
                (("1" (splash -5)
                  (("1" (assert) nil nil)
                   ("2" (flatten) (("2" (assert) nil nil)) nil)
                   ("3" (inst?) (("3" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (inst + "k") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (edge_parallel_endpoint_seq_TCC1 0
  (edge_parallel_endpoint_seq_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (edge_parallel_endpoint_seq subtype "segment_endpoint_sequences.lbi"
    "below[S`length]"))
  (edge_parallel_endpoint_seq_TCC1-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (edge_parallel_endpoint_seq subtype "segment_endpoint_sequences.lbi"
    "below[S`length]")))
 (edge_parallel_endpoint_seq_TCC2 0
  (edge_parallel_endpoint_seq_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (edge_parallel_endpoint_seq subtype
    "(number_fields.-)(segment_endpoint_sequences.S`length, 1)"
    "below[S`length]"))
  (edge_parallel_endpoint_seq_TCC2-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (edge_parallel_endpoint_seq subtype
    "(number_fields.-)(segment_endpoint_sequences.S`length, 1)"
    "below[S`length]")))
 (edge_parallel_endpoint_seq_TCC3 0
  (edge_parallel_endpoint_seq_TCC3-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (edge_parallel_endpoint_seq subtype
    "segment_endpoint_sequences.S`length" "posnat"))
  (edge_parallel_endpoint_seq_TCC3-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (edge_parallel_endpoint_seq subtype
    "segment_endpoint_sequences.S`length" "posnat")))
 (intercept_index_value_TCC1 0
  (intercept_index_value_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (intercept_index_value subtype "segment_endpoint_sequences.k"
    "below[S`length]"))
  (intercept_index_value_TCC1-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (intercept_index_value subtype "segment_endpoint_sequences.k"
    "below[S`length]")))
 (intercept_index_value_TCC2 0
  (intercept_index_value_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (intercept_index_value subtype
    "(number_fields.-)(segment_endpoint_sequences.S`length, 1)"
    "below[S`length]"))
  (intercept_index_value_TCC2-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (intercept_index_value subtype
    "(number_fields.-)(segment_endpoint_sequences.S`length, 1)"
    "below[S`length]")))
 (intercept_index_value 0
  (intercept_index_value-1 nil 3874129021
   ("" (skeep + t)
    (("" (expand "single_loop_back_seq?")
      (("" (flatten)
        (("" (split -3)
          (("1" (skeep)
            (("1" (typepred "loop_back_intercept(S)")
              (("1" (assert)
                (("1" (expand "mostly_uniq_point_list?")
                  (("1" (inst -9 "k" "S`length - 1")
                    (("1" (ground) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "loop_back_intercept(S)")
            (("2" (splash -3)
              (("1" (split -3)
                (("1" (propax) nil nil) ("2" (propax) nil nil)) nil)
               ("2" (skeep) (("2" (inst + "j") nil nil)) nil)
               ("3" (split -3)
                (("1" (expand "mostly_uniq_point_list?")
                  (("1" (inst -7 "k" "S`length - 1")
                    (("1" (ground) nil nil)) nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (adj_edge_parallel_endpts_neq 0
  (adj_edge_parallel_endpts_neq-1 nil 3874129021
   ("" (skeep)
    (("" (typepred "S")
      (("" (expand "mostly_uniq_point_list?")
        (("" (inst - "i" "i + 1") (("" (ground) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak))
 (edge_parallel_endpts_mostly_uniq 0
  (edge_parallel_endpts_mostly_uniq-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin)
      (("" (typepred "S")
        (("" (expand "mostly_uniq_point_list?")
          (("" (inst - "i" "j") (("" (ground) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (adj_segs_not_dir_parallel_TCC1 0
  (adj_segs_not_dir_parallel_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (adj_segs_not_dir_parallel subtype
    "(number_fields.+)(segment_endpoint_sequences.i, 1)"
    "below[S`length]"))
  (adj_segs_not_dir_parallel_TCC1-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (adj_segs_not_dir_parallel subtype
    "(number_fields.+)(segment_endpoint_sequences.i, 1)"
    "below[S`length]")))
 (adj_segs_not_dir_parallel_TCC2 0
  (adj_segs_not_dir_parallel_TCC2-2 nil 3874129021
   ("" (skeep)
    (("" (use "adj_edge_parallel_endpts_neq") (("" (ground) nil nil))
      nil))
    nil)
   nil shostak
   (adj_segs_not_dir_parallel subtype
    "(vectors_2D.-)(segment_endpoint_sequences.S`seq(segment_endpoint_sequences.i), segment_endpoint_sequences.S`seq((number_fields.+)(segment_endpoint_sequences.i, 1)))"
    "Nz_vector"))
  (adj_segs_not_dir_parallel_TCC2-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (adj_segs_not_dir_parallel subtype
    "(vectors_2D.-)(segment_endpoint_sequences.S`seq(segment_endpoint_sequences.i), segment_endpoint_sequences.S`seq((number_fields.+)(segment_endpoint_sequences.i, 1)))"
    "Nz_vector")))
 (adj_segs_not_dir_parallel_TCC3 0
  (adj_segs_not_dir_parallel_TCC3-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (adj_segs_not_dir_parallel subtype
    "(number_fields.+)(segment_endpoint_sequences.i, 2)"
    "below[S`length]"))
  (adj_segs_not_dir_parallel_TCC3-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (adj_segs_not_dir_parallel subtype
    "(number_fields.+)(segment_endpoint_sequences.i, 2)"
    "below[S`length]")))
 (adj_segs_not_dir_parallel_TCC4 0
  (adj_segs_not_dir_parallel_TCC4-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "adj_edge_parallel_endpts_neq")
      (("" (inst - "S" "i + 1") (("" (ground) nil nil)) nil)) nil))
    nil)
   nil shostak
   (adj_segs_not_dir_parallel subtype
    "(vectors_2D.-)(segment_endpoint_sequences.S`seq((number_fields.+)(segment_endpoint_sequences.i, 2)), segment_endpoint_sequences.S`seq((number_fields.+)(segment_endpoint_sequences.i, 1)))"
    "Nz_vector"))
  (adj_segs_not_dir_parallel_TCC4-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (adj_segs_not_dir_parallel subtype
    "(vectors_2D.-)(segment_endpoint_sequences.S`seq((number_fields.+)(segment_endpoint_sequences.i, 2)), segment_endpoint_sequences.S`seq((number_fields.+)(segment_endpoint_sequences.i, 1)))"
    "Nz_vector")))
 (adj_segs_not_dir_parallel 0
  (adj_segs_not_dir_parallel-1 nil 3874129021
   ("" (skeep)
    (("" (typepred "S")
      (("" (expand "^")
        (("" (cross-mult -7)
          ((""
            (name-replace*
             ("a" "norm(S`seq(i+2) - S`seq(i+1))" "b"
              "norm(S`seq(i) - S`seq(i+1))"))
            (("" (case "b > a")
              (("1" (expand "segments_do_not_cross?")
                (("1" (inst - "i" "i+1")
                  (("1" (inst -9 "S`seq(i+2)")
                    (("1" (hide -7)
                      (("1" (ground)
                        (("1" (lemma "adj_edge_parallel_endpts_neq")
                          (("1" (inst - "S" "i+1")
                            (("1" (ground) nil nil)) nil))
                          nil)
                         ("2"
                          (rewrite "point_on_reverse_segment" :dir rl)
                          (("1" (expand "reverse_segment")
                            (("1"
                              (rewrite "point_on_segment_has_offset")
                              (("1"
                                (inst + "a / b")
                                (("1"
                                  (ground)
                                  (("1"
                                    (move-terms 1 r 1)
                                    (("1" (mult-by 1 "b") nil nil))
                                    nil)
                                   ("2" (real-props) nil nil))
                                  nil)
                                 ("2" (cross-mult 1) nil nil))
                                nil)
                               ("2"
                                (use "adj_edge_parallel_endpts_neq")
                                (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "adj_edge_parallel_endpts_neq")
                            (("2" (inst - "S" "i")
                              (("2" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("3" (expand "point_on_segment?")
                          (("3" (inst + "1") (("3" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "segments_do_not_cross?")
                (("2" (inst - "i+1" "i")
                  (("2" (inst -8 "S`seq(i)")
                    (("2" (assert)
                      (("2" (split -8)
                        (("1" (lemma "adj_edge_parallel_endpts_neq")
                          (("1" (inst - "S" "i")
                            (("1" (ground) nil nil)) nil))
                          nil)
                         ("2"
                          (lemma "edge_parallel_endpts_mostly_uniq")
                          (("2" (inst - "S" "i" "i+2")
                            (("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (replace -1 -2)
                                  (("2"
                                    (typepred "loop_back_intercept(S)")
                                    (("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (rewrite "point_on_segment_has_offset")
                          (("1" (inst + "b / a")
                            (("1" (split 1)
                              (("1"
                                (move-terms 1 r 1)
                                (("1" (mult-by 1 "a") nil nil))
                                nil)
                               ("2" (cross-mult 1) nil nil))
                              nil)
                             ("2" (cross-mult 1) nil nil)
                             ("3"
                              (lemma "adj_edge_parallel_endpts_neq")
                              (("3"
                                (inst - "S" "i+1")
                                (("3"
                                  (lemma "norm_eq_0")
                                  (("3"
                                    (inst - "S`seq(i+2) - S`seq(i+1)")
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "adj_edge_parallel_endpts_neq")
                            (("2" (inst - "S" "i+1")
                              (("2" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("4" (expand "point_on_segment?")
                          (("4" (inst + "0") (("4" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (wrapped_adj_segs_not_dir_parallel_TCC1 0
  (wrapped_adj_segs_not_dir_parallel_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (wrapped_adj_segs_not_dir_parallel subtype
    "(number_fields.-)(segment_endpoint_sequences.S`length, 2)"
    "below[S`length]"))
  (wrapped_adj_segs_not_dir_parallel_TCC1-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (wrapped_adj_segs_not_dir_parallel subtype
    "(number_fields.-)(segment_endpoint_sequences.S`length, 2)"
    "below[S`length]")))
 (wrapped_adj_segs_not_dir_parallel_TCC2 0
  (wrapped_adj_segs_not_dir_parallel_TCC2-2 nil 3874129021
   ("" (skeep + t)
    (("" (inst - "S`length - 2") (("" (assert) nil nil)) nil)) nil)
   nil shostak
   (wrapped_adj_segs_not_dir_parallel subtype
    "(vectors_2D.-)(segment_endpoint_sequences.S`seq((number_fields.-)(segment_endpoint_sequences.S`length, 2)), segment_endpoint_sequences.S`seq(segment_endpoint_sequences.lbi))"
    "Nz_vector"))
  (wrapped_adj_segs_not_dir_parallel_TCC2-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (wrapped_adj_segs_not_dir_parallel subtype
    "(vectors_2D.-)(segment_endpoint_sequences.S`seq((number_fields.-)(segment_endpoint_sequences.S`length, 2)), segment_endpoint_sequences.S`seq(segment_endpoint_sequences.lbi))"
    "Nz_vector")))
 (wrapped_adj_segs_not_dir_parallel_TCC3 0
  (wrapped_adj_segs_not_dir_parallel_TCC3-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (wrapped_adj_segs_not_dir_parallel subtype
    "(number_fields.+)(1, segment_endpoint_sequences.lbi)"
    "below[S`length]"))
  (wrapped_adj_segs_not_dir_parallel_TCC3-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (wrapped_adj_segs_not_dir_parallel subtype
    "(number_fields.+)(1, segment_endpoint_sequences.lbi)"
    "below[S`length]")))
 (wrapped_adj_segs_not_dir_parallel_TCC4 0
  (wrapped_adj_segs_not_dir_parallel_TCC4-2 nil 3874129021
   ("" (skeep + t) (("" (inst - "lbi") (("" (assert) nil nil)) nil))
    nil)
   nil shostak
   (wrapped_adj_segs_not_dir_parallel subtype
    "(vectors_2D.-)(segment_endpoint_sequences.S`seq((number_fields.+)(1, segment_endpoint_sequences.lbi)), segment_endpoint_sequences.S`seq(segment_endpoint_sequences.lbi))"
    "Nz_vector"))
  (wrapped_adj_segs_not_dir_parallel_TCC4-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (wrapped_adj_segs_not_dir_parallel subtype
    "(vectors_2D.-)(segment_endpoint_sequences.S`seq((number_fields.+)(1, segment_endpoint_sequences.lbi)), segment_endpoint_sequences.S`seq(segment_endpoint_sequences.lbi))"
    "Nz_vector")))
 (wrapped_adj_segs_not_dir_parallel_TCC5 0
  (wrapped_adj_segs_not_dir_parallel_TCC5-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (wrapped_adj_segs_not_dir_parallel subtype
    "(number_fields.-)(segment_endpoint_sequences.S`length, 3)"
    "below[S`length]"))
  (wrapped_adj_segs_not_dir_parallel_TCC5-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (wrapped_adj_segs_not_dir_parallel subtype
    "(number_fields.-)(segment_endpoint_sequences.S`length, 3)"
    "below[S`length]")))
 (wrapped_adj_segs_not_dir_parallel_TCC6 0
  (wrapped_adj_segs_not_dir_parallel_TCC6-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "adj_edge_parallel_endpts_neq")
      (("" (inst - "S" "S`length -3") (("" (ground) nil nil)) nil))
      nil))
    nil)
   nil shostak
   (wrapped_adj_segs_not_dir_parallel subtype
    "(vectors_2D.-)(segment_endpoint_sequences.S`seq((number_fields.-)(segment_endpoint_sequences.S`length, 3)), segment_endpoint_sequences.S`seq((number_fields.-)(segment_endpoint_sequences.S`length, 2)))"
    "Nz_vector"))
  (wrapped_adj_segs_not_dir_parallel_TCC6-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (wrapped_adj_segs_not_dir_parallel subtype
    "(vectors_2D.-)(segment_endpoint_sequences.S`seq((number_fields.-)(segment_endpoint_sequences.S`length, 3)), segment_endpoint_sequences.S`seq((number_fields.-)(segment_endpoint_sequences.S`length, 2)))"
    "Nz_vector")))
 (wrapped_adj_segs_not_dir_parallel_TCC7 0
  (wrapped_adj_segs_not_dir_parallel_TCC7-2 nil 3874129021
   ("" (skeep + t)
    (("" (inst - "S`length - 2") (("" (assert) nil nil)) nil)) nil)
   nil shostak
   (wrapped_adj_segs_not_dir_parallel subtype
    "(vectors_2D.-)(segment_endpoint_sequences.S`seq(segment_endpoint_sequences.lbi), segment_endpoint_sequences.S`seq((number_fields.-)(segment_endpoint_sequences.S`length, 2)))"
    "Nz_vector"))
  (wrapped_adj_segs_not_dir_parallel_TCC7-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (wrapped_adj_segs_not_dir_parallel subtype
    "(vectors_2D.-)(segment_endpoint_sequences.S`seq(segment_endpoint_sequences.lbi), segment_endpoint_sequences.S`seq((number_fields.-)(segment_endpoint_sequences.S`length, 2)))"
    "Nz_vector")))
 (wrapped_adj_segs_not_dir_parallel 0
  (wrapped_adj_segs_not_dir_parallel-1 nil 3874129021
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "lbi" "loop_back_intercept(S)" :hide? nil)
        (("" (flatten)
          (("" (expand "^")
            (("" (typepred "S")
              (("" (ground)
                (("1" (cross-mult -1)
                  (("1"
                    (name-replace*
                     ("a" "norm(S`seq(1 + lbi) - S`seq(lbi))" "b"
                      "norm(S`seq(S`length - 2) - S`seq(lbi))"))
                    (("1" (case "b > a")
                      (("1" (expand "segments_do_not_cross?")
                        (("1" (inst - "S`length - 2" "lbi")
                          (("1" (inst -10 "S`seq(1 + lbi)")
                            (("1" (ground)
                              (("1"
                                (inst - "lbi")
                                (("1" (ground) nil nil))
                                nil)
                               ("2"
                                (rewrite
                                 "point_on_reverse_segment"
                                 :dir
                                 rl)
                                (("1"
                                  (expand "reverse_segment")
                                  (("1"
                                    (rewrite
                                     "point_on_segment_has_offset")
                                    (("1"
                                      (inst + "a / b")
                                      (("1"
                                        (ground)
                                        (("1"
                                          (move-terms 1 r 1)
                                          (("1"
                                            (mult-by 1 "b")
                                            nil
                                            nil))
                                          nil)
                                         ("2" (real-props) nil nil))
                                        nil)
                                       ("2" (cross-mult 1) nil nil))
                                      nil)
                                     ("2"
                                      (inst - "S`length - 2")
                                      (("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst - "S`length - 2")
                                  (("2" (ground) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "point_on_segment?")
                                (("3"
                                  (inst + "1")
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "segments_do_not_cross?")
                        (("2" (inst - "lbi" "S`length - 2")
                          (("2" (inst -9 "S`seq(S`length - 2)")
                            (("2" (assert)
                              (("2"
                                (split -9)
                                (("1"
                                  (inst - "S`length - 2")
                                  (("1" (ground) nil nil))
                                  nil)
                                 ("2"
                                  (expand "mostly_uniq_point_list?")
                                  (("2"
                                    (inst - "S`length - 2" "1 + lbi")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (typepred "lbi")
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (rewrite
                                   "point_on_segment_has_offset")
                                  (("1"
                                    (inst + "b / a")
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (move-terms 1 r 1)
                                        (("1" (mult-by 1 "a") nil nil))
                                        nil)
                                       ("2" (cross-mult 1) nil nil))
                                      nil)
                                     ("2" (cross-mult 1) nil nil)
                                     ("3"
                                      (lemma "norm_eq_0")
                                      (("3"
                                        (inst
                                         -
                                         "S`seq(1 + lbi) - S`seq(lbi)")
                                        (("3"
                                          (ground)
                                          (("3"
                                            (inst - "lbi")
                                            (("3" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst - "lbi")
                                    (("2" (ground) nil nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (expand "point_on_segment?")
                                  (("4"
                                    (inst + "0")
                                    (("4" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (cross-mult -1)
                  (("2"
                    (name-replace*
                     ("a" "norm(S`seq(lbi) - S`seq(S`length - 2))" "b"
                      "norm(S`seq(S`length - 3) - S`seq(S`length - 2))"))
                    (("2" (case "b > a")
                      (("1" (expand "segments_do_not_cross?")
                        (("1" (inst - "S`length - 3" "S`length - 2")
                          (("1" (inst -10 "S`seq(lbi)")
                            (("1" (ground)
                              (("1"
                                (inst - "S`length - 2")
                                (("1" (ground) nil nil))
                                nil)
                               ("2"
                                (rewrite
                                 "point_on_reverse_segment"
                                 :dir
                                 rl)
                                (("1"
                                  (expand "reverse_segment")
                                  (("1"
                                    (rewrite
                                     "point_on_segment_has_offset")
                                    (("1"
                                      (inst + "a / b")
                                      (("1"
                                        (ground)
                                        (("1"
                                          (move-terms 1 r 1)
                                          (("1"
                                            (mult-by 1 "b")
                                            nil
                                            nil))
                                          nil)
                                         ("2" (real-props) nil nil))
                                        nil)
                                       ("2" (cross-mult 1) nil nil))
                                      nil)
                                     ("2"
                                      (inst - "S`length - 3")
                                      (("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst - "S`length - 3")
                                  (("2" (ground) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "point_on_segment?")
                                (("3"
                                  (inst + "1")
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "segments_do_not_cross?")
                        (("2" (inst - "S`length - 2" "S`length - 3")
                          (("2" (inst -9 "S`seq(S`length - 3)")
                            (("2" (assert)
                              (("2"
                                (split -9)
                                (("1"
                                  (inst - "S`length - 3")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (expand "mostly_uniq_point_list?")
                                  (("2"
                                    (inst
                                     -
                                     "S`length - 3"
                                     "S`length - 1")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (typepred "lbi")
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (rewrite
                                   "point_on_segment_has_offset")
                                  (("1"
                                    (inst + "b / a")
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (move-terms 1 r 1)
                                        (("1" (mult-by 1 "a") nil nil))
                                        nil)
                                       ("2" (cross-mult 1) nil nil))
                                      nil)
                                     ("2" (cross-mult 1) nil nil)
                                     ("3"
                                      (lemma "norm_eq_0")
                                      (("3"
                                        (inst
                                         -
                                         "S`seq(lbi) - S`seq(S`length - 2)")
                                        (("3"
                                          (ground)
                                          (("3"
                                            (inst - "S`length - 2")
                                            (("3" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst - "S`length - 2")
                                    (("2" (ground) nil nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (expand "point_on_segment?")
                                  (("4"
                                    (inst + "0")
                                    (("4" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (edge_para_endpts_valid_miter_point_args_TCC1 0
  (edge_para_endpts_valid_miter_point_args_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (edge_para_endpts_valid_miter_point_args subtype
    "(number_fields.-)(segment_endpoint_sequences.i, 1)"
    "below[S`length]"))
  (edge_para_endpts_valid_miter_point_args_TCC1-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (edge_para_endpts_valid_miter_point_args subtype
    "(number_fields.-)(segment_endpoint_sequences.i, 1)"
    "below[S`length]")))
 (edge_para_endpts_valid_miter_point_args 0
  (edge_para_endpts_valid_miter_point_args-1 nil 3874129021
   ("" (skeep)
    (("" (ground)
      (("1" (lemma "adj_edge_parallel_endpts_neq")
        (("1" (inst - "S" "i - 1") (("1" (ground) nil nil)) nil)) nil)
       ("2" (use "adj_edge_parallel_endpts_neq")
        (("2" (ground) nil nil)) nil)
       ("3" (rewrite "dir_parallel_eqv_normalized_diffs_eq")
        (("1" (use "adj_segs_not_dir_parallel")
          (("1" (ground) nil nil)) nil)
         ("2" (lemma "adj_edge_parallel_endpts_neq")
          (("2" (inst - "S" "i - 1") (("2" (ground) nil nil)) nil))
          nil)
         ("3" (lemma "adj_edge_parallel_endpts_neq")
          (("3" (inst - "S" "i") (("3" (ground) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (min_seg_length_TCC1 0
  (min_seg_length_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (expand "empty?")
      (("" (typepred "S")
        (("" (expand "single_loop_back_seq?")
          (("" (flatten)
            (("" (inst -8 "norm(S`seq(1) - S`seq(0))")
              (("1" (expand "member")
                (("1" (inst + "0")
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                nil)
               ("2" (inst - "0")
                (("1" (use "norm_diff_pos") (("1" (assert) nil nil))
                  nil)
                 ("2" (assert) nil nil))
                nil)
               ("3" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (min_seg_length subtype
    "{len: real_types.posreal | EXISTS (i: naturalnumbers.below((number_fields.-)(segment_endpoint_sequences.S`length, 1))): len = vectors_2D.norm((vectors_2D.-)(segment_endpoint_sequences.S`seq((number_fields.+)(i, 1)), segment_endpoint_sequences.S`seq(i)))}"
    "non_empty_finite_set[posreal]"))
  (min_seg_length_TCC1-1 nil 3874128237 ("" (subtype-tcc) nil nil) nil
   nil
   (min_seg_length subtype
    "{len: real_types.posreal | EXISTS (i: naturalnumbers.below((number_fields.-)(segment_endpoint_sequences.S`length, 1))): len = vectors_2D.norm((vectors_2D.-)(segment_endpoint_sequences.S`seq((number_fields.+)(i, 1)), segment_endpoint_sequences.S`seq(i)))}"
    "non_empty_finite_set[posreal]")))
 (eligible_seg_sep_index?_TCC1 0
  (eligible_seg_sep_index?_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (eligible_seg_sep_index? subtype
    "(number_fields.-)(segment_endpoint_sequences.S`length, 1)" "nat"))
  (eligible_seg_sep_index?_TCC1-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (eligible_seg_sep_index? subtype
    "(number_fields.-)(segment_endpoint_sequences.S`length, 1)"
    "nat")))
 (min_seg_sep_vertex_TCC1 0
  (min_seg_sep_vertex_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (min_seg_sep_vertex subtype "segment_endpoint_sequences.j"
    "below[S`length]"))
  (min_seg_sep_vertex_TCC1-1 nil 3874128237 ("" (subtype-tcc) nil nil)
   nil nil
   (min_seg_sep_vertex subtype "segment_endpoint_sequences.j"
    "below[S`length]")))
 (min_seg_sep_vertex_TCC2 0
  (min_seg_sep_vertex_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (min_seg_sep_vertex subtype
    "(number_fields.+)(segment_endpoint_sequences.j, 1)"
    "below[S`length]"))
  (min_seg_sep_vertex_TCC2-1 nil 3874128237 ("" (subtype-tcc) nil nil)
   nil nil
   (min_seg_sep_vertex subtype
    "(number_fields.+)(segment_endpoint_sequences.j, 1)"
    "below[S`length]")))
 (min_seg_sep_vertex_TCC3 0
  (min_seg_sep_vertex_TCC3-2 nil 3874129021
   ("" (skeep)
    (("" (rewrite "sqv_eq_0")
      (("" (replace -2)
        (("" (replace -1)
          (("" (assert)
            (("" (lemma "adj_edge_parallel_endpts_neq")
              (("" (inst - "S" "j") (("" (ground) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (min_seg_sep_vertex subtype
    "vectors_2D.sqv(segment_endpoint_sequences.v)" "nznum"))
  (min_seg_sep_vertex_TCC3-1 nil 3874128237 ("" (subtype-tcc) nil nil)
   nil nil
   (min_seg_sep_vertex subtype
    "vectors_2D.sqv(segment_endpoint_sequences.v)" "nznum")))
 (min_seg_sep_vertex_TCC4 0
  (min_seg_sep_vertex_TCC4-2 nil 3874129021
   ("" (skeep)
    (("" (typepred "j")
      (("" (expand "eligible_seg_sep_index?")
        (("" (flatten)
          (("" (replace -5)
            (("" (replace -3)
              (("" (assert)
                (("" (typepred "S")
                  (("" (expand "mostly_uniq_point_list?")
                    (("" (inst - "i" "j")
                      (("" (assert)
                        (("" (split -3)
                          (("1" (expand "abs")
                            (("1" (lift-if)
                              (("1"
                                (assert)
                                (("1"
                                  (split -1)
                                  (("1"
                                    (flatten)
                                    (("1" (ground) nil nil))
                                    nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (min_seg_sep_vertex subtype
    "vectors_2D.norm((vectors_2D.-)(segment_endpoint_sequences.vtx, segment_endpoint_sequences.e`p1))"
    "posreal"))
  (min_seg_sep_vertex_TCC4-1 nil 3874128237 ("" (subtype-tcc) nil nil)
   nil nil
   (min_seg_sep_vertex subtype
    "vectors_2D.norm((vectors_2D.-)(segment_endpoint_sequences.vtx, segment_endpoint_sequences.e`p1))"
    "posreal")))
 (min_seg_sep_vertex_TCC5 0
  (min_seg_sep_vertex_TCC5-2 nil 3874129021
   ("" (skeep)
    (("" (replace -3)
      (("" (replace -1)
        (("" (assert)
          (("" (typepred "S")
            (("" (expand "mostly_uniq_point_list?")
              (("" (inst - "i" "1 + j")
                (("" (split -5)
                  (("1" (flatten)
                    (("1" (ground)
                      (("1" (typepred "j")
                        (("1" (expand "eligible_seg_sep_index?")
                          (("1" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (ground)
                      (("2" (typepred "j")
                        (("2" (expand "eligible_seg_sep_index?")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (typepred "j")
                    (("3" (expand "eligible_seg_sep_index?")
                      (("3" (flatten) (("3" (ground) nil nil)) nil))
                      nil))
                    nil)
                   ("4" (flatten) (("4" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (min_seg_sep_vertex subtype
    "vectors_2D.norm((vectors_2D.-)(segment_endpoint_sequences.vtx, segment_endpoint_sequences.e`p2))"
    "posreal"))
  (min_seg_sep_vertex_TCC5-1 nil 3874128237 ("" (subtype-tcc) nil nil)
   nil nil
   (min_seg_sep_vertex subtype
    "vectors_2D.norm((vectors_2D.-)(segment_endpoint_sequences.vtx, segment_endpoint_sequences.e`p2))"
    "posreal")))
 (min_seg_sep_vertex_TCC6 0
  (min_seg_sep_vertex_TCC6-2 nil 3874129021
   ("" (skeep)
    (("" (replace -3 :hide? t)
      (("" (replace -1 :hide? t)
        (("" (assert)
          (("" (lemma "adj_edge_parallel_endpts_neq")
            (("" (inst - "S" "j")
              (("" (flatten)
                (("" (typepred "j")
                  (("" (expand "eligible_seg_sep_index?")
                    (("" (flatten)
                      ((""
                        (name-replace "u" "S`seq(i) - S`seq(j)" :hide?
                         nil)
                        (("" (replace -5 :hide? t)
                          (("" (case "v = zero")
                            (("1" (replace -1)
                              (("1"
                                (move-terms -5 r 2)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (case "sqv(v) > 0")
                              (("1"
                                (cross-mult 5)
                                (("1"
                                  (real-props)
                                  (("1"
                                    (equate
                                     "S`seq(j) + u * v / sqv(v) * v - S`seq(i)"
                                     "u * v / sqv(v) * v - u")
                                    (("1"
                                      (use "norm_eq_0")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide 7)
                                          (("1"
                                            (lemma
                                             "edge_parallel_endpts_mostly_uniq")
                                            (("1"
                                              (inst - "S" "i" "j")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case
                                                   "parallel?(u, v)")
                                                  (("1"
                                                    (expand
                                                     "parallel?")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (replace -1 +)
                                                        (("1"
                                                          (expand
                                                           "sqv")
                                                          (("1"
                                                            (case
                                                             "nzk < 0")
                                                            (("1"
                                                              (mult-cases
                                                               5)
                                                              (("1"
                                                                (mult-cases
                                                                 5)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (cross-mult
                                                               7)
                                                              (("2"
                                                                (div-by
                                                                 7
                                                                 "v*v")
                                                                (("2"
                                                                  (case-replace
                                                                   "i = S`length - 1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (typepred
                                                                       "S")
                                                                      (("1"
                                                                        (expand
                                                                         "segments_do_not_cross?")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "j"
                                                                           "S`length -2")
                                                                          (("1"
                                                                            (inst
                                                                             -6
                                                                             "S`seq(S`length - 1)")
                                                                            (("1"
                                                                              (split
                                                                               -6)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 "edge_parallel_endpts_mostly_uniq")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "S"
                                                                                   "j"
                                                                                   "S`length - 1")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (lemma
                                                                                 "edge_parallel_endpts_mostly_uniq")
                                                                                (("3"
                                                                                  (inst
                                                                                   -
                                                                                   "S"
                                                                                   "j + 1"
                                                                                   "S`length - 1")
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (rewrite
                                                                                 "point_on_segment_has_offset")
                                                                                (("4"
                                                                                  (inst
                                                                                   +
                                                                                   "nzk")
                                                                                  (("4"
                                                                                    (assert)
                                                                                    (("4"
                                                                                      (move-terms
                                                                                       1
                                                                                       r
                                                                                       1)
                                                                                      (("4"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("5"
                                                                                (expand
                                                                                 "point_on_segment?")
                                                                                (("5"
                                                                                  (inst
                                                                                   +
                                                                                   "1")
                                                                                  (("5"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "S")
                                                                    (("2"
                                                                      (expand
                                                                       "segments_do_not_cross?")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "j"
                                                                         "i")
                                                                        (("1"
                                                                          (inst
                                                                           -6
                                                                           "S`seq(i)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (split
                                                                               -6)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -1
                                                                                 :dir
                                                                                 rl)
                                                                                (("2"
                                                                                  (case-replace
                                                                                   "nzk = 1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lemma
                                                                                     "scal_cancel")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "1"
                                                                                       "nzk"
                                                                                       "v")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (rewrite
                                                                                 "point_on_segment_has_offset")
                                                                                (("3"
                                                                                  (inst
                                                                                   +
                                                                                   "nzk")
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (move-terms
                                                                                       1
                                                                                       r
                                                                                       1)
                                                                                      (("3"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (expand
                                                                                 "point_on_segment?")
                                                                                (("4"
                                                                                  (inst
                                                                                   +
                                                                                   "0")
                                                                                  (("4"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (equate
                                                                           "i"
                                                                           "S`length - 1"
                                                                           (assert))
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "parallel?")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-2 -5 1))
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (use "sqv_eq_0")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (min_seg_sep_vertex subtype
    "vectors_2D.norm((vectors_2D.-)((vectors_2D.+)(segment_endpoint_sequences.e`p1, vectors_2D.*(segment_endpoint_sequences.t_min, segment_endpoint_sequences.v)), segment_endpoint_sequences.vtx))"
    "posreal"))
  (min_seg_sep_vertex_TCC6-1 nil 3874128237 ("" (subtype-tcc) nil nil)
   nil nil
   (min_seg_sep_vertex subtype
    "vectors_2D.norm((vectors_2D.-)((vectors_2D.+)(segment_endpoint_sequences.e`p1, vectors_2D.*(segment_endpoint_sequences.t_min, segment_endpoint_sequences.v)), segment_endpoint_sequences.vtx))"
    "posreal")))
 (min_seg_separation_TCC1 0
  (min_seg_separation_TCC1-2 nil 3874129021
   ("" (skeep + t)
    (("" (expand "empty?")
      (("" (expand "member")
        (("" (inst -7 "min_seg_sep_vertex(S, 0, 1)")
          (("1" (inst + "0" "1")
            (("1" (assert)
              (("1" (expand "eligible_seg_sep_index?")
                (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (expand "eligible_seg_sep_index?")
              (("2" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (min_seg_separation subtype
    "{v_min: real_types.posreal | EXISTS (i: naturalnumbers.below(segment_endpoint_sequences.S`length), j: (segment_endpoint_sequences.eligible_seg_sep_index?(segment_endpoint_sequences.S, segment_endpoint_sequences.i))): v_min = segment_endpoint_sequences.min_seg_sep_vertex(segment_endpoint_sequences.S, i, j)}"
    "non_empty_finite_set[posreal]"))
  (min_seg_separation_TCC1-1 nil 3874128237 ("" (subtype-tcc) nil nil)
   nil nil
   (min_seg_separation subtype
    "{v_min: real_types.posreal | EXISTS (i: naturalnumbers.below(segment_endpoint_sequences.S`length), j: (segment_endpoint_sequences.eligible_seg_sep_index?(segment_endpoint_sequences.S, segment_endpoint_sequences.i))): v_min = segment_endpoint_sequences.min_seg_sep_vertex(segment_endpoint_sequences.S, i, j)}"
    "non_empty_finite_set[posreal]")))
 (min_segment_sep_bounds_sep_dist_TCC1 0
  (min_segment_sep_bounds_sep_dist_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "adj_edge_parallel_endpts_neq")
      (("" (inst - "S" "j") (("" (ground) nil nil)) nil)) nil))
    nil)
   nil shostak
   (min_segment_sep_bounds_sep_dist subtype
    "segment_endpoint_sequences.S`seq((number_fields.+)(segment_endpoint_sequences.j, 1))"
    "{p: vectors_cross_2d.point_2d | p /= segment_endpoint_sequences.S`seq(segment_endpoint_sequences.j)}"))
  (min_segment_sep_bounds_sep_dist_TCC1-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (min_segment_sep_bounds_sep_dist subtype
    "segment_endpoint_sequences.S`seq((number_fields.+)(segment_endpoint_sequences.j, 1))"
    "{p: vectors_cross_2d.point_2d | p /= segment_endpoint_sequences.S`seq(segment_endpoint_sequences.j)}")))
 (min_segment_sep_bounds_sep_dist 0
  (min_segment_sep_bounds_sep_dist-1 nil 3874129021
   ("" (skeep)
    (("" (rewrite "point_on_segment_has_offset")
      (("1" (skeep)
        (("1" (expand "min_segment_sep")
          (("1" (expand "min_seg_separation")
            (("1" (invoke (typepred "%1") (! 1 l))
              (("1" (skeep)
                (("1" (inst - "min_seg_sep_vertex(S, i, j)")
                  (("1"
                    (case "min_seg_sep_vertex(S, i, j) <= norm(S`seq(i) - p)")
                    (("1" (assert)
                      (("1" (expand "restrict" -5 1)
                        (("1" (inst + "i" "j") nil nil)) nil))
                      nil)
                     ("2" (hide -1 -2 -3 -4 2)
                      (("2" (expand "min_seg_sep_vertex")
                        (("2"
                          (name-replace*
                           ("e1" "S`seq(j)" "e2" "S`seq(1 + j)" "vtx"
                            "S`seq(i)"))
                          (("2" (lift-if)
                            (("2"
                              (name-replace "tp"
                               "(vtx - e1) * (e2 - e1) / sqv(e2 - e1)"
                               :hide? nil)
                              (("1"
                                (case "tp = perp_pt(vtx, e1, e2 - e1)")
                                (("1"
                                  (lemma
                                   "perpendicular_2D.perp_is_min")
                                  (("1"
                                    (inst
                                     -
                                     "e1"
                                     "vtx"
                                     "e2 - e1"
                                     "d"
                                     "tp")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (equate
                                         "norm(vtx - p)"
                                         "norm(p - vtx)")
                                        (("1"
                                          (lemma "perp_comps")
                                          (("1"
                                            (inst
                                             -
                                             "e1"
                                             "vtx"
                                             "e2 - e1"
                                             "d"
                                             "tp")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -8)
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (lemma
                                                       "perp_comps")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "e1"
                                                         "vtx"
                                                         "e2 - e1"
                                                         "0"
                                                         "tp")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (rewrite
                                                             "norm_sym"
                                                             1)
                                                            (("1"
                                                              (rewrite
                                                               "sq_le"
                                                               1
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -3)
                                                                  (("1"
                                                                    (cancel-add
                                                                     1)
                                                                    (("1"
                                                                      (rewrite*
                                                                       "norm_scal")
                                                                      (("1"
                                                                        (rewrite
                                                                         "sq_le"
                                                                         1)
                                                                        (("1"
                                                                          (div-by
                                                                           1
                                                                           "norm(e2 - e1)")
                                                                          (("1"
                                                                            (expand
                                                                             "abs")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (split 2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (lemma
                                                           "perp_comps")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "e1"
                                                             "vtx"
                                                             "e2 - e1"
                                                             "1"
                                                             "tp")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (equate
                                                                 "e1 + (e2 - e1) - vtx"
                                                                 "e2 - vtx")
                                                                (("1"
                                                                  (rewrite
                                                                   "norm_sym"
                                                                   1)
                                                                  (("1"
                                                                    (rewrite
                                                                     "sq_le"
                                                                     1
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (replace
                                                                         -3)
                                                                        (("1"
                                                                          (cancel-add
                                                                           1)
                                                                          (("1"
                                                                            (rewrite*
                                                                             "norm_scal")
                                                                            (("1"
                                                                              (rewrite
                                                                               "sq_le"
                                                                               1)
                                                                              (("1"
                                                                                (div-by
                                                                                 1
                                                                                 "norm(e2 - e1)")
                                                                                (("1"
                                                                                  (expand
                                                                                   "abs")
                                                                                  (("1"
                                                                                    (apply
                                                                                     (repeat
                                                                                      (lift-if)))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind-with-ext)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "norm_sym" 1)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "perp_pt")
                                  (("2"
                                    (expand "sqv")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (lemma
                                   "adj_edge_parallel_endpts_neq")
                                  (("3"
                                    (inst - "S" "j")
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (-2 -3 1))
                                (("2"
                                  (flatten)
                                  (("2"
                                    (rewrite "sqv_eq_0")
                                    (("2"
                                      (lemma
                                       "adj_edge_parallel_endpts_neq")
                                      (("2"
                                        (inst - "S" "j")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "empty?")
                (("2" (expand "member")
                  (("2" (hide +)
                    (("2" (inst - "min_seg_sep_vertex(S, i, j)")
                      (("2" (inst + "i" "j") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "adj_edge_parallel_endpts_neq")
        (("2" (inst - "S" "j") (("2" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak))
 (min_seg_sep_all_points_TCC1 0
  (min_seg_sep_all_points_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (min_seg_sep_all_points subtype "segment_endpoint_sequences.i"
    "below[S`length]"))
  (min_seg_sep_all_points_TCC1-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (min_seg_sep_all_points subtype "segment_endpoint_sequences.i"
    "below[S`length]")))
 (min_seg_sep_all_points_TCC2 0
  (min_seg_sep_all_points_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (min_seg_sep_all_points subtype
    "(number_fields.+)(segment_endpoint_sequences.i, 1)"
    "below[S`length]"))
  (min_seg_sep_all_points_TCC2-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (min_seg_sep_all_points subtype
    "(number_fields.+)(segment_endpoint_sequences.i, 1)"
    "below[S`length]")))
 (min_seg_sep_all_points_TCC3 0
  (min_seg_sep_all_points_TCC3-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (min_seg_sep_all_points subtype "segment_endpoint_sequences.j"
    "below[S`length]"))
  (min_seg_sep_all_points_TCC3-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (min_seg_sep_all_points subtype "segment_endpoint_sequences.j"
    "below[S`length]")))
 (min_seg_sep_all_points_TCC4 0
  (min_seg_sep_all_points_TCC4-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (min_seg_sep_all_points subtype
    "(number_fields.+)(segment_endpoint_sequences.j, 1)"
    "below[S`length]"))
  (min_seg_sep_all_points_TCC4-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (min_seg_sep_all_points subtype
    "(number_fields.+)(segment_endpoint_sequences.j, 1)"
    "below[S`length]")))
 (min_seg_sep_all_points_TCC5 0
  (min_seg_sep_all_points_TCC5-2 nil 3874129021
   ("" (skeep*)
    (("" (replace -4)
      (("" (assert)
        (("" (lemma "adj_edge_parallel_endpts_neq")
          (("" (inst - "S" "i")
            (("1" (ground) nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (min_seg_sep_all_points subtype "segment_endpoint_sequences.g"
    "segment_2d"))
  (min_seg_sep_all_points_TCC5-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (min_seg_sep_all_points subtype "segment_endpoint_sequences.g"
    "segment_2d")))
 (min_seg_sep_all_points_TCC6 0
  (min_seg_sep_all_points_TCC6-2 nil 3874129021
   ("" (skeep*)
    (("" (replace -5)
      (("" (assert)
        (("" (lemma "adj_edge_parallel_endpts_neq")
          (("" (inst - "S" "j")
            (("1" (ground) nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (min_seg_sep_all_points subtype "segment_endpoint_sequences.h"
    "segment_2d"))
  (min_seg_sep_all_points_TCC6-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (min_seg_sep_all_points subtype "segment_endpoint_sequences.h"
    "segment_2d")))
 (min_seg_sep_all_points 0
  (min_seg_sep_all_points-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (lemma "min_segment_sep_bounds_sep_dist")
          (("" (lemma "endpoint_nearest_point_between_segments")
            (("" (inst - "g" "h" "p" "q")
              (("" (expand "nearest_endpoint_cond")
                (("" (assert)
                  (("" (split -1)
                    (("1" (hide -2)
                      (("1" (skeep)
                        (("1" (typepred "S")
                          (("1" (expand "segments_do_not_cross?")
                            (("1" (inst-cp - "i" "j")
                              (("1"
                                (inst - "j" "i")
                                (("1"
                                  (inst -6 "u")
                                  (("1"
                                    (inst -7 "u")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand
                                         "mostly_uniq_point_list?")
                                        (("1"
                                          (split -6)
                                          (("1"
                                            (split -7)
                                            (("1"
                                              (inst - "i" "j")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (inst - "1 + i" "j")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (split -7)
                                            (("1"
                                              (inst - "i" "1 + j")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst - "1 + i" "1 + j")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep - t)
                      (("2" (expand "segment_endpoint?")
                        (("2" (split -1)
                          (("1" (inst - "S" "r" "i" "j")
                            (("1" (assert)
                              (("1"
                                (rewrite "norm_sym")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (expand "eligible_seg_sep_index?")
                              (("2"
                                (rewrite "rem_mod")
                                (("1" (ground) nil nil)
                                 ("2"
                                  (case-replace "i = 0")
                                  (("1"
                                    (rewrite "rem_minus_one")
                                    (("1" (ground) nil nil))
                                    nil)
                                   ("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst - "S" "r" "i+1" "j")
                            (("1" (assert)
                              (("1"
                                (rewrite "norm_sym")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (expand "eligible_seg_sep_index?")
                              (("2"
                                (rewrite "rem_mod")
                                (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (skeep - t)
                      (("3" (expand "segment_endpoint?")
                        (("3" (split -1)
                          (("1" (inst - "S" "r" "j" "i")
                            (("1" (assert)
                              (("1"
                                (rewrite "norm_sym")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (expand "eligible_seg_sep_index?")
                              (("2"
                                (rewrite "rem_mod")
                                (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst - "S" "r" "j+1" "i")
                            (("1" (assert)
                              (("1"
                                (rewrite "norm_sym")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (expand "eligible_seg_sep_index?")
                              (("2"
                                (rewrite "rem_mod")
                                (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (min_seg_sep_bounds_seg_length_TCC1 0
  (min_seg_sep_bounds_seg_length_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (replace -1)
      (("" (assert)
        (("" (lemma "adj_edge_parallel_endpts_neq")
          (("" (inst - "S" "i") (("" (ground) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak
   (min_seg_sep_bounds_seg_length subtype
    "segment_endpoint_sequences.e" "segment_2d"))
  (min_seg_sep_bounds_seg_length_TCC1-1 nil 3874128237
   ("" (subtype-tcc) nil nil) nil nil
   (min_seg_sep_bounds_seg_length subtype
    "segment_endpoint_sequences.e" "segment_2d")))
 (min_seg_sep_bounds_seg_length 0
  (min_seg_sep_bounds_seg_length-1 nil 3874129021
   ("" (skeep)
    (("" (assert)
      (("" (expand "length")
        (("" (lemma "min_segment_sep_bounds_sep_dist")
          (("" (inst - "S" _ _ _)
            (("" (case "S`length = 3")
              (("1" (typepred "S")
                (("1" (ground)
                  (("1" (typepred "loop_back_intercept(S)")
                    (("1" (ground)
                      (("1" (replace -2)
                        (("1" (case-replace "i = 0")
                          (("1" (inst - "S`seq(1)" "0" "1")
                            (("1" (rewrite "norm_sym")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "point_on_segment?")
                                  (("1"
                                    (inst + "0")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "eligible_seg_sep_index?")
                              (("2" (propax) nil nil)) nil))
                            nil)
                           ("2" (inst - "S`seq(1)" "2" "0")
                            (("1" (assert)
                              (("1"
                                (expand "point_on_segment?")
                                (("1"
                                  (inst + "1")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "eligible_seg_sep_index?")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (case "i = S`length - 2")
                (("1" (inst - "S`seq(i)" "i + 1" "i - 1")
                  (("1" (assert)
                    (("1" (expand "point_on_segment?")
                      (("1" (inst + "1") (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (expand "eligible_seg_sep_index?")
                      (("2" (typepred "S")
                        (("2" (ground)
                          (("2" (replace -9)
                            (("2" (assert)
                              (("2"
                                (typepred "loop_back_intercept(S)")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst - "S`seq(i + 1)" "i" "i + 1")
                  (("1" (rewrite "norm_sym")
                    (("1" (assert)
                      (("1" (expand "point_on_segment?")
                        (("1" (inst + "0") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (expand "eligible_seg_sep_index?")
                      (("2" (ground)
                        (("2" (case-replace "i = 0")
                          (("1" (assert) nil nil)
                           ("2" (assert)
                            (("2" (typepred "loop_back_intercept(S)")
                              (("2" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (min_seg_sep_bounds_seg_length_wrap 0
  (min_seg_sep_bounds_seg_length_wrap-1 nil 3874129021
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (lemma "min_segment_sep_bounds_sep_dist")
          (("" (inst - "S" _ _ _)
            (("" (case "S`length = 3")
              (("1" (typepred "S") (("1" (ground) nil nil)) nil)
               ("2"
                (name-replace "lbi" "loop_back_intercept(S)" :hide?
                 nil)
                (("2" (inst-cp - "S`seq(lbi)" "1 + lbi" "S`length - 2")
                  (("1"
                    (inst - "S`seq(S`length - 2)" "lbi" "S`length - 3")
                    (("1" (rewrite "norm_sym" -2)
                      (("1" (split 2)
                        (("1" (hide -3)
                          (("1" (assert)
                            (("1" (expand "point_on_segment?")
                              (("1"
                                (inst + "1")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -2)
                          (("2" (assert)
                            (("2" (expand "point_on_segment?")
                              (("2"
                                (inst + "1")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -2 3)
                      (("2" (expand "eligible_seg_sep_index?")
                        (("2" (use "intercept_index_value")
                          (("2" (assert)
                            (("2" (rewrite "rem_mod")
                              (("1" (ground) nil nil)
                               ("2"
                                (typepred "S")
                                (("2"
                                  (ground)
                                  (("2"
                                    (case-replace "lbi = 0")
                                    (("1"
                                      (rewrite "rem_minus_one")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "eligible_seg_sep_index?")
                    (("2" (rewrite "rem_mod")
                      (("2" (use "intercept_index_value")
                        (("2" (ground) nil nil)) nil))
                      nil))
                    nil)
                   ("3" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

