(segments_2d_trig
 (subsegment_preserves_sin_cos_1_TCC1 0
  (subsegment_preserves_sin_cos_1_TCC1-2 nil 3874129019
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (subsegment_preserves_sin_cos_1 subtype
    "(vectors_2D.-)(segments_2d_trig.s`p2, segments_2d_trig.s`p1)"
    "Nz_vector"))
  (subsegment_preserves_sin_cos_1_TCC1-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (subsegment_preserves_sin_cos_1 subtype
    "(vectors_2D.-)(segments_2d_trig.s`p2, segments_2d_trig.s`p1)"
    "Nz_vector")))
 (subsegment_preserves_sin_cos_1_TCC2 0
  (subsegment_preserves_sin_cos_1_TCC2-2 nil 3874129019
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (subsegment_preserves_sin_cos_1 subtype
    "(vectors_2D.-)(segments_2d_trig.e`p2, segments_2d_trig.e`p1)"
    "Nz_vector"))
  (subsegment_preserves_sin_cos_1_TCC2-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (subsegment_preserves_sin_cos_1 subtype
    "(vectors_2D.-)(segments_2d_trig.e`p2, segments_2d_trig.e`p1)"
    "Nz_vector")))
 (subsegment_preserves_sin_cos_1_TCC3 0
  (subsegment_preserves_sin_cos_1_TCC3-2 nil 3874129019
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (subsegment_preserves_sin_cos_1 subtype
    "(vectors_2D.-)(segments_2d_trig.h`p2, segments_2d_trig.h`p1)"
    "Nz_vector"))
  (subsegment_preserves_sin_cos_1_TCC3-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (subsegment_preserves_sin_cos_1 subtype
    "(vectors_2D.-)(segments_2d_trig.h`p2, segments_2d_trig.h`p1)"
    "Nz_vector")))
 (subsegment_preserves_sin_cos_1 0
  (subsegment_preserves_sin_cos_1-1 nil 3874129019
   ("" (skeep)
    (("" (expand "subsegment?")
      (("" (flatten)
        (("" (hide -1)
          (("" (rewrite "point_on_segment_has_offset")
            (("" (skeep)
              (("" (replace -1)
                (("" (replace -3)
                  (("" (assert)
                    (("" (rewrite "normalize_scal")
                      (("1" (expand "sign") (("1" (ground) nil nil))
                        nil)
                       ("2" (typepred "h`p2")
                        (("2" (hide 2)
                          (("2" (flatten)
                            (("2" (replace -1)
                              (("2"
                                (typepred "h`p2")
                                (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (subsegment_preserves_sin_cos_2_TCC1 0
  (subsegment_preserves_sin_cos_2_TCC1-2 nil 3874129019
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (subsegment_preserves_sin_cos_2 subtype
    "(vectors_2D.-)(segments_2d_trig.s`p2, segments_2d_trig.s`p1)"
    "Nz_vector"))
  (subsegment_preserves_sin_cos_2_TCC1-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (subsegment_preserves_sin_cos_2 subtype
    "(vectors_2D.-)(segments_2d_trig.s`p2, segments_2d_trig.s`p1)"
    "Nz_vector")))
 (subsegment_preserves_sin_cos_2_TCC2 0
  (subsegment_preserves_sin_cos_2_TCC2-2 nil 3874129019
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (subsegment_preserves_sin_cos_2 subtype
    "(vectors_2D.-)(segments_2d_trig.e`p2, segments_2d_trig.e`p1)"
    "Nz_vector"))
  (subsegment_preserves_sin_cos_2_TCC2-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (subsegment_preserves_sin_cos_2 subtype
    "(vectors_2D.-)(segments_2d_trig.e`p2, segments_2d_trig.e`p1)"
    "Nz_vector")))
 (subsegment_preserves_sin_cos_2_TCC3 0
  (subsegment_preserves_sin_cos_2_TCC3-2 nil 3874129019
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (subsegment_preserves_sin_cos_2 subtype
    "(vectors_2D.-)(segments_2d_trig.h`p2, segments_2d_trig.h`p1)"
    "Nz_vector"))
  (subsegment_preserves_sin_cos_2_TCC3-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (subsegment_preserves_sin_cos_2 subtype
    "(vectors_2D.-)(segments_2d_trig.h`p2, segments_2d_trig.h`p1)"
    "Nz_vector")))
 (subsegment_preserves_sin_cos_2 0
  (subsegment_preserves_sin_cos_2-1 nil 3874129019
   ("" (skeep)
    (("" (expand "subsegment?")
      (("" (flatten)
        (("" (hide -1)
          (("" (rewrite "point_on_segment_has_offset")
            (("" (skeep)
              (("" (replace -1)
                (("" (replace -3)
                  (("" (assert)
                    (("" (rewrite "normalize_scal")
                      (("1" (expand "sign") (("1" (ground) nil nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (flatten)
                          (("2" (replace -1)
                            (("2" (typepred "h`p2")
                              (("2" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (subsegment_preserves_sin_cos_both_TCC1 0
  (subsegment_preserves_sin_cos_both_TCC1-2 nil 3874129019
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (subsegment_preserves_sin_cos_both subtype
    "(vectors_2D.-)(segments_2d_trig.g`p2, segments_2d_trig.g`p1)"
    "Nz_vector"))
  (subsegment_preserves_sin_cos_both_TCC1-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (subsegment_preserves_sin_cos_both subtype
    "(vectors_2D.-)(segments_2d_trig.g`p2, segments_2d_trig.g`p1)"
    "Nz_vector")))
 (subsegment_preserves_sin_cos_both 0
  (subsegment_preserves_sin_cos_both-1 nil 3874129019
   ("" (skeep)
    (("" (lemma "subsegment_preserves_sin_cos_1")
      (("" (inst - "s" "e" "g")
        (("" (assert)
          (("" (flatten)
            (("" (lemma "subsegment_preserves_sin_cos_2")
              (("" (replace -2)
                (("" (replace -3)
                  (("" (inst - "g" "e" "h") (("" (ground) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (no_perp_segment_intersection_1_TCC1 0
  (no_perp_segment_intersection_1_TCC1-2 nil 3874129019
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (no_perp_segment_intersection_1 subtype "segments_2d_trig.v"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_trig.u}"))
  (no_perp_segment_intersection_1_TCC1-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (no_perp_segment_intersection_1 subtype "segments_2d_trig.v"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_trig.u}")))
 (no_perp_segment_intersection_1_TCC2 0
  (no_perp_segment_intersection_1_TCC2-2 nil 3874129019
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (no_perp_segment_intersection_1 subtype
    "(vectors_2D.-)(segments_2d_trig.v, segments_2d_trig.u)"
    "Nz_vector"))
  (no_perp_segment_intersection_1_TCC2-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (no_perp_segment_intersection_1 subtype
    "(vectors_2D.-)(segments_2d_trig.v, segments_2d_trig.u)"
    "Nz_vector")))
 (no_perp_segment_intersection_1_TCC3 0
  (no_perp_segment_intersection_1_TCC3-2 nil 3874129019
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (no_perp_segment_intersection_1 subtype
    "(vectors_2D.-)(segments_2d_trig.w, segments_2d_trig.u)"
    "Nz_vector"))
  (no_perp_segment_intersection_1_TCC3-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (no_perp_segment_intersection_1 subtype
    "(vectors_2D.-)(segments_2d_trig.w, segments_2d_trig.u)"
    "Nz_vector")))
 (no_perp_segment_intersection_1_TCC4 0
  (no_perp_segment_intersection_1_TCC4-2 nil 3874129019
   ("" (skeep*)
    (("" (hide-all-but (-4 +))
      (("" (lemma "comps_eq")
        (("" (inst - "perp_right(v - u)" "zero")
          (("" (replace -1 :hide? t) (("" (grind-with-ext) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (no_perp_segment_intersection_1 subtype
    "vectors_cross_2d.perp_right((vectors_2D.-)(segments_2d_trig.v, segments_2d_trig.u))"
    "Nz_vector"))
  (no_perp_segment_intersection_1_TCC4-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (no_perp_segment_intersection_1 subtype
    "vectors_cross_2d.perp_right((vectors_2D.-)(segments_2d_trig.v, segments_2d_trig.u))"
    "Nz_vector")))
 (no_perp_segment_intersection_1_TCC5 0
  (no_perp_segment_intersection_1_TCC5-2 nil 3874129019
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (no_perp_segment_intersection_1 subtype "segments_2d_trig.cos_a"
    "nznum"))
  (no_perp_segment_intersection_1_TCC5-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (no_perp_segment_intersection_1 subtype "segments_2d_trig.cos_a"
    "nznum")))
 (no_perp_segment_intersection_1_TCC6 0
  (no_perp_segment_intersection_1_TCC6-2 nil 3874129019
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (no_perp_segment_intersection_1 subtype "segments_2d_trig.u"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_trig.w}"))
  (no_perp_segment_intersection_1_TCC6-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (no_perp_segment_intersection_1 subtype "segments_2d_trig.u"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_trig.w}")))
 (no_perp_segment_intersection_1 0
  (no_perp_segment_intersection_1-1 nil 3874129019
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (use "point_on_reverse_segment")
          (("1" (expand "reverse_segment")
            (("1" (replace -1 :dir rl :hide? t)
              (("1" (rewrite* "point_on_segment_has_norm_offset")
                (("1" (skeep*)
                  (("1" (case-replace "d!1 = 0")
                    (("1" (assert) nil nil)
                     ("2" (case-replace "d = 0")
                      (("1" (assert)
                        (("1" (replace -5)
                          (("1" (replace -11)
                            (("1" (replace -8)
                              (("1"
                                (hide-all-but (-7 2))
                                (("1"
                                  (expand "^")
                                  (("1"
                                    (name-replace
                                     "n"
                                     "norm(perp_right(v - u))")
                                    (("1"
                                      (real-props)
                                      (("1"
                                        (name-replace "y" "v - u")
                                        (("1"
                                          (cancel-add -1)
                                          (("1"
                                            (expand "y")
                                            (("1"
                                              (expand "n")
                                              (("1"
                                                (lemma
                                                 "scaled_vector_neq_scaled_perp_right")
                                                (("1"
                                                  (inst
                                                   -
                                                   "v - u"
                                                   "c / norm(perp_right(v - u))"
                                                   "-d!1 / norm(v - u)")
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (move-terms
                                                       -1
                                                       r
                                                       1)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "vector_lengths_from_sin_cos_1")
                        (("2" (inst - "u" "q" "p")
                          (("2"
                            (equate "p - u" "d!1 * ^(v - u) + c * z")
                            (("1" (equate "p - q" "c * z")
                              (("1"
                                (rewrite* "norm_scal")
                                (("1"
                                  (expand "abs")
                                  (("1"
                                    (ground)
                                    (("1"
                                      (equate "norm(z)" "1")
                                      (("1"
                                        (replace -8)
                                        (("1"
                                          (replace -12)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "length")
                                              (("1"
                                                (case
                                                 "d * ^(w - u) = d!1 * ^(v - u) + c * z")
                                                (("1"
                                                  (replace -1 :dir rl)
                                                  (("1"
                                                    (use
                                                     "scaled_sin_cos_eq")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         :hide?
                                                         t)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (rewrite
                                                             "normalize_normalize")
                                                            (("1"
                                                              (rewrite*
                                                               "norm_scal")
                                                              (("1"
                                                                (expand
                                                                 "abs")
                                                                (("1"
                                                                  (rewrite
                                                                   "normalize_normalize")
                                                                  (("1"
                                                                    (replace
                                                                     -11
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (replace
                                                                       -12
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (replace
                                                                         -2
                                                                         -6)
                                                                        (("1"
                                                                          (replace
                                                                           -3
                                                                           -6)
                                                                          (("1"
                                                                            (real-props)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (-6 1))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-9 +))
                                        (("2"
                                          (replace -1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -7)
                                      (("2"
                                        (hide-all-but -1)
                                        (("2"
                                          (move-terms -1 r 1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (replace -1)
                                      (("3"
                                        (hide-all-but (-5 +))
                                        (("3"
                                          (move-terms -1 r 1)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (use "scal_eq_zero")
                                              (("3"
                                                (ground)
                                                (("3"
                                                  (expand "^")
                                                  (("3"
                                                    (cross-mult -1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (replace -10)
                                      (("4"
                                        (assert)
                                        (("4"
                                          (rewrite
                                           "cross_distrib_add_2")
                                          (("4"
                                            (rewrite "cross_self_zero")
                                            (("4"
                                              (replace -7)
                                              (("4"
                                                (expand "^" +)
                                                (("4"
                                                  (real-props)
                                                  (("4"
                                                    (rewrite
                                                     "cross_scales")
                                                    (("4"
                                                      (use
                                                       "cross_perp_right_pos")
                                                      (("4"
                                                        (assert)
                                                        (("4"
                                                          (rewrite
                                                           "norm_perp_right_is_norm_right")
                                                          (("4"
                                                            (real-props)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("5"
                                      (replace -7)
                                      (("5"
                                        (replace -10)
                                        (("5"
                                          (hide-all-but +)
                                          (("5" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -7)
                                (("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (replace -7)
                              (("2"
                                (replace -11)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (ground) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (no_perp_segment_intersection_2_TCC1 0
  (no_perp_segment_intersection_2_TCC1-2 nil 3874129019
   ("" (skeep*)
    (("" (hide-all-but (-4 +))
      (("" (lemma "comps_eq")
        (("" (inst - "perp_left(v - u)" "zero")
          (("" (replace -1 :hide? t) (("" (grind-with-ext) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (no_perp_segment_intersection_2 subtype
    "vectors_cross_2d.perp_left((vectors_2D.-)(segments_2d_trig.v, segments_2d_trig.u))"
    "Nz_vector"))
  (no_perp_segment_intersection_2_TCC1-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (no_perp_segment_intersection_2 subtype
    "vectors_cross_2d.perp_left((vectors_2D.-)(segments_2d_trig.v, segments_2d_trig.u))"
    "Nz_vector")))
 (no_perp_segment_intersection_2_TCC2 0
  (no_perp_segment_intersection_2_TCC2-2 nil 3874129019
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (no_perp_segment_intersection_2 subtype "segments_2d_trig.cos_a"
    "nznum"))
  (no_perp_segment_intersection_2_TCC2-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (no_perp_segment_intersection_2 subtype "segments_2d_trig.cos_a"
    "nznum")))
 (no_perp_segment_intersection_2_TCC3 0
  (no_perp_segment_intersection_2_TCC3-2 nil 3874129019
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (no_perp_segment_intersection_2 subtype "segments_2d_trig.u"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_trig.w}"))
  (no_perp_segment_intersection_2_TCC3-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (no_perp_segment_intersection_2 subtype "segments_2d_trig.u"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_trig.w}")))
 (no_perp_segment_intersection_2 0
  (no_perp_segment_intersection_2-1 nil 3874129019
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (use "point_on_reverse_segment")
          (("1" (expand "reverse_segment")
            (("1" (replace -1 :dir rl :hide? t)
              (("1" (rewrite* "point_on_segment_has_norm_offset")
                (("1" (skeep*)
                  (("1" (case-replace "d!1 = 0")
                    (("1" (assert) nil nil)
                     ("2" (case-replace "d = 0")
                      (("1" (assert)
                        (("1" (replace -5)
                          (("1" (replace -11)
                            (("1" (replace -8)
                              (("1"
                                (hide-all-but (-7 2))
                                (("1"
                                  (expand "^")
                                  (("1"
                                    (name-replace
                                     "n"
                                     "norm(perp_left(v - u))")
                                    (("1"
                                      (real-props)
                                      (("1"
                                        (name-replace "y" "v - u")
                                        (("1"
                                          (cancel-add -1)
                                          (("1"
                                            (expand "y")
                                            (("1"
                                              (expand "n")
                                              (("1"
                                                (lemma
                                                 "scaled_vector_neq_scaled_perp_left")
                                                (("1"
                                                  (inst
                                                   -
                                                   "v - u"
                                                   "c / norm(perp_left(v - u))"
                                                   "-d!1 / norm(v - u)")
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (move-terms
                                                       -1
                                                       r
                                                       1)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "vector_lengths_from_sin_cos_2")
                        (("2" (inst - "u" "q" "p")
                          (("2"
                            (equate "p - u" "d!1 * ^(v - u) + c * z")
                            (("1" (equate "p - q" "c * z")
                              (("1"
                                (rewrite* "norm_scal")
                                (("1"
                                  (expand "abs")
                                  (("1"
                                    (ground)
                                    (("1"
                                      (equate "norm(z)" "1")
                                      (("1"
                                        (replace -8)
                                        (("1"
                                          (replace -12)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "length")
                                              (("1"
                                                (case
                                                 "d * ^(w - u) = d!1 * ^(v - u) + c * z")
                                                (("1"
                                                  (replace -1 :dir rl)
                                                  (("1"
                                                    (use
                                                     "scaled_sin_cos_eq")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         :hide?
                                                         t)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (rewrite
                                                             "normalize_normalize")
                                                            (("1"
                                                              (rewrite*
                                                               "norm_scal")
                                                              (("1"
                                                                (expand
                                                                 "abs")
                                                                (("1"
                                                                  (rewrite
                                                                   "normalize_normalize")
                                                                  (("1"
                                                                    (replace
                                                                     -11
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (replace
                                                                       -12
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (replace
                                                                         -2
                                                                         -6)
                                                                        (("1"
                                                                          (replace
                                                                           -3
                                                                           -6)
                                                                          (("1"
                                                                            (real-props)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (-6 1))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-9 +))
                                        (("2"
                                          (replace -1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -7)
                                      (("2"
                                        (hide-all-but -1)
                                        (("2"
                                          (move-terms -1 r 1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (replace -1)
                                      (("3"
                                        (hide-all-but (-5 +))
                                        (("3"
                                          (move-terms -1 r 1)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (use "scal_eq_zero")
                                              (("3"
                                                (ground)
                                                (("3"
                                                  (expand "^")
                                                  (("3"
                                                    (cross-mult -1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (replace -10)
                                      (("4"
                                        (assert)
                                        (("4"
                                          (rewrite
                                           "cross_distrib_add_1")
                                          (("4"
                                            (rewrite "cross_self_zero")
                                            (("4"
                                              (replace -7)
                                              (("4"
                                                (expand "^" +)
                                                (("4"
                                                  (real-props)
                                                  (("4"
                                                    (rewrite
                                                     "cross_scales")
                                                    (("4"
                                                      (real-props)
                                                      (("4"
                                                        (rewrite
                                                         "cross_antisymmetric")
                                                        (("4"
                                                          (ground)
                                                          (("1"
                                                            (use
                                                             "cross_perp_left_neg")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "norm_perp_left_is_norm_left")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("5"
                                      (replace -7)
                                      (("5"
                                        (replace -10)
                                        (("5"
                                          (hide-all-but +)
                                          (("5" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -7)
                                (("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (replace -7)
                              (("2"
                                (replace -11)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (ground) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (no_perp_segment_intersection_3_TCC1 0
  (no_perp_segment_intersection_3_TCC1-2 nil 3874129019
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (no_perp_segment_intersection_3 subtype "segments_2d_trig.u"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_trig.w}"))
  (no_perp_segment_intersection_3_TCC1-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (no_perp_segment_intersection_3 subtype "segments_2d_trig.u"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_trig.w}")))
 (no_perp_segment_intersection_3 0
  (no_perp_segment_intersection_3-1 nil 3874129019
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (use "point_on_reverse_segment")
          (("1" (expand "reverse_segment")
            (("1" (replace -1 :dir rl :hide? t)
              (("1" (rewrite* "point_on_segment_has_offset")
                (("1" (skeep*)
                  (("1" (case-replace "d!1 = 0")
                    (("1" (assert) nil nil)
                     ("2" (expand "^" -5)
                      (("2" (replace -5 :hide? t)
                        (("2" (real-props)
                          (("2"
                            (name-replace "cn"
                             "c / norm(perp_right(v - u))" :hide? nil)
                            (("2"
                              (lemma
                               "triangle_vertex_imp_sin_cos_pos_1")
                              (("2"
                                (inst - "u" "v" "p" "q" "cn" "d!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (replace -5 (-1 -2))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "scaled_sin_cos_eq")
                                          (("1"
                                            (inst
                                             -
                                             "v - u"
                                             "w - u"
                                             "1"
                                             "d")
                                            (("1" (ground) nil nil)
                                             ("2"
                                              (equate "d" "0" (assert))
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replace -5)
                                                  (("2"
                                                    (lemma
                                                     "right_triangle_vertices_neq_1")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "u"
                                                       "v"
                                                       "cn"
                                                       "d!1")
                                                      (("1"
                                                        (ground)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (case "cn > 0")
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (replace
                                                           -3
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (cross-mult
                                                             1)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case "cn > 0")
                                  (("1" (ground) nil nil)
                                   ("2"
                                    (replace -1 :dir rl)
                                    (("2"
                                      (cross-mult 1)
                                      (("2"
                                        (hide-all-but (1 4))
                                        (("2"
                                          (ground)
                                          (("2"
                                            (rewrite
                                             "norm_perp_right_is_norm_right")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (ground) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (no_perp_segment_intersection_4_TCC1 0
  (no_perp_segment_intersection_4_TCC1-2 nil 3874129019
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (no_perp_segment_intersection_4 subtype "segments_2d_trig.u"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_trig.w}"))
  (no_perp_segment_intersection_4_TCC1-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (no_perp_segment_intersection_4 subtype "segments_2d_trig.u"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_trig.w}")))
 (no_perp_segment_intersection_4 0
  (no_perp_segment_intersection_4-1 nil 3874129019
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (use "point_on_reverse_segment")
          (("1" (expand "reverse_segment")
            (("1" (replace -1 :dir rl :hide? t)
              (("1" (rewrite* "point_on_segment_has_offset")
                (("1" (skeep*)
                  (("1" (case-replace "d!1 = 0")
                    (("1" (assert) nil nil)
                     ("2" (expand "^" -5)
                      (("2" (replace -5 :hide? t)
                        (("2" (real-props)
                          (("2"
                            (name-replace "cn"
                             "c / norm(perp_left(v - u))" :hide? nil)
                            (("2"
                              (lemma
                               "triangle_vertex_imp_sin_cos_pos_2")
                              (("2"
                                (inst - "u" "v" "p" "q" "cn" "d!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (replace -5 (-1 -2))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "scaled_sin_cos_eq")
                                          (("1"
                                            (inst
                                             -
                                             "w - u"
                                             "v - u"
                                             "d"
                                             "1")
                                            (("1" (ground) nil nil)
                                             ("2"
                                              (equate "d" "0" (assert))
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replace -5)
                                                  (("2"
                                                    (lemma
                                                     "right_triangle_vertices_neq_2")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "u"
                                                       "v"
                                                       "cn"
                                                       "d!1")
                                                      (("1"
                                                        (ground)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (case "cn > 0")
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (replace
                                                           -3
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (cross-mult
                                                             1)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case "cn > 0")
                                  (("1" (ground) nil nil)
                                   ("2"
                                    (replace -1 :dir rl)
                                    (("2"
                                      (cross-mult 1)
                                      (("2"
                                        (hide-all-but (1 4))
                                        (("2"
                                          (ground)
                                          (("2"
                                            (rewrite
                                             "norm_perp_left_is_norm_left")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (ground) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (no_perp_mid_segment_intersection_1_TCC1 0
  (no_perp_mid_segment_intersection_1_TCC1-2 nil 3874129019
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (no_perp_mid_segment_intersection_1 subtype
    "(vectors_2D.-)(segments_2d_trig.v, segments_2d_trig.u)"
    "Nz_vector"))
  (no_perp_mid_segment_intersection_1_TCC1-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (no_perp_mid_segment_intersection_1 subtype
    "(vectors_2D.-)(segments_2d_trig.v, segments_2d_trig.u)"
    "Nz_vector")))
 (no_perp_mid_segment_intersection_1_TCC2 0
  (no_perp_mid_segment_intersection_1_TCC2-2 nil 3874129019
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (no_perp_mid_segment_intersection_1 subtype
    "(vectors_2D.-)(segments_2d_trig.w, segments_2d_trig.u)"
    "Nz_vector"))
  (no_perp_mid_segment_intersection_1_TCC2-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (no_perp_mid_segment_intersection_1 subtype
    "(vectors_2D.-)(segments_2d_trig.w, segments_2d_trig.u)"
    "Nz_vector")))
 (no_perp_mid_segment_intersection_1_TCC3 0
  (no_perp_mid_segment_intersection_1_TCC3-2 nil 3874129019
   ("" (skeep*)
    (("" (hide-all-but (-5 +))
      (("" (lemma "comps_eq")
        (("" (inst - "perp_right(v - u)" "zero")
          (("" (replace -1 :hide? t) (("" (grind-with-ext) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (no_perp_mid_segment_intersection_1 subtype
    "vectors_cross_2d.perp_right((vectors_2D.-)(segments_2d_trig.v, segments_2d_trig.u))"
    "Nz_vector"))
  (no_perp_mid_segment_intersection_1_TCC3-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (no_perp_mid_segment_intersection_1 subtype
    "vectors_cross_2d.perp_right((vectors_2D.-)(segments_2d_trig.v, segments_2d_trig.u))"
    "Nz_vector")))
 (no_perp_mid_segment_intersection_1_TCC4 0
  (no_perp_mid_segment_intersection_1_TCC4-2 nil 3874129019
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (no_perp_mid_segment_intersection_1 subtype "segments_2d_trig.cos_a"
    "nznum"))
  (no_perp_mid_segment_intersection_1_TCC4-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (no_perp_mid_segment_intersection_1 subtype "segments_2d_trig.cos_a"
    "nznum")))
 (no_perp_mid_segment_intersection_1_TCC5 0
  (no_perp_mid_segment_intersection_1_TCC5-2 nil 3874129019
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (no_perp_mid_segment_intersection_1 subtype "segments_2d_trig.u"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_trig.w}"))
  (no_perp_mid_segment_intersection_1_TCC5-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (no_perp_mid_segment_intersection_1 subtype "segments_2d_trig.u"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_trig.w}")))
 (no_perp_mid_segment_intersection_1 0
  (no_perp_mid_segment_intersection_1-1 nil 3874129019
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (lemma "no_perp_segment_intersection_1")
          (("" (inst - "u" "v" "w" "m" "d * c")
            (("" (ground)
              (("1" (ground)
                (("1" (real-props)
                  (("1" (replace -7)
                    (("1"
                      (equate "(1/2 * (u + v)) - u" "1/2 * (v - u)")
                      (("1" (replace -8 :dir rl)
                        (("1" (replace -9 :dir rl)
                          (("1" (rewrite "norm_scal")
                            (("1" (expand "abs")
                              (("1"
                                (real-props)
                                (("1"
                                  (case
                                   "2 * (c * cos_a * d) <= 2 * (c * cos_a)")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (cancel-by 1 (! 1 r))
                                    (("2"
                                      (mult-cases 1)
                                      (("2" (mult-cases 1) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (replace -1)
                (("2" (hide-all-but (-8 1))
                  (("2" (grind-with-ext) nil nil)) nil))
                nil)
               ("3" (use "segment_midpoint_on_segment")
                (("3" (expand "segment_midpoint")
                  (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (no_perp_mid_segment_intersection_2_TCC1 0
  (no_perp_mid_segment_intersection_2_TCC1-2 nil 3874129019
   ("" (skeep*)
    (("" (hide-all-but (-5 +))
      (("" (lemma "comps_eq")
        (("" (inst - "perp_left(v - u)" "zero")
          (("" (replace -1 :hide? t) (("" (grind-with-ext) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (no_perp_mid_segment_intersection_2 subtype
    "vectors_cross_2d.perp_left((vectors_2D.-)(segments_2d_trig.v, segments_2d_trig.u))"
    "Nz_vector"))
  (no_perp_mid_segment_intersection_2_TCC1-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (no_perp_mid_segment_intersection_2 subtype
    "vectors_cross_2d.perp_left((vectors_2D.-)(segments_2d_trig.v, segments_2d_trig.u))"
    "Nz_vector")))
 (no_perp_mid_segment_intersection_2_TCC2 0
  (no_perp_mid_segment_intersection_2_TCC2-2 nil 3874129019
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (no_perp_mid_segment_intersection_2 subtype "segments_2d_trig.cos_a"
    "nznum"))
  (no_perp_mid_segment_intersection_2_TCC2-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (no_perp_mid_segment_intersection_2 subtype "segments_2d_trig.cos_a"
    "nznum")))
 (no_perp_mid_segment_intersection_2_TCC3 0
  (no_perp_mid_segment_intersection_2_TCC3-2 nil 3874129019
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (no_perp_mid_segment_intersection_2 subtype "segments_2d_trig.u"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_trig.w}"))
  (no_perp_mid_segment_intersection_2_TCC3-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (no_perp_mid_segment_intersection_2 subtype "segments_2d_trig.u"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_trig.w}")))
 (no_perp_mid_segment_intersection_2 0
  (no_perp_mid_segment_intersection_2-1 nil 3874129019
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (lemma "no_perp_segment_intersection_2")
          (("" (inst - "u" "v" "w" "m" "d * c")
            (("" (ground)
              (("1" (ground)
                (("1" (real-props)
                  (("1" (replace -7)
                    (("1"
                      (equate "(1/2 * (u + v)) - u" "1/2 * (v - u)")
                      (("1" (replace -8 :dir rl)
                        (("1" (replace -9 :dir rl)
                          (("1" (rewrite "norm_scal")
                            (("1" (expand "abs")
                              (("1"
                                (real-props)
                                (("1"
                                  (case
                                   "2 * (c * cos_a * d) <= 2 * (c * cos_a)")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (cancel-by 1 (! 1 r))
                                    (("2"
                                      (mult-cases 1)
                                      (("2" (mult-cases 1) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (replace -1)
                (("2" (hide-all-but (-8 1))
                  (("2" (grind-with-ext) nil nil)) nil))
                nil)
               ("3" (use "segment_midpoint_on_segment")
                (("3" (expand "segment_midpoint")
                  (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

