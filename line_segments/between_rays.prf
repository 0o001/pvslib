(between_rays
 (leftward_point_not_on_ray_of_edge_TCC1 0
  (leftward_point_not_on_ray_of_edge_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (leftward_point_not_on_ray_of_edge subtype
    "(vectors_2D.-)(between_rays.e`p2, between_rays.e`p1)"
    "Nz_vector"))
  (leftward_point_not_on_ray_of_edge_TCC1-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (leftward_point_not_on_ray_of_edge subtype
    "(vectors_2D.-)(between_rays.e`p2, between_rays.e`p1)"
    "Nz_vector")))
 (leftward_point_not_on_ray_of_edge 0
  (leftward_point_not_on_ray_of_edge-1 nil 3874129020
   ("" (skeep)
    (("" (expand "point_on_arb_ray?")
      (("" (skeep)
        (("" (replace -3 :hide? t)
          (("" (expand "+ ")
            (("" (cancel-add -1)
              (("" (expand "*")
                (("" (case-replace "d = 0")
                  (("1" (assert) nil nil)
                   ("2" (cancel-by -1 "d")
                    (("2" (expand "^")
                      (("2" (expand "*")
                        (("2" (real-props)
                          (("2" (expand "-") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (same_line_between_rays_TCC1 0
  (same_line_between_rays_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (same_line_between_rays subtype "between_rays.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= between_rays.p}"))
  (same_line_between_rays_TCC1-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (same_line_between_rays subtype "between_rays.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= between_rays.p}")))
 (same_line_between_rays_TCC2 0
  (same_line_between_rays_TCC2-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (same_line_between_rays subtype "between_rays.r"
    "{p: vectors_cross_2d.point_2d | p /= between_rays.q}"))
  (same_line_between_rays_TCC2-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (same_line_between_rays subtype "between_rays.r"
    "{p: vectors_cross_2d.point_2d | p /= between_rays.q}")))
 (same_line_between_rays 0
  (same_line_between_rays-1 nil 3874129020
   ("" (skeep)
    (("" (expand "between_rays?")
      (("" (assert)
        (("" (rewrite* "cross_scales_2") (("" (real-props) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (collinear_segments_between_rays_TCC1 0
  (collinear_segments_between_rays_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (collinear_segments_between_rays subtype
    "(vectors_2D.-)(between_rays.s`p2, between_rays.s`p1)"
    "Nz_vector"))
  (collinear_segments_between_rays_TCC1-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (collinear_segments_between_rays subtype
    "(vectors_2D.-)(between_rays.s`p2, between_rays.s`p1)"
    "Nz_vector")))
 (collinear_segments_between_rays_TCC2 0
  (collinear_segments_between_rays_TCC2-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (collinear_segments_between_rays subtype
    "(vectors_2D.-)(between_rays.e`p2, between_rays.e`p1)"
    "Nz_vector"))
  (collinear_segments_between_rays_TCC2-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (collinear_segments_between_rays subtype
    "(vectors_2D.-)(between_rays.e`p2, between_rays.e`p1)"
    "Nz_vector")))
 (collinear_segments_between_rays_TCC3 0
  (collinear_segments_between_rays_TCC3-2 nil 3874129020
   ("" (skeep)
    (("" (replace -3)
      (("" (hide-all-but -5)
        (("" (name-replace "u" "c * ^(s`p2 - s`p1)")
          (("" (move-terms -1 r 2)
            (("" (cancel-add -1)
              (("" (expand "u")
                (("" (use "scal_eq_zero") (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (collinear_segments_between_rays subtype "between_rays.s`p2"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= between_rays.p}"))
  (collinear_segments_between_rays_TCC3-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (collinear_segments_between_rays subtype "between_rays.s`p2"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= between_rays.p}")))
 (collinear_segments_between_rays_TCC4 0
  (collinear_segments_between_rays_TCC4-2 nil 3874129020
   ("" (skeep)
    (("" (replace -4)
      (("" (hide-all-but -5)
        (("" (name-replace "u" "d * ^(e`p2 - e`p1)")
          (("" (cancel-add -1)
            (("" (expand "u")
              (("" (use "scal_eq_zero") (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (collinear_segments_between_rays subtype "between_rays.q"
    "{p: vectors_cross_2d.point_2d | p /= between_rays.e`p1}"))
  (collinear_segments_between_rays_TCC4-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (collinear_segments_between_rays subtype "between_rays.q"
    "{p: vectors_cross_2d.point_2d | p /= between_rays.e`p1}")))
 (collinear_segments_between_rays 0
  (collinear_segments_between_rays-1 nil 3874129020
   ("" (skeep)
    (("" (expand "between_rays?")
      (("" (replace -3)
        (("" (replace -4)
          (("" (replace -1)
            (("" (assert)
              (("" (expand "^")
                (("" (real-props)
                  ((""
                    (name-replace*
                     ("NS" "norm(e`p1 - s`p1)" "NE"
                      "norm(e`p2 - e`p1)"))
                    ((""
                      (equate "-(c / NS * (e`p1 - s`p1))"
                       "-c / NS * (e`p1 - s`p1)" t)
                      (("" (rewrite* "cross_scales_1")
                        (("" (real-props)
                          (("" (case "0 < NE and 0 < NS")
                            (("1" (flatten)
                              (("1"
                                (rewrite "cross_scales_2")
                                (("1"
                                  (assert)
                                  (("1"
                                    (real-props)
                                    (("1"
                                      (ground)
                                      (("1"
                                        (rewrite "cross_diff_1" 1)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (rewrite "cross_diff_1" 1)
                                        (("2" (assert) nil nil))
                                        nil)
                                       ("3"
                                        (rewrite "cross_diff_1" 2)
                                        (("3" (assert) nil nil))
                                        nil)
                                       ("4"
                                        (rewrite "cross_diff_1" 2)
                                        (("4" (assert) nil nil))
                                        nil)
                                       ("5"
                                        (rewrite "cross_diff_1" 1)
                                        (("5" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-1 -2 1))
                              (("2"
                                (expand "NE")
                                (("2"
                                  (expand "NS")
                                  (("2"
                                    (ground)
                                    (("1"
                                      (use "norm_diff_pos")
                                      (("1" (ground) nil nil))
                                      nil)
                                     ("2"
                                      (equate "e`p1" "s`p2" (assert))
                                      (("2"
                                        (use "norm_diff_pos")
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (scaled_vector_between_rays 0
  (scaled_vector_between_rays-1 nil 3874129020
   ("" (skeep)
    (("" (expand "between_rays?")
      (("" (ground)
        (("1" (rewrite* "cross_scales_2") (("1" (real-props) nil nil))
          nil)
         ("2" (rewrite* "cross_scales_2") (("2" (real-props) nil nil))
          nil)
         ("3" (rewrite* "cross_scales_2") (("3" (real-props) nil nil))
          nil)
         ("4" (rewrite* "cross_scales_2") (("4" (real-props) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (scaled_vector_between_rays_neg 0
  (scaled_vector_between_rays_neg-1 nil 3874129020
   ("" (skeep)
    (("" (expand "between_rays?")
      (("" (ground)
        (("1" (rewrite* "cross_scales_2")
          (("1" (real-props)
            (("1" (rewrite "neg_cross_neg") (("1" (assert) nil nil))
              nil))
            nil))
          nil)
         ("2" (rewrite* "cross_scales_2")
          (("2" (rewrite "neg_cross_neg") (("2" (real-props) nil nil))
            nil))
          nil)
         ("3" (rewrite* "cross_scales_2")
          (("3" (rewrite "neg_cross_neg") (("3" (real-props) nil nil))
            nil))
          nil)
         ("4" (rewrite* "cross_scales_2")
          (("4" (rewrite "neg_cross_neg" -2)
            (("4" (real-props) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (segment_interior_points_all_between_TCC1 0
  (segment_interior_points_all_between_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (segment_interior_points_all_between subtype "between_rays.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= between_rays.p}"))
  (segment_interior_points_all_between_TCC1-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (segment_interior_points_all_between subtype "between_rays.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= between_rays.p}")))
 (segment_interior_points_all_between 0
  (segment_interior_points_all_between-1 nil 3874129020
   ("" (skeep*)
    (("" (expand "point_on_segment?")
      (("" (skeep)
        (("" (replace -8 :hide? t)
          (("" (expand "between_rays?")
            (("" (replace -3 :dir rl)
              (("" (ground)
                (("1" (rewrite "cross_distrib_sub_2" 1)
                  (("1" (rewrite "cross_distrib_add_2" 1)
                    (("1" (rewrite* "cross_scales_2" 1)
                      (("1" (rewrite "cross_distrib_sub_2" -1)
                        (("1" (rewrite "cross_distrib_sub_2" -3)
                          (("1" (lemma "one_parameter_min_lt")
                            (("1"
                              (inst - "cross(s`p1 - v, p)"
                               "cross(s`p1 - v, q)"
                               "cross(s`p1 - v, v)" "t")
                              (("1" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (rewrite "cross_distrib_sub_2" 1)
                  (("2" (rewrite "cross_distrib_add_2" 1)
                    (("2" (rewrite* "cross_scales_2" 1)
                      (("2" (rewrite "cross_distrib_sub_2" -2)
                        (("2" (rewrite "cross_distrib_sub_2" -4)
                          (("2" (lemma "one_parameter_max_lt")
                            (("2"
                              (inst - "cross(e`p2 - v, p)"
                               "cross(e`p2 - v, q)"
                               "cross(e`p2 - v, v)" "t")
                              (("2" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (segment_interior_points_all_bounded_TCC1 0
  (segment_interior_points_all_bounded_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (segment_interior_points_all_bounded subtype "between_rays.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= between_rays.p}"))
  (segment_interior_points_all_bounded_TCC1-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (segment_interior_points_all_bounded subtype "between_rays.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= between_rays.p}")))
 (segment_interior_points_all_bounded 0
  (segment_interior_points_all_bounded-1 nil 3874129020
   ("" (skeep*)
    (("" (expand "point_on_segment?")
      (("" (skeep)
        (("" (replace -5 :hide? t)
          (("" (expand "norm")
            (("" (equate "d" "sqrt(sq(d))" t)
              (("" (rewrite* "sqrt_le")
                (("" (lemma "one_parameter_max")
                  (("" (inst - "sqv(p - v)" "sqv(q - v)" "sq(d)" "t")
                    (("1" (assert)
                      (("1" (rewrite "sqv_sub" +)
                        (("1" (rewrite "sqv_add")
                          (("1" (case "sqv(p) + sqv(q) >= 2 * (p*q)")
                            (("1" (rewrite* "sqv_sub")
                              (("1"
                                (rewrite* "sqv_scal")
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite "dot_add_left" +)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (factor 2 l (4 8) :id? t)
                                        (("1"
                                          (factor 2 l (5 6) :id? t)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (mult-by -1 "t*(1-t)")
                                              (("1"
                                                (case-replace
                                                 "sq((1 - t)) * sqv(p) = (1 - t) * sqv(p) - t*(1 - t) * sqv(p)")
                                                (("1"
                                                  (case-replace
                                                   "sq(t) * sqv(q) = t * sqv(q) - t*(1 - t) * sqv(q)")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but
                                                 (-5 -6 1))
                                                (("2"
                                                  (move-terms 1 l 2)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (mult-cases 1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (grind)
                                (("2"
                                  (case
                                   "p`x * p`x + q`x * q`x >= 2 * (p`x * q`x)")
                                  (("1"
                                    (case
                                     "p`y * p`y + q`y * q`y >= 2 * (p`y * q`y)")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (case
                                         "exists (d: real): p`y = d + q`y")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (grind)
                                              (("1"
                                                (cancel-add 1)
                                                (("1"
                                                  (mult-cases 1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst + "p`y - q`y")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (case
                                       "exists (d: real): p`x = d + q`x")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (cancel-add 1)
                                                (("1"
                                                  (mult-cases 1)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst + "p`x - q`x")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (ground) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (segment_interior_points_all_norms_pos_TCC1 0
  (segment_interior_points_all_norms_pos_TCC1-2 nil 3874129020
   ("" (skeep) (("" (replace -3) (("" (assert) nil nil)) nil)) nil) nil
   shostak
   (segment_interior_points_all_norms_pos subtype
    "(vectors_2D.-)(between_rays.p, between_rays.v)" "Nz_vector"))
  (segment_interior_points_all_norms_pos_TCC1-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (segment_interior_points_all_norms_pos subtype
    "(vectors_2D.-)(between_rays.p, between_rays.v)" "Nz_vector")))
 (segment_interior_points_all_norms_pos_TCC2 0
  (segment_interior_points_all_norms_pos_TCC2-2 nil 3874129020
   ("" (skeep)
    (("" (rewrite "norm_sym" -2)
      (("" (replace -3) (("" (assert) nil nil)) nil)) nil))
    nil)
   nil shostak
   (segment_interior_points_all_norms_pos subtype
    "(vectors_2D.-)(between_rays.v, between_rays.q)" "Nz_vector"))
  (segment_interior_points_all_norms_pos_TCC2-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (segment_interior_points_all_norms_pos subtype
    "(vectors_2D.-)(between_rays.v, between_rays.q)" "Nz_vector")))
 (segment_interior_points_all_norms_pos_TCC3 0
  (segment_interior_points_all_norms_pos_TCC3-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (segment_interior_points_all_norms_pos subtype "between_rays.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= between_rays.p}"))
  (segment_interior_points_all_norms_pos_TCC3-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (segment_interior_points_all_norms_pos subtype "between_rays.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= between_rays.p}")))
 (segment_interior_points_all_norms_pos 0
  (segment_interior_points_all_norms_pos-1 nil 3874129020
   ("" (skeep*)
    (("" (expand "point_on_segment?")
      (("" (skeep)
        (("" (replace -5 :hide? t)
          ((""
            (case "forall (u, v: vector_2d): norm(u - v) > 0 iff u /= v")
            (("1" (inst-cp - "p" "v")
              (("1" (inst-cp - "q" "v")
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (inst - "(1 - t) * p + t * q" "v")
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (replace -1 :dir rl)
                            (("1" (assert)
                              (("1"
                                (equate
                                 "p - ((1 - t) * p + t * q)"
                                 "t * (p - q)")
                                (("1"
                                  (equate
                                   "q - ((1 - t) * p + t * q)"
                                   "(1 - t) * (q - p)")
                                  (("1"
                                    (case-replace "t = 0")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (case-replace "t = 1")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (equate
                                         "(1 - t) * p + t * q - q"
                                         "(1 - t) * (p - q)")
                                        (("1"
                                          (rewrite* "normalize_scal")
                                          (("1"
                                            (expand "sign")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (skeep)
                (("2" (use "norm_eq_0") (("2" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (on_ray_right_side_imp_on_segment_TCC1 0
  (on_ray_right_side_imp_on_segment_TCC1-2 nil 3874129020
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (on_ray_right_side_imp_on_segment subtype
    "(vectors_2D.-)(between_rays.v, between_rays.u)" "Nz_vector"))
  (on_ray_right_side_imp_on_segment_TCC1-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (on_ray_right_side_imp_on_segment subtype
    "(vectors_2D.-)(between_rays.v, between_rays.u)" "Nz_vector")))
 (on_ray_right_side_imp_on_segment_TCC2 0
  (on_ray_right_side_imp_on_segment_TCC2-2 nil 3874129020
   ("" (skeep)
    (("" (expand "off_right_side?")
      (("" (replace -5)
        (("" (use "point_on_segment_cross_is_0")
          (("" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak
   (on_ray_right_side_imp_on_segment subtype "between_rays.w"
    "{p: vectors_cross_2d.point_2d | p /= between_rays.u}"))
  (on_ray_right_side_imp_on_segment_TCC2-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (on_ray_right_side_imp_on_segment subtype "between_rays.w"
    "{p: vectors_cross_2d.point_2d | p /= between_rays.u}")))
 (on_ray_right_side_imp_on_segment 0
  (on_ray_right_side_imp_on_segment-1 nil 3874129020
   ("" (skeep)
    (("" (expand "off_right_side?")
      (("" (case "w = u")
        (("1" (lemma "same_side_points_off_line_2")
          (("1" (inst?)
            (("1" (inst - "v" "w")
              (("1" (ground)
                (("1" (rewrite "point_on_segment_has_offset" -)
                  (("1" (skeep) (("1" (inst?) nil nil)) nil)) nil)
                 ("2" (inst + "0") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (case "norm(w - u) <= norm(v - u)")
          (("1" (expand "point_on_arb_ray?")
            (("1" (skeep)
              (("1" (replace -2 -1)
                (("1" (assert)
                  (("1" (rewrite "norm_scal")
                    (("1" (expand "abs")
                      (("1" (case "d = norm(v - u)")
                        (("1" (expand "^" -3)
                          (("1" (replace -1)
                            (("1" (real-props)
                              (("1"
                                (case-replace "w = v")
                                (("1"
                                  (expand "point_on_segment?")
                                  (("1"
                                    (inst + "1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-3 1))
                                  (("2" (grind-with-ext) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "between_points_on_segment")
                          (("2"
                            (inst - "v" "u" "(# p1 := u, p2 := v #)"
                             "d")
                            (("2" (ground)
                              (("1"
                                (replace -3 :dir rl)
                                (("1"
                                  (expand "point_on_segment?" -1)
                                  (("1"
                                    (lemma
                                     "same_side_points_off_line_2")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (inst - "v" "w")
                                        (("1"
                                          (ground)
                                          (("1"
                                            (rewrite
                                             "point_on_segment_has_offset"
                                             -)
                                            (("1"
                                              (skeep -4)
                                              (("1" (inst?) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (inst?)
                                              (("1" (assert) nil nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "point_on_segment?")
                                (("2"
                                  (inst + "1")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "point_on_segment?")
                                (("3"
                                  (inst + "0")
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (rewrite* "point_on_segment_has_offset")
            (("2" (expand "point_on_arb_ray?")
              (("2" (skeep*)
                (("2" (inst + "norm(v - u) / norm(w - u)")
                  (("1" (replace -1 4)
                    (("1" (assert)
                      (("1" (rewrite "norm_scal")
                        (("1" (expand "abs")
                          (("1" (expand "^" 4)
                            (("1" (real-props)
                              (("1"
                                (ground)
                                (("1"
                                  (hide-all-but 1)
                                  (("1" (grind-with-ext) nil nil))
                                  nil)
                                 ("2"
                                  (case "w - u = d * ^(v - u)")
                                  (("1"
                                    (expand "^" -1)
                                    (("1"
                                      (replace -1 2)
                                      (("1"
                                        (rewrite "norm_scal")
                                        (("1"
                                          (expand "abs")
                                          (("1"
                                            (rewrite "norm_scal")
                                            (("1"
                                              (expand "abs")
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (real-props)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (replace -1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (cross-mult 1) nil nil)
                   ("3" (use "norm_eq_0") (("3" (ground) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (between_rays_equiv 0
  (between_rays_equiv-1 nil 3874129020 ("" (grind) nil nil) nil
   shostak))
 (point_between_rays_equiv 0
  (point_between_rays_equiv-1 nil 3874129020 ("" (grind) nil nil) nil
   shostak))
 (point_between_rays_irreflexive 0
  (point_between_rays_irreflexive-1 nil 3874129020 ("" (grind) nil nil)
   nil shostak))
 (point_on_neg_ray_between_pos_rays_1_TCC1 0
  (point_on_neg_ray_between_pos_rays_1_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (point_on_neg_ray_between_pos_rays_1 subtype
    "(vectors_2D.-)(between_rays.s`p2, between_rays.s`p1)"
    "Nz_vector"))
  (point_on_neg_ray_between_pos_rays_1_TCC1-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (point_on_neg_ray_between_pos_rays_1 subtype
    "(vectors_2D.-)(between_rays.s`p2, between_rays.s`p1)"
    "Nz_vector")))
 (point_on_neg_ray_between_pos_rays_1 0
  (point_on_neg_ray_between_pos_rays_1-1 nil 3874129020
   ("" (skeep)
    (("" (expand "point_between_rays?")
      (("" (replace -2)
        (("" (replace -1)
          (("" (assert)
            (("" (rewrite* "cross_scales_2")
              (("" (real-props)
                (("" (lemma "cross_norm_lt_0")
                  (("" (inst - "e`p2 - e`p1" "s`p2 - e`p1")
                    (("" (lemma "cross_norm_gt_0")
                      (("" (inst - "s`p2 - e`p1" "s`p2 - e`p1")
                        (("" (rewrite "cross_gt_0_swap_lt_0" -5)
                          (("" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (point_on_neg_ray_between_pos_rays_2 0
  (point_on_neg_ray_between_pos_rays_2-1 nil 3874129020
   ("" (skeep)
    (("" (expand "point_between_rays?")
      (("" (replace -2)
        (("" (replace -1)
          (("" (assert)
            (("" (rewrite* "cross_scales_2")
              (("" (real-props)
                (("" (rewrite "cross_lt_0_swap_gt_0" -)
                  (("" (lemma "cross_norm_gt_0")
                    (("" (inst - "e`p2 - e`p1" "s`p2 - e`p1")
                      (("" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (point_between_rays_antisymmetric 0
  (point_between_rays_antisymmetric-1 nil 3874129020
   ("" (grind) nil nil) nil shostak))
 (point_between_rays_antisymmetric_2_TCC1 0
  (point_between_rays_antisymmetric_2_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (point_between_rays_antisymmetric_2 subtype
    "(vectors_2D.-)(between_rays.e`p2, between_rays.e`p1)"
    "Nz_vector"))
  (point_between_rays_antisymmetric_2_TCC1-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (point_between_rays_antisymmetric_2 subtype
    "(vectors_2D.-)(between_rays.e`p2, between_rays.e`p1)"
    "Nz_vector")))
 (point_between_rays_antisymmetric_2 0
  (point_between_rays_antisymmetric_2-1 nil 3874129020
   ("" (skeep)
    (("" (expand "point_on_arb_ray?")
      (("" (case "cross(s`p2 - e`p1, p - e`p1) = 0")
        (("1" (rewrite "cross_eq_0_iff_point_on_line_2")
          (("1" (skeep)
            (("1" (case "d<0")
              (("1" (lemma "point_on_neg_ray_between_pos_rays_1")
                (("1" (inst - "p" "s" "e" "d*norm(s`p2-e`p1)")
                  (("1" (ground)
                    (("1" (expand "^" 1) (("1" (real-props) nil nil))
                      nil)
                     ("2" (lemma "point_on_neg_ray_between_pos_rays_2")
                      (("2" (inst - "p" "s" "e" "d*norm(s`p2-e`p1)")
                        (("1" (ground)
                          (("1" (expand "^" 1)
                            (("1" (real-props) nil nil)) nil)
                           ("2"
                            (case "cross(s`p2 - s`p1, e`p2 - e`p1) = 0")
                            (("1" (replace -4)
                              (("1"
                                (rewrite
                                 "cross_eq_0_iff_point_on_line")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (case "d!1 < 0")
                                    (("1"
                                      (replace -2 -4)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst
                                           6
                                           "d*d!1*norm(e`p2-e`p1)")
                                          (("1"
                                            (expand "^" 6)
                                            (("1"
                                              (real-props)
                                              nil
                                              nil))
                                            nil)
                                           ("2"
                                            (mult-cases 1)
                                            (("2"
                                              (mult-cases 1)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst 8 "d!1*norm(e`p2-e`p1)")
                                      (("1"
                                        (expand "^" 8)
                                        (("1" (real-props) nil nil))
                                        nil)
                                       ("2" (mult-cases 1) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (case "d * norm(s`p2 - e`p1) < 0")
                          (("1" (assert) nil nil)
                           ("2" (mult-cases 1)
                            (("2" (replace -3 :dir rl)
                              (("2"
                                (use "norm_diff_pos")
                                (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "d * norm(s`p2 - e`p1) < 0")
                    (("1" (assert) nil nil)
                     ("2" (mult-cases 1)
                      (("2" (replace -3 :dir rl)
                        (("2" (use "norm_diff_pos")
                          (("2" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst 4 "d*norm(s`p2-s`p1)")
                (("1" (expand "^" 4) (("1" (real-props) nil nil)) nil)
                 ("2" (mult-cases 1) nil nil))
                nil))
              nil))
            nil)
           ("2" (ground)
            (("2" (inst 4 "0") (("2" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (case "cross(e`p2 - e`p1, p - e`p1) = 0")
          (("1" (rewrite "cross_eq_0_iff_point_on_line_2")
            (("1" (skeep)
              (("1" (case "d<0")
                (("1" (lemma "point_on_neg_ray_between_pos_rays_1")
                  (("1" (inst - "p" "e" "s" "d*norm(e`p2-e`p1)")
                    (("1" (ground)
                      (("1" (expand "^" 1) (("1" (real-props) nil nil))
                        nil)
                       ("2"
                        (lemma "point_on_neg_ray_between_pos_rays_2")
                        (("2" (inst - "p" "e" "s" "d*norm(e`p2-e`p1)")
                          (("1" (ground)
                            (("1" (expand "^" 1)
                              (("1" (real-props) nil nil)) nil)
                             ("2"
                              (case "cross(s`p2 - s`p1, e`p2 - e`p1) = 0")
                              (("1"
                                (replace -4)
                                (("1"
                                  (rewrite
                                   "cross_eq_0_iff_point_on_line_2")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (replace -1 -3)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst
                                           6
                                           "d*d!1*norm(s`p2-e`p1)")
                                          (("1"
                                            (expand "^" 6)
                                            (("1"
                                              (real-props)
                                              nil
                                              nil))
                                            nil)
                                           ("2"
                                            (mult-cases 1)
                                            (("2"
                                              (mult-cases 1)
                                              (("2"
                                                (expand "^" 8)
                                                (("2"
                                                  (move-terms -1 r 1)
                                                  (("2"
                                                    (replace -1 8)
                                                    (("2"
                                                      (inst
                                                       8
                                                       "norm(s`p2-e`p1)")
                                                      (("2"
                                                        (rewrite
                                                         "norm_scal")
                                                        (("2"
                                                          (expand
                                                           "abs")
                                                          (("2"
                                                            (real-props)
                                                            (("2"
                                                              (hide-all-but
                                                               8)
                                                              (("2"
                                                                (grind-with-ext)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "cross_antisymmetric" 1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case "d * norm(e`p2 - e`p1) < 0")
                            (("1" (assert) nil nil)
                             ("2" (mult-cases 1)
                              (("2"
                                (use "norm_diff_pos")
                                (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "d * norm(e`p2 - e`p1) < 0")
                      (("1" (assert) nil nil)
                       ("2" (mult-cases 1)
                        (("2" (use "norm_diff_pos")
                          (("2" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst 6 "d*norm(e`p2-e`p1)")
                  (("1" (expand "^" 6) (("1" (real-props) nil nil))
                    nil)
                   ("2" (mult-cases 1) nil nil))
                  nil))
                nil))
              nil)
             ("2" (ground)
              (("2" (replace -1)
                (("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (expand "point_between_rays?")
            (("2" (case "cross(s`p2 - e`p1, e`p2 - e`p1) = 0")
              (("1" (rewrite "cross_eq_0_iff_point_on_line")
                (("1" (skeep)
                  (("1" (case "d<0")
                    (("1" (replace -2 (3 4))
                      (("1" (replace -3)
                        (("1" (assert)
                          (("1" (rewrite* "cross_scales_1")
                            (("1" (real-props) (("1" (ground) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst 8 "d*norm(e`p2-e`p1)")
                      (("1" (expand "^" 8) (("1" (real-props) nil nil))
                        nil)
                       ("2" (mult-cases 1) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (ground)
                (("1" (rewrite "cross_lt_0_swap_gt_0" 2) nil nil)
                 ("2" (rewrite "cross_lt_0_swap_gt_0" 2) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (between_rays_antisymmetric_2_TCC1 0
  (between_rays_antisymmetric_2_TCC1-2 nil 3874129020
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (between_rays_antisymmetric_2 subtype
    "(vectors_2D.-)(between_rays.s`p1, between_rays.s`p2)"
    "Nz_vector"))
  (between_rays_antisymmetric_2_TCC1-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (between_rays_antisymmetric_2 subtype
    "(vectors_2D.-)(between_rays.s`p1, between_rays.s`p2)"
    "Nz_vector")))
 (between_rays_antisymmetric_2_TCC2 0
  (between_rays_antisymmetric_2_TCC2-2 nil 3874129020
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (between_rays_antisymmetric_2 subtype
    "(vectors_2D.-)(between_rays.e`p2, between_rays.e`p1)"
    "Nz_vector"))
  (between_rays_antisymmetric_2_TCC2-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (between_rays_antisymmetric_2 subtype
    "(vectors_2D.-)(between_rays.e`p2, between_rays.e`p1)"
    "Nz_vector")))
 (between_rays_antisymmetric_2 0
  (between_rays_antisymmetric_2-1 nil 3874129020
   ("" (skeep)
    (("" (lemma "point_between_rays_antisymmetric_2")
      (("" (inst - "p" "reverse_segment(s)" "e")
        (("" (ground)
          (("1" (rewrite "between_rays_equiv" :dir rl) nil nil)
           ("2" (rewrite "point_between_rays_equiv" 2 :dir rl)
            (("2" (expand "reverse_segment") (("2" (assert) nil nil))
              nil))
            nil)
           ("3" (expand "reverse_segment") (("3" (propax) nil nil))
            nil)
           ("4" (expand "reverse_segment") (("4" (propax) nil nil))
            nil)
           ("5" (expand "reverse_segment") (("5" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (extend_between_rays_left 0
  (extend_between_rays_left-1 nil 3874129020
   ("" (skeep)
    (("" (expand "between_rays?")
      (("" (replace -1 :dir rl :hide? t)
        (("" (replace -1 :dir rl :hide? t)
          ((""
            (name-replace*
             ("a" "s`p1 - s`p2" "b" "e`p2 - s`p2" "c" "h`p2 - s`p2" "d"
              "u - s`p2")
             :hide? t)
            (("" (ground)
              (("1"
                (case "cross(b, a) > 0 & cross(c, b) > 0 &
  cross(d, c) > 0 & cross(c, a) > 0")
                (("1" (hide -2 -3 -4 -5 -6)
                  (("1" (flatten)
                    (("1" (rewrite "cross_antisymmetric" 1)
                      (("1" (flip-ineq 1)
                        (("1" (move-terms -1 l)
                          (("1" (elim-unary -1)
                            (("1" (assert)
                              (("1"
                                (split-ineq -1)
                                (("1"
                                  (use "parallel_equiv_cross_eq_0")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "parallel?")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (hide -1 -2 -3)
                                            (("1"
                                              (rewrite
                                               "cross_scales_1")
                                              (("1"
                                                (rewrite
                                                 "cross_scales_2")
                                                (("1"
                                                  (case "nzk > 0")
                                                  (("1"
                                                    (div-by -4 "nzk")
                                                    (("1"
                                                      (rewrite
                                                       "cross_antisymmetric"
                                                       -5)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (div-by 2 "nzk" -)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (hide-all-but -4)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (flatten)
                                    (("3"
                                      (replace -1)
                                      (("3"
                                        (hide-all-but -6)
                                        (("3" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "extend_pos_cross_vectors")
                                  (("2"
                                    (inst - "a" "b" "c" "d")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (rewrite "cross_antisymmetric")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind) nil nil))
                nil)
               ("2" (hide 3 4)
                (("2"
                  (case "cross(a, c) > 0 & cross(c, b) > 0 &
       cross(a, d) > 0 & cross(d, c) > 0")
                  (("1" (hide -2 -3 -4 -5)
                    (("1" (flatten)
                      (("1" (lemma "four_vectors_pos_cross")
                        (("1" (inst - "a" "d" "c" "b")
                          (("1" (ground)
                            (("1" (rewrite "cross_antisymmetric")
                              (("1" (assert) nil nil)) nil)
                             ("2" (rewrite "cross_antisymmetric")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (on_segment_not_between_rays 0
  (on_segment_not_between_rays-1 nil 3874129020
   ("" (skeep)
    (("" (ground)
      (("1" (grind)
        (("1" (case-replace "t!1=0")
          (("1" (assert) nil nil)
           ("2" (factor -7 l (7 8 9 10 11 12))
            (("2" (move-terms -7 l (2 3 4 5 6 7))
              (("2" (assert)
                (("2" (factor -7 l)
                  (("2" (invoke (name-replace "E" "%1") (! -6 l))
                    (("2" (cancel-by -7 "E") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (grind)
        (("2" (case-replace "t!1=0")
          (("1" (assert) nil nil)
           ("2" (factor -7 l) (("2" (mult-cases -7) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (on_segment_btw_rays_imp_all_btw 0
  (on_segment_btw_rays_imp_all_btw-1 nil 3874129020
   ("" (skeep)
    (("" (expand "between_rays?")
      (("" (rewrite* "point_on_segment_has_offset")
        (("" (skeep*)
          (("" (replace -3)
            (("" (replace -5)
              (("" (replace -2)
                (("" (assert)
                  (("" (rewrite* "cross_scales_2")
                    (("" (case-replace "d = 0")
                      (("1" (assert) nil nil)
                       ("2" (case-replace "d!1 = 0")
                        (("1" (assert) nil nil)
                         ("2" (ground)
                          (("1" (mult-cases -2)
                            (("1" (mult-cases 1) nil nil)) nil)
                           ("2" (mult-cases -2)
                            (("2" (mult-cases 2) nil nil)) nil)
                           ("3" (mult-cases -1)
                            (("3" (mult-cases 1) nil nil)) nil)
                           ("4" (mult-cases -2)
                            (("4" (mult-cases 1) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (between_rays_rotate_left_TCC1 0
  (between_rays_rotate_left_TCC1-2 nil 3874129020
   ("" (skeep) (("" (grind) nil nil)) nil) nil shostak
   (between_rays_rotate_left subtype "between_rays.vp" "segment_2d"))
  (between_rays_rotate_left_TCC1-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (between_rays_rotate_left subtype "between_rays.vp" "segment_2d")))
 (between_rays_rotate_left 0
  (between_rays_rotate_left-1 nil 3874129020 ("" (grind) nil nil) nil
   shostak))
 (between_rays_rotate_right_TCC1 0
  (between_rays_rotate_right_TCC1-2 nil 3874129020
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (between_rays_rotate_right subtype "between_rays.pv" "segment_2d"))
  (between_rays_rotate_right_TCC1-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (between_rays_rotate_right subtype "between_rays.pv" "segment_2d")))
 (between_rays_rotate_right 0
  (between_rays_rotate_right-1 nil 3874129020 ("" (grind) nil nil) nil
   shostak))
 (point_between_rays_rotate_left_TCC1 0
  (point_between_rays_rotate_left_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (point_between_rays_rotate_left subtype "between_rays.up"
    "segment_2d"))
  (point_between_rays_rotate_left_TCC1-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (point_between_rays_rotate_left subtype "between_rays.up"
    "segment_2d")))
 (point_between_rays_rotate_left 0
  (point_between_rays_rotate_left-1 nil 3874129020 ("" (grind) nil nil)
   nil shostak))
 (point_between_rays_rotate_right_TCC1 0
  (point_between_rays_rotate_right_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (point_between_rays_rotate_right subtype "between_rays.up"
    "segment_2d"))
  (point_between_rays_rotate_right_TCC1-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (point_between_rays_rotate_right subtype "between_rays.up"
    "segment_2d")))
 (point_between_rays_rotate_right 0
  (point_between_rays_rotate_right-1 nil 3874129020
   ("" (grind) nil nil) nil shostak))
 (point_between_rays_with_overlap 0
  (point_between_rays_with_overlap-1 nil 3874129020
   ("" (skeep)
    (("" (rewrite "point_on_segment_has_norm_offset")
      (("" (skeep)
        (("" (replace -2 -4)
          (("" (expand "point_between_rays?")
            (("" (replace -1)
              (("" (assert)
                (("" (rewrite "cross_scales_1")
                  (("" (rewrite "cross_scales_2")
                    (("" (real-props)
                      (("" (rewrite "cross_norm_lt_0")
                        ((""
                          (equate "cross(^(e`p2 - e`p1), p - e`p1) < 0"
                           "cross(e`p2 - e`p1, p - e`p1) < 0")
                          (("1" (ground) nil nil)
                           ("2" (hide -4 3)
                            (("2"
                              (equate
                               "cross(^(e`p2 - e`p1), p - e`p1) < 0"
                               "cross(p - e`p1, ^(e`p2 - e`p1)) > 0")
                              (("1"
                                (rewrite "cross_norm_gt_0")
                                (("1"
                                  (rewrite "cross_antisymmetric")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "cross_antisymmetric")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (between_rays_both_angles_narrow 0
  (between_rays_both_angles_narrow-1 nil 3874129020
   ("" (grind) nil nil) nil shostak))
 (between_rays_both_angles_wide 0
  (between_rays_both_angles_wide-1 nil 3874129020 ("" (grind) nil nil)
   nil shostak))
 (point_between_rays_not_on_rays_TCC1 0
  (point_between_rays_not_on_rays_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (point_between_rays_not_on_rays subtype
    "(vectors_2D.-)(between_rays.e`p2, between_rays.e`p1)"
    "Nz_vector"))
  (point_between_rays_not_on_rays_TCC1-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (point_between_rays_not_on_rays subtype
    "(vectors_2D.-)(between_rays.e`p2, between_rays.e`p1)"
    "Nz_vector")))
 (point_between_rays_not_on_rays 0
  (point_between_rays_not_on_rays-1 nil 3874129020
   ("" (skeep)
    (("" (expand "point_between_rays?")
      (("" (expand "point_on_arb_ray?")
        (("" (ground)
          (("1" (skeep)
            (("1" (replace -1)
              (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
            nil)
           ("2" (skeep)
            (("2" (replace -1)
              (("2" (replace -4 :dir rl)
                (("2" (assert)
                  (("2" (rewrite "cross_scales_2")
                    (("2" (real-props)
                      (("2" (flatten)
                        (("2" (rewrite "cross_norm_gt_0") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skeep)
            (("3" (replace -1) (("3" (grind) nil nil)) nil)) nil)
           ("4" (skeep)
            (("4" (replace -1)
              (("4" (assert)
                (("4" (rewrite "cross_scales_2")
                  (("4" (real-props)
                    (("4" (flatten)
                      (("4" (rewrite "cross_norm_lt_0")
                        (("4" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (skeep)
            (("5" (replace -1) (("5" (grind) nil nil)) nil)) nil)
           ("6" (skeep)
            (("6" (replace -1) (("6" (grind) nil nil)) nil)) nil)
           ("7" (skeep)
            (("7" (replace -1)
              (("7" (assert) (("7" (grind) nil nil)) nil)) nil))
            nil)
           ("8" (skeep)
            (("8" (replace -1) (("8" (grind) nil nil)) nil)) nil)
           ("9" (skeep)
            (("9" (replace -1)
              (("9" (replace -4 :dir rl)
                (("9" (assert)
                  (("9" (rewrite* "cross_scales_1")
                    (("9" (real-props)
                      (("9" (flatten)
                        (("9" (case "cross(e`p2 - s`p1, p - s`p1) > 0")
                          (("1" (assert) nil nil)
                           ("2" (hide-all-but (-3 1))
                            (("2" (rewrite "cross_antisymmetric" -)
                              (("2"
                                (case
                                 "cross(p - s`p1, ^(e`p2 - s`p1)) < 0")
                                (("1"
                                  (rewrite "cross_norm_lt_0")
                                  (("1"
                                    (rewrite "cross_antisymmetric" -1)
                                    (("1" (real-props) nil nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (on_ray_also_point_between_rays 0
  (on_ray_also_point_between_rays-1 nil 3874129020
   ("" (skeep)
    (("" (expand "point_on_arb_ray?")
      (("" (expand "point_between_rays?")
        (("" (skeep)
          (("" (case-replace "d=0")
            (("1" (assert) nil nil)
             ("2" (replace -4)
              (("2" (replace -2 :dir rl)
                (("2" (assert)
                  (("2" (expand "^")
                    (("2" (real-props)
                      (("2" (rewrite* "cross_scales_1")
                        (("2" (real-props) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (point_between_imp_pos_crosses 0
  (point_between_imp_pos_crosses-1 nil 3874129020 ("" (grind) nil nil)
   nil shostak))
 (point_between_imp_pos_crosses_2 0
  (point_between_imp_pos_crosses_2-1 nil 3874129020
   ("" (grind) nil nil) nil shostak))
 (point_btw_rays_imp_opp_side_crossing_TCC1 0
  (point_btw_rays_imp_opp_side_crossing_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (point_btw_rays_imp_opp_side_crossing subtype "between_rays.c"
    "{p: vectors_cross_2d.point_2d | p /= between_rays.a}"))
  (point_btw_rays_imp_opp_side_crossing_TCC1-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (point_btw_rays_imp_opp_side_crossing subtype "between_rays.c"
    "{p: vectors_cross_2d.point_2d | p /= between_rays.a}")))
 (point_btw_rays_imp_opp_side_crossing_TCC2 0
  (point_btw_rays_imp_opp_side_crossing_TCC2-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (point_btw_rays_imp_opp_side_crossing subtype "between_rays.b"
    "{p: vectors_cross_2d.point_2d | p /= between_rays.a}"))
  (point_btw_rays_imp_opp_side_crossing_TCC2-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (point_btw_rays_imp_opp_side_crossing subtype "between_rays.b"
    "{p: vectors_cross_2d.point_2d | p /= between_rays.a}")))
 (point_btw_rays_imp_opp_side_crossing_TCC3 0
  (point_btw_rays_imp_opp_side_crossing_TCC3-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (point_btw_rays_imp_opp_side_crossing subtype "between_rays.c"
    "{p: vectors_cross_2d.point_2d | p /= between_rays.b}"))
  (point_btw_rays_imp_opp_side_crossing_TCC3-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (point_btw_rays_imp_opp_side_crossing subtype "between_rays.c"
    "{p: vectors_cross_2d.point_2d | p /= between_rays.b}")))
 (point_btw_rays_imp_opp_side_crossing_TCC4 0
  (point_btw_rays_imp_opp_side_crossing_TCC4-2 nil 3874129020
   ("" (skeep*)
    (("" (move-terms -4 l 2)
      (("" (assert)
        (("" (replace -4)
          (("" (expand "point_between_rays?")
            (("" (flatten)
              (("" (hide-all-but -3) (("" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (point_btw_rays_imp_opp_side_crossing subtype
    "(vectors_2D.-)(between_rays.p, between_rays.a)" "Nz_vector"))
  (point_btw_rays_imp_opp_side_crossing_TCC4-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (point_btw_rays_imp_opp_side_crossing subtype
    "(vectors_2D.-)(between_rays.p, between_rays.a)" "Nz_vector")))
 (point_btw_rays_imp_opp_side_crossing 0
  (point_btw_rays_imp_opp_side_crossing-1 nil 3874129020
   ("" (skeep)
    (("" (expand "point_between_rays?")
      (("" (assert)
        (("" (flatten)
          ((""
            (name-replace "d"
             "(cross(a, p) - cross(b, p - a)) / cross(c - b, p - a)")
            (("1" (name-replace "q" "b + d * (c - b)")
              (("1" (name-replace "k" "norm(q - a)")
                (("1" (inst + "q")
                  (("1"
                    (case "point_on_segment?(q, (# p1 := b, p2 := c #))")
                    (("1" (assert)
                      (("1" (expand "point_on_arb_ray?")
                        (("1" (inst + "k")
                          (("1" (expand "^")
                            (("1" (replace -2 :dir rl :hide? t)
                              (("1"
                                (real-props)
                                (("1"
                                  (name-replace
                                   "n"
                                   "norm(q - a) / norm(p - a)")
                                  (("1"
                                    (move-terms 3 r 1)
                                    (("1"
                                      (case "cross(q - a, p - a) = 0")
                                      (("1"
                                        (rewrite
                                         "parallel_equiv_cross_eq_0"
                                         :dir
                                         rl)
                                        (("1"
                                          (expand "parallel?")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (case "nzk > 0")
                                              (("1"
                                                (lemma
                                                 "dir_parallel_imp_scaled_by_norms_eq")
                                                (("1"
                                                  (inst
                                                   -
                                                   "q - a"
                                                   "p - a")
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (expand "n")
                                                      (("1"
                                                        (cross-mult 3)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "dir_parallel?")
                                                      (("2"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (div-by -1 "nzk")
                                                (("2"
                                                  (rewrite
                                                   "point_on_segment_has_offset")
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (replace
                                                       -1
                                                       :dir
                                                       rl
                                                       :hide?
                                                       t)
                                                      (("2"
                                                        (rewrite
                                                         "cross_scales_2"
                                                         -7)
                                                        (("2"
                                                          (real-props)
                                                          (("2"
                                                            (replace
                                                             -1
                                                             -7)
                                                            (("2"
                                                              (equate
                                                               "b + d!1 * (c - b) - a"
                                                               "(b - a) + d!1 * (c - b)")
                                                              (("1"
                                                                (rewrite
                                                                 "cross_distrib_add_2"
                                                                 -7)
                                                                (("1"
                                                                  (rewrite
                                                                   "cross_self_zero")
                                                                  (("1"
                                                                    (rewrite
                                                                     "cross_scales_2"
                                                                     -7)
                                                                    (("1"
                                                                      (rewrite
                                                                       "cross_diff_1"
                                                                       -7)
                                                                      (("1"
                                                                        (lemma
                                                                         "triangle_vertices_cross_neg")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "b"
                                                                           "a"
                                                                           "c")
                                                                          (("1"
                                                                            (ground)
                                                                            (("1"
                                                                              (real-props)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-1 -7))
                                          (("2" (grind) nil nil))
                                          nil)
                                         ("3"
                                          (replace -1)
                                          (("3"
                                            (rewrite
                                             "point_on_segment_has_offset")
                                            (("3"
                                              (skeep)
                                              (("3"
                                                (replace -3 -7)
                                                (("3"
                                                  (hide-all-but -7)
                                                  (("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 4)
                      (("2" (rewrite "point_on_segment_has_offset")
                        (("2" (inst + "d")
                          (("1" (assert)
                            (("1" (replace -3 :dir rl :hide? t)
                              (("1"
                                (cross-mult 1)
                                (("1"
                                  (ground)
                                  (("1"
                                    (hide -3)
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (hide -2)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replace -3 :dir rl :hide? t)
                            (("2" (cross-mult 1)
                              (("2"
                                (hide -2)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (flatten)
                      (("3" (hide-all-but (-1 -5))
                        (("3" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -4 4) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (on_segment_or_between_rays_TCC1 0
  (on_segment_or_between_rays_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (on_segment_or_between_rays subtype "between_rays.e`p1"
    "{p: vectors_cross_2d.point_2d | p /= between_rays.u}"))
  (on_segment_or_between_rays_TCC1-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (on_segment_or_between_rays subtype "between_rays.e`p1"
    "{p: vectors_cross_2d.point_2d | p /= between_rays.u}")))
 (on_segment_or_between_rays_TCC2 0
  (on_segment_or_between_rays_TCC2-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (on_segment_or_between_rays subtype "between_rays.e`p2"
    "{p: vectors_cross_2d.point_2d | p /= between_rays.u}"))
  (on_segment_or_between_rays_TCC2-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (on_segment_or_between_rays subtype "between_rays.e`p2"
    "{p: vectors_cross_2d.point_2d | p /= between_rays.u}")))
 (on_segment_or_between_rays 0
  (on_segment_or_between_rays-1 nil 3874129020
   ("" (skeep)
    (("" (use "point_between_rays_antisymmetric_2")
      (("1" (assert)
        (("1" (hide 5)
          (("1" (ground)
            (("1" (use "point_btw_rays_imp_opp_side_crossing")
              (("1" (ground)
                (("1" (skeep)
                  (("1" (inst + "q")
                    (("1" (assert)
                      (("1" (equate "(# p1 := e`p1, p2 := e`p2 #)" "e")
                        (("1" (apply-extensionality :hide? t) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (replace -1) (("2" (assert) nil nil)) nil)
                 ("3" (replace -1) (("3" (assert) nil nil)) nil)
                 ("4" (rewrite "cross_antisymmetric" 1)
                  (("4" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (case "e`p1 = u")
              (("1" (expand "point_on_segment?")
                (("1" (inst + "0") (("1" (assert) nil nil)) nil)) nil)
               ("2" (expand "point_on_arb_ray?")
                (("2" (skeep)
                  (("2" (replace -1)
                    (("2" (assert)
                      (("2" (rewrite "normalize_scal")
                        (("1" (expand "sign")
                          (("1" (rewrite "normalize_normalize")
                            (("1" (inst + "e`p1")
                              (("1"
                                (assert)
                                (("1"
                                  (inst + "norm(e`p1 - u)")
                                  (("1"
                                    (expand "^" 5)
                                    (("1"
                                      (real-props)
                                      (("1"
                                        (hide-all-but 5)
                                        (("1"
                                          (grind-with-ext)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (replace -1) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (case "e`p2 = u")
              (("1" (expand "point_on_segment?")
                (("1" (inst + "1") (("1" (assert) nil nil)) nil)) nil)
               ("2" (expand "point_on_arb_ray?")
                (("2" (skeep)
                  (("2" (replace -1)
                    (("2" (assert)
                      (("2" (rewrite "normalize_scal")
                        (("1" (expand "sign")
                          (("1" (rewrite "normalize_normalize")
                            (("1" (inst + "e`p2")
                              (("1"
                                (assert)
                                (("1"
                                  (inst + "norm(e`p2 - u)")
                                  (("1"
                                    (expand "^" 5)
                                    (("1"
                                      (real-props)
                                      (("1"
                                        (hide-all-but 5)
                                        (("1"
                                          (grind-with-ext)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (replace -1) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (expand "point_on_arb_ray?")
              (("4" (skeep)
                (("4" (replace -1)
                  (("4" (assert)
                    (("4" (rewrite "cross_scales_1")
                      (("4" (mult-cases 3)
                        (("4" (expand "^" 4)
                          (("4" (rewrite "cross_scales_1")
                            (("4" (rewrite "cross_self_zero")
                              (("4" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "point_on_segment?")
        (("2" (inst + "1") (("2" (ground) nil nil)) nil)) nil)
       ("3" (expand "point_on_segment?")
        (("3" (inst + "0") (("3" (ground) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak))
 (interpolate_point_between_rays_TCC1 0
  (interpolate_point_between_rays_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (interpolate_point_between_rays subtype "between_rays.p"
    "{p: vectors_cross_2d.point_2d | p /= between_rays.h`p1}"))
  (interpolate_point_between_rays_TCC1-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (interpolate_point_between_rays subtype "between_rays.p"
    "{p: vectors_cross_2d.point_2d | p /= between_rays.h`p1}")))
 (interpolate_point_between_rays 0
  (interpolate_point_between_rays-1 nil 3874129020
   ("" (skeep)
    (("" (expand "point_between_rays?")
      (("" (ground)
        (("1" (replace -6 :dir rl)
          (("1" (rewrite* "cross_lt_0_swap_gt_0")
            (("1" (case "cross(p - s`p1, e`p2 - s`p1) = 0")
              (("1" (rewrite "cross_eq_0_iff_point_on_line")
                (("1" (skeep)
                  (("1" (replace -1)
                    (("1" (assert)
                      (("1" (rewrite* "cross_scales_2")
                        (("1" (real-props) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "extend_pos_cross_vectors_2")
                (("2"
                  (inst - "p-s`p1" "s`p2-s`p1" "h`p2-s`p1" "e`p2-s`p1")
                  (("2" (assert)
                    (("2" (rewrite "cross_gt_0_swap_lt_0" 1) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil) ("3" (grind) nil nil)
         ("4" (grind) nil nil)
         ("5" (replace -6 :dir rl)
          (("5" (rewrite* "cross_lt_0_swap_gt_0" -)
            (("5" (rewrite* "cross_lt_0_swap_gt_0" 2)
              (("5" (case "cross(h`p2 - s`p1, e`p2 - s`p1) = 0")
                (("1" (use "cross_eq_0_iff_point_on_line")
                  (("1" (split -1 :depth 1)
                    (("1" (assert)
                      (("1" (skeep)
                        (("1" (replace -1)
                          (("1" (assert)
                            (("1" (rewrite "cross_scales_1" 1)
                              (("1"
                                (rewrite "cross_scales_1" -4)
                                (("1"
                                  (real-props)
                                  (("1"
                                    (split -4)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (rewrite "cross_scales_1" 3)
                                        (("1" (real-props) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (rewrite "cross_antisymmetric")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-2 1)) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "extend_pos_cross_vectors")
                  (("2"
                    (inst - "e`p2-s`p1" "p-s`p1" "s`p2-s`p1"
                     "h`p2-s`p1")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("6" (grind) nil nil) ("7" (grind) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (interpolate_point_between_rays_rev 0
  (interpolate_point_between_rays_rev-1 nil 3874129020
   ("" (skeep)
    (("" (lemma "interpolate_point_between_rays")
      (("" (inst - "h`p2" "e" "s" "(# p1 := h`p1, p2 := p #)")
        (("1" (equate "(# p1 := h`p1, p2 := h`p2 #)" "h")
          (("1" (ground)
            (("1" (use "point_between_rays_rotate_left")
              (("1" (ground)
                (("1" (equate "(# p1 := e`p1, p2 := h`p2 #)" "h")
                  (("1" (apply-extensionality :hide? t) nil nil)) nil))
                nil))
              nil)
             ("2" (hide -4 3)
              (("2" (use "point_between_rays_rotate_left")
                (("2" (ground) nil nil)) nil))
              nil))
            nil)
           ("2" (apply-extensionality :hide? t) nil nil))
          nil)
         ("2" (ground) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (interpolate_point_between_rays_2_TCC1 0
  (interpolate_point_between_rays_2_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (interpolate_point_between_rays_2 subtype
    "(vectors_2D.-)(between_rays.e`p2, between_rays.e`p1)"
    "Nz_vector"))
  (interpolate_point_between_rays_2_TCC1-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (interpolate_point_between_rays_2 subtype
    "(vectors_2D.-)(between_rays.e`p2, between_rays.e`p1)"
    "Nz_vector")))
 (interpolate_point_between_rays_2 0
  (interpolate_point_between_rays_2-1 nil 3874129020
   ("" (skeep)
    (("" (case "point_between_rays?(e, s)(p)")
      (("1" (hide 1 2)
        (("1" (expand "point_between_rays?")
          (("1" (ground)
            (("1" (rewrite* "cross_lt_0_swap_gt_0")
              (("1" (case "cross(p - e`p1, h`p2 - e`p1) = 0")
                (("1" (rewrite "cross_eq_0_iff_point_on_line")
                  (("1" (skeep)
                    (("1" (replace -1)
                      (("1" (replace -6 :dir rl)
                        (("1" (assert)
                          (("1" (rewrite* "cross_scales_2")
                            (("1" (real-props) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (ground)
                    (("2" (replace -1)
                      (("2" (hide-all-but -5) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "extend_pos_cross_vectors")
                  (("2"
                    (inst - "p - s`p1" "e`p2 - s`p1" "s`p2 - s`p1"
                     "h`p2 - s`p1")
                    (("2" (assert)
                      (("2" (rewrite "cross_gt_0_swap_lt_0") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite* "cross_lt_0_swap_gt_0")
              (("2" (case "cross(e`p2 - e`p1, p - e`p1) = 0")
                (("1" (rewrite "cross_eq_0_iff_point_on_line")
                  (("1" (skeep)
                    (("1" (replace -1)
                      (("1" (assert)
                        (("1" (rewrite* "cross_scales_2")
                          (("1" (real-props) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (ground)
                    (("2" (replace -1)
                      (("2" (hide-all-but -5) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "extend_pos_cross_vectors_2")
                  (("2"
                    (inst - "e`p2 - s`p1" "s`p2 - s`p1" "h`p2 - s`p1"
                     "p - s`p1")
                    (("2" (assert)
                      (("2" (rewrite "cross_gt_0_swap_lt_0" 1) nil
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "point_between_rays_antisymmetric_2")
        (("2" (inst - "p" "s" "e")
          (("2" (lemma "point_between_rays_not_on_rays")
            (("2" (inst - "p" "s" "h")
              (("2" (ground)
                (("2" (hide-all-but (- 7))
                  (("2" (expand "point_on_arb_ray?")
                    (("2" (skeep)
                      (("2" (expand "point_between_rays?")
                        (("2" (replace -1)
                          (("2" (replace -2)
                            (("2" (assert)
                              (("2"
                                (rewrite* "cross_scales_1")
                                (("2"
                                  (real-props)
                                  (("2"
                                    (equate
                                     "cross(^(e`p2 - e`p1), h`p2 - e`p1) < 0"
                                     "cross(h`p2 - e`p1, e`p2 - e`p1) > 0")
                                    (("1"
                                      (equate
                                       "cross(^(e`p2 - e`p1), p - e`p1) > 0"
                                       "cross(p - e`p1, e`p2 - e`p1) < 0")
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (rewrite
                                           "cross_gt_0_swap_lt_0")
                                          (("2"
                                            (rewrite "cross_norm_lt_0")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (rewrite
                                         "cross_lt_0_swap_gt_0")
                                        (("2"
                                          (rewrite "cross_norm_gt_0")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (interpolate_point_between_rays_3 0
  (interpolate_point_between_rays_3-1 nil 3874129020
   ("" (skeep)
    (("" (expand "point_between_rays?")
      (("" (ground)
        (("1" (grind) nil nil) ("2" (grind) nil nil)
         ("3" (grind) nil nil)
         ("4" (replace -7 :dir rl)
          (("4" (hide -5 3)
            (("4" (rewrite* "cross_lt_0_swap_gt_0")
              (("4" (case "cross(s`p2 - s`p1, h`p2 - s`p1) = 0")
                (("1" (rewrite "cross_eq_0_iff_point_on_line")
                  (("1" (skeep)
                    (("1" (replace -1)
                      (("1" (assert)
                        (("1" (rewrite* "cross_scales_1")
                          (("1" (rewrite* "cross_scales_2")
                            (("1" (real-props)
                              (("1"
                                (case "d>0")
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite "cross_antisymmetric" -4)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (name-replace*
                   ("a" "s`p2 - s`p1" "b" "e`p2 - s`p1" "c"
                    "h`p2 - s`p1" "d" "p - s`p1"))
                  (("2" (lemma "extend_pos_cross_vectors")
                    (("2" (inst - "a" "b" "d" "c")
                      (("2" (assert)
                        (("2" (rewrite "cross_antisymmetric" 1)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("5" (grind) nil nil)
         ("6" (replace -6 :dir rl)
          (("6" (hide 3)
            (("6" (rewrite* "cross_lt_0_swap_gt_0")
              (("6" (case "cross(e`p2 - s`p1, s`p2 - s`p1) = 0")
                (("1" (use "cross_eq_0_iff_point_on_line")
                  (("1" (assert)
                    (("1" (skeep)
                      (("1" (replace -1)
                        (("1" (assert)
                          (("1" (rewrite* "cross_scales_1")
                            (("1" (rewrite* "cross_scales_2")
                              (("1"
                                (real-props)
                                (("1"
                                  (case "d>0")
                                  (("1"
                                    (rewrite "cross_antisymmetric" -6)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (name-replace*
                   ("a" "s`p2 - s`p1" "b" "e`p2 - s`p1" "c"
                    "h`p2 - s`p1" "d" "p - s`p1"))
                  (("2" (lemma "extend_pos_cross_vectors_2")
                    (("2" (inst - "b" "d" "c" "a")
                      (("2" (assert)
                        (("2" (rewrite "cross_antisymmetric" 1)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (interpolate_point_between_rays_3_rev 0
  (interpolate_point_between_rays_3_rev-1 nil 3874129020
   ("" (skeep)
    (("" (expand "point_between_rays?")
      (("" (replace -1 :dir rl)
        (("" (ground)
          (("1" (hide -5 3)
            (("1" (rewrite* "cross_lt_0_swap_gt_0")
              (("1" (case "cross(h`p2 - s`p1, e`p2 - s`p1) = 0")
                (("1" (rewrite "cross_eq_0_iff_point_on_line")
                  (("1" (skeep)
                    (("1" (replace -1)
                      (("1" (assert)
                        (("1" (rewrite* "cross_scales_1")
                          (("1" (rewrite* "cross_scales_2")
                            (("1" (real-props)
                              (("1"
                                (flatten)
                                (("1"
                                  (rewrite "cross_antisymmetric" -3)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (name-replace*
                   ("a" "s`p2 - s`p1" "b" "e`p2 - s`p1" "c"
                    "h`p2 - s`p1" "d" "p - s`p1"))
                  (("2" (lemma "extend_pos_cross_vectors_2")
                    (("2" (inst - "c" "d" "a" "b")
                      (("2" (assert)
                        (("2" (rewrite "cross_antisymmetric" 1)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 3)
            (("2" (rewrite* "cross_lt_0_swap_gt_0")
              (("2" (case "cross(e`p2 - s`p1, s`p2 - s`p1) = 0")
                (("1" (use "cross_eq_0_iff_point_on_line")
                  (("1" (assert)
                    (("1" (skeep)
                      (("1" (replace -1)
                        (("1" (assert)
                          (("1" (rewrite* "cross_scales_1")
                            (("1" (rewrite* "cross_scales_2")
                              (("1"
                                (real-props)
                                (("1"
                                  (case "d > 0")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (rewrite
                                       "cross_antisymmetric"
                                       -6)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (rewrite
                                         "cross_antisymmetric"
                                         +)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (name-replace*
                   ("a" "s`p2 - s`p1" "b" "e`p2 - s`p1" "c"
                    "h`p2 - s`p1" "d" "p - s`p1"))
                  (("2" (lemma "extend_pos_cross_vectors")
                    (("2" (inst - "b" "c" "d" "a")
                      (("2" (assert)
                        (("2" (rewrite "cross_antisymmetric" 1)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (interpolate_point_between_rays_4_TCC1 0
  (interpolate_point_between_rays_4_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (interpolate_point_between_rays_4 subtype "between_rays.p"
    "{p: vectors_cross_2d.point_2d | p /= between_rays.s`p1}"))
  (interpolate_point_between_rays_4_TCC1-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (interpolate_point_between_rays_4 subtype "between_rays.p"
    "{p: vectors_cross_2d.point_2d | p /= between_rays.s`p1}")))
 (interpolate_point_between_rays_4 0
  (interpolate_point_between_rays_4-1 nil 3874129020
   ("" (skeep)
    (("" (expand "point_between_rays?")
      (("" (replace -1)
        (("" (rewrite* "cross_lt_0_swap_gt_0")
          (("" (ground)
            (("1" (grind) nil nil) ("2" (grind) nil nil)
             ("3" (grind) nil nil) ("4" (grind) nil nil)
             ("5" (grind) nil nil)
             ("6" (name-replace* ("a" "s`p2" "b" "e`p2" "c" "e`p1"))
              (("6" (lemma "four_vectors_pos_cross_2")
                (("6" (inst - "b-c" "a-c" "p-c" "q-c")
                  (("6" (assert) nil nil)) nil))
                nil))
              nil)
             ("7" (name-replace* ("a" "s`p2" "b" "e`p2" "c" "e`p1"))
              (("7" (lemma "four_vectors_pos_cross")
                (("7" (inst - "a-c" "p-c" "b-c" "q-c")
                  (("7" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (interpolate_point_between_rays_5 0
  (interpolate_point_between_rays_5-1 nil 3874129020
   ("" (skeep)
    (("" (expand "point_between_rays?")
      (("" (replace -1 :dir rl :hide? t)
        ((""
          (name-replace* ("z" "s`p1" "a" "s`p2" "c" "g`p2" "d" "h`p2"))
          (("" (ground)
            (("1" (rewrite* "cross_lt_0_swap_gt_0")
              (("1" (lemma "four_vectors_pos_cross_2")
                (("1" (inst - "c - z" "p - z" "d - z" "a - z")
                  (("1" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (rewrite* "cross_lt_0_swap_gt_0")
              (("2" (lemma "four_vectors_pos_cross")
                (("2" (inst - "p - z" "d - z" "c - z" "a - z")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (interpolate_point_between_rays_6 0
  (interpolate_point_between_rays_6-1 nil 3874129020
   ("" (skeep)
    (("" (expand "point_between_rays?")
      (("" (replace -1 :dir rl :hide? t)
        (("" (replace -1 :dir rl :hide? t)
          ((""
            (name-replace*
             ("z" "p - s`p1" "a" "s`p2 - s`p1" "b" "e`p2 - s`p1" "c"
              "g`p2 - s`p1" "d" "h`p2 - s`p1"))
            (("" (ground)
              (("1" (rewrite* "cross_lt_0_swap_gt_0")
                (("1" (lemma "extend_pos_cross_vectors")
                  (("1" (inst - "z" "c" "a" "b")
                    (("1" (assert)
                      (("1" (lemma "extend_pos_cross_vectors")
                        (("1" (inst - "c" "a" "b" "d")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (rewrite* "cross_lt_0_swap_gt_0")
                (("2" (lemma "four_vectors_pos_cross")
                  (("2" (inst - "z" "d" "b" "a")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("3" (rewrite* "cross_lt_0_swap_gt_0")
                (("3" (lemma "extend_pos_cross_vectors_2")
                  (("3" (inst - "a" "b" "d" "z")
                    (("3" (assert) nil nil)) nil))
                  nil))
                nil)
               ("4" (rewrite* "cross_lt_0_swap_gt_0")
                (("4" (lemma "extend_pos_cross_vectors_2")
                  (("4" (inst - "a" "b" "d" "z")
                    (("4" (assert) nil nil)) nil))
                  nil))
                nil)
               ("5" (rewrite* "cross_lt_0_swap_gt_0")
                (("5" (lemma "four_vectors_pos_cross")
                  (("5" (inst - "z" "d" "b" "a")
                    (("5" (assert) nil nil)) nil))
                  nil))
                nil)
               ("6" (rewrite* "cross_lt_0_swap_gt_0")
                (("6" (lemma "extend_pos_cross_vectors_2")
                  (("6" (inst - "a" "b" "d" "z")
                    (("6" (assert) nil nil)) nil))
                  nil))
                nil)
               ("7" (rewrite* "cross_lt_0_swap_gt_0")
                (("7" (lemma "extend_pos_cross_vectors_2")
                  (("7" (inst - "a" "b" "d" "z")
                    (("7" (assert) nil nil)) nil))
                  nil))
                nil)
               ("8" (rewrite* "cross_lt_0_swap_gt_0")
                (("8" (lemma "four_vectors_pos_cross")
                  (("8" (inst - "z" "d" "b" "a")
                    (("8" (assert) nil nil)) nil))
                  nil))
                nil)
               ("9" (rewrite* "cross_lt_0_swap_gt_0")
                (("9" (lemma "extend_pos_cross_vectors_2")
                  (("9" (inst - "a" "b" "d" "z")
                    (("9" (assert) nil nil)) nil))
                  nil))
                nil)
               ("10" (rewrite* "cross_lt_0_swap_gt_0")
                (("10" (lemma "extend_pos_cross_vectors_2")
                  (("10" (inst - "a" "b" "d" "z")
                    (("10" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (interpolate_point_between_rays_7 0
  (interpolate_point_between_rays_7-1 nil 3874129020
   ("" (skeep)
    (("" (lemma "interpolate_point_between_rays_6")
      (("" (inst - "p" "s" "e" "g" "h")
        (("" (assert)
          (("" (use "point_between_rays_antisymmetric_2")
            (("" (assert)
              (("" (lemma "point_between_rays_not_on_rays")
                (("" (inst-cp - "p" "s" "e")
                  (("" (ground)
                    (("1" (inst - "p" "g" "h") (("1" (ground) nil nil))
                      nil)
                     ("2" (expand "point_on_arb_ray?")
                      (("2" (skeep)
                        (("2" (hide-all-but (-1 -5 -6 6))
                          (("2" (case-replace "d=0")
                            (("1" (grind) nil nil)
                             ("2" (expand "point_between_rays?")
                              (("2"
                                (replace -1)
                                (("2"
                                  (replace -2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (expand "^")
                                        (("2"
                                          (real-props)
                                          (("2"
                                            (rewrite* "cross_scales_1")
                                            (("2"
                                              (rewrite*
                                               "cross_scales_2")
                                              (("2"
                                                (real-props)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (interpolate_point_between_rays_8_TCC1 0
  (interpolate_point_between_rays_8_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (interpolate_point_between_rays_8 subtype "between_rays.p"
    "{p: vectors_cross_2d.point_2d | p /= between_rays.h`p1}"))
  (interpolate_point_between_rays_8_TCC1-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (interpolate_point_between_rays_8 subtype "between_rays.p"
    "{p: vectors_cross_2d.point_2d | p /= between_rays.h`p1}")))
 (interpolate_point_between_rays_8 0
  (interpolate_point_between_rays_8-1 nil 3874129020
   ("" (skeep)
    (("" (expand "point_between_rays?")
      (("" (replace -1 :dir rl)
        (("" (replace -3 :dir rl)
          (("" (hide -1 -2 -3)
            ((""
              (name-replace*
               ("a" "s`p2" "b" "g`p2" "c" "e`p2" "d" "h`p2" "f"
                "s`p1"))
              (("" (rewrite* "cross_lt_0_swap_gt_0")
                (("" (ground)
                  (("1" (case "cross(b - f, d - f) = 0")
                    (("1" (use "cross_eq_0_iff_point_on_line")
                      (("1" (assert)
                        (("1" (ground)
                          (("1" (skeep)
                            (("1" (replace -1)
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite* "cross_scales_1")
                                  (("1"
                                    (rewrite* "cross_scales_2")
                                    (("1"
                                      (case-replace "d_1 = 0")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (case "d_1 > 0")
                                        (("1"
                                          (real-props)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (real-props)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replace -1)
                            (("2" (assert)
                              (("2"
                                (expand "cross" -3)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (replace -1)
                            (("3" (assert)
                              (("3"
                                (expand "cross" -4)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "cross_antisymmetric" 3)
                      (("2" (ground) nil nil)) nil))
                    nil)
                   ("2" (hide -3 -7 -9)
                    (("2" (flip-ineq 1)
                      (("2" (split-ineq -1)
                        (("1" (use "cross_eq_0_iff_point_on_line")
                          (("1" (ground)
                            (("1" (skeep)
                              (("1"
                                (replace -2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite* "cross_scales_1")
                                    (("1"
                                      (rewrite* "cross_scales_2")
                                      (("1"
                                        (case "d_1 = 0")
                                        (("1" (ground) nil nil)
                                         ("2"
                                          (case "d_1 > 0")
                                          (("1"
                                            (real-props)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2" (real-props) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (rewrite "cross_antisymmetric" -1)
                          (("2" (move-terms -1 l)
                            (("2" (elim-unary -1)
                              (("2"
                                (assert)
                                (("2"
                                  (lemma "four_vectors_pos_cross_2")
                                  (("2"
                                    (inst
                                     -
                                     "a - f"
                                     "c - f"
                                     "b - f"
                                     "d - f")
                                    (("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (rewrite "cross_antisymmetric" 1)
                    (("3" (case "cross(b - f, d - f) = 0")
                      (("1" (use "cross_eq_0_iff_point_on_line")
                        (("1" (assert)
                          (("1" (ground)
                            (("1" (skeep)
                              (("1"
                                (replace -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite* "cross_scales_1")
                                    (("1"
                                      (rewrite* "cross_scales_2")
                                      (("1"
                                        (case "d_1 = 0")
                                        (("1" (ground) nil nil)
                                         ("2"
                                          (case "d_1 > 0")
                                          (("1"
                                            (real-props)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (real-props)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -1)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "cross" -7)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (replace -1)
                              (("3"
                                (assert)
                                (("3"
                                  (expand "cross" -3)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (ground) nil nil))
                      nil))
                    nil)
                   ("4" (rewrite "cross_antisymmetric" 1)
                    (("4" (case "cross(b - f, d - f) = 0")
                      (("1" (use "cross_eq_0_iff_point_on_line")
                        (("1" (assert)
                          (("1" (ground)
                            (("1" (skeep)
                              (("1"
                                (replace -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite* "cross_scales_1")
                                    (("1"
                                      (rewrite* "cross_scales_2")
                                      (("1"
                                        (case "d_1 = 0")
                                        (("1" (ground) nil nil)
                                         ("2"
                                          (case "d_1 > 0")
                                          (("1"
                                            (real-props)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (real-props)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -1)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "cross" -7)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (replace -1)
                              (("3"
                                (assert)
                                (("3"
                                  (expand "cross" -3)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (ground) nil nil))
                      nil))
                    nil)
                   ("5" (hide -6 -8 5)
                    (("5" (lemma "four_vectors_pos_cross_2")
                      (("5" (inst - "a - f" "d - f" "b - f" "p - f")
                        (("5" (ground) nil nil)) nil))
                      nil))
                    nil)
                   ("6" (rewrite "cross_antisymmetric" 1)
                    (("6" (case "cross(b - f, d - f) = 0")
                      (("1" (use "cross_eq_0_iff_point_on_line")
                        (("1" (assert)
                          (("1" (ground)
                            (("1" (skeep)
                              (("1"
                                (replace -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite* "cross_scales_1")
                                    (("1"
                                      (case "d_1 = 0")
                                      (("1" (ground) nil nil)
                                       ("2"
                                        (case "d_1 > 0")
                                        (("1"
                                          (real-props)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (real-props)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -1)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "cross" -6)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (replace -1)
                              (("3"
                                (assert)
                                (("3"
                                  (expand "cross" -4)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (ground) nil nil))
                      nil))
                    nil)
                   ("7" (rewrite "cross_antisymmetric" 1)
                    (("7" (case "cross(b - f, d - f) = 0")
                      (("1" (use "cross_eq_0_iff_point_on_line")
                        (("1" (assert)
                          (("1" (ground)
                            (("1" (skeep)
                              (("1"
                                (replace -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite* "cross_scales_1")
                                    (("1"
                                      (rewrite* "cross_scales_2")
                                      (("1"
                                        (case "d_1 = 0")
                                        (("1" (ground) nil nil)
                                         ("2"
                                          (case "d_1 > 0")
                                          (("1"
                                            (real-props)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (real-props)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -1)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "cross" -6)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (replace -1)
                              (("3"
                                (assert)
                                (("3"
                                  (expand "cross" -4)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (ground) nil nil))
                      nil))
                    nil)
                   ("8" (hide -3 -7 -9)
                    (("8" (lemma "four_vectors_pos_cross_2")
                      (("8" (inst - "a - f" "p - f" "b - f" "c - f")
                        (("8" (ground)
                          (("1" (flip-ineq 3)
                            (("1" (split-ineq -1)
                              (("1"
                                (use "cross_eq_0_iff_point_on_line")
                                (("1"
                                  (ground)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (rewrite* "cross_scales_1")
                                          (("1"
                                            (rewrite* "cross_scales_2")
                                            (("1"
                                              (case "d!1 = 0")
                                              (("1" (ground) nil nil)
                                               ("2"
                                                (case "d!1 > 0")
                                                (("1"
                                                  (real-props)
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (real-props)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil)
                                   ("3" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "cross_antisymmetric" -1)
                                (("2"
                                  (lemma "four_vectors_pos_cross")
                                  (("2"
                                    (inst
                                     -
                                     "d - f"
                                     "b - f"
                                     "c - f"
                                     "p - f")
                                    (("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "four_vectors_pos_cross")
                            (("2"
                              (inst - "d - f" "b - f" "c - f" "p - f")
                              (("2" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("9" (rewrite "cross_antisymmetric" 2)
                    (("9" (case "cross(b - f, d - f) = 0")
                      (("1" (use "cross_eq_0_iff_point_on_line")
                        (("1" (assert)
                          (("1" (ground)
                            (("1" (skeep)
                              (("1"
                                (replace -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite* "cross_scales_1")
                                    (("1"
                                      (rewrite* "cross_scales_2")
                                      (("1"
                                        (case "d_1 = 0")
                                        (("1" (ground) nil nil)
                                         ("2"
                                          (case "d_1 > 0")
                                          (("1" (real-props) nil nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (real-props) (("2" (grind) nil nil))
                              nil)
                             ("3" (replace -1)
                              (("3"
                                (assert)
                                (("3"
                                  (expand "cross" -6)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil)
                   ("10" (hide -3 -7 -9)
                    (("10" (lemma "four_vectors_pos_cross_2")
                      (("10" (inst - "a - f" "c - f" "b - f" "d - f")
                        (("10" (ground) nil nil)) nil))
                      nil))
                    nil)
                   ("11" (rewrite "cross_antisymmetric" 1)
                    (("11" (case "cross(b - f, d - f) = 0")
                      (("1" (use "cross_eq_0_iff_point_on_line")
                        (("1" (ground)
                          (("1" (skeep)
                            (("1" (replace -2)
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite* "cross_scales_1")
                                  (("1"
                                    (rewrite* "cross_scales_2")
                                    (("1"
                                      (case "d_1 = 0")
                                      (("1" (ground) nil nil)
                                       ("2"
                                        (case "d_1 > 0")
                                        (("1"
                                          (real-props)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (real-props)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil) ("3" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil)
                   ("12" (rewrite "cross_antisymmetric" 1)
                    (("12" (case "cross(b - f, d - f) = 0")
                      (("1" (use "cross_eq_0_iff_point_on_line")
                        (("1" (ground)
                          (("1" (skeep)
                            (("1" (replace -2)
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite* "cross_scales_1")
                                  (("1"
                                    (rewrite* "cross_scales_2")
                                    (("1"
                                      (case "d_1 = 0")
                                      (("1" (ground) nil nil)
                                       ("2"
                                        (case "d_1 > 0")
                                        (("1"
                                          (real-props)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2" (real-props) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil) ("3" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil)
                   ("13" (hide -6 -8 5)
                    (("13" (lemma "extend_pos_cross_vectors")
                      (("13" (inst - "d - f" "p - f" "c - f" "a - f")
                        (("13" (ground)
                          (("1" (lemma "four_vectors_pos_cross_2")
                            (("1"
                              (inst - "a - f" "d - f" "b - f" "p - f")
                              (("1" (ground) nil nil)) nil))
                            nil)
                           ("2" (use "cross_eq_0_iff_point_on_line")
                            (("2" (ground)
                              (("1"
                                (skeep)
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (rewrite* "cross_scales_1")
                                      (("1"
                                        (rewrite* "cross_scales_2")
                                        (("1"
                                          (case "d_1 = 0")
                                          (("1" (ground) nil nil)
                                           ("2"
                                            (case "d_1 > 0")
                                            (("1"
                                              (real-props)
                                              (("1" (grind) nil nil))
                                              nil)
                                             ("2"
                                              (real-props)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "cross_antisymmetric" 7)
                                (("2" (real-props) nil nil))
                                nil)
                               ("3" (grind) nil nil)
                               ("4" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("14" (rewrite "cross_antisymmetric" 1)
                    (("14" (case "cross(b - f, d - f) = 0")
                      (("1" (use "cross_eq_0_iff_point_on_line")
                        (("1" (ground)
                          (("1" (skeep)
                            (("1" (replace -2)
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite* "cross_scales_1")
                                  (("1"
                                    (rewrite* "cross_scales_2")
                                    (("1"
                                      (case "d_1 = 0")
                                      (("1" (ground) nil nil)
                                       ("2"
                                        (case "d_1 > 0")
                                        (("1"
                                          (real-props)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2" (real-props) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil) ("3" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil)
                   ("15" (rewrite "cross_antisymmetric" 1)
                    (("15" (case "cross(b - f, d - f) = 0")
                      (("1" (use "cross_eq_0_iff_point_on_line")
                        (("1" (ground)
                          (("1" (skeep)
                            (("1" (replace -2)
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite* "cross_scales_1")
                                  (("1"
                                    (rewrite* "cross_scales_2")
                                    (("1"
                                      (case "d_1 = 0")
                                      (("1" (ground) nil nil)
                                       ("2"
                                        (case "d_1 > 0")
                                        (("1"
                                          (real-props)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2" (real-props) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil) ("3" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil)
                   ("16" (hide -3 -7 -9)
                    (("16" (flip-ineq 3)
                      (("16" (rewrite "cross_antisymmetric" -1)
                        (("16" (move-terms -1 l)
                          (("16" (elim-unary -1)
                            (("16" (assert)
                              (("16"
                                (split-ineq -1)
                                (("1"
                                  (use "cross_eq_0_iff_point_on_line")
                                  (("1"
                                    (ground)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (replace -2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (rewrite* "cross_scales_1")
                                            (("1"
                                              (rewrite*
                                               "cross_scales_2")
                                              (("1"
                                                (case "d!1 = 0")
                                                (("1" (ground) nil nil)
                                                 ("2"
                                                  (real-props)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (real-props)
                                      (("2" (grind) nil nil))
                                      nil)
                                     ("3" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "four_vectors_pos_cross")
                                  (("2"
                                    (inst - "d-f" "b-f" "c-f" "p-f")
                                    (("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (miter_point_between_segments_TCC1 0
  (miter_point_between_segments_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (miter_point_between_segments subtype "between_rays.v"
    "{p: vectors_cross_2d.point_2d | p /= between_rays.u}"))
  (miter_point_between_segments_TCC1-1 nil 3874128216
   ("" (subtype-tcc) nil nil) nil nil
   (miter_point_between_segments subtype "between_rays.v"
    "{p: vectors_cross_2d.point_2d | p /= between_rays.u}")))
 (miter_point_between_segments 0
  (miter_point_between_segments-1 nil 3874129020
   ("" (skeep)
    (("" (rewrite "miter_point_defns_equiv")
      (("" (expand "miter_point_hyp")
        (("" (case "half_angle_vsin(^(u - v), ^(w - v)) > 0")
          (("1" (use "bisect_vector_cross_dot_eq")
            (("1" (assert)
              (("1" (flatten)
                (("1" (hide -2)
                  (("1"
                    (case "cross(^(segment_bisect_vector(v, u, w)), ^(w - v)) > 0 iff
            cross(^(segment_bisect_vector(v, u, w)), w - v) > 0")
                    (("1"
                      (case "cross(^(u - v), ^(segment_bisect_vector(v, u, w))) > 0 iff
            cross(u - v, ^(segment_bisect_vector(v, u, w))) > 0")
                      (("1" (expand "between_rays?")
                        (("1" (assert)
                          (("1" (rewrite* "cross_scales_2")
                            (("1" (real-props)
                              (("1"
                                (split 1)
                                (("1"
                                  (flatten 1)
                                  (("1"
                                    (expand "segment_bisect_vector")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite "cross_norm_gt_0" 1)
                                        (("1"
                                          (equate
                                           "-(^(w - v) + ^(u - v))"
                                           "-1 * (^(w - v) + ^(u - v))"
                                           (assert))
                                          (("1"
                                            (rewrite "cross_scales_2")
                                            (("1"
                                              (real-props)
                                              (("1"
                                                (rewrite
                                                 "cross_distrib_add_2")
                                                (("1"
                                                  (expand "^" 1 1)
                                                  (("1"
                                                    (rewrite
                                                     "cross_scales_2")
                                                    (("1"
                                                      (rewrite
                                                       "cross_self_zero")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "cross_norm_lt_0")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "u-v"
                                                             "w-v")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten 1)
                                  (("2"
                                    (case "cross(u - v, w - v) = 0")
                                    (("1"
                                      (expand "segment_bisect_vector")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (equate
                                           "cross(w - v, ^(perp_right(u - v))) < 0"
                                           "cross(^(perp_right(u - v)), w - v) > 0")
                                          (("1"
                                            (splash 2)
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (rewrite
                                               "cross_norm_gt_0"
                                               1)
                                              (("2"
                                                (rewrite
                                                 "cross_perp_right_pos")
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite
                                             "cross_antisymmetric"
                                             1)
                                            (("2"
                                              (real-props)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "segment_bisect_vector")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (equate
                                           "cross(w - v, ^(^(w - v) + ^(u - v))) < 0"
                                           "cross(^(^(w - v) + ^(u - v)), w - v) > 0")
                                          (("1"
                                            (splash 3)
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (rewrite
                                               "cross_norm_gt_0"
                                               1)
                                              (("2"
                                                (rewrite
                                                 "cross_distrib_add_2")
                                                (("2"
                                                  (expand "^" 1 1)
                                                  (("2"
                                                    (rewrite
                                                     "cross_scales_2")
                                                    (("2"
                                                      (rewrite
                                                       "cross_self_zero")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (rewrite
                                                           "cross_norm_gt_0"
                                                           1)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite
                                             "cross_antisymmetric"
                                             1)
                                            (("2"
                                              (real-props)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (expand "^" 1 1)
                          (("2" (rewrite "cross_scales_1")
                            (("2" (real-props) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "cross_norm_gt_0" 1) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2"
            (case "cross(^(u - v), ^(segment_bisect_vector(v, u, w))) > 0 iff
            cross(u - v, ^(segment_bisect_vector(v, u, w))) > 0")
            (("1" (hide-all-but 1)
              (("1" (use "half_angle_sine_dir_nonparallel")
                (("1" (assert)
                  (("1" (expand "half_angle_vsin")
                    (("1" (ground) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (expand "^" 1 1)
                (("2" (rewrite "cross_scales_1")
                  (("2" (real-props) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

