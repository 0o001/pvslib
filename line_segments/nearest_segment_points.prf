(nearest_segment_points
 (endpoint_diff_nonzero_1 0
  (endpoint_diff_nonzero_1-2 nil 3874129019
   ("" (skeep) (("" (typepred "s`p2") (("" (assert) nil nil)) nil))
    nil)
   nil shostak
   (endpoint_diff_nonzero_1 subtype
    "(vectors_2D.-)(nearest_segment_points.s`p2, nearest_segment_points.s`p1)"
    "Nz_vector"))
  (endpoint_diff_nonzero_1-1 nil 3874128136
   ("" (judgement-tcc) nil nil) nil nil
   (endpoint_diff_nonzero_1 subtype
    "(vectors_2D.-)(nearest_segment_points.s`p2, nearest_segment_points.s`p1)"
    "Nz_vector")))
 (endpoint_diff_nonzero_2 0
  (endpoint_diff_nonzero_2-2 nil 3874129019
   ("" (skeep) (("" (typepred "s`p2") (("" (assert) nil nil)) nil))
    nil)
   nil shostak
   (endpoint_diff_nonzero_2 subtype
    "(vectors_2D.-)(nearest_segment_points.s`p1, nearest_segment_points.s`p2)"
    "Nz_vector"))
  (endpoint_diff_nonzero_2-1 nil 3874128136
   ("" (judgement-tcc) nil nil) nil nil
   (endpoint_diff_nonzero_2 subtype
    "(vectors_2D.-)(nearest_segment_points.s`p1, nearest_segment_points.s`p2)"
    "Nz_vector")))
 (dropped_perp_after_extension_no_intersect_subcase_TCC1 0
  (dropped_perp_after_extension_no_intersect_subcase_TCC1-2 nil
   3874129019
   ("" (skeep)
    (("" (use "no_line_crossing_eqv_parallel_or_collinear")
      (("" (ground) nil nil)) nil))
    nil)
   nil shostak
   (dropped_perp_after_extension_no_intersect_subcase subtype
    "perp_crossings.line_crossing(nearest_segment_points.s, nearest_segment_points.e)"
    "(Maybe[point_2d].some?)"))
  (dropped_perp_after_extension_no_intersect_subcase_TCC1-1 nil
   3874128136 ("" (subtype-tcc) nil nil) nil nil
   (dropped_perp_after_extension_no_intersect_subcase subtype
    "perp_crossings.line_crossing(nearest_segment_points.s, nearest_segment_points.e)"
    "(Maybe[point_2d].some?)")))
 (dropped_perp_after_extension_no_intersect_subcase 0
  (dropped_perp_after_extension_no_intersect_subcase-1 nil 3874129019
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (expand "extending_s_crosses_e")
          (("" (split -1)
            (("1" (propax) nil nil)
             ("2" (flatten)
              (("2" (replace -4)
                (("2" (case-replace "closest_s_endpt = lc")
                  (("1" (expand "are_segments_intersecting_alt?")
                    (("1" (inst 5 "lc")
                      (("1" (rewrite "is_point_on_seg_equiv") nil nil)
                       ("2" (rewrite "is_point_on_seg_equiv")
                        (("2" (lift-if)
                          (("2" (split -8)
                            (("1" (flatten)
                              (("1"
                                (replace -2)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (replace -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case-replace "q = lc")
                    (("1"
                      (lemma
                       "perp_line_crossing_at_line_crossing_self")
                      (("1" (inst - "e" "s")
                        (("1" (split -1)
                          (("1" (assert)
                            (("1" (rewrite "line_crossing_commutative")
                              (("1"
                                (inst + "0")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite "parallel_commutative") nil
                            nil)
                           ("3" (rewrite "collinear_symmetric") nil
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (name-replace*
                       ("s_seg" "(# p1 := lc, p2 := closest_s_endpt #)"
                        "q_seg" "(# p1 := lc, p2 := q #)"))
                      (("2"
                        (case "collinear?(s, s_seg) and collinear?(e, q_seg)")
                        (("1" (flatten)
                          (("1"
                            (lemma
                             "collinear_segments_same_line_crossing")
                            (("1" (inst-cp - "e" "s" "s_seg")
                              (("1"
                                (inst - "s" "e" "q_seg")
                                (("1"
                                  (assert)
                                  (("1"
                                    (rewrite
                                     "line_crossing_commutative"
                                     -2)
                                    (("1"
                                      (lemma
                                       "perp_line_crossing_point_val")
                                      (("1"
                                        (inst - "q_seg" "s_seg" "q")
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case-replace
                                               "val(line_crossing(q_seg, s_seg)) = lc")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (equate
                                                   "find_perp_ray_line_crossing(s_seg, q)"
                                                   "pxs")
                                                  (("1"
                                                    (name-replace
                                                     "q_pxs_cos"
                                                     "vcos(^(s_seg`p2 - s_seg`p1), ^(q - lc))"
                                                     :hide?
                                                     nil)
                                                    (("1"
                                                      (expand "^" -3)
                                                      (("1"
                                                        (real-props)
                                                        (("1"
                                                          (inst
                                                           +
                                                           "norm(q - lc) * (1 / norm(s_seg`p2 - s_seg`p1)) * q_pxs_cos")
                                                          (("1"
                                                            (expand
                                                             "s_seg"
                                                             (-3 +))
                                                            (("1"
                                                              (real-props)
                                                              (("1"
                                                                (typepred
                                                                 "q_pxs_cos")
                                                                (("1"
                                                                  (case
                                                                   "q_pxs_cos < 0")
                                                                  (("1"
                                                                    (equate
                                                                     "norm(q - lc) * q_pxs_cos"
                                                                     "q_pxs_cos * norm(q - lc)"
                                                                     (assert))
                                                                    (("1"
                                                                      (mult-cases
                                                                       4)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (equate
                                                                     "norm(q - lc) * q_pxs_cos"
                                                                     "q_pxs_cos * norm(q - lc)"
                                                                     (assert))
                                                                    (("2"
                                                                      (mult-cases
                                                                       5)
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (real-props)
                                                                          (("1"
                                                                            (mult-cases
                                                                             6)
                                                                            (("1"
                                                                              (use
                                                                               "norm_diff_pos")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "abs")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (expand
                                                                               "s_seg"
                                                                               -3)
                                                                              (("2"
                                                                                (lemma
                                                                                 "cos_pos_len_le_imp_find_perp_ray_crossing")
                                                                                (("2"
                                                                                  (inst
                                                                                   -
                                                                                   "closest_s_endpt"
                                                                                   "lc"
                                                                                   "q")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "find_perp_ray_crossing")
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (split
                                                                                           -17)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (use
                                                                                               "perp_lines_cross")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (lemma
                                                                                             "collinear_perp_line_crossings_same")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "(# p1 := lc, p2 := q #)"
                                                                                               "e"
                                                                                               "closest_s_endpt")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (name-replace
                                                                                                       "perp_xing"
                                                                                                       "val(line_crossing((# p1 := closest_s_endpt,
                                                                                                                                                                                                     p2
                                                                                                                                                                                                     := closest_s_endpt
                                                                                                                                                                                                        +
                                                                                                                                                                                                        perp_right(e`p2 - e`p1) #),
                                                                                                                                                                                                  e))")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "point_on_interior_segment")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -
                                                                                                           "perp_xing"
                                                                                                           "(# p1 := lc, p2 := q #)"
                                                                                                           "e")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -4)
                                                                                                              (("1"
                                                                                                                (add-formulas
                                                                                                                 (3
                                                                                                                  12))
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (cancel-by
                                                                                                                     1
                                                                                                                     "2")
                                                                                                                    (("1"
                                                                                                                      (mult-cases
                                                                                                                       2
                                                                                                                       :mult-op
                                                                                                                       1*)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "abs")
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (move-terms
                                                                                                             -1
                                                                                                             l
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (use
                                                                                                               "perp_right_nzvect_neq_zero")
                                                                                                              (("2"
                                                                                                                (ground)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     (-13
                                                                                                      -14
                                                                                                      1))
                                                                                                    (("2"
                                                                                                      (rewrite
                                                                                                       "collinear_as_parallel_with_p1_on_line")
                                                                                                      (("2"
                                                                                                        (rewrite*
                                                                                                         "point_on_segment_has_offset")
                                                                                                        (("2"
                                                                                                          (skeep*)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -3)
                                                                                                              (("2"
                                                                                                                (case-replace
                                                                                                                 "d!1 = d")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (case-replace
                                                                                                                   "e`p1 + d!1 * (e`p2 - e`p1) - (e`p1 + d * (e`p2 - e`p1)) = (d!1 - d) * (e`p2 - e`p1)")
                                                                                                                  (("1"
                                                                                                                    (ground)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "parallel?")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         +
                                                                                                                         "d!1 - d")
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (inst
                                                                                                                       +
                                                                                                                       "-(d / (d!1 - d))")
                                                                                                                      (("2"
                                                                                                                        (factor
                                                                                                                         1
                                                                                                                         r
                                                                                                                         (2
                                                                                                                          3))
                                                                                                                        (("2"
                                                                                                                          (real-props)
                                                                                                                          (("2"
                                                                                                                            (equate
                                                                                                                             "-(d / (d!1 - d)) * d!1 - -(d / (d!1 - d)) * d + d"
                                                                                                                             "0")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (hide-all-but
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (factor
                                                                                                                                 1
                                                                                                                                 l
                                                                                                                                 (1
                                                                                                                                  2))
                                                                                                                                (("2"
                                                                                                                                  (equate
                                                                                                                                   "-(d / (d!1 - d)) * (d!1 - d)"
                                                                                                                                   "-d")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (name-replace
                                                                                                                                     "dd"
                                                                                                                                     "d!1 - d")
                                                                                                                                    (("2"
                                                                                                                                      (real-props)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide-all-but
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -2)
                                                    (("2"
                                                      (expand
                                                       "find_perp_ray_line_crossing")
                                                      (("2"
                                                        (lemma
                                                         "collinear_segments_same_line_crossing")
                                                        (("2"
                                                          (inst
                                                           -
                                                           _
                                                           "s"
                                                           "s_seg")
                                                          (("2"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (use
                                                                 "collinear_perp_line_crossings_same")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (move-terms
                                                                   -1
                                                                   l
                                                                   1)
                                                                  (("2"
                                                                    (use
                                                                     "perp_right_nzvect_neq_zero")
                                                                    (("2"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -1)
                                                (("2"
                                                  (lemma
                                                   "collinear_segments_same_line_crossing")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "s_seg"
                                                     "e"
                                                     "q_seg")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (rewrite
                                                         "line_crossing_commutative"
                                                         -1)
                                                        (("2"
                                                          (rewrite
                                                           "line_crossing_commutative"
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide -1)
                                                (("3"
                                                  (lemma
                                                   "collinear_segments_same_line_crossing")
                                                  (("3"
                                                    (inst
                                                     -
                                                     "s_seg"
                                                     "e"
                                                     "q_seg")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (rewrite
                                                         "line_crossing_commutative"
                                                         -1)
                                                        (("3"
                                                          (replace -1)
                                                          (("3"
                                                            (replace
                                                             -3
                                                             +)
                                                            (("3"
                                                              (rewrite
                                                               "line_crossing_commutative"
                                                               4)
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma
                                             "parallel_defs_almost_same")
                                            (("2"
                                              (inst-cp
                                               -
                                               "q_seg"
                                               "s_seg")
                                              (("2"
                                                (inst - "s" "e")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "s_seg" -1)
                                                    (("2"
                                                      (expand
                                                       "q_seg"
                                                       -1)
                                                      (("2"
                                                        (rewrite
                                                         "parallel_symm"
                                                         1)
                                                        (("2"
                                                          (case
                                                           "parallel?(e`p2 - e`p1, q - lc) &
                                                                                                                                parallel?(closest_s_endpt - lc, s`p2 - s`p1)")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (lemma
                                                               "parallel_trans")
                                                              (("1"
                                                                (inst-cp
                                                                 -
                                                                 "e`p2 - e`p1"
                                                                 "q - lc"
                                                                 "closest_s_endpt - lc")
                                                                (("1"
                                                                  (inst-cp
                                                                   -
                                                                   "e`p2 - e`p1"
                                                                   "closest_s_endpt - lc"
                                                                   "s`p2 - s`p1")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (split 1)
                                                            (("1"
                                                              (expand
                                                               "parallel?"
                                                               1)
                                                              (("1"
                                                                (rewrite*
                                                                 "point_on_segment_has_offset")
                                                                (("1"
                                                                  (skeep*)
                                                                  (("1"
                                                                    (replace
                                                                     -9
                                                                     1)
                                                                    (("1"
                                                                      (replace
                                                                       -11
                                                                       1)
                                                                      (("1"
                                                                        (case-replace
                                                                         "d!1 = d")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (inst
                                                                           +
                                                                           "1 / (d!1 - d)")
                                                                          (("1"
                                                                            (cross-mult
                                                                             2)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               2)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "collinear_parallel")
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "s_seg"
                                                                 "s")
                                                                (("2"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "s_seg"
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (rewrite
                                                                     "collinear_symmetric"
                                                                     1)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (lemma
                                             "collinear_transitive")
                                            (("3"
                                              (inst-cp
                                               -
                                               "e"
                                               "q_seg"
                                               "s_seg")
                                              (("3"
                                                (inst
                                                 -
                                                 "e"
                                                 "s_seg"
                                                 "s")
                                                (("3"
                                                  (rewrite
                                                   "collinear_symmetric"
                                                   -6)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (rewrite
                                                       "collinear_symmetric"
                                                       +)
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (rewrite*
                           "collinear_as_parallel_with_p1_on_line" 1)
                          (("1" (expand "s_seg" 1)
                            (("1" (expand "q_seg" 1)
                              (("1"
                                (split 1 :depth 1)
                                (("1"
                                  (lemma "line_crossing_on_line")
                                  (("1"
                                    (inst - "s" "e")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (replace -7)
                                            (("1"
                                              (expand
                                               "are_segments_intersecting_alt?")
                                              (("1"
                                                (hide-all-but
                                                 (-1 -4 -10 1 8))
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (case-replace
                                                       "k = 0")
                                                      (("1"
                                                        (inst + "s`p1")
                                                        (("1"
                                                          (rewrite
                                                           "is_point_on_seg_equiv")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           "is_point_on_seg_equiv")
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "parallel?")
                                                        (("2"
                                                          (ground)
                                                          (("1"
                                                            (replace
                                                             -2)
                                                            (("1"
                                                              (replace
                                                               -3)
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "-1/k")
                                                                (("1"
                                                                  (hide-all-but
                                                                   (1
                                                                    2))
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (replace
                                                               -2)
                                                              (("2"
                                                                (case-replace
                                                                 "k = 1")
                                                                (("1"
                                                                  (equate
                                                                   "s`p1 + 1 * (s`p2 - s`p1)"
                                                                   "s`p2")
                                                                  (("1"
                                                                    (inst
                                                                     4
                                                                     "s`p2")
                                                                    (("1"
                                                                      (rewrite
                                                                       "is_point_on_seg_equiv")
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (rewrite
                                                                       "is_point_on_seg_equiv")
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind-with-ext)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (inst
                                                                   +
                                                                   "1/(1-k)")
                                                                  (("1"
                                                                    (hide-all-but
                                                                     4)
                                                                    (("1"
                                                                      (cross-mult
                                                                       1)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (real-props)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite*
                                   "point_on_segment_has_offset")
                                  (("2"
                                    (skeep*)
                                    (("2"
                                      (replace -3 1)
                                      (("2"
                                        (replace -5 1)
                                        (("2"
                                          (case-replace "d!1 = d")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide-all-but (1 2))
                                            (("2"
                                              (ground)
                                              (("1"
                                                (expand "parallel?")
                                                (("1"
                                                  (inst
                                                   +
                                                   "1 / (d!1 - d)")
                                                  (("1"
                                                    (cross-mult 1)
                                                    (("1"
                                                      (grind-with-ext)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "q_seg" 1)
                            (("2" (propax) nil nil)) nil))
                          nil)
                         ("3" (expand "q_seg" 1)
                          (("3" (assert) nil nil)) nil)
                         ("4" (expand "s_seg" 1)
                          (("4" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (dropped_perp_after_extension_intersect_TCC1 0
  (dropped_perp_after_extension_intersect_TCC1-2 nil 3874129019
   ("" (skeep)
    (("" (use "no_line_crossing_eqv_parallel_or_collinear")
      (("" (ground) nil nil)) nil))
    nil)
   nil shostak
   (dropped_perp_after_extension_intersect subtype
    "perp_crossings.line_crossing(nearest_segment_points.s, nearest_segment_points.e)"
    "(Maybe[point_2d].some?)"))
  (dropped_perp_after_extension_intersect_TCC1-1 nil 3874128136
   ("" (subtype-tcc) nil nil) nil nil
   (dropped_perp_after_extension_intersect subtype
    "perp_crossings.line_crossing(nearest_segment_points.s, nearest_segment_points.e)"
    "(Maybe[point_2d].some?)")))
 (dropped_perp_after_extension_intersect_TCC2 0
  (dropped_perp_after_extension_intersect_TCC2-2 nil 3874129019
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (dropped_perp_after_extension_intersect subtype
    "perp_crossings.find_perp_ray_crossing(nearest_segment_points.e, nearest_segment_points.closest_s_endpt)"
    "(Maybe[point_2d].some?)"))
  (dropped_perp_after_extension_intersect_TCC2-1 nil 3874128136
   ("" (subtype-tcc) nil nil) nil nil
   (dropped_perp_after_extension_intersect subtype
    "perp_crossings.find_perp_ray_crossing(nearest_segment_points.e, nearest_segment_points.closest_s_endpt)"
    "(Maybe[point_2d].some?)")))
 (dropped_perp_after_extension_intersect 0
  (dropped_perp_after_extension_intersect-1 nil 3874129019
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (skeep 5 t)
          (("" (expand "point_on_segment?")
            (("" (apply (repeat (lift-if)))
              ((""
                (name-replace "lc" "val(line_crossing(s, e))" :hide?
                 nil)
                (("1" (expand "extending_s_crosses_e")
                  (("1" (use "line_crossing_commutative")
                    (("1"
                      (rewrite
                       "no_line_crossing_eqv_parallel_or_collinear")
                      (("1" (split 3)
                        (("1" (rewrite "parallel_commutative")
                          (("1" (rewrite "collinear_symmetric") nil
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (replace -1 :dir rl)
                            (("2" (replace -2)
                              (("2"
                                (ground)
                                (("1"
                                  (case "p = s`p1")
                                  (("1"
                                    (use "perp_is_shortest")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst - "q")
                                        (("1"
                                          (rewrite "norm_sym" -1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "point_on_segment?")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma
                                     "closer_point_imp_closer_perp_crossing")
                                    (("2"
                                      (inst - "s" "e" "p" "s`p1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (ground)
                                          (("1"
                                            (use
                                             "perp_line_crossing_is_perp_pt")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma "perp_is_min")
                                                (("1"
                                                  (inst - "e" "p")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (rewrite
                                                       "point_on_segment_has_offset"
                                                       -10)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst - "d")
                                                          (("1"
                                                            (replace
                                                             -2
                                                             :dir
                                                             rl
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (replace
                                                               -9
                                                               :dir
                                                               rl
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (rewrite
                                                                 "norm_sym"
                                                                 -1)
                                                                (("1"
                                                                  (rewrite
                                                                   "perp_ray_crossing_is_perp_ray_line_crossing"
                                                                   +)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand
                                             "point_on_segment?")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (use
                                                 "perp_line_crossing_at_line_crossing_self")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (replace
                                                     -2
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (rewrite
                                                       "perp_ray_crossing_is_perp_ray_line_crossing")
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (use
                                             "line_crossing_on_line")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (rewrite
                                                 "no_line_crossing_eqv_parallel_or_collinear")
                                                (("3"
                                                  (skeep)
                                                  (("3"
                                                    (lemma
                                                     "endpt_1_closer_to_q_imp_q_farther_from_p")
                                                    (("3"
                                                      (inst
                                                       -
                                                       "s"
                                                       "p"
                                                       "lc"
                                                       "k")
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "point_on_segment?")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case "p = s`p2")
                                  (("1"
                                    (use "perp_is_shortest")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst - "q")
                                        (("1"
                                          (rewrite "norm_sym" -1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "point_on_segment?")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma
                                     "closer_point_imp_closer_perp_crossing")
                                    (("2"
                                      (inst - "s" "e" "p" "s`p2")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (ground)
                                          (("1"
                                            (use
                                             "perp_line_crossing_is_perp_pt")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma "perp_is_min")
                                                (("1"
                                                  (inst - "e" "p")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (rewrite
                                                       "point_on_segment_has_offset"
                                                       -8)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst - "d")
                                                          (("1"
                                                            (replace
                                                             -2
                                                             :dir
                                                             rl
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (replace
                                                               -7
                                                               :dir
                                                               rl
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (rewrite
                                                                 "norm_sym"
                                                                 -1)
                                                                (("1"
                                                                  (rewrite
                                                                   "perp_ray_crossing_is_perp_ray_line_crossing"
                                                                   +)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand
                                             "point_on_segment?")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (use
                                                 "perp_line_crossing_at_line_crossing_self")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (replace
                                                     -2
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (rewrite
                                                       "perp_ray_crossing_is_perp_ray_line_crossing")
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (use
                                             "line_crossing_on_line")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (rewrite
                                                 "no_line_crossing_eqv_parallel_or_collinear")
                                                (("3"
                                                  (skeep)
                                                  (("3"
                                                    (lemma
                                                     "endpt_2_closer_to_q_imp_q_farther_from_p")
                                                    (("3"
                                                      (inst
                                                       -
                                                       "s"
                                                       "p"
                                                       "lc"
                                                       "k")
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "point_on_segment?")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (use "no_line_crossing_eqv_parallel_or_collinear")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (dropped_perp_after_extension_no_intersect_endpts_closest 0
  (dropped_perp_after_extension_no_intersect_endpts_closest-1 nil
   3874129019
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (skeep + t)
          (("" (expand "point_on_segment?")
            ((""
              (name-replace "lc" "val(line_crossing(s, e))" :hide? nil)
              (("1" (expand "extending_s_crosses_e")
                (("1" (split -4)
                  (("1" (propax) nil nil)
                   ("2" (flatten)
                    (("2" (replace -2)
                      (("2" (case-replace "closest_s_endpt = lc")
                        (("1" (expand "are_segments_intersecting_alt?")
                          (("1" (inst + "lc")
                            (("1" (rewrite "is_point_on_seg_equiv") nil
                              nil)
                             ("2" (rewrite "is_point_on_seg_equiv")
                              (("2"
                                (lift-if)
                                (("2"
                                  (split -8)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (replace -2)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (replace -1)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (case "norm(closest_s_endpt - closest_e_endpt) <= norm(closest_s_endpt - q)")
                          (("1"
                            (case "norm(closest_s_endpt - q) <= norm(p - q)")
                            (("1" (rewrite "norm_sym" +)
                              (("1" (assert) nil nil)) nil)
                             ("2"
                              (name-replace "pxs"
                               "find_perp_ray_line_crossing(s, q)")
                              (("2"
                                (lemma
                                 "projected_point_preserves_distance_ordering")
                                (("2"
                                  (inst
                                   -
                                   "s"
                                   "p"
                                   "closest_s_endpt"
                                   "q")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (equate
                                         "norm(p - q)"
                                         "norm(q - p)"
                                         (rewrite "norm_sym"))
                                        (("1"
                                          (equate
                                           "norm(closest_s_endpt - q)"
                                           "norm(q - closest_s_endpt)"
                                           (rewrite "norm_sym"))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "exists (k: real): p = lc + k * (closest_s_endpt - lc) & k >= 1")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (replace -1 1)
                                                  (("1"
                                                    (case
                                                     "exists (c: real): pxs = lc + c * (closest_s_endpt - lc) & c < 1")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (replace -1 1)
                                                        (("1"
                                                          (equate
                                                           "lc + c * (closest_s_endpt - lc) -
                                                                  (lc + k * (closest_s_endpt - lc))"
                                                           "(c - k) * (closest_s_endpt - lc)")
                                                          (("1"
                                                            (equate
                                                             "lc + c * (closest_s_endpt - lc) - closest_s_endpt"
                                                             "(c - 1) * (closest_s_endpt - lc)")
                                                            (("1"
                                                              (rewrite*
                                                               "norm_scal")
                                                              (("1"
                                                                (mult-cases
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "dropped_perp_after_extension_no_intersect_subcase")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "s"
                                                         "e"
                                                         "q"
                                                         "lc"
                                                         "pxs")
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -7)
                                                              (("1"
                                                                (replace
                                                                 -12
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (expand
                                                                   "extending_s_crosses_e")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("4"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lift-if)
                                                (("2"
                                                  (split -9)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (case
                                                         "^(s`p2 - s`p1) = ^(s`p1 - lc)")
                                                        (("1"
                                                          (rewrite
                                                           "point_on_segment_has_norm_offset"
                                                           -8)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (replace
                                                               -8
                                                               1)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "^"
                                                                   1)
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "1 + d / norm(s`p1 - lc)")
                                                                    (("1"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("1"
                                                                        (ground)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (cancel-add
                                                                           1)
                                                                          (("2"
                                                                            (real-props)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (use
                                                                       "norm_eq_0")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (use
                                                           "line_crossing_on_line")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (replace
                                                                 -7)
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   (-2
                                                                    1))
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (equate
                                                                       "s`p1 + k * (s`p2 - s`p1) - s`p2"
                                                                       "(k - 1) * (s`p2 - s`p1)")
                                                                      (("1"
                                                                        (equate
                                                                         "s`p1 - (s`p1 + k * (s`p2 - s`p1))"
                                                                         "-k * (s`p2 - s`p1)")
                                                                        (("1"
                                                                          (rewrite
                                                                           "normalize_scal")
                                                                          (("1"
                                                                            (rewrite*
                                                                             "norm_scal")
                                                                            (("1"
                                                                              (cancel-by
                                                                               -2
                                                                               "norm((s`p2 - s`p1))")
                                                                              (("1"
                                                                                (hide
                                                                                 -12)
                                                                                (("1"
                                                                                  (expand
                                                                                   "abs")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "sign")
                                                                                    (("1"
                                                                                      (apply
                                                                                       (repeat
                                                                                        (lift-if)))
                                                                                      (("1"
                                                                                        (ground)
                                                                                        (("1"
                                                                                          (case
                                                                                           "point_on_segment?(lc, s)")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "are_segments_intersecting_alt?")
                                                                                            (("1"
                                                                                              (inst
                                                                                               13
                                                                                               "lc")
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "is_point_on_seg_equiv")
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (rewrite
                                                                                                 "is_point_on_seg_equiv")
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (rewrite
                                                                                             "point_on_segment_has_offset"
                                                                                             1)
                                                                                            (("2"
                                                                                              (inst
                                                                                               +
                                                                                               "k")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (case-replace
                                                                               "k = 0")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (case
                                                         "^(s`p1 - s`p2) = ^(s`p2 - lc)")
                                                        (("1"
                                                          (rewrite
                                                           "point_on_reverse_segment"
                                                           -7
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (rewrite
                                                             "point_on_segment_has_norm_offset"
                                                             -7)
                                                            (("1"
                                                              (expand
                                                               "reverse_segment")
                                                              (("1"
                                                                (expand
                                                                 "length")
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (replace
                                                                     -7
                                                                     2)
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       2)
                                                                      (("1"
                                                                        (expand
                                                                         "^"
                                                                         2)
                                                                        (("1"
                                                                          (inst
                                                                           +
                                                                           "1 + d / norm(s`p2 - lc)")
                                                                          (("1"
                                                                            (hide-all-but
                                                                             2)
                                                                            (("1"
                                                                              (ground)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (cancel-add
                                                                                 1)
                                                                                (("2"
                                                                                  (real-props)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (use
                                                                             "norm_eq_0")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (use
                                                           "line_crossing_on_line")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (replace
                                                                 -6)
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   (1
                                                                    2))
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (equate
                                                                       "s`p2 - (s`p1 + k * (s`p2 - s`p1))"
                                                                       "(1 - k) * (s`p2 - s`p1)")
                                                                      (("1"
                                                                        (equate
                                                                         "s`p1 + k * (s`p2 - s`p1) - s`p2"
                                                                         "(k - 1) * (s`p2 - s`p1)")
                                                                        (("1"
                                                                          (rewrite
                                                                           "normalize_scal")
                                                                          (("1"
                                                                            (rewrite*
                                                                             "norm_scal")
                                                                            (("1"
                                                                              (cancel-by
                                                                               2
                                                                               "norm((s`p2 - s`p1))")
                                                                              (("1"
                                                                                (expand
                                                                                 "abs")
                                                                                (("1"
                                                                                  (expand
                                                                                   "sign")
                                                                                  (("1"
                                                                                    (apply
                                                                                     (repeat
                                                                                      (lift-if)))
                                                                                    (("1"
                                                                                      (hide
                                                                                       -11)
                                                                                      (("1"
                                                                                        (case
                                                                                         "point_on_segment?(lc, s)")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "are_segments_intersecting_alt?")
                                                                                          (("1"
                                                                                            (inst
                                                                                             12
                                                                                             "lc")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "is_point_on_seg_equiv")
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (rewrite
                                                                                               "is_point_on_seg_equiv")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (rewrite
                                                                                           "point_on_segment_has_offset"
                                                                                           1)
                                                                                          (("2"
                                                                                            (ground)
                                                                                            (("1"
                                                                                              (inst
                                                                                               +
                                                                                               "k")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (inst
                                                                                               +
                                                                                               "k")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (rewrite
                                                                                               "point_on_segment_has_offset"
                                                                                               -8)
                                                                                              (("3"
                                                                                                (skeep)
                                                                                                (("3"
                                                                                                  (replace
                                                                                                   -8
                                                                                                   8)
                                                                                                  (("3"
                                                                                                    (replace
                                                                                                     -2
                                                                                                     8)
                                                                                                    (("3"
                                                                                                      (inst
                                                                                                       8
                                                                                                       "(d - k) / (1 - k)")
                                                                                                      (("3"
                                                                                                        (real-props)
                                                                                                        (("3"
                                                                                                          (cancel-add
                                                                                                           8)
                                                                                                          (("3"
                                                                                                            (equate
                                                                                                             "s`p2 - (s`p1 + k * (s`p2 - s`p1))"
                                                                                                             "(1 - k) * (s`p2 - s`p1)")
                                                                                                            (("1"
                                                                                                              (equate
                                                                                                               "(d - k) / (1 - k) * ((1 - k) * (s`p2 - s`p1))"
                                                                                                               "(d - k) * (s`p2 - s`p1)")
                                                                                                              (("1"
                                                                                                                (hide-all-but
                                                                                                                 8)
                                                                                                                (("1"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide-all-but
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (name-replace
                                                                                                                   "ss"
                                                                                                                   "(s`p2 - s`p1)")
                                                                                                                  (("2"
                                                                                                                    (name-replace
                                                                                                                     "kk"
                                                                                                                     "(1 - k)")
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide-all-but
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (move-terms
                                                                               -1
                                                                               l
                                                                               2)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (replace
                                                                                   -1
                                                                                   :dir
                                                                                   rl)
                                                                                  (("2"
                                                                                    (hide-all-but
                                                                                     (-2
                                                                                      6))
                                                                                    (("2"
                                                                                      (grind-with-ext)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "point_on_segment?")
                                    (("2"
                                      (hide-all-but (-9 1))
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (ground)
                                          (("1"
                                            (replace -2)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (replace -1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (lemma
                             "not_perp_p1_closer_p2_imp_p1_closest")
                            (("2" (lift-if)
                              (("2"
                                (split -7)
                                (("1"
                                  (inst - "e" "closest_s_endpt" "q")
                                  (("1" (ground) nil nil))
                                  nil)
                                 ("2"
                                  (inst
                                   -
                                   "reverse_segment(e)"
                                   "closest_s_endpt"
                                   "q")
                                  (("2"
                                    (rewrite
                                     "find_perp_ray_crossing_reverse"
                                     :dir
                                     rl)
                                    (("2"
                                      (rewrite
                                       "point_on_reverse_segment")
                                      (("2"
                                        (expand "reverse_segment")
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (use "no_line_crossing_eqv_parallel_or_collinear")
                (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (nonoverlapping_collinear_closest_at_endpoints 0
  (nonoverlapping_collinear_closest_at_endpoints-1 nil 3874129019
   ("" (skeep* + t)
    ((""
      (name-replace*
       ("u" "nearest_endpoints(s, e)`1" "v"
        "nearest_endpoints(s, e)`2"))
      (("" (case-replace "u = v")
        (("1" (assert) nil nil)
         ("2" (expand "point_on_segment?")
          (("2" (case "collinear?(e, s)")
            (("1" (case "are_segments_intersecting_alt?(e, s)")
              (("1" (hide-all-but (-1 2))
                (("1" (expand "are_segments_intersecting_alt?")
                  (("1" (skeep - t) (("1" (inst?) nil nil)) nil)) nil))
                nil)
               ("2" (expand "nearest_endpoints")
                (("2" (apply (repeat (lift-if)))
                  (("2" (assert)
                    (("2" (apply (repeat (then (split) (flatten))))
                      (("1"
                        (lemma "dir_parallel_segs_dist_bound_p1_p1")
                        (("1" (inst - "s" "e" "p" "q")
                          (("1" (ground)
                            (("1" (rewrite "norm_sym" -1)
                              (("1" (assert) nil nil)) nil)
                             ("2"
                              (lemma
                               "nonoverlapping_collinear_seg_pts_dir_parallel")
                              (("2"
                                (inst - "s" "e" "s`p2" "e`p1")
                                (("2"
                                  (ground)
                                  (("2"
                                    (rewrite "norm_sym" 1)
                                    (("2"
                                      (equate
                                       "norm(e`p1 - s`p2)"
                                       "norm(s`p2 - e`p1)")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (rewrite "norm_sym" 1)
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3"
                              (lemma
                               "nonoverlapping_collinear_seg_pts_dir_parallel")
                              (("3"
                                (inst - "e" "s" "e`p2" "s`p1")
                                (("3"
                                  (ground)
                                  (("3"
                                    (rewrite "dir_parallel_diff" -1)
                                    (("3"
                                      (rewrite "dir_parallel_symm" -1)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 1 2)
                        (("2"
                          (lemma "dir_parallel_segs_dist_bound_p1_p1")
                          (("2"
                            (inst - "s" "reverse_segment(e)" "p" "q")
                            (("2" (rewrite "point_on_reverse_segment")
                              (("2"
                                (expand "reverse_segment")
                                (("2"
                                  (ground)
                                  (("1"
                                    (rewrite "norm_sym" -1)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (lemma
                                     "nonoverlapping_collinear_seg_pts_dir_parallel")
                                    (("2"
                                      (inst - "s" "e" "s`p2" "e`p2")
                                      (("2"
                                        (ground)
                                        (("2"
                                          (rewrite "norm_sym" 1)
                                          (("2"
                                            (equate
                                             "norm(e`p2 - s`p2)"
                                             "norm(s`p2 - e`p2)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (rewrite "norm_sym" 1)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (lemma
                                     "nonoverlapping_collinear_seg_pts_dir_parallel")
                                    (("3"
                                      (inst
                                       -
                                       "reverse_segment(e)"
                                       "s"
                                       "e`p1"
                                       "s`p1")
                                      (("3"
                                        (ground)
                                        (("1"
                                          (expand "reverse_segment")
                                          (("1"
                                            (rewrite
                                             "dir_parallel_diff"
                                             -1)
                                            (("1"
                                              (rewrite
                                               "dir_parallel_symm"
                                               -1)
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "collinear_reverse")
                                          nil
                                          nil)
                                         ("3"
                                          (rewrite
                                           "are_segments_intersecting_alt_reverse")
                                          nil
                                          nil)
                                         ("4"
                                          (rewrite
                                           "point_on_reverse_segment")
                                          nil
                                          nil)
                                         ("5"
                                          (expand "reverse_segment")
                                          (("5" (assert) nil nil))
                                          nil)
                                         ("6"
                                          (expand "reverse_segment")
                                          (("6" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide 1 2 3 4)
                        (("3"
                          (lemma "dir_parallel_segs_dist_bound_p1_p1")
                          (("3"
                            (inst - "reverse_segment(s)" "e" "p" "q")
                            (("3" (rewrite "point_on_reverse_segment")
                              (("3"
                                (expand "reverse_segment")
                                (("3"
                                  (ground)
                                  (("1"
                                    (rewrite "norm_sym" -1)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (lemma
                                     "nonoverlapping_collinear_seg_pts_dir_parallel")
                                    (("2"
                                      (inst
                                       -
                                       "reverse_segment(s)"
                                       "e"
                                       "s`p1"
                                       "e`p1")
                                      (("2"
                                        (rewrite
                                         "point_on_reverse_segment")
                                        (("2"
                                          (ground)
                                          (("1"
                                            (expand "reverse_segment")
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (rewrite
                                             "collinear_reverse")
                                            nil
                                            nil)
                                           ("3"
                                            (rewrite
                                             "are_segments_intersecting_alt_reverse")
                                            nil
                                            nil)
                                           ("4"
                                            (expand "reverse_segment")
                                            (("4" (assert) nil nil))
                                            nil)
                                           ("5"
                                            (expand "reverse_segment")
                                            (("5"
                                              (rewrite "norm_sym" 1)
                                              (("5"
                                                (equate
                                                 "norm(e`p1 - s`p1)"
                                                 "norm(s`p1 - e`p1)")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (rewrite
                                                   "norm_sym"
                                                   1)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (lemma
                                     "nonoverlapping_collinear_seg_pts_dir_parallel")
                                    (("3"
                                      (inst
                                       -
                                       "e"
                                       "reverse_segment(s)"
                                       "e`p2"
                                       "s`p2")
                                      (("3"
                                        (ground)
                                        (("1"
                                          (rewrite
                                           "dir_parallel_diff"
                                           -1)
                                          (("1"
                                            (rewrite
                                             "dir_parallel_symm"
                                             -1)
                                            nil
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite
                                           "collinear_symmetric"
                                           1)
                                          (("2"
                                            (rewrite
                                             "collinear_reverse")
                                            nil
                                            nil))
                                          nil)
                                         ("3"
                                          (rewrite
                                           "are_segments_intersecting_alt_symmetric"
                                           -1)
                                          (("3"
                                            (rewrite
                                             "are_segments_intersecting_alt_reverse")
                                            nil
                                            nil))
                                          nil)
                                         ("4"
                                          (rewrite
                                           "point_on_reverse_segment")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4"
                        (case "min(min(min(norm(s`p1 - e`p1), norm(s`p1 - e`p2)),
              norm(s`p2 - e`p1)),
          norm(s`p2 - e`p2))
       = norm(s`p2 - e`p2)")
                        (("1" (hide 1 2 3 4 5)
                          (("1"
                            (lemma
                             "dir_parallel_segs_dist_bound_p1_p1")
                            (("1"
                              (inst - "reverse_segment(s)"
                               "reverse_segment(e)" "p" "q")
                              (("1"
                                (rewrite* "point_on_reverse_segment")
                                (("1"
                                  (expand "reverse_segment")
                                  (("1"
                                    (ground)
                                    (("1"
                                      (rewrite "norm_sym" -1)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (lemma
                                       "nonoverlapping_collinear_seg_pts_dir_parallel")
                                      (("2"
                                        (inst
                                         -
                                         "reverse_segment(s)"
                                         "reverse_segment(e)"
                                         "s`p1"
                                         "e`p2")
                                        (("2"
                                          (rewrite*
                                           "point_on_reverse_segment")
                                          (("2"
                                            (ground)
                                            (("1"
                                              (expand
                                               "reverse_segment")
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2"
                                              (rewrite
                                               "collinear_reverse")
                                              (("2"
                                                (rewrite
                                                 "collinear_symmetric"
                                                 1)
                                                (("2"
                                                  (rewrite
                                                   "collinear_reverse")
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (rewrite
                                               "are_segments_intersecting_alt_reverse")
                                              (("3"
                                                (rewrite
                                                 "are_segments_intersecting_alt_symmetric"
                                                 -1)
                                                (("3"
                                                  (rewrite
                                                   "are_segments_intersecting_alt_reverse")
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (expand
                                               "reverse_segment")
                                              (("4" (assert) nil nil))
                                              nil)
                                             ("5"
                                              (expand
                                               "reverse_segment")
                                              (("5"
                                                (rewrite "norm_sym" 1)
                                                (("5"
                                                  (equate
                                                   "norm(e`p2 - s`p1)"
                                                   "norm(s`p1 - e`p2)")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "norm_sym"
                                                     1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (lemma
                                       "nonoverlapping_collinear_seg_pts_dir_parallel")
                                      (("3"
                                        (inst
                                         -
                                         "reverse_segment(e)"
                                         "reverse_segment(s)"
                                         "e`p1"
                                         "s`p2")
                                        (("3"
                                          (ground)
                                          (("1"
                                            (expand "reverse_segment")
                                            (("1"
                                              (rewrite
                                               "dir_parallel_diff")
                                              (("1"
                                                (rewrite
                                                 "dir_parallel_symm")
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite
                                             "collinear_reverse")
                                            (("2"
                                              (rewrite
                                               "collinear_symmetric"
                                               1)
                                              (("2"
                                                (rewrite
                                                 "collinear_reverse")
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (rewrite
                                             "are_segments_intersecting_alt_reverse")
                                            (("3"
                                              (rewrite
                                               "are_segments_intersecting_alt_symmetric"
                                               -1)
                                              (("3"
                                                (rewrite
                                                 "are_segments_intersecting_alt_reverse")
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (rewrite*
                                             "point_on_reverse_segment")
                                            nil
                                            nil)
                                           ("5"
                                            (rewrite*
                                             "point_on_reverse_segment")
                                            nil
                                            nil)
                                           ("6"
                                            (expand "reverse_segment")
                                            (("6" (assert) nil nil))
                                            nil)
                                           ("7"
                                            (expand "reverse_segment")
                                            (("7" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "min")
                          (("2" (apply (repeat (lift-if)))
                            (("2" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite "collinear_symmetric") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (dropped_perp_with_no_extension_no_intersect_base 0
  (dropped_perp_with_no_extension_no_intersect_base-1 nil 3874129019
   ("" (skeep)
    (("" (skeep + t)
      (("" (expand "point_on_segment?")
        (("" (case "line_crossing(s, e) = None")
          (("1" (rewrite "no_line_crossing_eqv_parallel_or_collinear")
            (("1" (assert) nil nil)) nil)
           ("2"
            (name-replace "xing_pt" "val(line_crossing(s, e))" :hide?
             nil)
            (("1" (case "s`p1 = xing_pt or e`p1 = xing_pt")
              (("1" (use "line_crossing_commutative")
                (("1" (expand "extending_s_crosses_e")
                  (("1" (assert)
                    (("1" (replace -1 :dir rl)
                      (("1" (replace -3)
                        (("1" (split -2)
                          (("1" (replace -1 :dir rl)
                            (("1" (assert) nil nil)) nil)
                           ("2" (replace -1 :dir rl)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (lemma "line_crossing_on_line")
                  (("2" (inst-cp - "s" "e")
                    (("2" (inst - "e" "s")
                      (("2" (rewrite "line_crossing_commutative" -1)
                        (("2" (assert)
                          (("2" (assert)
                            (("2" (skeep*)
                              (("2"
                                (expand "extending_s_crosses_e")
                                (("2"
                                  (rewrite
                                   "line_crossing_commutative"
                                   7)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replace -3)
                                      (("2"
                                        (lemma
                                         "point_on_segment_has_norm_offset")
                                        (("2"
                                          (inst-cp - "q" "e")
                                          (("2"
                                            (inst - "p" "s")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (skeep*)
                                                (("2"
                                                  (case
                                                   "^(s`p1 - xing_pt) = ^(p - xing_pt)")
                                                  (("1"
                                                    (case
                                                     "^(e`p1 - xing_pt) = ^(q - xing_pt)")
                                                    (("1"
                                                      (name-replace*
                                                       ("s_dist"
                                                        "norm(s`p1 - xing_pt)"
                                                        "e_dist"
                                                        "norm(e`p1 - xing_pt)"))
                                                      (("1"
                                                        (name-replace*
                                                         ("a"
                                                          "if s_dist <= norm(s`p2 - xing_pt) then d else -d endif"
                                                          "b"
                                                          "if e_dist <= norm(e`p2 - xing_pt) then d!1 else -d!1 endif"))
                                                        (("1"
                                                          (case
                                                           "^(s`p2 - s`p1) = if s_dist <= norm(s`p2 - xing_pt) then
                                                                      ^(s`p1 - xing_pt) else -^(s`p1 - xing_pt) endif")
                                                          (("1"
                                                            (case
                                                             "^(e`p2 - e`p1) =
                                                                                   IF e_dist <= norm(e`p2 - xing_pt) THEN ^(e`p1 - xing_pt)
                                                                                   ELSE -^(e`p1 - xing_pt)
                                                                                   ENDIF")
                                                            (("1"
                                                              (case
                                                               "p = xing_pt + (s_dist + a) * ^(s`p1 - xing_pt)")
                                                              (("1"
                                                                (case
                                                                 "q = xing_pt + (e_dist + b) * ^(e`p1 - xing_pt)")
                                                                (("1"
                                                                  (case
                                                                   "norm(p - xing_pt) = if s_dist <= norm(s`p2 - xing_pt)
                                                                                                                       then s_dist + d else s_dist - d endif")
                                                                  (("1"
                                                                    (case
                                                                     "norm(q - xing_pt) = if e_dist <= norm(e`p2 - xing_pt)
                                                                                                                                 then e_dist + d!1 else e_dist - d!1 endif")
                                                                    (("1"
                                                                      (lemma
                                                                       "law_of_cosines_sq_vcos")
                                                                      (("1"
                                                                        (inst-cp
                                                                         -
                                                                         "s`p1"
                                                                         "xing_pt"
                                                                         "e`p1")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "p"
                                                                           "xing_pt"
                                                                           "q")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -13
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (replace
                                                                                 -14
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (name-replace
                                                                                   "cos_a"
                                                                                   "vcos(^(s`p1 - xing_pt), ^(e`p1 - xing_pt))")
                                                                                  (("1"
                                                                                    (equate
                                                                                     "norm(p - q)"
                                                                                     "norm(q - p)"
                                                                                     (rewrite
                                                                                      "norm_sym"))
                                                                                    (("1"
                                                                                      (case
                                                                                       "cos_a < 0")
                                                                                      (("1"
                                                                                        (case
                                                                                         "s_dist <= norm(s`p2 - xing_pt) & e_dist <= norm(e`p2 - xing_pt)")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -6)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -7)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -14)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -15)
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "sq_le"
                                                                                                       +
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -4)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -5)
                                                                                                          (("1"
                                                                                                            (hide-all-but
                                                                                                             (-3
                                                                                                              8))
                                                                                                            (("1"
                                                                                                              (grind)
                                                                                                              (("1"
                                                                                                                (cancel-add
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (move-terms
                                                                                                                   1
                                                                                                                   r
                                                                                                                   (1
                                                                                                                    2
                                                                                                                    3))
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (factor
                                                                                                                       1
                                                                                                                       l)
                                                                                                                      (("1"
                                                                                                                        (case
                                                                                                                         "2 * cos_a * (d!1 * d + d!1 * s_dist + d * e_dist) <= 0")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (mult-cases
                                                                                                                             1)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           -2
                                                                                           -3
                                                                                           -4
                                                                                           -5)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "cos_neg_inner_point_closer")
                                                                                            (("2"
                                                                                              (split
                                                                                               1)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "s`p1"
                                                                                                 "xing_pt"
                                                                                                 "e`p1"
                                                                                                 "s`p2")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (hide-all-but
                                                                                                       (-21
                                                                                                        1))
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "nearest_endpoints")
                                                                                                        (("1"
                                                                                                          (apply
                                                                                                           (repeat
                                                                                                            (lift-if)))
                                                                                                          (("1"
                                                                                                            (ground)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         8
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (expand
                                                                                                       "cos_a")
                                                                                                      (("3"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("4"
                                                                                                      (replace
                                                                                                       -17
                                                                                                       1)
                                                                                                      (("4"
                                                                                                        (equate
                                                                                                         "s`p1 - (s`p1 + k!1 * (s`p2 - s`p1))"
                                                                                                         "-k!1 * (s`p2 - s`p1)")
                                                                                                        (("1"
                                                                                                          (case-replace
                                                                                                           "k!1 = 0")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (inst
                                                                                                             +
                                                                                                             "(1 - k!1) / (-k!1)")
                                                                                                            (("1"
                                                                                                              (hide-all-but
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (grind-with-ext)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (case
                                                                                                               "0 <= k!1 <= 1")
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "point_on_segment_has_offset"
                                                                                                                 10)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   +
                                                                                                                   "k!1")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide-all-but
                                                                                                                     (1
                                                                                                                      2))
                                                                                                                    (("2"
                                                                                                                      (real-props)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide-all-but
                                                                                                                 (1
                                                                                                                  2))
                                                                                                                (("2"
                                                                                                                  (ground)
                                                                                                                  (("1"
                                                                                                                    (cross-mult
                                                                                                                     2)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (cross-mult
                                                                                                                     2)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (ground)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "e`p1"
                                                                                                 "xing_pt"
                                                                                                 "s`p1"
                                                                                                 "e`p2")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (hide-all-but
                                                                                                       (-21
                                                                                                        1))
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "nearest_endpoints")
                                                                                                        (("1"
                                                                                                          (apply
                                                                                                           (repeat
                                                                                                            (lift-if)))
                                                                                                          (("1"
                                                                                                            (ground)
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "norm_sym"
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (equate
                                                                                                                 "norm(e`p2 - s`p1)"
                                                                                                                 "norm(s`p1 - e`p2)"
                                                                                                                 (rewrite
                                                                                                                  "norm_sym"))
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         7
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (expand
                                                                                                       "cos_a")
                                                                                                      (("3"
                                                                                                        (hide-all-but
                                                                                                         (-1
                                                                                                          1))
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "vcos")
                                                                                                          (("3"
                                                                                                            (rewrite
                                                                                                             "dot_comm")
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("4"
                                                                                                      (replace
                                                                                                       -16
                                                                                                       1)
                                                                                                      (("4"
                                                                                                        (equate
                                                                                                         "e`p1 - (e`p1 + k * (e`p2 - e`p1))"
                                                                                                         "-k * (e`p2 - e`p1)")
                                                                                                        (("1"
                                                                                                          (case-replace
                                                                                                           "k = 0")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (inst
                                                                                                             +
                                                                                                             "(1 - k) / (-k)")
                                                                                                            (("1"
                                                                                                              (hide-all-but
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (grind-with-ext)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (case
                                                                                                               "0 <= k <= 1")
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "point_on_segment_has_offset"
                                                                                                                 9)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   +
                                                                                                                   "k")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide-all-but
                                                                                                                     (1
                                                                                                                      2))
                                                                                                                    (("2"
                                                                                                                      (real-props)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide-all-but
                                                                                                                 (1
                                                                                                                  2))
                                                                                                                (("2"
                                                                                                                  (ground)
                                                                                                                  (("1"
                                                                                                                    (cross-mult
                                                                                                                     2)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (cross-mult
                                                                                                                     2)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (ground)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide-all-but
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (rewrite
                                                                                         "sq_le"
                                                                                         +
                                                                                         :dir
                                                                                         rl)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -1
                                                                                           :hide?
                                                                                           t)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1
                                                                                             :hide?
                                                                                             t)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -1
                                                                                               :hide?
                                                                                               t)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -1
                                                                                                 :hide?
                                                                                                 t)
                                                                                                (("2"
                                                                                                  (case
                                                                                                   "if s_dist <= norm(s`p2 - xing_pt) then
                                            cos_a * e_dist <= s_dist else s_dist <= cos_a * e_dist endif")
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "if e_dist <= norm(e`p2 - xing_pt) then
                                              cos_a * s_dist <= e_dist else e_dist <= cos_a * s_dist endif")
                                                                                                    (("1"
                                                                                                      (apply
                                                                                                       (repeat
                                                                                                        (lift-if)))
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -9)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -10)
                                                                                                          (("1"
                                                                                                            (ground)
                                                                                                            (("1"
                                                                                                              (hide-all-but
                                                                                                               (-12
                                                                                                                -14
                                                                                                                1
                                                                                                                2))
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "sq")
                                                                                                                (("1"
                                                                                                                  (cancel-add
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (move-terms
                                                                                                                     1
                                                                                                                     r
                                                                                                                     (1
                                                                                                                      2
                                                                                                                      3))
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (case
                                                                                                                         "2 * (cos_a * d!1 * s_dist) + 2 * (cos_a * d * e_dist) <=
                                                                                                                                                              2 * (d!1 * e_dist) + 2 * (d * s_dist)")
                                                                                                                        (("1"
                                                                                                                          (add-formulas
                                                                                                                           1
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (cancel-add
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "2 * (cos_a * d!1 * d) <= 2 * (d!1 * d)")
                                                                                                                              (("1"
                                                                                                                                (case
                                                                                                                                 "0 <= sq(d!1 - d)")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "sq")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (typepred
                                                                                                                                 "cos_a")
                                                                                                                                (("2"
                                                                                                                                  (real-props)
                                                                                                                                  (("2"
                                                                                                                                    (equate
                                                                                                                                     "cos_a * d!1 * d"
                                                                                                                                     "cos_a * (d!1 * d)"
                                                                                                                                     (assert))
                                                                                                                                    (("2"
                                                                                                                                      (name-replace
                                                                                                                                       "dd"
                                                                                                                                       "d!1 * d")
                                                                                                                                      (("2"
                                                                                                                                        (mult-cases
                                                                                                                                         1
                                                                                                                                         :mult-op
                                                                                                                                         1*)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (mult-by
                                                                                                                             -1
                                                                                                                             "d")
                                                                                                                            (("2"
                                                                                                                              (mult-by
                                                                                                                               -2
                                                                                                                               "d!1")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide-all-but
                                                                                                               (-8
                                                                                                                -10
                                                                                                                1
                                                                                                                6))
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "sq")
                                                                                                                (("2"
                                                                                                                  (cancel-add
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (move-terms
                                                                                                                       1
                                                                                                                       r
                                                                                                                       (1
                                                                                                                        3
                                                                                                                        4))
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (move-terms
                                                                                                                           1
                                                                                                                           r
                                                                                                                           (1
                                                                                                                            3))
                                                                                                                          (("2"
                                                                                                                            (move-terms
                                                                                                                             1
                                                                                                                             l
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (elim-unary
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (real-props)
                                                                                                                                (("2"
                                                                                                                                  (case
                                                                                                                                   "-2 * (cos_a * d * e_dist) - 2 * (d!1 * e_dist) +
                                       2 * (cos_a * d!1 * s_dist)
                                       + 2 * (d * s_dist) <= 0")
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "d!1 * d!1 + d * d <= 2 * (cos_a * d!1 * d) + d!1 * d!1 + d * d")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide-all-but
                                                                                                                                       (1
                                                                                                                                        3))
                                                                                                                                      (("2"
                                                                                                                                        (cancel-add
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (mult-cases
                                                                                                                                           1)
                                                                                                                                          (("2"
                                                                                                                                            (mult-cases
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (mult-cases
                                                                                                                                               1)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (hide
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (cancel-by
                                                                                                                                       1
                                                                                                                                       "2")
                                                                                                                                      (("2"
                                                                                                                                        (factor
                                                                                                                                         2
                                                                                                                                         l
                                                                                                                                         (3
                                                                                                                                          2))
                                                                                                                                        (("2"
                                                                                                                                          (elim-unary
                                                                                                                                           2)
                                                                                                                                          (("2"
                                                                                                                                            (factor
                                                                                                                                             2
                                                                                                                                             l
                                                                                                                                             (2
                                                                                                                                              3))
                                                                                                                                            (("2"
                                                                                                                                              (mult-by
                                                                                                                                               -2
                                                                                                                                               "d")
                                                                                                                                              (("2"
                                                                                                                                                (mult-by
                                                                                                                                                 -3
                                                                                                                                                 "d!1")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (hide-all-but
                                                                                                               (-9
                                                                                                                -10
                                                                                                                2
                                                                                                                6))
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "sq")
                                                                                                                (("3"
                                                                                                                  (cancel-add
                                                                                                                   1)
                                                                                                                  (("3"
                                                                                                                    (assert)
                                                                                                                    (("3"
                                                                                                                      (move-terms
                                                                                                                       1
                                                                                                                       r
                                                                                                                       (1
                                                                                                                        3
                                                                                                                        4))
                                                                                                                      (("3"
                                                                                                                        (assert)
                                                                                                                        (("3"
                                                                                                                          (move-terms
                                                                                                                           1
                                                                                                                           r
                                                                                                                           (1
                                                                                                                            4))
                                                                                                                          (("3"
                                                                                                                            (move-terms
                                                                                                                             1
                                                                                                                             l
                                                                                                                             1)
                                                                                                                            (("3"
                                                                                                                              (assert)
                                                                                                                              (("3"
                                                                                                                                (elim-unary
                                                                                                                                 1)
                                                                                                                                (("3"
                                                                                                                                  (case
                                                                                                                                   "(2 * (d!1 * e_dist)) + 2 * (cos_a * d * e_dist) -
                                       (2 * (cos_a * d!1 * s_dist))
                                       - 2 * (d * s_dist) <=
                                   (2 * (d!1 * e_dist)) - (2 * (cos_a * d!1 * s_dist))")
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "d!1 * d!1 - 2 * d!1 * d + d * d <=
                                    2 * (cos_a * d!1 * d) + d!1 * d!1 + d * d")
                                                                                                                                    (("1"
                                                                                                                                      (equate
                                                                                                                                       "d!1 * d!1 - 2 * d!1 * d + d * d"
                                                                                                                                       "sq(d!1 - d)")
                                                                                                                                      (("1"
                                                                                                                                        (case
                                                                                                                                         "(2 * (d!1 * e_dist)) - (2 * (cos_a * d!1 * s_dist)) <= 0")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (hide-all-but
                                                                                                                                           (-3
                                                                                                                                            1))
                                                                                                                                          (("2"
                                                                                                                                            (factor
                                                                                                                                             1
                                                                                                                                             l)
                                                                                                                                            (("2"
                                                                                                                                              (mult-cases
                                                                                                                                               1)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (hide-all-but
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide-all-but
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (typepred
                                                                                                                                         "cos_a")
                                                                                                                                        (("2"
                                                                                                                                          (cancel-add
                                                                                                                                           1)
                                                                                                                                          (("2"
                                                                                                                                            (cancel-by
                                                                                                                                             1
                                                                                                                                             "2 * d!1 * d")
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (hide-all-but
                                                                                                                                     (-1
                                                                                                                                      1))
                                                                                                                                    (("2"
                                                                                                                                      (cancel-add
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (mult-by
                                                                                                                                         -1
                                                                                                                                         "2 * d")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("4"
                                                                                                              (hide-all-but
                                                                                                               (-5
                                                                                                                -6
                                                                                                                2
                                                                                                                10))
                                                                                                              (("4"
                                                                                                                (expand
                                                                                                                 "sq")
                                                                                                                (("4"
                                                                                                                  (cancel-add
                                                                                                                   1)
                                                                                                                  (("4"
                                                                                                                    (assert)
                                                                                                                    (("4"
                                                                                                                      (move-terms
                                                                                                                       1
                                                                                                                       r
                                                                                                                       (1
                                                                                                                        4
                                                                                                                        5))
                                                                                                                      (("4"
                                                                                                                        (assert)
                                                                                                                        (("4"
                                                                                                                          (move-terms
                                                                                                                           1
                                                                                                                           r
                                                                                                                           (1
                                                                                                                            2))
                                                                                                                          (("4"
                                                                                                                            (move-terms
                                                                                                                             1
                                                                                                                             l
                                                                                                                             3)
                                                                                                                            (("4"
                                                                                                                              (elim-unary
                                                                                                                               1)
                                                                                                                              (("4"
                                                                                                                                (factor
                                                                                                                                 1
                                                                                                                                 l
                                                                                                                                 (1
                                                                                                                                  2))
                                                                                                                                (("4"
                                                                                                                                  (factor
                                                                                                                                   1
                                                                                                                                   l
                                                                                                                                   (2
                                                                                                                                    3))
                                                                                                                                  (("4"
                                                                                                                                    (case
                                                                                                                                     "d!1 * d!1 + d * d - 2 * d!1 * d <=
                                  d!1 * d!1 + d * d - 2 * (cos_a * d!1 * d)")
                                                                                                                                    (("1"
                                                                                                                                      (equate
                                                                                                                                       "d!1 * d!1 + d * d - 2 * d!1 * d"
                                                                                                                                       "sq(d!1 - d)")
                                                                                                                                      (("1"
                                                                                                                                        (case
                                                                                                                                         "2 * d * (s_dist - cos_a * e_dist) +
                                           2 * d!1 * (-1 * cos_a * s_dist + e_dist) <= 0")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (hide
                                                                                                                                           -1
                                                                                                                                           2)
                                                                                                                                          (("2"
                                                                                                                                            (mult-by
                                                                                                                                             -1
                                                                                                                                             "2 * d")
                                                                                                                                            (("2"
                                                                                                                                              (mult-by
                                                                                                                                               -2
                                                                                                                                               "2 * d!1")
                                                                                                                                              (("2"
                                                                                                                                                (real-props)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (hide-all-but
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide-all-but
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (cancel-add
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (cancel-by
                                                                                                                                           1
                                                                                                                                           "2 * d!1 * d")
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       10)
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "cos_pos_find_perp_crossing_cases")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "s"
                                                                                                                 "e"
                                                                                                                 "s`p1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -20)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (split
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "cos_pos_len_le_imp_find_perp_ray_crossing")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -
                                                                                                                               "s`p1"
                                                                                                                               "xing_pt"
                                                                                                                               "e`p1")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "cos_a")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "e_dist")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (hide-all-but
                                                                                                                             (-2
                                                                                                                              -24))
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "nearest_endpoints")
                                                                                                                              (("2"
                                                                                                                                (apply
                                                                                                                                 (repeat
                                                                                                                                  (lift-if)))
                                                                                                                                (("2"
                                                                                                                                  (ground)
                                                                                                                                  (("2"
                                                                                                                                    (rewrite
                                                                                                                                     "norm_sym"
                                                                                                                                     -2)
                                                                                                                                    (("2"
                                                                                                                                      (equate
                                                                                                                                       "norm(e`p1 - s`p1)"
                                                                                                                                       "norm(s`p1 - e`p1)"
                                                                                                                                       (rewrite
                                                                                                                                        "norm_sym"))
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("3"
                                                                                                                          (flatten)
                                                                                                                          (("3"
                                                                                                                            (replace
                                                                                                                             -1
                                                                                                                             :dir
                                                                                                                             rl)
                                                                                                                            (("3"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("4"
                                                                                                                          (hide-all-but
                                                                                                                           1)
                                                                                                                          (("4"
                                                                                                                            (inst
                                                                                                                             +
                                                                                                                             "1")
                                                                                                                            (("4"
                                                                                                                              (grind-with-ext)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("5"
                                                                                                                          (expand
                                                                                                                           "cos_a")
                                                                                                                          (("5"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "cos_pos_find_perp_crossing_cases")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "s"
                                                                                                               "reverse_segment(e)"
                                                                                                               "s`p1")
                                                                                                              (("2"
                                                                                                                (rewrite
                                                                                                                 "line_crossing_reverse"
                                                                                                                 :dir
                                                                                                                 rl)
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "parallel_reverse"
                                                                                                                   :dir
                                                                                                                   rl)
                                                                                                                  (("2"
                                                                                                                    (rewrite
                                                                                                                     "collinear_symmetric")
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "collinear_reverse")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "reverse_segment")
                                                                                                                        (("2"
                                                                                                                          (replace
                                                                                                                           -19)
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "collinear_symmetric")
                                                                                                                            (("2"
                                                                                                                              (case-replace
                                                                                                                               "vcos(^(s`p1 - xing_pt), ^(e`p2 - xing_pt)) =
                                                                                            cos_a")
                                                                                                                              (("1"
                                                                                                                                (split
                                                                                                                                 -2
                                                                                                                                 :depth
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (split
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (lemma
                                                                                                                                     "find_perp_ray_crossing_reverse")
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "e"
                                                                                                                                       "s`p1")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "reverse_segment")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (hide-all-but
                                                                                                                                         (-1
                                                                                                                                          -23))
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "nearest_endpoints")
                                                                                                                                          (("2"
                                                                                                                                            (apply
                                                                                                                                             (repeat
                                                                                                                                              (lift-if)))
                                                                                                                                            (("2"
                                                                                                                                              (ground)
                                                                                                                                              (("2"
                                                                                                                                                (rewrite
                                                                                                                                                 "norm_sym"
                                                                                                                                                 -2)
                                                                                                                                                (("2"
                                                                                                                                                  (equate
                                                                                                                                                   "norm(e`p1 - s`p1)"
                                                                                                                                                   "norm(s`p1 - e`p1)"
                                                                                                                                                   (rewrite
                                                                                                                                                    "norm_sym"))
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("3"
                                                                                                                                    (flatten)
                                                                                                                                    (("3"
                                                                                                                                      (lemma
                                                                                                                                       "cos_pos_len_le_imp_find_perp_ray_crossing")
                                                                                                                                      (("3"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "s`p1"
                                                                                                                                         "xing_pt"
                                                                                                                                         "e`p1")
                                                                                                                                        (("3"
                                                                                                                                          (assert)
                                                                                                                                          (("3"
                                                                                                                                            (case-replace
                                                                                                                                             "vcos(^(s`p1 - xing_pt), ^(e`p1 - xing_pt)) = cos_a")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "find_perp_ray_crossing"
                                                                                                                                                 (-2
                                                                                                                                                  -3))
                                                                                                                                                (("1"
                                                                                                                                                  (propax)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (expand
                                                                                                                                               "cos_a")
                                                                                                                                              (("2"
                                                                                                                                                (propax)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (split
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -1
                                                                                                                                       :dir
                                                                                                                                       rl)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (rewrite
                                                                                                                                     "point_on_reverse_segment"
                                                                                                                                     9
                                                                                                                                     :dir
                                                                                                                                     rl)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "reverse_segment")
                                                                                                                                      (("2"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("3"
                                                                                                                                    (expand
                                                                                                                                     "e_dist")
                                                                                                                                    (("3"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("4"
                                                                                                                                    (hide-all-but
                                                                                                                                     1)
                                                                                                                                    (("4"
                                                                                                                                      (inst
                                                                                                                                       +
                                                                                                                                       "1")
                                                                                                                                      (("4"
                                                                                                                                        (grind-with-ext)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("5"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide
                                                                                                                                 -1)
                                                                                                                                (("2"
                                                                                                                                  (equate
                                                                                                                                   "^(e`p2 - xing_pt)"
                                                                                                                                   "^(e`p1 - xing_pt)")
                                                                                                                                  (("1"
                                                                                                                                    (hide-all-but
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "cos_a")
                                                                                                                                      (("1"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (expand
                                                                                                                                     "e_dist")
                                                                                                                                    (("2"
                                                                                                                                      (replace
                                                                                                                                       -16
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (equate
                                                                                                                                         "e`p1 - (e`p1 + k * (e`p2 - e`p1))"
                                                                                                                                         "-k * (e`p2 - e`p1)")
                                                                                                                                        (("1"
                                                                                                                                          (equate
                                                                                                                                           "s`p2 - (s`p1 + k!1 * (s`p2 - s`p1))"
                                                                                                                                           "(1 - k!1) * (s`p2 - s`p1)")
                                                                                                                                          (("1"
                                                                                                                                            (equate
                                                                                                                                             "e`p2 - (e`p1 + k * (e`p2 - e`p1))"
                                                                                                                                             "(1 - k) * (e`p2 - e`p1)")
                                                                                                                                            (("1"
                                                                                                                                              (rewrite
                                                                                                                                               "normalize_scal")
                                                                                                                                              (("1"
                                                                                                                                                (rewrite
                                                                                                                                                 "normalize_scal")
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "sign")
                                                                                                                                                  (("1"
                                                                                                                                                    (apply
                                                                                                                                                     (repeat
                                                                                                                                                      (lift-if)))
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (split
                                                                                                                                                         1)
                                                                                                                                                        (("1"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("1"
                                                                                                                                                            (split
                                                                                                                                                             1)
                                                                                                                                                            (("1"
                                                                                                                                                              (propax)
                                                                                                                                                              nil
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("2"
                                                                                                                                                                (rewrite
                                                                                                                                                                 "point_on_segment_has_offset"
                                                                                                                                                                 12)
                                                                                                                                                                (("2"
                                                                                                                                                                  (inst
                                                                                                                                                                   +
                                                                                                                                                                   "k")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (propax)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (equate
                                                                                                                                                   "k"
                                                                                                                                                   "0"
                                                                                                                                                   (assert))
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (equate
                                                                                                                                                 "k"
                                                                                                                                                 "1"
                                                                                                                                                 (assert))
                                                                                                                                                (("2"
                                                                                                                                                  (equate
                                                                                                                                                   "xing_pt"
                                                                                                                                                   "e`p2")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     (-16
                                                                                                                                                      1))
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (grind-with-ext)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (hide-all-but
                                                                                                                                               1)
                                                                                                                                              (("2"
                                                                                                                                                (grind)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (hide-all-but
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (grind)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (hide-all-but
                                                                                                                                           1)
                                                                                                                                          (("2"
                                                                                                                                            (grind)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("3"
                                                                                                                                (replace
                                                                                                                                 -1
                                                                                                                                 :dir
                                                                                                                                 rl)
                                                                                                                                (("3"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     10)
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "cos_pos_find_perp_crossing_cases")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -
                                                                                                               "e"
                                                                                                               "s"
                                                                                                               "e`p1")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   "line_crossing_commutative"
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -19)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (split
                                                                                                                         -1
                                                                                                                         :depth
                                                                                                                         2)
                                                                                                                        (("1"
                                                                                                                          (split
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "cos_pos_len_le_imp_find_perp_ray_crossing")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "e`p1"
                                                                                                                                 "xing_pt"
                                                                                                                                 "s`p1")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (equate
                                                                                                                                     "vcos(^(e`p1 - xing_pt), ^(s`p1 - xing_pt))"
                                                                                                                                     "cos_a")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide-all-but
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "cos_a")
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "vcos")
                                                                                                                                          (("2"
                                                                                                                                            (rewrite
                                                                                                                                             "dot_comm")
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (hide-all-but
                                                                                                                               (-2
                                                                                                                                -23))
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "nearest_endpoints")
                                                                                                                                (("2"
                                                                                                                                  (apply
                                                                                                                                   (repeat
                                                                                                                                    (lift-if)))
                                                                                                                                  (("2"
                                                                                                                                    (ground)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (split
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -1
                                                                                                                               :dir
                                                                                                                               rl)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (hide-all-but
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               +
                                                                                                                               "1")
                                                                                                                              (("2"
                                                                                                                                (grind-with-ext)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("3"
                                                                                                                            (hide-all-but
                                                                                                                             (1
                                                                                                                              3))
                                                                                                                            (("3"
                                                                                                                              (expand
                                                                                                                               "cos_a")
                                                                                                                              (("3"
                                                                                                                                (expand
                                                                                                                                 "vcos")
                                                                                                                                (("3"
                                                                                                                                  (rewrite
                                                                                                                                   "dot_comm")
                                                                                                                                  (("3"
                                                                                                                                    (ground)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("3"
                                                                                                                          (rewrite
                                                                                                                           "parallel_commutative"
                                                                                                                           -1)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("4"
                                                                                                                          (rewrite
                                                                                                                           "collinear_symmetric"
                                                                                                                           -1)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "cos_pos_find_perp_crossing_cases")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "e"
                                                                                                             "reverse_segment(s)"
                                                                                                             "e`p1")
                                                                                                            (("2"
                                                                                                              (rewrite
                                                                                                               "line_crossing_reverse"
                                                                                                               :dir
                                                                                                               rl)
                                                                                                              (("2"
                                                                                                                (rewrite
                                                                                                                 "parallel_reverse"
                                                                                                                 :dir
                                                                                                                 rl)
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "collinear_symmetric")
                                                                                                                  (("2"
                                                                                                                    (rewrite
                                                                                                                     "collinear_reverse")
                                                                                                                    (("2"
                                                                                                                      (rewrite
                                                                                                                       "parallel_commutative")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "reverse_segment")
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "line_crossing_commutative"
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -18)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (case-replace
                                                                                                                                 "vcos(^(e`p1 - xing_pt), ^(s`p2 - xing_pt)) =
                                                            cos_a")
                                                                                                                                (("1"
                                                                                                                                  (split
                                                                                                                                   -2
                                                                                                                                   :depth
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (split
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       "find_perp_ray_crossing_reverse")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "s"
                                                                                                                                         "e`p1")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "reverse_segment")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (flatten)
                                                                                                                                        (("2"
                                                                                                                                          (hide-all-but
                                                                                                                                           (-1
                                                                                                                                            -22))
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "nearest_endpoints")
                                                                                                                                            (("2"
                                                                                                                                              (apply
                                                                                                                                               (repeat
                                                                                                                                                (lift-if)))
                                                                                                                                              (("2"
                                                                                                                                                (ground)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("3"
                                                                                                                                      (flatten)
                                                                                                                                      (("3"
                                                                                                                                        (lemma
                                                                                                                                         "cos_pos_len_le_imp_find_perp_ray_crossing")
                                                                                                                                        (("3"
                                                                                                                                          (inst
                                                                                                                                           -
                                                                                                                                           "e`p1"
                                                                                                                                           "xing_pt"
                                                                                                                                           "s`p1")
                                                                                                                                          (("3"
                                                                                                                                            (assert)
                                                                                                                                            (("3"
                                                                                                                                              (case-replace
                                                                                                                                               "vcos(^(e`p1 - xing_pt), ^(s`p1 - xing_pt)) = cos_a")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "find_perp_ray_crossing"
                                                                                                                                                   (-2
                                                                                                                                                    -3))
                                                                                                                                                  (("1"
                                                                                                                                                    (propax)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (hide
                                                                                                                                                 -1
                                                                                                                                                 -2)
                                                                                                                                                (("2"
                                                                                                                                                  (hide-all-but
                                                                                                                                                   1)
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "cos_a")
                                                                                                                                                    (("2"
                                                                                                                                                      (expand
                                                                                                                                                       "vcos")
                                                                                                                                                      (("2"
                                                                                                                                                        (rewrite
                                                                                                                                                         "dot_comm")
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (split
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1
                                                                                                                                         :dir
                                                                                                                                         rl)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (rewrite
                                                                                                                                       "point_on_reverse_segment"
                                                                                                                                       10
                                                                                                                                       :dir
                                                                                                                                       rl)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "reverse_segment")
                                                                                                                                        (("2"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("3"
                                                                                                                                      (hide-all-but
                                                                                                                                       1)
                                                                                                                                      (("3"
                                                                                                                                        (inst
                                                                                                                                         +
                                                                                                                                         "1")
                                                                                                                                        (("3"
                                                                                                                                          (grind-with-ext)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("4"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (hide
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (equate
                                                                                                                                     "^(s`p2 - xing_pt)"
                                                                                                                                     "^(s`p1 - xing_pt)")
                                                                                                                                    (("1"
                                                                                                                                      (hide-all-but
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "cos_a")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "vcos")
                                                                                                                                          (("1"
                                                                                                                                            (rewrite
                                                                                                                                             "dot_comm")
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (expand
                                                                                                                                       "s_dist")
                                                                                                                                      (("2"
                                                                                                                                        (replace
                                                                                                                                         -16
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (equate
                                                                                                                                           "s`p1 - (s`p1 + k!1 * (s`p2 - s`p1))"
                                                                                                                                           "-k!1 * (s`p2 - s`p1)")
                                                                                                                                          (("1"
                                                                                                                                            (equate
                                                                                                                                             "s`p2 - (s`p1 + k!1 * (s`p2 - s`p1))"
                                                                                                                                             "(1 - k!1) * (s`p2 - s`p1)")
                                                                                                                                            (("1"
                                                                                                                                              (rewrite
                                                                                                                                               "normalize_scal")
                                                                                                                                              (("1"
                                                                                                                                                (rewrite
                                                                                                                                                 "normalize_scal")
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "sign")
                                                                                                                                                  (("1"
                                                                                                                                                    (apply
                                                                                                                                                     (repeat
                                                                                                                                                      (lift-if)))
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (split
                                                                                                                                                         1)
                                                                                                                                                        (("1"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("1"
                                                                                                                                                            (split
                                                                                                                                                             1)
                                                                                                                                                            (("1"
                                                                                                                                                              (propax)
                                                                                                                                                              nil
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("2"
                                                                                                                                                                (rewrite
                                                                                                                                                                 "point_on_segment_has_offset"
                                                                                                                                                                 13)
                                                                                                                                                                (("2"
                                                                                                                                                                  (inst
                                                                                                                                                                   +
                                                                                                                                                                   "k!1")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (propax)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (equate
                                                                                                                                                   "k!1"
                                                                                                                                                   "0"
                                                                                                                                                   (assert))
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (equate
                                                                                                                                                 "k!1"
                                                                                                                                                 "1"
                                                                                                                                                 (assert))
                                                                                                                                                (("2"
                                                                                                                                                  (equate
                                                                                                                                                   "xing_pt"
                                                                                                                                                   "s`p2")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (hide-all-but
                                                                                                                                                     (-15
                                                                                                                                                      1))
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (grind-with-ext)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (hide-all-but
                                                                                                                                               1)
                                                                                                                                              (("2"
                                                                                                                                                (grind)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (hide-all-but
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (grind)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("3"
                                                                                                                                  (replace
                                                                                                                                   -1
                                                                                                                                   :dir
                                                                                                                                   rl)
                                                                                                                                  (("3"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replace
                                                                       -2
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (rewrite
                                                                           "norm_scal")
                                                                          (("2"
                                                                            (expand
                                                                             "b"
                                                                             1)
                                                                            (("2"
                                                                              (apply
                                                                               (repeat
                                                                                (lift-if
                                                                                 1)))
                                                                              (("2"
                                                                                (expand
                                                                                 "abs")
                                                                                (("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (split
                                                                                           2)
                                                                                          (("1"
                                                                                            (move-terms
                                                                                             -1
                                                                                             l
                                                                                             1)
                                                                                            (("1"
                                                                                              (elim-unary
                                                                                               -1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "e_dist")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -17
                                                                                                   (-1
                                                                                                    -5
                                                                                                    7))
                                                                                                  (("1"
                                                                                                    (equate
                                                                                                     "e`p1 - (e`p1 + k * (e`p2 - e`p1))"
                                                                                                     "-k * (e`p2 - e`p1)")
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "norm_scal")
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "normalize_scal")
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "0 <= k <= 1")
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "point_on_segment_has_offset"
                                                                                                             7)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               +
                                                                                                               "k")
                                                                                                              (("1"
                                                                                                                (ground)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (ground)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "abs")
                                                                                                            (("2"
                                                                                                              (lift-if)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "length")
                                                                                                                (("2"
                                                                                                                  (split
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "sign")
                                                                                                                      (("1"
                                                                                                                        (mult-cases
                                                                                                                         -2
                                                                                                                         :mult-op
                                                                                                                         1*)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "sign")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (hide-all-but
                                                                                                                           -5)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "^")
                                                                                                                            (("2"
                                                                                                                              (name-replace
                                                                                                                               "n"
                                                                                                                               "norm(e`p2 - e`p1)")
                                                                                                                              (("2"
                                                                                                                                (cancel-by
                                                                                                                                 -1
                                                                                                                                 "1/n")
                                                                                                                                (("1"
                                                                                                                                  (name-replace
                                                                                                                                   "ee"
                                                                                                                                   "e`p2 - e`p1")
                                                                                                                                  (("1"
                                                                                                                                    (move-terms
                                                                                                                                     -1
                                                                                                                                     r)
                                                                                                                                    (("1"
                                                                                                                                      (elim-unary
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (factor
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("3"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (equate
                                                                                                             "k"
                                                                                                             "0"
                                                                                                             (assert))
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide-all-but
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     -2
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (rewrite
                                                                         "norm_scal")
                                                                        (("2"
                                                                          (expand
                                                                           "a"
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "abs")
                                                                            (("2"
                                                                              (apply
                                                                               (repeat
                                                                                (lift-if
                                                                                 1)))
                                                                              (("2"
                                                                                (split
                                                                                 1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (split
                                                                                     2)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "s_dist")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -17
                                                                                             (-1
                                                                                              -5
                                                                                              9))
                                                                                            (("1"
                                                                                              (equate
                                                                                               "s`p1 - (s`p1 + k!1 * (s`p2 - s`p1))"
                                                                                               "-k!1 * (s`p2 - s`p1)")
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "norm_scal")
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "normalize_scal")
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "0 <= k!1 <= 1")
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "point_on_segment_has_offset"
                                                                                                       9)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         +
                                                                                                         "k!1")
                                                                                                        (("1"
                                                                                                          (ground)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (ground)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "abs")
                                                                                                      (("2"
                                                                                                        (lift-if)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "length")
                                                                                                          (("2"
                                                                                                            (split
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "sign")
                                                                                                                (("1"
                                                                                                                  (move-terms
                                                                                                                   -2
                                                                                                                   l
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (elim-unary
                                                                                                                     -2)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (mult-cases
                                                                                                                         -2
                                                                                                                         :mult-op
                                                                                                                         1*)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "sign")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (hide-all-but
                                                                                                                     -5)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "^")
                                                                                                                      (("2"
                                                                                                                        (name-replace
                                                                                                                         "n"
                                                                                                                         "norm(s`p2 - s`p1)")
                                                                                                                        (("2"
                                                                                                                          (cancel-by
                                                                                                                           -1
                                                                                                                           "1/n")
                                                                                                                          (("1"
                                                                                                                            (name-replace
                                                                                                                             "ss"
                                                                                                                             "s`p2 - s`p1")
                                                                                                                            (("1"
                                                                                                                              (move-terms
                                                                                                                               -1
                                                                                                                               r)
                                                                                                                              (("1"
                                                                                                                                (elim-unary
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (factor
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("3"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (equate
                                                                                                       "k!1"
                                                                                                       "0"
                                                                                                       (assert))
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   -12
                                                                   1)
                                                                  (("2"
                                                                    (case
                                                                     "(e`p1 - xing_pt) + d!1 * ^(e`p2 - e`p1) =
                                                                                                           (e_dist + b) * ^(e`p1 - xing_pt)")
                                                                    (("1"
                                                                      (hide-all-but
                                                                       (-1
                                                                        1))
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         :dir
                                                                         rl
                                                                         :hide?
                                                                         t)
                                                                        (("1"
                                                                          (name-replace
                                                                           "ee"
                                                                           "^(e`p2 - e`p1)")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (expand
                                                                         "b"
                                                                         1)
                                                                        (("2"
                                                                          (replace
                                                                           -2
                                                                           1)
                                                                          (("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (apply
                                                                               (repeat
                                                                                (lift-if
                                                                                 1)))
                                                                              (("2"
                                                                                (expand
                                                                                 "e_dist")
                                                                                (("2"
                                                                                  (expand
                                                                                   "^")
                                                                                  (("2"
                                                                                    (name-replace
                                                                                     "n"
                                                                                     "norm(e`p1 - xing_pt)")
                                                                                    (("2"
                                                                                      (name-replace
                                                                                       "n2"
                                                                                       "norm(e`p2 - xing_pt)")
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -9
                                                                 1)
                                                                (("2"
                                                                  (case
                                                                   "(s`p1 - xing_pt) + d * ^(s`p2 - s`p1) = (s_dist + a) * ^(s`p1 - xing_pt)")
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-1
                                                                      1))
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       :dir
                                                                       rl
                                                                       :hide?
                                                                       t)
                                                                      (("1"
                                                                        (name-replace
                                                                         "ss"
                                                                         "^(s`p2 - s`p1)")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "a"
                                                                       1)
                                                                      (("2"
                                                                        (replace
                                                                         -2
                                                                         1)
                                                                        (("2"
                                                                          (apply
                                                                           (repeat
                                                                            (lift-if
                                                                             1)))
                                                                          (("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "s_dist")
                                                                              (("2"
                                                                                (expand
                                                                                 "^")
                                                                                (("2"
                                                                                  (name-replace
                                                                                   "n"
                                                                                   "norm(s`p1 - xing_pt)")
                                                                                  (("2"
                                                                                    (name-replace
                                                                                     "n2"
                                                                                     "norm(s`p2 - xing_pt)")
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "e_dist"
                                                               1)
                                                              (("2"
                                                                (replace
                                                                 -12
                                                                 1)
                                                                (("2"
                                                                  (equate
                                                                   "e`p1 - (e`p1 + k * (e`p2 - e`p1))"
                                                                   "-k * (e`p2 - e`p1)")
                                                                  (("1"
                                                                    (equate
                                                                     "e`p2 - (e`p1 + k * (e`p2 - e`p1))"
                                                                     "(1 - k) * (e`p2 - e`p1)")
                                                                    (("1"
                                                                      (rewrite
                                                                       "normalize_scal")
                                                                      (("1"
                                                                        (rewrite*
                                                                         "norm_scal")
                                                                        (("1"
                                                                          (case
                                                                           "0 <= k <= 1")
                                                                          (("1"
                                                                            (replace
                                                                             -13
                                                                             7)
                                                                            (("1"
                                                                              (rewrite
                                                                               "point_on_segment_has_offset"
                                                                               7)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (1
                                                                              2))
                                                                            (("2"
                                                                              (expand
                                                                               "sign")
                                                                              (("2"
                                                                                (name-replace
                                                                                 "n"
                                                                                 "norm((e`p2 - e`p1))")
                                                                                (("2"
                                                                                  (expand
                                                                                   "abs")
                                                                                  (("2"
                                                                                    (apply
                                                                                     (repeat
                                                                                      (lift-if)))
                                                                                    (("2"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (equate
                                                                           "k"
                                                                           "0"
                                                                           (assert))
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "s_dist"
                                                             1)
                                                            (("2"
                                                              (replace
                                                               -12
                                                               1)
                                                              (("2"
                                                                (equate
                                                                 "s`p1 - (s`p1 + k!1 * (s`p2 - s`p1))"
                                                                 "-k!1 * (s`p2 - s`p1)")
                                                                (("1"
                                                                  (equate
                                                                   "s`p2 - (s`p1 + k!1 * (s`p2 - s`p1))"
                                                                   "(1 - k!1) * (s`p2 - s`p1)")
                                                                  (("1"
                                                                    (rewrite
                                                                     "normalize_scal")
                                                                    (("1"
                                                                      (rewrite*
                                                                       "norm_scal")
                                                                      (("1"
                                                                        (case
                                                                         "0 <= k!1 <= 1")
                                                                        (("1"
                                                                          (replace
                                                                           -13
                                                                           8)
                                                                          (("1"
                                                                            (rewrite
                                                                             "point_on_segment_has_offset"
                                                                             8)
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (1
                                                                            2))
                                                                          (("2"
                                                                            (expand
                                                                             "sign")
                                                                            (("2"
                                                                              (name-replace
                                                                               "n"
                                                                               "norm((s`p2 - s`p1))")
                                                                              (("2"
                                                                                (expand
                                                                                 "abs")
                                                                                (("2"
                                                                                  (apply
                                                                                   (repeat
                                                                                    (lift-if)))
                                                                                  (("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (equate
                                                                         "k!1"
                                                                         "0"
                                                                         (assert))
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (rewrite
                                                       "dir_parallel_eqv_normalized_diffs_eq"
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (rewrite
                                                         "dir_parallel_symm")
                                                        (("2"
                                                          (expand
                                                           "dir_parallel?")
                                                          (("2"
                                                            (replace
                                                             -4
                                                             1)
                                                            (("2"
                                                              (replace
                                                               -6)
                                                              (("2"
                                                                (equate
                                                                 "e`p1 - (e`p1 + k * (e`p2 - e`p1))"
                                                                 "-k * (e`p2 - e`p1)")
                                                                (("1"
                                                                  (equate
                                                                   "e`p1 + d!1 * ^(e`p2 - e`p1) - (e`p1 + k * (e`p2 - e`p1))"
                                                                   "(d!1 / length(e) - k) * (e`p2 - e`p1)")
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "(d!1 / length(e) - k) / (-k)")
                                                                    (("1"
                                                                      (real-props)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (splash
                                                                       1
                                                                       t)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (cross-mult
                                                                         1)
                                                                        (("2"
                                                                          (ground)
                                                                          (("2"
                                                                            (rewrite
                                                                             "point_on_segment_has_offset"
                                                                             8)
                                                                            (("2"
                                                                              (inst
                                                                               +
                                                                               "k")
                                                                              (("2"
                                                                                (real-props)
                                                                                (("2"
                                                                                  (move-terms
                                                                                   2
                                                                                   r
                                                                                   2)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (case
                                                                                       "d!1 / length(e) <= 1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (real-props)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (equate
                                                                       "k"
                                                                       "0"
                                                                       (assert))
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "dir_parallel_eqv_normalized_diffs_eq"
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (rewrite
                                                       "dir_parallel_symm")
                                                      (("2"
                                                        (expand
                                                         "dir_parallel?")
                                                        (("2"
                                                          (replace
                                                           -1
                                                           1)
                                                          (("2"
                                                            (replace
                                                             -6)
                                                            (("2"
                                                              (equate
                                                               "s`p1 - (s`p1 + k!1 * (s`p2 - s`p1))"
                                                               "-k!1 * (s`p2 - s`p1)")
                                                              (("1"
                                                                (equate
                                                                 "s`p1 + d * ^(s`p2 - s`p1) - (s`p1 + k!1 * (s`p2 - s`p1))"
                                                                 "(d / length(s) - k!1) * (s`p2 - s`p1)")
                                                                (("1"
                                                                  (inst
                                                                   +
                                                                   "(d / length(s) - k!1) / (-k!1)")
                                                                  (("1"
                                                                    (real-props)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (splash
                                                                     1
                                                                     t)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (cross-mult
                                                                       1)
                                                                      (("2"
                                                                        (ground)
                                                                        (("2"
                                                                          (rewrite
                                                                           "point_on_segment_has_offset"
                                                                           9)
                                                                          (("2"
                                                                            (inst
                                                                             +
                                                                             "k!1")
                                                                            (("2"
                                                                              (real-props)
                                                                              (("2"
                                                                                (move-terms
                                                                                 2
                                                                                 r
                                                                                 2)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (case
                                                                                     "d / length(s) <= 1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (real-props)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (equate
                                                                     "k!1"
                                                                     "0"
                                                                     (assert))
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (dropped_perp_with_no_extension_no_intersect 0
  (dropped_perp_with_no_extension_no_intersect-1 nil 3874129019
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (skeep)
          (("" (expand "nearest_endpoints")
            ((""
              (lemma
               "dropped_perp_with_no_extension_no_intersect_base")
              (("" (apply (repeat (lift-if)))
                (("" (ground)
                  (("1" (inst - "s" "e")
                    (("1" (assert)
                      (("1" (ground)
                        (("1" (inst - "p" "q") (("1" (assert) nil nil))
                          nil)
                         ("2" (expand "nearest_endpoints")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst - "s" "reverse_segment(e)")
                    (("2" (split -5 :depth 1)
                      (("1" (inst - "p" "q")
                        (("1" (expand "reverse_segment" -1)
                          (("1" (assert) nil nil)) nil)
                         ("2" (expand "point_on_segment?")
                          (("2" (rewrite "point_on_reverse_segment")
                            (("2" (typepred "q")
                              (("2"
                                (expand "point_on_segment?" -1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (split 1)
                        (("1" (rewrite "parallel_reverse" :dir rl) nil
                          nil)
                         ("2" (rewrite "collinear_symmetric")
                          (("2" (rewrite "collinear_reverse")
                            (("2" (rewrite "collinear_symmetric") nil
                              nil))
                            nil))
                          nil)
                         ("3" (expand "extending_s_crosses_e")
                          (("3"
                            (rewrite "line_crossing_reverse" :dir rl)
                            (("3" (split -1)
                              (("1" (propax) nil nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (rewrite "point_on_reverse_segment")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (expand "extending_s_crosses_e")
                          (("4"
                            (rewrite "line_crossing_commutative" -1)
                            (("4"
                              (rewrite "line_crossing_reverse" -1 :dir
                               rl)
                              (("4"
                                (rewrite "line_crossing_commutative" 7)
                                nil
                                nil))
                              nil))
                            nil))
                          nil)
                         ("5" (expand "reverse_segment")
                          (("5" (expand "nearest_endpoints")
                            (("5" (apply (repeat (lift-if)))
                              (("5"
                                (ground)
                                (("5"
                                  (hide-all-but (-1 4))
                                  (("5"
                                    (expand "min")
                                    (("5" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("6"
                          (rewrite "find_perp_ray_crossing_reverse"
                           :dir rl)
                          (("6" (assert) nil nil)) nil)
                         ("7" (expand "reverse_segment")
                          (("7" (hide-all-but (-4 -6 1))
                            (("7" (replace -1 :hide? t)
                              (("7" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (inst - "reverse_segment(s)" "e")
                    (("3" (split -4 :depth 1)
                      (("1" (inst - "p" "q")
                        (("1" (expand "reverse_segment")
                          (("1" (assert) nil nil)) nil)
                         ("2" (expand "point_on_segment?")
                          (("2" (rewrite "point_on_reverse_segment")
                            (("2" (typepred "p")
                              (("2"
                                (expand "point_on_segment?" -1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (split 1)
                        (("1" (rewrite "parallel_commutative")
                          (("1" (rewrite "parallel_reverse" :dir rl)
                            (("1" (rewrite "parallel_commutative") nil
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "collinear_reverse") nil nil)
                         ("3" (expand "extending_s_crosses_e")
                          (("3"
                            (rewrite "line_crossing_commutative" -1)
                            (("3"
                              (rewrite "line_crossing_reverse" :dir rl)
                              (("3"
                                (rewrite
                                 "line_crossing_commutative"
                                 -1)
                                nil
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (expand "extending_s_crosses_e")
                          (("4"
                            (rewrite "line_crossing_reverse" :dir rl)
                            (("4" (rewrite "point_on_reverse_segment")
                              nil nil))
                            nil))
                          nil)
                         ("5" (expand "reverse_segment")
                          (("5" (expand "nearest_endpoints")
                            (("5" (apply (repeat (lift-if)))
                              (("5"
                                (assert)
                                (("5"
                                  (split 1)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (hide-all-but (-2 1))
                                    (("2"
                                      (expand "min")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("6" (expand "reverse_segment")
                          (("6"
                            (expand "find_perp_ray_crossing" (-4 1))
                            (("6" (replace -1) (("6" (propax) nil nil))
                              nil))
                            nil))
                          nil)
                         ("7"
                          (rewrite "find_perp_ray_crossing_reverse"
                           :dir rl)
                          (("7" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("4"
                    (inst - "reverse_segment(s)" "reverse_segment(e)")
                    (("4" (split -3 :depth 1)
                      (("1" (inst - "p" "q")
                        (("1" (expand "reverse_segment")
                          (("1" (assert) nil nil)) nil)
                         ("2" (expand "point_on_segment?")
                          (("2" (rewrite "point_on_reverse_segment")
                            (("2" (typepred "q")
                              (("2"
                                (expand "point_on_segment?" -1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "point_on_segment?")
                          (("3" (rewrite "point_on_reverse_segment")
                            (("3" (typepred "p")
                              (("3"
                                (expand "point_on_segment?" -1)
                                (("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (split 1)
                        (("1" (rewrite "parallel_reverse" :dir rl)
                          (("1" (rewrite "parallel_commutative")
                            (("1" (rewrite "parallel_reverse" :dir rl)
                              (("1"
                                (rewrite "parallel_commutative")
                                nil
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "collinear_reverse")
                          (("2" (rewrite "collinear_symmetric")
                            (("2" (rewrite "collinear_reverse")
                              (("2"
                                (rewrite "collinear_symmetric")
                                nil
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "extending_s_crosses_e")
                          (("3"
                            (rewrite "line_crossing_reverse" :dir rl)
                            (("3" (rewrite "line_crossing_commutative")
                              (("3"
                                (rewrite
                                 "line_crossing_reverse"
                                 :dir
                                 rl)
                                (("3"
                                  (rewrite "line_crossing_commutative")
                                  (("3"
                                    (rewrite
                                     "point_on_reverse_segment"
                                     -1)
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (expand "extending_s_crosses_e")
                          (("4"
                            (rewrite "line_crossing_reverse" :dir rl)
                            (("4" (rewrite "line_crossing_commutative")
                              (("4"
                                (rewrite
                                 "line_crossing_reverse"
                                 :dir
                                 rl)
                                (("4"
                                  (rewrite
                                   "point_on_reverse_segment"
                                   -1)
                                  (("4"
                                    (rewrite
                                     "line_crossing_commutative")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("5" (expand "reverse_segment")
                          (("5" (expand "nearest_endpoints")
                            (("5" (apply (repeat (lift-if)))
                              (("5"
                                (assert)
                                (("5"
                                  (split 1)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (expand "min")
                                    (("2"
                                      (apply (repeat (lift-if)))
                                      (("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("6" (expand "reverse_segment" 1 2)
                          (("6"
                            (rewrite "find_perp_ray_crossing_reverse"
                             :dir rl)
                            (("6"
                              (expand "find_perp_ray_crossing" (-4 1))
                              (("6"
                                (replace -1)
                                (("6"
                                  (replace -2)
                                  (("6"
                                    (expand "point_on_segment?")
                                    (("6" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("7"
                          (rewrite "find_perp_ray_crossing_reverse"
                           :dir rl)
                          (("7" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (dropped_perp_from_e_with_no_extension_intersect_TCC1 0
  (dropped_perp_from_e_with_no_extension_intersect_TCC1-2 nil
   3874129019
   ("" (skeep)
    (("" (use "no_line_crossing_eqv_parallel_or_collinear")
      (("" (ground) nil nil)) nil))
    nil)
   nil shostak
   (dropped_perp_from_e_with_no_extension_intersect subtype
    "perp_crossings.line_crossing(nearest_segment_points.s, nearest_segment_points.e)"
    "(Maybe[point_2d].some?)"))
  (dropped_perp_from_e_with_no_extension_intersect_TCC1-1 nil
   3874128136 ("" (subtype-tcc) nil nil) nil nil
   (dropped_perp_from_e_with_no_extension_intersect subtype
    "perp_crossings.line_crossing(nearest_segment_points.s, nearest_segment_points.e)"
    "(Maybe[point_2d].some?)")))
 (dropped_perp_from_e_with_no_extension_intersect_TCC2 0
  (dropped_perp_from_e_with_no_extension_intersect_TCC2-2 nil
   3874129019 ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   nil shostak
   (dropped_perp_from_e_with_no_extension_intersect subtype
    "perp_crossings.find_perp_ray_crossing(nearest_segment_points.s, nearest_segment_points.e_closest_endpt)"
    "(Maybe[point_2d].some?)"))
  (dropped_perp_from_e_with_no_extension_intersect_TCC2-1 nil
   3874128136 ("" (subtype-tcc) nil nil) nil nil
   (dropped_perp_from_e_with_no_extension_intersect subtype
    "perp_crossings.find_perp_ray_crossing(nearest_segment_points.s, nearest_segment_points.e_closest_endpt)"
    "(Maybe[point_2d].some?)")))
 (dropped_perp_from_e_with_no_extension_intersect 0
  (dropped_perp_from_e_with_no_extension_intersect-1 nil 3874129019
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (use "line_crossing_commutative")
          (("" (skeep)
            (("" (lemma "dropped_perp_after_extension_intersect")
              (("" (inst - "e" "s")
                (("" (rewrite "parallel_commutative" -1)
                  (("" (rewrite "collinear_symmetric" -1)
                    (("" (replace -2 :dir rl)
                      (("" (replace -4 :dir rl)
                        (("" (replace -3 :dir rl)
                          (("" (assert)
                            (("" (inst - "q" "p")
                              ((""
                                (equate "norm(q - p)" "norm(p - q)")
                                (("" (rewrite "norm_sym" 1) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (dropped_perp_from_s_with_no_extension_intersect_TCC1 0
  (dropped_perp_from_s_with_no_extension_intersect_TCC1-2 nil
   3874129019 ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   nil shostak
   (dropped_perp_from_s_with_no_extension_intersect subtype
    "perp_crossings.find_perp_ray_crossing(nearest_segment_points.e, nearest_segment_points.s_closest_endpt)"
    "(Maybe[point_2d].some?)"))
  (dropped_perp_from_s_with_no_extension_intersect_TCC1-1 nil
   3874128136 ("" (subtype-tcc) nil nil) nil nil
   (dropped_perp_from_s_with_no_extension_intersect subtype
    "perp_crossings.find_perp_ray_crossing(nearest_segment_points.e, nearest_segment_points.s_closest_endpt)"
    "(Maybe[point_2d].some?)")))
 (dropped_perp_from_s_with_no_extension_intersect 0
  (dropped_perp_from_s_with_no_extension_intersect-1 nil 3874129019
   ("" (skeep 1 t)
    (("" (use "dropped_perp_after_extension_intersect")
      (("" (assert) nil nil)) nil))
    nil)
   nil shostak))
 (parallel_nonoverlapping_segs_closest_at_endpts 0
  (parallel_nonoverlapping_segs_closest_at_endpts-1 nil 3874129019
   ("" (skeep* + t)
    (("" (expand "point_on_segment?")
      (("" (use "parallel_nonoverlapping_xing_pt_offsets")
        (("" (split -1)
          (("1" (inst - "nearest_endpoints(s, e)`1" "q")
            (("1" (skoletin*)
              (("1" (flatten)
                (("1" (replace -6 :dir rl)
                  (("1" (replace -7 :dir rl)
                    (("1"
                      (name-replace*
                       ("xu" "find_perp_ray_line_crossing(e, u)" "xq"
                        "find_perp_ray_line_crossing(s, q)"))
                      (("1" (skeep*)
                        (("1"
                          (lemma
                           "projected_point_preserves_distance_ordering")
                          (("1" (inst-cp - "e" "q" "v" "u")
                            (("1" (inst - "s" "p" "u" "q")
                              (("1"
                                (assert)
                                (("1"
                                  (replace -3)
                                  (("1"
                                    (replace -4)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (hide -2 -4)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (split -2)
                                            (("1"
                                              (rewrite "norm_sym" -1)
                                              (("1"
                                                (equate
                                                 "norm(p - q)"
                                                 "norm(q - p)")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (rewrite
                                                   "norm_sym"
                                                   1)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -5 1)
                                              (("2"
                                                (case
                                                 "point_on_segment?(q, (# p1 := v, p2 := ov #))")
                                                (("1"
                                                  (rewrite
                                                   "point_on_segment_has_offset")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (equate
                                                           (! 1 l 1)
                                                           "(k - d) * (ov - v)")
                                                          (("1"
                                                            (rewrite*
                                                             "norm_scal")
                                                            (("1"
                                                              (mult-cases
                                                               1)
                                                              (("1"
                                                                (real-props)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but
                                                   (-7 -9 -12 1))
                                                  (("2"
                                                    (replace
                                                     -1
                                                     :hide?
                                                     t)
                                                    (("2"
                                                      (replace
                                                       -1
                                                       :hide?
                                                       t)
                                                      (("2"
                                                        (expand
                                                         "opposite_endpoint")
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (ground)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "nearest_endpoints")
                                                              (("2"
                                                                (apply
                                                                 (repeat
                                                                  (lift-if)))
                                                                (("2"
                                                                  (ground)
                                                                  (("1"
                                                                    (rewrite
                                                                     "point_on_reverse_segment"
                                                                     1
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (hide-all-but
                                                                       (-3
                                                                        1))
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      2))
                                                                    (("2"
                                                                      (rewrite
                                                                       "point_on_reverse_segment"
                                                                       1
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide-all-but (-7 1))
                                                  (("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (replace -6 1)
                                            (("2"
                                              (case
                                               "point_on_segment?(p, (# p1 := u, p2 := ou #))")
                                              (("1"
                                                (rewrite
                                                 "point_on_segment_has_offset")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (equate
                                                         (! 1 l 1)
                                                         "(k!1 - d) * (ou - u)")
                                                        (("1"
                                                          (rewrite*
                                                           "norm_scal")
                                                          (("1"
                                                            (mult-cases
                                                             1)
                                                            (("1"
                                                              (real-props)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but
                                                 (-8 -10 -11 1))
                                                (("2"
                                                  (replace -1 :hide? t)
                                                  (("2"
                                                    (replace
                                                     -1
                                                     :hide?
                                                     t)
                                                    (("2"
                                                      (expand
                                                       "opposite_endpoint")
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (ground)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "nearest_endpoints")
                                                            (("2"
                                                              (apply
                                                               (repeat
                                                                (lift-if)))
                                                              (("2"
                                                                (ground)
                                                                (("2"
                                                                  (hide-all-but
                                                                   (-1
                                                                    2))
                                                                  (("2"
                                                                    (rewrite
                                                                     "point_on_reverse_segment"
                                                                     1
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide-all-but (-8 1))
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -10 1)
                                (("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (expand "nearest_endpoints")
                                    (("2"
                                      (expand "point_on_segment?")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "point_on_segment?")
                              (("2"
                                (replace -8 1)
                                (("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (expand "nearest_endpoints")
                                    (("2"
                                      (apply (repeat (lift-if)))
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1)
              (("2" (expand "point_on_segment?")
                (("2" (expand "nearest_endpoints")
                  (("2" (apply (repeat (lift-if)))
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (parallel_overlapping_segs_closest_at_perps_TCC1 0
  (parallel_overlapping_segs_closest_at_perps_TCC1-2 nil 3874129019
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (parallel_overlapping_segs_closest_at_perps subtype
    "perp_crossings.find_perp_ray_crossing(nearest_segment_points.e, nearest_segment_points.r)"
    "(Maybe[point_2d].some?)"))
  (parallel_overlapping_segs_closest_at_perps_TCC1-1 nil 3874128136
   ("" (subtype-tcc) nil nil) nil nil
   (parallel_overlapping_segs_closest_at_perps subtype
    "perp_crossings.find_perp_ray_crossing(nearest_segment_points.e, nearest_segment_points.r)"
    "(Maybe[point_2d].some?)")))
 (parallel_overlapping_segs_closest_at_perps 0
  (parallel_overlapping_segs_closest_at_perps-1 nil 3874129019
   ("" (skeep* + t)
    (("" (rewrite "perp_ray_crossing_is_perp_ray_line_crossing")
      (("" (expand "point_on_segment?")
        (("" (rewrite* "point_on_segment_has_offset")
          (("" (skeep*)
            (("" (lemma "parallel_lines_same_distance_at_all_points")
              (("" (inst - "s" "e" "r" "p")
                (("" (ground)
                  (("1" (replace -1)
                    (("1" (rewrite "norm_sym" +)
                      (("1" (rewrite "perp_is_shortest_on_line")
                        (("1" (inst?) nil nil) ("2" (inst?) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst?) nil nil) ("3" (inst?) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (endpoint_nearest_point_btw_segs_subcase_base_TCC1 0
  (endpoint_nearest_point_btw_segs_subcase_base_TCC1-2 nil 3874129019
   ("" (skeep)
    (("" (use "no_line_crossing_eqv_parallel_or_collinear")
      (("" (ground) nil nil)) nil))
    nil)
   nil shostak
   (endpoint_nearest_point_btw_segs_subcase_base subtype
    "perp_crossings.line_crossing(nearest_segment_points.s, nearest_segment_points.e)"
    "(Maybe[point_2d].some?)"))
  (endpoint_nearest_point_btw_segs_subcase_base_TCC1-1 nil 3874128136
   ("" (subtype-tcc) nil nil) nil nil
   (endpoint_nearest_point_btw_segs_subcase_base subtype
    "perp_crossings.line_crossing(nearest_segment_points.s, nearest_segment_points.e)"
    "(Maybe[point_2d].some?)")))
 (endpoint_nearest_point_btw_segs_subcase_base 0
  (endpoint_nearest_point_btw_segs_subcase_base-1 nil 3874129019
   ("" (skeep + t)
    (("" (skoletin)
      (("" (flatten)
        (("" (use "line_crossing_commutative")
          (("" (use "no_line_crossing_eqv_parallel_or_collinear")
            (("" (assert)
              ((""
                (case "xing_pt = s`p1 or xing_pt = s`p2 or xing_pt = e`p1")
                (("1" (expand "extending_s_crosses_e")
                  (("1" (replace -2 :dir rl)
                    (("1" (replace -6 :dir rl)
                      (("1" (ground)
                        (("1" (replace -1) (("1" (assert) nil nil))
                          nil)
                         ("2" (replace -1) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (case "^(s`p2 - xing_pt) = ^(s`p1 - xing_pt)")
                    (("1"
                      (case "vcos(^(s`p1 - xing_pt), ^(e`p1 - xing_pt)) < 0")
                      (("1" (lemma "cos_neg_inner_point_closer_lt")
                        (("1" (inst - "s`p1" "xing_pt" "e`p1" "s`p2")
                          (("1" (assert)
                            (("1"
                              (inst +
                               "norm(s`p2 - xing_pt) / norm(s`p1 - xing_pt)")
                              (("1"
                                (name-replace
                                 "nn"
                                 "norm(s`p2 - xing_pt) / norm(s`p1 - xing_pt)")
                                (("1"
                                  (move-terms 1 r 1)
                                  (("1"
                                    (expand "nn")
                                    (("1"
                                      (cross-mult 1)
                                      (("1"
                                        (use "line_crossing_on_line")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (replace -8 :dir rl)
                                              (("1"
                                                (replace -1 1)
                                                (("1"
                                                  (equate
                                                   "s`p2 - (s`p1 + k * (s`p2 - s`p1))"
                                                   "(1 - k) * (s`p2 - s`p1)")
                                                  (("1"
                                                    (equate
                                                     "s`p1 - (s`p1 + k * (s`p2 - s`p1))"
                                                     "-k * (s`p2 - s`p1)")
                                                    (("1"
                                                      (rewrite*
                                                       "norm_scal")
                                                      (("1"
                                                        (expand "abs")
                                                        (("1"
                                                          (apply
                                                           (repeat
                                                            (lift-if)))
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (expand
                                                               "extending_s_crosses_e")
                                                              (("1"
                                                                (replace
                                                                 -5
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (rewrite
                                                                   "point_on_segment_has_offset"
                                                                   9)
                                                                  (("1"
                                                                    (inst
                                                                     +
                                                                     "k")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (cross-mult 1) nil nil)
                               ("3"
                                (ground)
                                (("3"
                                  (use "norm_eq_0")
                                  (("3" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2"
                        (case "find_perp_ray_crossing(s, e`p1) = None")
                        (("1"
                          (lemma "cos_pos_find_perp_crossing_cases")
                          (("1" (inst - "e" "s" "e`p1")
                            (("1" (assert)
                              (("1"
                                (replace -4 :dir rl)
                                (("1"
                                  (replace -8 :dir rl)
                                  (("1"
                                    (ground)
                                    (("1"
                                      (lemma
                                       "cos_pos_len_le_imp_find_perp_ray_crossing")
                                      (("1"
                                        (inst-cp
                                         -
                                         "s`p2"
                                         "xing_pt"
                                         "e`p1")
                                        (("1"
                                          (inst
                                           -
                                           "e`p1"
                                           "xing_pt"
                                           "s`p2")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -6)
                                              (("1"
                                                (case-replace
                                                 "vcos(^(e`p1 - xing_pt), ^(s`p1 - xing_pt)) =
              vcos(^(s`p1 - xing_pt), ^(e`p1 - xing_pt))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (name-replace
                                                     "cos_a"
                                                     "vcos(^(s`p1 - xing_pt), ^(e`p1 - xing_pt))")
                                                    (("1"
                                                      (replace -4)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "find_perp_ray_crossing"
                                                           (-2 +))
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (split +)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "line_crossing((# p1 := s`p2,
                              p2 := s`p2 + perp_right(e`p1 - xing_pt) #),
                            (# p1 := xing_pt, p2 := e`p1 #)) = None")
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (mult-by
                                                                           2
                                                                           "cos_a")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (case
                                                                               "cos_a * cos_a <= 1")
                                                                              (("1"
                                                                                (name-replace
                                                                                 "nc"
                                                                                 "norm(s`p2 - xing_pt) * cos_a")
                                                                                (("1"
                                                                                  (equate
                                                                                   "norm(e`p1 - xing_pt) * cos_a * cos_a"
                                                                                   "(cos_a * cos_a) * norm(e`p1 - xing_pt)")
                                                                                  (("1"
                                                                                    (mult-cases
                                                                                     2
                                                                                     :mult-op
                                                                                     1*)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nc")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "abs")
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (mult-cases
                                                                                 1)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "collinear_perp_line_crossings_same")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "e"
                                                                         "(# p1 := xing_pt, p2 := e`p1 #)"
                                                                         "s`p2")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (name-replace
                                                                                 "lc"
                                                                                 "line_crossing((# p1 := s`p2,
                                             p2
                                             := s`p2
                                                +
                                                perp_right
                                                (e`p1 - xing_pt) #),
                                          (# p1 := xing_pt,
                                             p2 := e`p1 #))")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (case-replace
                                                                                     "val(lc) = e`p1")
                                                                                    (("1"
                                                                                      (split
                                                                                       -)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (case-replace
                                                                                           "norm(e`p1 - xing_pt) = cos_a * norm(s`p2 - xing_pt)")
                                                                                          (("1"
                                                                                            (equate
                                                                                             "cos_a * (cos_a * norm(s`p2 - xing_pt))"
                                                                                             "(cos_a * cos_a) * norm(s`p2 - xing_pt)"
                                                                                             (assert))
                                                                                            (("1"
                                                                                              (mult-cases
                                                                                               3
                                                                                               :mult-op
                                                                                               1*)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "abs")
                                                                                                (("1"
                                                                                                  (mult-cases
                                                                                                   1)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (lemma
                                                                                             "perp_line_crossing_point_val")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "s"
                                                                                               "e"
                                                                                               "s`p2")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -16
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "find_perp_ray_line_crossing")
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -5)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -4)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (equate
                                                                                                               "vcos(^(e`p2 - e`p1), ^(s`p2 - (xing_pt)))"
                                                                                                               "cos_a")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "abs")
                                                                                                                (("1"
                                                                                                                  (lift-if)
                                                                                                                  (("1"
                                                                                                                    (ground)
                                                                                                                    (("1"
                                                                                                                      (case-replace
                                                                                                                       "cos_a = 0")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (cancel-by
                                                                                                                         -1
                                                                                                                         "cos_a")
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "cos_a")
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -11)
                                                                                                                  (("2"
                                                                                                                    (equate
                                                                                                                     "^(e`p2 - e`p1)"
                                                                                                                     "^(e`p1 - xing_pt)")
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "line_crossing_on_line")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "e"
                                                                                                                         "s")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (skeep)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -13
                                                                                                                               :dir
                                                                                                                               rl)
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -17
                                                                                                                                 :dir
                                                                                                                                 rl)
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -1
                                                                                                                                   (-16
                                                                                                                                    1))
                                                                                                                                  (("2"
                                                                                                                                    (equate
                                                                                                                                     "e`p1 - (e`p1 + k * (e`p2 - e`p1))"
                                                                                                                                     "-k * (e`p2 - e`p1)")
                                                                                                                                    (("1"
                                                                                                                                      (equate
                                                                                                                                       "e`p2 - (e`p1 + k * (e`p2 - e`p1))"
                                                                                                                                       "(1 - k) * (e`p2 - e`p1)")
                                                                                                                                      (("1"
                                                                                                                                        (rewrite*
                                                                                                                                         "norm_scal")
                                                                                                                                        (("1"
                                                                                                                                          (rewrite
                                                                                                                                           "normalize_scal")
                                                                                                                                          (("1"
                                                                                                                                            (cancel-by
                                                                                                                                             -16
                                                                                                                                             "norm(e`p2 - e`p1)")
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "sign")
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "abs"
                                                                                                                                                 -)
                                                                                                                                                (("1"
                                                                                                                                                  (apply
                                                                                                                                                   (repeat
                                                                                                                                                    (lift-if)))
                                                                                                                                                  (("1"
                                                                                                                                                    (ground)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "extending_s_crosses_e")
                                                                                                                                                      (("1"
                                                                                                                                                        (rewrite
                                                                                                                                                         "point_on_segment_has_offset"
                                                                                                                                                         +)
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           +
                                                                                                                                                           "k")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (equate
                                                                                                                                             "k"
                                                                                                                                             "0"
                                                                                                                                             (assert))
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (hide-all-but
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide-all-but
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "point_on_segment?")
                                                                                          (("2"
                                                                                            (inst
                                                                                             +
                                                                                             "1")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (split
                                                                                       -)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (rewrite*
                                                                                           "point_on_segment_has_offset")
                                                                                          (("1"
                                                                                            (skeep*)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "line_crossing_on_line")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -
                                                                                                 "e"
                                                                                                 "s")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (skeep)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -13
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -17
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (equate
                                                                                                             "e`p1 - (e`p1 + k * (e`p2 - e`p1))"
                                                                                                             "-k * (e`p2 - e`p1)")
                                                                                                            (("1"
                                                                                                              (factor
                                                                                                               -2
                                                                                                               r
                                                                                                               (2
                                                                                                                3))
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -6
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (cancel-add
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (use
                                                                                                                     "scal_cancel")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (equate
                                                                                                                         "d * -k + k"
                                                                                                                         "k * (1 - d)")
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "k >= 0")
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -3
                                                                                                                             -18)
                                                                                                                            (("1"
                                                                                                                              (equate
                                                                                                                               "e`p1 - (e`p1 + k * (e`p2 - e`p1))"
                                                                                                                               "-k * (e`p2 - e`p1)")
                                                                                                                              (("1"
                                                                                                                                (equate
                                                                                                                                 "e`p2 - (e`p1 + k * (e`p2 - e`p1))"
                                                                                                                                 "(1 - k) * (e`p2 - e`p1)")
                                                                                                                                (("1"
                                                                                                                                  (rewrite*
                                                                                                                                   "norm_scal")
                                                                                                                                  (("1"
                                                                                                                                    (cancel-by
                                                                                                                                     -18
                                                                                                                                     "norm(e`p2 - e`p1)")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "abs")
                                                                                                                                      (("1"
                                                                                                                                        (apply
                                                                                                                                         (repeat
                                                                                                                                          (lift-if)))
                                                                                                                                        (("1"
                                                                                                                                          (ground)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "extending_s_crosses_e")
                                                                                                                                            (("1"
                                                                                                                                              (rewrite
                                                                                                                                               "point_on_segment_has_offset"
                                                                                                                                               +)
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 +
                                                                                                                                                 "k")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (expand
                                                                                                                                             "extending_s_crosses_e")
                                                                                                                                            (("2"
                                                                                                                                              (propax)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (hide-all-but
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide-all-but
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (case
                                                                                                                             "k * (1 - d) <= 0")
                                                                                                                            (("1"
                                                                                                                              (case-replace
                                                                                                                               "d!1 = 0")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (mult-cases
                                                                                                                               1)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide-all-but
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (mult-by
                                                                                           2
                                                                                           "cos_a")
                                                                                          (("2"
                                                                                            (name-replace
                                                                                             "nc"
                                                                                             "norm(e`p1 - xing_pt) * cos_a")
                                                                                            (("2"
                                                                                              (equate
                                                                                               "cos_a * norm(s`p2 - xing_pt) * cos_a "
                                                                                               " norm(s`p2 - xing_pt) * (cos_a * cos_a)")
                                                                                              (("1"
                                                                                                (mult-cases
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "nc")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "abs")
                                                                                                    (("1"
                                                                                                      (mult-cases
                                                                                                       1)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (lemma
                                                                               "line_crossing_on_line")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "e"
                                                                                 "s")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -9
                                                                                       :dir
                                                                                       rl)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -13
                                                                                         :dir
                                                                                         rl)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -1
                                                                                           1)
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "collinear_symmetric")
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "collinear_reverse"
                                                                                               :dir
                                                                                               rl)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "reverse_segment")
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "collinear_as_parallel_with_p1_on_line")
                                                                                                  (("2"
                                                                                                    (split)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "parallel?")
                                                                                                      (("1"
                                                                                                        (case-replace
                                                                                                         "k = 0")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (inst
                                                                                                           +
                                                                                                           "k")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (inst
                                                                                                       +
                                                                                                       "0")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (flatten)
                                                                      (("3"
                                                                        (cancel-add
                                                                         -1)
                                                                        (("3"
                                                                          (hide-all-but
                                                                           (-1
                                                                            6))
                                                                          (("3"
                                                                            (use
                                                                             "perp_right_nzvect_neq_zero")
                                                                            (("3"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "vcos")
                                                  (("2"
                                                    (rewrite
                                                     "dot_comm")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "extending_s_crosses_e")
                                      (("2"
                                        (replace -8 :dir rl)
                                        (("2"
                                          (replace -1 :dir rl)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "extending_s_crosses_e")
                                      (("3" (propax) nil nil))
                                      nil)
                                     ("4"
                                      (hide-all-but 1)
                                      (("4"
                                        (inst + "1")
                                        (("4"
                                          (grind-with-ext)
                                          nil
                                          nil))
                                        nil))
                                      nil)
                                     ("5"
                                      (expand "vcos")
                                      (("5"
                                        (rewrite "dot_comm")
                                        (("5" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("6"
                                      (rewrite "parallel_commutative")
                                      nil
                                      nil)
                                     ("7"
                                      (rewrite "collinear_symmetric")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (use "dropped_perp_from_e_with_no_extension_intersect")
                          (("2" (assert)
                            (("2" (replace -7 :dir rl)
                              (("2"
                                (rewrite "norm_sym" -1)
                                (("2"
                                  (equate
                                   "norm(xing_pt - e`p2)"
                                   "norm(e`p2 - xing_pt)"
                                   (rewrite "norm_sym"))
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst - "p" "q")
                                      (("2"
                                        (inst
                                         12
                                         "e`p1"
                                         "val(find_perp_ray_crossing(s, e`p1))")
                                        (("1"
                                          (split)
                                          (("1"
                                            (expand
                                             "find_perp_ray_crossing")
                                            (("1"
                                              (apply
                                               (repeat (lift-if)))
                                              (("1" (ground) nil nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (expand "segment_endpoint?")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (use "line_crossing_on_line")
                      (("2" (assert)
                        (("2" (skeep)
                          (("2" (replace -6 :dir rl)
                            (("2" (replace -1 1)
                              (("2"
                                (equate
                                 "s`p2 - (s`p1 + k * (s`p2 - s`p1))"
                                 "(1 - k) * (s`p2 - s`p1)")
                                (("1"
                                  (equate
                                   "s`p1 - (s`p1 + k * (s`p2 - s`p1))"
                                   "-k * (s`p2 - s`p1)")
                                  (("1"
                                    (rewrite* "normalize_scal")
                                    (("1"
                                      (expand "sign")
                                      (("1"
                                        (apply (repeat (lift-if)))
                                        (("1"
                                          (ground)
                                          (("1"
                                            (expand
                                             "extending_s_crosses_e")
                                            (("1"
                                              (rewrite
                                               "point_on_segment_has_offset"
                                               9)
                                              (("1"
                                                (replace -3 :dir rl)
                                                (("1"
                                                  (inst + "k")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (equate "k" "0" (assert))
                                      (("2" (assert) nil nil))
                                      nil)
                                     ("3"
                                      (equate "k" "1" (assert))
                                      (("3"
                                        (hide-all-but (-1 4))
                                        (("3"
                                          (grind-with-ext)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (assert) nil nil) ("4" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (endpoint_nearest_point_btw_segs_subcase_base_2 0
  (endpoint_nearest_point_btw_segs_subcase_base_2-1 nil 3874129019
   ("" (skeep + t)
    (("" (skoletin)
      (("" (flatten)
        (("" (use "line_crossing_commutative")
          (("" (use "no_line_crossing_eqv_parallel_or_collinear")
            (("" (assert)
              ((""
                (case "xing_pt = s`p1 or xing_pt = s`p2 or xing_pt = e`p1 or xing_pt = e`p2")
                (("1" (expand "extending_s_crosses_e")
                  (("1" (replace -2 :dir rl)
                    (("1" (replace -6 :dir rl)
                      (("1"
                        (apply (branch
                                (split)
                                ((then (replace -1) (assert)))))
                        nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (lemma "line_crossing_on_line")
                    (("2" (inst-cp - "s" "e")
                      (("2" (inst - "e" "s")
                        (("2" (assert)
                          (("2" (skeep*)
                            (("2" (replace -3 :dir rl)
                              (("2"
                                (replace -7 :dir rl)
                                (("2"
                                  (case "k < 0")
                                  (("1"
                                    (case "k!1 < 0")
                                    (("1"
                                      (case-replace
                                       "^(s`p2 - xing_pt) = ^(s`p1 - xing_pt)")
                                      (("1"
                                        (case-replace
                                         "^(e`p2 - xing_pt) = ^(e`p1 - xing_pt)")
                                        (("1"
                                          (case
                                           "vcos(^(s`p1 - xing_pt), ^(e`p1 - xing_pt)) < 0")
                                          (("1"
                                            (lemma
                                             "cos_neg_inner_point_closer_lt")
                                            (("1"
                                              (inst
                                               -
                                               "s`p1"
                                               "xing_pt"
                                               "e`p2"
                                               "s`p2")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (expand
                                                     "is_nearest_endpoint_pair?")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst
                                                     +
                                                     "norm(s`p2 - xing_pt) / norm(s`p1 - xing_pt)")
                                                    (("1"
                                                      (name-replace
                                                       "nn"
                                                       "norm(s`p2 - xing_pt) / norm(s`p1 - xing_pt)")
                                                      (("1"
                                                        (move-terms
                                                         1
                                                         r
                                                         1)
                                                        (("1"
                                                          (expand "nn")
                                                          (("1"
                                                            (cross-mult
                                                             1)
                                                            (("1"
                                                              (replace
                                                               -7
                                                               1)
                                                              (("1"
                                                                (equate
                                                                 "s`p2 - (s`p1 + k!1 * (s`p2 - s`p1))"
                                                                 "(1 - k!1) * (s`p2 - s`p1)")
                                                                (("1"
                                                                  (equate
                                                                   "s`p1 - (s`p1 + k!1 * (s`p2 - s`p1))"
                                                                   "-k!1 * (s`p2 - s`p1)")
                                                                  (("1"
                                                                    (rewrite*
                                                                     "norm_scal")
                                                                    (("1"
                                                                      (expand
                                                                       "abs")
                                                                      (("1"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (cross-mult 1)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (ground)
                                                      (("3"
                                                        (use
                                                         "norm_eq_0")
                                                        (("3"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case
                                             "find_perp_ray_crossing(e, s`p1) = None")
                                            (("1"
                                              (case
                                               "find_perp_ray_crossing(s, e`p1) = None")
                                              (("1"
                                                (lemma
                                                 "cos_pos_len_le_imp_find_perp_ray_crossing")
                                                (("1"
                                                  (case
                                                   "find_perp_ray_crossing((# p1 := xing_pt, p2 := s`p1 #), e`p1) = None
                                            or find_perp_ray_crossing((# p1 := xing_pt, p2 := e`p1 #), s`p1) = None")
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (lemma
                                                       "cos_pos_find_perp_crossing_cases")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "e"
                                                         "s"
                                                         "e`p1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (lemma
                                                               "farther_from_hub_imp_farther_from_p")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "e"
                                                                 "s`p2"
                                                                 "xing_pt")
                                                                (("1"
                                                                  (ground)
                                                                  (("1"
                                                                    (expand
                                                                     "is_nearest_endpoint_pair?")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (rewrite
                                                                         "norm_sym"
                                                                         -1)
                                                                        (("1"
                                                                          (equate
                                                                           "norm(e`p2 - s`p2)"
                                                                           "norm(s`p2 - e`p2)"
                                                                           (rewrite
                                                                            "norm_sym"))
                                                                          (("1"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (inst?)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (inst
                                                                     -
                                                                     "e`p1"
                                                                     "xing_pt"
                                                                     "s`p2")
                                                                    (("3"
                                                                      (assert)
                                                                      (("3"
                                                                        (replace
                                                                         -8)
                                                                        (("3"
                                                                          (split)
                                                                          (("1"
                                                                            (replace
                                                                             -13
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (replace
                                                                               -17
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (replace
                                                                                 -2)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (equate
                                                                                     "vcos(^(e`p1 - xing_pt), ^(s`p1 - xing_pt))"
                                                                                     "vcos(^(s`p1 - xing_pt), ^(e`p1 - xing_pt))")
                                                                                    (("1"
                                                                                      (mult-cases
                                                                                       1
                                                                                       :mult-op
                                                                                       1*)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "vcos")
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "dot_comm")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "vcos")
                                                                            (("2"
                                                                              (rewrite
                                                                               "dot_comm")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "extending_s_crosses_e")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (inst
                                                               +
                                                               "1")
                                                              (("3"
                                                                (hide-all-but
                                                                 1)
                                                                (("3"
                                                                  (grind-with-ext)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (expand
                                                               "vcos")
                                                              (("4"
                                                                (rewrite
                                                                 "dot_comm")
                                                                (("4"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("5"
                                                              (rewrite
                                                               "parallel_commutative")
                                                              nil
                                                              nil)
                                                             ("6"
                                                              (rewrite
                                                               "collinear_symmetric")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "cos_pos_find_perp_crossing_cases")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "s"
                                                         "e"
                                                         "s`p1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (ground)
                                                            (("1"
                                                              (lemma
                                                               "farther_from_hub_imp_farther_from_p")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "s"
                                                                 "e`p2"
                                                                 "xing_pt")
                                                                (("1"
                                                                  (ground)
                                                                  (("1"
                                                                    (expand
                                                                     "is_nearest_endpoint_pair?")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (inst?)
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (inst
                                                                     -
                                                                     "s`p1"
                                                                     "xing_pt"
                                                                     "e`p2")
                                                                    (("3"
                                                                      (assert)
                                                                      (("3"
                                                                        (replace
                                                                         -7)
                                                                        (("3"
                                                                          (replace
                                                                           -17
                                                                           :dir
                                                                           rl)
                                                                          (("3"
                                                                            (replace
                                                                             -1)
                                                                            (("3"
                                                                              (assert)
                                                                              (("3"
                                                                                (mult-cases
                                                                                 2
                                                                                 :mult-op
                                                                                 1*)
                                                                                (("3"
                                                                                  (expand
                                                                                   "abs")
                                                                                  (("3"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "extending_s_crosses_e")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (inst
                                                               +
                                                               "1")
                                                              (("3"
                                                                (replace
                                                                 -15
                                                                 :dir
                                                                 rl)
                                                                (("3"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("3"
                                                                    (grind-with-ext)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst-cp
                                                       -
                                                       "e`p1"
                                                       "xing_pt"
                                                       "s`p1")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "s`p1"
                                                         "xing_pt"
                                                         "e`p1")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (case-replace
                                                             "vcos(^(e`p1 - xing_pt), ^(s`p1 - xing_pt)) =
                                      vcos(^(s`p1 - xing_pt), ^(e`p1 - xing_pt))")
                                                            (("1"
                                                              (name-replace
                                                               "cos_a"
                                                               "vcos(^(s`p1 - xing_pt), ^(e`p1 - xing_pt))"
                                                               :hide?
                                                               nil)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "law_of_cosines_sq_vcos")
                                                                  (("1"
                                                                    (inst-cp
                                                                     -
                                                                     "e`p1"
                                                                     "xing_pt"
                                                                     "s`p1")
                                                                    (("1"
                                                                      (inst
                                                                       -
                                                                       "e`p2"
                                                                       "xing_pt"
                                                                       "s`p2")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "is_nearest_endpoint_pair?")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (rewrite
                                                                               "sq_le"
                                                                               -16
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 -16
                                                                                 :hide?
                                                                                 t)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   -15
                                                                                   :hide?
                                                                                   t)
                                                                                  (("1"
                                                                                    (case-replace
                                                                                     "norm(s`p2 - xing_pt) =
                                         	      norm(s`p1 - xing_pt) + length(s)")
                                                                                    (("1"
                                                                                      (case-replace
                                                                                       "norm(e`p2 - xing_pt) =
                                             	      norm(e`p1 - xing_pt) + length(e)")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "sq")
                                                                                        (("1"
                                                                                          (cancel-add
                                                                                           -16)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -9)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -10)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -4)
                                                                                                (("1"
                                                                                                  (move-terms
                                                                                                   -16
                                                                                                   r)
                                                                                                  (("1"
                                                                                                    (elim-unary
                                                                                                     -16)
                                                                                                    (("1"
                                                                                                      (elim-unary
                                                                                                       -16)
                                                                                                      (("1"
                                                                                                        (name
                                                                                                         "sq_len"
                                                                                                         "length(e) * length(e) + length(s) * length(s) -
                                                            2 * (length(e) * length(s) * cos_a)")
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "sq_len + 2 * (length(e) * norm(e`p1 - xing_pt))
                                                                 + 2 * (length(s) * norm(s`p1 - xing_pt))
                                                                 - 2 * (length(e) * norm(s`p1 - xing_pt) * cos_a)
                                                                 - 2 * (length(s) * norm(e`p1 - xing_pt) * cos_a)
                                                                 <= 0")
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -18)
                                                                                                            (("1"
                                                                                                              (case
                                                                                                               "cos_a < 1")
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "sq_len > 0")
                                                                                                                (("1"
                                                                                                                  (mult-by
                                                                                                                   -9
                                                                                                                   "length(e)")
                                                                                                                  (("1"
                                                                                                                    (mult-by
                                                                                                                     -10
                                                                                                                     "length(s)")
                                                                                                                    (("1"
                                                                                                                      (add-formulas
                                                                                                                       -5
                                                                                                                       -1)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (case
                                                                                                                   "sq_len > sq(length(e) - length(s))")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "sq")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "sq_len"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (hide-all-but
                                                                                                                         (-1
                                                                                                                          1
                                                                                                                          5))
                                                                                                                        (("2"
                                                                                                                          (cancel-add
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (move-terms
                                                                                                                             1
                                                                                                                             r)
                                                                                                                            (("2"
                                                                                                                              (elim-unary
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (factor
                                                                                                                                   1
                                                                                                                                   l)
                                                                                                                                  (("2"
                                                                                                                                    (mult-cases
                                                                                                                                     1)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 -1
                                                                                                                 -2
                                                                                                                 2
                                                                                                                 3
                                                                                                                 14
                                                                                                                 15)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "vcos"
                                                                                                                   -3)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "dot_normalized_lt_1")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "^(s`p1 - xing_pt)"
                                                                                                                       "^(e`p1 - xing_pt)")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "dir_parallel_eqv_normalized_diffs_eq"
                                                                                                                           :dir
                                                                                                                           rl)
                                                                                                                          (("2"
                                                                                                                            (use
                                                                                                                             "parallel_defs_almost_same")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "dir_parallel?")
                                                                                                                                (("2"
                                                                                                                                  (skeep)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "parallel?")
                                                                                                                                    (("2"
                                                                                                                                      (name-replace
                                                                                                                                       "pke"
                                                                                                                                       "pk * (e`p1 - xing_pt)")
                                                                                                                                      (("2"
                                                                                                                                        (replace
                                                                                                                                         -15
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (equate
                                                                                                                                           "s`p1 - (s`p1 + k!1 * (s`p2 - s`p1))"
                                                                                                                                           "-k!1 * (s`p2 - s`p1)")
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "pke")
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -14
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (equate
                                                                                                                                                 "e`p1 - (e`p1 + k * (e`p2 - e`p1))"
                                                                                                                                                 "-k * (e`p2 - e`p1)")
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   +
                                                                                                                                                   "pk * (-k) / (-k!1)")
                                                                                                                                                  (("1"
                                                                                                                                                    (cross-mult
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (real-props)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (hide-all-but
                                                                                                                                                   1)
                                                                                                                                                  (("2"
                                                                                                                                                    (grind)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (hide-all-but
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (grind)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "sq_len"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         -15)
                                                                                        (("2"
                                                                                          (use
                                                                                           "p2_dist_from_hub_eq_p1_dist_plus_len")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       -14)
                                                                                      (("2"
                                                                                        (use
                                                                                         "p2_dist_from_hub_eq_p1_dist_plus_len")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (inst?)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "vcos")
                                                              (("2"
                                                                (rewrite
                                                                 "dot_comm")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "perp_crossing_at_endpoint_is_closest")
                                                (("2"
                                                  (inst
                                                   -
                                                   "e"
                                                   "s"
                                                   "q"
                                                   "p")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (ground)
                                                      (("1"
                                                        (inst
                                                         13
                                                         "e`p1"
                                                         "val(find_perp_ray_crossing(s, e`p1))")
                                                        (("1"
                                                          (rewrite
                                                           "norm_sym"
                                                           -1)
                                                          (("1"
                                                            (equate
                                                             "norm(q - p)"
                                                             "norm(p - q)"
                                                             (rewrite
                                                              "norm_sym"))
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 8)
                                                                (("1"
                                                                  (expand
                                                                   "find_perp_ray_crossing"
                                                                   +)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "segment_endpoint?")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "parallel_commutative")
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (rewrite
                                                         "collinear_symmetric")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (use
                                               "perp_crossing_at_endpoint_is_closest")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst
                                                   +
                                                   "s`p1"
                                                   "val(find_perp_ray_crossing(e, s`p1))")
                                                  (("1"
                                                    (rewrite
                                                     "norm_sym"
                                                     -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "find_perp_ray_crossing"
                                                         +)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "segment_endpoint?")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -4 (-9 1))
                                          (("2"
                                            (equate
                                             "e`p1 - (e`p1 + k * (e`p2 - e`p1))"
                                             "-k * (e`p2 - e`p1)")
                                            (("1"
                                              (equate
                                               "e`p2 - (e`p1 + k * (e`p2 - e`p1))"
                                               "(1 - k) * (e`p2 - e`p1)")
                                              (("1"
                                                (rewrite*
                                                 "normalize_scal")
                                                (("1"
                                                  (rewrite*
                                                   "norm_scal")
                                                  (("1"
                                                    (expand "sign")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -4 1)
                                        (("2"
                                          (equate
                                           "s`p1 - (s`p1 + k!1 * (s`p2 - s`p1))"
                                           "-k!1 * (s`p2 - s`p1)")
                                          (("1"
                                            (equate
                                             "s`p2 - (s`p1 + k!1 * (s`p2 - s`p1))"
                                             "(1 - k!1) * (s`p2 - s`p1)")
                                            (("1"
                                              (rewrite*
                                               "normalize_scal")
                                              (("1"
                                                (expand "sign")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -3 -6)
                                      (("2"
                                        (equate
                                         "s`p1 - (s`p1 + k!1 * (s`p2 - s`p1))"
                                         "-k!1 * (s`p2 - s`p1)")
                                        (("1"
                                          (equate
                                           "s`p2 - (s`p1 + k!1 * (s`p2 - s`p1))"
                                           "(1 - k!1) * (s`p2 - s`p1)")
                                          (("1"
                                            (rewrite* "norm_scal")
                                            (("1"
                                              (cancel-by
                                               -6
                                               " norm((s`p2 - s`p1))")
                                              (("1"
                                                (expand "abs")
                                                (("1"
                                                  (expand
                                                   "extending_s_crosses_e")
                                                  (("1"
                                                    (replace
                                                     -5
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (replace
                                                       -9
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (rewrite
                                                         "point_on_segment_has_offset"
                                                         10)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (apply
                                                             (repeat
                                                              (lift-if)))
                                                            (("1"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (replace -1 -6)
                                    (("2"
                                      (equate
                                       "e`p1 - (e`p1 + k * (e`p2 - e`p1))"
                                       "-k * (e`p2 - e`p1)")
                                      (("1"
                                        (equate
                                         "e`p2 - (e`p1 + k * (e`p2 - e`p1))"
                                         "(1 - k) * (e`p2 - e`p1)")
                                        (("1"
                                          (rewrite* "norm_scal")
                                          (("1"
                                            (cancel-by
                                             -6
                                             "norm((e`p2 - e`p1))")
                                            (("1"
                                              (expand "abs")
                                              (("1"
                                                (apply
                                                 (repeat (lift-if)))
                                                (("1"
                                                  (expand
                                                   "extending_s_crosses_e")
                                                  (("1"
                                                    (replace
                                                     -8
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (rewrite
                                                       "point_on_segment_has_offset"
                                                       +)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (endpoint_nearest_point_between_segments_subcase_s 0
  (endpoint_nearest_point_between_segments_subcase_s-1 nil 3874129019
   ("" (skeep + t)
    (("" (skoletin*)
      (("" (flatten)
        (("" (name "e_closest_endpt" "nearest_endpoints(s, e)`2")
          (("" (use "line_crossing_commutative")
            (("" (lemma "line_crossing_on_line")
              (("" (inst-cp - "s" "e")
                (("" (inst - "e" "s")
                  (("" (assert)
                    ((""
                      (lemma
                       "no_line_crossing_eqv_parallel_or_collinear")
                      (("" (inst - "s" "e")
                        (("" (assert)
                          (("" (skeep*)
                            (("" (replace -3 :dir rl)
                              ((""
                                (replace -5 :dir rl)
                                ((""
                                  (case
                                   "norm(e`p1 - xing_pt) = norm(e`p2 - xing_pt) or
                norm(s`p1 - xing_pt) = norm(s`p2 - xing_pt)")
                                  (("1"
                                    (case
                                     "forall (e: segment_2d, k: real):
                   e`p1 - (e`p1 + k * (e`p2 - e`p1)) = -k * (e`p2 - e`p1)")
                                    (("1"
                                      (case
                                       "forall (e: segment_2d, k: real):
                       e`p2 - (e`p1 + k * (e`p2 - e`p1)) = (1 - k) * (e`p2 - e`p1)")
                                      (("1"
                                        (split)
                                        (("1"
                                          (replace -4 -1)
                                          (("1"
                                            (rewrite -2 -1)
                                            (("1"
                                              (rewrite -3 -1)
                                              (("1"
                                                (rewrite* "norm_scal")
                                                (("1"
                                                  (cancel-by
                                                   -1
                                                   "norm((e`p2 - e`p1))")
                                                  (("1"
                                                    (expand "abs")
                                                    (("1"
                                                      (apply
                                                       (repeat
                                                        (lift-if)))
                                                      (("1"
                                                        (hide 3)
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (expand
                                                             "extending_s_crosses_e")
                                                            (("1"
                                                              (rewrite
                                                               "point_on_segment_has_offset")
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "k")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -5 -1)
                                          (("2"
                                            (rewrite -2 -1)
                                            (("2"
                                              (rewrite -3 -1)
                                              (("2"
                                                (rewrite* "norm_scal")
                                                (("2"
                                                  (cancel-by
                                                   -1
                                                   "norm((s`p2 - s`p1))")
                                                  (("2"
                                                    (expand "abs")
                                                    (("2"
                                                      (apply
                                                       (repeat
                                                        (lift-if)))
                                                      (("2"
                                                        (hide 3)
                                                        (("2"
                                                          (ground)
                                                          (("2"
                                                            (expand
                                                             "extending_s_crosses_e")
                                                            (("2"
                                                              (rewrite
                                                               "point_on_segment_has_offset"
                                                               6)
                                                              (("2"
                                                                (inst
                                                                 +
                                                                 "k!1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (case
                                       "xing_pt = s`p1 or xing_pt = e`p1")
                                      (("1"
                                        (expand
                                         "extending_s_crosses_e")
                                        (("1"
                                          (rewrite*
                                           "point_on_segment_has_offset")
                                          (("1"
                                            (inst + "0")
                                            (("1"
                                              (inst + "0")
                                              (("1" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (case
                                           "(s_closest_endpt = s`p1 or s_closest_endpt = s`p2) and
                 (e_closest_endpt = e`p1 or e_closest_endpt = e`p2)")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (auto-rewrite
                                               "is_point_on_seg_equiv")
                                              (("1"
                                                (equate
                                                 "norm(xing_pt - s`p2)"
                                                 "norm(s`p2 - xing_pt)"
                                                 (rewrite "norm_sym"))
                                                (("1"
                                                  (equate
                                                   "norm(xing_pt - s`p1)"
                                                   "norm(s`p1 - xing_pt)"
                                                   (rewrite
                                                    "norm_sym"))
                                                  (("1"
                                                    (case
                                                     "e_closest_endpt =
                           IF norm(e`p1 - xing_pt) < norm(e`p2 - xing_pt) THEN e`p1
                              ELSE e`p2 ENDIF")
                                                    (("1"
                                                      (lemma
                                                       "endpoint_nearest_point_btw_segs_subcase_base")
                                                      (("1"
                                                        (apply
                                                         (repeat
                                                          (lift-if)))
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "reverse_segment(s)"
                                                             "e"
                                                             "p"
                                                             "q")
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (expand
                                                                 "reverse_segment"
                                                                 -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "extending_s_crosses_e")
                                                                (("2"
                                                                  (rewrite
                                                                   "line_crossing_commutative")
                                                                  (("2"
                                                                    (rewrite
                                                                     "line_crossing_reverse"
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (expand
                                                                 "extending_s_crosses_e")
                                                                (("3"
                                                                  (rewrite
                                                                   "line_crossing_reverse"
                                                                   :dir
                                                                   rl)
                                                                  (("3"
                                                                    (rewrite
                                                                     "point_on_reverse_segment")
                                                                    (("3"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (expand
                                                                 "are_segments_intersecting_alt?")
                                                                (("4"
                                                                  (skeep
                                                                   -
                                                                   t)
                                                                  (("4"
                                                                    (assert)
                                                                    (("4"
                                                                      (rewrite
                                                                       "point_on_reverse_segment")
                                                                      (("4"
                                                                        (inst?)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (skeep
                                                                 -
                                                                 t)
                                                                (("5"
                                                                  (inst?)
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      1))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("6"
                                                                (skeep
                                                                 -
                                                                 t)
                                                                (("6"
                                                                  (inst
                                                                   13
                                                                   "v"
                                                                   "r")
                                                                  (("6"
                                                                    (rewrite
                                                                     "point_on_reverse_segment")
                                                                    (("6"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("7"
                                                                (expand
                                                                 "reverse_segment")
                                                                (("7"
                                                                  (expand
                                                                   "nearest_endpoints")
                                                                  (("7"
                                                                    (apply
                                                                     (repeat
                                                                      (lift-if)))
                                                                    (("7"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("8"
                                                                (rewrite
                                                                 "line_crossing_commutative")
                                                                (("8"
                                                                  (rewrite
                                                                   "line_crossing_reverse"
                                                                   :dir
                                                                   rl)
                                                                  (("8"
                                                                    (expand
                                                                     "reverse_segment")
                                                                    (("8"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("9"
                                                                (rewrite
                                                                 "line_crossing_commutative")
                                                                (("9"
                                                                  (rewrite
                                                                   "line_crossing_reverse"
                                                                   :dir
                                                                   rl)
                                                                  (("9"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("10"
                                                                (rewrite
                                                                 "parallel_commutative")
                                                                (("10"
                                                                  (rewrite
                                                                   "parallel_reverse"
                                                                   :dir
                                                                   rl)
                                                                  (("10"
                                                                    (rewrite
                                                                     "parallel_commutative")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("11"
                                                                (rewrite
                                                                 "collinear_reverse")
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "point_on_segment?")
                                                              (("2"
                                                                (rewrite
                                                                 "point_on_reverse_segment")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             -
                                                             "s"
                                                             "e"
                                                             "p"
                                                             "q")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (ground)
                                                                (("2"
                                                                  (expand
                                                                   "nearest_endpoints")
                                                                  (("2"
                                                                    (apply
                                                                     (repeat
                                                                      (lift-if)))
                                                                    (("2"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (inst
                                                             -
                                                             "reverse_segment(s)"
                                                             "reverse_segment(e)"
                                                             "p"
                                                             "q")
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (rewrite
                                                                 "find_perp_ray_crossing_reverse"
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (expand
                                                                   "reverse_segment")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "extending_s_crosses_e")
                                                                (("2"
                                                                  (rewrite
                                                                   "line_crossing_reverse"
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (rewrite
                                                                     "line_crossing_commutative")
                                                                    (("2"
                                                                      (rewrite
                                                                       "line_crossing_reverse"
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (rewrite
                                                                         "point_on_reverse_segment")
                                                                        (("2"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (expand
                                                                 "extending_s_crosses_e")
                                                                (("3"
                                                                  (rewrite
                                                                   "line_crossing_reverse"
                                                                   :dir
                                                                   rl)
                                                                  (("3"
                                                                    (rewrite
                                                                     "line_crossing_commutative")
                                                                    (("3"
                                                                      (rewrite
                                                                       "line_crossing_reverse"
                                                                       :dir
                                                                       rl)
                                                                      (("3"
                                                                        (rewrite
                                                                         "point_on_reverse_segment")
                                                                        (("3"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (expand
                                                                 "are_segments_intersecting_alt?")
                                                                (("4"
                                                                  (skeep
                                                                   -
                                                                   t)
                                                                  (("4"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (rewrite*
                                                                         "point_on_reverse_segment")
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (rewrite*
                                                                         "point_on_reverse_segment")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (skeep
                                                                 -
                                                                 t)
                                                                (("5"
                                                                  (inst?)
                                                                  (("1"
                                                                    (rewrite*
                                                                     "point_on_reverse_segment")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      1))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("6"
                                                                (skeep
                                                                 -
                                                                 t)
                                                                (("6"
                                                                  (inst
                                                                   14
                                                                   "v"
                                                                   "r")
                                                                  (("1"
                                                                    (rewrite
                                                                     "point_on_reverse_segment")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      1))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("7"
                                                                (expand
                                                                 "reverse_segment")
                                                                (("7"
                                                                  (expand
                                                                   "nearest_endpoints")
                                                                  (("7"
                                                                    (apply
                                                                     (repeat
                                                                      (lift-if)))
                                                                    (("7"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("8"
                                                                (rewrite
                                                                 "line_crossing_reverse"
                                                                 :dir
                                                                 rl)
                                                                (("8"
                                                                  (rewrite
                                                                   "line_crossing_commutative")
                                                                  (("8"
                                                                    (rewrite
                                                                     "line_crossing_reverse"
                                                                     :dir
                                                                     rl)
                                                                    (("8"
                                                                      (expand
                                                                       "reverse_segment")
                                                                      (("8"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("9"
                                                                (rewrite
                                                                 "line_crossing_reverse"
                                                                 :dir
                                                                 rl)
                                                                (("9"
                                                                  (rewrite
                                                                   "line_crossing_commutative")
                                                                  (("9"
                                                                    (rewrite
                                                                     "line_crossing_reverse"
                                                                     :dir
                                                                     rl)
                                                                    (("9"
                                                                      (expand
                                                                       "reverse_segment")
                                                                      (("9"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("10"
                                                                (rewrite
                                                                 "parallel_reverse"
                                                                 :dir
                                                                 rl)
                                                                (("10"
                                                                  (rewrite
                                                                   "parallel_commutative")
                                                                  (("10"
                                                                    (rewrite
                                                                     "parallel_reverse"
                                                                     :dir
                                                                     rl)
                                                                    (("10"
                                                                      (rewrite
                                                                       "parallel_commutative")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("11"
                                                                (rewrite
                                                                 "collinear_reverse")
                                                                (("11"
                                                                  (rewrite
                                                                   "collinear_symmetric")
                                                                  (("11"
                                                                    (rewrite
                                                                     "collinear_reverse")
                                                                    (("11"
                                                                      (rewrite
                                                                       "collinear_symmetric")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "point_on_segment?")
                                                              (("2"
                                                                (rewrite
                                                                 "point_on_reverse_segment")
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (expand
                                                               "point_on_segment?")
                                                              (("3"
                                                                (rewrite
                                                                 "point_on_reverse_segment")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (inst
                                                             -
                                                             "s"
                                                             "reverse_segment(e)"
                                                             "p"
                                                             "q")
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (rewrite
                                                                 "find_perp_ray_crossing_reverse"
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "extending_s_crosses_e")
                                                                (("2"
                                                                  (rewrite
                                                                   "line_crossing_reverse"
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (rewrite
                                                                     "point_on_reverse_segment")
                                                                    (("2"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (expand
                                                                 "extending_s_crosses_e")
                                                                (("3"
                                                                  (rewrite
                                                                   "line_crossing_commutative")
                                                                  (("3"
                                                                    (rewrite
                                                                     "line_crossing_reverse"
                                                                     :dir
                                                                     rl)
                                                                    (("3"
                                                                      (rewrite
                                                                       "line_crossing_commutative"
                                                                       -1)
                                                                      (("3"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (expand
                                                                 "are_segments_intersecting_alt?")
                                                                (("4"
                                                                  (skeep)
                                                                  (("4"
                                                                    (assert)
                                                                    (("4"
                                                                      (rewrite
                                                                       "point_on_reverse_segment")
                                                                      (("4"
                                                                        (inst?)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (skeep)
                                                                (("5"
                                                                  (rewrite
                                                                   "point_on_reverse_segment")
                                                                  (("5"
                                                                    (inst?)
                                                                    (("5"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("6"
                                                                (skeep
                                                                 -
                                                                 t)
                                                                (("6"
                                                                  (inst
                                                                   13
                                                                   "v"
                                                                   "r")
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      1))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("7"
                                                                (expand
                                                                 "reverse_segment")
                                                                (("7"
                                                                  (expand
                                                                   "nearest_endpoints")
                                                                  (("7"
                                                                    (apply
                                                                     (repeat
                                                                      (lift-if)))
                                                                    (("7"
                                                                      (ground)
                                                                      (("7"
                                                                        (expand
                                                                         "min")
                                                                        (("7"
                                                                          (apply
                                                                           (repeat
                                                                            (lift-if)))
                                                                          (("7"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("8"
                                                                (rewrite
                                                                 "line_crossing_reverse"
                                                                 :dir
                                                                 rl)
                                                                (("8"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("9"
                                                                (rewrite
                                                                 "line_crossing_reverse"
                                                                 :dir
                                                                 rl)
                                                                (("9"
                                                                  (expand
                                                                   "reverse_segment")
                                                                  (("9"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("10"
                                                                (rewrite
                                                                 "parallel_reverse"
                                                                 :dir
                                                                 rl)
                                                                nil
                                                                nil)
                                                               ("11"
                                                                (rewrite
                                                                 "collinear_symmetric")
                                                                (("11"
                                                                  (rewrite
                                                                   "collinear_reverse")
                                                                  (("11"
                                                                    (rewrite
                                                                     "collinear_symmetric")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "point_on_segment?")
                                                              (("2"
                                                                (rewrite
                                                                 "point_on_reverse_segment")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "endpoint_nearest_point_btw_segs_subcase_base_2")
                                                      (("2"
                                                        (apply
                                                         (repeat
                                                          (lift-if)))
                                                        (("2"
                                                          (ground)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "reverse_segment(s)"
                                                             "e"
                                                             "p"
                                                             "q")
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (expand
                                                                 "reverse_segment"
                                                                 -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "extending_s_crosses_e")
                                                                (("2"
                                                                  (rewrite
                                                                   "line_crossing_commutative")
                                                                  (("2"
                                                                    (rewrite
                                                                     "line_crossing_reverse"
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (expand
                                                                 "extending_s_crosses_e")
                                                                (("3"
                                                                  (rewrite
                                                                   "line_crossing_reverse"
                                                                   :dir
                                                                   rl)
                                                                  (("3"
                                                                    (rewrite
                                                                     "point_on_reverse_segment")
                                                                    (("3"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (expand
                                                                 "are_segments_intersecting_alt?")
                                                                (("4"
                                                                  (skeep
                                                                   -
                                                                   t)
                                                                  (("4"
                                                                    (assert)
                                                                    (("4"
                                                                      (rewrite
                                                                       "point_on_reverse_segment")
                                                                      (("4"
                                                                        (inst?)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (skeep
                                                                 -
                                                                 t)
                                                                (("5"
                                                                  (inst?)
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      1))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("6"
                                                                (skeep
                                                                 -
                                                                 t)
                                                                (("6"
                                                                  (inst
                                                                   14
                                                                   "v"
                                                                   "r")
                                                                  (("6"
                                                                    (rewrite
                                                                     "point_on_reverse_segment")
                                                                    (("6"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("7"
                                                                (expand
                                                                 "reverse_segment")
                                                                (("7"
                                                                  (replace
                                                                   -1)
                                                                  (("7"
                                                                    (replace
                                                                     -2)
                                                                    (("7"
                                                                      (hide-all-but
                                                                       (-7
                                                                        -9
                                                                        1))
                                                                      (("7"
                                                                        (expand
                                                                         "is_nearest_endpoint_pair?")
                                                                        (("7"
                                                                          (expand
                                                                           "nearest_endpoints")
                                                                          (("7"
                                                                            (apply
                                                                             (repeat
                                                                              (lift-if)))
                                                                            (("7"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("8"
                                                                (rewrite
                                                                 "line_crossing_commutative")
                                                                (("8"
                                                                  (rewrite
                                                                   "line_crossing_reverse"
                                                                   :dir
                                                                   rl)
                                                                  (("8"
                                                                    (expand
                                                                     "reverse_segment")
                                                                    (("8"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("9"
                                                                (rewrite
                                                                 "line_crossing_commutative")
                                                                (("9"
                                                                  (rewrite
                                                                   "line_crossing_reverse"
                                                                   :dir
                                                                   rl)
                                                                  (("9"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("10"
                                                                (rewrite
                                                                 "parallel_commutative")
                                                                (("10"
                                                                  (rewrite
                                                                   "parallel_reverse"
                                                                   :dir
                                                                   rl)
                                                                  (("10"
                                                                    (rewrite
                                                                     "parallel_commutative")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("11"
                                                                (rewrite
                                                                 "collinear_reverse")
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "point_on_segment?")
                                                              (("2"
                                                                (rewrite
                                                                 "point_on_reverse_segment")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             -
                                                             "s"
                                                             "e"
                                                             "p"
                                                             "q")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (ground)
                                                                (("2"
                                                                  (replace
                                                                   -2)
                                                                  (("2"
                                                                    (replace
                                                                     -3)
                                                                    (("2"
                                                                      (hide-all-but
                                                                       (-8
                                                                        -10
                                                                        1))
                                                                      (("2"
                                                                        (expand
                                                                         "is_nearest_endpoint_pair?")
                                                                        (("2"
                                                                          (expand
                                                                           "nearest_endpoints")
                                                                          (("2"
                                                                            (apply
                                                                             (repeat
                                                                              (lift-if)))
                                                                            (("2"
                                                                              (ground)
                                                                              (("1"
                                                                                (expand
                                                                                 "min")
                                                                                (("1"
                                                                                  (apply
                                                                                   (repeat
                                                                                    (lift-if)))
                                                                                  (("1"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "min")
                                                                                (("2"
                                                                                  (apply
                                                                                   (repeat
                                                                                    (lift-if)))
                                                                                  (("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (expand
                                                                                 "min")
                                                                                (("3"
                                                                                  (apply
                                                                                   (repeat
                                                                                    (lift-if)))
                                                                                  (("3"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (inst
                                                             -
                                                             "reverse_segment(s)"
                                                             "reverse_segment(e)"
                                                             "p"
                                                             "q")
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (rewrite
                                                                 "find_perp_ray_crossing_reverse"
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (expand
                                                                   "reverse_segment")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "extending_s_crosses_e")
                                                                (("2"
                                                                  (rewrite
                                                                   "line_crossing_reverse"
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (rewrite
                                                                     "line_crossing_commutative")
                                                                    (("2"
                                                                      (rewrite
                                                                       "line_crossing_reverse"
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (rewrite
                                                                         "point_on_reverse_segment")
                                                                        (("2"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (expand
                                                                 "extending_s_crosses_e")
                                                                (("3"
                                                                  (rewrite
                                                                   "line_crossing_reverse"
                                                                   :dir
                                                                   rl)
                                                                  (("3"
                                                                    (rewrite
                                                                     "line_crossing_commutative")
                                                                    (("3"
                                                                      (rewrite
                                                                       "line_crossing_reverse"
                                                                       :dir
                                                                       rl)
                                                                      (("3"
                                                                        (rewrite
                                                                         "point_on_reverse_segment")
                                                                        (("3"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (expand
                                                                 "are_segments_intersecting_alt?")
                                                                (("4"
                                                                  (skeep
                                                                   -
                                                                   t)
                                                                  (("4"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (rewrite*
                                                                         "point_on_reverse_segment")
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (rewrite*
                                                                         "point_on_reverse_segment")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (skeep
                                                                 -
                                                                 t)
                                                                (("5"
                                                                  (inst?)
                                                                  (("1"
                                                                    (rewrite*
                                                                     "point_on_reverse_segment")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      1))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("6"
                                                                (skeep
                                                                 -
                                                                 t)
                                                                (("6"
                                                                  (inst
                                                                   15
                                                                   "v"
                                                                   "r")
                                                                  (("1"
                                                                    (rewrite
                                                                     "point_on_reverse_segment")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      1))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("7"
                                                                (replace
                                                                 -1)
                                                                (("7"
                                                                  (replace
                                                                   -2)
                                                                  (("7"
                                                                    (hide-all-but
                                                                     (-6
                                                                      -8
                                                                      1))
                                                                    (("7"
                                                                      (expand
                                                                       "reverse_segment")
                                                                      (("7"
                                                                        (expand
                                                                         "is_nearest_endpoint_pair?")
                                                                        (("7"
                                                                          (expand
                                                                           "nearest_endpoints")
                                                                          (("7"
                                                                            (apply
                                                                             (repeat
                                                                              (lift-if)))
                                                                            (("7"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("8"
                                                                (rewrite
                                                                 "line_crossing_reverse"
                                                                 :dir
                                                                 rl)
                                                                (("8"
                                                                  (rewrite
                                                                   "line_crossing_commutative")
                                                                  (("8"
                                                                    (rewrite
                                                                     "line_crossing_reverse"
                                                                     :dir
                                                                     rl)
                                                                    (("8"
                                                                      (expand
                                                                       "reverse_segment")
                                                                      (("8"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("9"
                                                                (rewrite
                                                                 "line_crossing_reverse"
                                                                 :dir
                                                                 rl)
                                                                (("9"
                                                                  (rewrite
                                                                   "line_crossing_commutative")
                                                                  (("9"
                                                                    (rewrite
                                                                     "line_crossing_reverse"
                                                                     :dir
                                                                     rl)
                                                                    (("9"
                                                                      (expand
                                                                       "reverse_segment")
                                                                      (("9"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("10"
                                                                (rewrite
                                                                 "parallel_reverse"
                                                                 :dir
                                                                 rl)
                                                                (("10"
                                                                  (rewrite
                                                                   "parallel_commutative")
                                                                  (("10"
                                                                    (rewrite
                                                                     "parallel_reverse"
                                                                     :dir
                                                                     rl)
                                                                    (("10"
                                                                      (rewrite
                                                                       "parallel_commutative")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("11"
                                                                (rewrite
                                                                 "collinear_reverse")
                                                                (("11"
                                                                  (rewrite
                                                                   "collinear_symmetric")
                                                                  (("11"
                                                                    (rewrite
                                                                     "collinear_reverse")
                                                                    (("11"
                                                                      (rewrite
                                                                       "collinear_symmetric")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "point_on_segment?")
                                                              (("2"
                                                                (rewrite
                                                                 "point_on_reverse_segment")
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (expand
                                                               "point_on_segment?")
                                                              (("3"
                                                                (rewrite
                                                                 "point_on_reverse_segment")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (inst
                                                             -
                                                             "s"
                                                             "reverse_segment(e)"
                                                             "p"
                                                             "q")
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (rewrite
                                                                 "find_perp_ray_crossing_reverse"
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "extending_s_crosses_e")
                                                                (("2"
                                                                  (rewrite
                                                                   "line_crossing_reverse"
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (rewrite
                                                                     "point_on_reverse_segment")
                                                                    (("2"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (expand
                                                                 "extending_s_crosses_e")
                                                                (("3"
                                                                  (rewrite
                                                                   "line_crossing_commutative")
                                                                  (("3"
                                                                    (rewrite
                                                                     "line_crossing_reverse"
                                                                     :dir
                                                                     rl)
                                                                    (("3"
                                                                      (rewrite
                                                                       "line_crossing_commutative"
                                                                       -1)
                                                                      (("3"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (expand
                                                                 "are_segments_intersecting_alt?")
                                                                (("4"
                                                                  (skeep)
                                                                  (("4"
                                                                    (assert)
                                                                    (("4"
                                                                      (rewrite
                                                                       "point_on_reverse_segment")
                                                                      (("4"
                                                                        (inst?)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (skeep)
                                                                (("5"
                                                                  (rewrite
                                                                   "point_on_reverse_segment")
                                                                  (("5"
                                                                    (inst?)
                                                                    (("5"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("6"
                                                                (skeep
                                                                 -
                                                                 t)
                                                                (("6"
                                                                  (inst
                                                                   14
                                                                   "v"
                                                                   "r")
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      1))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("7"
                                                                (replace
                                                                 -2)
                                                                (("7"
                                                                  (replace
                                                                   -3)
                                                                  (("7"
                                                                    (hide-all-but
                                                                     (-7
                                                                      -9
                                                                      1))
                                                                    (("7"
                                                                      (expand
                                                                       "reverse_segment")
                                                                      (("7"
                                                                        (expand
                                                                         "is_nearest_endpoint_pair?")
                                                                        (("7"
                                                                          (expand
                                                                           "nearest_endpoints")
                                                                          (("7"
                                                                            (apply
                                                                             (repeat
                                                                              (lift-if)))
                                                                            (("7"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("8"
                                                                (rewrite
                                                                 "line_crossing_reverse"
                                                                 :dir
                                                                 rl)
                                                                (("8"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("9"
                                                                (rewrite
                                                                 "line_crossing_reverse"
                                                                 :dir
                                                                 rl)
                                                                (("9"
                                                                  (expand
                                                                   "reverse_segment")
                                                                  (("9"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("10"
                                                                (rewrite
                                                                 "parallel_reverse"
                                                                 :dir
                                                                 rl)
                                                                nil
                                                                nil)
                                                               ("11"
                                                                (rewrite
                                                                 "collinear_symmetric")
                                                                (("11"
                                                                  (rewrite
                                                                   "collinear_reverse")
                                                                  (("11"
                                                                    (rewrite
                                                                     "collinear_symmetric")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "point_on_segment?")
                                                              (("2"
                                                                (rewrite
                                                                 "point_on_reverse_segment")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-4 -6 1))
                                            (("2"
                                              (replace
                                               -1
                                               :dir
                                               rl
                                               :hide?
                                               t)
                                              (("2"
                                                (replace -1 :hide? t)
                                                (("2"
                                                  (expand
                                                   "nearest_endpoints")
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (apply
                                                       (repeat
                                                        (lift-if)))
                                                      (("1"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (repeat
                                                        (lift-if)))
                                                      (("2"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (endpoint_nearest_point_between_segments_subcase_e 0
  (endpoint_nearest_point_between_segments_subcase_e-1 nil 3874129019
   ("" (skeep + t)
    (("" (skoletin*)
      (("" (flatten)
        (("" (name "s_closest_endpt" "nearest_endpoints(s, e)`1")
          (("" (use "line_crossing_commutative")
            (("" (lemma "line_crossing_on_line")
              (("" (inst-cp - "s" "e")
                (("" (inst - "e" "s")
                  (("" (assert)
                    ((""
                      (lemma
                       "no_line_crossing_eqv_parallel_or_collinear")
                      (("" (inst - "s" "e")
                        (("" (assert)
                          (("" (skeep*)
                            (("" (replace -3 :dir rl)
                              ((""
                                (replace -5 :dir rl)
                                ((""
                                  (case
                                   "norm(e`p1 - xing_pt) = norm(e`p2 - xing_pt) or
                                     norm(s`p1 - xing_pt) = norm(s`p2 - xing_pt)")
                                  (("1"
                                    (case
                                     "forall (e: segment_2d, k: real):
                                              e`p1 - (e`p1 + k * (e`p2 - e`p1)) = -k * (e`p2 - e`p1)")
                                    (("1"
                                      (case
                                       "forall (e: segment_2d, k: real):
                                                        e`p2 - (e`p1 + k * (e`p2 - e`p1)) = (1 - k) * (e`p2 - e`p1)")
                                      (("1"
                                        (split)
                                        (("1"
                                          (replace -4 -1)
                                          (("1"
                                            (rewrite -2 -1)
                                            (("1"
                                              (rewrite -3 -1)
                                              (("1"
                                                (rewrite* "norm_scal")
                                                (("1"
                                                  (cancel-by
                                                   -1
                                                   "norm((e`p2 - e`p1))")
                                                  (("1"
                                                    (expand "abs")
                                                    (("1"
                                                      (apply
                                                       (repeat
                                                        (lift-if)))
                                                      (("1"
                                                        (hide 3)
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (expand
                                                             "extending_s_crosses_e")
                                                            (("1"
                                                              (rewrite
                                                               "point_on_segment_has_offset")
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "k")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -5 -1)
                                          (("2"
                                            (rewrite -2 -1)
                                            (("2"
                                              (rewrite -3 -1)
                                              (("2"
                                                (rewrite* "norm_scal")
                                                (("2"
                                                  (cancel-by
                                                   -1
                                                   "norm((s`p2 - s`p1))")
                                                  (("2"
                                                    (expand "abs")
                                                    (("2"
                                                      (apply
                                                       (repeat
                                                        (lift-if)))
                                                      (("2"
                                                        (hide 3)
                                                        (("2"
                                                          (ground)
                                                          (("2"
                                                            (expand
                                                             "extending_s_crosses_e")
                                                            (("2"
                                                              (rewrite
                                                               "point_on_segment_has_offset"
                                                               6)
                                                              (("2"
                                                                (inst
                                                                 +
                                                                 "k!1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (case
                                       "xing_pt = s`p1 or xing_pt = e`p1")
                                      (("1"
                                        (expand
                                         "extending_s_crosses_e")
                                        (("1"
                                          (rewrite*
                                           "point_on_segment_has_offset")
                                          (("1"
                                            (inst + "0")
                                            (("1"
                                              (inst + "0")
                                              (("1" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (case
                                           "(s_closest_endpt = s`p1 or s_closest_endpt = s`p2) and
                                                  (e_closest_endpt = e`p1 or e_closest_endpt = e`p2)")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (auto-rewrite
                                               "is_point_on_seg_equiv")
                                              (("1"
                                                (equate
                                                 "norm(xing_pt - e`p2)"
                                                 "norm(e`p2 - xing_pt)"
                                                 (rewrite "norm_sym"))
                                                (("1"
                                                  (equate
                                                   "norm(xing_pt - e`p1)"
                                                   "norm(e`p1 - xing_pt)"
                                                   (rewrite
                                                    "norm_sym"))
                                                  (("1"
                                                    (case
                                                     "s_closest_endpt =
                                                                  IF norm(s`p1 - xing_pt) < norm(s`p2 - xing_pt) THEN s`p1
                                                                     ELSE s`p2 ENDIF")
                                                    (("1"
                                                      (lemma
                                                       "endpoint_nearest_point_btw_segs_subcase_base")
                                                      (("1"
                                                        (apply
                                                         (repeat
                                                          (lift-if)))
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "reverse_segment(e)"
                                                             "s"
                                                             "q"
                                                             "p")
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (expand
                                                                 "reverse_segment")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "extending_s_crosses_e")
                                                                (("2"
                                                                  (rewrite
                                                                   "line_crossing_commutative")
                                                                  (("2"
                                                                    (rewrite
                                                                     "line_crossing_reverse"
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (expand
                                                                 "extending_s_crosses_e")
                                                                (("3"
                                                                  (rewrite
                                                                   "line_crossing_reverse"
                                                                   :dir
                                                                   rl)
                                                                  (("3"
                                                                    (rewrite
                                                                     "point_on_reverse_segment")
                                                                    (("3"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (expand
                                                                 "are_segments_intersecting_alt?")
                                                                (("4"
                                                                  (skeep
                                                                   -
                                                                   t)
                                                                  (("4"
                                                                    (assert)
                                                                    (("4"
                                                                      (rewrite
                                                                       "point_on_reverse_segment")
                                                                      (("4"
                                                                        (inst?)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (skeep)
                                                                (("5"
                                                                  (inst?
                                                                   13)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (equate
                                                                       "norm(q - p)"
                                                                       "norm(p - q)"
                                                                       (rewrite
                                                                        "norm_sym"))
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "v")
                                                                    (("2"
                                                                      (hide-all-but
                                                                       (-1
                                                                        1))
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("6"
                                                                (skeep
                                                                 -
                                                                 t)
                                                                (("6"
                                                                  (inst?)
                                                                  (("6"
                                                                    (rewrite
                                                                     "point_on_reverse_segment")
                                                                    (("6"
                                                                      (assert)
                                                                      (("6"
                                                                        (equate
                                                                         "norm(q - p)"
                                                                         "norm(p - q)"
                                                                         (rewrite
                                                                          "norm_sym"))
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("7"
                                                                (expand
                                                                 "reverse_segment")
                                                                (("7"
                                                                  (expand
                                                                   "nearest_endpoints")
                                                                  (("7"
                                                                    (apply
                                                                     (repeat
                                                                      (lift-if)))
                                                                    (("7"
                                                                      (ground)
                                                                      (("7"
                                                                        (rewrite
                                                                         "norm_sym"
                                                                         1)
                                                                        (("7"
                                                                          (equate
                                                                           "norm(e`p2 - s`p1)"
                                                                           "norm(s`p1 - e`p2)"
                                                                           (rewrite
                                                                            "norm_sym"))
                                                                          (("7"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("8"
                                                                (rewrite
                                                                 "line_crossing_commutative")
                                                                (("8"
                                                                  (rewrite
                                                                   "line_crossing_reverse"
                                                                   :dir
                                                                   rl)
                                                                  (("8"
                                                                    (expand
                                                                     "reverse_segment")
                                                                    (("8"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("9"
                                                                (rewrite
                                                                 "line_crossing_commutative")
                                                                (("9"
                                                                  (rewrite
                                                                   "line_crossing_reverse"
                                                                   :dir
                                                                   rl)
                                                                  (("9"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("10"
                                                                (rewrite
                                                                 "parallel_commutative")
                                                                (("10"
                                                                  (rewrite
                                                                   "parallel_reverse"
                                                                   :dir
                                                                   rl)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("11"
                                                                (rewrite
                                                                 "collinear_reverse")
                                                                (("11"
                                                                  (rewrite
                                                                   "collinear_symmetric")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "point_on_segment?")
                                                              (("2"
                                                                (rewrite
                                                                 "point_on_reverse_segment")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             -
                                                             "e"
                                                             "s"
                                                             "q"
                                                             "p")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (ground)
                                                                (("1"
                                                                  (rewrite
                                                                   "are_segments_intersecting_alt_symmetric")
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (inst?
                                                                     12)
                                                                    (("2"
                                                                      (equate
                                                                       "norm(q - p)"
                                                                       "norm(p - q)"
                                                                       (rewrite
                                                                        "norm_sym"))
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (skeep)
                                                                  (("3"
                                                                    (inst?)
                                                                    (("3"
                                                                      (equate
                                                                       "norm(q - p)"
                                                                       "norm(p - q)"
                                                                       (rewrite
                                                                        "norm_sym"))
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("4"
                                                                  (expand
                                                                   "nearest_endpoints")
                                                                  (("4"
                                                                    (apply
                                                                     (repeat
                                                                      (lift-if)))
                                                                    (("4"
                                                                      (ground)
                                                                      (("4"
                                                                        (rewrite
                                                                         "norm_sym"
                                                                         3)
                                                                        (("4"
                                                                          (equate
                                                                           "norm(e`p1 - s`p1)"
                                                                           "norm(s`p1 - e`p1)"
                                                                           (rewrite
                                                                            "norm_sym"))
                                                                          (("4"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("5"
                                                                  (rewrite
                                                                   "parallel_commutative")
                                                                  nil
                                                                  nil)
                                                                 ("6"
                                                                  (rewrite
                                                                   "collinear_symmetric")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (inst
                                                             -
                                                             "reverse_segment(e)"
                                                             "reverse_segment(s)"
                                                             "q"
                                                             "p")
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (rewrite
                                                                 "find_perp_ray_crossing_reverse"
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (expand
                                                                   "reverse_segment")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "extending_s_crosses_e")
                                                                (("2"
                                                                  (rewrite
                                                                   "line_crossing_reverse"
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (rewrite
                                                                     "line_crossing_commutative")
                                                                    (("2"
                                                                      (rewrite
                                                                       "line_crossing_reverse"
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (rewrite
                                                                         "point_on_reverse_segment")
                                                                        (("2"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (expand
                                                                 "extending_s_crosses_e")
                                                                (("3"
                                                                  (rewrite
                                                                   "line_crossing_reverse"
                                                                   :dir
                                                                   rl)
                                                                  (("3"
                                                                    (rewrite
                                                                     "line_crossing_commutative")
                                                                    (("3"
                                                                      (rewrite
                                                                       "line_crossing_reverse"
                                                                       :dir
                                                                       rl)
                                                                      (("3"
                                                                        (rewrite
                                                                         "point_on_reverse_segment")
                                                                        (("3"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (expand
                                                                 "are_segments_intersecting_alt?")
                                                                (("4"
                                                                  (skeep
                                                                   -
                                                                   t)
                                                                  (("4"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (rewrite*
                                                                         "point_on_reverse_segment")
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (rewrite*
                                                                         "point_on_reverse_segment")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (skeep
                                                                 -
                                                                 t)
                                                                (("5"
                                                                  (inst?
                                                                   14)
                                                                  (("1"
                                                                    (rewrite*
                                                                     "point_on_reverse_segment")
                                                                    (("1"
                                                                      (equate
                                                                       "norm(q - p)"
                                                                       "norm(p - q)"
                                                                       (rewrite
                                                                        "norm_sym"))
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      1))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("6"
                                                                (skeep
                                                                 -
                                                                 t)
                                                                (("6"
                                                                  (inst?)
                                                                  (("1"
                                                                    (rewrite
                                                                     "point_on_reverse_segment")
                                                                    (("1"
                                                                      (equate
                                                                       "norm(q - p)"
                                                                       "norm(p - q)"
                                                                       (rewrite
                                                                        "norm_sym"))
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      1))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("7"
                                                                (expand
                                                                 "reverse_segment")
                                                                (("7"
                                                                  (expand
                                                                   "nearest_endpoints")
                                                                  (("7"
                                                                    (apply
                                                                     (repeat
                                                                      (lift-if)))
                                                                    (("7"
                                                                      (ground)
                                                                      (("7"
                                                                        (rewrite
                                                                         "norm_sym"
                                                                         5)
                                                                        (("7"
                                                                          (equate
                                                                           "norm(e`p2 - s`p2)"
                                                                           "norm(s`p2 - e`p2)"
                                                                           (rewrite
                                                                            "norm_sym"))
                                                                          (("7"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("8"
                                                                (rewrite
                                                                 "line_crossing_reverse"
                                                                 :dir
                                                                 rl)
                                                                (("8"
                                                                  (rewrite
                                                                   "line_crossing_commutative")
                                                                  (("8"
                                                                    (rewrite
                                                                     "line_crossing_reverse"
                                                                     :dir
                                                                     rl)
                                                                    (("8"
                                                                      (expand
                                                                       "reverse_segment")
                                                                      (("8"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("9"
                                                                (rewrite
                                                                 "line_crossing_reverse"
                                                                 :dir
                                                                 rl)
                                                                (("9"
                                                                  (rewrite
                                                                   "line_crossing_commutative")
                                                                  (("9"
                                                                    (rewrite
                                                                     "line_crossing_reverse"
                                                                     :dir
                                                                     rl)
                                                                    (("9"
                                                                      (expand
                                                                       "reverse_segment")
                                                                      (("9"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("10"
                                                                (rewrite
                                                                 "parallel_reverse"
                                                                 :dir
                                                                 rl)
                                                                (("10"
                                                                  (rewrite
                                                                   "parallel_commutative")
                                                                  (("10"
                                                                    (rewrite
                                                                     "parallel_reverse"
                                                                     :dir
                                                                     rl)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("11"
                                                                (rewrite
                                                                 "collinear_reverse")
                                                                (("11"
                                                                  (rewrite
                                                                   "collinear_symmetric")
                                                                  (("11"
                                                                    (rewrite
                                                                     "collinear_reverse")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "point_on_segment?")
                                                              (("2"
                                                                (rewrite
                                                                 "point_on_reverse_segment")
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (expand
                                                               "point_on_segment?")
                                                              (("3"
                                                                (rewrite
                                                                 "point_on_reverse_segment")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (inst
                                                             -
                                                             "e"
                                                             "reverse_segment(s)"
                                                             "q"
                                                             "p")
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (rewrite
                                                                 "find_perp_ray_crossing_reverse"
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "extending_s_crosses_e")
                                                                (("2"
                                                                  (rewrite
                                                                   "line_crossing_reverse"
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (rewrite
                                                                     "point_on_reverse_segment")
                                                                    (("2"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (expand
                                                                 "extending_s_crosses_e")
                                                                (("3"
                                                                  (rewrite
                                                                   "line_crossing_commutative")
                                                                  (("3"
                                                                    (rewrite
                                                                     "line_crossing_reverse"
                                                                     :dir
                                                                     rl)
                                                                    (("3"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (expand
                                                                 "are_segments_intersecting_alt?")
                                                                (("4"
                                                                  (skeep
                                                                   -
                                                                   t)
                                                                  (("4"
                                                                    (assert)
                                                                    (("4"
                                                                      (rewrite
                                                                       "point_on_reverse_segment")
                                                                      (("4"
                                                                        (inst?)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (skeep
                                                                 -
                                                                 t)
                                                                (("5"
                                                                  (rewrite
                                                                   "point_on_reverse_segment")
                                                                  (("5"
                                                                    (inst?
                                                                     13)
                                                                    (("5"
                                                                      (equate
                                                                       "norm(q - p)"
                                                                       "norm(p - q)"
                                                                       (rewrite
                                                                        "norm_sym"))
                                                                      (("5"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("6"
                                                                (skeep
                                                                 -
                                                                 t)
                                                                (("6"
                                                                  (inst?)
                                                                  (("1"
                                                                    (equate
                                                                     "norm(q - p)"
                                                                     "norm(p - q)"
                                                                     (rewrite
                                                                      "norm_sym"))
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      1))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("7"
                                                                (expand
                                                                 "reverse_segment")
                                                                (("7"
                                                                  (expand
                                                                   "nearest_endpoints")
                                                                  (("7"
                                                                    (apply
                                                                     (repeat
                                                                      (lift-if)))
                                                                    (("7"
                                                                      (ground)
                                                                      (("7"
                                                                        (rewrite
                                                                         "norm_sym"
                                                                         6)
                                                                        (("7"
                                                                          (equate
                                                                           "norm(e`p1 - s`p2)"
                                                                           "norm(s`p2 - e`p1)"
                                                                           (rewrite
                                                                            "norm_sym"))
                                                                          (("7"
                                                                            (expand
                                                                             "min")
                                                                            (("7"
                                                                              (apply
                                                                               (repeat
                                                                                (lift-if)))
                                                                              (("7"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("8"
                                                                (rewrite
                                                                 "line_crossing_reverse"
                                                                 :dir
                                                                 rl)
                                                                (("8"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("9"
                                                                (rewrite
                                                                 "line_crossing_reverse"
                                                                 :dir
                                                                 rl)
                                                                (("9"
                                                                  (expand
                                                                   "reverse_segment")
                                                                  (("9"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("10"
                                                                (rewrite
                                                                 "parallel_reverse"
                                                                 :dir
                                                                 rl)
                                                                (("10"
                                                                  (rewrite
                                                                   "parallel_commutative")
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("11"
                                                                (rewrite
                                                                 "collinear_symmetric")
                                                                (("11"
                                                                  (rewrite
                                                                   "collinear_reverse")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "point_on_segment?")
                                                              (("2"
                                                                (rewrite
                                                                 "point_on_reverse_segment")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "endpoint_nearest_point_btw_segs_subcase_base_2")
                                                      (("2"
                                                        (apply
                                                         (repeat
                                                          (lift-if)))
                                                        (("2"
                                                          (ground)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "reverse_segment(e)"
                                                             "s"
                                                             "q"
                                                             "p")
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (expand
                                                                 "reverse_segment")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "extending_s_crosses_e")
                                                                (("2"
                                                                  (rewrite
                                                                   "line_crossing_commutative")
                                                                  (("2"
                                                                    (rewrite
                                                                     "line_crossing_reverse"
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (expand
                                                                 "extending_s_crosses_e")
                                                                (("3"
                                                                  (rewrite
                                                                   "line_crossing_reverse"
                                                                   :dir
                                                                   rl)
                                                                  (("3"
                                                                    (rewrite
                                                                     "point_on_reverse_segment")
                                                                    (("3"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (expand
                                                                 "are_segments_intersecting_alt?")
                                                                (("4"
                                                                  (skeep
                                                                   -
                                                                   t)
                                                                  (("4"
                                                                    (assert)
                                                                    (("4"
                                                                      (rewrite
                                                                       "point_on_reverse_segment")
                                                                      (("4"
                                                                        (inst?)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (skeep
                                                                 -
                                                                 t)
                                                                (("5"
                                                                  (inst?
                                                                   14)
                                                                  (("1"
                                                                    (equate
                                                                     "norm(q - p)"
                                                                     "norm(p - q)"
                                                                     (rewrite
                                                                      "norm_sym"))
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      1))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("6"
                                                                (skeep
                                                                 -
                                                                 t)
                                                                (("6"
                                                                  (inst?)
                                                                  (("6"
                                                                    (rewrite
                                                                     "point_on_reverse_segment")
                                                                    (("6"
                                                                      (equate
                                                                       "norm(q - p)"
                                                                       "norm(p - q)"
                                                                       (rewrite
                                                                        "norm_sym"))
                                                                      (("6"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("7"
                                                                (expand
                                                                 "reverse_segment")
                                                                (("7"
                                                                  (hide-all-but
                                                                   (-7
                                                                    -9
                                                                    1))
                                                                  (("7"
                                                                    (expand
                                                                     "is_nearest_endpoint_pair?")
                                                                    (("7"
                                                                      (rewrite
                                                                       "norm_sym")
                                                                      (("7"
                                                                        (equate
                                                                         "norm(e`p2 - s`p1)"
                                                                         "norm(s`p1 - e`p2)"
                                                                         (rewrite
                                                                          "norm_sym"))
                                                                        (("7"
                                                                          (equate
                                                                           "norm(e`p2 - s`p2)"
                                                                           "norm(s`p2 - e`p2)"
                                                                           (rewrite
                                                                            "norm_sym"))
                                                                          (("7"
                                                                            (equate
                                                                             "norm(e`p1 - s`p1)"
                                                                             "norm(s`p1 - e`p1)"
                                                                             (rewrite
                                                                              "norm_sym"))
                                                                            (("7"
                                                                              (expand
                                                                               "nearest_endpoints")
                                                                              (("7"
                                                                                (apply
                                                                                 (repeat
                                                                                  (lift-if)))
                                                                                (("7"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("8"
                                                                (rewrite
                                                                 "line_crossing_commutative")
                                                                (("8"
                                                                  (rewrite
                                                                   "line_crossing_reverse"
                                                                   :dir
                                                                   rl)
                                                                  (("8"
                                                                    (expand
                                                                     "reverse_segment")
                                                                    (("8"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("9"
                                                                (rewrite
                                                                 "line_crossing_commutative")
                                                                (("9"
                                                                  (rewrite
                                                                   "line_crossing_reverse"
                                                                   :dir
                                                                   rl)
                                                                  (("9"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("10"
                                                                (rewrite
                                                                 "parallel_commutative")
                                                                (("10"
                                                                  (rewrite
                                                                   "parallel_reverse"
                                                                   :dir
                                                                   rl)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("11"
                                                                (rewrite
                                                                 "collinear_reverse")
                                                                (("11"
                                                                  (rewrite
                                                                   "collinear_symmetric")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "point_on_segment?")
                                                              (("2"
                                                                (rewrite
                                                                 "point_on_reverse_segment")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             -
                                                             "e"
                                                             "s"
                                                             "q"
                                                             "p")
                                                            (("2"
                                                              (ground)
                                                              (("1"
                                                                (rewrite
                                                                 "are_segments_intersecting_alt_symmetric")
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (skeep
                                                                 -
                                                                 t)
                                                                (("2"
                                                                  (inst?
                                                                   13)
                                                                  (("2"
                                                                    (equate
                                                                     "norm(q - p)"
                                                                     "norm(p - q)"
                                                                     (rewrite
                                                                      "norm_sym"))
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skeep
                                                                 -
                                                                 t)
                                                                (("3"
                                                                  (inst?)
                                                                  (("3"
                                                                    (equate
                                                                     "norm(q - p)"
                                                                     "norm(p - q)"
                                                                     (rewrite
                                                                      "norm_sym"))
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (replace
                                                                 -2)
                                                                (("4"
                                                                  (replace
                                                                   -3)
                                                                  (("4"
                                                                    (hide-all-but
                                                                     (-8
                                                                      -10
                                                                      1))
                                                                    (("4"
                                                                      (expand
                                                                       "is_nearest_endpoint_pair?")
                                                                      (("4"
                                                                        (equate
                                                                         "norm(e`p1 - s`p1)"
                                                                         "norm(s`p1 - e`p1)"
                                                                         (rewrite
                                                                          "norm_sym"))
                                                                        (("4"
                                                                          (equate
                                                                           "norm(e`p2 - s`p1)"
                                                                           "norm(s`p1 - e`p2)"
                                                                           (rewrite
                                                                            "norm_sym"))
                                                                          (("4"
                                                                            (equate
                                                                             "norm(e`p2 - s`p2)"
                                                                             "norm(s`p2 - e`p2)"
                                                                             (rewrite
                                                                              "norm_sym"))
                                                                            (("4"
                                                                              (equate
                                                                               "norm(e`p1 - s`p2)"
                                                                               "norm(s`p2 - e`p1)"
                                                                               (rewrite
                                                                                "norm_sym"))
                                                                              (("4"
                                                                                (expand
                                                                                 "nearest_endpoints")
                                                                                (("4"
                                                                                  (apply
                                                                                   (repeat
                                                                                    (lift-if)))
                                                                                  (("4"
                                                                                    (ground)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "min")
                                                                                      (("1"
                                                                                        (apply
                                                                                         (repeat
                                                                                          (lift-if)))
                                                                                        (("1"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "min")
                                                                                      (("2"
                                                                                        (apply
                                                                                         (repeat
                                                                                          (lift-if)))
                                                                                        (("2"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (expand
                                                                                       "min")
                                                                                      (("3"
                                                                                        (apply
                                                                                         (repeat
                                                                                          (lift-if)))
                                                                                        (("3"
                                                                                          (ground)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (rewrite
                                                                 "parallel_commutative")
                                                                nil
                                                                nil)
                                                               ("6"
                                                                (rewrite
                                                                 "collinear_symmetric")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (inst
                                                             -
                                                             "reverse_segment(e)"
                                                             "reverse_segment(s)"
                                                             "q"
                                                             "p")
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (rewrite
                                                                 "find_perp_ray_crossing_reverse"
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (expand
                                                                   "reverse_segment")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "extending_s_crosses_e")
                                                                (("2"
                                                                  (rewrite
                                                                   "line_crossing_reverse"
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (rewrite
                                                                     "line_crossing_commutative")
                                                                    (("2"
                                                                      (rewrite
                                                                       "line_crossing_reverse"
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (rewrite
                                                                         "point_on_reverse_segment")
                                                                        (("2"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (expand
                                                                 "extending_s_crosses_e")
                                                                (("3"
                                                                  (rewrite
                                                                   "line_crossing_reverse"
                                                                   :dir
                                                                   rl)
                                                                  (("3"
                                                                    (rewrite
                                                                     "line_crossing_commutative")
                                                                    (("3"
                                                                      (rewrite
                                                                       "line_crossing_reverse"
                                                                       :dir
                                                                       rl)
                                                                      (("3"
                                                                        (rewrite
                                                                         "point_on_reverse_segment")
                                                                        (("3"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (expand
                                                                 "are_segments_intersecting_alt?")
                                                                (("4"
                                                                  (skeep
                                                                   -
                                                                   t)
                                                                  (("4"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (rewrite*
                                                                         "point_on_reverse_segment")
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (rewrite*
                                                                         "point_on_reverse_segment")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (skeep
                                                                 -
                                                                 t)
                                                                (("5"
                                                                  (inst?
                                                                   15)
                                                                  (("1"
                                                                    (rewrite*
                                                                     "point_on_reverse_segment")
                                                                    (("1"
                                                                      (equate
                                                                       "norm(q - p)"
                                                                       "norm(p - q)"
                                                                       (rewrite
                                                                        "norm_sym"))
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      1))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("6"
                                                                (skeep
                                                                 -
                                                                 t)
                                                                (("6"
                                                                  (inst?)
                                                                  (("1"
                                                                    (rewrite
                                                                     "point_on_reverse_segment")
                                                                    (("1"
                                                                      (equate
                                                                       "norm(q - p)"
                                                                       "norm(p - q)"
                                                                       (rewrite
                                                                        "norm_sym"))
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      1))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("7"
                                                                (expand
                                                                 "reverse_segment")
                                                                (("7"
                                                                  (expand
                                                                   "is_nearest_endpoint_pair?")
                                                                  (("7"
                                                                    (replace
                                                                     -1)
                                                                    (("7"
                                                                      (replace
                                                                       -2)
                                                                      (("7"
                                                                        (hide-all-but
                                                                         (-6
                                                                          -8
                                                                          1))
                                                                        (("7"
                                                                          (equate
                                                                           "norm(e`p1 - s`p1)"
                                                                           "norm(s`p1 - e`p1)"
                                                                           (rewrite
                                                                            "norm_sym"))
                                                                          (("7"
                                                                            (equate
                                                                             "norm(e`p2 - s`p1)"
                                                                             "norm(s`p1 - e`p2)"
                                                                             (rewrite
                                                                              "norm_sym"))
                                                                            (("7"
                                                                              (equate
                                                                               "norm(e`p2 - s`p2)"
                                                                               "norm(s`p2 - e`p2)"
                                                                               (rewrite
                                                                                "norm_sym"))
                                                                              (("7"
                                                                                (equate
                                                                                 "norm(e`p1 - s`p2)"
                                                                                 "norm(s`p2 - e`p1)"
                                                                                 (rewrite
                                                                                  "norm_sym"))
                                                                                (("7"
                                                                                  (expand
                                                                                   "nearest_endpoints")
                                                                                  (("7"
                                                                                    (apply
                                                                                     (repeat
                                                                                      (lift-if)))
                                                                                    (("7"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("8"
                                                                (rewrite
                                                                 "line_crossing_reverse"
                                                                 :dir
                                                                 rl)
                                                                (("8"
                                                                  (rewrite
                                                                   "line_crossing_commutative")
                                                                  (("8"
                                                                    (rewrite
                                                                     "line_crossing_reverse"
                                                                     :dir
                                                                     rl)
                                                                    (("8"
                                                                      (expand
                                                                       "reverse_segment")
                                                                      (("8"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("9"
                                                                (rewrite
                                                                 "line_crossing_reverse"
                                                                 :dir
                                                                 rl)
                                                                (("9"
                                                                  (rewrite
                                                                   "line_crossing_commutative")
                                                                  (("9"
                                                                    (rewrite
                                                                     "line_crossing_reverse"
                                                                     :dir
                                                                     rl)
                                                                    (("9"
                                                                      (expand
                                                                       "reverse_segment")
                                                                      (("9"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("10"
                                                                (rewrite
                                                                 "parallel_reverse"
                                                                 :dir
                                                                 rl)
                                                                (("10"
                                                                  (rewrite
                                                                   "parallel_commutative")
                                                                  (("10"
                                                                    (rewrite
                                                                     "parallel_reverse"
                                                                     :dir
                                                                     rl)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("11"
                                                                (rewrite
                                                                 "collinear_reverse")
                                                                (("11"
                                                                  (rewrite
                                                                   "collinear_symmetric")
                                                                  (("11"
                                                                    (rewrite
                                                                     "collinear_reverse")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "point_on_segment?")
                                                              (("2"
                                                                (rewrite
                                                                 "point_on_reverse_segment")
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (expand
                                                               "point_on_segment?")
                                                              (("3"
                                                                (rewrite
                                                                 "point_on_reverse_segment")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (inst
                                                             -
                                                             "e"
                                                             "reverse_segment(s)"
                                                             "q"
                                                             "p")
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (rewrite
                                                                 "find_perp_ray_crossing_reverse"
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "extending_s_crosses_e")
                                                                (("2"
                                                                  (rewrite
                                                                   "line_crossing_reverse"
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (rewrite
                                                                     "point_on_reverse_segment")
                                                                    (("2"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (expand
                                                                 "extending_s_crosses_e")
                                                                (("3"
                                                                  (rewrite
                                                                   "line_crossing_commutative")
                                                                  (("3"
                                                                    (rewrite
                                                                     "line_crossing_reverse"
                                                                     :dir
                                                                     rl)
                                                                    (("3"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (expand
                                                                 "are_segments_intersecting_alt?")
                                                                (("4"
                                                                  (skeep
                                                                   -
                                                                   t)
                                                                  (("4"
                                                                    (assert)
                                                                    (("4"
                                                                      (rewrite
                                                                       "point_on_reverse_segment")
                                                                      (("4"
                                                                        (inst?)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (skeep
                                                                 -
                                                                 t)
                                                                (("5"
                                                                  (rewrite
                                                                   "point_on_reverse_segment")
                                                                  (("5"
                                                                    (inst?
                                                                     14)
                                                                    (("5"
                                                                      (equate
                                                                       "norm(q - p)"
                                                                       "norm(p - q)"
                                                                       (rewrite
                                                                        "norm_sym"))
                                                                      (("5"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("6"
                                                                (skeep
                                                                 -
                                                                 t)
                                                                (("6"
                                                                  (inst?)
                                                                  (("1"
                                                                    (equate
                                                                     "norm(q - p)"
                                                                     "norm(p - q)"
                                                                     (rewrite
                                                                      "norm_sym"))
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      1))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("7"
                                                                (replace
                                                                 -2)
                                                                (("7"
                                                                  (replace
                                                                   -3)
                                                                  (("7"
                                                                    (hide-all-but
                                                                     (-7
                                                                      -9
                                                                      1))
                                                                    (("7"
                                                                      (expand
                                                                       "is_nearest_endpoint_pair?")
                                                                      (("7"
                                                                        (expand
                                                                         "reverse_segment")
                                                                        (("7"
                                                                          (equate
                                                                           "norm(e`p1 - s`p1)"
                                                                           "norm(s`p1 - e`p1)"
                                                                           (rewrite
                                                                            "norm_sym"))
                                                                          (("7"
                                                                            (equate
                                                                             "norm(e`p2 - s`p1)"
                                                                             "norm(s`p1 - e`p2)"
                                                                             (rewrite
                                                                              "norm_sym"))
                                                                            (("7"
                                                                              (equate
                                                                               "norm(e`p2 - s`p2)"
                                                                               "norm(s`p2 - e`p2)"
                                                                               (rewrite
                                                                                "norm_sym"))
                                                                              (("7"
                                                                                (equate
                                                                                 "norm(e`p1 - s`p2)"
                                                                                 "norm(s`p2 - e`p1)"
                                                                                 (rewrite
                                                                                  "norm_sym"))
                                                                                (("7"
                                                                                  (expand
                                                                                   "nearest_endpoints")
                                                                                  (("7"
                                                                                    (apply
                                                                                     (repeat
                                                                                      (lift-if)))
                                                                                    (("7"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("8"
                                                                (rewrite
                                                                 "line_crossing_reverse"
                                                                 :dir
                                                                 rl)
                                                                (("8"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("9"
                                                                (rewrite
                                                                 "line_crossing_reverse"
                                                                 :dir
                                                                 rl)
                                                                (("9"
                                                                  (expand
                                                                   "reverse_segment")
                                                                  (("9"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("10"
                                                                (rewrite
                                                                 "parallel_reverse"
                                                                 :dir
                                                                 rl)
                                                                (("10"
                                                                  (rewrite
                                                                   "parallel_commutative")
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("11"
                                                                (rewrite
                                                                 "collinear_symmetric")
                                                                (("11"
                                                                  (rewrite
                                                                   "collinear_reverse")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "point_on_segment?")
                                                              (("2"
                                                                (rewrite
                                                                 "point_on_reverse_segment")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-4 -6 1))
                                            (("2"
                                              (replace
                                               -1
                                               :dir
                                               rl
                                               :hide?
                                               t)
                                              (("2"
                                                (replace -1 :hide? t)
                                                (("2"
                                                  (expand
                                                   "nearest_endpoints")
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (apply
                                                       (repeat
                                                        (lift-if)))
                                                      (("1"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply
                                                       (repeat
                                                        (lift-if)))
                                                      (("2"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (endpoint_nearest_point_between_segments 0
  (endpoint_nearest_point_between_segments-1 nil 3874129019
   ("" (auto-rewrite "is_point_on_seg_equiv")
    (("" (skeep 1 t)
      (("" (expand "nearest_endpoint_cond")
        (("" (flatten)
          (("" (case "are_segments_intersecting_alt?(s, e)")
            (("1" (expand "are_segments_intersecting_alt?")
              (("1" (skeep - t)
                (("1" (assert)
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2"
                (case "segment_intersect_kernel(s, e)`1 = Parallel")
                (("1"
                  (case "find_perp_ray_crossing(e, s`p1) = None AND find_perp_ray_crossing(e, s`p2) = None")
                  (("1"
                    (case "find_perp_ray_crossing(s, e`p1) = None AND find_perp_ray_crossing(s, e`p2) = None")
                    (("1"
                      (inst 2 "nearest_endpoints(s, e)`1"
                       "nearest_endpoints(s, e)`2")
                      (("1" (expand "nearest_endpoints")
                        (("1" (apply (repeat (lift-if)))
                          (("1"
                            (lemma
                             "parallel_nonoverlapping_segs_closest_at_endpts"
                             ("s" "s" "e" "e"))
                            (("1" (split)
                              (("1"
                                (inst -1 "p" "q")
                                (("1"
                                  (expand "nearest_endpoints")
                                  (("1"
                                    (apply (repeat (lift-if)))
                                    (("1"
                                      (split)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (rewrite "norm_sym" 2)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (split)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite
                                                   "norm_sym"
                                                   -2)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (split)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (rewrite
                                                     "norm_sym"
                                                     -2)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (rewrite
                                                     "norm_sym"
                                                     -1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "point_on_segment?" 1)
                                  (("2" (propax) nil nil))
                                  nil)
                                 ("3"
                                  (expand "point_on_segment?" 1)
                                  (("3" (propax) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (-1 -2 -3))
                                (("2"
                                  (expand "overlapping?")
                                  (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "parallel?")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (expand "nearest_endpoints")
                          (("2" (expand "segment_endpoint?")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (inst 4 "e`p1"
                       "val(find_perp_ray_crossing(s, e`p1))")
                      (("1" (flatten)
                        (("1" (use "overlapping_covered")
                          (("1" (split)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (split 6)
                                  (("1"
                                    (expand
                                     "find_perp_ray_crossing"
                                     (1 2))
                                    (("1"
                                      (apply (repeat (lift-if)))
                                      (("1" (ground) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma
                                     "parallel_overlapping_segs_closest_at_perps")
                                    (("2"
                                      (inst - "e" "s" "e`p1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst - "q" "p")
                                          (("1"
                                            (equate
                                             "norm(q - p)"
                                             "norm(p - q)"
                                             (rewrite "norm_sym"))
                                            nil
                                            nil)
                                           ("2"
                                            (expand
                                             "point_on_segment?"
                                             1)
                                            (("2" (propax) nil nil))
                                            nil)
                                           ("3"
                                            (expand
                                             "point_on_segment?"
                                             1)
                                            (("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "point_on_segment?" 1)
                                        (("2" (assert) nil nil))
                                        nil)
                                       ("3"
                                        (rewrite
                                         "parallel_commutative")
                                        (("3"
                                          (expand "parallel?")
                                          (("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (1 2))
                              (("2"
                                (expand "overlapping?")
                                (("2" (ground) nil nil))
                                nil))
                              nil)
                             ("3" (propax) nil nil)
                             ("4" (propax) nil nil))
                            nil)
                           ("2" (expand "parallel?")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil)
                       ("2"
                        (use "parallel_seg_with_no_xing_imp_other_seg_has_0_or_2_xing")
                        (("1" (ground) nil nil)
                         ("2" (expand "parallel?")
                          (("2" (propax) nil nil)) nil))
                        nil)
                       ("3" (expand "segment_endpoint?")
                        (("3" (propax) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (split 1)
                    (("1"
                      (inst 3 "s`p1"
                       "val(find_perp_ray_crossing(e, s`p1))")
                      (("1" (split)
                        (("1" (expand "find_perp_ray_crossing")
                          (("1" (apply (repeat (lift-if)))
                            (("1" (ground) nil nil)) nil))
                          nil)
                         ("2"
                          (lemma
                           "parallel_overlapping_segs_closest_at_perps")
                          (("2" (inst - "s" "e" "s`p1")
                            (("1" (assert)
                              (("1"
                                (inst?)
                                (("1"
                                  (expand "point_on_segment?" 1)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (expand "point_on_segment?" 1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "point_on_segment?" 1)
                              (("2" (assert) nil nil)) nil)
                             ("3" (expand "parallel?")
                              (("3" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil)
                       ("3" (expand "segment_endpoint?")
                        (("3" (propax) nil nil)) nil))
                      nil)
                     ("2"
                      (inst 3 "s`p2"
                       "val(find_perp_ray_crossing(e, s`p2))")
                      (("1" (split)
                        (("1" (expand "find_perp_ray_crossing")
                          (("1" (apply (repeat (lift-if)))
                            (("1" (ground) nil nil)) nil))
                          nil)
                         ("2"
                          (lemma
                           "parallel_overlapping_segs_closest_at_perps")
                          (("2" (inst - "s" "e" "s`p2")
                            (("1" (assert)
                              (("1"
                                (inst?)
                                (("1"
                                  (expand "point_on_segment?" 1)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (expand "point_on_segment?" 1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "point_on_segment?" 1)
                              (("2" (assert) nil nil)) nil)
                             ("3" (expand "parallel?")
                              (("3" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil)
                       ("3" (expand "segment_endpoint?")
                        (("3" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (case "extending_s_crosses_e(s, e) OR extending_s_crosses_e(e, s)")
                  (("1" (split)
                    (("1"
                      (case "norm(val(line_crossing(s, e)) - s`p1) < norm(val(line_crossing(s, e)) - s`p2)")
                      (("1"
                        (case "find_perp_ray_crossing(e, s`p1) = None")
                        (("1"
                          (inst 3 "s`p1"
                           "IF norm(s`p1 - e`p1) < norm(s`p1 - e`p2) THEN e`p1 ELSE e`p2 ENDIF")
                          (("1" (apply (repeat (lift-if)))
                            (("1" (split)
                              (("1"
                                (ground)
                                (("1"
                                  (use
                                   "dropped_perp_after_extension_no_intersect_endpts_closest")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (expand
                                           "point_on_segment?"
                                           1)
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (expand
                                           "point_on_segment?"
                                           1)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "parallel?")
                                        (("2" (propax) nil nil))
                                        nil)
                                       ("3"
                                        (use
                                         "collinear_imp_not_extending_crosses")
                                        (("3" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (use
                                 "dropped_perp_after_extension_no_intersect_endpts_closest")
                                (("2"
                                  (assert)
                                  (("2"
                                    (ground)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (expand "point_on_segment?" 1)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (expand "point_on_segment?" 1)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "parallel?")
                                      (("2" (propax) nil nil))
                                      nil)
                                     ("3"
                                      (use
                                       "collinear_imp_not_extending_crosses")
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "segment_endpoint?")
                            (("2" (propax) nil nil)) nil))
                          nil)
                         ("2"
                          (inst 4 "s`p1"
                           "val(find_perp_ray_crossing(e, s`p1))")
                          (("1" (split)
                            (("1" (expand "find_perp_ray_crossing")
                              (("1"
                                (apply (repeat (lift-if)))
                                (("1" (ground) nil nil))
                                nil))
                              nil)
                             ("2"
                              (use "dropped_perp_after_extension_intersect")
                              (("2"
                                (assert)
                                (("2"
                                  (ground)
                                  (("1"
                                    (inst -1 "p" "q")
                                    (("1"
                                      (expand "point_on_segment?" 1)
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (expand "point_on_segment?" 1)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "parallel?")
                                    (("2" (propax) nil nil))
                                    nil)
                                   ("3"
                                    (use
                                     "collinear_imp_not_extending_crosses")
                                    (("3" (assert) nil nil))
                                    nil)
                                   ("4"
                                    (hide-all-but (-1 -3 4))
                                    (("4"
                                      (expand "extending_s_crosses_e")
                                      (("4"
                                        (ground)
                                        (("4"
                                          (rewrite
                                           "line_crossing_commutative")
                                          (("4"
                                            (expand
                                             "are_segments_intersecting_alt?")
                                            (("4"
                                              (inst?)
                                              (("4" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil)
                           ("3" (expand "segment_endpoint?")
                            (("3" (propax) nil nil)) nil))
                          nil))
                        nil)
                       ("2"
                        (case "find_perp_ray_crossing(e, s`p2) = None")
                        (("1"
                          (inst 4 "s`p2"
                           "IF norm(s`p2 - e`p1) < norm(s`p2 - e`p2) THEN e`p1 ELSE e`p2 ENDIF")
                          (("1" (apply (repeat (lift-if)))
                            (("1" (ground)
                              (("1"
                                (use
                                 "dropped_perp_after_extension_no_intersect_endpts_closest")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (rewrite "point_on_segment?" 1)
                                        nil
                                        nil)
                                       ("2"
                                        (rewrite "point_on_segment?" 1)
                                        nil
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "parallel?")
                                      (("2" (propax) nil nil))
                                      nil)
                                     ("3"
                                      (use
                                       "collinear_imp_not_extending_crosses")
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (use
                                 "dropped_perp_after_extension_no_intersect_endpts_closest")
                                (("2"
                                  (assert)
                                  (("2"
                                    (split)
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (rewrite "point_on_segment?" 1)
                                        nil
                                        nil)
                                       ("2"
                                        (rewrite "point_on_segment?" 1)
                                        nil
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "parallel?")
                                      (("2" (propax) nil nil))
                                      nil)
                                     ("3"
                                      (use
                                       "collinear_imp_not_extending_crosses")
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "segment_endpoint?")
                            (("2" (propax) nil nil)) nil))
                          nil)
                         ("2"
                          (inst + "s`p2"
                           "val(find_perp_ray_crossing(e, s`p2))")
                          (("1" (split)
                            (("1" (expand "find_perp_ray_crossing")
                              (("1"
                                (apply (repeat (lift-if)))
                                (("1" (ground) nil nil))
                                nil))
                              nil)
                             ("2"
                              (use "dropped_perp_after_extension_intersect")
                              (("2"
                                (assert)
                                (("2"
                                  (ground)
                                  (("1"
                                    (inst -1 "p" "q")
                                    (("1"
                                      (expand "point_on_segment?" 1)
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (expand "point_on_segment?" 1)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "parallel?")
                                    (("2" (propax) nil nil))
                                    nil)
                                   ("3"
                                    (use
                                     "collinear_imp_not_extending_crosses")
                                    (("3" (assert) nil nil))
                                    nil)
                                   ("4"
                                    (hide-all-but (-1 -2 5))
                                    (("4"
                                      (expand "extending_s_crosses_e")
                                      (("4"
                                        (ground)
                                        (("4"
                                          (rewrite
                                           "line_crossing_commutative")
                                          (("4"
                                            (expand
                                             "are_segments_intersecting_alt?")
                                            (("4"
                                              (inst?)
                                              (("4" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil)
                           ("3" (expand "segment_endpoint?")
                            (("3" (propax) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (expand "extending_s_crosses_e")
                        (("3" (ground) nil nil)) nil))
                      nil)
                     ("2"
                      (case "norm(val(line_crossing(e, s)) - e`p1) < norm(val(line_crossing(e, s)) - e`p2)")
                      (("1"
                        (case "find_perp_ray_crossing(s, e`p1) = None")
                        (("1"
                          (inst 4 "e`p1"
                           "IF norm(e`p1 - s`p1) < norm(e`p1 - s`p2) THEN s`p1 ELSE s`p2 ENDIF")
                          (("1" (apply (repeat (lift-if)))
                            (("1" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (use
                                     "dropped_perp_after_extension_no_intersect_endpts_closest")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split)
                                        (("1"
                                          (inst -1 "q" "p")
                                          (("1"
                                            (case-replace
                                             "norm(p-q)=norm(q-p)"
                                             :hide?
                                             T)
                                            (("1"
                                              (rewrite "norm_sym")
                                              nil
                                              nil))
                                            nil)
                                           ("2"
                                            (expand
                                             "point_on_segment?"
                                             1)
                                            (("2" (propax) nil nil))
                                            nil)
                                           ("3"
                                            (expand
                                             "point_on_segment?"
                                             1)
                                            (("3" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite
                                           "parallel_commutative")
                                          (("2"
                                            (expand "parallel?")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (use
                                           "collinear_imp_not_extending_crosses")
                                          (("3" (assert) nil nil))
                                          nil)
                                         ("4"
                                          (expand
                                           "are_segments_intersecting_alt?")
                                          (("4"
                                            (skeep - t)
                                            (("4"
                                              (inst?)
                                              (("4" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (use
                                     "dropped_perp_after_extension_no_intersect_endpts_closest")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split)
                                        (("1"
                                          (inst -1 "q" "p")
                                          (("1"
                                            (case-replace
                                             "norm(p-q)=norm(q-p)"
                                             :hide?
                                             T)
                                            (("1"
                                              (rewrite "norm_sym")
                                              nil
                                              nil))
                                            nil)
                                           ("2"
                                            (expand
                                             "point_on_segment?"
                                             1)
                                            (("2" (propax) nil nil))
                                            nil)
                                           ("3"
                                            (expand
                                             "point_on_segment?"
                                             1)
                                            (("3" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite
                                           "parallel_commutative")
                                          (("2"
                                            (expand "parallel?")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (use
                                           "collinear_imp_not_extending_crosses")
                                          (("3" (assert) nil nil))
                                          nil)
                                         ("4"
                                          (expand
                                           "are_segments_intersecting_alt?")
                                          (("4"
                                            (skeep - t)
                                            (("4"
                                              (assert)
                                              (("4" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "segment_endpoint?")
                            (("2" (propax) nil nil)) nil))
                          nil)
                         ("2"
                          (inst 5 "e`p1"
                           "val(find_perp_ray_crossing(s, e`p1))")
                          (("1" (split)
                            (("1" (expand "find_perp_ray_crossing")
                              (("1"
                                (apply (repeat (lift-if)))
                                (("1" (ground) nil nil))
                                nil))
                              nil)
                             ("2"
                              (use "dropped_perp_after_extension_intersect")
                              (("2"
                                (assert)
                                (("2"
                                  (split)
                                  (("1"
                                    (inst -1 "q" "p")
                                    (("1"
                                      (case-replace
                                       "norm(p-q)=norm(q-p)"
                                       :hide?
                                       T)
                                      (("1"
                                        (rewrite "norm_sym")
                                        nil
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "point_on_segment?" 1)
                                      (("2" (propax) nil nil))
                                      nil)
                                     ("3"
                                      (expand "point_on_segment?" 1)
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "parallel_commutative")
                                    (("2"
                                      (expand "parallel?")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (use
                                     "collinear_imp_not_extending_crosses")
                                    (("3" (assert) nil nil))
                                    nil)
                                   ("4"
                                    (hide-all-but (-1 -3 4))
                                    (("4"
                                      (expand "extending_s_crosses_e")
                                      (("4"
                                        (ground)
                                        (("4"
                                          (expand
                                           "are_segments_intersecting_alt?")
                                          (("4"
                                            (inst?)
                                            (("4"
                                              (rewrite
                                               "line_crossing_commutative")
                                              (("4" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil)
                           ("3" (expand "segment_endpoint?")
                            (("3" (propax) nil nil)) nil))
                          nil))
                        nil)
                       ("2"
                        (case "find_perp_ray_crossing(s, e`p2) = None")
                        (("1"
                          (inst 5 "e`p2"
                           "IF norm(e`p2 - s`p1) < norm(e`p2 - s`p2) THEN s`p1 ELSE s`p2 ENDIF")
                          (("1" (apply (repeat (lift-if)))
                            (("1" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (use
                                     "dropped_perp_after_extension_no_intersect_endpts_closest")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split)
                                        (("1"
                                          (inst -1 "q" "p")
                                          (("1"
                                            (case-replace
                                             "norm(p-q)=norm(q-p)"
                                             :hide?
                                             T)
                                            (("1"
                                              (rewrite "norm_sym")
                                              nil
                                              nil))
                                            nil)
                                           ("2"
                                            (expand
                                             "point_on_segment?"
                                             1)
                                            (("2" (propax) nil nil))
                                            nil)
                                           ("3"
                                            (expand
                                             "point_on_segment?"
                                             1)
                                            (("3" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite
                                           "parallel_commutative")
                                          (("2"
                                            (expand "parallel?")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (use
                                           "collinear_imp_not_extending_crosses")
                                          (("3" (assert) nil nil))
                                          nil)
                                         ("4"
                                          (expand
                                           "are_segments_intersecting_alt?")
                                          (("4"
                                            (skeep - t)
                                            (("4"
                                              (assert)
                                              (("4" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (use
                                     "dropped_perp_after_extension_no_intersect_endpts_closest")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split)
                                        (("1"
                                          (inst -1 "q" "p")
                                          (("1"
                                            (case-replace
                                             "norm(p-q)=norm(q-p)"
                                             :hide?
                                             T)
                                            (("1"
                                              (rewrite "norm_sym")
                                              nil
                                              nil))
                                            nil)
                                           ("2"
                                            (expand
                                             "point_on_segment?"
                                             1)
                                            (("2" (propax) nil nil))
                                            nil)
                                           ("3"
                                            (expand
                                             "point_on_segment?"
                                             1)
                                            (("3" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite
                                           "parallel_commutative")
                                          (("2"
                                            (expand "parallel?")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (use
                                           "collinear_imp_not_extending_crosses")
                                          (("3" (assert) nil nil))
                                          nil)
                                         ("4"
                                          (expand
                                           "are_segments_intersecting_alt?")
                                          (("4"
                                            (skeep - t)
                                            (("4"
                                              (assert)
                                              (("4" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "segment_endpoint?")
                            (("2" (propax) nil nil)) nil))
                          nil)
                         ("2"
                          (inst 6 "e`p2"
                           "val(find_perp_ray_crossing(s, e`p2))")
                          (("1" (split)
                            (("1" (expand "find_perp_ray_crossing")
                              (("1"
                                (apply (repeat (lift-if)))
                                (("1" (ground) nil nil))
                                nil))
                              nil)
                             ("2"
                              (use "dropped_perp_after_extension_intersect")
                              (("2"
                                (assert)
                                (("2"
                                  (split)
                                  (("1"
                                    (inst -1 "q" "p")
                                    (("1"
                                      (case-replace
                                       "norm(p-q)=norm(q-p)"
                                       :hide?
                                       T)
                                      (("1"
                                        (rewrite "norm_sym")
                                        nil
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "point_on_segment?" 1)
                                      (("2" (propax) nil nil))
                                      nil)
                                     ("3"
                                      (expand "point_on_segment?" 1)
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "parallel_commutative")
                                    (("2"
                                      (expand "parallel?")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (use
                                     "collinear_imp_not_extending_crosses")
                                    (("3" (assert) nil nil))
                                    nil)
                                   ("4"
                                    (hide-all-but (-1 -2 5))
                                    (("4"
                                      (expand "extending_s_crosses_e")
                                      (("4"
                                        (ground)
                                        (("4"
                                          (rewrite
                                           "line_crossing_commutative")
                                          (("4"
                                            (expand
                                             "are_segments_intersecting_alt?")
                                            (("4"
                                              (inst?)
                                              (("4" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil)
                           ("3" (expand "segment_endpoint?")
                            (("3" (propax) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (expand "extending_s_crosses_e")
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (name "xing_pt" "val(line_crossing(s, e))")
                      (("1"
                        (name "s_closest_endpt"
                              "nearest_endpoints(s, e)`1")
                        (("1"
                          (name "e_closest_endpt"
                                "nearest_endpoints(s, e)`2")
                          (("1"
                            (case "find_perp_ray_crossing(e, s_closest_endpt) = None")
                            (("1"
                              (case "find_perp_ray_crossing(s, e_closest_endpt) = None")
                              (("1"
                                (inst
                                 5
                                 "s_closest_endpt"
                                 "e_closest_endpt")
                                (("1"
                                  (split 5)
                                  (("1"
                                    (hide-all-but 1)
                                    (("1"
                                      (expand "e_closest_endpt")
                                      (("1"
                                        (expand "nearest_endpoints")
                                        (("1"
                                          (apply (repeat (lift-if)))
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (use
                                     "dropped_perp_with_no_extension_no_intersect")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (inst -1 "p" "q")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (expand
                                             "point_on_segment?"
                                             1)
                                            (("2" (propax) nil nil))
                                            nil)
                                           ("3"
                                            (expand
                                             "point_on_segment?"
                                             1)
                                            (("3" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "parallel?")
                                          (("2" (propax) nil nil))
                                          nil)
                                         ("3"
                                          (use
                                           "nonoverlapping_collinear_closest_at_endpoints")
                                          (("3"
                                            (assert)
                                            (("3"
                                              (inst -1 "p" "q")
                                              (("1"
                                                (inst
                                                 6
                                                 "nearest_endpoints(s, e)`2"
                                                 "nearest_endpoints(s, e)`1")
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (hide-all-but 1)
                                                    (("1"
                                                      (expand
                                                       "nearest_endpoints")
                                                      (("1"
                                                        (apply
                                                         (repeat
                                                          (lift-if)))
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "norm_sym")
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (expand
                                                     "nearest_endpoints")
                                                    (("2"
                                                      (expand
                                                       "segment_endpoint?")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "point_on_segment?"
                                                 1)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("3"
                                                (expand
                                                 "point_on_segment?"
                                                 1)
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (expand "s_closest_endpt")
                                    (("2"
                                      (expand "nearest_endpoints")
                                      (("2"
                                        (expand "segment_endpoint?")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case
                                 "e_closest_endpt =
                                                            IF norm(xing_pt - e`p1) < norm(xing_pt - e`p2) THEN e`p1 ELSE e`p2 ENDIF")
                                (("1"
                                  (inst
                                   7
                                   "e_closest_endpt"
                                   "val(find_perp_ray_crossing(s, e_closest_endpt))")
                                  (("1"
                                    (split 7)
                                    (("1"
                                      (expand "find_perp_ray_crossing")
                                      (("1"
                                        (apply (repeat (lift-if)))
                                        (("1" (ground) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (use
                                       "dropped_perp_from_e_with_no_extension_intersect")
                                      (("2"
                                        (split)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split)
                                            (("1"
                                              (inst -1 "p" "q")
                                              (("1"
                                                (apply
                                                 (repeat (lift-if)))
                                                (("1"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "point_on_segment?"
                                                 1)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("3"
                                                (expand
                                                 "point_on_segment?"
                                                 1)
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (apply
                                               (repeat (lift-if)))
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "parallel?")
                                          (("2" (propax) nil nil))
                                          nil)
                                         ("3"
                                          (inst
                                           7
                                           "nearest_endpoints(s, e)`1"
                                           "nearest_endpoints(s, e)`2")
                                          (("1"
                                            (split)
                                            (("1"
                                              (hide-all-but 1)
                                              (("1"
                                                (expand
                                                 "nearest_endpoints")
                                                (("1"
                                                  (apply
                                                   (repeat (lift-if)))
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (use
                                               "nonoverlapping_collinear_closest_at_endpoints")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst -1 "p" "q")
                                                  (("1"
                                                    (expand
                                                     "point_on_segment?"
                                                     1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "point_on_segment?"
                                                     1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (expand
                                               "nearest_endpoints")
                                              (("2"
                                                (expand
                                                 "segment_endpoint?")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3"
                                    (hide-all-but 1)
                                    (("3"
                                      (expand "e_closest_endpt")
                                      (("3"
                                        (expand "nearest_endpoints")
                                        (("3"
                                          (expand "segment_endpoint?")
                                          (("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (use
                                   "endpoint_nearest_point_between_segments_subcase_e")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (ground)
                                      (("1"
                                        (apply (repeat (lift-if)))
                                        (("1" (ground) nil nil))
                                        nil)
                                       ("2"
                                        (expand "parallel?")
                                        (("2" (propax) nil nil))
                                        nil)
                                       ("3"
                                        (use
                                         "nonoverlapping_collinear_closest_at_endpoints")
                                        (("3"
                                          (assert)
                                          (("3"
                                            (inst - "p" "q")
                                            (("1"
                                              (inst
                                               8
                                               "nearest_endpoints(s, e)`2"
                                               "nearest_endpoints(s, e)`1")
                                              (("1"
                                                (split)
                                                (("1"
                                                  (hide-all-but 1)
                                                  (("1"
                                                    (expand
                                                     "nearest_endpoints")
                                                    (("1"
                                                      (apply
                                                       (repeat
                                                        (lift-if)))
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite "norm_sym")
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (expand
                                                   "nearest_endpoints")
                                                  (("2"
                                                    (expand
                                                     "segment_endpoint?")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand
                                               "point_on_segment?"
                                               1)
                                              (("2" (propax) nil nil))
                                              nil)
                                             ("3"
                                              (expand
                                               "point_on_segment?"
                                               1)
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "point_on_segment?" 1)
                                    (("2" (propax) nil nil))
                                    nil)
                                   ("3"
                                    (expand "point_on_segment?" 1)
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (case "s_closest_endpt =
                                                     IF norm(xing_pt - s`p1) < norm(xing_pt - s`p2) THEN s`p1 ELSE s`p2 ENDIF")
                              (("1"
                                (inst
                                 6
                                 "s_closest_endpt"
                                 "val(find_perp_ray_crossing(e, s_closest_endpt))")
                                (("1"
                                  (split 6)
                                  (("1"
                                    (expand "find_perp_ray_crossing")
                                    (("1"
                                      (apply (repeat (lift-if)))
                                      (("1" (ground) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (use
                                     "dropped_perp_from_s_with_no_extension_intersect")
                                    (("2"
                                      (split)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split)
                                          (("1"
                                            (inst -1 "p" "q")
                                            (("1"
                                              (apply
                                               (repeat (lift-if)))
                                              (("1"
                                                (split)
                                                (("1" (ground) nil nil)
                                                 ("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand
                                               "point_on_segment?"
                                               1)
                                              (("2" (propax) nil nil))
                                              nil)
                                             ("3"
                                              (expand
                                               "point_on_segment?"
                                               1)
                                              (("3" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (apply (repeat (lift-if)))
                                            (("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "parallel?")
                                        (("2" (propax) nil nil))
                                        nil)
                                       ("3"
                                        (inst
                                         7
                                         "nearest_endpoints(s, e)`2"
                                         "nearest_endpoints(s, e)`1")
                                        (("1"
                                          (split)
                                          (("1"
                                            (hide-all-but 1)
                                            (("1"
                                              (expand
                                               "nearest_endpoints")
                                              (("1"
                                                (apply
                                                 (repeat (lift-if)))
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (use
                                             "nonoverlapping_collinear_closest_at_endpoints")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst -1 "p" "q")
                                                (("1"
                                                  (rewrite "norm_sym")
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "point_on_segment?"
                                                   1)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (expand
                                                   "point_on_segment?"
                                                   1)
                                                  (("3"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (expand
                                             "nearest_endpoints")
                                            (("2"
                                              (expand
                                               "segment_endpoint?")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil)
                                 ("3"
                                  (hide-all-but 1)
                                  (("3"
                                    (expand "s_closest_endpt")
                                    (("3"
                                      (expand "segment_endpoint?")
                                      (("3"
                                        (expand "nearest_endpoints")
                                        (("3"
                                          (apply (repeat (lift-if)))
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (use
                                 "endpoint_nearest_point_between_segments_subcase_s")
                                (("1"
                                  (assert)
                                  (("1"
                                    (ground)
                                    (("1"
                                      (apply (repeat (lift-if)))
                                      (("1" (ground) nil nil))
                                      nil)
                                     ("2"
                                      (expand "parallel?")
                                      (("2" (propax) nil nil))
                                      nil)
                                     ("3"
                                      (use
                                       "nonoverlapping_collinear_closest_at_endpoints")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (inst - "p" "q")
                                          (("1"
                                            (inst
                                             8
                                             "nearest_endpoints(s, e)`2"
                                             "nearest_endpoints(s, e)`1")
                                            (("1"
                                              (split)
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (expand
                                                   "nearest_endpoints")
                                                  (("1"
                                                    (apply
                                                     (repeat
                                                      (lift-if)))
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite "norm_sym")
                                                nil
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (expand
                                                 "nearest_endpoints")
                                                (("2"
                                                  (expand
                                                   "segment_endpoint?")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand
                                             "point_on_segment?"
                                             1)
                                            (("2" (propax) nil nil))
                                            nil)
                                           ("3"
                                            (expand
                                             "point_on_segment?"
                                             1)
                                            (("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "point_on_segment?" 1)
                                  (("2" (propax) nil nil))
                                  nil)
                                 ("3"
                                  (expand "point_on_segment?" 1)
                                  (("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2"
                        (use "no_line_crossing_eqv_parallel_or_collinear")
                        (("2" (assert)
                          (("2" (expand "parallel?")
                            (("2"
                              (use "nonoverlapping_collinear_closest_at_endpoints")
                              (("2"
                                (assert)
                                (("2"
                                  (inst?)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide-all-but 6)
                                        (("1"
                                          (expand "nearest_endpoints")
                                          (("1"
                                            (apply (repeat (lift-if)))
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (expand "nearest_endpoints")
                                        (("2"
                                          (expand "segment_endpoint?")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "point_on_segment?" 1)
                                    (("2" (propax) nil nil))
                                    nil)
                                   ("3"
                                    (expand "point_on_segment?" 1)
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (endpoint_nearest_between_reverse_segments 0
  (endpoint_nearest_between_reverse_segments-1 nil 3874129019
   ("" (skeep)
    (("" (expand "nearest_endpoint_cond")
      (("" (flatten)
        (("" (lemma "point_on_reverse_segment")
          (("" (split -4 :depth 1)
            (("1" (lemma "reverse_segment_endpoint")
              (("1" (split -2)
                (("1" (skeep)
                  (("1" (inst-cp -4 "u" "s")
                    (("1" (inst -4 "u" "e")
                      (("1" (inst 1 "u") (("1" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep - t)
                  (("2" (inst -4 "s" "v")
                    (("2" (inst - "r" "e")
                      (("2" (inst 2 "v" "r")
                        (("1" (ground) nil nil) ("2" (ground) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skeep - t)
                  (("3" (inst - "e" "v")
                    (("3" (inst - "r" "s")
                      (("3" (inst 3 "v" "r")
                        (("1" (ground) nil nil) ("2" (ground) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst-cp - "p" "s")
              (("2" (inst - "q" "e") (("2" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

