(vectors_cross_2d
 (normalized_vector_components_abs_val_lt_1 0
  (normalized_vector_components_abs_val_lt_1-1 nil 3874129020
   ("" (skeep 1 t)
    (("" (expand* "norm" "sqv" "*")
      (("" (case "v`x * v`x + v`y * v`y = 1")
        (("1" (case "v`x * v`x >= 0 AND v`y * v`y >= 0")
          (("1" (case "v`x * v`x <= 1 AND v`y * v`y <= 1")
            (("1" (hide-all-but (-1 1))
              (("1" (grind)
                (("1" (lemma "sq_neg_pos_le" ("a" "v`y" "nnc" "1"))
                  (("1" (grind) nil)))
                 ("2" (lemma "sq_neg_pos_le" ("a" "v`y" "nnc" "1"))
                  (("2" (grind) nil)))
                 ("3" (lemma "sq_neg_pos_le" ("a" "v`x" "nnc" "1"))
                  (("3" (grind) nil)))
                 ("4" (lemma "sq_neg_pos_le" ("a" "v`x" "nnc" "1"))
                  (("4" (grind) nil)))))))
             ("2" (grind) nil)))
           ("2" (grind) nil)))
         ("2" (assert) nil))))))
    nil)
   nil shostak))
 (values_neg1_to_1_implies_product_neg1_to_1 0
  (values_neg1_to_1_implies_product_neg1_to_1-1 nil 3874129020
   ("" (skeep 1 t)
    (("" (split)
      (("1" (mult-cases 1) (("1" (grind) nil)))
       ("2" (mult-cases 1) (("2" (grind) nil))))))
    nil)
   nil shostak))
 (nondegen_self_dot_product_pos 0
  (nondegen_self_dot_product_pos-1 nil 3874129020
   ("" (skeep 1 t) (("" (use "sq_dot_eq_0") (("" (grind) nil)))) nil)
   nil shostak))
 (nondegen_norm_pos 0
  (nondegen_norm_pos-1 nil 3874129020
   ("" (skeep 1 t)
    (("" (expand* "norm" "sqv")
      (("" (lemma "nondegen_self_dot_product_pos" ("ndv" "ndv"))
        (("" (lemma "sqrt_gt_0" ("nnx" "ndv * ndv"))
          (("1" (assert) nil) ("2" (assert) nil))))))))
    nil)
   nil shostak))
 (norm_perp_right_is_norm_right 0
  (norm_perp_right_is_norm_right-1 nil 3874129020 ("" (grind) nil nil)
   nil shostak))
 (dot_perp_right_is_zero 0
  (dot_perp_right_is_zero-1 nil 3874129020 ("" (grind) nil nil) nil
   shostak))
 (norm_perp_left_is_norm_left 0
  (norm_perp_left_is_norm_left-1 nil 3874129020 ("" (grind) nil nil)
   nil shostak))
 (dot_perp_left_is_zero 0
  (dot_perp_left_is_zero-1 nil 3874129020 ("" (grind) nil nil) nil
   shostak))
 (perp_left_is_inverse_perp_right 0
  (perp_left_is_inverse_perp_right-1 nil 3874129020
   ("" (grind) (("" (apply-extensionality) nil)) nil) nil shostak))
 (cross_self_zero 0
  (cross_self_zero-1 nil 3874129020 ("" (grind) nil nil) nil shostak))
 (cross_antisymmetric 0
  (cross_antisymmetric-1 nil 3874129020 ("" (grind) nil nil) nil
   shostak))
 (cross_scales 0
  (cross_scales-1 nil 3874129020 ("" (grind) nil nil) nil shostak))
 (cross_product_is_product_of_norms_and_cross_of_normalizeds_TCC1 0
  (cross_product_is_product_of_norms_and_cross_of_normalizeds_TCC1-2
   nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (cross_product_is_product_of_norms_and_cross_of_normalizeds subtype
    "vectors_cross_2d.v1" "Nz_vector"))
  (cross_product_is_product_of_norms_and_cross_of_normalizeds_TCC1-1
   nil 3874127249 ("" (subtype-tcc) nil nil) nil nil
   (cross_product_is_product_of_norms_and_cross_of_normalizeds subtype
    "vectors_cross_2d.v1" "Nz_vector")))
 (cross_product_is_product_of_norms_and_cross_of_normalizeds_TCC2 0
  (cross_product_is_product_of_norms_and_cross_of_normalizeds_TCC2-2
   nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (cross_product_is_product_of_norms_and_cross_of_normalizeds subtype
    "vectors_cross_2d.v2" "Nz_vector"))
  (cross_product_is_product_of_norms_and_cross_of_normalizeds_TCC2-1
   nil 3874127249 ("" (subtype-tcc) nil nil) nil nil
   (cross_product_is_product_of_norms_and_cross_of_normalizeds subtype
    "vectors_cross_2d.v2" "Nz_vector")))
 (cross_product_is_product_of_norms_and_cross_of_normalizeds 0
  (cross_product_is_product_of_norms_and_cross_of_normalizeds-1 nil
   3874129020 ("" (grind) nil nil) nil shostak))
 (cross_equals_same_dot_perp_left 0
  (cross_equals_same_dot_perp_left-1 nil 3874129020
   ("" (grind) nil nil) nil shostak))
 (cross_perp_right_equals_norm_product 0
  (cross_perp_right_equals_norm_product-1 nil 3874129020
   ("" (skeep 1 t)
    (("" (grind)
      (("" (case "v1`x * (a * v1`x) - v1`y * (-a * v1`y) >= 0")
        (("1"
          (lemma "sqrt_times"
           ("nny" "v1`x * v1`x + v1`y * v1`y" "nnz"
            "v1`x * v1`x * a * a + v1`y * v1`y * -a * -a"))
          (("1" (replace -1 :dir RL)
            (("1"
              (case-replace
               "(v1`x * v1`x + v1`y * v1`y) * (v1`x * v1`x * a * a + v1`y * v1`y * -a * -a) = (v1`x * (a * v1`x) - v1`y * (-a * v1`y)) * (v1`x * (a * v1`x) - v1`y * (-a * v1`y))")
              (("1" (hide -1 -2)
                (("1" (use "sqrt_sq_abs")
                  (("1" (expand "sq" :assert? T)
                    (("1"
                      (case-replace
                       "v1`x * v1`x * v1`x * v1`x * a * a - v1`x * v1`x * v1`y * v1`y * -a * a + (v1`y * v1`y * v1`y * v1`y * -a * -a - v1`x * v1`x * v1`y * v1`y * -a * a) = (v1`x * (a * v1`x) - v1`y * (-a * v1`y)) * (v1`x * (a * v1`x) - v1`y * (-a * v1`y))")
                      (("1" (replace -2)
                        (("1" (hide -1 -2) (("1" (grind) nil)))))
                       ("2" (grind) nil)))))))))
               ("2" (grind) nil)))))))
         ("2" (hide 2)
          (("2"
            (case-replace
             "v1`x * (a * v1`x) - v1`y * (-a * v1`y) = a * (v1`x * v1`x + v1`y * v1`y)")
            (("1" (field) nil) ("2" (grind) nil))))))))))
    nil)
   nil shostak))
 (cross_perp_left_equals_neg_norm_product 0
  (cross_perp_left_equals_neg_norm_product-1 nil 3874129020
   ("" (skeep 1 t)
    (("" (expand* "perp_left" "abs" "cross" "norm" "sqv" "*")
      (("" (case "v1`x * (-a * v1`x) - v1`y * (a * v1`y) < 0")
        (("1"
          (lemma "sqrt_times"
           ("nny" "v1`x * v1`x + v1`y * v1`y" "nnz"
            "v1`x * v1`x * -a * -a + v1`y * v1`y * a * a"))
          (("1"
            (case "-sqrt(v1`x * v1`x + v1`y * v1`y) * sqrt(v1`x * v1`x * -a * -a + v1`y * v1`y * a * a) = -(sqrt(v1`x * v1`x + v1`y * v1`y) * sqrt(v1`x * v1`x * -a * -a + v1`y * v1`y * a * a))")
            (("1" (replace -1)
              (("1" (replace -2 :dir RL)
                (("1"
                  (case-replace "(v1`x * v1`x + v1`y * v1`y) *
                    (v1`x * v1`x * -a * -a + v1`y * v1`y * a * a) = (v1`x * (-a * v1`x) - v1`y * (a * v1`y)) * (v1`x * (-a * v1`x) - v1`y * (a * v1`y))")
                  (("1" (hide -1 -2 -3)
                    (("1" (use "sqrt_sq_abs")
                      (("1" (expand "sq" :assert? T)
                        (("1"
                          (case-replace
                           "v1`x * v1`x * v1`x * v1`x * -a * -a -
                    v1`x * v1`x * v1`y * v1`y * -a * a
                    +
                    (v1`y * v1`y * v1`y * v1`y * a * a -
                      v1`x * v1`x * v1`y * v1`y * -a * a) = (v1`x * (-a * v1`x) - v1`y * (a * v1`y)) * (v1`x * (-a * v1`x) - v1`y * (a * v1`y))")
                          (("1" (replace -2) (("1" (grind) nil nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil)
         ("2" (case "v1`x = 0 AND v1`y = 0")
          (("1" (grind) nil nil)
           ("2" (hide 3)
            (("2"
              (case-replace
               "v1`x * (-a * v1`x) - v1`y * (a * v1`y) = -a * (v1`x * v1`x + v1`y * v1`y)")
              (("1" (field)
                (("1" (hide -)
                  (("1" (split)
                    (("1" (case "v1`x * v1`x > 0")
                      (("1" (field) nil nil) ("2" (field) nil nil))
                      nil)
                     ("2" (case "v1`y * v1`y > 0")
                      (("1" (grind) nil nil) ("2" (field) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (abs_cross_perp_equals_norm_product 0
  (abs_cross_perp_equals_norm_product-1 nil 3874129020
   ("" (skeep)
    (("" (case-replace "a = 0")
      (("1" (grind) nil)
       ("2" (case "a > 0")
        (("1" (use "cross_perp_right_equals_norm_product")
          (("1" (grind) nil) ("2" (assert) nil)))
         ("2"
          (lemma "cross_perp_right_equals_norm_product"
           ("v1" "v1" "a" "-a"))
          (("1" (grind) nil) ("2" (assert) nil))))))))
    nil)
   nil shostak))
 (abs_non_perp_cross_product_less_than_perp_normalized_TCC1 0
  (abs_non_perp_cross_product_less_than_perp_normalized_TCC1-2 nil
   3874129020 ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   nil shostak
   (abs_non_perp_cross_product_less_than_perp_normalized subtype
    "vectors_cross_2d.perp_right(vectors_cross_2d.v1)" "Normalized"))
  (abs_non_perp_cross_product_less_than_perp_normalized_TCC1-1 nil
   3874127249 ("" (subtype-tcc) nil nil) nil nil
   (abs_non_perp_cross_product_less_than_perp_normalized subtype
    "vectors_cross_2d.perp_right(vectors_cross_2d.v1)" "Normalized")))
 (abs_non_perp_cross_product_less_than_perp_normalized 0
  (abs_non_perp_cross_product_less_than_perp_normalized-1 nil
   3874129020
   ("" (skeep 1 t)
    (("" (use "cross_equals_same_dot_perp_left")
      (("" (replace -1)
        (("" (hide -1)
          (("" (case-replace "cross(v1, perp_right(v1)) = 1")
            (("1" (assert)
              (("1" (replace -1)
                (("1" (hide -1)
                  (("1" (case "norm(perp_left(v2)) = 1")
                    (("1" (name-replace "v3" "perp_left(v2)")
                      (("1" (hide -3)
                        (("1" (expand "abs")
                          (("1" (lift-if)
                            (("1" (split)
                              (("1"
                                (comment
                                 "Proof for when v1 * v3 is negative")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "norm")
                                    (("1"
                                      (lemma
                                       "sqrt_eq_1"
                                       ("nnx" "sqv(v1)"))
                                      (("1"
                                        (lemma
                                         "sqrt_eq_1"
                                         ("nnx" "sqv(v3)"))
                                        (("1"
                                          (case
                                           "sqv(v1) = 1 AND sqv(v3) = 1")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide -3 -4 -6 -7)
                                              (("1"
                                                (grind)
                                                (("1"
                                                  (case
                                                   "abs(v1`y) = sqrt(1 - v1`x * v1`x)")
                                                  (("1"
                                                    (case
                                                     "abs(v3`y) = sqrt(1 - v3`x * v3`x)")
                                                    (("1"
                                                      (expand "abs")
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (case
                                                           "-1 <= v1`x * v3`x + v1`y * v3`y")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (split)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (case
                                                                   "v1`y = -sqrt(1 - v1`x * v1`x)")
                                                                  (("1"
                                                                    (case
                                                                     "v3`y = -sqrt(1 - v3`x * v3`x)")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       1)
                                                                      (("1"
                                                                        (replace
                                                                         -2
                                                                         1)
                                                                        (("1"
                                                                          (case-replace
                                                                           "-sqrt(1 - v1`x * v1`x) * -sqrt(1 - v3`x * v3`x) = sqrt(1 - v1`x * v1`x) * sqrt(1 - v3`x * v3`x)")
                                                                          (("1"
                                                                            (lemma
                                                                             "sqrt_times"
                                                                             ("nny"
                                                                              "1 - v1`x * v1`x"
                                                                              "nnz"
                                                                              "1 - v3`x * v3`x"))
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               :dir
                                                                               RL)
                                                                              (("1"
                                                                                (case
                                                                                 "-1 <= v1`x * v3`x")
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (-8
                                                                                    -9
                                                                                    1))
                                                                                  (("2"
                                                                                    (use
                                                                                     "normalized_vector_components_abs_val_lt_1")
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "normalized_vector_components_abs_val_lt_1"
                                                                                       ("v"
                                                                                        "v3"))
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "values_neg1_to_1_implies_product_neg1_to_1"
                                                                                           ("a"
                                                                                            "v1`x"
                                                                                            "b"
                                                                                            "v3`x"))
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("3"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (use
                                                                                         "sqrt_lem")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-5
                                                                        1))
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   2)
                                                                  (("2"
                                                                    (case
                                                                     "v3`y = -sqrt(1 - v3`x * v3`x)")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       2)
                                                                      (("1"
                                                                        (lemma
                                                                         "sqrt_times"
                                                                         ("nny"
                                                                          "1 - v1`x * v1`x"
                                                                          "nnz"
                                                                          "1 - v3`x * v3`x"))
                                                                        (("1"
                                                                          (case-replace
                                                                           "v1`x * v3`x + sqrt(1 - v1`x * v1`x) * -sqrt(1 - v3`x * v3`x) = v1`x * v3`x - sqrt(1 - v1`x * v1`x) * sqrt(1 - v3`x * v3`x)")
                                                                          (("1"
                                                                            (replace
                                                                             -2
                                                                             :dir
                                                                             RL)
                                                                            (("1"
                                                                              (case
                                                                               "sqrt((1 - v1`x * v1`x) * (1 - v3`x * v3`x)) <= 1 + v1`x * v3`x")
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 (-7
                                                                                  -8
                                                                                  1))
                                                                                (("2"
                                                                                  (lemma
                                                                                   "sq_neg_pos_le"
                                                                                   ("a"
                                                                                    "sqrt((1 - v1`x * v1`x) * (1 - v3`x * v3`x))"
                                                                                    "nnc"
                                                                                    "1 + v1`x * v3`x"))
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (case
                                                                                       "-v1`x * v1`x - v3`x * v3`x <= 2 * v1`x * v3`x")
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (case
                                                                                         "0 <= sq(v1`x + v3`x)")
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lemma
                                                                                     "values_neg1_to_1_implies_product_neg1_to_1"
                                                                                     ("a"
                                                                                      "v1`x"
                                                                                      "b"
                                                                                      "v3`x"))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (use
                                                                                       "normalized_vector_components_abs_val_lt_1")
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "normalized_vector_components_abs_val_lt_1"
                                                                                         ("v"
                                                                                          "v3"))
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (lemma
                                                                                           "sqrt_lem"
                                                                                           ("nny"
                                                                                            "v3`x * v3`x + v3`y * v3`y"
                                                                                            "nnz"
                                                                                            "1"))
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (use
                                                                                       "normalized_vector_components_abs_val_lt_1")
                                                                                      (("3"
                                                                                        (flatten)
                                                                                        (("3"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (split)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (case
                                                                   "v1`y = -sqrt(1 - v1`x * v1`x)")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     2)
                                                                    (("1"
                                                                      (replace
                                                                       -4
                                                                       2)
                                                                      (("1"
                                                                        (case-replace
                                                                         "v1`x * v3`x + -sqrt(1 - v1`x * v1`x) * sqrt(1 - v3`x * v3`x) = v1`x * v3`x - sqrt(1 - v1`x * v1`x) * sqrt(1 - v3`x * v3`x)")
                                                                        (("1"
                                                                          (lemma
                                                                           "sqrt_times"
                                                                           ("nny"
                                                                            "1 - v1`x * v1`x"
                                                                            "nnz"
                                                                            "1 - v3`x * v3`x"))
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             :dir
                                                                             RL)
                                                                            (("1"
                                                                              (case
                                                                               "sqrt((1 - v1`x * v1`x) * (1 - v3`x * v3`x)) <= 1 + v1`x * v3`x")
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (case
                                                                                 "(1 - v1`x * v1`x) * (1 - v3`x * v3`x) <= sq(1 + v1`x * v3`x)")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "sq_le"
                                                                                   ("nna"
                                                                                    "sqrt((1 - v1`x * v1`x) * (1 - v3`x * v3`x))"
                                                                                    "nnb"
                                                                                    "1 + v1`x * v3`x"))
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lemma
                                                                                     "values_neg1_to_1_implies_product_neg1_to_1"
                                                                                     ("a"
                                                                                      "v1`x"
                                                                                      "b"
                                                                                      "v3`x"))
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (lemma
                                                                                       "normalized_vector_components_abs_val_lt_1"
                                                                                       ("v"
                                                                                        "v3"))
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (lemma
                                                                                         "sqrt_lem"
                                                                                         ("nny"
                                                                                          "v3`x * v3`x + v3`y * v3`y"
                                                                                          "nnz"
                                                                                          "1"))
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (lemma
                                                                                       "normalized_vector_components_abs_val_lt_1"
                                                                                       ("v"
                                                                                        "v1"))
                                                                                      (("3"
                                                                                        (flatten)
                                                                                        (("3"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "-v1`x * v1`x - v3`x * v3`x <= 2 * v1`x * v3`x")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "0 <= sq(v1`x + v3`x)")
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (name-replace
                                                                                       "a"
                                                                                       "v1`x + v3`x")
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   3)
                                                                  (("2"
                                                                    (replace
                                                                     -2
                                                                     3)
                                                                    (("2"
                                                                      (lemma
                                                                       "sqrt_times"
                                                                       ("nny"
                                                                        "1 - v1`x * v1`x"
                                                                        "nnz"
                                                                        "1 - v3`x * v3`x"))
                                                                      (("2"
                                                                        (replace
                                                                         -1
                                                                         :dir
                                                                         RL)
                                                                        (("2"
                                                                          (case
                                                                           "-1 <= v1`x * v3`x")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             (-5
                                                                              -6
                                                                              1))
                                                                            (("2"
                                                                              (use
                                                                               "normalized_vector_components_abs_val_lt_1")
                                                                              (("2"
                                                                                (lemma
                                                                                 "normalized_vector_components_abs_val_lt_1"
                                                                                 ("v"
                                                                                  "v3"))
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "values_neg1_to_1_implies_product_neg1_to_1"
                                                                                     ("a"
                                                                                      "v1`x"
                                                                                      "b"
                                                                                      "v3`x"))
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("3"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (use
                                                                                   "sqrt_lem")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "sqrt_lem"
                                                       ("nny"
                                                        "1 - v3`x * v3`x"
                                                        "nnz"
                                                        "abs(v3`y)"))
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "sqrt_lem"
                                                     ("nny"
                                                      "1 - v1`x * v1`x"
                                                      "nnz"
                                                      "abs(v1`y)"))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  ";;; Proof for when v1 * v3 is negative"))
                                nil)
                               ("2"
                                (comment
                                 "Proof for when v1 * v3 is positive")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (expand "norm")
                                    (("2"
                                      (lemma
                                       "sqrt_eq_1"
                                       ("nnx" "sqv(v1)"))
                                      (("2"
                                        (lemma
                                         "sqrt_eq_1"
                                         ("nnx" "sqv(v3)"))
                                        (("2"
                                          (case
                                           "sqv(v1) = 1 AND sqv(v3) = 1")
                                          (("1"
                                            (hide -2 -3 -4 -5)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (grind)
                                                (("1"
                                                  (case
                                                   "abs(v1`y) = sqrt(1 - v1`x * v1`x)")
                                                  (("1"
                                                    (case
                                                     "abs(v3`y) = sqrt(1 - v3`x * v3`x)")
                                                    (("1"
                                                      (comment
                                                       "Prepare to do 4-case substitution (+/- v1`y, +/- v3`y)")
                                                      (("1"
                                                        (case*
                                                         "v1`y >= 0"
                                                         "v3`y >= 0")
                                                        (("1"
                                                          (comment
                                                           "Case when both v1`y and v3`y are positive")
                                                          (("1"
                                                            (expand
                                                             "abs")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -3
                                                                 2)
                                                                (("1"
                                                                  (replace
                                                                   -4
                                                                   2)
                                                                  (("1"
                                                                    (hide
                                                                     -1
                                                                     -2
                                                                     -3
                                                                     -4
                                                                     1)
                                                                    (("1"
                                                                      (lemma
                                                                       "sqrt_times"
                                                                       ("nny"
                                                                        "1 - v1`x * v1`x"
                                                                        "nnz"
                                                                        "1 - v3`x * v3`x"))
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         :dir
                                                                         RL)
                                                                        (("1"
                                                                          (case-replace
                                                                           "(v1`x * v3`x + sqrt((1 - v1`x * v1`x) * (1 - v3`x * v3`x)) <= 1) = 1 - v1`x * v1`x - v3`x * v3`x + v1`x * v1`x * v3`x * v3`x <= 1 - 2 * v1`x * v3`x + v1`x * v1`x * v3`x * v3`x")
                                                                          (("1"
                                                                            (case-replace
                                                                             "(1 - v1`x * v1`x - v3`x * v3`x + v1`x * v1`x * v3`x * v3`x <= 1 - 2 * v1`x * v3`x + v1`x * v1`x * v3`x * v3`x) = 0 <= (v1`x - v3`x)^2")
                                                                            (("1"
                                                                              (name-replace
                                                                               "a"
                                                                               "(v1`x - v3`x)")
                                                                              (("1"
                                                                                (hide
                                                                                 -)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               -
                                                                               2)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (case-replace
                                                                             "(v1`x * v3`x + sqrt((1 - v1`x * v1`x) * (1 - v3`x * v3`x)) <= 1) = sqrt((1 - v1`x * v1`x) * (1 - v3`x * v3`x)) <= 1 - v1`x * v3`x")
                                                                            (("1"
                                                                              (hide
                                                                               -1
                                                                               -2
                                                                               2)
                                                                              (("1"
                                                                                (lemma
                                                                                 "sqrt_le"
                                                                                 ("nny"
                                                                                  "(1 - v1`x * v1`x) * (1 - v3`x * v3`x)"
                                                                                  "nnz"
                                                                                  "sq(1 - v1`x * v3`x)"))
                                                                                (("1"
                                                                                  (use
                                                                                   "sqrt_sq")
                                                                                  (("1"
                                                                                    (case
                                                                                     "1 - v1`x * v3`x >= 0")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (case
                                                                                       "v1`x <= 1"
                                                                                       "v3`x <= 1")
                                                                                      (("1"
                                                                                        (field)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         (-5
                                                                                          1))
                                                                                        (("2"
                                                                                          (case
                                                                                           "v3`y * v3`y >= 0")
                                                                                          (("1"
                                                                                            (case
                                                                                             "v3`x * v3`x <= 1")
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "sq_le_abs"
                                                                                               ("a"
                                                                                                "v3`x"
                                                                                                "b"
                                                                                                "1"))
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (hide-all-but
                                                                                         (-3
                                                                                          1))
                                                                                        (("3"
                                                                                          (lemma
                                                                                           "sq_le_abs"
                                                                                           ("a"
                                                                                            "v1`x"
                                                                                            "b"
                                                                                            "1"))
                                                                                          (("3"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            ";;; Case when both v1`y and v3`y are positive"))
                                                          nil)
                                                         ("2"
                                                          (comment
                                                           "Case when v1`y is positive and v3`y is negative")
                                                          (("2"
                                                            (expand
                                                             "abs")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (case
                                                                 "v3`y = -sqrt(1 - v3`x * v3`x)")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   3)
                                                                  (("1"
                                                                    (replace
                                                                     -4
                                                                     3)
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -2
                                                                       -3
                                                                       -4
                                                                       1
                                                                       2)
                                                                      (("1"
                                                                        (case-replace
                                                                         "v1`x * v3`x + sqrt(1 - v1`x * v1`x) * -sqrt(1 - v3`x * v3`x) =  v1`x * v3`x - sqrt(1 - v1`x * v1`x) * sqrt(1 - v3`x * v3`x)")
                                                                        (("1"
                                                                          (lemma
                                                                           "sqrt_times"
                                                                           ("nny"
                                                                            "1 - v1`x * v1`x"
                                                                            "nnz"
                                                                            "1 - v3`x * v3`x"))
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             :dir
                                                                             RL)
                                                                            (("1"
                                                                              (case
                                                                               "v1`x * v3`x - 1 <= 0")
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 -1
                                                                                 -2
                                                                                 2)
                                                                                (("2"
                                                                                  (case
                                                                                   "-1 <= v1`x AND v1`x <= 1 AND -1 <= v3`x AND v3`x <= 1")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (case
                                                                                       "v1`x >= 0"
                                                                                       "v3`x >= 0")
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "le_times_le_pos"
                                                                                         ("nnx"
                                                                                          "v1`x"
                                                                                          "y"
                                                                                          "1"
                                                                                          "nnz"
                                                                                          "v3`x"
                                                                                          "w"
                                                                                          "1"))
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil)
                                                                                         ("3"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (lemma
                                                                                         "neg_times_le"
                                                                                         ("x"
                                                                                          "v1`x"
                                                                                          "y"
                                                                                          "v3`x"))
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (case
                                                                                         "v3`x >= 0")
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "neg_times_le"
                                                                                           ("x"
                                                                                            "v1`x"
                                                                                            "y"
                                                                                            "v3`x"))
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (lemma
                                                                                           "le_times_le_neg"
                                                                                           ("x"
                                                                                            "-1"
                                                                                            "npy"
                                                                                            "v1`x"
                                                                                            "z"
                                                                                            "-1"
                                                                                            "npw"
                                                                                            "v3`x"))
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil)
                                                                                           ("3"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (use
                                                                                     "normalized_vector_components_abs_val_lt_1")
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "normalized_vector_components_abs_val_lt_1"
                                                                                       ("v"
                                                                                        "v3"))
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (use
                                                                                         "sqrt_lem")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            ";;; Case when v1`y is positive and v3`y is negative"))
                                                          nil)
                                                         ("3"
                                                          (comment
                                                           "Case when v3`y is positive and v1`y is negative")
                                                          (("3"
                                                            (expand
                                                             "abs")
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (case
                                                                 "v1`y = -sqrt(1 - v1`x * v1`x)")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   3)
                                                                  (("1"
                                                                    (replace
                                                                     -3
                                                                     3)
                                                                    (("1"
                                                                      (case-replace
                                                                       "v1`x * v3`x + -sqrt(1 - v1`x * v1`x) * sqrt(1 - v3`x * v3`x) = v1`x * v3`x - sqrt(1 - v1`x * v1`x) * sqrt(1 - v3`x * v3`x)")
                                                                      (("1"
                                                                        (lemma
                                                                         "sqrt_times"
                                                                         ("nny"
                                                                          "1 - v1`x * v1`x"
                                                                          "nnz"
                                                                          "1 - v3`x * v3`x"))
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           :dir
                                                                           RL)
                                                                          (("1"
                                                                            (case
                                                                             "v1`x * v3`x - 1 <= 0")
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "-1 <= v1`x AND v1`x <= 1 AND -1 <= v3`x AND v3`x <= 1")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (case
                                                                                   "v1`x >= 0"
                                                                                   "v3`x >= 0")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "le_times_le_pos"
                                                                                     ("nnx"
                                                                                      "v1`x"
                                                                                      "y"
                                                                                      "1"
                                                                                      "nnz"
                                                                                      "v3`x"
                                                                                      "w"
                                                                                      "1"))
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("3"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (lemma
                                                                                     "neg_times_le"
                                                                                     ("x"
                                                                                      "v1`x"
                                                                                      "y"
                                                                                      "v3`x"))
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (case
                                                                                     "v3`x >= 0")
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "neg_times_le"
                                                                                       ("x"
                                                                                        "v1`x"
                                                                                        "y"
                                                                                        "v3`x"))
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (lemma
                                                                                       "le_times_le_neg"
                                                                                       ("x"
                                                                                        "-1"
                                                                                        "npy"
                                                                                        "v1`x"
                                                                                        "z"
                                                                                        "-1"
                                                                                        "npw"
                                                                                        "v3`x"))
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil)
                                                                                       ("3"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (use
                                                                                 "normalized_vector_components_abs_val_lt_1")
                                                                                (("2"
                                                                                  (lemma
                                                                                   "normalized_vector_components_abs_val_lt_1"
                                                                                   ("v"
                                                                                    "v3"))
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (use
                                                                                     "sqrt_lem")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            ";;; Case when v3`y is positive and v1`y is negative"))
                                                          nil)
                                                         ("4"
                                                          (comment
                                                           "Case when both v1`y and v3`y are negative")
                                                          (("4"
                                                            (expand
                                                             "abs")
                                                            (("4"
                                                              (assert)
                                                              (("4"
                                                                (case
                                                                 "v1`y = -sqrt(1 - v1`x * v1`x) AND v3`y = -sqrt(1 - v3`x * v3`x)")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     4)
                                                                    (("1"
                                                                      (replace
                                                                       -2
                                                                       4)
                                                                      (("1"
                                                                        (lemma
                                                                         "sqrt_times"
                                                                         ("nny"
                                                                          "1 - v1`x * v1`x"
                                                                          "nnz"
                                                                          "1 - v3`x * v3`x"))
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           :dir
                                                                           RL)
                                                                          (("1"
                                                                            (case-replace
                                                                             "(v1`x * v3`x + sqrt((1 - v1`x * v1`x) * (1 - v3`x * v3`x)) <= 1) = 1 - v1`x * v1`x - v3`x * v3`x + v1`x * v1`x * v3`x * v3`x <= 1 - 2 * v1`x * v3`x + v1`x * v1`x * v3`x * v3`x")
                                                                            (("1"
                                                                              (case-replace
                                                                               "(1 - v1`x * v1`x - v3`x * v3`x + v1`x * v1`x * v3`x * v3`x <= 1 - 2 * v1`x * v3`x + v1`x * v1`x * v3`x * v3`x) = 0 <= (v1`x - v3`x)^2")
                                                                              (("1"
                                                                                (name-replace
                                                                                 "a"
                                                                                 "(v1`x - v3`x)")
                                                                                (("1"
                                                                                  (hide
                                                                                   1
                                                                                   2
                                                                                   3
                                                                                   -)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (case-replace
                                                                               "(v1`x * v3`x + sqrt((1 - v1`x * v1`x) * (1 - v3`x * v3`x)) <= 1) = sqrt((1 - v1`x * v1`x) * (1 - v3`x * v3`x)) <= 1 - v1`x * v3`x")
                                                                              (("1"
                                                                                (lemma
                                                                                 "sqrt_le"
                                                                                 ("nny"
                                                                                  "(1 - v1`x * v1`x) * (1 - v3`x * v3`x)"
                                                                                  "nnz"
                                                                                  "sq(1 - v1`x * v3`x)"))
                                                                                (("1"
                                                                                  (use
                                                                                   "sqrt_sq")
                                                                                  (("1"
                                                                                    (case
                                                                                     "1 - v1`x * v3`x >= 0")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       (-9
                                                                                        -10
                                                                                        1))
                                                                                      (("2"
                                                                                        (use
                                                                                         "normalized_vector_components_abs_val_lt_1")
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "normalized_vector_components_abs_val_lt_1"
                                                                                           ("v"
                                                                                            "v3"))
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (case
                                                                                               "v1`x >= 0"
                                                                                               "v3`x >= 0")
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "le_times_le_pos"
                                                                                                 ("nnx"
                                                                                                  "v1`x"
                                                                                                  "y"
                                                                                                  "1"
                                                                                                  "nnz"
                                                                                                  "v3`x"
                                                                                                  "w"
                                                                                                  "1"))
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "neg_times_le"
                                                                                                 ("x"
                                                                                                  "v1`x"
                                                                                                  "y"
                                                                                                  "v3`x"))
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (case
                                                                                                 "v3`x >= 0")
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "neg_times_le"
                                                                                                   ("x"
                                                                                                    "v1`x"
                                                                                                    "y"
                                                                                                    "v3`x"))
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (lemma
                                                                                                   "le_times_le_neg"
                                                                                                   ("x"
                                                                                                    "-1"
                                                                                                    "npy"
                                                                                                    "v1`x"
                                                                                                    "z"
                                                                                                    "-1"
                                                                                                    "npw"
                                                                                                    "v3`x"))
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (use
                                                                                             "sqrt_lem")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            ";;; Case when both v1`y and v3`y are negative"))
                                                          nil))
                                                        ";;; Prepare to do 4-case substitution (+/- v1`y, +/- v3`y)"))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "sqrt_lem"
                                                       ("nny"
                                                        "1 - v3`x * v3`x"
                                                        "nnz"
                                                        "abs(v3`y)"))
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "sqrt_lem"
                                                     ("nny"
                                                      "1 - v1`x * v1`x"
                                                      "nnz"
                                                      "abs(v1`y)"))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  ";;; Proof for when v1 * v3 is positive"))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (use "cross_perp_right_equals_norm_product")
              (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (abs_non_perp_cross_product_less_than_perp_TCC1 0
  (abs_non_perp_cross_product_less_than_perp_TCC1-2 nil 3874129020
   ("" (skeep + t)
    (("" (rewrite "norm_eq_0") (("" (grind) nil nil)) nil)) nil)
   nil shostak
   (abs_non_perp_cross_product_less_than_perp subtype
    "vectors_2D.norm(vectors_cross_2d.v1)" "nznum"))
  (abs_non_perp_cross_product_less_than_perp_TCC1-1 nil 3874127249
   ("" (subtype-tcc) nil nil) nil nil
   (abs_non_perp_cross_product_less_than_perp subtype
    "vectors_2D.norm(vectors_cross_2d.v1)" "nznum")))
 (abs_non_perp_cross_product_less_than_perp_TCC2 0
  (abs_non_perp_cross_product_less_than_perp_TCC2-2 nil 3874129020
   ("" (skeep * t)
    (("" (lemma "nz_norm_gt_0")
      (("" (inst - "v1")
        (("1" (cross-mult 1) nil nil) ("2" (grind) nil nil)) nil))
      nil))
    nil)
   nil shostak
   (abs_non_perp_cross_product_less_than_perp subtype
    "number_fields./(vectors_2D.norm(vectors_cross_2d.v2), vectors_2D.norm(vectors_cross_2d.v1))"
    "nnreal"))
  (abs_non_perp_cross_product_less_than_perp_TCC2-1 nil 3874127249
   ("" (subtype-tcc) nil nil) nil nil
   (abs_non_perp_cross_product_less_than_perp subtype
    "number_fields./(vectors_2D.norm(vectors_cross_2d.v2), vectors_2D.norm(vectors_cross_2d.v1))"
    "nnreal")))
 (abs_non_perp_cross_product_less_than_perp 0
  (abs_non_perp_cross_product_less_than_perp-1 nil 3874129020
   ("" (skeep 1 t)
    ((""
      (lemma "abs_non_perp_cross_product_less_than_perp_normalized"
       ("v1" "^(v1)" "v2" "^(v2)"))
      (("1" (expand "^")
        (("1" (assert)
          (("1"
            (lemma "cross_scales"
             ("v1" "v1" "v2" "perp_right(v1)" "a" "1" "b"
              "norm(v2) / norm(v1)"))
            (("1" (assert)
              (("1" (replace -1)
                (("1"
                  (lemma "cross_scales"
                   ("v1" "v1" "v2" "v2" "a" "1 / norm(v1)" "b"
                    "1 / norm(v2)"))
                  (("1" (replace -1 -3)
                    (("1"
                      (case-replace
                       "perp_right((1 / norm(v1)) * v1) = (1 / norm(v1)) * perp_right(v1)")
                      (("1"
                        (lemma "cross_scales"
                         ("v1" "v1" "v2" "perp_right(v1)" "a"
                          "1 / norm(v1)" "b" "1 / norm(v1)"))
                        (("1" (replace -1 -5)
                          (("1" (hide -1 -2 -3 -4)
                            (("1"
                              (lemma
                               "cross_perp_right_equals_norm_product"
                               ("v1" "v1" "a" "1"))
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (use
                                     "norm_perp_right_is_norm_right")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (hide -1 -2)
                                        (("1"
                                          (name-replace
                                           "a"
                                           "cross(v1, v2)")
                                          (("1"
                                            (case-replace
                                             "abs(a * (1 / norm(v1)) * (1 / norm(v2))) = (1 / norm(v1)) * (1 / norm(v2)) * abs(a)")
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (name-replace
                                                 "aa"
                                                 "abs(a)")
                                                (("1"
                                                  (name-replace
                                                   "nv1"
                                                   "norm(v1)")
                                                  (("1"
                                                    (name-replace
                                                     "nv2"
                                                     "norm(v2)")
                                                    (("1"
                                                      (field)
                                                      (("1"
                                                        (typepred
                                                         "nv1"
                                                         "nv2")
                                                        (("1"
                                                          (both-sides
                                                           *
                                                           "nv1"
                                                           -3)
                                                          (("1"
                                                            (both-sides
                                                             *
                                                             "nv2"
                                                             -3)
                                                            (("1"
                                                              (grind)
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               -3
                                                               2)
                                                              (("2"
                                                                (field)
                                                                nil)))))
                                                           ("2"
                                                            (field)
                                                            nil)))))))))))))))
                                             ("2"
                                              (hide-all-but 1)
                                              (("2"
                                                (use "abs_mult")
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (use "abs_mult")
                                                      (("2"
                                                        (replace
                                                         -1
                                                         :hide?
                                                         T)
                                                        (("2"
                                                          (typepred
                                                           "norm(v1)"
                                                           "norm(v2)")
                                                          (("2"
                                                            (name-replace
                                                             "nv1"
                                                             "norm(v1)")
                                                            (("2"
                                                              (name-replace
                                                               "nv2"
                                                               "norm(v2)")
                                                              (("2"
                                                                (grind)
                                                                (("1"
                                                                  (field)
                                                                  nil)
                                                                 ("2"
                                                                  (field)
                                                                  nil)
                                                                 ("3"
                                                                  (field)
                                                                  nil)
                                                                 ("4"
                                                                  (field)
                                                                  nil)))))))))))))))))))))))))))))))))))))))))))
                       ("2" (hide-all-but 1)
                        (("2" (grind) nil)))))))))))))))))))
       ("2" (grind) nil) ("3" (grind) nil))))
    nil)
   nil shostak))
 (cross_bounded_by_norm_product 0
  (cross_bounded_by_norm_product-1 nil 3874129020
   ("" (skeep 1 t)
    (("" (use "abs_non_perp_cross_product_less_than_perp")
      (("1" (assert)
        (("1"
          (lemma "cross_scales"
           ("v1" "v1" "v2" "perp_right(v1)" "a" "1" "b"
            "norm(v2) / norm(v1)"))
          (("1" (assert)
            (("1" (replace -1 :hide? T)
              (("1"
                (lemma "cross_perp_right_equals_norm_product"
                 ("v1" "v1" "a" "1"))
                (("1" (assert)
                  (("1" (replace -1 :hide? T)
                    (("1" (use "norm_perp_right_is_norm_right")
                      (("1" (replace -1 :hide? T)
                        (("1" (assert) nil)))))))))))))))))))
       ("2" (case "v1`x = 0 AND v1`y = 0")
        (("1" (grind) nil) ("2" (grind) nil))))))
    nil)
   nil shostak))
 (are_vectors_collinear?_TCC1 0
  (are_vectors_collinear?_TCC1-2 nil 3874129020
   ("" (skeep 1 t)
    (("" (expand* "cross" "norm" "sqv" "*")
      ((""
        (lemma "sqrt_times"
         ("nny" "v1`x * v1`x + v1`y * v1`y" "nnz"
          "v2`x * v2`x + v2`y * v2`y"))
        (("" (replace -1 :dir RL)
          (("" (hide -1)
            ((""
              (lemma "sqrt_sq_abs" ("x" "v1`x * v2`x + v1`y * v2`y"))
              (("" (replace -1 :dir RL)
                (("" (hide -1)
                  ((""
                    (rewrite-lemma "sqrt_eq"
                     ("nny" "sq(v1`x * v2`x + v1`y * v2`y)" "nnz"
                      "(v1`x * v1`x + v1`y * v1`y) * (v2`x * v2`x + v2`y * v2`y)"))
                    (("" (expand "sq")
                      (("" (grind)
                        (("" (case "sq(v1`x * v2`y - v1`y * v2`x) = 0")
                          (("1" (use "sq_eq_0")
                            (("1" (assert) nil nil)) nil)
                           ("2" (hide 2) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (are_vectors_collinear? subtype
    "vectors_cross_2d.cross(vectors_cross_2d.v1, vectors_cross_2d.v2) = 0"
    "{b: booleans.bool | b = (real_defs.abs(vectors_2D.*(vectors_cross_2d.v1, vectors_cross_2d.v2)) = number_fields.*(vectors_2D.norm(vectors_cross_2d.v1), vectors_2D.norm(vectors_cross_2d.v2)))}"))
  (are_vectors_collinear?_TCC1-1 nil 3874127249
   ("" (subtype-tcc) nil nil) nil nil
   (are_vectors_collinear? subtype
    "vectors_cross_2d.cross(vectors_cross_2d.v1, vectors_cross_2d.v2) = 0"
    "{b: booleans.bool | b = (real_defs.abs(vectors_2D.*(vectors_cross_2d.v1, vectors_cross_2d.v2)) = number_fields.*(vectors_2D.norm(vectors_cross_2d.v1), vectors_2D.norm(vectors_cross_2d.v2)))}")))
 (are_vectors_collinear_reflexive 0
  (are_vectors_collinear_reflexive-1 nil 3874129020
   ("" (grind) nil nil) nil shostak))
 (are_vectors_collinear_symmetric 0
  (are_vectors_collinear_symmetric-1 nil 3874129020
   ("" (grind) nil nil) nil shostak))
 (are_vectors_collinear_transitive 0
  (are_vectors_collinear_transitive-1 nil 3874129020
   ("" (skeep 1 t)
    (("" (grind)
      (("" (case-replace "v2`x = 0")
        (("1" (assert)
          (("1" (lemma "zero_times3" ("x" "v1`x" "y" "v2`y"))
            (("1" (lemma "zero_times3" ("x" "v2`y" "y" "v3`x"))
              (("1" (case "v2`y /= 0")
                (("1" (assert) nil) ("2" (grind) nil)))))))))
         ("2" (case-replace "v1`y = v1`x * v2`y / v2`x")
          (("1" (case-replace "v3`y = v2`y * v3`x / v2`x")
            (("1" (grind) nil) ("2" (grind) nil)))
           ("2" (grind) nil) ("3" (grind) nil))))))))
    nil)
   nil shostak))
 (are_vectors_approx_collinear_reflexive 0
  (are_vectors_approx_collinear_reflexive-1 nil 3874129020
   ("" (grind) nil nil) nil shostak))
 (are_vectors_approx_collinear_symmetric 0
  (are_vectors_approx_collinear_symmetric-1 nil 3874129020
   ("" (grind) nil nil) nil shostak))
 (collinear_implies_approx_collinear 0
  (collinear_implies_approx_collinear-1 nil 3874129020
   ("" (grind) nil nil) nil shostak))
 (collinear_distances_additive_line 0
  (collinear_distances_additive_line-1 nil 3874129020
   ("" (skeep)
    (("" (expand "dir_parallel?")
      (("" (skeep)
        (("" (replace -1)
          (("" (move-terms -1 l 2)
            (("" (replace -1 1)
              ((""
                (equate "r - (pk * (r - p) + p)" "(1 - pk) * (r - p)")
                (("1" (rewrite* "norm_scal")
                  (("1" (cancel-by -2 "norm(r - p)")
                    (("1" (expand "abs") (("1" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (vector_from_point_to_point_is_diff 0
  (vector_from_point_to_point_is_diff-1 nil 3874129020
   ("" (grind) nil nil) nil shostak))
 (highly_degenerate_points_collinear 0
  (highly_degenerate_points_collinear-1 nil 3874129020
   ("" (grind) nil nil) nil shostak))
 (degenerate_points_collinear 0
  (degenerate_points_collinear-1 nil 3874129020 ("" (grind) nil nil)
   nil shostak))
 (parallel_vectors_equiv_collinear 0
  (parallel_vectors_equiv_collinear-1 nil 3874129020
   ("" (skeep)
    (("" (expand "parallel?")
      (("" (expand "are_vectors_collinear?")
        (("" (expand "cross")
          (("" (ground)
            (("1" (grind) nil)
             ("2" (typepred "u" "v")
              (("2" (ground)
                (("2" (move-terms -1 l 2)
                  (("2" (assert)
                    (("2" (case "v`y = 0")
                      (("1" (case "u`y = 0")
                        (("1" (inst + "u`x/v`x")
                          (("1" (apply-extensionality 3 :hide? t)
                            (("1" (grind) nil) ("2" (grind) nil)))
                           ("2" (apply-extensionality 3 :hide? t)
                            (("2" (apply-extensionality 3 :hide? t)
                              nil)))
                           ("3" (apply-extensionality 3 :hide? t)
                            nil)))
                         ("2" (apply-extensionality 3 :hide? t) nil)))
                       ("2" (inst + "u`y/v`y")
                        (("1" (apply-extensionality 4 :hide? t)
                          (("1" (grind) (("1" (cross-mult 1) nil)))
                           ("2" (grind) nil)))
                         ("2" (ground)
                          (("2" (cross-mult -1)
                            (("2" (apply-extensionality 2 :hide? t)
                              (("2"
                                (replace -1)
                                (("2" (real-props) nil)))))))))
                         ("3" (assert) nil))))))))))))))))))))))
    nil)
   nil shostak))
 (norm_diff_pos 0
  (norm_diff_pos-1 nil 3874129020
   ("" (skeep)
    (("" (assert)
      (("" (use "nondegen_norm_pos") (("" (grind-with-ext) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (norm_diff_nonzero 0
  (norm_diff_nonzero-1 nil 3874129020
   ("" (skeep) (("" (use "norm_diff_pos") (("" (assert) nil nil)) nil))
    nil)
   nil shostak))
 (norm_diff_nonzero_2 0
  (norm_diff_nonzero_2-1 nil 3874129020
   ("" (skeep)
    (("" (use "norm_diff_nonzero") (("" (ground) nil nil)) nil)) nil)
   nil shostak))
 (add_cancel_add_2 0
  (add_cancel_add_2-1 nil 3874129020 ("" (grind) nil nil) nil shostak))
 (add_cancel_sub_2 0
  (add_cancel_sub_2-1 nil 3874129020 ("" (grind) nil nil) nil shostak))
 (scal_by_two_cancel_1 0
  (scal_by_two_cancel_1-1 nil 3874129020 ("" (grind) nil nil) nil
   shostak))
 (scal_by_two_cancel_2 0
  (scal_by_two_cancel_2-1 nil 3874129020
   ("" (skeep)
    (("" (move-terms -1 r)
      (("" (factor -1 l (1 3))
        (("" (assert)
          (("" (move-terms -1 l 2) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (dot_sqv_add 0
  (dot_sqv_add-1 nil 3874129020
   ("" (skeep)
    (("" (grind)
      ((""
        (case "exists (a, b: real): v`x = u`x + a and v`y = u`y + b")
        (("1" (skeep)
          (("1" (replace -1 :hide? t)
            (("1" (replace -1 :hide? t) (("1" (grind) nil nil)) nil))
            nil))
          nil)
         ("2" (inst + "v`x-u`x" "v`y-u`y") (("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (point_add_neg_scal 0
  (point_add_neg_scal-1 nil 3874129020 ("" (grind) nil nil) nil
   shostak))
 (point_sub_neg_scal 0
  (point_sub_neg_scal-1 nil 3874129020 ("" (grind) nil nil) nil
   shostak))
 (point_add_scal_neq_point 0
  (point_add_scal_neq_point-1 nil 3874129020
   ("" (skeep)
    (("" (lemma "add_cancel_left")
      (("" (inst - "p" "a*v" "zero") (("" (assert) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (point_sub_scal_neq_point 0
  (point_sub_scal_neq_point-1 nil 3874129020
   ("" (skeep)
    (("" (cancel-add)
      (("" (use "scal_eq_zero") (("" (ground) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (point_add_scal_neq_point_2 0
  (point_add_scal_neq_point_2-1 nil 3874129020
   ("" (skeep)
    (("" (cancel-add)
      (("" (use "scal_eq_zero") (("" (assert) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (point_sub_scal_neq_point_2 0
  (point_sub_scal_neq_point_2-1 nil 3874129020
   ("" (skeep) (("" (move-terms -1 r) (("" (assert) nil nil)) nil))
    nil)
   nil shostak))
 (parallel_neg 0
  (parallel_neg-1 nil 3874129020
   ("" (skeep)
    (("" (expand "parallel?")
      (("" (ground)
        (("1" (skeep)
          (("1" (inst + "-nzk") (("1" (assert) (("1" (grind) nil)))))))
         ("2" (skeep) (("2" (inst + "-nzk") (("2" (grind) nil))))))))))
    nil)
   nil shostak))
 (parallel_diff_points_comm_left 0
  (parallel_diff_points_comm_left-1 nil 3874129020
   ("" (skeep)
    (("" (ground)
      (("1" (expand "parallel?")
        (("1" (skeep)
          (("1" (inst + "-nzk") (("1" (grind-with-ext) nil)))))))
       ("2" (expand "parallel?")
        (("2" (skeep)
          (("2" (inst + "-nzk") (("2" (grind-with-ext) nil))))))))))
    nil)
   nil shostak))
 (parallel_diff_points_comm_right 0
  (parallel_diff_points_comm_right-1 nil 3874129020
   ("" (skeep)
    (("" (ground)
      (("1" (expand "parallel?")
        (("1" (skeep)
          (("1" (inst + "-nzk") (("1" (grind-with-ext) nil)))))))
       ("2" (expand "parallel?")
        (("2" (skeep)
          (("2" (inst + "-nzk") (("2" (grind-with-ext) nil))))))))))
    nil)
   nil shostak))
 (parallel_equiv_cross_eq_0 0
  (parallel_equiv_cross_eq_0-1 nil 3874129020
   ("" (skeep)
    (("" (expand "parallel?")
      (("" (expand "cross")
        (("" (ground)
          (("1" (skeep) (("1" (replace -1) (("1" (grind) nil)))))
           ("2" (move-terms -1 l 2)
            (("2" (assert)
              (("2" (typepred "u" "v")
                (("2" (ground)
                  (("2" (apply-extensionality 1 :hide? t)
                    (("1" (apply-extensionality 2 :hide? t)
                      (("1" (inst + "u`x/v`x")
                        (("1" (apply-extensionality 3 :hide? t)
                          (("1" (grind) nil) ("2" (grind) nil)))))
                       ("2" (claim "u`y /= 0 and v`x /= 0")
                        (("1" (ground)
                          (("1" (inst + "u`x/v`x")
                            (("1" (apply-extensionality 5 :hide? t)
                              (("1" (grind) nil)
                               ("2" (grind) nil)))))))
                         ("2" (ground)
                          (("1" (replace -1)
                            (("1" (use "zero_times3")
                              (("1" (assert) nil)))))
                           ("2" (replace -1)
                            (("2" (use "zero_times3")
                              (("2" (assert) nil)))))))))))
                     ("2" (apply-extensionality 2 :hide? t)
                      (("1" (claim "u`x /= 0 and v`y /= 0")
                        (("1" (ground)
                          (("1" (inst + "u`x/v`x")
                            (("1" (apply-extensionality 5 :hide? t)
                              (("1" (grind) nil)
                               ("2" (grind) nil)))))))
                         ("2" (ground) nil)))
                       ("2" (inst + "u`y/v`y")
                        (("2" (apply-extensionality 3 :hide? t)
                          (("1" (expand "*") (("1" (real-props) nil)))
                           ("2" (grind) nil))))))))))))))))))))))))
    nil)
   nil shostak))
 (parallel_or_pos_cross_cases 0
  (parallel_or_pos_cross_cases-1 nil 3874129020
   ("" (skeep)
    (("" (rewrite "parallel_equiv_cross_eq_0")
      (("" (rewrite "cross_antisymmetric" 3) (("" (assert) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (dir_parallel_imp_scaled_by_norms_eq 0
  (dir_parallel_imp_scaled_by_norms_eq-1 nil 3874129020
   ("" (skeep)
    (("" (expand "dir_parallel?")
      (("" (skeep)
        (("" (replace -1)
          (("" (rewrite "norm_scal")
            (("" (expand "abs") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (dir_parallel_symm 0
  (dir_parallel_symm-1 nil 3874129020
   ("" (skeep)
    (("" (expand "dir_parallel?")
      (("" (ground)
        (("1" (skeep)
          (("1" (inst + "1/pk")
            (("1" (replace -1) (("1" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (skeep)
          (("2" (inst + "1/pk")
            (("2" (replace -1) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (dir_parallel_trans 0
  (dir_parallel_trans-1 nil 3874129020
   ("" (skeep)
    (("" (expand "dir_parallel?")
      (("" (skeep*)
        (("" (replace -2)
          (("" (replace -1)
            (("" (inst + "pk * pk!1") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (dir_parallel_diff 0
  (dir_parallel_diff-1 nil 3874129020
   ("" (skeep)
    (("" (expand "dir_parallel?")
      (("" (ground)
        (("1" (skeep)
          (("1" (inst?)
            (("1" (rewrite "neg_distr_sub" 1 :dir rl)
              (("1" (grind) nil)))))))
         ("2" (skeep) (("2" (inst?) (("2" (grind) nil))))))))))
    nil)
   nil shostak))
 (dir_parallel_eqv_normalized_diffs_eq_TCC1 0
  (dir_parallel_eqv_normalized_diffs_eq_TCC1-2 nil 3874129020
   ("" (skeep) (("" (move-terms -1 l 2) (("" (assert) nil nil)) nil))
    nil)
   nil shostak
   (dir_parallel_eqv_normalized_diffs_eq subtype
    "(vectors_2D.-)(vectors_cross_2d.q, vectors_cross_2d.p)"
    "Nz_vector"))
  (dir_parallel_eqv_normalized_diffs_eq_TCC1-1 nil 3874127249
   ("" (subtype-tcc) nil nil) nil nil
   (dir_parallel_eqv_normalized_diffs_eq subtype
    "(vectors_2D.-)(vectors_cross_2d.q, vectors_cross_2d.p)"
    "Nz_vector")))
 (dir_parallel_eqv_normalized_diffs_eq_TCC2 0
  (dir_parallel_eqv_normalized_diffs_eq_TCC2-2 nil 3874129020
   ("" (skeep) (("" (move-terms -1 l 2) (("" (assert) nil nil)) nil))
    nil)
   nil shostak
   (dir_parallel_eqv_normalized_diffs_eq subtype
    "(vectors_2D.-)(vectors_cross_2d.s, vectors_cross_2d.r)"
    "Nz_vector"))
  (dir_parallel_eqv_normalized_diffs_eq_TCC2-1 nil 3874127249
   ("" (subtype-tcc) nil nil) nil nil
   (dir_parallel_eqv_normalized_diffs_eq subtype
    "(vectors_2D.-)(vectors_cross_2d.s, vectors_cross_2d.r)"
    "Nz_vector")))
 (dir_parallel_eqv_normalized_diffs_eq 0
  (dir_parallel_eqv_normalized_diffs_eq-1 nil 3874129020
   ("" (skeep)
    (("" (expand "dir_parallel?")
      (("" (expand "^")
        (("" (ground)
          (("1" (skeep)
            (("1" (replace -1)
              (("1" (rewrite "norm_scal")
                (("1" (expand "abs") (("1" (real-props) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (inst + "norm(q - p) / norm(s - r)")
            (("1" (cross-mult 1) (("1" (cross-mult -1) nil nil)) nil)
             ("2" (ground)
              (("1" (cross-mult 1) nil nil)
               ("2" (cross-mult 1) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (parallel_normalized 0
  (parallel_normalized-1 nil 3874129020
   ("" (skeep)
    (("" (expand "^")
      (("" (expand "parallel?")
        (("" (ground)
          (("1" (skeep) (("1" (inst?) nil)))
           ("2" (skeep)
            (("2" (inst + "nzk*norm(v)") (("2" (assert) nil))))))))))))
    nil)
   nil shostak))
 (normalized_diffs_anti_comm_TCC1 0
  (normalized_diffs_anti_comm_TCC1-2 nil 3874129020
   ("" (skeep) (("" (move-terms -1 l 2) (("" (assert) nil nil)) nil))
    nil)
   nil shostak
   (normalized_diffs_anti_comm subtype
    "(vectors_2D.-)(vectors_cross_2d.p, vectors_cross_2d.q)"
    "Nz_vector"))
  (normalized_diffs_anti_comm_TCC1-1 nil 3874127249
   ("" (subtype-tcc) nil nil) nil nil
   (normalized_diffs_anti_comm subtype
    "(vectors_2D.-)(vectors_cross_2d.p, vectors_cross_2d.q)"
    "Nz_vector")))
 (normalized_diffs_anti_comm_TCC2 0
  (normalized_diffs_anti_comm_TCC2-2 nil 3874129020
   ("" (skeep) (("" (move-terms -1 l 2) (("" (assert) nil nil)) nil))
    nil)
   nil shostak
   (normalized_diffs_anti_comm subtype
    "(vectors_2D.-)(vectors_cross_2d.q, vectors_cross_2d.p)"
    "Nz_vector"))
  (normalized_diffs_anti_comm_TCC2-1 nil 3874127249
   ("" (subtype-tcc) nil nil) nil nil
   (normalized_diffs_anti_comm subtype
    "(vectors_2D.-)(vectors_cross_2d.q, vectors_cross_2d.p)"
    "Nz_vector")))
 (normalized_diffs_anti_comm 0
  (normalized_diffs_anti_comm-1 nil 3874129020
   ("" (skeep) (("" (grind-with-ext) nil nil)) nil) nil shostak))
 (norm_scal_norm 0
  (norm_scal_norm-1 nil 3874129020
   ("" (skeep)
    (("" (rewrite "norm_scal")
      (("" (typepred "v") (("" (assert) nil))))))
    nil)
   nil shostak))
 (norm_diff_scal_norm 0
  (norm_diff_scal_norm-1 nil 3874129020
   ("" (skeep)
    (("" (cancel-add! (! 1 l 1))
      (("" (rewrite "norm_scal_norm")
        (("" (assert) (("" (expand "abs") (("" (propax) nil))))))))))
    nil)
   nil shostak))
 (norm_diff_scal_norm_2 0
  (norm_diff_scal_norm_2-1 nil 3874129020
   ("" (skeep)
    (("" (cancel-add! (! 1 l 1))
      (("" (rewrite "norm_scal_norm")
        (("" (expand "abs") (("" (propax) nil))))))))
    nil)
   nil shostak))
 (norm_diff_scal_norm_3 0
  (norm_diff_scal_norm_3-1 nil 3874129020
   ("" (skeep)
    (("" (cancel-add! (! 1 l 1))
      (("" (assert)
        (("" (rewrite "norm_scal")
          (("" (assert)
            (("" (typepred "v")
              (("" (expand "abs") (("" (grind) nil))))))))))))))
    nil)
   nil shostak))
 (norm_diff_horiz 0
  (norm_diff_horiz-1 nil 3874129020
   ("" (skeep)
    (("" (expand "norm")
      (("" (expand "abs")
        (("" (lift-if)
          (("" (ground)
            (("1" (equate "sqv(v - u)" "sq(u`x - v`x)")
              (("1" (rewrite "sqrt_sq") (("1" (grind) nil nil)) nil)
               ("2" (hide 2) (("2" (grind) nil nil)) nil))
              nil)
             ("2" (equate "sqv(v - u)" "sq(v`x - u`x)")
              (("1" (rewrite "sqrt_sq") nil nil)
               ("2" (hide 3) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (norm_diff_vert 0
  (norm_diff_vert-1 nil 3874129020
   ("" (skeep)
    (("" (expand "norm")
      (("" (expand "abs")
        (("" (lift-if)
          (("" (ground)
            (("1" (equate "sqv(v - u)" "sq(u`y - v`y)")
              (("1" (rewrite "sqrt_sq") (("1" (grind) nil nil)) nil)
               ("2" (hide 2) (("2" (grind) nil nil)) nil))
              nil)
             ("2" (equate "sqv(v - u)" "sq(v`y - u`y)")
              (("1" (rewrite "sqrt_sq") nil nil)
               ("2" (hide 3) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (perp_left_not_parallel 0
  (perp_left_not_parallel-1 nil 3874129020
   ("" (skeep)
    (("" (expand "parallel?")
      (("" (skeep)
        (("" (expand "perp_left")
          (("" (claim "v`x = nzk * v`y and v`y = nzk * (-v`x)" t)
            (("" (flatten)
              (("" (hide -3)
                (("" (typepred "v")
                  (("" (flatten)
                    (("" (apply-extensionality :hide? t)
                      (("1" (replace -2)
                        (("1" (cancel-by -1 "v`x")
                          (("1" (mult-by -1 "-1")
                            (("1" (grind-reals)
                              (("1"
                                (claim "0 < nzk*nzk" t)
                                (("1"
                                  (claim "1*-1 < 0" t)
                                  (("1"
                                    (replace -3)
                                    (("1" (grind) nil)))))))))))))))
                       ("2" (replace -1)
                        (("2" (hide -1)
                          (("2" (cancel-by -1 "v`y")
                            nil))))))))))))))))))))))))
    nil)
   nil shostak))
 (perp_right_not_parallel 0
  (perp_right_not_parallel-1 nil 3874129020
   ("" (skeep)
    (("" (expand "parallel?")
      (("" (skeep)
        (("" (expand "perp_right")
          (("" (claim "v`x = -nzk * v`y and v`y = nzk * v`x" t)
            (("" (hide -2)
              (("" (flatten)
                (("" (typepred "v")
                  (("" (flatten)
                    (("" (apply-extensionality :hide? t)
                      (("1" (replace -2)
                        (("1" (cancel-by -1 "v`x")
                          (("1" (mult-by -1 "-1")
                            (("1" (grind-reals)
                              (("1"
                                (claim "0 < nzk*nzk" t)
                                (("1"
                                  (claim "1*-1 < 0" t)
                                  (("1"
                                    (replace -3)
                                    (("1" (grind) nil)))))))))))))))
                       ("2" (replace -1)
                        (("2" (hide -1)
                          (("2" (cancel-by -1 "v`y")
                            nil))))))))))))))))))))))))
    nil)
   nil shostak))
 (perp_left_right_parallel 0
  (perp_left_right_parallel-1 nil 3874129020
   ("" (skeep)
    (("" (expand "dir_parallel?")
      (("" (skeep) (("" (inst?) (("" (grind-with-ext) nil))))))))
    nil)
   nil shostak))
 (vector_neq_perp_right 0
  (vector_neq_perp_right-1 nil 3874129020
   ("" (skeep + t)
    (("" (expand "perp_right")
      (("" (rewrite* "comps_eq") (("" (ground) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (vector_neq_perp_left 0
  (vector_neq_perp_left-1 nil 3874129020
   ("" (skeep + t)
    (("" (expand "perp_left")
      (("" (rewrite* "comps_eq") (("" (ground) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (vector_neq_scaled_perp_right 0
  (vector_neq_scaled_perp_right-1 nil 3874129020
   ("" (skeep)
    (("" (expand "perp_right")
      (("" (grind)
        (("" (case "v`x = -a*v`y and v`y = a*v`x")
          (("1" (hide -2)
            (("1" (flatten)
              (("1" (replace -1)
                (("1" (cancel-by -2 "v`y")
                  (("1" (grind)
                    (("1" (typepred "v")
                      (("1" (grind-with-ext) nil nil)) nil))
                    nil)
                   ("2" (lemma "sq_pos")
                    (("2" (inst -1 "a")
                      (("2" (expand "sq") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (vector_neq_scaled_perp_left 0
  (vector_neq_scaled_perp_left-1 nil 3874129020
   ("" (skeep)
    (("" (expand "perp_left")
      (("" (grind)
        (("" (case "v`x = a*v`y and v`y = -a*v`x")
          (("1" (hide -2)
            (("1" (flatten)
              (("1" (replace -1)
                (("1" (cancel-by -2 "v`y")
                  (("1" (grind)
                    (("1" (typepred "v")
                      (("1" (grind-with-ext) nil nil)) nil))
                    nil)
                   ("2" (lemma "sq_pos")
                    (("2" (inst -1 "a")
                      (("2" (expand "sq") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (cross_scales_1 0
  (cross_scales_1-1 nil 3874129020 ("" (grind) nil nil) nil shostak))
 (cross_scales_2 0
  (cross_scales_2-1 nil 3874129020 ("" (grind) nil nil) nil shostak))
 (cross_lt_0_norm_2 0
  (cross_lt_0_norm_2-1 nil 3874129020
   ("" (skeep)
    (("" (expand "^")
      (("" (rewrite "cross_scales_2") (("" (real-props) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (cross_gt_0_norm_2 0
  (cross_gt_0_norm_2-1 nil 3874129020
   ("" (skeep)
    (("" (expand "^")
      (("" (rewrite "cross_scales_2") (("" (real-props) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (cross_distrib_add_1 0
  (cross_distrib_add_1-1 nil 3874129020 ("" (grind) nil nil) nil
   shostak))
 (cross_distrib_add_2 0
  (cross_distrib_add_2-1 nil 3874129020 ("" (grind) nil nil) nil
   shostak))
 (cross_distrib_sub_1 0
  (cross_distrib_sub_1-1 nil 3874129020 ("" (grind) nil nil) nil
   shostak))
 (cross_distrib_sub_2 0
  (cross_distrib_sub_2-1 nil 3874129020 ("" (grind) nil nil) nil
   shostak))
 (cross_scal_add_1 0
  (cross_scal_add_1-1 nil 3874129020 ("" (grind) nil nil) nil shostak))
 (cross_scal_add_2 0
  (cross_scal_add_2-1 nil 3874129020 ("" (grind) nil nil) nil shostak))
 (cross_scal_sub_1 0
  (cross_scal_sub_1-1 nil 3874129020 ("" (grind) nil nil) nil shostak))
 (cross_scal_sub_2 0
  (cross_scal_sub_2-1 nil 3874129020 ("" (grind) nil nil) nil shostak))
 (cross_norm_gt_0 0
  (cross_norm_gt_0-1 nil 3874129020
   ("" (skeep)
    (("" (case-replace "u=zero")
      (("1" (grind) nil nil)
       ("2" (case-replace "v=zero")
        (("1" (grind) nil nil)
         ("2" (expand "^")
          (("2" (rewrite "cross_scales_2")
            (("2" (real-props)
              (("2" (ground)
                (("2" (use "norm_eq_0") (("2" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (cross_norm_lt_0 0
  (cross_norm_lt_0-1 nil 3874129020
   ("" (skeep)
    (("" (case-replace "u=zero")
      (("1" (grind) nil nil)
       ("2" (case-replace "v=zero")
        (("1" (grind) nil nil)
         ("2" (expand "^")
          (("2" (rewrite "cross_scales_2")
            (("2" (real-props)
              (("2" (ground)
                (("2" (use "norm_eq_0") (("2" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (cross_both_norm_gt_0 0
  (cross_both_norm_gt_0-1 nil 3874129020
   ("" (skeep)
    (("" (case-replace "u=zero")
      (("1" (grind) nil nil)
       ("2" (case-replace "v=zero")
        (("1" (grind) nil nil)
         ("2" (expand "^")
          (("2" (rewrite "cross_scales")
            (("2" (real-props)
              (("2" (ground)
                (("1" (use "norm_eq_0") (("1" (ground) nil nil)) nil)
                 ("2" (use "norm_eq_0") (("2" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (cross_both_norm_lt_0 0
  (cross_both_norm_lt_0-1 nil 3874129020
   ("" (skeep)
    (("" (case-replace "u=zero")
      (("1" (grind) nil nil)
       ("2" (case-replace "v=zero")
        (("1" (grind) nil nil)
         ("2" (expand "^")
          (("2" (rewrite "cross_scales")
            (("2" (real-props)
              (("2" (ground)
                (("1" (use "norm_eq_0") (("1" (ground) nil nil)) nil)
                 ("2" (use "norm_eq_0") (("2" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (cross_both_norm_eq_0 0
  (cross_both_norm_eq_0-1 nil 3874129020
   ("" (skeep)
    (("" (expand "^")
      (("" (rewrite "cross_scales") (("" (real-props) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (cross_scal_norm_add_neq_zero 0
  (cross_scal_norm_add_neq_zero-1 nil 3874129020
   ("" (skeep)
    (("" (expand "cross")
      (("" (rewrite "add_eq_zero")
        (("" (case "v=zero")
          (("1" (grind) nil nil)
           ("2" (div-by -2 "norm(v)")
            (("1" (replace -1)
              (("1" (expand "*")
                (("1" (expand "-")
                  (("1" (factor -2 l) (("1" (real-props) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (ground) (("2" (rewrite "norm_eq_0") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (neg_cross_neg 0
  (neg_cross_neg-1 nil 3874129020 ("" (grind) nil nil) nil shostak))
 (cross_diff_1 0
  (cross_diff_1-1 nil 3874129020 ("" (grind) nil nil) nil shostak))
 (cross_diff_2 0
  (cross_diff_2-1 nil 3874129020 ("" (grind) nil nil) nil shostak))
 (cross_diff_both 0
  (cross_diff_both-1 nil 3874129020 ("" (grind) nil nil) nil shostak))
 (cross_diff_rev_eq_0 0
  (cross_diff_rev_eq_0-1 nil 3874129020 ("" (grind) nil nil) nil
   shostak))
 (cross_gt_0_swap_lt_0 0
  (cross_gt_0_swap_lt_0-1 nil 3874129020
   ("" (skeep) (("" (grind) nil nil)) nil) nil shostak))
 (cross_lt_0_swap_gt_0 0
  (cross_lt_0_swap_gt_0-1 nil 3874129020
   ("" (skeep) (("" (grind) nil nil)) nil) nil shostak))
 (cross_eq_0_iff_point_on_line 0
  (cross_eq_0_iff_point_on_line-1 nil 3874129020
   ("" (skeep)
    (("" (ground)
      (("1" (expand "cross")
        (("1" (move-terms -1 l 2)
          (("1" (assert)
            (("1" (inst-cp + "norm(v-u)/norm(w-u)")
              (("1" (inst + "-norm(v-u)/norm(w-u)")
                (("1"
                  (equate "u + -norm(v - u) / norm(w - u) * (w - u)"
                   "u - norm(v - u) / norm(w - u) * (w - u)")
                  (("1" (name-replace "NV" "norm(v - u)")
                    (("1" (name-replace "NW" "norm(w - u)")
                      (("1" (move-terms 1 r 1)
                        (("1" (move-terms 2 r 1)
                          (("1" (cross-mult 2)
                            (("1"
                              (equate "-(NV / NW * (w - u))"
                               "-(1/NW)*NV * (w - u)")
                              (("1"
                                (mult-by 1 "NW")
                                (("1"
                                  (equate
                                   "NW * (-(1 / NW) * NV)"
                                   "-NV")
                                  (("1"
                                    (expand "NW")
                                    (("1"
                                      (expand "NV")
                                      (("1"
                                        (expand "norm")
                                        (("1"
                                          (expand "sqv")
                                          (("1"
                                            (expand "*" +)
                                            (("1"
                                              (name-replace*
                                               ("a"
                                                "(v - u)`x"
                                                "d"
                                                "(w - u)`y"
                                                "b"
                                                "(v - u)`y"
                                                "c"
                                                "(w - u)`x"))
                                              (("1"
                                                (case-replace "d=0")
                                                (("1"
                                                  (case-replace "c=0")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (case-replace
                                                     "b=0")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case "c >= 0")
                                                        (("1"
                                                          (rewrite
                                                           "sqrt_square")
                                                          (("1"
                                                            (case
                                                             "a >= 0")
                                                            (("1"
                                                              (rewrite
                                                               "sqrt_square")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (use
                                                               "sqrt_sq_neg")
                                                              (("2"
                                                                (expand
                                                                 "sq")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (use
                                                           "sqrt_sq_neg")
                                                          (("2"
                                                            (expand
                                                             "sq")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 :hide?
                                                                 t)
                                                                (("2"
                                                                  (lemma
                                                                   "sqrt_sq_abs")
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "a")
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (div-by -6 "c")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (div-by -5 "d")
                                                  (("2"
                                                    (replace -5)
                                                    (("2"
                                                      (real-props)
                                                      (("2"
                                                        (equate
                                                         "b * b * c * c / (d * d) + b * b"
                                                         "(c * c + d * d) * sq(b/d)")
                                                        (("1"
                                                          (rewrite*
                                                           "sqrt_times")
                                                          (("1"
                                                            (case
                                                             "b/d >= 0")
                                                            (("1"
                                                              (rewrite
                                                               "sqrt_sq")
                                                              (("1"
                                                                (real-props)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "sqrt_sq_neg")
                                                              (("2"
                                                                (real-props)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (1 2))
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide-all-but
                                                           (1 2))
                                                          (("3"
                                                            (ground)
                                                            (("3"
                                                              (div-by
                                                               -1
                                                               "d")
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil)
               ("2" (ground)
                (("2" (use "norm_eq_0")
                  (("2" (ground)
                    (("2" (move-terms -2 l 2) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (replace -1)
          (("2" (assert)
            (("2" (rewrite "cross_scales_1")
              (("2" (rewrite "cross_self_zero")
                (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (cross_eq_0_iff_point_on_line_2 0
  (cross_eq_0_iff_point_on_line_2-1 nil 3874129020
   ("" (skeep)
    (("" (rewrite "cross_antisymmetric")
      (("" (use "cross_eq_0_iff_point_on_line") (("" (ground) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (cross_diff_triangle_gt 0
  (cross_diff_triangle_gt-1 nil 3874129020 ("" (grind) nil nil) nil
   shostak))
 (cross_diff_triangle_lt 0
  (cross_diff_triangle_lt-1 nil 3874129020 ("" (grind) nil nil) nil
   shostak))
 (triangle_vertices_cross_pos 0
  (triangle_vertices_cross_pos-1 nil 3874129020
   ("" (skeep) (("" (grind) nil nil)) nil) nil shostak))
 (triangle_vertices_cross_neg 0
  (triangle_vertices_cross_neg-1 nil 3874129020
   ("" (skeep) (("" (grind) nil nil)) nil) nil shostak))
 (three_vectors_cross_dot 0
  (three_vectors_cross_dot-1 nil 3874129020
   ("" (skeep)
    (("" (grind)
      (("" (move-terms 1 r)
        (("" (elim-unary 1)
          (("" (factor 1 l (2 4))
            (("" (factor 1 l (3 4))
              ((""
                (equate "-1 * u`y * w`x + u`x * w`y"
                 "-u`y * w`x + u`x * w`y" (assert))
                (("" (factor 1 l (1 2))
                  (("" (equate "v`y * v`y + v`x * v`x" "1")
                    (("1" (assert) nil nil)
                     ("2" (hide-all-but 1)
                      (("2" (typepred "v")
                        (("2" (expand "norm")
                          (("2" (lemma "sqrt_eq_1")
                            (("2" (inst - "sqv(v)")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (below_horiz_cross_diff_pos 0
  (below_horiz_cross_diff_pos-1 nil 3874129020
   ("" (skeep)
    (("" (grind)
      (("" (factor 1 l (1 3))
        (("" (factor 1 l (2 3))
          (("" (move-terms 1 l 2)
            ((""
              (equate "u`y * (v`x - w`x)" "-(u`y * (w`x - v`x))"
               (assert))
              (("" (elim-unary 1)
                (("" (cancel-by 1 "w`x - v`x") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (above_horiz_cross_diff_neg 0
  (above_horiz_cross_diff_neg-1 nil 3874129020
   ("" (skeep)
    (("" (grind)
      (("" (factor 1 l (1 3))
        (("" (factor 1 l (2 3))
          (("" (move-terms 1 l 2)
            ((""
              (equate "u`y * (v`x - w`x)" "-(u`y * (w`x - v`x))"
               (assert))
              (("" (elim-unary 1)
                (("" (cancel-by 1 "w`x - v`x") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (above_cross_diff_pos_imp_x_lt 0
  (above_cross_diff_pos_imp_x_lt-1 nil 3874129020
   ("" (skeep)
    (("" (grind)
      (("" (factor -3 l (2 3 4 6))
        (("" (assert)
          (("" (factor -3 l (1 3))
            (("" (factor -3 l (2 3))
              (("" (move-terms -3 l 2)
                ((""
                  (equate "p`x * (u`y - v`y)" "-(p`x * (v`y - u`y))"
                   (assert))
                  (("" (elim-unary -3)
                    (("" (cancel-by -3 "v`y - u`y") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (above_cross_pos_interpolate_below 0
  (above_cross_pos_interpolate_below-1 nil 3874129020
   ("" (skeep)
    (("" (grind)
      (("" (move-terms -4 l 2)
        (("" (move-terms -5 l 2)
          (("" (move-terms 1 l 2)
            (("" (assert)
              (("" (case-replace "w`y = 0")
                (("1" (assert)
                  (("1" (mult-cases -6) (("1" (mult-cases 1) nil nil))
                    nil))
                  nil)
                 ("2" (div-by -4 "v`y")
                  (("2" (div-by -5 "w`y" -)
                    (("2" (case "u`y * v`x / v`y < u`y * w`x / w`y")
                      (("1" (cancel-by -1 "u`y")
                        (("1" (cross-mult -2) nil nil)) nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (above_peak_cross_vect 0
  (above_peak_cross_vect-1 nil 3874129020
   ("" (skeep)
    (("" (grind)
      (("" (case "p`x > 0 or u`x > 0")
        (("1" (case "p`x < 0 or w`x < 0")
          (("1" (case "u`x > 0")
            (("1" (case "p`x > 0")
              (("1" (mult-by -9 "p`x")
                (("1" (equate "w`y * p`x" "p`x * w`y" (assert))
                  (("1" (add-formulas -7 -9)
                    (("1" (move-terms -1 l 2)
                      (("1" (cancel-add -1)
                        (("1" (assert) (("1" (mult-cases -1) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (mult-by -7 "p`x" -)
                (("1" (add-formulas -5 -7)
                  (("1" (mult-cases -1) nil nil)) nil)
                 ("2" (case-replace "p`x = 0")
                  (("1" (assert) (("1" (mult-cases -5) nil nil)) nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("2" (case "p`x > 0")
              (("1" (mult-by -8 "p`x")
                (("1" (add-formulas -6 -8)
                  (("1" (equate "w`y * p`x" "p`x * w`y" (assert))
                    (("1" (move-terms -1 l 2)
                      (("1" (cancel-add -1)
                        (("1" (assert) (("1" (mult-cases -1) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (mult-by -6 "p`x" -)
                (("2" (add-formulas -4 -6) nil nil)) nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (case-replace "p`y = 0")
              (("1" (move-terms -4 l 2)
                (("1" (assert)
                  (("1" (case-replace "p`x = 0")
                    (("1" (assert) nil nil)
                     ("2" (mult-cases -5) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1)
                (("2" (move-terms -1 l 2)
                  (("2" (move-terms -2 l 2)
                    (("2" (move-terms -3 l 2)
                      (("2" (assert)
                        (("2" (div-by -1 "w`y" -)
                          (("2" (div-by -3 "w`y" -)
                            (("2" (div-by -2 "p`y" -)
                              (("2"
                                (div-by -3 "p`y" -)
                                (("2"
                                  (div-by -2 "u`y" -)
                                  (("2"
                                    (div-by -1 "u`y" -)
                                    (("2"
                                      (equate
                                       "u`y * w`x / w`y / u`y"
                                       "w`x / w`y"
                                       (real-props))
                                      (("2"
                                        (equate
                                         "u`y * p`x / p`y / u`y"
                                         "p`x / p`y"
                                         (real-props))
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (case "w`x > 0")
            (("1" (mult-by -5 "w`x")
              (("1" (add-formulas -2 -5)
                (("1" (mult-cases -1) nil nil)) nil))
              nil)
             ("2" (move-terms -1 l 2)
              (("2" (move-terms -2 l 2)
                (("2" (move-terms -3 l 2)
                  (("2" (assert)
                    (("2" (case-replace "p`y = 0")
                      (("1" (case-replace "p`x = 0")
                        (("1" (assert) nil nil)
                         ("2" (mult-cases -3) nil nil))
                        nil)
                       ("2" (div-by -1 "w`y" -)
                        (("2" (div-by -3 "w`y" -)
                          (("2" (div-by -2 "p`y" -)
                            (("2" (div-by -3 "p`y" -)
                              (("2"
                                (div-by -2 "u`y" -)
                                (("2"
                                  (div-by -1 "u`y" -)
                                  (("2"
                                    (equate
                                     "u`y * w`x / w`y / u`y"
                                     "w`x / w`y"
                                     (real-props))
                                    (("2"
                                      (equate
                                       "u`y * p`x / p`y / u`y"
                                       "p`x / p`y"
                                       (real-props))
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (above_peak_cross_diff 0
  (above_peak_cross_diff-1 nil 3874129020
   ("" (skeep)
    (("" (use "above_peak_cross_vect")
      (("" (assert) (("" (expand "-") (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (cross_perp_right_eq_pos_dot 0
  (cross_perp_right_eq_pos_dot-1 nil 3874129020 ("" (grind) nil nil)
   nil shostak))
 (cross_perp_left_eq_neg_dot 0
  (cross_perp_left_eq_neg_dot-1 nil 3874129020 ("" (grind) nil nil) nil
   shostak))
 (cross_eq_0_imp_dot_neg 0
  (cross_eq_0_imp_dot_neg-1 nil 3874129020
   ("" (skeep)
    (("" (expand "cross")
      (("" (move-terms -1 l 2)
        (("" (assert)
          (("" (expand "*" 1)
            (("" (typepred "u")
              (("" (typepred "v")
                (("" (ground)
                  (("" (case "u`x * v`x <= 0 and u`y * v`y <= 0")
                    (("1" (flatten)
                      (("1" (apply-extensionality 1 :hide? t)
                        (("1" (apply-extensionality 2 :hide? t) nil
                          nil)
                         ("2" (apply-extensionality 2 :hide? t)
                          (("2" (case-replace "v`x=0")
                            (("1" (assert)
                              (("1" (mult-cases -4) nil nil)) nil)
                             ("2" (case "u`x*v`x=0")
                              (("1" (mult-cases -1) nil nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (ground)
                      (("1" (inst + "u`x/v`x")
                        (("1" (apply-extensionality 5 :hide? t)
                          (("1" (grind) nil nil) ("2" (grind) nil nil))
                          nil)
                         ("2" (ground)
                          (("1" (cross-mult 1)
                            (("1" (mult-cases 2)
                              (("1" (grind) nil nil)) nil))
                            nil)
                           ("2" (cross-mult 1)
                            (("2" (mult-cases 2)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst + "u`y/v`y")
                        (("1" (apply-extensionality 5 :hide? t)
                          (("1" (mult-by 1 "v`y")
                            (("1" (grind) nil nil)) nil)
                           ("2" (grind) nil nil))
                          nil)
                         ("2" (ground)
                          (("1" (cross-mult 1)
                            (("1" (mult-cases 2)
                              (("1" (grind) nil nil)) nil))
                            nil)
                           ("2" (cross-mult 1)
                            (("2" (mult-cases 2)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (cross_perp_right_pos 0
  (cross_perp_right_pos-1 nil 3874129020
   ("" (skeep)
    (("" (lemma "cross_perp_right_equals_norm_product")
      (("" (inst - "v" "1")
        (("" (skoletin)
          (("" (assert)
            (("" (replace -2)
              (("" (replace -1)
                (("" (claim "%1 > 0 and %2 > 0" nil (! 1 l *))
                  (("1" (flatten) (("1" (mult-cases 1) nil nil)) nil)
                   ("2" (hide-all-but 1)
                    (("2" (typepred "v")
                      (("2" (flatten)
                        (("2" (ground)
                          (("2" (use "norm_eq_0")
                            (("2" (assert)
                              (("2"
                                (hide 1)
                                (("2"
                                  (expand "perp_right")
                                  (("2"
                                    (decompose-equality -1)
                                    (("2" (grind-with-ext) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (cross_perp_left_neg 0
  (cross_perp_left_neg-1 nil 3874129020
   ("" (skeep)
    (("" (lemma "cross_perp_left_equals_neg_norm_product")
      (("" (inst - "v" "1")
        (("" (skoletin)
          (("" (typepred "norm(v)" "norm(v2)")
            (("" (claim "norm(v2) /= 0" t)
              (("" (ground)
                (("" (replace -5)
                  (("" (replace -4) (("" (mult-cases 2) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (parallel_cross_perp_right_pos 0
  (parallel_cross_perp_right_pos-1 nil 3874129020
   ("" (skeep)
    (("" (expand "dir_parallel?")
      (("" (skeep)
        (("" (expand "perp_right")
          (("" (expand "cross")
            (("" (replace -1)
              (("" (expand "*")
                (("" (hide -1)
                  (("" (factor 1 l)
                    (("" (div-by 1 "pk")
                      (("" (equate (! 1 l) "sqv(v)" t)
                        (("" (use "sqv_eq_0") (("" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (cross_normalized_perp_right_pos_TCC1 0
  (cross_normalized_perp_right_pos_TCC1-2 nil 3874129020
   ("" (skeep * t)
    (("" (expand "perp_right")
      (("" (decompose-equality -1) (("" (grind-with-ext) nil nil))
        nil))
      nil))
    nil)
   nil shostak
   (cross_normalized_perp_right_pos subtype
    "vectors_cross_2d.perp_right(vectors_cross_2d.v)" "Nz_vector"))
  (cross_normalized_perp_right_pos_TCC1-1 nil 3874127249
   ("" (subtype-tcc) nil nil) nil nil
   (cross_normalized_perp_right_pos subtype
    "vectors_cross_2d.perp_right(vectors_cross_2d.v)" "Nz_vector")))
 (cross_normalized_perp_right_pos 0
  (cross_normalized_perp_right_pos-1 nil 3874129020
   ("" (skeep)
    (("" (expand "^")
      (("" (lemma "cross_scales")
        (("" (inst - "v" "perp_right(v)" "1" "1 / norm(perp_right(v))")
          (("" (assert)
            (("" (replace -1)
              (("" (use "cross_perp_right_pos")
                (("" (hide -2)
                  (("" (mult-cases 1)
                    (("" (cross-mult 2)
                      (("" (ground)
                        (("" (use "norm_eq_0")
                          (("" (ground)
                            (("" (hide-all-but -2)
                              ((""
                                (expand "perp_right")
                                ((""
                                  (typepred "v")
                                  ((""
                                    (flatten)
                                    ((""
                                      (decompose-equality -1)
                                      (("" (grind-with-ext) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (same_side_points_off_line 0
  (same_side_points_off_line-1 nil 3874129020
   ("" (skeep*)
    (("" (expand "cross")
      (("" (replace -4 :hide? t)
        (("" (move-terms -4 l 1)
          ((""
            (case "(1 - t) * (u - p)`x + t * (v - p)`x = d * (q - p)`x and (1 - t) * (u - p)`y + t * (v - p)`y = d * (q - p)`y")
            (("1" (flatten)
              (("1" (case-replace "t=0")
                (("1" (grind)
                  (("1" (move-terms -2 l 2)
                    (("1" (move-terms -3 l 2)
                      (("1" (replace -2)
                        (("1" (replace -3) (("1" (real-props) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (move-terms -1 l 1)
                  (("2" (move-terms -2 l 1)
                    (("2" (div-by -1 "t")
                      (("2" (div-by -2 "t")
                        (("2" (replace -1)
                          (("2" (replace -2)
                            (("2" (hide -1 -2)
                              (("2"
                                (real-props)
                                (("2"
                                  (factor -2 l (1 3))
                                  (("2"
                                    (move-terms -2 l (2 3))
                                    (("2"
                                      (assert)
                                      (("2"
                                        (factor -2 *)
                                        (("2"
                                          (div-by -2 "1-t")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (same_side_points_off_line_2 0
  (same_side_points_off_line_2-1 nil 3874129020
   ("" (skeep*)
    (("" (expand "cross")
      (("" (replace -4 :hide? t)
        (("" (move-terms -4 l 1)
          ((""
            (case "(1 - t) * (u - p)`x + t * (v - p)`x = d * (q - p)`x and (1 - t) * (u - p)`y + t * (v - p)`y = d * (q - p)`y")
            (("1" (flatten)
              (("1" (case-replace "t=0")
                (("1" (grind)
                  (("1" (move-terms -2 l 2)
                    (("1" (move-terms -3 l 2)
                      (("1" (replace -2)
                        (("1" (replace -3) (("1" (real-props) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (move-terms -1 l 1)
                  (("2" (move-terms -2 l 1)
                    (("2" (div-by -1 "t")
                      (("2" (div-by -2 "t")
                        (("2" (replace -1)
                          (("2" (replace -2)
                            (("2" (hide -1 -2)
                              (("2"
                                (real-props)
                                (("2"
                                  (factor -2 l (1 3))
                                  (("2"
                                    (move-terms -2 l (2 3))
                                    (("2"
                                      (assert)
                                      (("2"
                                        (factor -2 *)
                                        (("2"
                                          (div-by -2 "1-t")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (perp_vector_points_off_line 0
  (perp_vector_points_off_line-1 nil 3874129020
   ("" (skeep*)
    (("" (replace -1 :hide? t)
      (("" (replace -2 :hide? t)
        (("" (ground)
          (("1" (cancel-add -1)
            (("1" (move-terms -1 r 1)
              (("1" (factor -1 l)
                (("1" (name-replace "qp" "q - p")
                  (("1" (name-replace "da" "d - a")
                    (("1" (use "comps_eq")
                      (("1" (replace -1 :hide? t)
                        (("1" (grind-with-ext)
                          (("1" (div-by -1 "c")
                            (("1" (replace -1 :dir rl :hide? t)
                              (("1"
                                (cross-mult -1)
                                (("1"
                                  (cancel-by -1 "qp`x")
                                  (("1"
                                    (expand "qp")
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (rewrite* "sq_rew")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (div-by -2 "c")
                            (("2" (mult-by -2 "-1")
                              (("2"
                                (real-props)
                                (("2"
                                  (replace -1 :dir rl :hide? t)
                                  (("2"
                                    (cross-mult -1)
                                    (("2"
                                      (cancel-by -1 "qp`y")
                                      (("1"
                                        (expand "qp")
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (rewrite* "sq_rew")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (cancel-add -1)
            (("2" (move-terms -1 r 1)
              (("2" (factor -1 l)
                (("2" (name-replace "qp" "q - p")
                  (("2" (name-replace "da" "d - a")
                    (("2" (use "comps_eq")
                      (("2" (replace -1 :hide? t)
                        (("2" (grind-with-ext)
                          (("1" (div-by -1 "c")
                            (("1" (mult-by -1 "-1")
                              (("1"
                                (real-props)
                                (("1"
                                  (replace -1 :dir rl :hide? t)
                                  (("1"
                                    (cross-mult -1)
                                    (("1"
                                      (cancel-by -1 "qp`x")
                                      (("1"
                                        (expand "qp")
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (rewrite* "sq_rew")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (div-by -2 "c")
                            (("2" (replace -2 :dir rl :hide? t)
                              (("2"
                                (cross-mult -1)
                                (("2"
                                  (cancel-by -1 "qp`y")
                                  (("1"
                                    (expand "qp")
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (rewrite* "sq_rew")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (endpoints_on_parallel_line 0
  (endpoints_on_parallel_line-1 nil 3874129020
   ("" (skeep*)
    (("" (expand "parallel?")
      (("" (skeep)
        (("" (div-by -1 "nzk")
          (("" (replace -2 -1)
            (("" (isolate -1 r 1)
              (("" (replace -1 3 :dir rl)
                (("" (inst + "1/nzk + a")
                  (("" (hide-all-but +) (("" (grind-with-ext) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (endpts_and_other_pts_on_line 0
  (endpts_and_other_pts_on_line-1 nil 3874129020
   ("" (skeep*)
    (("" (replace -1 :hide? t)
      (("" (replace -1 :hide? t)
        (("" (inst + "a + c * (b - a)")
          (("" (replace -1 :hide? t) (("" (grind-with-ext) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (parallel_and_perp_off_line 0
  (parallel_and_perp_off_line-1 nil 3874129020
   ("" (skeep*)
    (("" (lemma "endpoints_on_parallel_line")
      (("" (inst - "p" "q" "s" "r")
        (("" (assert)
          (("" (split -1)
            (("1" (skeep)
              (("1" (lemma "endpts_and_other_pts_on_line")
                (("1" (inst - "p" "q" "r" "s" "v")
                  (("1" (split -1)
                    (("1" (skeep)
                      (("1" (lemma "perp_vector_points_off_line")
                        (("1" (inst - "p" "q" "u" "v")
                          (("1" (assert)
                            (("1" (split -1)
                              (("1"
                                (inst?)
                                (("1" (ground) nil nil))
                                nil)
                               ("2" (inst?) nil nil)
                               ("3" (inst?) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil) ("3" (inst?) nil nil)
                     ("4" (inst?) nil nil) ("5" (inst?) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (rewrite "parallel_diff_points_comm_right") nil nil)
             ("3" (inst?) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (rel_slope_gt_imp_pos_cross 0
  (rel_slope_gt_imp_pos_cross-1 nil 3874129020
   ("" (skeep)
    (("" (replace -3 -5)
      (("" (replace -4 -5)
        (("" (assert)
          (("" (rewrite* "norm_scal")
            (("" (expand "abs")
              (("" (rewrite* "norm_perp_right_is_norm_right")
                (("" (cancel-by -5 "norm(v-u)")
                  (("" (move-terms -6 r)
                    (("" (factor -6 l)
                      (("" (mult-cases -6)
                        (("" (equate "v + k*(u-v)" "v - k*(v-u)" t)
                          (("" (replace -7 :hide? t)
                            (("" (assert)
                              ((""
                                (equate
                                 "perp_right(v - (v - k * (v - u)))"
                                 "k*perp_right(v-u)"
                                 t)
                                ((""
                                  (equate
                                   "v - k * (v - u) + d * (k * perp_right(v - u))"
                                   "v + k * (d * perp_right(v - u) - (v - u))"
                                   t)
                                  ((""
                                    (replace -5 :hide? t)
                                    ((""
                                      (assert)
                                      ((""
                                        (rewrite "cross_scales_2")
                                        ((""
                                          (real-props)
                                          ((""
                                            (rewrite
                                             "cross_distrib_sub_2"
                                             2)
                                            ((""
                                              (rewrite
                                               "cross_scales_2"
                                               2)
                                              ((""
                                                (hide -1 1)
                                                ((""
                                                  (rewrite
                                                   "cross_equals_same_dot_perp_left"
                                                   1)
                                                  ((""
                                                    (rewrite
                                                     "perp_left_is_inverse_perp_right")
                                                    ((""
                                                      (rewrite
                                                       "cross_diff_2"
                                                       +)
                                                      ((""
                                                        (elim-unary 1)
                                                        ((""
                                                          (equate
                                                           "v-u"
                                                           "-(u-v)"
                                                           t)
                                                          ((""
                                                            (rewrite
                                                             "dot_neg_right")
                                                            ((""
                                                              (replace
                                                               -3
                                                               :hide?
                                                               t)
                                                              ((""
                                                                (grind)
                                                                ((""
                                                                  (case
                                                                   "forall (x: real): --x = x")
                                                                  (("1"
                                                                    (rewrite
                                                                     -1)
                                                                    (("1"
                                                                      (real-props)
                                                                      (("1"
                                                                        (case
                                                                         "forall (x,y,z: real): x * -(y - z) = x * z - x * y")
                                                                        (("1"
                                                                          (rewrite
                                                                           -1)
                                                                          (("1"
                                                                            (rewrite
                                                                             -1)
                                                                            (("1"
                                                                              (rewrite
                                                                               -1)
                                                                              (("1"
                                                                                (rewrite
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (move-terms
                                                                                     1
                                                                                     l
                                                                                     7)
                                                                                    (("1"
                                                                                      (factor
                                                                                       1
                                                                                       l)
                                                                                      (("1"
                                                                                        (equate
                                                                                         (!
                                                                                          1
                                                                                          l
                                                                                          2)
                                                                                         (!
                                                                                          1
                                                                                          r
                                                                                          2
                                                                                          2
                                                                                          1)
                                                                                         t)
                                                                                        (("1"
                                                                                          (invoke
                                                                                           (name-replace
                                                                                            "E"
                                                                                            "%1")
                                                                                           (!
                                                                                            1
                                                                                            l
                                                                                            2))
                                                                                          (("1"
                                                                                            (equate
                                                                                             "0 - d*-E"
                                                                                             "d*E"
                                                                                             t)
                                                                                            (("1"
                                                                                              (cancel-by
                                                                                               1
                                                                                               "E")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (short_dist_offset_points_neq 0
  (short_dist_offset_points_neq-1 nil 3874129020
   ("" (skeep)
    (("" (replace -1)
      (("" (replace -2)
        (("" (move-terms -4 r 2)
          (("" (replace -4 -3 :dir rl)
            (("" (assert)
              (("" (equate (! -3 r 1) "a * u - b * v")
                (("1" (use "norm_sub_le")
                  (("1" (rewrite* "norm_scal")
                    (("1" (expand "abs") (("1" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (scaled_perp_left_neq_scaled_vector 0
  (scaled_perp_left_neq_scaled_vector-1 nil 3874129020
   ("" (skeep)
    (("" (expand "perp_left")
      (("" (use "comps_eq")
        (("" (replace -1 :hide? t)
          (("" (flatten)
            (("" (apply-extensionality 2 :hide? t)
              (("1" (grind)
                (("1" (case-replace "c = 0")
                  (("1" (ground) nil nil)
                   ("2" (div-by -1 "d")
                    (("2" (replace -1 :dir rl)
                      (("2" (cancel-by -2 "v`y")
                        (("2" (mult-by -1 "d")
                          (("2" (equate "-(c * c / d) * d" "-(c * c)")
                            (("1" (claim "-(c * c) < 0")
                              (("1" (assert) nil nil)
                               ("2"
                                (move-terms 1 l)
                                (("2"
                                  (elim-unary 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (mult-cases 1)
                                      (("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (div-by -1 "v`x")
                  (("2" (replace -1 :dir rl)
                    (("2" (real-props)
                      (("2" (claim "v`x * -v`x < 0" t)
                        (("1" (assert) nil nil)
                         ("2" (mult-cases 1) (("2" (ground) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (grind)
                (("1" (case-replace "c = 0")
                  (("1" (ground) nil nil)
                   ("2" (div-by -1 "d")
                    (("2" (replace -1 :dir rl)
                      (("2" (cancel-by -2 "v`y")
                        (("2" (mult-by -1 "d")
                          (("2" (equate "-(c * c / d) * d" "-(c * c)")
                            (("1" (claim "-(c * c) < 0")
                              (("1" (assert) nil nil)
                               ("2"
                                (move-terms 1 l)
                                (("2"
                                  (elim-unary 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (mult-cases 1)
                                      (("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (div-by -1 "v`y")
                  (("2" (replace -1)
                    (("2" (real-props)
                      (("2" (claim "v`x * -v`x < 0" t)
                        (("1" (assert) nil nil)
                         ("2" (mult-cases 1) (("2" (ground) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (scaled_perp_right_neq_scaled_vector 0
  (scaled_perp_right_neq_scaled_vector-1 nil 3874129020
   ("" (skeep)
    (("" (expand "perp_right")
      (("" (use "comps_eq")
        (("" (replace -1 :hide? t)
          (("" (flatten)
            (("" (apply-extensionality 2 :hide? t)
              (("1" (grind)
                (("1" (case-replace "c = 0")
                  (("1" (ground) nil nil)
                   ("2" (div-by -1 "d")
                    (("2" (replace -1 :dir rl)
                      (("2" (cancel-by -2 "v`y")
                        (("2" (mult-by -1 "d")
                          (("2" (equate "-(c * c / d) * d" "-(c * c)")
                            (("1" (claim "-(c * c) < 0")
                              (("1" (assert) nil nil)
                               ("2"
                                (move-terms 1 l)
                                (("2"
                                  (elim-unary 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (mult-cases 1)
                                      (("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (div-by -1 "v`x")
                  (("2" (replace -1 :dir rl)
                    (("2" (real-props)
                      (("2" (cross-mult -2)
                        (("2" (cancel-by -2 "c")
                          (("2" (rewrite* "sq_rew")
                            (("2" (lemma "sq_pos")
                              (("2"
                                (inst - "v`y")
                                (("2"
                                  (lemma "sq_gt_0")
                                  (("2"
                                    (inst - "v`x")
                                    (("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (grind)
                (("1" (case-replace "c = 0")
                  (("1" (ground) nil nil)
                   ("2" (div-by -1 "d")
                    (("2" (replace -1 :dir rl)
                      (("2" (cancel-by -2 "v`y")
                        (("2" (cross-mult -2)
                          (("2" (mult-by -1 "d")
                            (("2"
                              (equate "-(c * c / d) * d" "-(c * c)")
                              (("1"
                                (claim "-(c * c) < 0")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (move-terms 1 l)
                                  (("2"
                                    (elim-unary 1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (mult-cases 1)
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (div-by -1 "-v`y")
                  (("2" (replace -1)
                    (("2" (real-props)
                      (("2" (equate "v`y * -v`y" "-sq(v`y)")
                        (("1" (rewrite "sq_rew")
                          (("1" (lemma "sq_gt_0")
                            (("1" (inst - "v`y")
                              (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (perp_left_nzvect_neq_zero 0
  (perp_left_nzvect_neq_zero-1 nil 3874129020
   ("" (skeep)
    (("" (lemma "scaled_perp_left_neq_scaled_vector")
      (("" (inst - "1" "0" "v") (("" (ground) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (perp_right_nzvect_neq_zero 0
  (perp_right_nzvect_neq_zero-1 nil 3874129020
   ("" (skeep)
    (("" (lemma "scaled_perp_right_neq_scaled_vector")
      (("" (inst - "1" "0" "v") (("" (ground) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (perp_left_norm_nzvect_neq_zero 0
  (perp_left_norm_nzvect_neq_zero-1 nil 3874129020
   ("" (skeep)
    (("" (use "perp_left_nzvect_neq_zero") (("" (ground) nil nil))
      nil))
    nil)
   nil shostak))
 (perp_right_norm_nzvect_neq_zero 0
  (perp_right_norm_nzvect_neq_zero-1 nil 3874129020
   ("" (skeep)
    (("" (use "perp_right_nzvect_neq_zero") (("" (ground) nil nil))
      nil))
    nil)
   nil shostak))
 (perp_left_preserves_norm_TCC1 0
  (perp_left_preserves_norm_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (use "perp_left_nzvect_neq_zero") (("" (ground) nil nil))
      nil))
    nil)
   nil shostak
   (perp_left_preserves_norm subtype
    "vectors_cross_2d.perp_left(vectors_cross_2d.v)" "Nz_vector"))
  (perp_left_preserves_norm_TCC1-1 nil 3874127249
   ("" (subtype-tcc) nil nil) nil nil
   (perp_left_preserves_norm subtype
    "vectors_cross_2d.perp_left(vectors_cross_2d.v)" "Nz_vector")))
 (perp_left_preserves_norm 0
  (perp_left_preserves_norm-1 nil 3874129020
   ("" (skeep) (("" (grind) nil nil)) nil) nil shostak))
 (perp_right_preserves_norm 0
  (perp_right_preserves_norm-1 nil 3874129020
   ("" (skeep) (("" (grind) nil nil)) nil) nil shostak))
 (right_triangle_vertices_neq_1 0
  (right_triangle_vertices_neq_1-1 nil 3874129020
   ("" (skeep)
    (("" (cancel-add -1)
      (("" (move-terms -1 r 1)
        (("" (div-by -1 "d")
          (("" (rewrite "scal_neg")
            (("" (mult-by -1 "-1")
              ((""
                (equate (! -1 r) "-((1 / d) * c) * perp_right(v - u)")
                (("1" (use "vector_neq_scaled_perp_right")
                  (("1" (ground) nil nil)
                   ("2" (ground)
                    (("2" (use "sub_eq_zero") (("2" (ground) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (right_triangle_vertices_neq_2 0
  (right_triangle_vertices_neq_2-1 nil 3874129020
   ("" (skeep)
    (("" (cancel-add -1)
      (("" (move-terms -1 r 1)
        (("" (div-by -1 "d")
          (("" (rewrite "scal_neg")
            (("" (mult-by -1 "-1")
              ((""
                (equate (! -1 r) "-((1 / d) * c) * perp_left(v - u)")
                (("1" (use "vector_neq_scaled_perp_left")
                  (("1" (ground) nil nil)
                   ("2" (ground)
                    (("2" (use "sub_eq_zero") (("2" (ground) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (cross_normalized_eq_0 0
  (cross_normalized_eq_0-1 nil 3874129020
   ("" (skeep + t)
    (("" (ground)
      (("1" (rewrite "parallel_equiv_cross_eq_0" :dir rl)
        (("1" (expand "parallel?")
          (("1" (skeep)
            (("1" (replace -1)
              (("1" (rewrite "norm_scal")
                (("1" (replace -3)
                  (("1" (expand "abs")
                    (("1" (lift-if)
                      (("1" (ground)
                        (("1" (case-replace "nzk = -1")
                          (("1" (assert) nil nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (replace -1) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (replace -1) (("2" (grind) nil nil)) nil)
       ("3" (replace -1) (("3" (grind) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (dot_normalized_eq_1 0
  (dot_normalized_eq_1-1 nil 3874129020
   ("" (skeep + t)
    (("" (expand "norm")
      (("" (lemma "sqrt_eq_1")
        (("" (inst - "sqv(u)")
          (("" (prop)
            (("1" (hide -2)
              (("1" (expand "sqv") (("1" (propax) nil nil)) nil)) nil)
             ("2" (hide -2)
              (("2" (expand "sqv") (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (sum_squares_cross_and_dot 0
  (sum_squares_cross_and_dot-1 nil 3874129020
   ("" (skeep)
    (("" (grind)
      (("" (typepred "u" "v")
        (("" (expand "norm")
          (("" (lemma "sqrt_eq_1")
            (("" (inst-cp - "sqv(u)")
              (("" (inst - "sqv(v)") (("" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (abs_dot_and_cross_le_1 0
  (abs_dot_and_cross_le_1-1 nil 3874129020
   ("" (skeep)
    (("" (use "sum_squares_cross_and_dot")
      (("" (case "sq(u * v) <= 1 and sq(cross(u, v)) <= 1")
        (("1" (flatten)
          (("1" (hide -3)
            (("1" (use "sq_1")
              (("1" (replace -1 (-2 -3) :dir rl)
                (("1" (rewrite* "sq_le_abs")
                  (("1" (equate "abs(1)" "1" t)
                    (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2) (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (dot_normalized_lt_1 0
  (dot_normalized_lt_1-1 nil 3874129020
   ("" (skeep + t)
    (("" (use "sum_squares_cross_and_dot")
      (("" (move-terms -1 l 2)
        (("" (lemma "sq_lt_abs")
          (("" (inst - "u * v" "1")
            (("" (assert)
              (("" (expand "abs")
                (("" (replace -1 :hide? t)
                  (("" (move-terms 1 l 2)
                    (("" (cancel-add 1)
                      (("" (case-replace "u = -v")
                        (("1" (hide-all-but 3)
                          (("1" (rewrite "dot_neg_left")
                            (("1" (rewrite "sqv_rew")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (case "cross(u, v) = 0")
                          (("1" (rewrite "cross_normalized_eq_0") nil
                            nil)
                           ("2" (lemma "sq_lt_abs")
                            (("2" (inst - "0" "cross(u, v)")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "abs")
                                  (("2"
                                    (lift-if)
                                    (("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (dot_normalized_gt_neg_1 0
  (dot_normalized_gt_neg_1-1 nil 3874129020
   ("" (skeep + t)
    (("" (use "sum_squares_cross_and_dot")
      (("" (move-terms -1 l 2)
        (("" (lemma "sq_lt_abs")
          (("" (inst - "u * v" "1")
            (("" (assert)
              (("" (expand "abs")
                (("" (replace -1 :hide? t)
                  (("" (move-terms 1 l 2)
                    (("" (cancel-add 1)
                      (("" (case-replace "u = v")
                        (("1" (use "dot_normalized_eq_1")
                          (("1" (ground) nil nil)) nil)
                         ("2" (case "cross(u, v) = 0")
                          (("1" (use "cross_normalized_eq_0")
                            (("1" (ground) nil nil)) nil)
                           ("2" (use "sq_gt_0")
                            (("2" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (sqv_normalized_eq_1 0
  (sqv_normalized_eq_1-1 nil 3874129020
   ("" (skeep)
    (("" (expand "sqv")
      (("" (use "dot_normalized_eq_1") (("" (ground) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (norm_sum_same_eq_2 0
  (norm_sum_same_eq_2-1 nil 3874129020
   ("" (skeep)
    (("" (expand "norm")
      (("" (auto-rewrite "sqv_normalized_eq_1")
        (("" (rewrite "sqv_add")
          (("" (rewrite "sqv_rew") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (cross_above_and_below 0
  (cross_above_and_below-1 nil 3874129020
   ("" (skeep)
    (("" (grind)
      (("" (move-terms -1 l 2)
        (("" (move-terms -2 l 2)
          (("" (move-terms -3 l 2)
            (("" (assert)
              (("" (case "a`x < 0")
                (("1" (case "b`x < 0")
                  (("1" (case "c`x < 0")
                    (("1" (mult-cases -4) nil nil)
                     ("2" (mult-cases -3) nil nil))
                    nil)
                   ("2" (case "c`x < 0")
                    (("1" (mult-cases -5) nil nil)
                     ("2" (case-replace "c`x = 0")
                      (("1" (assert) (("1" (mult-cases -5) nil nil))
                        nil)
                       ("2" (case-replace "a`x = 0")
                        (("1" (assert) nil nil)
                         ("2" (case "0 < a`y")
                          (("1" (div-by -3 "a`x" -)
                            (("1" (div-by -5 "c`x")
                              (("1"
                                (case
                                 "a`y * b`x / a`x < b`x * c`y / c`x")
                                (("1"
                                  (cancel-by -1 "b`x")
                                  (("1" (cross-mult -2) nil nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case-replace "a`y = 0")
                            (("1" (real-props) nil nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (case "b`x < 0")
                  (("1" (case "c`x < 0")
                    (("1" (case "c`x < b`x")
                      (("1" (case-replace "a`x = 0")
                        (("1" (assert) (("1" (real-props) nil nil))
                          nil)
                         ("2" (case "0 < a`y")
                          (("1" (div-by -5 "a`x")
                            (("1" (div-by -7 "c`x" -)
                              (("1"
                                (case
                                 "a`y * b`x / a`x > b`x * c`y / c`x")
                                (("1"
                                  (cancel-by -1 "b`x")
                                  (("1" (cross-mult -1) nil nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case-replace "a`y = 0")
                            (("1" (real-props) nil nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case-replace "c`x = b`x")
                        (("1" (case "a`x * c`y > a`x * b`y")
                          (("1" (cancel-by -1 "a`x") nil nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (case "a`y * b`x < a`y * c`x")
                          (("1" (case "a`x * b`y < a`x * c`y")
                            (("1" (cancel-by -1 "a`x") nil nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (cancel-by 1 "a`y") nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (mult-cases -3) nil nil))
                    nil)
                   ("2" (case "c`x < 0")
                    (("1" (mult-cases -4) nil nil)
                     ("2" (mult-cases -2) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (one_perp_pos_other_neg 0
  (one_perp_pos_other_neg-1 nil 3874129020 ("" (grind) nil nil) nil
   shostak))
 (dot_neg_cross_pos_cross_perp_left_pos 0
  (dot_neg_cross_pos_cross_perp_left_pos-1 nil 3874129020
   ("" (grind) nil nil) nil shostak))
 (sqv_weighted_sum_perp_left 0
  (sqv_weighted_sum_perp_left-1 nil 3874129020
   ("" (skeep)
    (("" (expand "^")
      (("" (rewrite "norm_perp_left_is_norm_left")
        (("" (factor! (! 1 l 1))
          (("" (rewrite "sqv_scal")
            (("" (rewrite "sq_div")
              (("" (real-props)
                (("" (rewrite "sq_norm")
                  (("" (grind)
                    (("" (real-props)
                      ((""
                        (equate "2 * (u`y * -u`x * a * b)"
                         "-2 * (u`y * u`x * a * b)" t)
                        (("" (real-props)
                          (("" (factor 1 l (1 2))
                            (("" (factor 1 l (2 3))
                              ((""
                                (factor 1 l)
                                ((""
                                  (name-replace "AB" "a * a + b * b")
                                  ((""
                                    (real-props)
                                    ((""
                                      (factor 1 l)
                                      ((""
                                        (cancel-by
                                         1
                                         "u`x * u`x + u`y * u`y")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (sqv_weighted_sum_perp_right 0
  (sqv_weighted_sum_perp_right-1 nil 3874129020
   ("" (skeep)
    (("" (expand "^")
      (("" (real-props)
        (("" (grind)
          (("" (real-props)
            ((""
              (equate "2 * (u`y * -u`x * a * b)"
               "-2 * (u`y * u`x * a * b)" t)
              (("" (real-props)
                (("" (factor 1 l (1 2))
                  (("" (factor 1 l (2 3))
                    (("" (factor 1 l)
                      (("" (name-replace "AB" "a * a + b * b")
                        (("" (real-props)
                          (("" (factor 1 l)
                            (("" (cancel-by 1 "u`x * u`x + u`y * u`y")
                              nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (scaled_vector_neq_scaled_perp_left 0
  (scaled_vector_neq_scaled_perp_left-1 nil 3874129020
   ("" (skeep * t)
    (("" (hide -1 -2)
      (("" (expand "perp_left")
        (("" (rewrite* "comps_eq")
          (("" (flatten)
            (("" (case "a /= 0 and b /= 0 implies -(a*a) /= b*b")
              (("1" (split -2)
                (("1" (grind)
                  (("1" (div-by -1 "a")
                    (("1" (replace -1) (("1" (cross-mult -2) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (grind)
                  (("2" (div-by -1 "b")
                    (("2" (replace -1 :dir rl)
                      (("2" (cancel-by -2 "u`y")
                        (("2" (move-terms -1 l)
                          (("2" (move-terms -1 r 1)
                            (("2" (elim-unary -1)
                              (("2" (cross-mult -1) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (ground)
                  (("2" (lemma "sq_pos")
                    (("2" (inst-cp - "a")
                      (("2" (inst - "b")
                        (("2" (expand "sq")
                          (("2" (case "a*a=0 or b*b=0")
                            (("1" (ground)
                              (("1"
                                (replace -1)
                                (("1" (real-props) nil nil))
                                nil)
                               ("2"
                                (replace -1)
                                (("2" (real-props) nil nil))
                                nil))
                              nil)
                             ("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (scaled_vector_neq_scaled_perp_right 0
  (scaled_vector_neq_scaled_perp_right-1 nil 3874129020
   ("" (skeep * t)
    (("" (hide -1 -2)
      (("" (expand "perp_right")
        (("" (rewrite* "comps_eq")
          (("" (flatten)
            (("" (case "a /= 0 and b /= 0 implies -(a*a) /= b*b")
              (("1" (split -2)
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
               ("2" (hide-all-but 1)
                (("2" (ground)
                  (("2" (lemma "sq_pos")
                    (("2" (inst-cp - "a")
                      (("2" (inst - "b")
                        (("2" (expand "sq")
                          (("2" (case "a*a=0 or b*b=0")
                            (("1" (ground)
                              (("1"
                                (replace -1)
                                (("1" (real-props) nil nil))
                                nil)
                               ("2"
                                (replace -1)
                                (("2" (real-props) nil nil))
                                nil))
                              nil)
                             ("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (parallel_pts_between_imp_not_on_seg 0
  (parallel_pts_between_imp_not_on_seg-1 nil 3874129020
   ("" (skeep*)
    (("" (equate "p + d * (u - v) - v" "p - v + d * (u - v)")
      (("1" (lemma "cross_distrib_add_1")
        (("1" (inst - "p-v" "d * (u - v)" "w-v")
          (("1" (replace -1 :hide? t)
            (("1" (rewrite "cross_scales_1")
              (("1" (case "d * cross((u - v), w - v) >= 0")
                (("1" (assert) nil nil)
                 ("2" (assert) (("2" (mult-cases 1) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (parallel_pts_between_imp_not_on_seg_2 0
  (parallel_pts_between_imp_not_on_seg_2-1 nil 3874129020
   ("" (skeep*)
    (("" (equate "p + d * (w - v) - v" "p - v + d * (w - v)")
      (("1" (rewrite "cross_distrib_add_2")
        (("1" (rewrite "cross_scales_2")
          (("1" (case "d * cross(u - v, (w - v)) >= 0")
            (("1" (assert) nil nil) ("2" (mult-cases 1) nil nil)) nil))
          nil))
        nil)
       ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (points_on_parallel_ray_cross_pos_1 0
  (points_on_parallel_ray_cross_pos_1-1 nil 3874129020
   ("" (skeep*)
    (("" (equate "p + d * (u - v) - v" "p - v + d * (u - v)")
      (("1" (rewrite "cross_distrib_add_2")
        (("1" (rewrite "cross_scales_2")
          (("1" (rewrite "cross_self_zero") (("1" (assert) nil nil))
            nil))
          nil))
        nil)
       ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (points_on_parallel_ray_cross_pos_2 0
  (points_on_parallel_ray_cross_pos_2-1 nil 3874129020
   ("" (skeep*)
    (("" (equate "p + d * (w - v) - v" "p - v + d * (w - v)")
      (("1" (rewrite "cross_distrib_add_1")
        (("1" (rewrite "cross_scales_1")
          (("1" (rewrite "cross_self_zero") (("1" (assert) nil nil))
            nil))
          nil))
        nil)
       ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (point_on_arb_ray_refl 0
  (point_on_arb_ray_refl-1 nil 3874129020
   ("" (skeep)
    (("" (expand "point_on_arb_ray?")
      (("" (inst + "0") (("" (assert) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (point_on_arb_ray_trans 0
  (point_on_arb_ray_trans-1 nil 3874129020
   ("" (skeep)
    (("" (expand "point_on_arb_ray?")
      (("" (skeep*)
        (("" (replace -2)
          (("" (replace -1)
            (("" (inst + "d + d!1")
              (("" (hide -1 -2) (("" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (point_on_arb_ray_neg_TCC1 0
  (point_on_arb_ray_neg_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (point_on_arb_ray_neg subtype "(vectors_2D.-)(vectors_cross_2d.v)"
    "Normalized"))
  (point_on_arb_ray_neg_TCC1-1 nil 3874127249
   ("" (subtype-tcc) nil nil) nil nil
   (point_on_arb_ray_neg subtype "(vectors_2D.-)(vectors_cross_2d.v)"
    "Normalized")))
 (point_on_arb_ray_neg 0
  (point_on_arb_ray_neg-1 nil 3874129020
   ("" (skeep)
    (("" (expand "point_on_arb_ray?")
      (("" (ground)
        (("1" (skeep)
          (("1" (inst + "d")
            (("1" (replace -1)
              (("1" (move-terms 1 r 1)
                (("1" (rewrite "scal_add_right" :dir rl)
                  (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (inst + "d")
            (("2" (replace -1)
              (("2" (move-terms 1 r 1)
                (("2" (rewrite "scal_add_right" :dir rl)
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (point_on_arb_ray_add 0
  (point_on_arb_ray_add-1 nil 3874129020
   ("" (skeep)
    (("" (expand "point_on_arb_ray?") (("" (inst?) nil nil)) nil)) nil)
   nil shostak))
 (point_on_arb_ray_sub 0
  (point_on_arb_ray_sub-1 nil 3874129020
   ("" (skeep)
    (("" (expand "point_on_arb_ray?")
      (("" (inst?) (("" (ground) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (point_not_on_arb_ray_add 0
  (point_not_on_arb_ray_add-1 nil 3874129020
   ("" (skeep)
    (("" (expand "point_on_arb_ray?")
      (("" (skeep)
        (("" (cancel-add)
          (("" (rewrite "scal_add_left" :dir rl)
            (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (point_not_on_arb_ray_sub 0
  (point_not_on_arb_ray_sub-1 nil 3874129020
   ("" (skeep)
    (("" (expand "point_on_arb_ray?")
      (("" (skeep)
        (("" (move-terms -1 l 2)
          (("" (cancel-add)
            (("" (rewrite "scal_add_left" :dir rl)
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (point_on_arb_ray_norm 0
  (point_on_arb_ray_norm-1 nil 3874129020
   ("" (skeep)
    (("" (ground)
      (("1" (expand "point_on_arb_ray?")
        (("1" (skeep)
          (("1" (replace -1)
            (("1" (cancel-add 1)
              (("1" (cancel-add! (! 1 r 1 1))
                (("1" (rewrite "norm_scal")
                  (("1" (typepred "v") (("1" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "point_on_arb_ray?") (("2" (inst?) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (rotate_to_vert_angle_TCC1 0
  (rotate_to_vert_angle_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (use "comps_eq")
      (("" (replace -1 :hide? t)
        (("" (flatten) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak
   (rotate_to_vert_angle subtype
    "(# x := IF vectors_cross_2d.u`x = 0 THEN IF reals.>(vectors_cross_2d.u`y, 0) THEN (1, 0) ELSE ((number_fields.-)(1), 0) ENDIF ELSIF vectors_cross_2d.u`y = 0 THEN IF reals.>(vectors_cross_2d.u`x, 0) THEN (0, 1) ELSE (0, (number_fields.-)(1)) ENDIF ELSE (number_fields./(vectors_cross_2d.u`y, vectors_2D.norm(vectors_cross_2d.u)), number_fields./(vectors_cross_2d.u`x, vectors_2D.norm(vectors_cross_2d.u))) ENDIF`1, y := IF vectors_cross_2d.u`x = 0 THEN IF reals.>(vectors_cross_2d.u`y, 0) THEN (1, 0) ELSE ((number_fields.-)(1), 0) ENDIF ELSIF vectors_cross_2d.u`y = 0 THEN IF reals.>(vectors_cross_2d.u`x, 0) THEN (0, 1) ELSE (0, (number_fields.-)(1)) ENDIF ELSE (number_fields./(vectors_cross_2d.u`y, vectors_2D.norm(vectors_cross_2d.u)), number_fields./(vectors_cross_2d.u`x, vectors_2D.norm(vectors_cross_2d.u))) ENDIF`2 #)"
    "Nz_vector"))
  (rotate_to_vert_angle_TCC1-1 nil 3874127249
   ("" (subtype-tcc) nil nil) nil nil
   (rotate_to_vert_angle subtype
    "(# x := IF vectors_cross_2d.u`x = 0 THEN IF reals.>(vectors_cross_2d.u`y, 0) THEN (1, 0) ELSE ((number_fields.-)(1), 0) ENDIF ELSIF vectors_cross_2d.u`y = 0 THEN IF reals.>(vectors_cross_2d.u`x, 0) THEN (0, 1) ELSE (0, (number_fields.-)(1)) ENDIF ELSE (number_fields./(vectors_cross_2d.u`y, vectors_2D.norm(vectors_cross_2d.u)), number_fields./(vectors_cross_2d.u`x, vectors_2D.norm(vectors_cross_2d.u))) ENDIF`1, y := IF vectors_cross_2d.u`x = 0 THEN IF reals.>(vectors_cross_2d.u`y, 0) THEN (1, 0) ELSE ((number_fields.-)(1), 0) ENDIF ELSIF vectors_cross_2d.u`y = 0 THEN IF reals.>(vectors_cross_2d.u`x, 0) THEN (0, 1) ELSE (0, (number_fields.-)(1)) ENDIF ELSE (number_fields./(vectors_cross_2d.u`y, vectors_2D.norm(vectors_cross_2d.u)), number_fields./(vectors_cross_2d.u`x, vectors_2D.norm(vectors_cross_2d.u))) ENDIF`2 #)"
    "Nz_vector")))
 (rotate_to_vert_makes_x_0 0
  (rotate_to_vert_makes_x_0-1 nil 3874129020
   ("" (skeep)
    (("" (expand "rotate_to_vert_angle")
      (("" (expand "rotate_vect") (("" (grind) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (rotation_preserves_pos_cross 0
  (rotation_preserves_pos_cross-1 nil 3874129020
   ("" (skeep)
    (("" (expand "rotate_vect")
      (("" (expand "cross")
        (("" (factor! (! 1 l 1) (2 4))
          (("" (factor! (! 1 l 1) (2 3))
            ((""
              (equate "-1 * u`y * v`x + u`x * v`y"
               "-u`y * v`x + u`x * v`y" (assert))
              (("" (factor! (! 1 l 1))
                (("" (split)
                  (("1" (flatten) (("1" (mult-cases -1) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (mult-cases 1)
                      (("2" (typepred "w")
                        (("2" (flatten)
                          (("2" (lemma "sq_plus_eq_0")
                            (("2" (inst - "w`x" "w`y")
                              (("2"
                                (expand "sq")
                                (("2" (grind-with-ext) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (extend_pos_cross_vectors_vert 0
  (extend_pos_cross_vectors_vert-1 nil 3874129020
   ("" (skeep)
    (("" (grind)
      (("" (move-terms -5 l 2)
        (("" (move-terms -6 l 2)
          (("" (move-terms 1 l 2)
            (("" (assert)
              (("" (case "p`y > 0")
                (("1" (case "q`x > 0 and r`x > 0 and s`x > 0")
                  (("1" (flatten)
                    (("1" (div-by -9 "q`x")
                      (("1" (div-by 1 "q`x")
                        (("1" (div-by 1 "s`x")
                          (("1" (div-by -10 "s`x")
                            (("1" (div-by -10 "r`x")
                              (("1"
                                (div-by -9 "r`x")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (mult-cases -2)
                    (("2" (mult-cases -4)
                      (("2" (mult-cases -6) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (case "q`x < 0 and r`x < 0 and s`x < 0")
                  (("1" (flatten)
                    (("1" (div-by -8 "q`x" -)
                      (("1" (div-by 2 "q`x" -)
                        (("1" (div-by 2 "s`x" -)
                          (("1" (div-by -9 "s`x" -)
                            (("1" (div-by -9 "r`x" -)
                              (("1"
                                (div-by -8 "r`x" -)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (mult-cases -1)
                    (("2" (mult-cases -3)
                      (("2" (mult-cases -5) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (extend_pos_cross_vectors 0
  (extend_pos_cross_vectors-1 nil 3874129020
   ("" (skeep)
    (("" (lemma "extend_pos_cross_vectors_vert")
      (("" (case "p`x = 0")
        (("1" (inst - "p" "q" "r" "s") (("1" (assert) nil nil)) nil)
         ("2" (case "p = zero")
          (("1" (hide-all-but (-1 1)) (("1" (grind) nil nil)) nil)
           ("2"
            (inst - "rotate_vect(p, rotate_to_vert_angle(p))"
             "rotate_vect(q, rotate_to_vert_angle(p))"
             "rotate_vect(r, rotate_to_vert_angle(p))"
             "rotate_vect(s, rotate_to_vert_angle(p))")
            (("1" (rewrite* "rotation_preserves_pos_cross")
              (("1" (assert)
                (("1" (rewrite "rotate_to_vert_makes_x_0") nil nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (extend_pos_cross_vectors_vert_2 0
  (extend_pos_cross_vectors_vert_2-1 nil 3874129020
   ("" (skeep)
    (("" (grind)
      (("" (move-terms -5 l 2)
        (("" (move-terms -6 l 2)
          (("" (move-terms -4 l 2)
            (("" (assert)
              (("" (case "p`y > 0")
                (("1" (case "q`x > 0 and r`x < 0 and s`x > 0")
                  (("1" (flatten)
                    (("1" (div-by -9 "q`x")
                      (("1" (div-by -8 "q`x")
                        (("1" (div-by -10 "s`x")
                          (("1" (div-by -8 "s`x")
                            (("1" (div-by -10 "r`x" -)
                              (("1"
                                (div-by -9 "r`x" -)
                                (("1" (real-props) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (mult-cases -2)
                    (("2" (mult-cases -4)
                      (("2" (mult-cases 2)
                        (("2" (case-replace "r`x = 0")
                          (("1" (real-props) nil nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (case "q`x < 0 and r`x > 0 and s`x < 0")
                  (("1" (flatten)
                    (("1" (div-by -8 "q`x" -)
                      (("1" (div-by -7 "q`x" -)
                        (("1" (div-by -9 "s`x" -)
                          (("1" (div-by -7 "s`x" -)
                            (("1" (div-by -9 "r`x")
                              (("1"
                                (div-by -8 "r`x")
                                (("1" (real-props) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (mult-cases -1)
                    (("2" (mult-cases -3)
                      (("2" (mult-cases 3)
                        (("2" (case-replace "r`x=0")
                          (("1" (real-props) nil nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (extend_pos_cross_vectors_2 0
  (extend_pos_cross_vectors_2-1 nil 3874129020
   ("" (skeep)
    (("" (lemma "extend_pos_cross_vectors_vert_2")
      (("" (case "p`x = 0")
        (("1" (inst - "p" "q" "r" "s") (("1" (assert) nil nil)) nil)
         ("2" (case "p = zero")
          (("1" (hide-all-but (-1 1)) (("1" (grind) nil nil)) nil)
           ("2"
            (inst - "rotate_vect(p, rotate_to_vert_angle(p))"
             "rotate_vect(q, rotate_to_vert_angle(p))"
             "rotate_vect(r, rotate_to_vert_angle(p))"
             "rotate_vect(s, rotate_to_vert_angle(p))")
            (("1" (rewrite* "rotation_preserves_pos_cross")
              (("1" (assert)
                (("1" (rewrite "rotate_to_vert_makes_x_0") nil nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (four_vectors_pos_cross_vert 0
  (four_vectors_pos_cross_vert-1 nil 3874129020
   ("" (skeep)
    (("" (grind)
      (("" (move-terms -1 l 2)
        (("" (move-terms -2 l 2)
          (("" (move-terms -3 l 2)
            (("" (assert)
              (("" (move-terms 2 l)
                (("" (assert)
                  (("" (case "d`y > 0")
                    (("1" (case "a`x > 0 and b`x < 0 and c`x > 0")
                      (("1" (flatten)
                        (("1" (div-by -5 "a`x")
                          (("1" (div-by -7 "a`x")
                            (("1" (div-by -7 "c`x")
                              (("1"
                                (div-by -6 "c`x")
                                (("1"
                                  (div-by -6 "b`x" -)
                                  (("1"
                                    (div-by -5 "b`x" -)
                                    (("1" (real-props) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (mult-cases -5)
                        (("2" (mult-cases 2)
                          (("2" (mult-cases 3)
                            (("2" (ground)
                              (("1"
                                (case-replace "a`x = 0")
                                (("1" (real-props) nil nil)
                                 ("2" (assert) nil nil))
                                nil)
                               ("2"
                                (case-replace "b`x = 0")
                                (("1" (real-props) nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "a`x < 0 and b`x > 0 and c`x < 0")
                      (("1" (flatten)
                        (("1" (div-by -4 "a`x" -)
                          (("1" (div-by -6 "a`x" -)
                            (("1" (div-by -6 "c`x" -)
                              (("1"
                                (div-by -5 "c`x" -)
                                (("1"
                                  (div-by -5 "b`x")
                                  (("1"
                                    (div-by -4 "b`x")
                                    (("1" (real-props) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (mult-cases -4)
                        (("2" (mult-cases 3)
                          (("2" (mult-cases 4)
                            (("2" (ground)
                              (("1"
                                (case-replace "a`x = 0")
                                (("1" (real-props) nil nil)
                                 ("2" (assert) nil nil))
                                nil)
                               ("2"
                                (case-replace "b`x = 0")
                                (("1" (real-props) nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (four_vectors_pos_cross 0
  (four_vectors_pos_cross-1 nil 3874129020
   ("" (skeep)
    (("" (lemma "four_vectors_pos_cross_vert")
      (("" (case "d`x = 0")
        (("1" (inst - "a" "b" "c" "d") (("1" (assert) nil nil)) nil)
         ("2" (case "d = zero")
          (("1" (hide-all-but (-1 1)) (("1" (grind) nil nil)) nil)
           ("2"
            (inst - "rotate_vect(a, rotate_to_vert_angle(d))"
             "rotate_vect(b, rotate_to_vert_angle(d))"
             "rotate_vect(c, rotate_to_vert_angle(d))"
             "rotate_vect(d, rotate_to_vert_angle(d))")
            (("1" (rewrite* "rotation_preserves_pos_cross")
              (("1" (assert)
                (("1" (rewrite "rotate_to_vert_makes_x_0") nil nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (four_vectors_pos_cross_vert_2 0
  (four_vectors_pos_cross_vert_2-1 nil 3874129020
   ("" (skeep)
    (("" (grind)
      (("" (move-terms -2 l 2)
        (("" (move-terms -3 l 2)
          (("" (move-terms 2 l 2)
            (("" (assert)
              (("" (move-terms 1 l)
                (("" (assert)
                  (("" (case "b`y > 0")
                    (("1" (case "a`x > 0 and c`x > 0 and d`x > 0")
                      (("1" (flatten)
                        (("1" (div-by -6 "c`x")
                          (("1" (div-by 2 "c`x")
                            (("1" (div-by 2 "d`x")
                              (("1"
                                (div-by -7 "d`x")
                                (("1"
                                  (div-by -7 "a`x")
                                  (("1"
                                    (div-by -6 "a`x")
                                    (("1" (real-props) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (mult-cases -5)
                        (("2" (mult-cases -4)
                          (("2" (mult-cases 2)
                            (("2" (case-replace "c`x = 0")
                              (("1" (real-props) nil nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (case "a`x < 0 and c`x < 0 and d`x < 0")
                      (("1" (flatten)
                        (("1" (div-by -5 "c`x" -)
                          (("1" (div-by 3 "c`x" -)
                            (("1" (div-by 3 "d`x" -)
                              (("1"
                                (div-by -6 "d`x" -)
                                (("1"
                                  (div-by -6 "a`x" -)
                                  (("1"
                                    (div-by -5 "a`x" -)
                                    (("1" (real-props) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (mult-cases -1)
                        (("2" (mult-cases -5)
                          (("2" (mult-cases 3)
                            (("2" (case-replace "c`x = 0")
                              (("1" (real-props) nil nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (four_vectors_pos_cross_2 0
  (four_vectors_pos_cross_2-1 nil 3874129020
   ("" (skeep)
    (("" (lemma "four_vectors_pos_cross_vert_2")
      (("" (case "b`x = 0")
        (("1" (inst - "a" "b" "c" "d") (("1" (assert) nil nil)) nil)
         ("2" (case "b = zero")
          (("1" (hide-all-but (-1 1)) (("1" (grind) nil nil)) nil)
           ("2"
            (inst - "rotate_vect(a, rotate_to_vert_angle(b))"
             "rotate_vect(b, rotate_to_vert_angle(b))"
             "rotate_vect(c, rotate_to_vert_angle(b))"
             "rotate_vect(d, rotate_to_vert_angle(b))")
            (("1" (rewrite* "rotation_preserves_pos_cross")
              (("1" (assert)
                (("1" (rewrite "rotate_to_vert_makes_x_0") nil nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

