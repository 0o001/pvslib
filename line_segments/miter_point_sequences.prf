(miter_point_sequences
 (nonparallel_half_angle_sine_pos_TCC1 0
  (nonparallel_half_angle_sine_pos_TCC1-2 nil 3874129021
   ("" (skeep + t) (("" (ground) nil nil)) nil)
   ((sub_eq_zero formula-decl nil vectors_2D vectors)) shostak
   (nonparallel_half_angle_sine_pos_ subtype
    "(vectors_2D.-)(miter_point_sequences.u, miter_point_sequences.v)"
    "Nz_vector"))
  (nonparallel_half_angle_sine_pos_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (nonparallel_half_angle_sine_pos_ subtype
    "(vectors_2D.-)(miter_point_sequences.u, miter_point_sequences.v)"
    "Nz_vector")))
 (nonparallel_half_angle_sine_pos_TCC2 0
  (nonparallel_half_angle_sine_pos_TCC2-2 nil 3874129021
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((sub_eq_zero formula-decl nil vectors_2D vectors)) shostak
   (nonparallel_half_angle_sine_pos_ subtype
    "(vectors_2D.-)(miter_point_sequences.w, miter_point_sequences.v)"
    "Nz_vector"))
  (nonparallel_half_angle_sine_pos_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (nonparallel_half_angle_sine_pos_ subtype
    "(vectors_2D.-)(miter_point_sequences.w, miter_point_sequences.v)"
    "Nz_vector")))
 (nonparallel_half_angle_sine_pos 0
  (nonparallel_half_angle_sine_pos-2 nil 3874129021
   ("" (skeep)
    (("" (splash 1 :reverse? t)
      (("1" (assert) nil nil)
       ("2" (use "half_angle_sine_dir_nonparallel")
        (("2" (assert)
          (("2" (expand "half_angle_vsin") (("2" (ground) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AND const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "Vector" vectors_2D vectors)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (<= const-decl "bool" reals nil)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (> const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (half_angle_sine_dir_nonparallel formula-decl nil vectors_2d_trig
     nil))
   shostak
   (nonparallel_half_angle_sine_pos subtype
    "vectors_2d_trig.half_angle_vsin(vectors_2D.^((vectors_2D.-)(miter_point_sequences.u, miter_point_sequences.v)), vectors_2D.^((vectors_2D.-)(miter_point_sequences.w, miter_point_sequences.v)))"
    "posreal"))
  (nonparallel_half_angle_sine_pos-1 nil 3874128243
   ("" (judgement-tcc) nil nil) nil nil
   (nonparallel_half_angle_sine_pos subtype
    "vectors_2d_trig.half_angle_vsin(vectors_2D.^((vectors_2D.-)(miter_point_sequences.u, miter_point_sequences.v)), vectors_2D.^((vectors_2D.-)(miter_point_sequences.w, miter_point_sequences.v)))"
    "posreal")))
 (miter_sine_set_TCC1 0
  (miter_sine_set_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (miter_sine_set subtype "miter_point_sequences.i"
    "below[S`length]"))
  (miter_sine_set_TCC1-1 nil 3874128243 ("" (subtype-tcc) nil nil) nil
   nil
   (miter_sine_set subtype "miter_point_sequences.i"
    "below[S`length]")))
 (miter_sine_set_TCC2 0
  (miter_sine_set_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (miter_sine_set subtype
    "(number_fields.-)(miter_point_sequences.S`length, 1)"
    "below[S`length]"))
  (miter_sine_set_TCC2-1 nil 3874128243 ("" (subtype-tcc) nil nil) nil
   nil
   (miter_sine_set subtype
    "(number_fields.-)(miter_point_sequences.S`length, 1)"
    "below[S`length]")))
 (miter_sine_set_TCC3 0
  (miter_sine_set_TCC3-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (miter_sine_set subtype
    "(number_fields.-)(miter_point_sequences.S`length, 2)"
    "below[S`length]"))
  (miter_sine_set_TCC3-1 nil 3874128243 ("" (subtype-tcc) nil nil) nil
   nil
   (miter_sine_set subtype
    "(number_fields.-)(miter_point_sequences.S`length, 2)"
    "below[S`length]")))
 (miter_sine_set_TCC4 0
  (miter_sine_set_TCC4-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (miter_sine_set subtype
    "(number_fields.+)(1, miter_point_sequences.i)" "below[S`length]"))
  (miter_sine_set_TCC4-1 nil 3874128243 ("" (subtype-tcc) nil nil) nil
   nil
   (miter_sine_set subtype
    "(number_fields.+)(1, miter_point_sequences.i)"
    "below[S`length]")))
 (miter_sine_set_TCC5 0
  (miter_sine_set_TCC5-2 nil 3874129021
   ("" (skeep)
    (("" (skeep)
      (("" (use "sub_eq_zero")
        (("" (assert)
          (("" (lemma "edge_parallel_endpts_mostly_uniq")
            (("" (ground)
              (("1" (inst - "S" "0" "S`length - 2")
                (("1" (ground)
                  (("1" (use "intercept_index_value")
                    (("1" (ground) nil nil)) nil))
                  nil))
                nil)
               ("2" (inst - "S" "i" "S`length - 2")
                (("2" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((intercept_index_value formula-decl nil segment_endpoint_sequences
     nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (edge_parallel_endpts_mostly_uniq formula-decl nil
     segment_endpoint_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors))
   shostak
   (miter_sine_set subtype "miter_point_sequences.uv" "Nz_vector"))
  (miter_sine_set_TCC5-1 nil 3874128243 ("" (subtype-tcc) nil nil) nil
   nil
   (miter_sine_set subtype "miter_point_sequences.uv" "Nz_vector")))
 (miter_sine_set_TCC6 0
  (miter_sine_set_TCC6-2 nil 3874129021
   ("" (skeep*)
    (("" (lemma "sub_eq_zero")
      (("" (inst - "w" "v")
        (("" (assert)
          (("" (lemma "adj_edge_parallel_endpts_neq")
            (("" (inst - "S" "i") (("" (ground) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((sub_eq_zero formula-decl nil vectors_2D vectors)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (miter_sine_set subtype "miter_point_sequences.wv" "Nz_vector"))
  (miter_sine_set_TCC6-1 nil 3874128243 ("" (subtype-tcc) nil nil) nil
   nil
   (miter_sine_set subtype "miter_point_sequences.wv" "Nz_vector")))
 (miter_sine_set_TCC7 0
  (miter_sine_set_TCC7-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (miter_sine_set subtype
    "(number_fields.-)(miter_point_sequences.i, 1)" "below[S`length]"))
  (miter_sine_set_TCC7-1 nil 3874128243 ("" (subtype-tcc) nil nil) nil
   nil
   (miter_sine_set subtype
    "(number_fields.-)(miter_point_sequences.i, 1)"
    "below[S`length]")))
 (miter_sine_set_TCC8 0
  (miter_sine_set_TCC8-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (miter_sine_set subtype "miter_point_sequences.i"
    "below[S`length]"))
  (miter_sine_set_TCC8-1 nil 3874128243 ("" (subtype-tcc) nil nil) nil
   nil
   (miter_sine_set subtype "miter_point_sequences.i"
    "below[S`length]")))
 (miter_sine_set_TCC9 0
  (miter_sine_set_TCC9-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (miter_sine_set subtype
    "(number_fields.+)(miter_point_sequences.i, 1)" "below[S`length]"))
  (miter_sine_set_TCC9-1 nil 3874128243 ("" (subtype-tcc) nil nil) nil
   nil
   (miter_sine_set subtype
    "(number_fields.+)(miter_point_sequences.i, 1)"
    "below[S`length]")))
 (miter_sine_set_TCC10 0
  (miter_sine_set_TCC10-2 nil 3874129021
   ("" (skeep*)
    (("" (hide +)
      (("" (typepred "S")
        (("" (inst - "i - 1")
          (("1" (assert)
            (("1" (replace -10) (("1" (assert) nil nil)) nil)) nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (S skolem-const-decl "edge_parallel_endpoint_seq"
     miter_point_sequences nil)
    (i skolem-const-decl "below(S`length - 1)" miter_point_sequences
       nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (miter_sine_set subtype "miter_point_sequences.uv" "Nz_vector"))
  (miter_sine_set_TCC10-1 nil 3874128243 ("" (subtype-tcc) nil nil) nil
   nil
   (miter_sine_set subtype "miter_point_sequences.uv" "Nz_vector")))
 (miter_sine_set_TCC11 0
  (miter_sine_set_TCC11-2 nil 3874129021
   ("" (skeep*)
    (("" (use "adj_edge_parallel_endpts_neq")
      (("" (lemma "sub_eq_zero")
        (("" (inst - "w" "v") (("" (ground) nil nil)) nil)) nil))
      nil))
    nil)
   ((adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (miter_sine_set subtype "miter_point_sequences.wv" "Nz_vector"))
  (miter_sine_set_TCC11-1 nil 3874128243 ("" (subtype-tcc) nil nil) nil
   nil
   (miter_sine_set subtype "miter_point_sequences.wv" "Nz_vector")))
 (miter_sine_set_nonempty 0
  (miter_sine_set_nonempty-1 nil 3874129021
   ("" (skeep)
    (("" (expand "miter_sine_set")
      (("" (expand "empty?")
        (("" (expand "member")
          (("" (case "S`length > 3 and 1 = loop_back_intercept(S)")
            (("1" (flatten)
              (("1"
                (inst -
                 "half_angle_vsin(^(S`seq(1) - S`seq(2)), ^(S`seq(3) - S`seq(2)))")
                (("1" (inst + "2")
                  (("1" (ground) nil nil) ("2" (assert) nil nil)) nil)
                 ("2" (lemma "half_angle_sine_dir_nonparallel")
                  (("2" (inst - "S`seq(2)" "S`seq(1)" "S`seq(3)")
                    (("1" (ground)
                      (("1" (expand "half_angle_vsin")
                        (("1" (ground) nil nil)) nil))
                      nil)
                     ("2"
                      (lemma "edge_para_endpts_valid_miter_point_args")
                      (("2" (inst - "S" "2")
                        (("1" (ground) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil)
                     ("3" (assert) nil nil)
                     ("4" (use "adj_edge_parallel_endpts_neq")
                      (("1" (ground) nil nil) ("2" (assert) nil nil))
                      nil)
                     ("5" (assert) nil nil) ("6" (assert) nil nil))
                    nil))
                  nil)
                 ("3" (lemma "adj_edge_parallel_endpts_neq")
                  (("3" (inst - "S" "2")
                    (("1" (ground) nil nil) ("2" (assert) nil nil))
                    nil))
                  nil)
                 ("4" (assert) nil nil)
                 ("5" (use "adj_edge_parallel_endpts_neq")
                  (("1" (ground) nil nil) ("2" (assert) nil nil)) nil)
                 ("6" (assert) nil nil) ("7" (assert) nil nil))
                nil))
              nil)
             ("2" (case "S`length > 2")
              (("1"
                (inst -
                 "half_angle_vsin(^(S`seq(0) - S`seq(1)), ^(S`seq(2) - S`seq(1)))")
                (("1" (inst + "1")
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)
                 ("2" (lemma "half_angle_sine_dir_nonparallel")
                  (("2" (inst - "S`seq(1)" "S`seq(0)" "S`seq(2)")
                    (("1" (assert)
                      (("1" (expand "half_angle_vsin")
                        (("1" (ground) nil nil)) nil))
                      nil)
                     ("2"
                      (lemma "edge_para_endpts_valid_miter_point_args")
                      (("2" (inst - "S" "1")
                        (("1" (ground) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil)
                     ("3" (assert) nil nil)
                     ("4" (use "adj_edge_parallel_endpts_neq")
                      (("1" (ground) nil nil) ("2" (assert) nil nil))
                      nil)
                     ("5" (assert) nil nil))
                    nil))
                  nil)
                 ("3" (lemma "adj_edge_parallel_endpts_neq")
                  (("3" (inst - "S" "1")
                    (("1" (ground) nil nil) ("2" (assert) nil nil))
                    nil))
                  nil)
                 ("4" (assert) nil nil)
                 ("5" (use "adj_edge_parallel_endpts_neq")
                  (("1" (ground) nil nil) ("2" (assert) nil nil)) nil)
                 ("6" (assert) nil nil))
                nil)
               ("2" (typepred "S")
                (("2" (expand "single_loop_back_seq?")
                  (("2" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((miter_sine_set const-decl "finite_set[posreal]"
     miter_point_sequences nil)
    (member const-decl "bool" sets nil)
    (half_angle_sine_dir_nonparallel formula-decl nil vectors_2d_trig
     nil)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (edge_para_endpts_valid_miter_point_args formula-decl nil
     segment_endpoint_sequences nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (<= const-decl "bool" reals nil)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (S skolem-const-decl "edge_parallel_endpoint_seq"
     miter_point_sequences nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (empty? const-decl "bool" sets nil))
   shostak))
 (min_miter_sine_TCC1 0
  (min_miter_sine_TCC1-2 nil 3874129021
   ("" (skeep) (("" (use "miter_sine_set_nonempty") nil nil)) nil)
   ((edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (miter_sine_set_nonempty formula-decl nil miter_point_sequences
     nil))
   shostak
   (min_miter_sine subtype
    "miter_point_sequences.miter_sine_set(miter_point_sequences.S)"
    "non_empty_finite_set[posreal]"))
  (min_miter_sine_TCC1-1 nil 3874128243 ("" (subtype-tcc) nil nil) nil
   nil
   (min_miter_sine subtype
    "miter_point_sequences.miter_sine_set(miter_point_sequences.S)"
    "non_empty_finite_set[posreal]")))
 (min_miter_sine_le_wrapped_sine_TCC1 0
  (min_miter_sine_le_wrapped_sine_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (min_miter_sine_le_wrapped_sine subtype "miter_point_sequences.lbi"
    "below[S`length]"))
  (min_miter_sine_le_wrapped_sine_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (min_miter_sine_le_wrapped_sine subtype "miter_point_sequences.lbi"
    "below[S`length]")))
 (min_miter_sine_le_wrapped_sine_TCC2 0
  (min_miter_sine_le_wrapped_sine_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (min_miter_sine_le_wrapped_sine subtype
    "(number_fields.-)(miter_point_sequences.S`length, 1)"
    "below[S`length]"))
  (min_miter_sine_le_wrapped_sine_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (min_miter_sine_le_wrapped_sine subtype
    "(number_fields.-)(miter_point_sequences.S`length, 1)"
    "below[S`length]")))
 (min_miter_sine_le_wrapped_sine_TCC3 0
  (min_miter_sine_le_wrapped_sine_TCC3-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (min_miter_sine_le_wrapped_sine subtype
    "(number_fields.-)(miter_point_sequences.S`length, 2)"
    "below[S`length]"))
  (min_miter_sine_le_wrapped_sine_TCC3-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (min_miter_sine_le_wrapped_sine subtype
    "(number_fields.-)(miter_point_sequences.S`length, 2)"
    "below[S`length]")))
 (min_miter_sine_le_wrapped_sine_TCC4 0
  (min_miter_sine_le_wrapped_sine_TCC4-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (min_miter_sine_le_wrapped_sine subtype
    "(number_fields.+)(1, miter_point_sequences.lbi)"
    "below[S`length]"))
  (min_miter_sine_le_wrapped_sine_TCC4-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (min_miter_sine_le_wrapped_sine subtype
    "(number_fields.+)(1, miter_point_sequences.lbi)"
    "below[S`length]")))
 (min_miter_sine_le_wrapped_sine_TCC5 0
  (min_miter_sine_le_wrapped_sine_TCC5-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "adj_edge_parallel_endpts_neq")
      (("" (inst - "S" "S`length - 2")
        (("" (ground)
          (("" (replace -3)
            (("" (replace -2)
              (("" (replace -4)
                (("" (replace -6) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (min_miter_sine_le_wrapped_sine subtype "miter_point_sequences.uv"
    "Nz_vector"))
  (min_miter_sine_le_wrapped_sine_TCC5-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (min_miter_sine_le_wrapped_sine subtype "miter_point_sequences.uv"
    "Nz_vector")))
 (min_miter_sine_le_wrapped_sine_TCC6 0
  (min_miter_sine_le_wrapped_sine_TCC6-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "adj_edge_parallel_endpts_neq")
      (("" (inst - "S" "lbi")
        (("" (ground)
          (("" (replace -4)
            (("" (replace -5)
              (("" (replace -7) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (min_miter_sine_le_wrapped_sine subtype "miter_point_sequences.wv"
    "Nz_vector"))
  (min_miter_sine_le_wrapped_sine_TCC6-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (min_miter_sine_le_wrapped_sine subtype "miter_point_sequences.wv"
    "Nz_vector")))
 (min_miter_sine_le_wrapped_sine 0
  (min_miter_sine_le_wrapped_sine-1 nil 3874129021
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (expand "min_miter_sine")
          (("" (expand "miter_sine_set")
            ((""
              (name-replace "lbi" "loop_back_intercept(S)" :hide? nil)
              (("" (invoke (typepred "%1") (! 1 l))
                (("1" (hide -1 -2 -3)
                  (("1"
                    (inst -
                     "half_angle_vsin(^(S`seq(S`length - 2) - S`seq(lbi)),
                                        ^(S`seq(1 + lbi) - S`seq(lbi)))")
                    (("1" (expand "restrict")
                      (("1" (assert)
                        (("1" (hide 2)
                          (("1" (inst + "lbi") (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (lemma "half_angle_sine_dir_nonparallel")
                        (("2"
                          (inst - "S`seq(lbi)" "S`seq(S`length-2)"
                           "S`seq(1 + lbi)")
                          (("1" (assert)
                            (("1" (expand "half_angle_vsin")
                              (("1" (ground) nil nil)) nil))
                            nil)
                           ("2" (ground)
                            (("1"
                              (lemma "adj_edge_parallel_endpts_neq")
                              (("1"
                                (inst - "S" "lbi")
                                (("1" (ground) nil nil))
                                nil))
                              nil)
                             ("2" (expand "dir_parallel?")
                              (("2"
                                (skeep)
                                (("2"
                                  (use
                                   "wrapped_adj_segs_not_dir_parallel")
                                  (("2"
                                    (ground)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (replace -2)
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (use "normalize_scal")
                                              (("2"
                                                (expand "sign")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (assert) nil nil)
                           ("4" (lemma "adj_edge_parallel_endpts_neq")
                            (("4" (inst - "S" "S`length - 2")
                              (("4" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide +)
                  (("2" (use "miter_sine_set_nonempty")
                    (("2" (expand "miter_sine_set")
                      (("2" (replace -2) (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 2)
                  (("3" (skeep)
                    (("3" (lemma "adj_edge_parallel_endpts_neq")
                      (("3" (inst - "S" "i") (("3" (ground) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (hide 2)
                  (("4" (skeep)
                    (("4" (lemma "adj_edge_parallel_endpts_neq")
                      (("4" (inst - "S" "i - 1")
                        (("1" (ground) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (hide 2)
                  (("5" (skeep) (("5" (assert) nil nil)) nil)) nil)
                 ("6" (hide 2)
                  (("6" (skeep)
                    (("6" (lemma "adj_edge_parallel_endpts_neq")
                      (("6" (inst - "S" "i") (("6" (ground) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (hide 2)
                  (("7" (skeep)
                    (("7" (lemma "adj_edge_parallel_endpts_neq")
                      (("7" (inst - "S" "S`length - 2")
                        (("7" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (min_miter_sine const-decl "posreal" miter_point_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (i skolem-const-decl "below(S`length - 1)" miter_point_sequences
       nil)
    (miter_sine_set_nonempty formula-decl nil miter_point_sequences
     nil)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (wrapped_adj_segs_not_dir_parallel formula-decl nil
     segment_endpoint_sequences nil)
    (normalize_scal formula-decl nil vectors_2D vectors)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (scal_1 formula-decl nil vectors_2D vectors)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (sign const-decl "Sign" sign reals)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (half_angle_sine_dir_nonparallel formula-decl nil vectors_2d_trig
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lbi skolem-const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" miter_point_sequences nil)
    (S skolem-const-decl "edge_parallel_endpoint_seq"
     miter_point_sequences nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "Vector" vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (min const-decl
         "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (restrict const-decl "R" restrict nil)
    (<= const-decl "bool" reals nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (miter_sine_set const-decl "finite_set[posreal]"
     miter_point_sequences nil))
   shostak))
 (min_miter_sine_le_wrapped_sine_2_TCC1 0
  (min_miter_sine_le_wrapped_sine_2_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (min_miter_sine_le_wrapped_sine_2 subtype
    "(number_fields.-)(miter_point_sequences.S`length, 3)"
    "below[S`length]"))
  (min_miter_sine_le_wrapped_sine_2_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (min_miter_sine_le_wrapped_sine_2 subtype
    "(number_fields.-)(miter_point_sequences.S`length, 3)"
    "below[S`length]")))
 (min_miter_sine_le_wrapped_sine_2_TCC2 0
  (min_miter_sine_le_wrapped_sine_2_TCC2-2 nil 3874129021
   ("" (skeep)
    (("" (replace -6)
      (("" (typepred "S")
        (("" (inst - "S`length - 3") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil))
   shostak
   (min_miter_sine_le_wrapped_sine_2 subtype "miter_point_sequences.uv"
    "Nz_vector"))
  (min_miter_sine_le_wrapped_sine_2_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (min_miter_sine_le_wrapped_sine_2 subtype "miter_point_sequences.uv"
    "Nz_vector")))
 (min_miter_sine_le_wrapped_sine_2_TCC3 0
  (min_miter_sine_le_wrapped_sine_2_TCC3-2 nil 3874129021
   ("" (skeep)
    (("" (typepred "S")
      (("" (inst - "S`length - 2")
        (("" (replace -12) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (min_miter_sine_le_wrapped_sine_2 subtype "miter_point_sequences.wv"
    "Nz_vector"))
  (min_miter_sine_le_wrapped_sine_2_TCC3-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (min_miter_sine_le_wrapped_sine_2 subtype "miter_point_sequences.wv"
    "Nz_vector")))
 (min_miter_sine_le_wrapped_sine_2 0
  (min_miter_sine_le_wrapped_sine_2-1 nil 3874129021
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (expand "min_miter_sine")
          (("" (expand "miter_sine_set")
            ((""
              (name-replace "lbi" "loop_back_intercept(S)" :hide? nil)
              (("" (invoke (typepred "%1") (! 1 l))
                (("1" (hide -1 -2 -3)
                  (("1" (expand "restrict")
                    (("1"
                      (inst -
                       "half_angle_vsin(^(S`seq(S`length - 3) - S`seq(S`length - 2)),
                          ^(S`seq(lbi) - S`seq(S`length - 2)))")
                      (("1" (assert)
                        (("1" (hide 2)
                          (("1" (inst + "S`length - 2")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (lemma "half_angle_sine_dir_nonparallel")
                          (("2"
                            (inst - "S`seq(S`length - 2)"
                             "S`seq(S`length-3)" "S`seq(lbi)")
                            (("1" (assert)
                              (("1"
                                (expand "half_angle_vsin")
                                (("1" (ground) nil nil))
                                nil))
                              nil)
                             ("2" (ground)
                              (("1"
                                (lemma "adj_edge_parallel_endpts_neq")
                                (("1"
                                  (inst - "S" "S`length - 2")
                                  (("1" (ground) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "dir_parallel?")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (use
                                     "wrapped_adj_segs_not_dir_parallel")
                                    (("2"
                                      (ground)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (replace -2)
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (hide-all-but 2)
                                              (("2"
                                                (use "normalize_scal")
                                                (("2"
                                                  (expand "sign")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (typepred "S")
                              (("3"
                                (inst - "S`length - 3")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide +)
                  (("2" (use "miter_sine_set_nonempty")
                    (("2" (expand "miter_sine_set")
                      (("2" (replace -2) (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 2)
                  (("3" (skeep)
                    (("3" (lemma "adj_edge_parallel_endpts_neq")
                      (("3" (inst - "S" "i") (("3" (ground) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (hide 2)
                  (("4" (skeep)
                    (("4" (lemma "adj_edge_parallel_endpts_neq")
                      (("4" (inst - "S" "i - 1")
                        (("1" (ground) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (hide 2)
                  (("5" (skeep) (("5" (assert) nil nil)) nil)) nil)
                 ("6" (hide 2)
                  (("6" (skeep)
                    (("6" (lemma "adj_edge_parallel_endpts_neq")
                      (("6" (inst - "S" "i") (("6" (ground) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (hide 2)
                  (("7" (skeep)
                    (("7" (lemma "adj_edge_parallel_endpts_neq")
                      (("7" (inst - "S" "S`length - 2")
                        (("7" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (min_miter_sine const-decl "posreal" miter_point_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (i skolem-const-decl "below(S`length - 1)" miter_point_sequences
       nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (miter_sine_set_nonempty formula-decl nil miter_point_sequences
     nil)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (wrapped_adj_segs_not_dir_parallel formula-decl nil
     segment_endpoint_sequences nil)
    (normalize_scal formula-decl nil vectors_2D vectors)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (scal_1 formula-decl nil vectors_2D vectors)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (sign const-decl "Sign" sign reals)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (half_angle_sine_dir_nonparallel formula-decl nil vectors_2d_trig
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (sub_eq_args formula-decl nil vectors_2D vectors)
    (lbi skolem-const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" miter_point_sequences nil)
    (S skolem-const-decl "edge_parallel_endpoint_seq"
     miter_point_sequences nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "Vector" vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (min const-decl
         "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (restrict const-decl "R" restrict nil)
    (<= const-decl "bool" reals nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (miter_sine_set const-decl "finite_set[posreal]"
     miter_point_sequences nil))
   shostak))
 (min_miter_sine_le_each_sine_TCC1 0
  (min_miter_sine_le_each_sine_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (min_miter_sine_le_each_sine subtype
    "(number_fields.-)(miter_point_sequences.i, 1)" "below[S`length]"))
  (min_miter_sine_le_each_sine_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (min_miter_sine_le_each_sine subtype
    "(number_fields.-)(miter_point_sequences.i, 1)"
    "below[S`length]")))
 (min_miter_sine_le_each_sine_TCC2 0
  (min_miter_sine_le_each_sine_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (min_miter_sine_le_each_sine subtype "miter_point_sequences.i"
    "below[S`length]"))
  (min_miter_sine_le_each_sine_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (min_miter_sine_le_each_sine subtype "miter_point_sequences.i"
    "below[S`length]")))
 (min_miter_sine_le_each_sine_TCC3 0
  (min_miter_sine_le_each_sine_TCC3-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (min_miter_sine_le_each_sine subtype
    "(number_fields.+)(miter_point_sequences.i, 1)" "below[S`length]"))
  (min_miter_sine_le_each_sine_TCC3-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (min_miter_sine_le_each_sine subtype
    "(number_fields.+)(miter_point_sequences.i, 1)"
    "below[S`length]")))
 (min_miter_sine_le_each_sine_TCC4 0
  (min_miter_sine_le_each_sine_TCC4-2 nil 3874129021
   ("" (skeep)
    (("" (replace -6)
      (("" (move-terms -4 r 2)
        (("" (lemma "adj_edge_parallel_endpts_neq")
          (("" (inst - "S" "i - 1") (("" (ground) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (add_zero_left formula-decl nil vectors_2D vectors)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak
   (min_miter_sine_le_each_sine subtype "miter_point_sequences.uv"
    "Nz_vector"))
  (min_miter_sine_le_each_sine_TCC4-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (min_miter_sine_le_each_sine subtype "miter_point_sequences.uv"
    "Nz_vector")))
 (min_miter_sine_le_each_sine_TCC5 0
  (min_miter_sine_le_each_sine_TCC5-2 nil 3874129021
   ("" (skeep)
    (("" (replace -6)
      (("" (move-terms -5 r 2)
        (("" (lemma "adj_edge_parallel_endpts_neq")
          (("" (inst - "S" "i") (("" (ground) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (add_zero_left formula-decl nil vectors_2D vectors)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak
   (min_miter_sine_le_each_sine subtype "miter_point_sequences.wv"
    "Nz_vector"))
  (min_miter_sine_le_each_sine_TCC5-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (min_miter_sine_le_each_sine subtype "miter_point_sequences.wv"
    "Nz_vector")))
 (min_miter_sine_le_each_sine 0
  (min_miter_sine_le_each_sine-1 nil 3874129021
   ("" (skeep)
    (("" (assert)
      (("" (expand "min_miter_sine")
        (("" (expand "miter_sine_set")
          (("" (invoke (typepred "%1") (! 1 l))
            (("1" (hide -1 -2 -3)
              (("1"
                (inst - "half_angle_vsin(^(S`seq(i - 1) - S`seq(i)),
                                         ^(S`seq(1 + i) - S`seq(i)))")
                (("1" (expand "restrict")
                  (("1" (assert)
                    (("1" (hide 2)
                      (("1" (inst + "i") (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (use "nonparallel_half_angle_sine_pos")
                    (("1" (ground) nil nil)
                     ("2"
                      (use "edge_para_endpts_valid_miter_point_args")
                      (("2" (ground) nil nil)) nil)
                     ("3" (lemma "adj_edge_parallel_endpts_neq")
                      (("3" (inst - "S" "i - 1")
                        (("3" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide +)
              (("2" (use "miter_sine_set_nonempty")
                (("2" (expand "miter_sine_set")
                  (("2" (propax) nil nil)) nil))
                nil))
              nil)
             ("3" (hide 2)
              (("3" (skeep)
                (("3" (lemma "adj_edge_parallel_endpts_neq")
                  (("3" (inst - "S" "i!1") (("3" (ground) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (hide 2)
              (("4" (skeep)
                (("4" (lemma "adj_edge_parallel_endpts_neq")
                  (("4" (inst - "S" "i!1 - 1")
                    (("1" (ground) nil nil) ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (hide 2) (("5" (skeep) (("5" (assert) nil nil)) nil))
              nil)
             ("6" (hide 2)
              (("6" (skeep)
                (("6" (lemma "adj_edge_parallel_endpts_neq")
                  (("6" (inst - "S" "i!1") (("6" (ground) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("7" (hide 2)
              (("7" (skeep)
                (("7" (ground)
                  (("1" (typepred "S")
                    (("1" (expand "mostly_uniq_point_list?")
                      (("1" (inst -5 "0" "S`length - 2")
                        (("1" (ground) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (typepred "S")
                    (("2" (inst - "S`length - 2")
                      (("2" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (miter_sine_set const-decl "finite_set[posreal]"
     miter_point_sequences nil)
    (i!1 skolem-const-decl "below(S`length - 1)" miter_point_sequences
     nil)
    (miter_sine_set_nonempty formula-decl nil miter_point_sequences
     nil)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (edge_para_endpts_valid_miter_point_args formula-decl nil
     segment_endpoint_sequences nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (nonparallel_half_angle_sine_pos judgement-tcc nil
     miter_point_sequences nil)
    (i skolem-const-decl "{i: posnat | i < S`length - 1}"
       miter_point_sequences nil)
    (S skolem-const-decl "edge_parallel_endpoint_seq"
     miter_point_sequences nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "Vector" vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (min const-decl
         "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (restrict const-decl "R" restrict nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (min_miter_sine const-decl "posreal" miter_point_sequences nil))
   shostak))
 (miter_half_angle_sine_pos 0
  (miter_half_angle_sine_pos-1 nil 3874129021
   ("" (skeep)
    (("" (assert)
      (("" (expand "half_angle_vsin")
        (("" (lemma "half_angle_sine_dir_nonparallel")
          (("" (inst - "S`seq(i)" "S`seq(i-1)" "S`seq(i+1)")
            (("1" (assert) (("1" (flatten) nil nil)) nil)
             ("2" (lemma "edge_para_endpts_valid_miter_point_args")
              (("2" (inst - "S" "i") (("2" (ground) nil nil)) nil))
              nil)
             ("3" (lemma "adj_edge_parallel_endpts_neq")
              (("3" (inst - "S" "i-1") (("3" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (half_angle_sine_dir_nonparallel formula-decl nil vectors_2d_trig
     nil)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (edge_para_endpts_valid_miter_point_args formula-decl nil
     segment_endpoint_sequences nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (S skolem-const-decl "edge_parallel_endpoint_seq"
     miter_point_sequences nil)
    (i skolem-const-decl "{i: posnat | i < S`length - 1}"
       miter_point_sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (wrapped_miter_half_angle_sine_pos 0
  (wrapped_miter_half_angle_sine_pos-1 nil 3874129021
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (expand "half_angle_vsin")
          (("" (lemma "half_angle_sine_dir_nonparallel")
            ((""
              (name-replace "lbi" "loop_back_intercept(S)" :hide? nil)
              ((""
                (inst - "S`seq(lbi)" "S`seq(S`length-2)"
                 "S`seq(1 + lbi)")
                (("1" (assert) (("1" (flatten) nil nil)) nil)
                 ("2" (lemma "adj_edge_parallel_endpts_neq")
                  (("2" (inst - "S" "lbi")
                    (("1" (ground)
                      (("1" (use "wrapped_adj_segs_not_dir_parallel")
                        (("1" (assert)
                          (("1" (flatten)
                            (("1"
                              (rewrite
                               "dir_parallel_eqv_normalized_diffs_eq")
                              (("1"
                                (lemma
                                 "edge_parallel_endpts_mostly_uniq")
                                (("1"
                                  (inst - "S" "lbi" "S`length - 2")
                                  (("1" (ground) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "S")
                                (("2"
                                  (inst - "S`length - 2")
                                  (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "edge_parallel_endpts_mostly_uniq")
                      (("2" (inst - "S" "lbi" "S`length - 2")
                        (("2" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (flatten)
                  (("3" (hide 1)
                    (("3" (typepred "S")
                      (("3" (inst - "S`length - 2")
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (dir_parallel_eqv_normalized_diffs_eq formula-decl nil
     vectors_cross_2d nil)
    (edge_parallel_endpts_mostly_uniq formula-decl nil
     segment_endpoint_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (wrapped_adj_segs_not_dir_parallel formula-decl nil
     segment_endpoint_sequences nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "Vector" vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (lbi skolem-const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" miter_point_sequences nil)
    (S skolem-const-decl "edge_parallel_endpoint_seq"
     miter_point_sequences nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (half_angle_sine_dir_nonparallel formula-decl nil vectors_2d_trig
     nil))
   shostak))
 (wrapped_miter_half_angle_sine_pos_2 0
  (wrapped_miter_half_angle_sine_pos_2-1 nil 3874129021
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (expand "half_angle_vsin")
          (("" (lemma "half_angle_sine_dir_nonparallel")
            ((""
              (name-replace "lbi" "loop_back_intercept(S)" :hide? nil)
              ((""
                (inst - "S`seq(S`length - 2)" "S`seq(S`length - 3)"
                 "S`seq(lbi)")
                (("1" (assert) (("1" (flatten) nil nil)) nil)
                 ("2" (lemma "adj_edge_parallel_endpts_neq")
                  (("2" (inst - "S" "S`length - 2")
                    (("2" (ground)
                      (("2" (use "wrapped_adj_segs_not_dir_parallel")
                        (("2" (assert)
                          (("2" (flatten)
                            (("2"
                              (rewrite
                               "dir_parallel_eqv_normalized_diffs_eq")
                              (("1"
                                (lemma
                                 "edge_parallel_endpts_mostly_uniq")
                                (("1"
                                  (inst - "S" "lbi" "S`length - 2")
                                  (("1" (ground) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "S")
                                (("2"
                                  (inst - "S`length - 3")
                                  (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (lemma "edge_parallel_endpts_mostly_uniq")
                  (("3" (inst - "S" "S`length - 2" "S`length - 3")
                    (("3" (ground) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (dir_parallel_eqv_normalized_diffs_eq formula-decl nil
     vectors_cross_2d nil)
    (edge_parallel_endpts_mostly_uniq formula-decl nil
     segment_endpoint_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (wrapped_adj_segs_not_dir_parallel formula-decl nil
     segment_endpoint_sequences nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "Vector" vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (lbi skolem-const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" miter_point_sequences nil)
    (S skolem-const-decl "edge_parallel_endpoint_seq"
     miter_point_sequences nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (half_angle_sine_dir_nonparallel formula-decl nil vectors_2d_trig
     nil))
   shostak))
 (min_miter_sine_le_1 0
  (min_miter_sine_le_1-1 nil 3874129021
   ("" (skeep + t)
    (("" (expand "min_miter_sine")
      (("" (invoke (typepred "%1") (! 1 l))
        (("" (hide -1 -2 -4)
          (("" (expand "miter_sine_set")
            (("" (skeep)
              (("" (split -1)
                (("1" (flatten)
                  (("1" (replace -3 :hide? t) (("1" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (replace -1 :hide? t) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((min_miter_sine const-decl "posreal" miter_point_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (miter_sine_set const-decl "finite_set[posreal]"
     miter_point_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (min const-decl
         "{a: T | SS(a) AND (FORALL (x: T): SS(x) IMPLIES a <= x)}"
         finite_sets_minmax finite_sets)
    (restrict const-decl "R" restrict nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil))
   shostak))
 (miter_half_angle_cosine_lt_1 0
  (miter_half_angle_cosine_lt_1-1 nil 3874129021
   ("" (skeep)
    (("" (assert)
      (("" (expand "half_angle_vcos")
        (("" (lemma "half_angle_cosine_dir_nonparallel")
          (("" (inst - "S`seq(i)" "S`seq(i-1)" "S`seq(i+1)")
            (("1" (assert) nil nil)
             ("2" (lemma "edge_para_endpts_valid_miter_point_args")
              (("2" (inst - "S" "i") (("2" (ground) nil nil)) nil))
              nil)
             ("3" (lemma "adj_edge_parallel_endpts_neq")
              (("3" (inst - "S" "i-1") (("3" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (half_angle_cosine_dir_nonparallel formula-decl nil vectors_2d_trig
     nil)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (edge_para_endpts_valid_miter_point_args formula-decl nil
     segment_endpoint_sequences nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (S skolem-const-decl "edge_parallel_endpoint_seq"
     miter_point_sequences nil)
    (i skolem-const-decl "{i: posnat | i < S`length - 1}"
       miter_point_sequences nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (half_angle_vcos const-decl "{x: real | -1 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (miter_point_defns_equiv_seq_TCC1 0
  (miter_point_defns_equiv_seq_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (miter_point_defns_equiv_seq subtype "miter_point_sequences.i"
    "below[S`length]"))
  (miter_point_defns_equiv_seq_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_point_defns_equiv_seq subtype "miter_point_sequences.i"
    "below[S`length]")))
 (miter_point_defns_equiv_seq_TCC2 0
  (miter_point_defns_equiv_seq_TCC2-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "adj_edge_parallel_endpts_neq")
      (("" (inst - "S" "i-1") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (miter_point_defns_equiv_seq subtype
    "miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.i, 1))"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq(miter_point_sequences.i)}"))
  (miter_point_defns_equiv_seq_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_point_defns_equiv_seq subtype
    "miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.i, 1))"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq(miter_point_sequences.i)}")))
 (miter_point_defns_equiv_seq_TCC3 0
  (miter_point_defns_equiv_seq_TCC3-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (miter_point_defns_equiv_seq subtype
    "(number_fields.+)(miter_point_sequences.i, 1)" "below[S`length]"))
  (miter_point_defns_equiv_seq_TCC3-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_point_defns_equiv_seq subtype
    "(number_fields.+)(miter_point_sequences.i, 1)"
    "below[S`length]")))
 (miter_point_defns_equiv_seq_TCC4 0
  (miter_point_defns_equiv_seq_TCC4-2 nil 3874129021
   ("" (skeep)
    (("" (use "edge_para_endpts_valid_miter_point_args")
      (("" (ground) nil nil)) nil))
    nil)
   ((edge_para_endpts_valid_miter_point_args formula-decl nil
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak
   (miter_point_defns_equiv_seq subtype
    "miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.i, 1))"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.S`seq(miter_point_sequences.i), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.i, 1)), miter_point_sequences.S`seq(miter_point_sequences.i)), (vectors_2D.-)(p, miter_point_sequences.S`seq(miter_point_sequences.i)))))}"))
  (miter_point_defns_equiv_seq_TCC4-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_point_defns_equiv_seq subtype
    "miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.i, 1))"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.S`seq(miter_point_sequences.i), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.i, 1)), miter_point_sequences.S`seq(miter_point_sequences.i)), (vectors_2D.-)(p, miter_point_sequences.S`seq(miter_point_sequences.i)))))}")))
 (miter_point_defns_equiv_seq 0
  (miter_point_defns_equiv_seq-1 nil 3874129021
   ("" (skeep) (("" (use "miter_point_defns_equiv") nil nil)) nil)
   ((miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "Vector" vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (miter_point_defns_equiv formula-decl nil vectors_2d_trig nil))
   shostak))
 (three_pt_miniseq_in_endpt_seq 0
  (three_pt_miniseq_in_endpt_seq-1 nil 3874129021
   ("" (skeep)
    (("" (ground)
      (("1" (expand "three_point_miniseq?")
        (("1" (use "edge_para_endpts_valid_miter_point_args")
          (("1" (ground) nil nil)) nil))
        nil)
       ("2" (expand "three_point_offset_dist?")
        (("2" (typepred "d")
          (("2" (expand "max_miter_offset")
            (("2" (lemma "min_seg_sep_bounds_seg_length")
              (("2" (inst-cp - "S" "i-1")
                (("2" (inst - "S" "i")
                  (("2" (ground)
                    (("2" (expand "length")
                      (("2" (cross-mult -5)
                        (("2" (cross-mult 1)
                          (("2" (lemma "min_miter_sine_le_each_sine")
                            (("2" (inst - "S" "i")
                              (("2"
                                (assert)
                                (("2"
                                  (name-replace
                                   "hs"
                                   "half_angle_vsin(^(S`seq(i - 1) - S`seq(i)),
                       ^(S`seq(1 + i) - S`seq(i)))")
                                  (("2"
                                    (case
                                     "min_segment_sep(S) <= 
 min(norm(S`seq(i - 1) - S`seq(i)), norm(S`seq(1 + i) - S`seq(i)))")
                                    (("1"
                                      (case
                                       "forall (x,y,z: posreal): x <= hs & y <= z => x * y <= hs * z")
                                      (("1"
                                        (inst
                                         -
                                         "min_miter_sine(S)"
                                         "min_segment_sep(S)"
                                         "min(norm(S`seq(i - 1) - S`seq(i)), norm(S`seq(1 + i) - S`seq(i)))")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (expand "min")
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (ground)
                                                (("2"
                                                  (use "norm_eq_0")
                                                  (("2"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (skeep)
                                          (("2" (real-props) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "min")
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide 2)
                                            (("2"
                                              (ground)
                                              (("2"
                                                (rewrite "norm_sym" 2)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (edge_para_endpts_valid_miter_point_args formula-decl nil
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (min_seg_sep_bounds_seg_length formula-decl nil
     segment_endpoint_sequences nil)
    (length const-decl "posreal" segments_2d nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (norm_sym formula-decl nil vectors_2D vectors)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (norm_diff_pos formula-decl nil vectors_cross_2d nil)
    (norm_diff_nonzero_2 formula-decl nil vectors_cross_2d nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (i skolem-const-decl "{i: posnat | i < S`length - 1}"
       miter_point_sequences nil)
    (S skolem-const-decl "edge_parallel_endpoint_seq"
     miter_point_sequences nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (min_miter_sine_le_each_sine formula-decl nil miter_point_sequences
     nil)
    (min_segment_sep const-decl "posreal" segment_endpoint_sequences
     nil)
    (min_miter_sine const-decl "posreal" miter_point_sequences nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (three_point_offset_dist? const-decl "bool"
     segment_endpoint_sequences nil))
   shostak))
 (four_pt_miniseq_in_endpt_seq_TCC1 0
  (four_pt_miniseq_in_endpt_seq_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (four_pt_miniseq_in_endpt_seq subtype
    "(number_fields.+)(miter_point_sequences.i, 2)" "below[S`length]"))
  (four_pt_miniseq_in_endpt_seq_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (four_pt_miniseq_in_endpt_seq subtype
    "(number_fields.+)(miter_point_sequences.i, 2)"
    "below[S`length]")))
 (four_pt_miniseq_in_endpt_seq_TCC2 0
  (four_pt_miniseq_in_endpt_seq_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (four_pt_miniseq_in_endpt_seq subtype
    "(number_fields.-)(miter_point_sequences.i, 1)" "below[S`length]"))
  (four_pt_miniseq_in_endpt_seq_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (four_pt_miniseq_in_endpt_seq subtype
    "(number_fields.-)(miter_point_sequences.i, 1)"
    "below[S`length]")))
 (four_pt_miniseq_in_endpt_seq_TCC3 0
  (four_pt_miniseq_in_endpt_seq_TCC3-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (four_pt_miniseq_in_endpt_seq subtype "miter_point_sequences.i"
    "below[S`length]"))
  (four_pt_miniseq_in_endpt_seq_TCC3-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (four_pt_miniseq_in_endpt_seq subtype "miter_point_sequences.i"
    "below[S`length]")))
 (four_pt_miniseq_in_endpt_seq_TCC4 0
  (four_pt_miniseq_in_endpt_seq_TCC4-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (four_pt_miniseq_in_endpt_seq subtype
    "(number_fields.+)(miter_point_sequences.i, 1)" "below[S`length]"))
  (four_pt_miniseq_in_endpt_seq_TCC4-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (four_pt_miniseq_in_endpt_seq subtype
    "(number_fields.+)(miter_point_sequences.i, 1)"
    "below[S`length]")))
 (four_pt_miniseq_in_endpt_seq_TCC5 0
  (four_pt_miniseq_in_endpt_seq_TCC5-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (four_pt_miniseq_in_endpt_seq subtype
    "miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.i, 2))"
    "(segment_endpoint_sequences.four_point_miniseq?(miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.i, 1)), miter_point_sequences.S`seq(miter_point_sequences.i), miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.i, 1))))"))
  (four_pt_miniseq_in_endpt_seq_TCC5-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (four_pt_miniseq_in_endpt_seq subtype
    "miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.i, 2))"
    "(segment_endpoint_sequences.four_point_miniseq?(miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.i, 1)), miter_point_sequences.S`seq(miter_point_sequences.i), miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.i, 1))))")))
 (four_pt_miniseq_in_endpt_seq 0
  (four_pt_miniseq_in_endpt_seq-1 nil 3874129021
   ("" (skeep)
    (("" (lemma "three_pt_miniseq_in_endpt_seq")
      (("" (inst-cp - "S" "i" "d")
        (("" (inst - "S" "i+1" "d")
          (("" (flatten)
            (("" (ground)
              (("1" (expand "four_point_miniseq?")
                (("1" (expand "three_point_miniseq?")
                  (("1" (ground) nil nil)) nil))
                nil)
               ("2" (expand "four_point_offset_dist?")
                (("2" (hide -2 -4)
                  (("2" (expand "three_point_miniseq?")
                    (("2" (flatten)
                      (("2" (typepred "d")
                        (("2" (expand "max_miter_offset")
                          (("2" (real-props)
                            (("2"
                              (claim
                               "min_miter_sine(S) <= %1 & min_segment_sep(S) <= %2"
                               nil (! 1 r *))
                              (("1"
                                (flatten)
                                (("1"
                                  (case
                                   "forall (w,x,y,z: nnreal): w <= x & y <= z => w*y <= x*z")
                                  (("1"
                                    (invoke
                                     (inst - "%1" "%2" "%3" "%4")
                                     (! -2 *)
                                     (! -3 *))
                                    (("1" (ground) nil nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (expand "min")
                                        (("2"
                                          (lift-if)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (skeep)
                                      (("2" (mult-cases 1) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide -3 2)
                                (("2"
                                  (ground)
                                  (("1"
                                    (expand "min")
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (lemma
                                           "min_miter_sine_le_each_sine")
                                          (("1"
                                            (inst - "S" "i+1")
                                            (("1" (ground) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma
                                           "min_miter_sine_le_each_sine")
                                          (("2"
                                            (inst - "S" "i")
                                            (("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma
                                     "min_seg_sep_bounds_seg_length")
                                    (("2"
                                      (inst-cp - "S" "i-1")
                                      (("2"
                                        (inst-cp - "S" "i")
                                        (("2"
                                          (inst - "S" "i+1")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "length")
                                              (("2"
                                                (rewrite "norm_sym" 1)
                                                (("2"
                                                  (expand "min")
                                                  (("2"
                                                    (apply
                                                     (repeat
                                                      (lift-if)))
                                                    (("2"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((three_pt_miniseq_in_endpt_seq formula-decl nil
     miter_point_sequences nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (four_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (min_segment_sep const-decl "posreal" segment_endpoint_sequences
     nil)
    (- const-decl "Vector" vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (min_miter_sine const-decl "posreal" miter_point_sequences nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (S skolem-const-decl "edge_parallel_endpoint_seq"
     miter_point_sequences nil)
    (i skolem-const-decl "{i: posnat | i < S`length - 2}"
       miter_point_sequences nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (min_miter_sine_le_each_sine formula-decl nil miter_point_sequences
     nil)
    (length const-decl "posreal" segments_2d nil)
    (norm_sym formula-decl nil vectors_2D vectors)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (min_seg_sep_bounds_seg_length formula-decl nil
     segment_endpoint_sequences nil)
    (TRUE const-decl "bool" booleans nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (four_point_offset_dist? const-decl "bool"
     segment_endpoint_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (three_pt_miniseq_in_endpt_seq_wrap_TCC1 0
  (three_pt_miniseq_in_endpt_seq_wrap_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (three_pt_miniseq_in_endpt_seq_wrap subtype
    "(number_fields.+)(1, miter_point_sequences.lbi)"
    "below[S`length]"))
  (three_pt_miniseq_in_endpt_seq_wrap_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (three_pt_miniseq_in_endpt_seq_wrap subtype
    "(number_fields.+)(1, miter_point_sequences.lbi)"
    "below[S`length]")))
 (three_pt_miniseq_in_endpt_seq_wrap 0
  (three_pt_miniseq_in_endpt_seq_wrap-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin)
      (("" (ground)
        (("1" (expand "three_point_miniseq?")
          (("1" (lemma "adj_edge_parallel_endpts_neq")
            (("1" (ground)
              (("1" (inst - "S" "S`length - 2")
                (("1" (ground) nil nil)) nil)
               ("2" (inst - "S" "lbi") (("2" (ground) nil nil)) nil)
               ("3" (expand "dir_parallel?")
                (("3" (skeep)
                  (("3" (use "wrapped_adj_segs_not_dir_parallel")
                    (("3" (ground)
                      (("3" (replace -5 :dir rl)
                        (("3" (flatten)
                          (("3" (replace -1)
                            (("3" (rewrite "normalize_scal")
                              (("3"
                                (expand "sign")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "three_point_offset_dist?")
          (("2" (typepred "d")
            (("2" (expand "max_miter_offset")
              (("2" (lemma "min_seg_sep_bounds_seg_length")
                (("2" (inst-cp - "S" "S`length - 2")
                  (("2" (inst - "S" "lbi")
                    (("2" (ground)
                      (("2" (expand "length")
                        (("2" (cross-mult -5)
                          (("2" (cross-mult 1)
                            (("2"
                              (use "min_miter_sine_le_wrapped_sine")
                              (("2"
                                (assert)
                                (("2"
                                  (name-replace
                                   "hs"
                                   "half_angle_vsin(^(S`seq(S`length - 2) - S`seq(lbi)),
                           ^(S`seq(1 + lbi) - S`seq(lbi)))")
                                  (("2"
                                    (case
                                     "min_segment_sep(S) <=
                            min(norm(S`seq(S`length - 2) - S`seq(lbi)), norm(S`seq(1 + lbi) - S`seq(lbi)))")
                                    (("1"
                                      (case
                                       "forall (x,y,z: posreal): x <= hs & y <= z => x * y <= hs * z")
                                      (("1"
                                        (inst
                                         -
                                         "min_miter_sine(S)"
                                         "min_segment_sep(S)"
                                         "min(norm(S`seq(S`length - 2) - S`seq(lbi)), norm(S`seq(1 + lbi) - S`seq(lbi)))")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "hs")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (expand "min")
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (ground)
                                                (("2"
                                                  (use "norm_eq_0")
                                                  (("2"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (skeep)
                                          (("2" (real-props) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "min")
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide 2)
                                            (("2"
                                              (ground)
                                              (("2"
                                                (rewrite "norm_sym" 2)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (<= const-decl "bool" reals nil)
    (three_point_offset_dist? const-decl "bool"
     segment_endpoint_sequences nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (min_miter_sine const-decl "posreal" miter_point_sequences nil)
    (min_segment_sep const-decl "posreal" segment_endpoint_sequences
     nil)
    (min_miter_sine_le_wrapped_sine formula-decl nil
     miter_point_sequences nil)
    (norm_sym formula-decl nil vectors_2D vectors)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (norm_diff_pos formula-decl nil vectors_cross_2d nil)
    (norm_diff_nonzero_2 formula-decl nil vectors_cross_2d nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (hs skolem-const-decl "{x: real | 0 <= x AND x <= 1}"
     miter_point_sequences nil)
    (lbi skolem-const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" miter_point_sequences nil)
    (S skolem-const-decl "edge_parallel_endpoint_seq"
     miter_point_sequences nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "Normalized" vectors_2D vectors)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (length const-decl "posreal" segments_2d nil)
    (min_seg_sep_bounds_seg_length formula-decl nil
     segment_endpoint_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (normalize_scal formula-decl nil vectors_2D vectors)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (sign const-decl "Sign" sign reals)
    (wrapped_adj_segs_not_dir_parallel formula-decl nil
     segment_endpoint_sequences nil)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil))
   shostak))
 (four_pt_miniseq_in_endpt_seq_wrap_TCC1 0
  (four_pt_miniseq_in_endpt_seq_wrap_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (four_pt_miniseq_in_endpt_seq_wrap subtype
    "(number_fields.+)(2, miter_point_sequences.lbi)"
    "below[S`length]"))
  (four_pt_miniseq_in_endpt_seq_wrap_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (four_pt_miniseq_in_endpt_seq_wrap subtype
    "(number_fields.+)(2, miter_point_sequences.lbi)"
    "below[S`length]")))
 (four_pt_miniseq_in_endpt_seq_wrap 0
  (four_pt_miniseq_in_endpt_seq_wrap-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin)
      (("" (flatten)
        (("" (use "three_pt_miniseq_in_endpt_seq_wrap")
          (("" (assert)
            (("" (replace -3 :dir rl)
              (("" (assert)
                (("" (flatten)
                  (("" (expand "four_point_miniseq?")
                    (("" (expand "three_point_miniseq?")
                      (("" (flatten)
                        (("" (assert)
                          (("" (lemma "three_pt_miniseq_in_endpt_seq")
                            (("" (inst - "S" "1 + lbi" "d")
                              ((""
                                (flatten)
                                ((""
                                  (assert)
                                  ((""
                                    (expand "three_point_miniseq?")
                                    ((""
                                      (flatten)
                                      ((""
                                        (assert)
                                        ((""
                                          (expand
                                           "four_point_offset_dist?")
                                          ((""
                                            (typepred "d")
                                            ((""
                                              (expand
                                               "max_miter_offset")
                                              ((""
                                                (real-props)
                                                ((""
                                                  (claim
                                                   "min_miter_sine(S) <= %1 & min_segment_sep(S) <= %2"
                                                   nil
                                                   (! 6 r *))
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (case
                                                       "forall (w,x,y,z: nnreal): w <= x & y <= z => w*y <= x*z")
                                                      (("1"
                                                        (invoke
                                                         (inst
                                                          -
                                                          "%1"
                                                          "%2"
                                                          "%3"
                                                          "%4")
                                                         (! -2 *)
                                                         (! -3 *))
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "min")
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (mult-cases
                                                             1)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 7)
                                                    (("2"
                                                      (ground)
                                                      (("1"
                                                        (expand "min")
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (lemma
                                                               "min_miter_sine_le_each_sine")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "S"
                                                                 "1 + lbi")
                                                                (("1"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (use
                                                               "min_miter_sine_le_wrapped_sine")
                                                              (("2"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "min_seg_sep_bounds_seg_length")
                                                        (("2"
                                                          (inst-cp
                                                           -
                                                           "S"
                                                           "S`length-2")
                                                          (("2"
                                                            (inst-cp
                                                             -
                                                             "S"
                                                             "lbi")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "S"
                                                               "1 + lbi")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "length")
                                                                  (("2"
                                                                    (rewrite
                                                                     "norm_sym"
                                                                     -3)
                                                                    (("2"
                                                                      (expand
                                                                       "min")
                                                                      (("2"
                                                                        (apply
                                                                         (repeat
                                                                          (lift-if)))
                                                                        (("2"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (four_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (<= const-decl "bool" reals nil)
    (four_point_offset_dist? const-decl "bool"
     segment_endpoint_sequences nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (three_pt_miniseq_in_endpt_seq_wrap formula-decl nil
     miter_point_sequences nil)
    (three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (min_segment_sep const-decl "posreal" segment_endpoint_sequences
     nil)
    (- const-decl "Vector" vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (min_miter_sine const-decl "posreal" miter_point_sequences nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (S skolem-const-decl "edge_parallel_endpoint_seq"
     miter_point_sequences nil)
    (lbi skolem-const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" miter_point_sequences nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (min_miter_sine_le_wrapped_sine formula-decl nil
     miter_point_sequences nil)
    (min_miter_sine_le_each_sine formula-decl nil miter_point_sequences
     nil)
    (length const-decl "posreal" segments_2d nil)
    (norm_sym formula-decl nil vectors_2D vectors)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (min_seg_sep_bounds_seg_length formula-decl nil
     segment_endpoint_sequences nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (three_pt_miniseq_in_endpt_seq formula-decl nil
     miter_point_sequences nil))
   shostak))
 (four_pt_miniseq_in_endpt_seq_wrap_2 0
  (four_pt_miniseq_in_endpt_seq_wrap_2-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin)
      (("" (flatten)
        (("" (use "three_pt_miniseq_in_endpt_seq_wrap")
          (("" (assert)
            (("" (replace -3 :dir rl)
              (("" (assert)
                (("" (flatten)
                  (("" (expand "four_point_miniseq?")
                    (("" (expand "three_point_miniseq?")
                      (("" (flatten)
                        (("" (assert)
                          (("" (lemma "three_pt_miniseq_in_endpt_seq")
                            (("" (inst - "S" "S`length - 2" "d")
                              ((""
                                (flatten)
                                ((""
                                  (expand "three_point_miniseq?")
                                  ((""
                                    (flatten)
                                    ((""
                                      (assert)
                                      ((""
                                        (expand
                                         "four_point_offset_dist?")
                                        ((""
                                          (typepred "d")
                                          ((""
                                            (expand "max_miter_offset")
                                            ((""
                                              (real-props)
                                              ((""
                                                (claim
                                                 "min_miter_sine(S) <= %1 & min_segment_sep(S) <= %2"
                                                 nil
                                                 (! 6 r *))
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (case
                                                     "forall (w,x,y,z: nnreal): w <= x & y <= z => w*y <= x*z")
                                                    (("1"
                                                      (invoke
                                                       (inst
                                                        -
                                                        "%1"
                                                        "%2"
                                                        "%3"
                                                        "%4")
                                                       (! -2 *)
                                                       (! -3 *))
                                                      (("1"
                                                        (ground)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "min")
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (mult-cases
                                                           1)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 7)
                                                  (("2"
                                                    (ground)
                                                    (("1"
                                                      (expand "min")
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (use
                                                             "min_miter_sine_le_wrapped_sine")
                                                            (("1"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "min_miter_sine_le_each_sine")
                                                            (("2"
                                                              (inst
                                                               -
                                                               "S"
                                                               "S`length - 2")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "min_seg_sep_bounds_seg_length")
                                                      (("2"
                                                        (inst-cp
                                                         -
                                                         "S"
                                                         "S`length-2")
                                                        (("2"
                                                          (inst-cp
                                                           -
                                                           "S"
                                                           "S`length-3")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "S"
                                                             "lbi")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "length")
                                                                (("2"
                                                                  (rewrite
                                                                   "norm_sym"
                                                                   -2)
                                                                  (("2"
                                                                    (expand
                                                                     "min")
                                                                    (("2"
                                                                      (apply
                                                                       (repeat
                                                                        (lift-if)))
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (four_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (<= const-decl "bool" reals nil)
    (four_point_offset_dist? const-decl "bool"
     segment_endpoint_sequences nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (three_pt_miniseq_in_endpt_seq_wrap formula-decl nil
     miter_point_sequences nil)
    (three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (min_seg_sep_bounds_seg_length formula-decl nil
     segment_endpoint_sequences nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (norm_sym formula-decl nil vectors_2D vectors)
    (length const-decl "posreal" segments_2d nil)
    (min_miter_sine_le_wrapped_sine formula-decl nil
     miter_point_sequences nil)
    (min_miter_sine_le_each_sine formula-decl nil miter_point_sequences
     nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (lbi skolem-const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" miter_point_sequences nil)
    (S skolem-const-decl "edge_parallel_endpoint_seq"
     miter_point_sequences nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (min_miter_sine const-decl "posreal" miter_point_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (min_segment_sep const-decl "posreal" segment_endpoint_sequences
     nil)
    (three_pt_miniseq_in_endpt_seq formula-decl nil
     miter_point_sequences nil))
   shostak))
 (miter_point_neq_vtx_TCC1 0
  (miter_point_neq_vtx_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil))
   shostak
   (miter_point_neq_vtx subtype "miter_point_sequences.u"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.v}"))
  (miter_point_neq_vtx_TCC1-1 nil 3874128243 ("" (subtype-tcc) nil nil)
   nil nil
   (miter_point_neq_vtx subtype "miter_point_sequences.u"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.v}")))
 (miter_point_neq_vtx_TCC2 0
  (miter_point_neq_vtx_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil))
   shostak
   (miter_point_neq_vtx subtype "miter_point_sequences.w"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.v, (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.u, miter_point_sequences.v), (vectors_2D.-)(p, miter_point_sequences.v))))}"))
  (miter_point_neq_vtx_TCC2-1 nil 3874128243 ("" (subtype-tcc) nil nil)
   nil nil
   (miter_point_neq_vtx subtype "miter_point_sequences.w"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.v, (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.u, miter_point_sequences.v), (vectors_2D.-)(p, miter_point_sequences.v))))}")))
 (miter_point_neq_vtx 0
  (miter_point_neq_vtx-1 nil 3874129021
   ("" (skeep + t)
    (("" (expand "three_point_miniseq?")
      (("" (flatten)
        (("" (expand "miter_point" :assert? none)
          (("" (assert)
            (("" (lemma "scaled_perp_left_neq_scaled_vector")
              (("" (inst - "-d" _ "^(w - v)")
                ((""
                  (inst - "d *
          (half_angle_vcos(^(u - v), ^(w - v)) /
            half_angle_vsin(^(u - v), ^(w - v)))")
                  (("" (assert)
                    ((""
                      (equate "perp_left(^(w - v))"
                       "^(perp_left(w - v))")
                      (("1" (ground)
                        (("1" (expand "^" -1)
                          (("1" (cross-mult -1) nil nil)) nil)
                         ("2"
                          (name-replace "a"
                           "d * (half_angle_vcos(^(u - v), ^(w - v)) /
                half_angle_vsin(^(u - v), ^(w - v)))
              * ^(w - v)")
                          (("2"
                            (name-replace "b" "^(perp_left(w - v))")
                            (("2" (hide-all-but (-3 1))
                              (("2" (grind-with-ext) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (grind-with-ext) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (scaled_perp_left_neq_scaled_vector formula-decl nil
     vectors_cross_2d nil)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (half_angle_vcos const-decl "{x: real | -1 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (* const-decl "Vector" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (scal_1 formula-decl nil vectors_2D vectors)
    (scal_zero formula-decl nil vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (scal_div_mult_left formula-decl nil vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors))
   shostak))
 (miter_point_neq_vertex_TCC1 0
  (miter_point_neq_vertex_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (miter_point_neq_vertex subtype "miter_point_sequences.i"
    "below[S`length]"))
  (miter_point_neq_vertex_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_point_neq_vertex subtype "miter_point_sequences.i"
    "below[S`length]")))
 (miter_point_neq_vertex_TCC2 0
  (miter_point_neq_vertex_TCC2-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "adj_edge_parallel_endpts_neq")
      (("" (inst - "S" "i - 1") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (miter_point_neq_vertex subtype
    "miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.i, 1))"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq(miter_point_sequences.i)}"))
  (miter_point_neq_vertex_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_point_neq_vertex subtype
    "miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.i, 1))"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq(miter_point_sequences.i)}")))
 (miter_point_neq_vertex_TCC3 0
  (miter_point_neq_vertex_TCC3-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (miter_point_neq_vertex subtype
    "(number_fields.+)(miter_point_sequences.i, 1)" "below[S`length]"))
  (miter_point_neq_vertex_TCC3-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_point_neq_vertex subtype
    "(number_fields.+)(miter_point_sequences.i, 1)"
    "below[S`length]")))
 (miter_point_neq_vertex_TCC4 0
  (miter_point_neq_vertex_TCC4-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "edge_para_endpts_valid_miter_point_args")
      (("" (inst - "S" "i") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((edge_para_endpts_valid_miter_point_args formula-decl nil
     segment_endpoint_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak
   (miter_point_neq_vertex subtype
    "miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.i, 1))"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.S`seq(miter_point_sequences.i), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.i, 1)), miter_point_sequences.S`seq(miter_point_sequences.i)), (vectors_2D.-)(p, miter_point_sequences.S`seq(miter_point_sequences.i)))))}"))
  (miter_point_neq_vertex_TCC4-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_point_neq_vertex subtype
    "miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.i, 1))"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.S`seq(miter_point_sequences.i), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.i, 1)), miter_point_sequences.S`seq(miter_point_sequences.i)), (vectors_2D.-)(p, miter_point_sequences.S`seq(miter_point_sequences.i)))))}")))
 (miter_point_neq_vertex 0
  (miter_point_neq_vertex-1 nil 3874129021
   ("" (skeep)
    (("" (use "miter_point_neq_vtx")
      (("1" (ground) nil nil)
       ("2" (expand "three_point_miniseq?")
        (("2" (use "edge_para_endpts_valid_miter_point_args")
          (("2" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   ((miter_point_neq_vtx formula-decl nil miter_point_sequences nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (S skolem-const-decl "edge_parallel_endpoint_seq"
     miter_point_sequences nil)
    (i skolem-const-decl "{i: posnat | i < S`length - 1}"
       miter_point_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (edge_para_endpts_valid_miter_point_args formula-decl nil
     segment_endpoint_sequences nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (successive_miter_pair_neq_TCC1 0
  (successive_miter_pair_neq_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (four_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (successive_miter_pair_neq subtype "miter_point_sequences.u"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.v}"))
  (successive_miter_pair_neq_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (successive_miter_pair_neq subtype "miter_point_sequences.u"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.v}")))
 (successive_miter_pair_neq_TCC2 0
  (successive_miter_pair_neq_TCC2-2 nil 3874129021
   ("" (skeep + t)
    (("" (expand "four_point_miniseq?") (("" (ground) nil nil)) nil))
    nil)
   ((four_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil))
   shostak
   (successive_miter_pair_neq subtype "miter_point_sequences.w"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.v, (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.u, miter_point_sequences.v), (vectors_2D.-)(p, miter_point_sequences.v))))}"))
  (successive_miter_pair_neq_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (successive_miter_pair_neq subtype "miter_point_sequences.w"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.v, (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.u, miter_point_sequences.v), (vectors_2D.-)(p, miter_point_sequences.v))))}")))
 (successive_miter_pair_neq_TCC3 0
  (successive_miter_pair_neq_TCC3-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (four_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (successive_miter_pair_neq subtype "miter_point_sequences.v"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.w}"))
  (successive_miter_pair_neq_TCC3-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (successive_miter_pair_neq subtype "miter_point_sequences.v"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.w}")))
 (successive_miter_pair_neq_TCC4 0
  (successive_miter_pair_neq_TCC4-2 nil 3874129021
   ("" (skeep + t)
    (("" (expand "four_point_miniseq?") (("" (ground) nil nil)) nil))
    nil)
   ((four_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil))
   shostak
   (successive_miter_pair_neq subtype "miter_point_sequences.x"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.w, (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.v, miter_point_sequences.w), (vectors_2D.-)(p, miter_point_sequences.w))))}"))
  (successive_miter_pair_neq_TCC4-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (successive_miter_pair_neq subtype "miter_point_sequences.x"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.w, (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.v, miter_point_sequences.w), (vectors_2D.-)(p, miter_point_sequences.w))))}")))
 (successive_miter_pair_neq 0
  (successive_miter_pair_neq-1 nil 3874129021
   ("" (skeep + t)
    (("" (expand "four_point_miniseq?")
      (("" (expand "four_point_offset_dist?")
        (("" (flatten)
          ((""
            (name-replace*
             ("s1" "half_angle_vsin(^(u - v), ^(w - v))" "s2"
              "half_angle_vsin(^(v - w), ^(x - w))"))
            (("" (case "s1 > 0 & s2 > 0")
              (("1" (flatten)
                (("1" (rewrite* "miter_point_defns_equiv")
                  (("1" (expand "miter_point_hyp" :assert? none)
                    (("1" (assert)
                      (("1" (replace -3)
                        (("1" (replace -4)
                          (("1" (lemma "short_dist_offset_points_neq")
                            (("1"
                              (invoke (inst - _ _ "%1" "%2" _ _ _ _)
                               (! -9 *))
                              (("1"
                                (inst - "v" "w" _ _ _ _)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -8)
                                        (("1"
                                          (cross-mult -7)
                                          (("1"
                                            (div-by -7 "min(s1,s2)")
                                            (("1"
                                              (case
                                               "d / s1 + d / s2 < 3 * d / min(s1, s2)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide -7 2)
                                                (("2"
                                                  (real-props)
                                                  (("2"
                                                    (cancel-by 1 "d")
                                                    (("2"
                                                      (expand "min")
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (splash 1 :reverse? t)
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide-all-but
                                                 (-1 -2 1))
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (cross-mult 1) nil nil))
                                    nil)
                                   ("2" (cross-mult 1) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "nonparallel_half_angle_sine_pos")
                (("2" (inst-cp - "v" "u" "w")
                  (("2" (inst - "w" "v" "x") (("2" (ground) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((four_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (> const-decl "bool" reals nil)
    (miter_point_defns_equiv formula-decl nil vectors_2d_trig nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (segment_bisect_vector const-decl "Nz_vector" vectors_2d_trig nil)
    (u skolem-const-decl "point_2d" miter_point_sequences nil)
    (v skolem-const-decl "point_2d" miter_point_sequences nil)
    (w skolem-const-decl "point_2d" miter_point_sequences nil)
    (x skolem-const-decl "(four_point_miniseq?(u, v, w))"
     miter_point_sequences nil)
    (d skolem-const-decl "(four_point_offset_dist?(u, v, w, x))"
       miter_point_sequences nil)
    (s1 skolem-const-decl "{x: real | 0 <= x AND x <= 1}"
     miter_point_sequences nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (pos_times_ge formula-decl nil real_props nil)
    (neg_times_lt formula-decl nil real_props nil)
    (neg_times_le formula-decl nil real_props nil)
    (add_div formula-decl nil real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (s2 skolem-const-decl "{x: real | 0 <= x AND x <= 1}"
     miter_point_sequences nil)
    (short_dist_offset_points_neq formula-decl nil vectors_cross_2d
     nil)
    (miter_point_hyp const-decl "point_2d" vectors_2d_trig nil)
    (nonparallel_half_angle_sine_pos judgement-tcc nil
     miter_point_sequences nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (<= const-decl "bool" reals nil)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (four_point_offset_dist? const-decl "bool"
     segment_endpoint_sequences nil))
   shostak))
 (successive_miter_points_neq_TCC1 0
  (successive_miter_points_neq_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "adj_edge_parallel_endpts_neq")
      (("" (inst - "S" "i - 1") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (successive_miter_points_neq subtype
    "miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.i, 1))"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq(miter_point_sequences.i)}"))
  (successive_miter_points_neq_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (successive_miter_points_neq subtype
    "miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.i, 1))"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq(miter_point_sequences.i)}")))
 (successive_miter_points_neq_TCC2 0
  (successive_miter_points_neq_TCC2-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "edge_para_endpts_valid_miter_point_args")
      (("" (inst - "S" "i") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((edge_para_endpts_valid_miter_point_args formula-decl nil
     segment_endpoint_sequences nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (successive_miter_points_neq subtype
    "miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.i, 1))"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.S`seq(miter_point_sequences.i), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.i, 1)), miter_point_sequences.S`seq(miter_point_sequences.i)), (vectors_2D.-)(p, miter_point_sequences.S`seq(miter_point_sequences.i)))))}"))
  (successive_miter_points_neq_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (successive_miter_points_neq subtype
    "miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.i, 1))"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.S`seq(miter_point_sequences.i), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.i, 1)), miter_point_sequences.S`seq(miter_point_sequences.i)), (vectors_2D.-)(p, miter_point_sequences.S`seq(miter_point_sequences.i)))))}")))
 (successive_miter_points_neq_TCC3 0
  (successive_miter_points_neq_TCC3-2 nil 3874129021
   ("" (skeep)
    (("" (use "adj_edge_parallel_endpts_neq") (("" (ground) nil nil))
      nil))
    nil)
   ((adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (successive_miter_points_neq subtype
    "miter_point_sequences.S`seq(miter_point_sequences.i)"
    "{p: vectors_cross_2d.point_2d | (booleans.NOT)(p = miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.i)))}"))
  (successive_miter_points_neq_TCC3-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (successive_miter_points_neq subtype
    "miter_point_sequences.S`seq(miter_point_sequences.i)"
    "{p: vectors_cross_2d.point_2d | (booleans.NOT)(p = miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.i)))}")))
 (successive_miter_points_neq_TCC4 0
  (successive_miter_points_neq_TCC4-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "edge_para_endpts_valid_miter_point_args")
      (("" (inst - "S" "i + 1") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((edge_para_endpts_valid_miter_point_args formula-decl nil
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (successive_miter_points_neq subtype
    "miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.i, 2))"
    "{p: vectors_cross_2d.point_2d | booleans.AND((booleans.NOT)(p = miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.i))), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.S`seq(miter_point_sequences.i), miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.i))), (vectors_2D.-)(p, miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.i))))))}"))
  (successive_miter_points_neq_TCC4-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (successive_miter_points_neq subtype
    "miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.i, 2))"
    "{p: vectors_cross_2d.point_2d | booleans.AND((booleans.NOT)(p = miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.i))), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.S`seq(miter_point_sequences.i), miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.i))), (vectors_2D.-)(p, miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.i))))))}")))
 (successive_miter_points_neq 0
  (successive_miter_points_neq-1 nil 3874129021
   ("" (skeep)
    (("" (rewrite* "miter_point_defns_equiv")
      (("" (expand "miter_point_hyp" :assert? none)
        (("" (skoletin*)
          (("" (hide -2 -4)
            (("" (lemma "short_dist_offset_points_neq")
              (("" (invoke (inst - _ _ "%1" "%2" _ _ _ _) (! -2 *))
                (("" (inst - "S`seq(i)" "S`seq(i+1)" _ _ _ _)
                  (("" (inst?)
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (typepred "d")
                          (("1" (expand "max_miter_offset")
                            (("1" (cross-mult -3)
                              (("1"
                                (lemma "min_seg_sep_bounds_seg_length")
                                (("1"
                                  (inst - "S" "i")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "length")
                                      (("1"
                                        (name-replace
                                         "L"
                                         "norm(S`seq(1 + i) - S`seq(i))")
                                        (("1"
                                          (lemma
                                           "min_miter_sine_le_each_sine")
                                          (("1"
                                            (inst-cp - "S" "i")
                                            (("1"
                                              (inst - "S" "i+1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -8 :dir rl)
                                                  (("1"
                                                    (replace
                                                     -9
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (case
                                                       "d / s_1 + d / s <= 2*d / min_miter_sine(S)")
                                                      (("1"
                                                        (div-by
                                                         -7
                                                         "min_miter_sine(S)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (cancel-by
                                                         1
                                                         "d")
                                                        (("2"
                                                          (cross-mult
                                                           2)
                                                          (("2"
                                                            (case
                                                             "min_miter_sine(S) / s_1 <= 1 & min_miter_sine(S) * (1 / s) <= 1")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (real-props)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (cross-mult 1)
                        (("2" (ground)
                          (("2"
                            (lemma "half_angle_sine_dir_nonparallel")
                            (("2"
                              (inst - "S`seq(i+1)" "S`seq(i)"
                               "S`seq(i+2)")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "half_angle_vsin")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma
                                 "edge_para_endpts_valid_miter_point_args")
                                (("2"
                                  (inst - "S" "i+1")
                                  (("2" (ground) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (use "adj_edge_parallel_endpts_neq")
                                (("3" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (cross-mult 1)
                      (("2" (ground)
                        (("2" (lemma "half_angle_sine_dir_nonparallel")
                          (("2"
                            (inst - "S`seq(i)" "S`seq(i-1)"
                             "S`seq(i+1)")
                            (("1" (assert)
                              (("1"
                                (expand "half_angle_vsin")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2"
                              (lemma
                               "edge_para_endpts_valid_miter_point_args")
                              (("2"
                                (inst - "S" "i")
                                (("2" (ground) nil nil))
                                nil))
                              nil)
                             ("3"
                              (lemma "adj_edge_parallel_endpts_neq")
                              (("3"
                                (inst - "S" "i-1")
                                (("3" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "Vector" vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (miter_point_defns_equiv formula-decl nil vectors_2d_trig nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (segment_bisect_vector const-decl "Nz_vector" vectors_2d_trig nil)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (short_dist_offset_points_neq formula-decl nil vectors_cross_2d
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (s_1 skolem-const-decl "{x: real | 0 <= x AND x <= 1}"
     miter_point_sequences nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (min_miter_sine const-decl "posreal" miter_point_sequences nil)
    (min_segment_sep const-decl "posreal" segment_endpoint_sequences
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length const-decl "posreal" segments_2d nil)
    (min_miter_sine_le_each_sine formula-decl nil miter_point_sequences
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (add_div formula-decl nil real_props nil)
    (neg_times_le formula-decl nil real_props nil)
    (neg_times_lt formula-decl nil real_props nil)
    (pos_times_ge formula-decl nil real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min_seg_sep_bounds_seg_length formula-decl nil
     segment_endpoint_sequences nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (i skolem-const-decl "{i: posnat | i < S`length - 2}"
       miter_point_sequences nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (edge_para_endpts_valid_miter_point_args formula-decl nil
     segment_endpoint_sequences nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (half_angle_sine_dir_nonparallel formula-decl nil vectors_2d_trig
     nil)
    (div_mult_pos_neg_ge1 formula-decl nil extra_real_props nil)
    (s skolem-const-decl "{x: real | 0 <= x AND x <= 1}"
     miter_point_sequences nil)
    (d skolem-const-decl "miter_seq_offset_dist(S)"
       miter_point_sequences nil)
    (S skolem-const-decl "edge_parallel_endpoint_seq"
     miter_point_sequences nil)
    (miter_point_hyp const-decl "point_2d" vectors_2d_trig nil))
   shostak))
 (wrapped_miter_points_neq_TCC1 0
  (wrapped_miter_points_neq_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "adj_edge_parallel_endpts_neq")
      (("" (inst - "S" "S`length - 2") (("" (ground) nil nil)) nil))
      nil))
    nil)
   ((adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (wrapped_miter_points_neq subtype
    "miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2))"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq(miter_point_sequences.lbi)}"))
  (wrapped_miter_points_neq_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (wrapped_miter_points_neq subtype
    "miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2))"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq(miter_point_sequences.lbi)}")))
 (wrapped_miter_points_neq_TCC2 0
  (wrapped_miter_points_neq_TCC2-2 nil 3874129021
   ("" (skeep)
    (("" (ground)
      (("1" (lemma "adj_edge_parallel_endpts_neq")
        (("1" (inst - "S" "lbi") (("1" (ground) nil nil)) nil)) nil)
       ("2" (use "wrapped_adj_segs_not_dir_parallel")
        (("2" (ground)
          (("2" (ground)
            (("2" (rewrite "dir_parallel_eqv_normalized_diffs_eq")
              (("1" (lemma "adj_edge_parallel_endpts_neq")
                (("1" (inst - "S" "S`length - 2")
                  (("1" (ground) nil nil)) nil))
                nil)
               ("2" (lemma "adj_edge_parallel_endpts_neq")
                (("2" (inst - "S" "lbi") (("2" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dir_parallel_eqv_normalized_diffs_eq formula-decl nil
     vectors_cross_2d nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (wrapped_adj_segs_not_dir_parallel formula-decl nil
     segment_endpoint_sequences nil))
   shostak
   (wrapped_miter_points_neq subtype
    "miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.lbi))"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.S`seq(miter_point_sequences.lbi), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2)), miter_point_sequences.S`seq(miter_point_sequences.lbi)), (vectors_2D.-)(p, miter_point_sequences.S`seq(miter_point_sequences.lbi)))))}"))
  (wrapped_miter_points_neq_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (wrapped_miter_points_neq subtype
    "miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.lbi))"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.S`seq(miter_point_sequences.lbi), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2)), miter_point_sequences.S`seq(miter_point_sequences.lbi)), (vectors_2D.-)(p, miter_point_sequences.S`seq(miter_point_sequences.lbi)))))}")))
 (wrapped_miter_points_neq_TCC3 0
  (wrapped_miter_points_neq_TCC3-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "adj_edge_parallel_endpts_neq")
      (("" (inst - "S" "lbi") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (wrapped_miter_points_neq subtype
    "miter_point_sequences.S`seq(miter_point_sequences.lbi)"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.lbi))}"))
  (wrapped_miter_points_neq_TCC3-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (wrapped_miter_points_neq subtype
    "miter_point_sequences.S`seq(miter_point_sequences.lbi)"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.lbi))}")))
 (wrapped_miter_points_neq_TCC4 0
  (wrapped_miter_points_neq_TCC4-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "edge_para_endpts_valid_miter_point_args")
      (("" (inst - "S" "1 + lbi") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((edge_para_endpts_valid_miter_point_args formula-decl nil
     segment_endpoint_sequences nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (wrapped_miter_points_neq subtype
    "miter_point_sequences.S`seq((number_fields.+)(2, miter_point_sequences.lbi))"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.lbi)), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.S`seq(miter_point_sequences.lbi), miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.lbi))), (vectors_2D.-)(p, miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.lbi))))))}"))
  (wrapped_miter_points_neq_TCC4-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (wrapped_miter_points_neq subtype
    "miter_point_sequences.S`seq((number_fields.+)(2, miter_point_sequences.lbi))"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.lbi)), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.S`seq(miter_point_sequences.lbi), miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.lbi))), (vectors_2D.-)(p, miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.lbi))))))}")))
 (wrapped_miter_points_neq_TCC5 0
  (wrapped_miter_points_neq_TCC5-2 nil 3874129021
   ("" (skeep)
    (("" (hide-all-but -3)
      (("" (use "adj_edge_parallel_endpts_neq") (("" (ground) nil nil))
        nil))
      nil))
    nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil))
   shostak
   (wrapped_miter_points_neq subtype
    "miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 3))"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2))}"))
  (wrapped_miter_points_neq_TCC5-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (wrapped_miter_points_neq subtype
    "miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 3))"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2))}")))
 (wrapped_miter_points_neq_TCC6 0
  (wrapped_miter_points_neq_TCC6-2 nil 3874129021
   ("" (skeep)
    (("" (ground)
      (("1" (lemma "adj_edge_parallel_endpts_neq")
        (("1" (inst - "S" "S`length - 2") (("1" (ground) nil nil))
          nil))
        nil)
       ("2" (lemma "adj_segs_not_dir_parallel")
        (("2" (inst - "S" "S`length - 3")
          (("2" (ground)
            (("2" (rewrite "dir_parallel_eqv_normalized_diffs_eq")
              (("1" (use "adj_edge_parallel_endpts_neq")
                (("1" (ground) nil nil)) nil)
               ("2" (lemma "adj_edge_parallel_endpts_neq")
                (("2" (inst - "S" "S`length - 2")
                  (("2" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (dir_parallel_eqv_normalized_diffs_eq formula-decl nil
     vectors_cross_2d nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (adj_segs_not_dir_parallel formula-decl nil
     segment_endpoint_sequences nil))
   shostak
   (wrapped_miter_points_neq subtype
    "miter_point_sequences.S`seq(miter_point_sequences.lbi)"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2)), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 3)), miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2))), (vectors_2D.-)(p, miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2))))))}"))
  (wrapped_miter_points_neq_TCC6-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (wrapped_miter_points_neq subtype
    "miter_point_sequences.S`seq(miter_point_sequences.lbi)"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2)), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 3)), miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2))), (vectors_2D.-)(p, miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2))))))}")))
 (wrapped_miter_points_neq 0
  (wrapped_miter_points_neq-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin)
      (("" (flatten)
        (("" (rewrite* "miter_point_defns_equiv")
          (("1" (expand "miter_point_hyp" :assert? none)
            (("1" (split 1)
              (("1" (skoletin*)
                (("1" (flatten)
                  (("1" (hide -2 -4)
                    (("1" (lemma "short_dist_offset_points_neq")
                      (("1"
                        (invoke (inst - _ _ "%1" "%2" _ _ _ _)
                         (! -2 *))
                        (("1"
                          (inst - "S`seq(lbi)" "S`seq(1 + lbi)" _ _ _
                           _)
                          (("1" (inst?)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (typepred "d")
                                  (("1"
                                    (expand "max_miter_offset")
                                    (("1"
                                      (cross-mult -3)
                                      (("1"
                                        (lemma
                                         "min_seg_sep_bounds_seg_length")
                                        (("1"
                                          (inst - "S" "lbi")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "length")
                                              (("1"
                                                (name-replace
                                                 "L"
                                                 "norm(S`seq(1 + lbi) - S`seq(lbi))")
                                                (("1"
                                                  (lemma
                                                   "min_miter_sine_le_wrapped_sine")
                                                  (("1"
                                                    (inst - "S")
                                                    (("1"
                                                      (lemma
                                                       "min_miter_sine_le_each_sine")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "S"
                                                         "1 + lbi")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -8
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (replace
                                                               -11
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (replace
                                                                 -9
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (div-by
                                                                   -6
                                                                   "min_miter_sine(S)")
                                                                  (("1"
                                                                    (case
                                                                     "d / s_1 + d / s < 6 * d / min_miter_sine(S)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (real-props)
                                                                      (("2"
                                                                        (cancel-by
                                                                         1
                                                                         "d")
                                                                        (("2"
                                                                          (mult-by
                                                                           -2
                                                                           "s")
                                                                          (("2"
                                                                            (mult-by
                                                                             -3
                                                                             "s_1")
                                                                            (("2"
                                                                              (add-formulas
                                                                               -1
                                                                               -2)
                                                                              (("2"
                                                                                (hide-all-but
                                                                                 (-1
                                                                                  1))
                                                                                (("2"
                                                                                  (case
                                                                                   "(s_1) * s + (s) * s_1 < 6 * s_1 * s")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (equate
                                                                                       "(s) * s_1"
                                                                                       "s_1 * s"
                                                                                       (assert))
                                                                                      (("2"
                                                                                        (move-terms
                                                                                         1
                                                                                         l)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (real-props)
                                                                                            (("2"
                                                                                              (div-by
                                                                                               1
                                                                                               "4")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (mult-cases
                                                                                                   1)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (cross-mult 1)
                                (("2"
                                  (ground)
                                  (("2"
                                    (lemma
                                     "half_angle_sine_dir_nonparallel")
                                    (("2"
                                      (inst
                                       -
                                       "S`seq(1 + lbi)"
                                       "S`seq(lbi)"
                                       "S`seq(2 + lbi)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "half_angle_vsin")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "edge_para_endpts_valid_miter_point_args")
                                        (("2"
                                          (inst - "S" "1 + lbi")
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (use
                                         "adj_edge_parallel_endpts_neq")
                                        (("3" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (cross-mult 1)
                              (("2"
                                (ground)
                                (("2"
                                  (lemma
                                   "half_angle_sine_dir_nonparallel")
                                  (("2"
                                    (inst
                                     -
                                     "S`seq(lbi)"
                                     "S`seq(S`length - 2)"
                                     "S`seq(1 + lbi)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "half_angle_vsin")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (ground)
                                      (("1"
                                        (lemma
                                         "adj_edge_parallel_endpts_neq")
                                        (("1"
                                          (inst - "S" "lbi")
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "dir_parallel?")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (use
                                             "wrapped_adj_segs_not_dir_parallel")
                                            (("2"
                                              (ground)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (replace
                                                     -6
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (use
                                                         "normalize_scal")
                                                        (("2"
                                                          (expand
                                                           "sign")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (lemma
                                       "adj_edge_parallel_endpts_neq")
                                      (("3"
                                        (inst - "S" "S`length - 2")
                                        (("3" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skoletin*)
                (("2" (flatten)
                  (("2" (hide -2 -4)
                    (("2" (lemma "short_dist_offset_points_neq")
                      (("2"
                        (invoke (inst - _ _ "%1" "%2" _ _ _ _)
                         (! -2 *))
                        (("2"
                          (inst - "S`seq(lbi)" "S`seq(S`length - 2)" _
                           _ _ _)
                          (("2" (inst?)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (typepred "d")
                                  (("1"
                                    (expand "max_miter_offset")
                                    (("1"
                                      (cross-mult -3)
                                      (("1"
                                        (lemma
                                         "min_seg_sep_bounds_seg_length")
                                        (("1"
                                          (inst - "S" "S`length - 2")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "length")
                                              (("1"
                                                (replace -8 :dir rl)
                                                (("1"
                                                  (rewrite "norm_sym")
                                                  (("1"
                                                    (name-replace
                                                     "L"
                                                     "norm(S`seq(S`length - 2) - S`seq(lbi))")
                                                    (("1"
                                                      (lemma
                                                       "min_miter_sine_le_wrapped_sine")
                                                      (("1"
                                                        (inst - "S")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "min_miter_sine_le_each_sine")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "S"
                                                               "S`length - 2")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -11
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (replace
                                                                     -10
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (replace
                                                                       -8
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (replace
                                                                         -9
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (div-by
                                                                           -6
                                                                           "min_miter_sine(S)")
                                                                          (("1"
                                                                            (case
                                                                             "d / s_1 + d / s < 6 * d / min_miter_sine(S)")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (real-props)
                                                                              (("2"
                                                                                (cancel-by
                                                                                 1
                                                                                 "d")
                                                                                (("2"
                                                                                  (mult-by
                                                                                   -2
                                                                                   "s")
                                                                                  (("2"
                                                                                    (mult-by
                                                                                     -3
                                                                                     "s_1")
                                                                                    (("2"
                                                                                      (add-formulas
                                                                                       -1
                                                                                       -2)
                                                                                      (("2"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          1))
                                                                                        (("2"
                                                                                          (case
                                                                                           "(s_1) * s + (s) * s_1 < 6 * s_1 * s")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (equate
                                                                                               "(s) * s_1"
                                                                                               "s_1 * s"
                                                                                               (assert))
                                                                                              (("2"
                                                                                                (move-terms
                                                                                                 1
                                                                                                 l)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (div-by
                                                                                                     1
                                                                                                     "4")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (mult-cases
                                                                                                         1)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (cross-mult 1)
                                (("2"
                                  (ground)
                                  (("2"
                                    (lemma
                                     "half_angle_sine_dir_nonparallel")
                                    (("2"
                                      (inst
                                       -
                                       "S`seq(S`length - 2)"
                                       "S`seq(S`length - 3)"
                                       "S`seq(lbi)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "half_angle_vsin")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "edge_para_endpts_valid_miter_point_args")
                                        (("2"
                                          (inst - "S" "S`length - 2")
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (use
                                         "adj_edge_parallel_endpts_neq")
                                        (("3" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (cross-mult 1)
                              (("2"
                                (ground)
                                (("2"
                                  (lemma
                                   "half_angle_sine_dir_nonparallel")
                                  (("2"
                                    (inst
                                     -
                                     "S`seq(lbi)"
                                     "S`seq(S`length - 2)"
                                     "S`seq(1 + lbi)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "half_angle_vsin")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (ground)
                                      (("1"
                                        (lemma
                                         "adj_edge_parallel_endpts_neq")
                                        (("1"
                                          (inst - "S" "lbi")
                                          (("1" (ground) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "dir_parallel?")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (use
                                             "wrapped_adj_segs_not_dir_parallel")
                                            (("2"
                                              (ground)
                                              (("2"
                                                (replace -7 :dir rl)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (use
                                                         "normalize_scal")
                                                        (("2"
                                                          (expand
                                                           "sign")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (lemma
                                       "adj_edge_parallel_endpts_neq")
                                      (("3"
                                        (inst - "S" "S`length - 2")
                                        (("3" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (use "wrapped_adj_segs_not_dir_parallel")
              (("2" (ground)
                (("1" (lemma "adj_edge_parallel_endpts_neq")
                  (("1" (inst - "S" "S`length - 2")
                    (("1" (ground) nil nil)) nil))
                  nil)
                 ("2" (expand "dir_parallel?")
                  (("2" (skeep)
                    (("2" (replace -1)
                      (("2" (replace -3 :dir rl)
                        (("2" (hide-all-but 2)
                          (("2" (use "normalize_scal")
                            (("2" (expand "sign")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (lemma "adj_edge_parallel_endpts_neq")
            (("3" (inst - "S" "S`length - 3") (("3" (ground) nil nil))
              nil))
            nil)
           ("4" (lemma "edge_para_endpts_valid_miter_point_args")
            (("4" (inst - "S" "1 + lbi") (("4" (ground) nil nil)) nil))
            nil)
           ("5" (flatten)
            (("5" (lemma "edge_parallel_endpts_mostly_uniq")
              (("5" (inst - "S" "lbi" "1 + lbi")
                (("5" (assert) nil nil)) nil))
              nil))
            nil)
           ("6" (hide 2)
            (("6" (ground)
              (("1" (lemma "edge_parallel_endpts_mostly_uniq")
                (("1" (inst - "S" "lbi" "1 + lbi")
                  (("1" (ground) nil nil)) nil))
                nil)
               ("2" (expand "dir_parallel?")
                (("2" (skeep)
                  (("2" (use "wrapped_adj_segs_not_dir_parallel")
                    (("2" (ground)
                      (("2" (flatten)
                        (("2" (replace -3 :dir rl)
                          (("2" (replace -1)
                            (("2" (hide-all-but 1)
                              (("2"
                                (use "normalize_scal")
                                (("2"
                                  (expand "sign")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("7" (lemma "adj_edge_parallel_endpts_neq")
            (("7" (inst - "S" "S`length - 2") (("7" (ground) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (<= const-decl "bool" reals nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (miter_point_defns_equiv formula-decl nil vectors_2d_trig nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (short_dist_offset_points_neq formula-decl nil vectors_cross_2d
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (sign const-decl "Sign" sign reals)
    (scal_1 formula-decl nil vectors_2D vectors)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (normalize_scal formula-decl nil vectors_2D vectors)
    (wrapped_adj_segs_not_dir_parallel formula-decl nil
     segment_endpoint_sequences nil)
    (s_1 skolem-const-decl "{x: real | 0 <= x AND x <= 1}"
     miter_point_sequences nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (min_miter_sine const-decl "posreal" miter_point_sequences nil)
    (min_segment_sep const-decl "posreal" segment_endpoint_sequences
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length const-decl "posreal" segments_2d nil)
    (min_miter_sine_le_wrapped_sine formula-decl nil
     miter_point_sequences nil)
    (min_miter_sine_le_each_sine formula-decl nil miter_point_sequences
     nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (pos_times_ge formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_times3 formula-decl nil real_props nil)
    (neg_times_lt formula-decl nil real_props nil)
    (neg_times_le formula-decl nil real_props nil)
    (add_div formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (pos_times_lt formula-decl nil real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min_seg_sep_bounds_seg_length formula-decl nil
     segment_endpoint_sequences nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (lbi skolem-const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" miter_point_sequences nil)
    (edge_para_endpts_valid_miter_point_args formula-decl nil
     segment_endpoint_sequences nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (half_angle_sine_dir_nonparallel formula-decl nil vectors_2d_trig
     nil)
    (div_mult_pos_neg_ge1 formula-decl nil extra_real_props nil)
    (s skolem-const-decl "{x: real | 0 <= x AND x <= 1}"
     miter_point_sequences nil)
    (d skolem-const-decl "miter_seq_offset_dist(S)"
       miter_point_sequences nil)
    (S skolem-const-decl "edge_parallel_endpoint_seq"
     miter_point_sequences nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (segment_bisect_vector const-decl "Nz_vector" vectors_2d_trig nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (s_1 skolem-const-decl "{x: real | 0 <= x AND x <= 1}"
     miter_point_sequences nil)
    (norm_sym formula-decl nil vectors_2D vectors)
    (s skolem-const-decl "{x: real | 0 <= x AND x <= 1}"
     miter_point_sequences nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (miter_point_hyp const-decl "point_2d" vectors_2d_trig nil)
    (edge_parallel_endpts_mostly_uniq formula-decl nil
     segment_endpoint_sequences nil))
   shostak))
 (miter_point_neq_right_offset_point_TCC1 0
  (miter_point_neq_right_offset_point_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (/= const-decl "boolean" notequal nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (min_miter_sine const-decl "posreal" miter_point_sequences nil)
    (- const-decl "Vector" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (min_seg_separation const-decl "posreal" segment_endpoint_sequences
     nil)
    (min_segment_sep const-decl "posreal" segment_endpoint_sequences
     nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (miter_point_neq_right_offset_point subtype
    "miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.i, 1))"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq(miter_point_sequences.i)}"))
  (miter_point_neq_right_offset_point_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_point_neq_right_offset_point subtype
    "miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.i, 1))"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq(miter_point_sequences.i)}")))
 (miter_point_neq_right_offset_point 0
  (miter_point_neq_right_offset_point-1 nil 3874129021
   ("" (skeep)
    (("" (expand "rightward_segment_offset")
      (("" (expand "segment_midpoint")
        (("" (rewrite "miter_point_defns_equiv")
          (("" (expand "miter_point_hyp" :assert? none)
            (("" (skoletin*)
              (("" (hide -2)
                ((""
                  (name-replace "perp"
                   "^(perp_left(S`seq(1 + i) - S`seq(i)))")
                  (("" (typepred "d")
                    (("" (distrib -4)
                      (("" (move-terms -4 r 1)
                        (("" (factor -4 l (1 3))
                          (("" (assert)
                            (("" (case "s > 0")
                              (("1"
                                (lemma "short_dist_offset_points_neq")
                                (("1"
                                  (inst
                                   -
                                   "1/2*S`seq(i)"
                                   "1/2*S`seq(1+i)"
                                   _
                                   _
                                   "^(bv_1)"
                                   "perp"
                                   "d/s"
                                   "d")
                                  (("1"
                                    (invoke
                                     (inst - "%1" "%2")
                                     (! -6 *))
                                    (("1"
                                      (assert)
                                      (("1"
                                        (factor! (! 1 r 1))
                                        (("1"
                                          (rewrite "norm_scal")
                                          (("1"
                                            (expand "abs")
                                            (("1"
                                              (expand
                                               "max_miter_offset")
                                              (("1"
                                                (use
                                                 "min_seg_sep_bounds_seg_length")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "length")
                                                    (("1"
                                                      (use
                                                       "min_miter_sine_le_each_sine")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (cross-mult
                                                           1)
                                                          (("1"
                                                            (cross-mult
                                                             -6)
                                                            (("1"
                                                              (name-replace
                                                               "L"
                                                               "norm(S`seq(1 + i) - S`seq(i))")
                                                              (("1"
                                                                (case
                                                                 "min_miter_sine(S) * min_segment_sep(S) <= s * min_segment_sep(S)")
                                                                (("1"
                                                                  (case
                                                                   "6*d/s <= min_segment_sep(S)")
                                                                  (("1"
                                                                    (case
                                                                     "2 * (d / s) + 2 * d < 6*d/s")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (move-terms
                                                                       1
                                                                       l
                                                                       1)
                                                                      (("2"
                                                                        (hide-all-but
                                                                         (-5
                                                                          1))
                                                                        (("2"
                                                                          (real-props)
                                                                          (("2"
                                                                            (cancel-by
                                                                             1
                                                                             "2*d")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (cross-mult
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (real-props)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (cross-mult 1) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma
                                 "half_angle_sine_dir_nonparallel")
                                (("2"
                                  (inst
                                   -
                                   "S`seq(i)"
                                   "S`seq(i-1)"
                                   "S`seq(i+1)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "half_angle_vsin")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (use
                                     "edge_para_endpts_valid_miter_point_args")
                                    (("2" (ground) nil nil))
                                    nil)
                                   ("3"
                                    (lemma
                                     "adj_edge_parallel_endpts_neq")
                                    (("3"
                                      (inst - "S" "i-1")
                                      (("3" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rightward_segment_offset const-decl "point_2d" segments_2d nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (miter_point_defns_equiv formula-decl nil vectors_2d_trig nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (segment_bisect_vector const-decl "Nz_vector" vectors_2d_trig nil)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (scal_add_right formula-decl nil vectors_2D vectors)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (S skolem-const-decl "edge_parallel_endpoint_seq"
     miter_point_sequences nil)
    (d skolem-const-decl "miter_seq_offset_dist(S)"
       miter_point_sequences nil)
    (s skolem-const-decl "{x: real | 0 <= x AND x <= 1}"
     miter_point_sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (norm_scal formula-decl nil vectors_2D vectors)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
     real_defs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (min_miter_sine_le_each_sine formula-decl nil miter_point_sequences
     nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (div_distributes_minus formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (min_segment_sep const-decl "posreal" segment_endpoint_sequences
     nil)
    (min_miter_sine const-decl "posreal" miter_point_sequences nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (length const-decl "posreal" segments_2d nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (min_seg_sep_bounds_seg_length formula-decl nil
     segment_endpoint_sequences nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (scal_sub_right formula-decl nil vectors_2D vectors)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (short_dist_offset_points_neq formula-decl nil vectors_cross_2d
     nil)
    (i skolem-const-decl "{i: posnat | i < S`length - 1}"
       miter_point_sequences nil)
    (edge_para_endpts_valid_miter_point_args formula-decl nil
     segment_endpoint_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (half_angle_sine_dir_nonparallel formula-decl nil vectors_2d_trig
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_2D vectors)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (miter_point_hyp const-decl "point_2d" vectors_2d_trig nil)
    (segment_midpoint const-decl "point_2d" segments_2d nil))
   shostak))
 (miter_point_neq_right_offset_point_prev_TCC1 0
  (miter_point_neq_right_offset_point_prev_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "adj_edge_parallel_endpts_neq")
      (("" (inst - "S" "i-1") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (miter_point_neq_right_offset_point_prev subtype
    "miter_point_sequences.S`seq(miter_point_sequences.i)"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.i, 1))}"))
  (miter_point_neq_right_offset_point_prev_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_point_neq_right_offset_point_prev subtype
    "miter_point_sequences.S`seq(miter_point_sequences.i)"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.i, 1))}")))
 (miter_point_neq_right_offset_point_prev 0
  (miter_point_neq_right_offset_point_prev-1 nil 3874129021
   ("" (skeep)
    (("" (expand "rightward_segment_offset")
      (("" (expand "segment_midpoint")
        (("" (rewrite "miter_point_defns_equiv")
          (("" (expand "miter_point_hyp" :assert? none)
            (("" (skoletin*)
              (("" (hide -2)
                ((""
                  (name-replace "perp"
                   "^(perp_left(S`seq(i) - S`seq(i-1)))")
                  (("" (typepred "d")
                    (("" (distrib -4)
                      (("" (move-terms -4 r 2)
                        (("" (factor -4 l (1 3))
                          (("" (assert)
                            (("" (case "s > 0")
                              (("1"
                                (lemma "short_dist_offset_points_neq")
                                (("1"
                                  (inst
                                   -
                                   "1/2*S`seq(i)"
                                   "1/2*S`seq(i-1)"
                                   _
                                   _
                                   "^(bv_1)"
                                   "perp"
                                   "d/s"
                                   "d")
                                  (("1"
                                    (invoke
                                     (inst - "%1" "%2")
                                     (! -6 *))
                                    (("1"
                                      (assert)
                                      (("1"
                                        (factor! (! 1 r 1))
                                        (("1"
                                          (rewrite "norm_scal")
                                          (("1"
                                            (expand "abs")
                                            (("1"
                                              (expand
                                               "max_miter_offset")
                                              (("1"
                                                (lemma
                                                 "min_seg_sep_bounds_seg_length")
                                                (("1"
                                                  (inst - "S" "i-1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "length")
                                                      (("1"
                                                        (rewrite
                                                         "norm_sym")
                                                        (("1"
                                                          (cross-mult
                                                           1)
                                                          (("1"
                                                            (cross-mult
                                                             -5)
                                                            (("1"
                                                              (name-replace
                                                               "L"
                                                               "norm(S`seq(i-1) - S`seq(i))")
                                                              (("1"
                                                                (case
                                                                 "min_miter_sine(S) * min_segment_sep(S) <= s * min_segment_sep(S)")
                                                                (("1"
                                                                  (case
                                                                   "6*d/s <= min_segment_sep(S)")
                                                                  (("1"
                                                                    (case
                                                                     "2 * (d / s) + 2 * d < 6*d/s")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (move-terms
                                                                       1
                                                                       l
                                                                       1)
                                                                      (("2"
                                                                        (hide-all-but
                                                                         (-4
                                                                          1))
                                                                        (("2"
                                                                          (real-props)
                                                                          (("2"
                                                                            (cancel-by
                                                                             1
                                                                             "2*d")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (cross-mult
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (real-props)
                                                                  (("2"
                                                                    (use
                                                                     "min_miter_sine_le_each_sine")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (cross-mult 1) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma
                                 "half_angle_sine_dir_nonparallel")
                                (("2"
                                  (inst
                                   -
                                   "S`seq(i)"
                                   "S`seq(i-1)"
                                   "S`seq(i+1)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "half_angle_vsin")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (use
                                     "edge_para_endpts_valid_miter_point_args")
                                    (("2" (ground) nil nil))
                                    nil)
                                   ("3"
                                    (lemma
                                     "adj_edge_parallel_endpts_neq")
                                    (("3"
                                      (inst - "S" "i-1")
                                      (("3" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rightward_segment_offset const-decl "point_2d" segments_2d nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (miter_point_defns_equiv formula-decl nil vectors_2d_trig nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (segment_bisect_vector const-decl "Nz_vector" vectors_2d_trig nil)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (scal_add_right formula-decl nil vectors_2D vectors)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (S skolem-const-decl "edge_parallel_endpoint_seq"
     miter_point_sequences nil)
    (d skolem-const-decl "miter_seq_offset_dist(S)"
       miter_point_sequences nil)
    (s skolem-const-decl "{x: real | 0 <= x AND x <= 1}"
     miter_point_sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (norm_scal formula-decl nil vectors_2D vectors)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
     real_defs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (length const-decl "posreal" segments_2d nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (min_miter_sine_le_each_sine formula-decl nil miter_point_sequences
     nil)
    (div_distributes_minus formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (min_segment_sep const-decl "posreal" segment_endpoint_sequences
     nil)
    (min_miter_sine const-decl "posreal" miter_point_sequences nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (norm_sym formula-decl nil vectors_2D vectors)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (min_seg_sep_bounds_seg_length formula-decl nil
     segment_endpoint_sequences nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (scal_sub_right formula-decl nil vectors_2D vectors)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (short_dist_offset_points_neq formula-decl nil vectors_cross_2d
     nil)
    (i skolem-const-decl "{i: posnat | i < S`length - 1}"
       miter_point_sequences nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (edge_para_endpts_valid_miter_point_args formula-decl nil
     segment_endpoint_sequences nil)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (half_angle_sine_dir_nonparallel formula-decl nil vectors_2d_trig
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_2D vectors)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (miter_point_hyp const-decl "point_2d" vectors_2d_trig nil)
    (segment_midpoint const-decl "point_2d" segments_2d nil))
   shostak))
 (miter_point_from_prev_segment 0
  (miter_point_from_prev_segment-1 nil 3874129021
   ("" (skeep)
    (("" (use "miter_point_defns_equiv")
      (("" (use "miter_point_defns_equiv_2") (("" (assert) nil nil))
        nil))
      nil))
    nil)
   ((miter_point_defns_equiv formula-decl nil vectors_2d_trig nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (- const-decl "Vector" vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (miter_point_defns_equiv_2 formula-decl nil vectors_2d_trig nil))
   shostak))
 (miter_pt_dist_to_pivot_pt_bound_TCC1 0
  (miter_pt_dist_to_pivot_pt_bound_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (miter_pt_dist_to_pivot_pt_bound subtype
    "(vectors_2D.-)(miter_point_sequences.u, miter_point_sequences.v)"
    "Nz_vector"))
  (miter_pt_dist_to_pivot_pt_bound_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_pt_dist_to_pivot_pt_bound subtype
    "(vectors_2D.-)(miter_point_sequences.u, miter_point_sequences.v)"
    "Nz_vector")))
 (miter_pt_dist_to_pivot_pt_bound_TCC2 0
  (miter_pt_dist_to_pivot_pt_bound_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (miter_pt_dist_to_pivot_pt_bound subtype
    "(vectors_2D.-)(miter_point_sequences.w, miter_point_sequences.v)"
    "Nz_vector"))
  (miter_pt_dist_to_pivot_pt_bound_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_pt_dist_to_pivot_pt_bound subtype
    "(vectors_2D.-)(miter_point_sequences.w, miter_point_sequences.v)"
    "Nz_vector")))
 (miter_pt_dist_to_pivot_pt_bound_TCC3 0
  (miter_pt_dist_to_pivot_pt_bound_TCC3-2 nil 3874129021
   ("" (skeep)
    (("" (assert)
      (("" (use "nonparallel_half_angle_sine_pos")
        (("" (ground) nil nil)) nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (nonparallel_half_angle_sine_pos judgement-tcc nil
     miter_point_sequences nil))
   shostak
   (miter_pt_dist_to_pivot_pt_bound subtype "miter_point_sequences.hs"
    "nznum"))
  (miter_pt_dist_to_pivot_pt_bound_TCC3-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_pt_dist_to_pivot_pt_bound subtype "miter_point_sequences.hs"
    "nznum")))
 (miter_pt_dist_to_pivot_pt_bound 0
  (miter_pt_dist_to_pivot_pt_bound-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin*)
      (("" (typepred "w")
        (("" (rewrite "miter_point_defns_equiv")
          (("" (expand "miter_point_hyp")
            (("" (replace -3 :hide? t)
              (("" (assert)
                (("" (expand "three_point_miniseq?")
                  (("" (flatten)
                    (("" (replace -1 :dir rl)
                      (("" (rewrite* "norm_scal")
                        (("" (expand "abs")
                          (("" (lift-if)
                            (("" (ground)
                              ((""
                                (use "nonparallel_half_angle_sine_pos")
                                ((""
                                  (ground)
                                  ((""
                                    (case "d/hs > 0")
                                    (("1" (assert) nil nil)
                                     ("2" (cross-mult 1) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sub_eq_zero formula-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (/= const-decl "boolean" notequal nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (<= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (miter_point_defns_equiv formula-decl nil vectors_2d_trig nil)
    (nonparallel_half_angle_sine_pos judgement-tcc nil
     miter_point_sequences nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (norm_scal_norm formula-decl nil vectors_cross_2d nil)
    (add_cancel formula-decl nil vectors_2D vectors)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (miter_point_hyp const-decl "point_2d" vectors_2d_trig nil))
   shostak))
 (miter_pt_dist_to_pivot_lower_bound 0
  (miter_pt_dist_to_pivot_lower_bound-1 nil 3874129021
   ("" (skeep)
    (("" (rewrite "miter_point_defns_equiv")
      (("" (expand "miter_point_hyp")
        (("" (assert)
          (("" (rewrite "norm_scal")
            (("" (expand "abs")
              (("" (lift-if)
                (("" (ground)
                  (("1" (real-props) nil nil)
                   ("2" (cross-mult 2)
                    (("2" (lemma "half_angle_sine_dir_nonparallel")
                      (("2" (inst?)
                        (("1" (inst - "w")
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (expand "half_angle_vsin" 2 1)
                                (("1"
                                  (assert)
                                  (("1" (cancel-by 2 "d") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "w")
                            (("2" (expand "three_point_miniseq?")
                              (("2" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (typepred "w")
                          (("2" (expand "three_point_miniseq?")
                            (("2" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((miter_point_defns_equiv formula-decl nil vectors_2d_trig nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (add_cancel formula-decl nil vectors_2D vectors)
    (norm_scal_norm formula-decl nil vectors_cross_2d nil)
    (div_mult_pos_neg_le2 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (<= const-decl "bool" reals nil)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (u skolem-const-decl "point_2d" miter_point_sequences nil)
    (v skolem-const-decl "point_2d" miter_point_sequences nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (vcos const-decl "{x: real | -1 <= x AND x <= 1}" vectors_2d_trig
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (w skolem-const-decl "(three_point_miniseq?(u, v))"
     miter_point_sequences nil)
    (half_angle_sine_dir_nonparallel formula-decl nil vectors_2d_trig
     nil)
    (neg_div_lt formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (miter_point_hyp const-decl "point_2d" vectors_2d_trig nil))
   shostak))
 (miter_pt_dist_to_edge_endpt_bound 0
  (miter_pt_dist_to_edge_endpt_bound-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin)
      (("" (rewrite "miter_point_defns_equiv")
        (("" (expand "miter_point_hyp")
          (("" (replace -1 :hide? t)
            (("" (assert)
              ((""
                (case "S`seq(i) = S`seq(i-1) or S`seq(i) = S`seq(i+1)")
                (("1" (lemma "adj_edge_parallel_endpts_neq")
                  (("1" (inst-cp - "S" "i")
                    (("1" (inst - "S" "i-1") (("1" (ground) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (use "miter_half_angle_sine_pos")
                    (("2" (assert)
                      (("2"
                        (name-replace "bv"
                         "segment_bisect_vector(S`seq(i),
                                                 S`seq(i - 1),
                                                 S`seq(1 + i))")
                        (("2"
                          (equate "d /
                         half_angle_vsin(^(S`seq(i - 1) - S`seq(i)),
                                         ^(S`seq(1 + i) - S`seq(i)))
                         * ^(-bv)"
                           "-d /     half_angle_vsin(^(S`seq(i - 1) - S`seq(i)),
                                         ^(S`seq(1 + i) - S`seq(i)))
                         * ^(bv)")
                          (("1" (rewrite* "norm_scal")
                            (("1" (expand "abs")
                              (("1"
                                (ground)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (ground)
                                    (("1" (cross-mult -1) nil nil)
                                     ("2"
                                      (use
                                       "min_miter_sine_le_each_sine")
                                      (("2"
                                        (assert)
                                        (("2" (real-props) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (ground)
                            (("2" (use "min_miter_sine_le_each_sine")
                              (("2"
                                (assert)
                                (("2"
                                  (real-props)
                                  (("2"
                                    (equate "^(-bv)" "-^(bv)")
                                    (("1"
                                      (hide-all-but 1)
                                      (("1"
                                        (name-replace
                                         "ss"
                                         "half_angle_vsin(^(S`seq(i - 1) - S`seq(i)),
                        ^(S`seq(1 + i) - S`seq(i)))")
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "Vector" vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (<= const-decl "bool" reals nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (min_miter_sine const-decl "posreal" miter_point_sequences nil)
    (miter_point_hyp const-decl "point_2d" vectors_2d_trig nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (add_cancel formula-decl nil vectors_2D vectors)
    (norm_scal_norm formula-decl nil vectors_cross_2d nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "Vector" vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (neg_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (le_div_le_pos formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (min_miter_sine_le_each_sine formula-decl nil miter_point_sequences
     nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (abs_div formula-decl nil real_props nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_2D vectors)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (segment_bisect_vector const-decl "Nz_vector" vectors_2d_trig nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (miter_half_angle_sine_pos formula-decl nil miter_point_sequences
     nil)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (miter_point_defns_equiv formula-decl nil vectors_2d_trig nil))
   shostak))
 (wrapped_miter_pt_dist_to_edge_endpt_bound 0
  (wrapped_miter_pt_dist_to_edge_endpt_bound-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin)
      (("" (rewrite "miter_point_defns_equiv")
        (("" (flatten)
          (("" (skoletin)
            (("" (expand "miter_point_hyp")
              (("" (replace -1 :hide? t)
                (("" (assert)
                  ((""
                    (case "S`seq(lbi) = S`seq(S`length-2) or S`seq(lbi) = S`seq(1 + lbi)")
                    (("1" (lemma "adj_edge_parallel_endpts_neq")
                      (("1" (inst-cp - "S" "S`length-2")
                        (("1" (inst - "S" "lbi")
                          (("1" (ground) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (rewrite "norm_scal")
                        (("2" (expand "abs")
                          (("2" (lift-if)
                            (("2" (ground)
                              (("1"
                                (use
                                 "wrapped_miter_half_angle_sine_pos")
                                (("1"
                                  (assert)
                                  (("1" (real-props) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (cross-mult 2)
                                (("2"
                                  (ground)
                                  (("2"
                                    (cross-mult 1)
                                    (("2"
                                      (cancel-by 1 "d")
                                      (("2"
                                        (use
                                         "min_miter_sine_le_wrapped_sine")
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (<= const-decl "bool" reals nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (min_miter_sine const-decl "posreal" miter_point_sequences nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (add_cancel formula-decl nil vectors_2D vectors)
    (norm_scal_norm formula-decl nil vectors_cross_2d nil)
    (div_mult_pos_neg_le1 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (times_div2 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (min_miter_sine_le_wrapped_sine formula-decl nil
     miter_point_sequences nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (wrapped_miter_half_angle_sine_pos formula-decl nil
     miter_point_sequences nil)
    (zero_times1 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (miter_point_hyp const-decl "point_2d" vectors_2d_trig nil)
    (miter_point_defns_equiv formula-decl nil vectors_2d_trig nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (wrapped_miter_pt_dist_to_edge_endpt_bound_2_TCC1 0
  (wrapped_miter_pt_dist_to_edge_endpt_bound_2_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (min_miter_sine const-decl "posreal" miter_point_sequences nil)
    (- const-decl "Vector" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (min_seg_separation const-decl "posreal" segment_endpoint_sequences
     nil)
    (min_segment_sep const-decl "posreal" segment_endpoint_sequences
     nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (wrapped_miter_pt_dist_to_edge_endpt_bound_2 subtype
    "miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 3))"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2))}"))
  (wrapped_miter_pt_dist_to_edge_endpt_bound_2_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (wrapped_miter_pt_dist_to_edge_endpt_bound_2 subtype
    "miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 3))"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2))}")))
 (wrapped_miter_pt_dist_to_edge_endpt_bound_2_TCC2 0
  (wrapped_miter_pt_dist_to_edge_endpt_bound_2_TCC2-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "edge_para_endpts_valid_miter_point_args")
      (("" (inst - "S" "S`length - 2") (("" (ground) nil nil)) nil))
      nil))
    nil)
   ((edge_para_endpts_valid_miter_point_args formula-decl nil
     segment_endpoint_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (wrapped_miter_pt_dist_to_edge_endpt_bound_2 subtype
    "miter_point_sequences.S`seq(miter_point_sequences.lbi)"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2)), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 3)), miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2))), (vectors_2D.-)(p, miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2))))))}"))
  (wrapped_miter_pt_dist_to_edge_endpt_bound_2_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (wrapped_miter_pt_dist_to_edge_endpt_bound_2 subtype
    "miter_point_sequences.S`seq(miter_point_sequences.lbi)"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2)), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 3)), miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2))), (vectors_2D.-)(p, miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2))))))}")))
 (wrapped_miter_pt_dist_to_edge_endpt_bound_2 0
  (wrapped_miter_pt_dist_to_edge_endpt_bound_2-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin)
      (("" (rewrite "miter_point_defns_equiv")
        (("" (flatten)
          (("" (skoletin)
            (("" (expand "miter_point_hyp")
              (("" (replace -1 :hide? t)
                (("" (assert)
                  ((""
                    (case "S`seq(S`length - 2) = S`seq(S`length - 3) or
   S`seq(S`length - 2) = S`seq(lbi)")
                    (("1" (lemma "adj_edge_parallel_endpts_neq")
                      (("1" (inst-cp - "S" "S`length-2")
                        (("1" (inst - "S" "S`length - 3")
                          (("1" (ground) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (rewrite "norm_scal")
                        (("2" (expand "abs")
                          (("2" (lift-if)
                            (("2" (ground)
                              (("1"
                                (use
                                 "wrapped_miter_half_angle_sine_pos")
                                (("1"
                                  (assert)
                                  (("1" (real-props) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (cross-mult 2)
                                (("2"
                                  (ground)
                                  (("2"
                                    (cross-mult 1)
                                    (("2"
                                      (cancel-by 1 "d")
                                      (("2"
                                        (use
                                         "min_miter_sine_le_wrapped_sine_2")
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (<= const-decl "bool" reals nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (min_miter_sine const-decl "posreal" miter_point_sequences nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (add_cancel formula-decl nil vectors_2D vectors)
    (norm_scal_norm formula-decl nil vectors_cross_2d nil)
    (div_mult_pos_neg_le1 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (times_div2 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (min_miter_sine_le_wrapped_sine_2 formula-decl nil
     miter_point_sequences nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (wrapped_miter_half_angle_sine_pos formula-decl nil
     miter_point_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (neg_div_lt formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (miter_point_hyp const-decl "point_2d" vectors_2d_trig nil)
    (miter_point_defns_equiv formula-decl nil vectors_2d_trig nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (miter_pt_to_vertex_dist_lt_edge_length_TCC1 0
  (miter_pt_to_vertex_dist_lt_edge_length_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   shostak
   (miter_pt_to_vertex_dist_lt_edge_length subtype
    "(number_fields.+)(miter_point_sequences.j, 1)" "below[S`length]"))
  (miter_pt_to_vertex_dist_lt_edge_length_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_pt_to_vertex_dist_lt_edge_length subtype
    "(number_fields.+)(miter_point_sequences.j, 1)"
    "below[S`length]")))
 (miter_pt_to_vertex_dist_lt_edge_length_TCC2 0
  (miter_pt_to_vertex_dist_lt_edge_length_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   shostak
   (miter_pt_to_vertex_dist_lt_edge_length subtype
    "miter_point_sequences.j" "below[S`length]"))
  (miter_pt_to_vertex_dist_lt_edge_length_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_pt_to_vertex_dist_lt_edge_length subtype
    "miter_point_sequences.j" "below[S`length]")))
 (miter_pt_to_vertex_dist_lt_edge_length 0
  (miter_pt_to_vertex_dist_lt_edge_length-1 nil 3874129021
   ("" (skeep)
    (("" (assert)
      (("" (use "miter_pt_dist_to_edge_endpt_bound")
        (("" (assert)
          (("" (typepred "d")
            (("" (expand "max_miter_offset")
              ((""
                (case "d / min_miter_sine(S) <= min_segment_sep(S) / 6")
                (("1" (assert)
                  (("1" (skeep)
                    (("1"
                      (case "min_segment_sep(S) / 6 <= norm(S`seq(1 + j) - S`seq(j)) / 6")
                      (("1" (assert) nil nil)
                       ("2" (use "min_seg_sep_bounds_seg_length")
                        (("2" (assert)
                          (("2" (expand "length")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (real-props) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (times_div1 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (length const-decl "posreal" segments_2d nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (min_seg_sep_bounds_seg_length formula-decl nil
     segment_endpoint_sequences nil)
    (min_segment_sep const-decl "posreal" segment_endpoint_sequences
     nil)
    (min_miter_sine const-decl "posreal" miter_point_sequences nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (miter_pt_dist_to_edge_endpt_bound formula-decl nil
     miter_point_sequences nil))
   shostak))
 (miter_pt_to_vtx_dist_lt_edge_len_wrap_TCC1 0
  (miter_pt_to_vtx_dist_lt_edge_len_wrap_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (miter_pt_to_vtx_dist_lt_edge_len_wrap subtype
    "(number_fields.+)(miter_point_sequences.lbi, 1)"
    "below[S`length]"))
  (miter_pt_to_vtx_dist_lt_edge_len_wrap_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_pt_to_vtx_dist_lt_edge_len_wrap subtype
    "(number_fields.+)(miter_point_sequences.lbi, 1)"
    "below[S`length]")))
 (miter_pt_to_vtx_dist_lt_edge_len_wrap_TCC2 0
  (miter_pt_to_vtx_dist_lt_edge_len_wrap_TCC2-2 nil 3874129021
   ("" (skeep)
    (("" (ground)
      (("1" (lemma "adj_edge_parallel_endpts_neq")
        (("1" (inst - "S" "lbi") (("1" (assert) nil nil)) nil)) nil)
       ("2" (use "wrapped_adj_segs_not_dir_parallel")
        (("2" (ground)
          (("2" (flatten)
            (("2" (rewrite "dir_parallel_eqv_normalized_diffs_eq")
              (("1" (assert) nil nil)
               ("2" (lemma "adj_edge_parallel_endpts_neq")
                (("2" (inst - "S" "S`length - 2")
                  (("2" (ground) nil nil)) nil))
                nil)
               ("3" (lemma "adj_edge_parallel_endpts_neq")
                (("3" (inst - "S" "lbi") (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dir_parallel_eqv_normalized_diffs_eq formula-decl nil
     vectors_cross_2d nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (wrapped_adj_segs_not_dir_parallel formula-decl nil
     segment_endpoint_sequences nil))
   shostak
   (miter_pt_to_vtx_dist_lt_edge_len_wrap subtype
    "miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.lbi, 1))"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.S`seq(miter_point_sequences.lbi), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2)), miter_point_sequences.S`seq(miter_point_sequences.lbi)), (vectors_2D.-)(p, miter_point_sequences.S`seq(miter_point_sequences.lbi)))))}"))
  (miter_pt_to_vtx_dist_lt_edge_len_wrap_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_pt_to_vtx_dist_lt_edge_len_wrap subtype
    "miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.lbi, 1))"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.S`seq(miter_point_sequences.lbi), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2)), miter_point_sequences.S`seq(miter_point_sequences.lbi)), (vectors_2D.-)(p, miter_point_sequences.S`seq(miter_point_sequences.lbi)))))}")))
 (miter_pt_to_vtx_dist_lt_edge_len_wrap_TCC3 0
  (miter_pt_to_vtx_dist_lt_edge_len_wrap_TCC3-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   shostak
   (miter_pt_to_vtx_dist_lt_edge_len_wrap subtype
    "(number_fields.+)(miter_point_sequences.j, 1)" "below[S`length]"))
  (miter_pt_to_vtx_dist_lt_edge_len_wrap_TCC3-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_pt_to_vtx_dist_lt_edge_len_wrap subtype
    "(number_fields.+)(miter_point_sequences.j, 1)"
    "below[S`length]")))
 (miter_pt_to_vtx_dist_lt_edge_len_wrap_TCC4 0
  (miter_pt_to_vtx_dist_lt_edge_len_wrap_TCC4-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   shostak
   (miter_pt_to_vtx_dist_lt_edge_len_wrap subtype
    "miter_point_sequences.j" "below[S`length]"))
  (miter_pt_to_vtx_dist_lt_edge_len_wrap_TCC4-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_pt_to_vtx_dist_lt_edge_len_wrap subtype
    "miter_point_sequences.j" "below[S`length]")))
 (miter_pt_to_vtx_dist_lt_edge_len_wrap 0
  (miter_pt_to_vtx_dist_lt_edge_len_wrap-1 nil 3874129021
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (use "wrapped_miter_pt_dist_to_edge_endpt_bound")
          (("" (assert)
            (("" (assert)
              (("" (typepred "d")
                (("" (expand "max_miter_offset")
                  ((""
                    (case "d / min_miter_sine(S) <= min_segment_sep(S) / 6")
                    (("1" (assert)
                      (("1" (skeep)
                        (("1"
                          (case "min_segment_sep(S) / 6 <= norm(S`seq(1 + j) - S`seq(j)) / 6")
                          (("1" (assert) nil nil)
                           ("2" (use "min_seg_sep_bounds_seg_length")
                            (("2" (assert)
                              (("2"
                                (expand "length")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (real-props) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (wrapped_miter_pt_dist_to_edge_endpt_bound formula-decl nil
     miter_point_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (times_div1 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length const-decl "posreal" segments_2d nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (min_seg_sep_bounds_seg_length formula-decl nil
     segment_endpoint_sequences nil)
    (min_segment_sep const-decl "posreal" segment_endpoint_sequences
     nil)
    (min_miter_sine const-decl "posreal" miter_point_sequences nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil))
   shostak))
 (miter_pt_to_vtx_dist_lt_edge_len_wrap_2_TCC1 0
  (miter_pt_to_vtx_dist_lt_edge_len_wrap_2_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (miter_pt_to_vtx_dist_lt_edge_len_wrap_2 subtype
    "(number_fields.+)(miter_point_sequences.j, 1)" "below[S`length]"))
  (miter_pt_to_vtx_dist_lt_edge_len_wrap_2_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_pt_to_vtx_dist_lt_edge_len_wrap_2 subtype
    "(number_fields.+)(miter_point_sequences.j, 1)"
    "below[S`length]")))
 (miter_pt_to_vtx_dist_lt_edge_len_wrap_2_TCC2 0
  (miter_pt_to_vtx_dist_lt_edge_len_wrap_2_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   shostak
   (miter_pt_to_vtx_dist_lt_edge_len_wrap_2 subtype
    "miter_point_sequences.j" "below[S`length]"))
  (miter_pt_to_vtx_dist_lt_edge_len_wrap_2_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_pt_to_vtx_dist_lt_edge_len_wrap_2 subtype
    "miter_point_sequences.j" "below[S`length]")))
 (miter_pt_to_vtx_dist_lt_edge_len_wrap_2 0
  (miter_pt_to_vtx_dist_lt_edge_len_wrap_2-1 nil 3874129021
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (use "wrapped_miter_pt_dist_to_edge_endpt_bound_2")
          (("" (assert)
            (("" (assert)
              (("" (typepred "d")
                (("" (expand "max_miter_offset")
                  ((""
                    (case "d / min_miter_sine(S) <= min_segment_sep(S) / 6")
                    (("1" (assert)
                      (("1" (skeep)
                        (("1"
                          (case "min_segment_sep(S) / 6 <= norm(S`seq(1 + j) - S`seq(j)) / 6")
                          (("1" (assert) nil nil)
                           ("2" (use "min_seg_sep_bounds_seg_length")
                            (("2" (assert)
                              (("2"
                                (expand "length")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (real-props) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (wrapped_miter_pt_dist_to_edge_endpt_bound_2 formula-decl nil
     miter_point_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (times_div1 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length const-decl "posreal" segments_2d nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (min_seg_sep_bounds_seg_length formula-decl nil
     segment_endpoint_sequences nil)
    (min_segment_sep const-decl "posreal" segment_endpoint_sequences
     nil)
    (min_miter_sine const-decl "posreal" miter_point_sequences nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil))
   shostak))
 (miter_pt_segment_parallel_to_orig 0
  (miter_pt_segment_parallel_to_orig-1 nil 3874129021
   ("" (skeep + t)
    (("" (skoletin*)
      (("" (lemma "miter_point_from_prev_segment")
        (("" (expand "four_point_miniseq?")
          (("" (expand "four_point_offset_dist?")
            (("" (ground)
              (("" (inst - "v" "w" "x" "d")
                (("1" (replace -1 :hide? t)
                  (("1" (expand "miter_point_prev")
                    (("1" (expand "miter_point")
                      (("1"
                        (name-replace*
                         ("s1" "half_angle_vsin(^(u - v), ^(w - v))"
                          "s2" "half_angle_vsin(^(v - w), ^(x - w))"))
                        (("1"
                          (name-replace*
                           ("c1" "half_angle_vcos(^(u - v), ^(w - v))"
                            "c2"
                            "half_angle_vcos(^(v - w), ^(x - w))"))
                          (("1"
                            (equate "perp_right(v - w)"
                             "perp_left(w - v)")
                            (("1"
                              (name-replace "perp"
                               "^(perp_left(w - v))")
                              (("1"
                                (equate
                                 "d * (c2 / s2) * ^(v - w)"
                                 "-d * (c2 / s2) * ^(w - v)")
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (replace -6)
                                    (("1"
                                      (equate
                                       "w + -d * (c2 / s2) * ^(w - v) + d * perp -
                             (v + d * (c1 / s1) * ^(w - v) + d * perp)"
                                       "w - v + -d * ((c2 / s2) + (c1 / s1)) * ^(w - v)")
                                      (("1"
                                        (name-replace
                                         "cs"
                                         "(c2 / s2) + (c1 / s1)")
                                        (("1"
                                          (expand "^" 1)
                                          (("1"
                                            (real-props)
                                            (("1"
                                              (name-replace
                                               "k"
                                               "(1 / norm(w - v)) * -d * cs")
                                              (("1"
                                                (equate
                                                 "w - v + k * (w - v)"
                                                 "(1 + k) * (w - v)")
                                                (("1"
                                                  (case "k > -1")
                                                  (("1"
                                                    (expand
                                                     "dir_parallel?"
                                                     1)
                                                    (("1"
                                                      (inst
                                                       +
                                                       "1 / (1 + k)")
                                                      (("1"
                                                        (real-props)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (splash
                                                         1
                                                         :reverse?
                                                         t)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (cross-mult
                                                           1)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-8 -9 1))
                                                    (("2"
                                                      (cross-mult -2)
                                                      (("2"
                                                        (case
                                                         "3*d <= min(s1, s2) * norm(w - v)")
                                                        (("1"
                                                          (hide -3)
                                                          (("1"
                                                            (expand
                                                             "k")
                                                            (("1"
                                                              (cross-mult
                                                               1)
                                                              (("1"
                                                                (div-by
                                                                 1
                                                                 "-1"
                                                                 -)
                                                                (("1"
                                                                  (equate
                                                                   "-d * cs / -1"
                                                                   "d * cs"
                                                                   (assert))
                                                                  (("1"
                                                                    (case
                                                                     "s1 > 0 & s2 > 0")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (mult-by
                                                                         1
                                                                         "min(s1, s2)")
                                                                        (("1"
                                                                          (case
                                                                           "3*d > d * cs * min(s1, s2)")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             -3
                                                                             2)
                                                                            (("2"
                                                                              (cancel-by
                                                                               1
                                                                               "d")
                                                                              (("2"
                                                                                (expand
                                                                                 "cs")
                                                                                (("2"
                                                                                  (case
                                                                                   "c1 <= 1 & c2 <= 1")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "min")
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (ground)
                                                                                          (("1"
                                                                                            (real-props)
                                                                                            (("1"
                                                                                              (case
                                                                                               "(s2 * c1) / s1 < 1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (cross-mult
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (equate
                                                                                                   "s2*c1"
                                                                                                   "c1*s2"
                                                                                                   (assert))
                                                                                                  (("2"
                                                                                                    (mult-cases
                                                                                                     1)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (real-props)
                                                                                            (("2"
                                                                                              (case
                                                                                               "(s1 * c2) / s2 <= 1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (real-props)
                                                                                                (("2"
                                                                                                  (equate
                                                                                                   "s1*c2"
                                                                                                   "c2*s1"
                                                                                                   (assert))
                                                                                                  (("2"
                                                                                                    (mult-cases
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (lift-if)
                                                                                                      (("2"
                                                                                                        (ground)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "c1")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "min")
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "s1")
                                                                      (("2"
                                                                        (expand
                                                                         "s2")
                                                                        (("2"
                                                                          (ground)
                                                                          (("1"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("1"
                                                                              (use
                                                                               "nonparallel_half_angle_sine_pos")
                                                                              (("1"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (use
                                                                               "nonparallel_half_angle_sine_pos")
                                                                              (("2"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "min")
                                                          (("2"
                                                            (apply
                                                             (repeat
                                                              (lift-if)))
                                                            (("2"
                                                              (case
                                                               "forall (q, a, b, c: nnreal): q <= a * b & b <= c => q <= a * c")
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "3*d"
                                                                   "s2"
                                                                   "norm(x-w)"
                                                                   "norm(w-v)")
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (inst
                                                                   -
                                                                   "3*d"
                                                                   "s2"
                                                                   "norm(u-v)"
                                                                   "norm(w-v)")
                                                                  (("2"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (inst
                                                                   -
                                                                   "3*d"
                                                                   "s2"
                                                                   "norm(u-v)"
                                                                   "norm(w-v)")
                                                                  (("3"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("4"
                                                                  (inst
                                                                   -
                                                                   "3*d"
                                                                   "s1"
                                                                   "norm(x-w)"
                                                                   "norm(w-v)")
                                                                  (("4"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("5"
                                                                  (inst
                                                                   -
                                                                   "3*d"
                                                                   "s1"
                                                                   "norm(u-v)"
                                                                   "norm(w-v)")
                                                                  (("5"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("6"
                                                                  (inst
                                                                   -
                                                                   "3*d"
                                                                   "s1"
                                                                   "norm(u-v)"
                                                                   "norm(w-v)")
                                                                  (("6"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (case
                                                                     "a*b <= a*c")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (mult-cases
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind-with-ext)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind-with-ext) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (grind-with-ext) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "three_point_miniseq?")
                  (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "Vector" vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (four_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (four_point_offset_dist? const-decl "bool"
     segment_endpoint_sequences nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (half_angle_vcos const-decl "{x: real | -1 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (k skolem-const-decl "real" miter_point_sequences nil)
    (scal_1 formula-decl nil vectors_2D vectors)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nonparallel_half_angle_sine_pos judgement-tcc nil
     miter_point_sequences nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (div_cancel1 formula-decl nil real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (c1 skolem-const-decl "{x: real | -1 <= x AND x <= 1}"
     miter_point_sequences nil)
    (cs skolem-const-decl "real" miter_point_sequences nil)
    (s1 skolem-const-decl "{x: real | 0 <= x AND x <= 1}"
     miter_point_sequences nil)
    (s2 skolem-const-decl "{x: real | 0 <= x AND x <= 1}"
     miter_point_sequences nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_div_neg_gt1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (times_div1 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (perp_right const-decl "vector_2d" vectors_cross_2d nil)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (<= const-decl "bool" reals nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (miter_point_prev const-decl "point_2d" vectors_2d_trig nil)
    (x skolem-const-decl "(four_point_miniseq?(u, v, w))"
     miter_point_sequences nil)
    (u skolem-const-decl "point_2d" miter_point_sequences nil)
    (w skolem-const-decl "point_2d" miter_point_sequences nil)
    (v skolem-const-decl "point_2d" miter_point_sequences nil)
    (three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (miter_point_from_prev_segment formula-decl nil
     miter_point_sequences nil))
   shostak))
 (miter_pt_segment_parallel_to_edge 0
  (miter_pt_segment_parallel_to_edge-1 nil 3874129021
   ("" (skeep)
    (("" (assert)
      (("" (use "four_pt_miniseq_in_endpt_seq")
        (("" (flatten)
          (("" (lemma "miter_pt_segment_parallel_to_orig")
            ((""
              (inst - "S`seq(i-1)" "S`seq(i)" "S`seq(i+1)" "S`seq(i+2)"
               "d")
              (("1" (ground) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (four_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (four_point_offset_dist? const-decl "bool"
     segment_endpoint_sequences nil)
    (S skolem-const-decl "edge_parallel_endpoint_seq"
     miter_point_sequences nil)
    (i skolem-const-decl "{i: posnat | i < S`length - 2}"
       miter_point_sequences nil)
    (d skolem-const-decl "miter_seq_offset_dist(S)"
       miter_point_sequences nil)
    (miter_pt_segment_parallel_to_orig formula-decl nil
     miter_point_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (four_pt_miniseq_in_endpt_seq formula-decl nil
     miter_point_sequences nil))
   shostak))
 (miter_point_cross_gt_0 0
  (miter_point_cross_gt_0-1 nil 3874129021
   ("" (skeep + t)
    (("" (skoletin)
      (("" (expand "three_point_miniseq?")
        (("" (flatten)
          (("" (rewrite "miter_point_defns_equiv")
            (("" (expand "miter_point_hyp")
              (("" (use "nonparallel_half_angle_sine_pos")
                (("1" (flatten)
                  (("1"
                    (name-replace "hs"
                     "half_angle_vsin(^(u - v), ^(w - v))")
                    (("1"
                      (name-replace "bv"
                       "segment_bisect_vector(v, u, w)")
                      (("1" (replace -3 :hide? t)
                        (("1" (assert)
                          (("1" (expand "^")
                            (("1" (assert)
                              (("1"
                                (rewrite "cross_scales_1")
                                (("1"
                                  (rewrite "cross_scales_2")
                                  (("1"
                                    (real-props)
                                    (("1"
                                      (expand "bv")
                                      (("1"
                                        (expand
                                         "segment_bisect_vector")
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (rewrite
                                                 "cross_perp_right_pos")
                                                (("1"
                                                  (rewrite
                                                   "parallel_equiv_cross_eq_0"
                                                   :dir
                                                   rl)
                                                  (("1"
                                                    (expand
                                                     "parallel?")
                                                    (("1"
                                                      (expand
                                                       "dir_parallel?")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (case
                                                           "nzk > 0")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (replace
                                                             -1
                                                             +)
                                                            (("2"
                                                              (equate
                                                               "perp_right(nzk * (w - v))"
                                                               "nzk * perp_right(w - v)")
                                                              (("1"
                                                                (rewrite
                                                                 "cross_scales_1")
                                                                (("1"
                                                                  (real-props)
                                                                  (("1"
                                                                    (rewrite
                                                                     "cross_antisymmetric"
                                                                     2)
                                                                    (("1"
                                                                      (real-props)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         2)
                                                                        (("1"
                                                                          (lemma
                                                                           "cross_perp_right_pos")
                                                                          (("1"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (split 2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (rewrite
                                                     "cross_distrib_add_1")
                                                    (("1"
                                                      (rewrite
                                                       "cross_distrib_add_2")
                                                      (("1"
                                                        (expand "^")
                                                        (("1"
                                                          (rewrite*
                                                           "cross_scales_1")
                                                          (("1"
                                                            (rewrite*
                                                             "cross_scales_2")
                                                            (("1"
                                                              (rewrite*
                                                               "cross_self_zero")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (real-props)
                                                                  (("1"
                                                                    (ground)
                                                                    (("1"
                                                                      (cross-mult
                                                                       1)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (cross-mult
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (rewrite
                                                                 "norm_eq_0")
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (flatten)
                                                              (("3"
                                                                (rewrite
                                                                 "norm_eq_0")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (rewrite
                                                               "norm_eq_0")
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (flatten)
                                                            (("3"
                                                              (rewrite
                                                               "norm_eq_0")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (lemma
                                                     "cross_antisymmetric")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "-(^(w - v) + ^(u - v))"
                                                       "w - v")
                                                      (("2"
                                                        (rewrite*
                                                         "neg_cross_neg")
                                                        (("2"
                                                          (replace
                                                           -1
                                                           :hide?
                                                           t)
                                                          (("2"
                                                            (rewrite*
                                                             "cross_distrib_add_2")
                                                            (("2"
                                                              (expand
                                                               "^")
                                                              (("2"
                                                                (rewrite*
                                                                 "cross_scales_2")
                                                                (("1"
                                                                  (rewrite*
                                                                   "cross_self_zero")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (ground)
                                                                      (("1"
                                                                        (move-terms
                                                                         1
                                                                         l)
                                                                        (("1"
                                                                          (elim-unary
                                                                           1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (cross-mult
                                                                               1)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (cross-mult
                                                                         1)
                                                                        (("2"
                                                                          (real-props)
                                                                          (("2"
                                                                            (rewrite
                                                                             "cross_antisymmetric")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (rewrite
                                                                     "norm_eq_0")
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (flatten)
                                                                  (("3"
                                                                    (rewrite
                                                                     "norm_eq_0")
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("4"
                                                                  (flatten)
                                                                  (("4"
                                                                    (rewrite
                                                                     "norm_eq_0")
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("5"
                                                                  (flatten)
                                                                  (("5"
                                                                    (rewrite
                                                                     "norm_eq_0")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "Vector" vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (/= const-decl "boolean" notequal nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (miter_point_hyp const-decl "point_2d" vectors_2d_trig nil)
    (segment_bisect_vector const-decl "Nz_vector" vectors_2d_trig nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (add_cancel formula-decl nil vectors_2D vectors)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (cross_scales_2 formula-decl nil vectors_cross_2d nil)
    (bv skolem-const-decl "Nz_vector" miter_point_sequences nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_gt2 formula-decl nil extra_real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (zero_times1 formula-decl nil real_props nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (neg_cross_neg formula-decl nil vectors_cross_2d nil)
    (cross_distrib_add_2 formula-decl nil vectors_cross_2d nil)
    (norm_diff_nonzero_2 formula-decl nil vectors_cross_2d nil)
    (cross_self_zero formula-decl nil vectors_cross_2d nil)
    (times_div2 formula-decl nil real_props nil)
    (norm_diff_pos formula-decl nil vectors_cross_2d nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cross_distrib_add_1 formula-decl nil vectors_cross_2d nil)
    (parallel_equiv_cross_eq_0 formula-decl nil vectors_cross_2d nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nzk skolem-const-decl "nzreal" miter_point_sequences nil)
    (* const-decl "Vector" vectors_2D vectors)
    (perp_right const-decl "vector_2d" vectors_cross_2d nil)
    (neg_gt formula-decl nil real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cross_antisymmetric formula-decl nil vectors_cross_2d nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (parallel? const-decl "bool" vectors_2D vectors)
    (cross_perp_right_pos formula-decl nil vectors_cross_2d nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (times_div1 formula-decl nil real_props nil)
    (div_times formula-decl nil real_props nil)
    (nonzero_times3 formula-decl nil real_props nil)
    (neg_times_gt formula-decl nil real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (pos_div_gt formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cross_scales_1 formula-decl nil vectors_cross_2d nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (<= const-decl "bool" reals nil)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (u skolem-const-decl "point_2d" miter_point_sequences nil)
    (v skolem-const-decl "point_2d" miter_point_sequences nil)
    (w skolem-const-decl "(three_point_miniseq?(u, v))"
     miter_point_sequences nil)
    (nonparallel_half_angle_sine_pos judgement-tcc nil
     miter_point_sequences nil)
    (miter_point_defns_equiv formula-decl nil vectors_2d_trig nil))
   shostak))
 (miter_point_cross_pos 0
  (miter_point_cross_pos-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin)
      (("" (rewrite "miter_point_defns_equiv")
        (("" (expand "miter_point_hyp")
          (("" (use "miter_half_angle_sine_pos")
            (("" (assert)
              ((""
                (case "S`seq(i) = S`seq(i-1) or S`seq(i) = S`seq(i+1)")
                (("1" (lemma "adj_edge_parallel_endpts_neq")
                  (("1" (inst-cp - "S" "i")
                    (("1" (inst - "S" "i-1") (("1" (ground) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (replace -2 :hide? t)
                    (("2" (assert)
                      (("2"
                        (name-replace "bv"
                         "segment_bisect_vector(S`seq(i),
                                      S`seq(i - 1),
                                      S`seq(1 + i))")
                        (("2" (expand "^")
                          (("2" (assert)
                            (("2" (rewrite "cross_scales_1")
                              (("2"
                                (rewrite "cross_scales_2")
                                (("2"
                                  (real-props)
                                  (("2"
                                    (expand "bv")
                                    (("2"
                                      (expand "segment_bisect_vector")
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (split 3)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (rewrite
                                               "cross_perp_right_pos")
                                              (("1"
                                                (use
                                                 "edge_para_endpts_valid_miter_point_args")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (rewrite
                                                     "parallel_equiv_cross_eq_0"
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (expand
                                                       "parallel?")
                                                      (("1"
                                                        (expand
                                                         "dir_parallel?")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (case
                                                             "nzk > 0")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -1
                                                               +)
                                                              (("2"
                                                                (equate
                                                                 "perp_right(nzk * (S`seq(1 + i) - S`seq(i)))"
                                                                 "nzk * perp_right(S`seq(1 + i) - S`seq(i))")
                                                                (("1"
                                                                  (rewrite
                                                                   "cross_scales_1")
                                                                  (("1"
                                                                    (real-props)
                                                                    (("1"
                                                                      (rewrite
                                                                       "cross_antisymmetric"
                                                                       5)
                                                                      (("1"
                                                                        (real-props)
                                                                        (("1"
                                                                          (hide-all-but
                                                                           5)
                                                                          (("1"
                                                                            (lemma
                                                                             "cross_perp_right_pos")
                                                                            (("1"
                                                                              (inst?)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (split 2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (rewrite
                                                   "cross_distrib_add_1")
                                                  (("1"
                                                    (rewrite
                                                     "cross_distrib_add_2")
                                                    (("1"
                                                      (expand "^")
                                                      (("1"
                                                        (rewrite*
                                                         "cross_scales_1")
                                                        (("1"
                                                          (rewrite*
                                                           "cross_scales_2")
                                                          (("1"
                                                            (rewrite*
                                                             "cross_self_zero")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (real-props)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (lemma
                                                   "cross_antisymmetric")
                                                  (("2"
                                                    (inst
                                                     -
                                                     "-(^(S`seq(1 + i) - S`seq(i)) + ^(S`seq(i - 1) - S`seq(i)))"
                                                     "S`seq(1 + i) - S`seq(i)")
                                                    (("2"
                                                      (rewrite*
                                                       "neg_cross_neg")
                                                      (("2"
                                                        (replace
                                                         -1
                                                         :hide?
                                                         t)
                                                        (("2"
                                                          (rewrite*
                                                           "cross_distrib_add_2")
                                                          (("2"
                                                            (expand
                                                             "^")
                                                            (("2"
                                                              (rewrite*
                                                               "cross_scales_2")
                                                              (("2"
                                                                (rewrite*
                                                                 "cross_self_zero")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (ground)
                                                                    (("1"
                                                                      (move-terms
                                                                       1
                                                                       l)
                                                                      (("1"
                                                                        (elim-unary
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (cross-mult
                                                                             1)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (cross-mult
                                                                       1)
                                                                      (("2"
                                                                        (real-props)
                                                                        (("2"
                                                                          (rewrite
                                                                           "cross_antisymmetric")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "Vector" vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (miter_point_hyp const-decl "point_2d" vectors_2d_trig nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (add_cancel formula-decl nil vectors_2D vectors)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (<= const-decl "bool" reals nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cross_scales_1 formula-decl nil vectors_cross_2d nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (pos_div_gt formula-decl nil real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (neg_times_gt formula-decl nil real_props nil)
    (nonzero_times3 formula-decl nil real_props nil)
    (div_times formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (cross_perp_right_pos formula-decl nil vectors_cross_2d nil)
    (parallel? const-decl "bool" vectors_2D vectors)
    (cross_antisymmetric formula-decl nil vectors_cross_2d nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (neg_gt formula-decl nil real_props nil)
    (perp_right const-decl "vector_2d" vectors_cross_2d nil)
    (nzk skolem-const-decl "nzreal" miter_point_sequences nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (parallel_equiv_cross_eq_0 formula-decl nil vectors_cross_2d nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (edge_para_endpts_valid_miter_point_args formula-decl nil
     segment_endpoint_sequences nil)
    (cross_distrib_add_1 formula-decl nil vectors_cross_2d nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (norm_diff_pos formula-decl nil vectors_cross_2d nil)
    (times_div2 formula-decl nil real_props nil)
    (cross_self_zero formula-decl nil vectors_cross_2d nil)
    (cross_distrib_add_2 formula-decl nil vectors_cross_2d nil)
    (neg_cross_neg formula-decl nil vectors_cross_2d nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (div_mult_pos_gt2 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (- const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (bv skolem-const-decl "Nz_vector" miter_point_sequences nil)
    (cross_scales_2 formula-decl nil vectors_cross_2d nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (segment_bisect_vector const-decl "Nz_vector" vectors_2d_trig nil)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (miter_half_angle_sine_pos formula-decl nil miter_point_sequences
     nil)
    (miter_point_defns_equiv formula-decl nil vectors_2d_trig nil))
   shostak))
 (norm_ratio_miter_pt_seg_to_seg_TCC1 0
  (norm_ratio_miter_pt_seg_to_seg_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (rewrite "norm_eq_0")
      (("" (typepred "S")
        (("" (inst - "i") (("" (ground) nil nil)) nil)) nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (norm_ratio_miter_pt_seg_to_seg subtype
    "vectors_2D.norm((vectors_2D.-)(miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.i, 1)), miter_point_sequences.S`seq(miter_point_sequences.i)))"
    "nznum"))
  (norm_ratio_miter_pt_seg_to_seg_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (norm_ratio_miter_pt_seg_to_seg subtype
    "vectors_2D.norm((vectors_2D.-)(miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.i, 1)), miter_point_sequences.S`seq(miter_point_sequences.i)))"
    "nznum")))
 (norm_ratio_miter_pt_seg_to_seg 0
  (norm_ratio_miter_pt_seg_to_seg-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin*)
      (("" (lemma "miter_pt_to_vertex_dist_lt_edge_length")
        (("" (inst-cp - "S" "i" "d")
          (("" (inst - "S" "1 + i" "d")
            (("" (assert)
              (("" (flatten)
                (("" (inst - "i")
                  (("" (inst - "i")
                    (("" (use "miter_pt_segment_parallel_to_edge")
                      (("" (assert)
                        (("" (replace -8 :dir rl)
                          (("" (replace -7 :dir rl)
                            (("" (expand "dir_parallel?")
                              ((""
                                (skeep)
                                ((""
                                  (case
                                   "norm(S`seq(1 + i) - S`seq(i)) = pk * norm(m2 - m1)")
                                  (("1"
                                    (lemma "norm_add_le")
                                    (("1"
                                      (inst-cp
                                       -
                                       "m2 - S`seq(1 + i)"
                                       "S`seq(1 + i) - m1")
                                      (("1"
                                        (inst-cp
                                         -
                                         "S`seq(1 + i) - S`seq(i)"
                                         "S`seq(i) - m1")
                                        (("1"
                                          (inst-cp
                                           -
                                           "S`seq(1 + i) - m2"
                                           "m2 - S`seq(i)")
                                          (("1"
                                            (inst
                                             -
                                             "m2 - m1"
                                             "m1 - S`seq(i)")
                                            (("1"
                                              (case
                                               "forall (u, v, w: vector_2d): u - v + (v - w) = u - w")
                                              (("1"
                                                (rewrite -1 -2)
                                                (("1"
                                                  (rewrite -1 -3)
                                                  (("1"
                                                    (rewrite -1 -4)
                                                    (("1"
                                                      (rewrite -1 -5)
                                                      (("1"
                                                        (replace -7)
                                                        (("1"
                                                          (rewrite
                                                           "norm_scal")
                                                          (("1"
                                                            (expand
                                                             "abs")
                                                            (("1"
                                                              (real-props)
                                                              (("1"
                                                                (div-by
                                                                 -12
                                                                 "norm(m2 - m1)")
                                                                (("1"
                                                                  (equate
                                                                   "(m2)"
                                                                   "m2"
                                                                   (assert))
                                                                  (("1"
                                                                    (equate
                                                                     "(m1)"
                                                                     "m1"
                                                                     (assert))
                                                                    (("1"
                                                                      (real-props)
                                                                      (("1"
                                                                        (cancel-by
                                                                         -11
                                                                         "norm(m2 - m1)")
                                                                        (("1"
                                                                          (rewrite
                                                                           "norm_eq_0")
                                                                          (("1"
                                                                            (use
                                                                             "successive_miter_points_neq")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (equate
                                                                           "norm(S`seq(1 + i) - m2)"
                                                                           "norm(m2 - S`seq(1 + i))"
                                                                           (rewrite
                                                                            "norm_sym"))
                                                                          (("2"
                                                                            (equate
                                                                             "norm(S`seq(1 + i) - m1)"
                                                                             "norm(m1 - S`seq(1 + i))"
                                                                             (rewrite
                                                                              "norm_sym"))
                                                                            (("2"
                                                                              (equate
                                                                               "norm(S`seq(i) - m1)"
                                                                               "norm(m1 - S`seq(i))"
                                                                               (rewrite
                                                                                "norm_sym"))
                                                                              (("2"
                                                                                (div-by
                                                                                 -1
                                                                                 "pk")
                                                                                (("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (real-props)
                                                                                    (("2"
                                                                                      (case
                                                                                       "norm(m2 - m1) <= norm(m2 - S`seq(1 + i)) +
   norm(m1 - S`seq(i)) + pk * norm(m2 - m1)")
                                                                                      (("1"
                                                                                        (case
                                                                                         "pk * norm(m2 - m1) <= norm(m2 - S`seq(1 + i)) +
   norm(m1 - S`seq(i)) + norm(m2 - m1)")
                                                                                        (("1"
                                                                                          (div-by
                                                                                           -11
                                                                                           "6")
                                                                                          (("1"
                                                                                            (div-by
                                                                                             -13
                                                                                             "6")
                                                                                            (("1"
                                                                                              (case
                                                                                               "pk * norm(m2 - m1) <= pk * norm(m2 - m1) / 6 +
   pk * norm(m2 - m1) / 6 + norm(m2 - m1)")
                                                                                              (("1"
                                                                                                (cancel-by
                                                                                                 -1
                                                                                                 "norm(m2 - m1)")
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "norm(m2 - m1) <= pk * norm(m2 - m1) / 6 +
                      pk * norm(m2 - m1) / 6 + pk * norm(m2 - m1)")
                                                                                                  (("1"
                                                                                                    (cancel-by
                                                                                                     -1
                                                                                                     "norm(m2 - m1)")
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (rewrite
                                                                     "norm_eq_0")
                                                                    (("2"
                                                                      (use
                                                                       "successive_miter_points_neq")
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (replace -1)
                                    (("2"
                                      (rewrite "norm_scal")
                                      (("2"
                                        (expand "abs")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "Vector" vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (<= const-decl "bool" reals nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (norm_diff_nonzero_2 formula-decl nil vectors_cross_2d nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (miter_pt_segment_parallel_to_edge formula-decl nil
     miter_point_sequences nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (norm_scal formula-decl nil vectors_2D vectors)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (div_cancel4 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_cancel3 formula-decl nil real_props nil)
    (norm_sym formula-decl nil vectors_2D vectors)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (div_386 skolem-const-decl "nnreal" miter_point_sequences nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cross_mult formula-decl nil real_props nil)
    (div_times formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (div_385 skolem-const-decl "nnreal" miter_point_sequences nil)
    (norm_diff_pos formula-decl nil vectors_cross_2d nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (times_div1 formula-decl nil real_props nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (successive_miter_points_neq formula-decl nil miter_point_sequences
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (div_384 skolem-const-decl "nnreal" miter_point_sequences nil)
    (div_simp formula-decl nil real_props nil)
    (m2 skolem-const-decl "point_2d" miter_point_sequences nil)
    (m1 skolem-const-decl "point_2d" miter_point_sequences nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (norm_add_le formula-decl nil vectors_2D vectors)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (miter_pt_to_vertex_dist_lt_edge_length formula-decl nil
     miter_point_sequences nil))
   shostak))
 (norm_ratio_miter_pt_seg_to_seg_wrap_TCC1 0
  (norm_ratio_miter_pt_seg_to_seg_wrap_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (typepred "S")
      (("" (inst - "S`length - 2")
        (("" (rewrite "norm_eq_0") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (norm_ratio_miter_pt_seg_to_seg_wrap subtype
    "vectors_2D.norm((vectors_2D.-)(miter_point_sequences.S`seq(miter_point_sequences.lbi), miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2))))"
    "nznum"))
  (norm_ratio_miter_pt_seg_to_seg_wrap_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (norm_ratio_miter_pt_seg_to_seg_wrap subtype
    "vectors_2D.norm((vectors_2D.-)(miter_point_sequences.S`seq(miter_point_sequences.lbi), miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2))))"
    "nznum")))
 (norm_ratio_miter_pt_seg_to_seg_wrap 0
  (norm_ratio_miter_pt_seg_to_seg_wrap-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin*)
      (("" (lemma "miter_pt_to_vtx_dist_lt_edge_len_wrap_2")
        (("" (inst - "S" "d")
          (("" (lemma "miter_pt_to_vtx_dist_lt_edge_len_wrap")
            (("" (inst - "S" "d")
              (("" (assert)
                (("" (flatten)
                  (("" (assert)
                    (("" (flatten)
                      (("" (replace -9 :dir rl)
                        ((""
                          (use "four_pt_miniseq_in_endpt_seq_wrap_2")
                          (("" (assert)
                            (("" (flatten)
                              ((""
                                (lemma
                                 "miter_pt_segment_parallel_to_orig")
                                ((""
                                  (inst
                                   -
                                   "S`seq(S`length - 3)"
                                   "S`seq(S`length - 2)"
                                   "S`seq(lbi)"
                                   "S`seq(1 + lbi)"
                                   "d")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -12 :dir rl)
                                      (("1"
                                        (replace -11 :dir rl)
                                        (("1"
                                          (replace -10 :dir rl)
                                          (("1"
                                            (expand "dir_parallel?")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (case
                                                 "norm(S`seq(lbi) - S`seq(S`length - 2)) = pk * norm((m2) - (m1))")
                                                (("1"
                                                  (lemma "norm_add_le")
                                                  (("1"
                                                    (inst-cp
                                                     -
                                                     "m2 - S`seq(lbi)"
                                                     "S`seq(lbi) - m1")
                                                    (("1"
                                                      (inst-cp
                                                       -
                                                       "S`seq(lbi) - S`seq(S`length - 2)"
                                                       "S`seq(S`length - 2) - m1")
                                                      (("1"
                                                        (inst-cp
                                                         -
                                                         "S`seq(lbi) - m2"
                                                         "m2 - S`seq(S`length - 2)")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "m2 - m1"
                                                           "m1 - S`seq(S`length - 2)")
                                                          (("1"
                                                            (case
                                                             "forall (u, v, w: vector_2d): u - v + (v - w) = u - w")
                                                            (("1"
                                                              (rewrite
                                                               -1
                                                               -2)
                                                              (("1"
                                                                (rewrite
                                                                 -1
                                                                 -3)
                                                                (("1"
                                                                  (rewrite
                                                                   -1
                                                                   -4)
                                                                  (("1"
                                                                    (rewrite
                                                                     -1
                                                                     -5)
                                                                    (("1"
                                                                      (replace
                                                                       -7)
                                                                      (("1"
                                                                        (rewrite
                                                                         "norm_scal")
                                                                        (("1"
                                                                          (expand
                                                                           "abs")
                                                                          (("1"
                                                                            (real-props)
                                                                            (("1"
                                                                              (cancel-by
                                                                               -15
                                                                               "norm(m2 - m1)")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "norm_eq_0")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "successive_miter_pair_neq")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -
                                                                                     "S`seq(S`length - 3)"
                                                                                     "S`seq(S`length - 2)"
                                                                                     "S`seq(lbi)"
                                                                                     "S`seq(1 + lbi)"
                                                                                     "d")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (equate
                                                                                 "(m2)"
                                                                                 "m2"
                                                                                 (assert))
                                                                                (("2"
                                                                                  (equate
                                                                                   "(m1)"
                                                                                   "m1"
                                                                                   (assert))
                                                                                  (("2"
                                                                                    (equate
                                                                                     "norm(S`seq(lbi) - m2)"
                                                                                     "norm(m2 - S`seq(lbi))"
                                                                                     (rewrite
                                                                                      "norm_sym"))
                                                                                    (("2"
                                                                                      (equate
                                                                                       "norm(S`seq(lbi) - m1)"
                                                                                       "norm(m1 - S`seq(lbi))"
                                                                                       (rewrite
                                                                                        "norm_sym"))
                                                                                      (("2"
                                                                                        (equate
                                                                                         "norm(S`seq(S`length - 2) - m1)"
                                                                                         "norm(m1 - S`seq(S`length - 2))"
                                                                                         (rewrite
                                                                                          "norm_sym"))
                                                                                        (("2"
                                                                                          (div-by
                                                                                           -1
                                                                                           "pk")
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (real-props)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "norm(m2 - m1) <= norm(m2 - S`seq(lbi)) +
                                                                          norm(m1 - S`seq(S`length - 2)) + pk * norm(m2 - m1)")
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "pk * norm(m2 - m1) <= norm(m2 - S`seq(lbi)) +
                                                                                    norm(m1 - S`seq(S`length - 2)) + norm(m2 - m1)")
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "pk * norm(m2 - m1) <= pk * norm(m2 - m1) / 6 +
                                                                                            pk * norm(m2 - m1) / 6 + norm(m2 - m1)")
                                                                                                    (("1"
                                                                                                      (cancel-by
                                                                                                       -1
                                                                                                       "norm(m2 - m1)")
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "norm(m2 - m1) <= pk * norm(m2 - m1) / 6 +
                                                                                                                                     pk * norm(m2 - m1) / 6 + pk * norm(m2 - m1)")
                                                                                                        (("1"
                                                                                                          (cancel-by
                                                                                                           -1
                                                                                                           "norm(m2 - m1)")
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (cancel-by
                                                                                                             1
                                                                                                             "norm(m2 - m1)")
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (cancel-by
                                                                                                         1
                                                                                                         "norm(m2 - m1)")
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -1)
                                                  (("2"
                                                    (rewrite
                                                     "norm_scal")
                                                    (("2"
                                                      (expand "abs")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (norm_diff_nonzero_2 formula-decl nil vectors_cross_2d nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (<= const-decl "bool" reals nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (four_pt_miniseq_in_endpt_seq_wrap_2 formula-decl nil
     miter_point_sequences nil)
    (four_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (S skolem-const-decl "edge_parallel_endpoint_seq"
     miter_point_sequences nil)
    (lbi skolem-const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" miter_point_sequences nil)
    (four_point_offset_dist? const-decl "bool"
     segment_endpoint_sequences nil)
    (d skolem-const-decl "miter_seq_offset_dist(S)"
       miter_point_sequences nil)
    (norm_add_le formula-decl nil vectors_2D vectors)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div_387 skolem-const-decl "nnreal" miter_point_sequences nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (successive_miter_pair_neq formula-decl nil miter_point_sequences
     nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (both_sides_div1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_388 skolem-const-decl "nnreal" miter_point_sequences nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (zero_times1 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (div_times formula-decl nil real_props nil)
    (cross_mult formula-decl nil real_props nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (norm_diff_pos formula-decl nil vectors_cross_2d nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (div_389 skolem-const-decl "nnreal" miter_point_sequences nil)
    (norm_sym formula-decl nil vectors_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (div_cancel4 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (norm_scal formula-decl nil vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (miter_pt_segment_parallel_to_orig formula-decl nil
     miter_point_sequences nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (miter_pt_to_vtx_dist_lt_edge_len_wrap formula-decl nil
     miter_point_sequences nil)
    (miter_pt_to_vtx_dist_lt_edge_len_wrap_2 formula-decl nil
     miter_point_sequences nil))
   shostak))
 (miter_pt_offset_with_bounded_shift_1_TCC1 0
  (miter_pt_offset_with_bounded_shift_1_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (typepred "S") (("" (inst - "i") (("" (ground) nil nil)) nil))
      nil))
    nil)
   ((edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (miter_pt_offset_with_bounded_shift_1 subtype
    "(vectors_2D.-)(miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.i, 1)), miter_point_sequences.S`seq(miter_point_sequences.i))"
    "Nz_vector"))
  (miter_pt_offset_with_bounded_shift_1_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_pt_offset_with_bounded_shift_1 subtype
    "(vectors_2D.-)(miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.i, 1)), miter_point_sequences.S`seq(miter_point_sequences.i))"
    "Nz_vector")))
 (miter_pt_offset_with_bounded_shift_1_TCC2 0
  (miter_pt_offset_with_bounded_shift_1_TCC2-2 nil 3874129021
   ("" (skeep)
    (("" (hide -1)
      (("" (typepred "S")
        (("" (inst - "i")
          (("" (hide-all-but (-6 1))
            (("" (use "perp_left_nzvect_neq_zero")
              (("1" (ground) nil nil) ("2" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sub_eq_zero formula-decl nil vectors_2D vectors)
    (perp_left_nzvect_neq_zero formula-decl nil vectors_cross_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (S skolem-const-decl "edge_parallel_endpoint_seq"
     miter_point_sequences nil)
    (i skolem-const-decl "{i: posnat | i < S`length - 1}"
       miter_point_sequences nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil))
   shostak
   (miter_pt_offset_with_bounded_shift_1 subtype
    "vectors_cross_2d.perp_left((vectors_2D.-)(miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.i, 1)), miter_point_sequences.S`seq(miter_point_sequences.i)))"
    "Nz_vector"))
  (miter_pt_offset_with_bounded_shift_1_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_pt_offset_with_bounded_shift_1 subtype
    "vectors_cross_2d.perp_left((vectors_2D.-)(miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.i, 1)), miter_point_sequences.S`seq(miter_point_sequences.i)))"
    "Nz_vector")))
 (miter_pt_offset_with_bounded_shift_1 0
  (miter_pt_offset_with_bounded_shift_1-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin)
      (("" (expand "miter_point")
        ((""
          (name-replace "cs"
           "half_angle_vcos(^(S`seq(i - 1) - S`seq(i)),
                          ^(S`seq(1 + i) - S`seq(i))) /
           half_angle_vsin(^(S`seq(i - 1) - S`seq(i)),
                           ^(S`seq(1 + i) - S`seq(i)))")
          (("" (inst + "d * cs")
            (("" (ground)
              (("" (hide -)
                (("" (equate "abs(d * cs)" "d * abs(cs)")
                  (("1" (expand "cs")
                    (("1"
                      (equate
                       "abs(half_angle_vcos(^(S`seq(i - 1) - S`seq(i)),
                           ^(S`seq(1 + i) - S`seq(i)))
            /
            half_angle_vsin(^(S`seq(i - 1) - S`seq(i)),
                            ^(S`seq(1 + i) - S`seq(i))))"
                       "abs(half_angle_vcos(^(S`seq(i - 1) - S`seq(i)),
                           ^(S`seq(1 + i) - S`seq(i))))
            /
            half_angle_vsin(^(S`seq(i - 1) - S`seq(i)),
                            ^(S`seq(1 + i) - S`seq(i)))")
                      (("1" (use "min_miter_sine_le_each_sine")
                        (("1" (assert)
                          (("1"
                            (case "d *
       (abs(half_angle_vcos(^(S`seq(i - 1) - S`seq(i)),
                            ^(S`seq(1 + i) - S`seq(i))))
         /
         half_angle_vsin(^(S`seq(i - 1) - S`seq(i)),
                         ^(S`seq(1 + i) - S`seq(i)))) <=
      d *
       abs(half_angle_vcos(^(S`seq(i - 1) - S`seq(i)),
                            ^(S`seq(1 + i) - S`seq(i))))
         / min_miter_sine(S)")
                            (("1"
                              (case "d *
        abs(half_angle_vcos(^(S`seq(i - 1) - S`seq(i)),
                            ^(S`seq(1 + i) - S`seq(i))))
        / min_miter_sine(S) <= norm(S`seq(1 + i) - S`seq(i)) / 6")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (cross-mult 1)
                                  (("2"
                                    (typepred "d")
                                    (("2"
                                      (expand "max_miter_offset")
                                      (("2"
                                        (use
                                         "min_seg_sep_bounds_seg_length")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "length")
                                            (("2"
                                              (mult-by
                                               -1
                                               "min_miter_sine(S)")
                                              (("2"
                                                (cross-mult -4)
                                                (("2"
                                                  (case
                                                   "abs(half_angle_vcos(^(S`seq(i - 1) - S`seq(i)),
                            ^(S`seq(1 + i) - S`seq(i)))) <= 1")
                                                  (("1"
                                                    (case
                                                     "6 *
       (abs(half_angle_vcos(^(S`seq(i - 1) - S`seq(i)),
                            ^(S`seq(1 + i) - S`seq(i))))
         * d) <= 6 * d")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (-1 1))
                                                      (("2"
                                                        (name-replace
                                                         "ac"
                                                         "abs(half_angle_vcos(^(S`seq(i - 1) - S`seq(i)),
                          ^(S`seq(1 + i) - S`seq(i))))")
                                                        (("2"
                                                          (mult-cases
                                                           1)
                                                          (("2"
                                                            (mult-cases
                                                             1
                                                             :mult-op
                                                             1*)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (expand "abs")
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (cross-mult 1)
                                (("2"
                                  (cancel-by 1 "d")
                                  (("2"
                                    (mult-cases 2)
                                    (("2"
                                      (expand "abs" 1)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (use "miter_half_angle_sine_pos")
                          (("2" (assert)
                            (("2" (expand "abs")
                              (("2"
                                (assert)
                                (("2"
                                  (apply (repeat (lift-if)))
                                  (("2"
                                    (assert)
                                    (("2"
                                      (ground)
                                      (("1" (cross-mult -1) nil nil)
                                       ("2" (cross-mult 1) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (grind)
                      (("1" (mult-cases -1) nil nil)
                       ("2" (mult-cases 1) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "Vector" vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (<= const-decl "bool" reals nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (half_angle_vcos const-decl "{x: real | -1 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (min_segment_sep const-decl "posreal" segment_endpoint_sequences
     nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (length const-decl "posreal" segments_2d nil)
    (min_seg_sep_bounds_seg_length formula-decl nil
     segment_endpoint_sequences nil)
    (min_miter_sine const-decl "posreal" miter_point_sequences nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (min_miter_sine_le_each_sine formula-decl nil miter_point_sequences
     nil)
    (miter_half_angle_sine_pos formula-decl nil miter_point_sequences
     nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (cs skolem-const-decl "real" miter_point_sequences nil)
    (neg_times_lt formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (miter_pt_offset_with_bounded_shift_2_TCC1 0
  (miter_pt_offset_with_bounded_shift_2_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (miter_pt_offset_with_bounded_shift_2 subtype
    "(number_fields.+)(miter_point_sequences.i, 1)" "below[S`length]"))
  (miter_pt_offset_with_bounded_shift_2_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_pt_offset_with_bounded_shift_2 subtype
    "(number_fields.+)(miter_point_sequences.i, 1)"
    "below[S`length]")))
 (miter_pt_offset_with_bounded_shift_2_TCC2 0
  (miter_pt_offset_with_bounded_shift_2_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (miter_pt_offset_with_bounded_shift_2 subtype
    "miter_point_sequences.i" "below[S`length]"))
  (miter_pt_offset_with_bounded_shift_2_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_pt_offset_with_bounded_shift_2 subtype
    "miter_point_sequences.i" "below[S`length]")))
 (miter_pt_offset_with_bounded_shift_2_TCC3 0
  (miter_pt_offset_with_bounded_shift_2_TCC3-2 nil 3874129021
   ("" (skeep) (("" (typepred "S") (("" (inst - "i") nil nil)) nil))
    nil)
   ((edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (miter_pt_offset_with_bounded_shift_2 subtype
    "miter_point_sequences.S`seq(miter_point_sequences.i)"
    "{p: vectors_cross_2d.point_2d | (booleans.NOT)(p = miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.i)))}"))
  (miter_pt_offset_with_bounded_shift_2_TCC3-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_pt_offset_with_bounded_shift_2 subtype
    "miter_point_sequences.S`seq(miter_point_sequences.i)"
    "{p: vectors_cross_2d.point_2d | (booleans.NOT)(p = miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.i)))}")))
 (miter_pt_offset_with_bounded_shift_2_TCC4 0
  (miter_pt_offset_with_bounded_shift_2_TCC4-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (miter_pt_offset_with_bounded_shift_2 subtype
    "(number_fields.+)(miter_point_sequences.i, 2)" "below[S`length]"))
  (miter_pt_offset_with_bounded_shift_2_TCC4-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_pt_offset_with_bounded_shift_2 subtype
    "(number_fields.+)(miter_point_sequences.i, 2)"
    "below[S`length]")))
 (miter_pt_offset_with_bounded_shift_2_TCC5 0
  (miter_pt_offset_with_bounded_shift_2_TCC5-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "edge_para_endpts_valid_miter_point_args")
      (("" (inst - "S" "i + 1") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((edge_para_endpts_valid_miter_point_args formula-decl nil
     segment_endpoint_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (miter_pt_offset_with_bounded_shift_2 subtype
    "miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.i, 2))"
    "{p: vectors_cross_2d.point_2d | booleans.AND((booleans.NOT)(p = miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.i))), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.S`seq(miter_point_sequences.i), miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.i))), (vectors_2D.-)(p, miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.i))))))}"))
  (miter_pt_offset_with_bounded_shift_2_TCC5-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_pt_offset_with_bounded_shift_2 subtype
    "miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.i, 2))"
    "{p: vectors_cross_2d.point_2d | booleans.AND((booleans.NOT)(p = miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.i))), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.S`seq(miter_point_sequences.i), miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.i))), (vectors_2D.-)(p, miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.i))))))}")))
 (miter_pt_offset_with_bounded_shift_2_TCC6 0
  (miter_pt_offset_with_bounded_shift_2_TCC6-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "adj_edge_parallel_endpts_neq")
      (("" (inst - "S" "i") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (miter_pt_offset_with_bounded_shift_2 subtype
    "(vectors_2D.-)(miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.i, 1)), miter_point_sequences.S`seq(miter_point_sequences.i))"
    "Nz_vector"))
  (miter_pt_offset_with_bounded_shift_2_TCC6-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_pt_offset_with_bounded_shift_2 subtype
    "(vectors_2D.-)(miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.i, 1)), miter_point_sequences.S`seq(miter_point_sequences.i))"
    "Nz_vector")))
 (miter_pt_offset_with_bounded_shift_2_TCC7 0
  (miter_pt_offset_with_bounded_shift_2_TCC7-2 nil 3874129021
   ("" (skeep)
    (("" (use "perp_left_nzvect_neq_zero")
      (("1" (ground) nil nil)
       ("2" (lemma "adj_edge_parallel_endpts_neq")
        (("2" (inst - "S" "i") (("2" (ground) nil nil)) nil)) nil))
      nil))
    nil)
   ((sub_eq_zero formula-decl nil vectors_2D vectors)
    (perp_left_nzvect_neq_zero formula-decl nil vectors_cross_2d nil)
    (- const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (S skolem-const-decl "edge_parallel_endpoint_seq"
     miter_point_sequences nil)
    (i skolem-const-decl "below(S`length - 2)" miter_point_sequences
       nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil))
   shostak
   (miter_pt_offset_with_bounded_shift_2 subtype
    "vectors_cross_2d.perp_left((vectors_2D.-)(miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.i, 1)), miter_point_sequences.S`seq(miter_point_sequences.i)))"
    "Nz_vector"))
  (miter_pt_offset_with_bounded_shift_2_TCC7-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_pt_offset_with_bounded_shift_2 subtype
    "vectors_cross_2d.perp_left((vectors_2D.-)(miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.i, 1)), miter_point_sequences.S`seq(miter_point_sequences.i)))"
    "Nz_vector")))
 (miter_pt_offset_with_bounded_shift_2 0
  (miter_pt_offset_with_bounded_shift_2-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin)
      (("" (rewrite "miter_point_from_prev_segment")
        (("1" (expand "miter_point_prev")
          (("1"
            (name-replace "cs"
             "half_angle_vcos(^(S`seq(i) - S`seq(1 + i)),
                          ^(S`seq(2 + i) - S`seq(1 + i)))
           /
           half_angle_vsin(^(S`seq(i) - S`seq(1 + i)),
                           ^(S`seq(2 + i) - S`seq(1 + i)))")
            (("1"
              (equate "perp_right(S`seq(i) - S`seq(1 + i))"
               "perp_left(S`seq(1 + i) - S`seq(i))")
              (("1"
                (equate
                 "S`seq(1 + i) + d * cs * ^(S`seq(i) - S`seq(1 + i))"
                 "S`seq(1 + i) - d * cs * ^(S`seq(1 + i) - S`seq(i))")
                (("1" (inst + "-d * cs")
                  (("1" (ground)
                    (("1" (replace -1 1 :hide? t)
                      (("1" (cancel-add 1)
                        (("1"
                          (name-replace "v"
                           "^(S`seq(1 + i) - S`seq(i))")
                          (("1" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (equate "abs(-d * cs)" "d * abs(cs)")
                      (("1" (expand "cs")
                        (("1"
                          (equate
                           "abs(half_angle_vcos(^(S`seq(i) - S`seq(1 + i)),
                           ^(S`seq(2 + i) - S`seq(1 + i)))
            /
            half_angle_vsin(^(S`seq(i) - S`seq(1 + i)),
                            ^(S`seq(2 + i) - S`seq(1 + i))))"
                           "abs(half_angle_vcos(^(S`seq(i) - S`seq(1 + i)),
                           ^(S`seq(2 + i) - S`seq(1 + i))))
            /
            half_angle_vsin(^(S`seq(i) - S`seq(1 + i)),
                            ^(S`seq(2 + i) - S`seq(1 + i)))")
                          (("1" (lemma "min_miter_sine_le_each_sine")
                            (("1" (inst - "S" "i + 1")
                              (("1"
                                (assert)
                                (("1"
                                  (case
                                   "d *
       (abs(half_angle_vcos(^(S`seq(i) - S`seq(1 + i)),
                            ^(S`seq(2 + i) - S`seq(1 + i))))
         /
         half_angle_vsin(^(S`seq(i) - S`seq(1 + i)),
                         ^(S`seq(2 + i) - S`seq(1 + i)))) <=
  d *
       (abs(half_angle_vcos(^(S`seq(i) - S`seq(1 + i)),
                            ^(S`seq(2 + i) - S`seq(1 + i))))
         / min_miter_sine(S))")
                                  (("1"
                                    (case
                                     "d *
       abs(half_angle_vcos(^(S`seq(i) - S`seq(1 + i)),
                            ^(S`seq(2 + i) - S`seq(1 + i)))) 
 / min_miter_sine(S) <= norm(S`seq(1 + i) - S`seq(i)) / 6")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (cross-mult 1)
                                        (("2"
                                          (typepred "d")
                                          (("2"
                                            (expand "max_miter_offset")
                                            (("2"
                                              (use
                                               "min_seg_sep_bounds_seg_length")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "length")
                                                  (("2"
                                                    (mult-by
                                                     -1
                                                     "min_miter_sine(S)")
                                                    (("2"
                                                      (cross-mult -4)
                                                      (("2"
                                                        (case
                                                         "abs(half_angle_vcos(^(S`seq(i) - S`seq(1 + i)),
                            ^(S`seq(2 + i) - S`seq(1 + i)))) <= 1")
                                                        (("1"
                                                          (case
                                                           "6 *
       (abs(half_angle_vcos(^(S`seq(i) - S`seq(1 + i)),
                            ^(S`seq(2 + i) - S`seq(1 + i))))
         * d) <= 6 * d")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (-1 1))
                                                            (("2"
                                                              (name-replace
                                                               "ac"
                                                               "half_angle_vcos(^(S`seq(i) - S`seq(1 + i)),
                          ^(S`seq(2 + i) - S`seq(1 + i)))")
                                                              (("2"
                                                                (cancel-by
                                                                 1
                                                                 "6")
                                                                (("2"
                                                                  (mult-cases
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     "abs"
                                                                     1
                                                                     (1
                                                                      3))
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "abs")
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (cross-mult 1)
                                      (("2"
                                        (cancel-by 1 "d")
                                        (("2"
                                          (mult-cases 2)
                                          (("2"
                                            (expand "abs" 1)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (lemma "miter_half_angle_sine_pos")
                              (("2"
                                (inst - "S" "i + 1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "abs")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (apply (repeat (lift-if)))
                                        (("2"
                                          (assert)
                                          (("2"
                                            (ground)
                                            (("1"
                                              (cross-mult -1)
                                              nil
                                              nil)
                                             ("2"
                                              (cross-mult 1)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (grind)
                          (("1" (mult-cases -1) nil nil)
                           ("2" (mult-cases 1) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (cancel-add 1)
                    (("2" (expand "^")
                      (("2" (rewrite "norm_sym")
                        (("2"
                          (name-replace "n"
                           "norm(S`seq(1 + i) - S`seq(i))")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (typepred "S")
                  (("3" (inst - "i") (("3" (ground) nil nil)) nil))
                  nil))
                nil)
               ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (use "three_pt_miniseq_in_endpt_seq")
          (("2" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   ((- const-decl "Vector" vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (<= const-decl "bool" reals nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (three_pt_miniseq_in_endpt_seq formula-decl nil
     miter_point_sequences nil)
    (miter_point_prev const-decl "point_2d" vectors_2d_trig nil)
    (perp_right const-decl "vector_2d" vectors_cross_2d nil)
    (norm_sym formula-decl nil vectors_2D vectors)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (min_miter_sine const-decl "posreal" miter_point_sequences nil)
    (min_seg_sep_bounds_seg_length formula-decl nil
     segment_endpoint_sequences nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (length const-decl "posreal" segments_2d nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (even? const-decl "bool" integers nil)
    (even_posnat nonempty-type-eq-decl nil naturalnumbers nil)
    (min_segment_sep const-decl "posreal" segment_endpoint_sequences
     nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (min_miter_sine_le_each_sine formula-decl nil miter_point_sequences
     nil)
    (miter_half_angle_sine_pos formula-decl nil miter_point_sequences
     nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (cs skolem-const-decl "real" miter_point_sequences nil)
    (neg_times_lt formula-decl nil real_props nil)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "Vector" vectors_2D vectors)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (half_angle_vcos const-decl "{x: real | -1 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (miter_point_from_prev_segment formula-decl nil
     miter_point_sequences nil)
    (three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil))
   shostak))
 (miter_pt_offset_with_bounded_shift_wrap_TCC1 0
  (miter_pt_offset_with_bounded_shift_wrap_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (typepred "S")
      (("" (inst - "S`length - 2") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (miter_pt_offset_with_bounded_shift_wrap subtype
    "(vectors_2D.-)(miter_point_sequences.S`seq(miter_point_sequences.lbi), miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2)))"
    "Nz_vector"))
  (miter_pt_offset_with_bounded_shift_wrap_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_pt_offset_with_bounded_shift_wrap subtype
    "(vectors_2D.-)(miter_point_sequences.S`seq(miter_point_sequences.lbi), miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2)))"
    "Nz_vector")))
 (miter_pt_offset_with_bounded_shift_wrap_TCC2 0
  (miter_pt_offset_with_bounded_shift_wrap_TCC2-2 nil 3874129021
   ("" (skeep)
    (("" (typepred "S")
      (("" (inst - "S`length - 2")
        (("" (assert)
          (("" (replace -7)
            (("" (lemma "perp_left_nzvect_neq_zero")
              (("" (inst - "S`seq(S`length - 1) - S`seq(S`length - 2)")
                (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (perp_left_nzvect_neq_zero formula-decl nil vectors_cross_2d nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (miter_pt_offset_with_bounded_shift_wrap subtype
    "vectors_cross_2d.perp_left((vectors_2D.-)(miter_point_sequences.S`seq(miter_point_sequences.lbi), miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2))))"
    "Nz_vector"))
  (miter_pt_offset_with_bounded_shift_wrap_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_pt_offset_with_bounded_shift_wrap subtype
    "vectors_cross_2d.perp_left((vectors_2D.-)(miter_point_sequences.S`seq(miter_point_sequences.lbi), miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2))))"
    "Nz_vector")))
 (miter_pt_offset_with_bounded_shift_wrap 0
  (miter_pt_offset_with_bounded_shift_wrap-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin)
      (("" (flatten)
        (("" (skoletin)
          (("" (rewrite "miter_point_from_prev_segment")
            (("1" (expand "miter_point_prev")
              (("1" (use "wrapped_miter_half_angle_sine_pos")
                (("1" (assert)
                  (("1" (assert)
                    (("1" (replace -4 :dir rl)
                      (("1"
                        (case "S`seq(1 + lbi) = S`seq(lbi) or 
  S`seq(S`length - 2) = S`seq(lbi)")
                        (("1" (typepred "S")
                          (("1" (inst-cp - "S`length - 2")
                            (("1" (inst - "lbi")
                              (("1" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2"
                            (name-replace "cs"
                             "half_angle_vcos(^(S`seq(S`length - 2) - S`seq(lbi)),
                                  ^(S`seq(lbi + 1) - S`seq(lbi)))
                   /
                   half_angle_vsin(^(S`seq(S`length - 2) - S`seq(lbi)),
                                   ^(S`seq(lbi + 1) - S`seq(lbi)))")
                            (("2"
                              (equate
                               "perp_right(S`seq(S`length - 2) - S`seq(lbi))"
                               "perp_left(S`seq(lbi) - S`seq(S`length - 2))")
                              (("1"
                                (equate
                                 "S`seq(lbi) + d * cs * ^(S`seq(S`length - 2) - S`seq(lbi))"
                                 "S`seq(lbi) - d * cs * ^(S`seq(lbi) - S`seq(S`length - 2))")
                                (("1"
                                  (inst + "-d * cs")
                                  (("1"
                                    (ground)
                                    (("1"
                                      (replace -2 1 :hide? t)
                                      (("1"
                                        (cancel-add 1)
                                        (("1"
                                          (name-replace
                                           "v"
                                           "^(S`seq(lbi) - S`seq(S`length - 2))")
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (equate
                                       "abs(-d * cs)"
                                       "d * abs(cs)")
                                      (("1"
                                        (expand "cs")
                                        (("1"
                                          (equate
                                           "abs(half_angle_vcos(^(S`seq(S`length - 2) - S`seq(lbi)),
                                                   ^(S`seq(lbi + 1) - S`seq(lbi)))
                                    /
                                    half_angle_vsin(^(S`seq(S`length - 2) - S`seq(lbi)),
                                                    ^(S`seq(lbi + 1) - S`seq(lbi))))"
                                           "abs(half_angle_vcos(^(S`seq(S`length - 2) - S`seq(lbi)),
                                                   ^(S`seq(lbi + 1) - S`seq(lbi))))
                                    /
                                    half_angle_vsin(^(S`seq(S`length - 2) - S`seq(lbi)),
                                                    ^(S`seq(lbi + 1) - S`seq(lbi)))")
                                          (("1"
                                            (lemma
                                             "min_miter_sine_le_wrapped_sine")
                                            (("1"
                                              (inst - "S")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -5 :dir rl)
                                                  (("1"
                                                    (case
                                                     "d *
                                             (abs(half_angle_vcos(^(S`seq(S`length - 2) - S`seq(lbi)),
                                                                  ^(S`seq(lbi + 1) - S`seq(lbi))))
                                               /
                                               half_angle_vsin(^(S`seq(S`length - 2) - S`seq(lbi)),
                                                               ^(S`seq(lbi + 1) - S`seq(lbi)))) <=
                                        d *
                                             (abs(half_angle_vcos(^(S`seq(S`length - 2) - S`seq(lbi)),
                                                                  ^(S`seq(lbi + 1) - S`seq(lbi))))
                                               / min_miter_sine(S))")
                                                    (("1"
                                                      (case
                                                       "d *
                                                 abs(half_angle_vcos(^(S`seq(S`length - 2) - S`seq(lbi)),
                                                                      ^(S`seq(lbi + 1) - S`seq(lbi))))
                                           / min_miter_sine(S) <= norm(S`seq(lbi) - S`seq(S`length - 2)) / 6")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (hide -1 -4 2)
                                                        (("2"
                                                          (cross-mult
                                                           1)
                                                          (("2"
                                                            (typepred
                                                             "d")
                                                            (("2"
                                                              (expand
                                                               "max_miter_offset")
                                                              (("2"
                                                                (use
                                                                 "min_seg_sep_bounds_seg_length")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "length")
                                                                    (("2"
                                                                      (mult-by
                                                                       -1
                                                                       "min_miter_sine(S)")
                                                                      (("2"
                                                                        (cross-mult
                                                                         -4)
                                                                        (("2"
                                                                          (case
                                                                           "abs(half_angle_vcos(^(S`seq(S`length - 2) - S`seq(lbi)),
                                                                          ^(S`seq(lbi + 1) - S`seq(lbi)))) <= 1")
                                                                          (("1"
                                                                            (case
                                                                             "6 *
                                                         (abs(half_angle_vcos(^(S`seq(S`length - 2) - S`seq(lbi)),
                                                                              ^(S`seq(lbi + 1) - S`seq(lbi))))
                                                           * d) <= 6 * d")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (-1
                                                                                +))
                                                                              (("2"
                                                                                (name-replace
                                                                                 "ac"
                                                                                 "half_angle_vcos(^(S`seq(S`length - 2) - S`seq(lbi)),
                                                                      ^(S`seq(lbi + 1) - S`seq(lbi)))")
                                                                                (("2"
                                                                                  (cancel-by
                                                                                   1
                                                                                   "6")
                                                                                  (("2"
                                                                                    (mult-cases
                                                                                     2)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "abs"
                                                                                       1
                                                                                       (1
                                                                                        3))
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "abs")
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (cross-mult 1)
                                                        (("2"
                                                          (cancel-by
                                                           1
                                                           "d")
                                                          (("2"
                                                            (mult-cases
                                                             2)
                                                            (("2"
                                                              (expand
                                                               "abs"
                                                               1)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -2 2)
                                            (("2"
                                              (expand "abs")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (apply
                                                   (repeat (lift-if)))
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (ground)
                                                      (("1"
                                                        (cross-mult -1)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (cross-mult 1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (grind)
                                          (("1"
                                            (mult-cases -1)
                                            nil
                                            nil)
                                           ("2"
                                            (mult-cases 1)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (cancel-add 1)
                                    (("2"
                                      (expand "^")
                                      (("2"
                                        (rewrite "norm_sym")
                                        (("2"
                                          (name-replace
                                           "n"
                                           "norm(S`seq(lbi) - S`seq(S`length - 2))")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (assert) nil nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (use "three_pt_miniseq_in_endpt_seq_wrap")
              (("2" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sub_eq_zero formula-decl nil vectors_2D vectors)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (<= const-decl "bool" reals nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (three_pt_miniseq_in_endpt_seq_wrap formula-decl nil
     miter_point_sequences nil)
    (miter_point_prev const-decl "point_2d" vectors_2d_trig nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (perp_right const-decl "vector_2d" vectors_cross_2d nil)
    (norm_sym formula-decl nil vectors_2D vectors)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (times_div1 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (min_segment_sep const-decl "posreal" segment_endpoint_sequences
     nil)
    (even_posnat nonempty-type-eq-decl nil naturalnumbers nil)
    (even? const-decl "bool" integers nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (length const-decl "posreal" segments_2d nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (min_seg_sep_bounds_seg_length formula-decl nil
     segment_endpoint_sequences nil)
    (min_miter_sine const-decl "posreal" miter_point_sequences nil)
    (min_miter_sine_le_wrapped_sine formula-decl nil
     miter_point_sequences nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (cs skolem-const-decl "real" miter_point_sequences nil)
    (neg_times_lt formula-decl nil real_props nil)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "Vector" vectors_2D vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (half_angle_vcos const-decl "{x: real | -1 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (wrapped_miter_half_angle_sine_pos formula-decl nil
     miter_point_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (miter_point_from_prev_segment formula-decl nil
     miter_point_sequences nil)
    (three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil))
   shostak))
 (right_seg_offset_on_miter_pt_seg_TCC1 0
  (right_seg_offset_on_miter_pt_seg_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (replace -3)
      (("" (assert)
        (("" (lemma "adj_edge_parallel_endpts_neq")
          (("" (inst - "S" "i") (("" (ground) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (right_seg_offset_on_miter_pt_seg subtype
    "miter_point_sequences.seg" "segment_2d"))
  (right_seg_offset_on_miter_pt_seg_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (right_seg_offset_on_miter_pt_seg subtype
    "miter_point_sequences.seg" "segment_2d")))
 (right_seg_offset_on_miter_pt_seg_TCC2 0
  (right_seg_offset_on_miter_pt_seg_TCC2-2 nil 3874129021
   ("" (skeep)
    (("" (replace -4)
      (("" (ground)
        (("" (use "successive_miter_points_neq")
          (("" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   ((successive_miter_points_neq formula-decl nil miter_point_sequences
     nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (right_seg_offset_on_miter_pt_seg subtype
    "miter_point_sequences.mps" "segment_2d"))
  (right_seg_offset_on_miter_pt_seg_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (right_seg_offset_on_miter_pt_seg subtype
    "miter_point_sequences.mps" "segment_2d")))
 (right_seg_offset_on_miter_pt_seg 0
  (right_seg_offset_on_miter_pt_seg-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin*)
      (("" (expand "rightward_segment_offset")
        (("" (expand "segment_midpoint")
          (("" (replace -2 +)
            (("" (assert)
              (("" (expand "mps" 1)
                (("" (use "miter_pt_segment_parallel_to_edge")
                  (("" (assert)
                    (("" (replace -5 :dir rl)
                      (("" (replace -4 :dir rl)
                        (("" (expand "dir_parallel?")
                          (("" (skeep)
                            (("" (case "m1 = m2")
                              (("1"
                                (use "successive_miter_points_neq")
                                (("1" (ground) nil nil))
                                nil)
                               ("2"
                                (rewrite "point_on_segment_has_offset")
                                (("2"
                                  (use
                                   "miter_pt_offset_with_bounded_shift_1")
                                  (("2"
                                    (use
                                     "miter_pt_offset_with_bounded_shift_2")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (skeep*)
                                        (("2"
                                          (replace -9 :dir rl)
                                          (("2"
                                            (replace -8 :dir rl)
                                            (("2"
                                              (replace -1 2)
                                              (("2"
                                                (replace -3 2)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (equate
                                                     "S`seq(1 + i) + b * ^(S`seq(1 + i) - S`seq(i)) +
             d * ^(perp_left(S`seq(1 + i) - S`seq(i)))
             -
             (S`seq(i) + a * ^(S`seq(1 + i) - S`seq(i)) +
               d * ^(perp_left(S`seq(1 + i) - S`seq(i))))"
                                                     "S`seq(1 + i) - S`seq(i) + (b - a) * ^(S`seq(1 + i) - S`seq(i))")
                                                    (("1"
                                                      (name-replace
                                                       "v"
                                                       "S`seq(1 + i) - S`seq(i)"
                                                       :hide?
                                                       nil)
                                                      (("1"
                                                        (inst
                                                         +
                                                         "(norm(v) / 2 - a) / (norm(v) + b - a)")
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (cancel-add
                                                             1)
                                                            (("1"
                                                              (move-terms
                                                               1
                                                               r
                                                               1)
                                                              (("1"
                                                                (equate
                                                                 "1 / 2 * (S`seq(i) + S`seq(1 + i)) - S`seq(i)"
                                                                 "1/2 * v")
                                                                (("1"
                                                                  (expand
                                                                   "^")
                                                                  (("1"
                                                                    (factor!
                                                                     (!
                                                                      1
                                                                      r
                                                                      2
                                                                      2))
                                                                    (("1"
                                                                      (factor
                                                                       1
                                                                       r)
                                                                      (("1"
                                                                        (case-replace
                                                                         "a * (1 / norm(v)) +
         ((norm(v) / 2 - a) / (norm(v) - a + b)) *
          (1 + (b - a) * (1 / norm(v))) = 1/2")
                                                                        (("1"
                                                                          (hide
                                                                           2)
                                                                          (("1"
                                                                            (real-props)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-1
                                                                    1))
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "norm(v) / 2 - a <= 2/3 * norm(v) and
  2/3 * norm(v) <= norm(v) - a + b")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (cross-mult
                                                                 1)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (cross-mult
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide-all-but
                                                           (-1 -4 -6))
                                                          (("3"
                                                            (expand
                                                             "abs")
                                                            (("3"
                                                              (lift-if)
                                                              (("3"
                                                                (ground)
                                                                (("3"
                                                                  (add-formulas
                                                                   -1
                                                                   -3)
                                                                  (("3"
                                                                    (cross-mult
                                                                     -1)
                                                                    (("3"
                                                                      (cross-mult
                                                                       -2)
                                                                      (("3"
                                                                        (case
                                                                         "6 * b >= 0")
                                                                        (("1"
                                                                          (add-formulas
                                                                           -1
                                                                           -2)
                                                                          (("1"
                                                                            (case
                                                                             "norm(v) > 0")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("2"
                                                                                (expand
                                                                                 "v")
                                                                                (("2"
                                                                                  (use
                                                                                   "norm_eq_0")
                                                                                  (("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (mult-cases
                                                                           1)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 3)
                                                      (("2"
                                                        (distrib 1)
                                                        (("2"
                                                          (cancel-add
                                                           1)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "Vector" vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (<= const-decl "bool" reals nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (rightward_segment_offset const-decl "point_2d" segments_2d nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (segment_midpoint const-decl "point_2d" segments_2d nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (miter_pt_segment_parallel_to_edge formula-decl nil
     miter_point_sequences nil)
    (successive_miter_points_neq formula-decl nil miter_point_sequences
     nil)
    (miter_pt_offset_with_bounded_shift_1 formula-decl nil
     miter_point_sequences nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (pos_times_ge formula-decl nil real_props nil)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (norm_diff_pos formula-decl nil vectors_cross_2d nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (norm_diff_nonzero_2 formula-decl nil vectors_cross_2d nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (div_cancel4 formula-decl nil real_props nil)
    (div_times formula-decl nil real_props nil)
    (add_div formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (scal_add_left formula-decl nil vectors_2D vectors)
    (scal_sub_left formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (b skolem-const-decl "real" miter_point_sequences nil)
    (a skolem-const-decl "real" miter_point_sequences nil)
    (v skolem-const-decl "Vector" miter_point_sequences nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (miter_pt_offset_with_bounded_shift_2 formula-decl nil
     miter_point_sequences nil)
    (point_on_segment_has_offset formula-decl nil segments_2d nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (mps skolem-const-decl "[# p1: point_2d, p2: point_2d #]"
     miter_point_sequences nil))
   shostak))
 (right_seg_offset_on_miter_pt_seg_wrap_TCC1 0
  (right_seg_offset_on_miter_pt_seg_wrap_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (typepred "S")
      (("" (inst - "S`length - 2") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (right_seg_offset_on_miter_pt_seg_wrap subtype
    "miter_point_sequences.seg" "segment_2d"))
  (right_seg_offset_on_miter_pt_seg_wrap_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (right_seg_offset_on_miter_pt_seg_wrap subtype
    "miter_point_sequences.seg" "segment_2d")))
 (right_seg_offset_on_miter_pt_seg_wrap_TCC2 0
  (right_seg_offset_on_miter_pt_seg_wrap_TCC2-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "successive_miter_pair_neq")
      ((""
        (inst - "S`seq(S`length - 3)" "S`seq(S`length - 2)"
         "S`seq(lbi)" "S`seq(lbi + 1)" "d")
        (("1" (assert) nil nil)
         ("2" (use "four_pt_miniseq_in_endpt_seq_wrap_2")
          (("2" (assert) (("2" (assert) nil nil)) nil)) nil)
         ("3" (use "four_pt_miniseq_in_endpt_seq_wrap_2")
          (("3" (assert) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((successive_miter_pair_neq formula-decl nil miter_point_sequences
     nil)
    (four_pt_miniseq_in_endpt_seq_wrap_2 formula-decl nil
     miter_point_sequences nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (four_point_offset_dist? const-decl "bool"
     segment_endpoint_sequences nil)
    (<= const-decl "bool" reals nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (d skolem-const-decl "miter_seq_offset_dist(S)"
       miter_point_sequences nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (four_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (S skolem-const-decl "edge_parallel_endpoint_seq"
     miter_point_sequences nil)
    (lbi skolem-const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" miter_point_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (right_seg_offset_on_miter_pt_seg_wrap subtype
    "miter_point_sequences.mps" "segment_2d"))
  (right_seg_offset_on_miter_pt_seg_wrap_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (right_seg_offset_on_miter_pt_seg_wrap subtype
    "miter_point_sequences.mps" "segment_2d")))
 (right_seg_offset_on_miter_pt_seg_wrap 0
  (right_seg_offset_on_miter_pt_seg_wrap-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (expand "rightward_segment_offset")
          (("" (expand "segment_midpoint")
            (("" (replace -3 +)
              (("" (assert)
                (("" (expand "mps" 1)
                  (("" (use "four_pt_miniseq_in_endpt_seq_wrap")
                    (("" (use "four_pt_miniseq_in_endpt_seq_wrap_2")
                      (("" (assert)
                        (("" (flatten)
                          (("" (replace -10 :dir rl)
                            ((""
                              (lemma
                               "miter_pt_segment_parallel_to_orig")
                              ((""
                                (inst
                                 -
                                 "S`seq(S`length - 3)"
                                 "S`seq(S`length - 2)"
                                 "S`seq((lbi))"
                                 "S`seq(1 + (lbi))"
                                 "d")
                                ((""
                                  (assert)
                                  ((""
                                    (replace -10 :dir rl)
                                    ((""
                                      (replace -9 :dir rl)
                                      ((""
                                        (expand "dir_parallel?")
                                        ((""
                                          (skeep)
                                          ((""
                                            (case "m1 = m2")
                                            (("1"
                                              (lemma
                                               "successive_miter_pair_neq")
                                              (("1"
                                                (inst
                                                 -
                                                 "S`seq(S`length - 3)"
                                                 "S`seq(S`length - 2)"
                                                 "S`seq((lbi))"
                                                 "S`seq(1 + (lbi))"
                                                 "d")
                                                (("1"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite
                                               "point_on_segment_has_offset")
                                              (("2"
                                                (lemma
                                                 "miter_pt_offset_with_bounded_shift_1")
                                                (("2"
                                                  (inst
                                                   -
                                                   "S"
                                                   "S`length - 2"
                                                   "d")
                                                  (("2"
                                                    (use
                                                     "miter_pt_offset_with_bounded_shift_wrap")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (skeep*)
                                                        (("2"
                                                          (replace
                                                           -15
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (replace
                                                             -10
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (replace
                                                               -14
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (replace
                                                                 -13
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   2)
                                                                  (("2"
                                                                    (replace
                                                                     -3
                                                                     2)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (equate
                                                                         "S`seq(lbi) + b * ^(S`seq(lbi) - S`seq(S`length - 2)) +
                       d * ^(perp_left(S`seq(lbi) - S`seq(S`length - 2)))
                       -
                       (S`seq(S`length - 2) + a * ^(S`seq(lbi) - S`seq(S`length - 2)) +
                         d * ^(perp_left(S`seq(lbi) - S`seq(S`length - 2))))"
                                                                         "S`seq(lbi) - S`seq(S`length - 2) + (b - a) * ^(S`seq(lbi) - S`seq(S`length - 2))")
                                                                        (("1"
                                                                          (name-replace
                                                                           "v"
                                                                           "S`seq(lbi) - S`seq(S`length - 2)"
                                                                           :hide?
                                                                           nil)
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "(norm(v) / 2 - a) / (norm(v) + b - a)")
                                                                            (("1"
                                                                              (ground)
                                                                              (("1"
                                                                                (cancel-add
                                                                                 1)
                                                                                (("1"
                                                                                  (move-terms
                                                                                   1
                                                                                   r
                                                                                   1)
                                                                                  (("1"
                                                                                    (equate
                                                                                     "1 / 2 * (S`seq(S`length - 2) + S`seq(lbi)) - S`seq(S`length - 2)"
                                                                                     "1/2 * v")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "^")
                                                                                      (("1"
                                                                                        (factor!
                                                                                         (!
                                                                                          1
                                                                                          r
                                                                                          2
                                                                                          2))
                                                                                        (("1"
                                                                                          (factor
                                                                                           1
                                                                                           r)
                                                                                          (("1"
                                                                                            (case-replace
                                                                                             "a * (1 / norm(v)) +
                                   ((norm(v) / 2 - a) / (norm(v) - a + b)) *
                                    (1 + (b - a) * (1 / norm(v))) = 1/2")
                                                                                            (("1"
                                                                                              (hide
                                                                                               2)
                                                                                              (("1"
                                                                                                (real-props)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       (-1
                                                                                        1))
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (case
                                                                                 "norm(v) / 2 - a <= 2/3 * norm(v) and
                                  2/3 * norm(v) <= norm(v) - a + b")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (cross-mult
                                                                                     1)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (cross-mult
                                                                               1)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (hide-all-but
                                                                               (-1
                                                                                -4
                                                                                -6))
                                                                              (("3"
                                                                                (expand
                                                                                 "abs")
                                                                                (("3"
                                                                                  (lift-if)
                                                                                  (("3"
                                                                                    (ground)
                                                                                    (("3"
                                                                                      (add-formulas
                                                                                       -1
                                                                                       -3)
                                                                                      (("3"
                                                                                        (cross-mult
                                                                                         -1)
                                                                                        (("3"
                                                                                          (cross-mult
                                                                                           -2)
                                                                                          (("3"
                                                                                            (case
                                                                                             "6 * b >= 0")
                                                                                            (("1"
                                                                                              (add-formulas
                                                                                               -1
                                                                                               -2)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "norm(v) > 0")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "v")
                                                                                                    (("2"
                                                                                                      (use
                                                                                                       "norm_eq_0")
                                                                                                      (("2"
                                                                                                        (ground)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (mult-cases
                                                                                               1)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           3)
                                                                          (("2"
                                                                            (distrib
                                                                             1)
                                                                            (("2"
                                                                              (cancel-add
                                                                               1)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (<= const-decl "bool" reals nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (rightward_segment_offset const-decl "point_2d" segments_2d nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (mps skolem-const-decl "[# p1: point_2d, p2: point_2d #]"
     miter_point_sequences nil)
    (four_pt_miniseq_in_endpt_seq_wrap_2 formula-decl nil
     miter_point_sequences nil)
    (miter_pt_segment_parallel_to_orig formula-decl nil
     miter_point_sequences nil)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (point_on_segment_has_offset formula-decl nil segments_2d nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (pos_times_ge formula-decl nil real_props nil)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (norm_diff_pos formula-decl nil vectors_cross_2d nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (div_cancel4 formula-decl nil real_props nil)
    (div_times formula-decl nil real_props nil)
    (add_div formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (scal_add_left formula-decl nil vectors_2D vectors)
    (scal_sub_left formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (b skolem-const-decl "real" miter_point_sequences nil)
    (a skolem-const-decl "real" miter_point_sequences nil)
    (v skolem-const-decl "Vector" miter_point_sequences nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (miter_pt_offset_with_bounded_shift_wrap formula-decl nil
     miter_point_sequences nil)
    (miter_pt_offset_with_bounded_shift_1 formula-decl nil
     miter_point_sequences nil)
    (successive_miter_pair_neq formula-decl nil miter_point_sequences
     nil)
    (d skolem-const-decl "miter_seq_offset_dist(S)"
       miter_point_sequences nil)
    (lbi skolem-const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" miter_point_sequences nil)
    (S skolem-const-decl "edge_parallel_endpoint_seq"
     miter_point_sequences nil)
    (four_point_offset_dist? const-decl "bool"
     segment_endpoint_sequences nil)
    (four_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (four_pt_miniseq_in_endpt_seq_wrap formula-decl nil
     miter_point_sequences nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (segment_midpoint const-decl "point_2d" segments_2d nil))
   shostak))
 (miter_point_not_on_either_seg_TCC1 0
  (miter_point_not_on_either_seg_TCC1-2 nil 3874129021
   ("" (skeep + t)
    (("" (expand "three_point_miniseq?") (("" (ground) nil nil)) nil))
    nil)
   ((three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (miter_point_not_on_either_seg subtype "miter_point_sequences.v"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.u}"))
  (miter_point_not_on_either_seg_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_point_not_on_either_seg subtype "miter_point_sequences.v"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.u}")))
 (miter_point_not_on_either_seg_TCC2 0
  (miter_point_not_on_either_seg_TCC2-2 nil 3874129021
   ("" (skeep + t)
    (("" (expand "three_point_miniseq?") (("" (ground) nil nil)) nil))
    nil)
   ((three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil))
   shostak
   (miter_point_not_on_either_seg subtype "miter_point_sequences.w"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.v}"))
  (miter_point_not_on_either_seg_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_point_not_on_either_seg subtype "miter_point_sequences.w"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.v}")))
 (miter_point_not_on_either_seg 0
  (miter_point_not_on_either_seg-1 nil 3874129021
   ("" (skeep + t)
    (("" (skoletin)
      (("" (expand "three_point_miniseq?")
        (("" (flatten)
          (("" (use "miter_point_neq_vtx")
            (("" (flatten)
              (("" (use "miter_point_cross_gt_0")
                (("" (assert)
                  (("" (flatten)
                    (("" (replace -3 :dir rl)
                      (("" (ground)
                        (("1"
                          (rewrite "point_on_reverse_segment" :dir rl)
                          (("1" (expand "reverse_segment")
                            (("1"
                              (rewrite "point_on_segment_has_offset")
                              (("1"
                                (skeep)
                                (("1"
                                  (lemma
                                   "cross_eq_0_iff_point_on_line_2")
                                  (("1"
                                    (inst - "v" "u" "mp")
                                    (("1"
                                      (ground)
                                      (("1" (inst?) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (rewrite "point_on_segment_has_offset")
                          (("2" (skeep)
                            (("2" (replace -1)
                              (("2"
                                (assert)
                                (("2"
                                  (rewrite "cross_scales_1")
                                  (("2"
                                    (real-props)
                                    (("2"
                                      (case-replace "d!1 = 0")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (rewrite "cross_self_zero")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "Vector" vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (/= const-decl "boolean" notequal nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (cross_scales_1 formula-decl nil vectors_cross_2d nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors)
    (cross_self_zero formula-decl nil vectors_cross_2d nil)
    (pos_times_gt formula-decl nil real_props nil)
    (add_cancel formula-decl nil vectors_2D vectors)
    (point_on_reverse_segment formula-decl nil segments_2d nil)
    (point_on_segment_has_offset formula-decl nil segments_2d nil)
    (cross_eq_0_iff_point_on_line_2 formula-decl nil vectors_cross_2d
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (reverse_segment const-decl "segment_2d" segments_2d nil)
    (miter_point_cross_gt_0 formula-decl nil miter_point_sequences nil)
    (miter_point_neq_vtx formula-decl nil miter_point_sequences nil))
   shostak))
 (miter_point_not_on_adj_segs_TCC1 0
  (miter_point_not_on_adj_segs_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "adj_edge_parallel_endpts_neq")
      (("" (inst - "S" "i - 1") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (miter_point_not_on_adj_segs subtype
    "miter_point_sequences.S`seq(miter_point_sequences.i)"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.i, 1))}"))
  (miter_point_not_on_adj_segs_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_point_not_on_adj_segs subtype
    "miter_point_sequences.S`seq(miter_point_sequences.i)"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.i, 1))}")))
 (miter_point_not_on_adj_segs_TCC2 0
  (miter_point_not_on_adj_segs_TCC2-2 nil 3874129021
   ("" (skeep)
    (("" (typepred "S") (("" (inst - "i") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (miter_point_not_on_adj_segs subtype
    "miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.i, 1))"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq(miter_point_sequences.i)}"))
  (miter_point_not_on_adj_segs_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_point_not_on_adj_segs subtype
    "miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.i, 1))"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq(miter_point_sequences.i)}")))
 (miter_point_not_on_adj_segs 0
  (miter_point_not_on_adj_segs-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin)
      (("" (lemma "adj_edge_parallel_endpts_neq")
        (("" (inst-cp - "S" "i")
          (("" (inst - "S" "i-1")
            (("" (use "miter_point_neq_vertex")
              (("" (flatten)
                (("" (use "miter_point_cross_pos")
                  (("" (assert)
                    (("" (flatten)
                      (("" (replace -3 :dir rl)
                        (("" (ground)
                          (("1"
                            (rewrite "point_on_reverse_segment" :dir
                             rl)
                            (("1" (expand "reverse_segment")
                              (("1"
                                (rewrite "point_on_segment_has_offset")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (lemma
                                     "cross_eq_0_iff_point_on_line_2")
                                    (("1"
                                      (inst
                                       -
                                       "S`seq(i)"
                                       "S`seq(i - 1)"
                                       "mp")
                                      (("1"
                                        (ground)
                                        (("1" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite "point_on_segment_has_offset")
                            (("2" (skeep)
                              (("2"
                                (use "cross_eq_0_iff_point_on_line")
                                (("2"
                                  (ground)
                                  (("2" (inst?) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "Vector" vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (miter_point_neq_vertex formula-decl nil miter_point_sequences nil)
    (miter_point_cross_pos formula-decl nil miter_point_sequences nil)
    (reverse_segment const-decl "segment_2d" segments_2d nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cross_eq_0_iff_point_on_line_2 formula-decl nil vectors_cross_2d
     nil)
    (point_on_segment_has_offset formula-decl nil segments_2d nil)
    (point_on_reverse_segment formula-decl nil segments_2d nil)
    (cross_eq_0_iff_point_on_line formula-decl nil vectors_cross_2d
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil))
   shostak))
 (miter_seg_points_not_on_seg_TCC1 0
  (miter_seg_points_not_on_seg_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (use "successive_miter_pair_neq") (("" (ground) nil nil))
      nil))
    nil)
   ((successive_miter_pair_neq formula-decl nil miter_point_sequences
     nil)
    (four_point_offset_dist? const-decl "bool"
     segment_endpoint_sequences nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (four_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil))
   shostak
   (miter_seg_points_not_on_seg subtype "miter_point_sequences.h"
    "segment_2d"))
  (miter_seg_points_not_on_seg_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_seg_points_not_on_seg subtype "miter_point_sequences.h"
    "segment_2d")))
 (miter_seg_points_not_on_seg_TCC2 0
  (miter_seg_points_not_on_seg_TCC2-2 nil 3874129021
   ("" (skeep*)
    (("" (typepred "x")
      (("" (expand "four_point_miniseq?") (("" (ground) nil nil)) nil))
      nil))
    nil)
   ((four_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (miter_seg_points_not_on_seg subtype "miter_point_sequences.g"
    "segment_2d"))
  (miter_seg_points_not_on_seg_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_seg_points_not_on_seg subtype "miter_point_sequences.g"
    "segment_2d")))
 (miter_seg_points_not_on_seg 0
  (miter_seg_points_not_on_seg-1 nil 3874129021
   ("" (skeep + t)
    (("" (skoletin*)
      (("" (expand "four_point_miniseq?")
        (("" (flatten)
          (("" (use "miter_pt_segment_parallel_to_orig")
            (("" (skoletin*)
              (("" (case "norm(w - v) = 0")
                (("1" (use "norm_eq_0") (("1" (ground) nil nil)) nil)
                 ("2" (use "nonparallel_half_angle_sine_pos")
                  (("2" (flatten)
                    (("2" (use "dir_parallel")
                      (("2" (use "parallel_diff_points_comm_right")
                        (("2" (assert)
                          (("2" (assert)
                            (("2" (use "successive_miter_pair_neq")
                              (("2"
                                (flatten)
                                (("2"
                                  (lemma
                                   "no_intersections_with_parallel_segments")
                                  (("2"
                                    (inst - "m2" "m1" "g")
                                    (("2"
                                      (ground)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (ground)
                                            (("1"
                                              (lemma
                                               "point_on_reverse_segment")
                                              (("1"
                                                (inst - "p" "h")
                                                (("1"
                                                  (expand
                                                   "reverse_segment")
                                                  (("1"
                                                    (replace -11 -1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "parallel_and_perp_off_line")
                                        (("2"
                                          (inst
                                           -
                                           "v"
                                           "w"
                                           "m1"
                                           "m2"
                                           _
                                           _)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst
                                               -
                                               "v +
                                                                            d *
                                                                             (half_angle_vcos(^(u - v),
                                                                                              ^(w - v))
                                                                               /
                                                                               half_angle_vsin(^(u - v),
                                                                                               ^(w - v)))
                                                                             * ^(w - v)"
                                               "m1")
                                              (("2"
                                                (split -1)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst
                                                   +
                                                   "d *
                                                                                              (half_angle_vcos(^(u - v),
                                                                                                               ^(w - v))
                                                                                                /
                                                                                                half_angle_vsin(^(u - v),
                                                                                                                ^(w - v))) /
                                                                                        norm(w - v)")
                                                  (("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (expand "^" 1 5)
                                                      (("2"
                                                        (real-props)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (inst + "0")
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (expand
                                                   "miter_point"
                                                   -10)
                                                  (("4"
                                                    (ground)
                                                    (("4"
                                                      (expand
                                                       "^"
                                                       -10
                                                       6)
                                                      (("4"
                                                        (inst
                                                         +
                                                         "d / norm(perp_left(w - v))")
                                                        (("4"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AND const-decl "[bool, bool -> bool]" booleans nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (four_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (four_point_offset_dist? const-decl "bool"
     segment_endpoint_sequences nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nonparallel_half_angle_sine_pos judgement-tcc nil
     miter_point_sequences nil)
    (dir_parallel formula-decl nil vectors_2D vectors)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (successive_miter_pair_neq formula-decl nil miter_point_sequences
     nil)
    (no_intersections_with_parallel_segments formula-decl nil
     segments_2d nil)
    (point_on_reverse_segment formula-decl nil segments_2d nil)
    (reverse_segment const-decl "segment_2d" segments_2d nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (half_angle_vcos const-decl "{x: real | -1 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (div_div2 formula-decl nil real_props nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (div_times formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (parallel_and_perp_off_line formula-decl nil vectors_cross_2d nil)
    (norm_diff_nonzero_2 formula-decl nil vectors_cross_2d nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (parallel_diff_points_comm_right formula-decl nil vectors_cross_2d
     nil)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (miter_pt_segment_parallel_to_orig formula-decl nil
     miter_point_sequences nil))
   shostak))
 (miter_seg_points_not_on_edge 0
  (miter_seg_points_not_on_edge-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin*)
      (("" (lemma "miter_seg_points_not_on_seg")
        ((""
          (inst - "S`seq(i-1)" "S`seq(i)" "S`seq(i+1)" "S`seq(i+2)"
           "d")
          (("1" (ground)
            (("1" (skeep) (("1" (inst?) (("1" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (use "four_pt_miniseq_in_endpt_seq")
            (("2" (ground) nil nil)) nil)
           ("3" (use "four_pt_miniseq_in_endpt_seq")
            (("3" (ground) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (<= const-decl "bool" reals nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (four_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (S skolem-const-decl "edge_parallel_endpoint_seq"
     miter_point_sequences nil)
    (i skolem-const-decl "{i: posnat | i < S`length - 2}"
       miter_point_sequences nil)
    (four_point_offset_dist? const-decl "bool"
     segment_endpoint_sequences nil)
    (d skolem-const-decl "miter_seq_offset_dist(S)"
       miter_point_sequences nil)
    (four_pt_miniseq_in_endpt_seq formula-decl nil
     miter_point_sequences nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (miter_seg_points_not_on_seg formula-decl nil miter_point_sequences
     nil))
   shostak))
 (miter_seg_pts_not_on_prev_seg_TCC1 0
  (miter_seg_pts_not_on_prev_seg_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (replace -4)
      (("" (assert)
        (("" (replace -3)
          (("" (move-terms -5 l 1)
            (("" (assert)
              (("" (use "scal_eq_zero")
                (("" (assert)
                  (("" (typepred "w")
                    (("" (expand "three_point_miniseq?")
                      (("" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sub_eq_args formula-decl nil vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (scal_eq_zero formula-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (- const-decl "Vector" vectors_2D vectors)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (* const-decl "Vector" vectors_2D vectors)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak
   (miter_seg_pts_not_on_prev_seg subtype "miter_point_sequences.h"
    "segment_2d"))
  (miter_seg_pts_not_on_prev_seg_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_seg_pts_not_on_prev_seg subtype "miter_point_sequences.h"
    "segment_2d")))
 (miter_seg_pts_not_on_prev_seg_TCC2 0
  (miter_seg_pts_not_on_prev_seg_TCC2-2 nil 3874129021
   ("" (skeep*)
    (("" (typepred "w")
      (("" (expand "three_point_miniseq?") (("" (ground) nil nil))
        nil))
      nil))
    nil)
   ((three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (miter_seg_pts_not_on_prev_seg subtype "miter_point_sequences.g"
    "segment_2d"))
  (miter_seg_pts_not_on_prev_seg_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_seg_pts_not_on_prev_seg subtype "miter_point_sequences.g"
    "segment_2d")))
 (miter_seg_pts_not_on_prev_seg 0
  (miter_seg_pts_not_on_prev_seg-1 nil 3874129021
   ("" (skeep* + t)
    (("" (skoletin*)
      (("" (skeep)
        (("" (case "cross(u - v, w - v) >= 0")
          (("1" (use "miter_point_cross_gt_0")
            (("1" (assert)
              (("1" (replace -7 :dir rl)
                (("1" (flatten)
                  (("1" (lemma "parallel_pts_between_imp_not_on_seg_2")
                    (("1" (inst - "mp" "u" "v" "w")
                      (("1" (assert)
                        (("1" (rewrite "point_on_segment_has_offset")
                          (("1" (skeep)
                            (("1" (replace -8)
                              (("1"
                                (assert)
                                (("1"
                                  (replace -9)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst - "d!1 * c")
                                      (("1"
                                        (replace -5 :dir rl)
                                        (("1"
                                          (rewrite
                                           "point_on_segment_has_offset")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (replace -12)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -7 -1)
                                                  (("1"
                                                    (equate
                                                     "u + d!2 * (v - u) - v"
                                                     "(u - v) + d!2 * (v - u)")
                                                    (("1"
                                                      (rewrite
                                                       "cross_distrib_add_2")
                                                      (("1"
                                                        (rewrite
                                                         "cross_self_zero")
                                                        (("1"
                                                          (rewrite
                                                           "cross_scales_2")
                                                          (("1"
                                                            (rewrite
                                                             "cross_diff_2")
                                                            (("1"
                                                              (rewrite
                                                               "cross_self_zero")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flip-ineq 1)
            (("2" (lemma "no_intersections_with_segment_across_line")
              (("2" (inst - "p" "g" "(# p1 := v, p2 := w #)")
                (("1" (ground)
                  (("1"
                    (lemma "parallel_segment_imp_points_on_same_side")
                    (("1"
                      (inst - "mp" "q" "mp" "(# p1 := v, p2 := w #)")
                      (("1" (ground)
                        (("1" (inst - "p") (("1" (ground) nil nil))
                          nil)
                         ("2" (expand "parallel?")
                          (("2" (replace -5)
                            (("2" (assert)
                              (("2"
                                (inst + "1/c")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (replace -6)
                          (("3" (typepred "w")
                            (("3" (expand "three_point_miniseq?")
                              (("3"
                                (flatten)
                                (("3"
                                  (hide-all-but (-1 2))
                                  (("3"
                                    (move-terms -1 r 1)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (use "scal_eq_zero")
                                        (("3" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (use "miter_point_cross_gt_0")
                          (("4" (assert)
                            (("4" (replace -7 :dir rl)
                              (("4"
                                (flatten)
                                (("4"
                                  (rewrite "cross_antisymmetric" -2)
                                  (("4" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("5" (expand "point_on_segment?")
                          (("5" (inst + "0") (("5" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "w")
                        (("2" (expand "three_point_miniseq?")
                          (("2" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "w")
                  (("2" (expand "three_point_miniseq?")
                    (("2" (ground) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AND const-decl "[bool, bool -> bool]" booleans nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (three_point_offset_dist? const-decl "bool"
     segment_endpoint_sequences nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (segment_2d type-eq-decl nil segments_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (point_on_segment_has_offset formula-decl nil segments_2d nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cross_distrib_add_2 formula-decl nil vectors_cross_2d nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cross_scales_2 formula-decl nil vectors_cross_2d nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cross_diff_2 formula-decl nil vectors_cross_2d nil)
    (cross_self_zero formula-decl nil vectors_cross_2d nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (add_cancel formula-decl nil vectors_2D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (parallel_pts_between_imp_not_on_seg_2 formula-decl nil
     vectors_cross_2d nil)
    (miter_point_cross_gt_0 formula-decl nil miter_point_sequences nil)
    (no_intersections_with_segment_across_line formula-decl nil
     segments_2d nil)
    (scal_0 formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (cross_antisymmetric formula-decl nil vectors_cross_2d nil)
    (sub_eq_args formula-decl nil vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (scal_eq_zero formula-decl nil vectors_2D vectors)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (parallel? const-decl "bool" vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (parallel_segment_imp_points_on_same_side formula-decl nil
     perp_crossings nil)
    (w skolem-const-decl "(three_point_miniseq?(u, v))"
     miter_point_sequences nil)
    (v skolem-const-decl "point_2d" miter_point_sequences nil)
    (u skolem-const-decl "point_2d" miter_point_sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (miter_seg_pts_not_on_prev_edge_TCC1 0
  (miter_seg_pts_not_on_prev_edge_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (replace -4)
      (("" (assert)
        (("" (replace -3)
          (("" (move-terms -5 l 1)
            (("" (assert)
              (("" (use "scal_eq_zero")
                (("" (assert)
                  (("" (lemma "adj_edge_parallel_endpts_neq")
                    (("" (inst - "S" "i") (("" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sub_eq_args formula-decl nil vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (scal_eq_zero formula-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "Vector" vectors_2D vectors)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (* const-decl "Vector" vectors_2D vectors)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (miter_seg_pts_not_on_prev_edge subtype "miter_point_sequences.h"
    "segment_2d"))
  (miter_seg_pts_not_on_prev_edge_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_seg_pts_not_on_prev_edge subtype "miter_point_sequences.h"
    "segment_2d")))
 (miter_seg_pts_not_on_prev_edge_TCC2 0
  (miter_seg_pts_not_on_prev_edge_TCC2-2 nil 3874129021
   ("" (skeep*)
    (("" (replace -1)
      (("" (assert)
        (("" (lemma "adj_edge_parallel_endpts_neq")
          (("" (inst - "S" "i-1") (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (miter_seg_pts_not_on_prev_edge subtype "miter_point_sequences.g"
    "segment_2d"))
  (miter_seg_pts_not_on_prev_edge_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_seg_pts_not_on_prev_edge subtype "miter_point_sequences.g"
    "segment_2d")))
 (miter_seg_pts_not_on_prev_edge 0
  (miter_seg_pts_not_on_prev_edge-1 nil 3874129021
   ("" (skeep*)
    (("" (skoletin*)
      (("" (skeep)
        ((""
          (case "cross(S`seq(i - 1) - S`seq(i), S`seq(i + 1) - S`seq(i)) >= 0")
          (("1" (use "miter_point_cross_pos")
            (("1" (assert)
              (("1" (replace -7 :dir rl)
                (("1" (flatten)
                  (("1" (lemma "parallel_pts_between_imp_not_on_seg_2")
                    (("1"
                      (inst - "mp" "S`seq(i - 1)" "S`seq(i)"
                       "S`seq(i+1)")
                      (("1" (assert)
                        (("1" (rewrite "point_on_segment_has_offset")
                          (("1" (skeep)
                            (("1" (replace -8)
                              (("1"
                                (assert)
                                (("1"
                                  (replace -9)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst - "d!1 * c")
                                      (("1"
                                        (replace -5 :dir rl)
                                        (("1"
                                          (rewrite
                                           "point_on_segment_has_offset")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (replace -12)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -7 -1)
                                                  (("1"
                                                    (equate
                                                     "S`seq(i - 1) + d!2 * (S`seq(i) - S`seq(i - 1)) - S`seq(i)"
                                                     "(S`seq(i - 1) - S`seq(i)) + d!2 * (S`seq(i) - S`seq(i - 1))")
                                                    (("1"
                                                      (rewrite
                                                       "cross_distrib_add_2")
                                                      (("1"
                                                        (rewrite
                                                         "cross_self_zero")
                                                        (("1"
                                                          (rewrite
                                                           "cross_scales_2")
                                                          (("1"
                                                            (rewrite
                                                             "cross_diff_2")
                                                            (("1"
                                                              (rewrite
                                                               "cross_self_zero")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flip-ineq 1)
            (("2" (lemma "no_intersections_with_segment_across_line")
              (("2"
                (inst - "p" "g"
                 "(# p1 := S`seq(i), p2 := S`seq(i+1) #)")
                (("1" (ground)
                  (("1"
                    (lemma "parallel_segment_imp_points_on_same_side")
                    (("1"
                      (inst - "mp" "q" "mp"
                       "(# p1 := S`seq(i), p2 := S`seq(i+1) #)")
                      (("1" (ground)
                        (("1" (inst - "p") (("1" (ground) nil nil))
                          nil)
                         ("2" (expand "parallel?")
                          (("2" (replace -5)
                            (("2" (assert)
                              (("2"
                                (inst + "1/c")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (replace -6)
                          (("3" (hide-all-but -1)
                            (("3" (move-terms -1 r 1)
                              (("3"
                                (assert)
                                (("3"
                                  (use "scal_eq_zero")
                                  (("3"
                                    (ground)
                                    (("3"
                                      (lemma
                                       "adj_edge_parallel_endpts_neq")
                                      (("3"
                                        (inst - "S" "i")
                                        (("3" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (use "miter_point_cross_pos")
                          (("4" (assert)
                            (("4" (replace -7 :dir rl)
                              (("4"
                                (flatten)
                                (("4"
                                  (rewrite "cross_antisymmetric" -2)
                                  (("4" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("5" (expand "point_on_segment?")
                          (("5" (inst + "0") (("5" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "adj_edge_parallel_endpts_neq")
                        (("2" (inst - "S" "i") (("2" (ground) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "adj_edge_parallel_endpts_neq")
                  (("2" (inst - "S" "i") (("2" (ground) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (<= const-decl "bool" reals nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (segment_2d type-eq-decl nil segments_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (point_on_segment_has_offset formula-decl nil segments_2d nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cross_distrib_add_2 formula-decl nil vectors_cross_2d nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cross_scales_2 formula-decl nil vectors_cross_2d nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cross_diff_2 formula-decl nil vectors_cross_2d nil)
    (cross_self_zero formula-decl nil vectors_cross_2d nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (add_cancel formula-decl nil vectors_2D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (parallel_pts_between_imp_not_on_seg_2 formula-decl nil
     vectors_cross_2d nil)
    (miter_point_cross_pos formula-decl nil miter_point_sequences nil)
    (no_intersections_with_segment_across_line formula-decl nil
     segments_2d nil)
    (scal_0 formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (cross_antisymmetric formula-decl nil vectors_cross_2d nil)
    (scal_eq_zero formula-decl nil vectors_2D vectors)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (sub_eq_args formula-decl nil vectors_2D vectors)
    (parallel? const-decl "bool" vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (parallel_segment_imp_points_on_same_side formula-decl nil
     perp_crossings nil)
    (i skolem-const-decl "{i: posnat | i < S`length - 1}"
       miter_point_sequences nil)
    (S skolem-const-decl "edge_parallel_endpoint_seq"
     miter_point_sequences nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (miter_seg_pts_not_on_next_seg_TCC1 0
  (miter_seg_pts_not_on_next_seg_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (replace -4)
      (("" (assert)
        (("" (replace -3)
          (("" (move-terms -5 l 1)
            (("" (assert)
              (("" (use "scal_eq_zero")
                (("" (assert)
                  (("" (typepred "w")
                    (("" (expand "three_point_miniseq?")
                      (("" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sub_eq_args formula-decl nil vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (scal_eq_zero formula-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (- const-decl "Vector" vectors_2D vectors)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (* const-decl "Vector" vectors_2D vectors)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak
   (miter_seg_pts_not_on_next_seg subtype "miter_point_sequences.h"
    "segment_2d"))
  (miter_seg_pts_not_on_next_seg_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_seg_pts_not_on_next_seg subtype "miter_point_sequences.h"
    "segment_2d")))
 (miter_seg_pts_not_on_next_seg_TCC2 0
  (miter_seg_pts_not_on_next_seg_TCC2-2 nil 3874129021
   ("" (skeep*)
    (("" (typepred "w")
      (("" (expand "three_point_miniseq?") (("" (ground) nil nil))
        nil))
      nil))
    nil)
   ((three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (miter_seg_pts_not_on_next_seg subtype "miter_point_sequences.g"
    "segment_2d"))
  (miter_seg_pts_not_on_next_seg_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_seg_pts_not_on_next_seg subtype "miter_point_sequences.g"
    "segment_2d")))
 (miter_seg_pts_not_on_next_seg 0
  (miter_seg_pts_not_on_next_seg-1 nil 3874129021
   ("" (skeep + t)
    (("" (skoletin*)
      (("" (skeep)
        (("" (expand "three_point_miniseq?")
          (("" (flatten)
            (("" (use "miter_point_cross_gt_0")
              (("" (assert)
                (("" (replace -6 :dir rl)
                  (("" (flatten)
                    (("" (case "cross(u - v, w - v) >= 0")
                      (("1"
                        (lemma "parallel_pts_between_imp_not_on_seg")
                        (("1" (inst - "mp" "u" "v" "w")
                          (("1" (assert)
                            (("1"
                              (rewrite "point_on_segment_has_offset")
                              (("1"
                                (skeep)
                                (("1"
                                  (replace -8)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -9)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst - "d!1 * c")
                                          (("1"
                                            (replace -5 :dir rl)
                                            (("1"
                                              (rewrite
                                               "point_on_segment_has_offset")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (replace -12)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -7 -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (rewrite
                                                           "cross_scales_1")
                                                          (("1"
                                                            (rewrite
                                                             "cross_self_zero")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2"
                        (lemma
                         "no_intersections_with_segment_across_line_far")
                        (("2" (inst - "p" "(# p1 := u, p2 := v #)" "g")
                          (("2" (ground)
                            (("2"
                              (lemma
                               "points_on_parallel_ray_cross_pos_1")
                              (("2"
                                (inst - "mp" "u" "v")
                                (("2"
                                  (assert)
                                  (("2"
                                    (rewrite
                                     "point_on_segment_has_offset")
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (replace -7)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -8)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst - "d!1 * c")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AND const-decl "[bool, bool -> bool]" booleans nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (three_point_offset_dist? const-decl "bool"
     segment_endpoint_sequences nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (segment_2d type-eq-decl nil segments_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (miter_point_cross_gt_0 formula-decl nil miter_point_sequences nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (point_on_segment_has_offset formula-decl nil segments_2d nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (cross_scales_1 formula-decl nil vectors_cross_2d nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cross_self_zero formula-decl nil vectors_cross_2d nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (add_cancel formula-decl nil vectors_2D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (parallel_pts_between_imp_not_on_seg formula-decl nil
     vectors_cross_2d nil)
    (points_on_parallel_ray_cross_pos_1 formula-decl nil
     vectors_cross_2d nil)
    (no_intersections_with_segment_across_line_far formula-decl nil
     segments_2d nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (miter_seg_pts_not_on_next_edge_TCC1 0
  (miter_seg_pts_not_on_next_edge_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (replace -4)
      (("" (assert)
        (("" (replace -3)
          (("" (move-terms -5 l 1)
            (("" (assert)
              (("" (use "scal_eq_zero")
                (("" (assert)
                  (("" (lemma "adj_edge_parallel_endpts_neq")
                    (("" (inst - "S" "i-1") (("" (ground) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sub_eq_args formula-decl nil vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (scal_eq_zero formula-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "Vector" vectors_2D vectors)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (* const-decl "Vector" vectors_2D vectors)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (miter_seg_pts_not_on_next_edge subtype "miter_point_sequences.h"
    "segment_2d"))
  (miter_seg_pts_not_on_next_edge_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_seg_pts_not_on_next_edge subtype "miter_point_sequences.h"
    "segment_2d")))
 (miter_seg_pts_not_on_next_edge_TCC2 0
  (miter_seg_pts_not_on_next_edge_TCC2-2 nil 3874129021
   ("" (skeep*)
    (("" (replace -1)
      (("" (assert)
        (("" (typepred "S")
          (("" (inst - "i") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (miter_seg_pts_not_on_next_edge subtype "miter_point_sequences.g"
    "segment_2d"))
  (miter_seg_pts_not_on_next_edge_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_seg_pts_not_on_next_edge subtype "miter_point_sequences.g"
    "segment_2d")))
 (miter_seg_pts_not_on_next_edge 0
  (miter_seg_pts_not_on_next_edge-1 nil 3874129021
   ("" (skeep*)
    (("" (skoletin*)
      (("" (skeep)
        (("" (lemma "adj_edge_parallel_endpts_neq")
          (("" (inst-cp - "S" "i")
            (("" (inst - "S" "i-1")
              (("" (flatten)
                (("" (use "miter_point_cross_pos")
                  (("" (assert)
                    (("" (replace -6 :dir rl)
                      (("" (flatten)
                        ((""
                          (case "cross(S`seq(i - 1) - S`seq(i), S`seq(i + 1) - S`seq(i)) >= 0")
                          (("1"
                            (lemma
                             "parallel_pts_between_imp_not_on_seg")
                            (("1"
                              (inst - "mp" "S`seq(i - 1)" "S`seq(i)"
                               "S`seq(i+1)")
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite
                                   "point_on_segment_has_offset")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (replace -8)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -9)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst - "d!1 * c")
                                              (("1"
                                                (replace -5 :dir rl)
                                                (("1"
                                                  (rewrite
                                                   "point_on_segment_has_offset")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (replace -12)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace
                                                           -7
                                                           -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (rewrite
                                                               "cross_scales_1")
                                                              (("1"
                                                                (rewrite
                                                                 "cross_self_zero")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (lemma
                             "no_intersections_with_segment_across_line_far")
                            (("2"
                              (inst - "p"
                               "(# p1 := S`seq(i-1), p2 := S`seq(i) #)"
                               "g")
                              (("2"
                                (ground)
                                (("2"
                                  (lemma
                                   "points_on_parallel_ray_cross_pos_1")
                                  (("2"
                                    (inst
                                     -
                                     "mp"
                                     "S`seq(i - 1)"
                                     "S`seq(i)")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (rewrite
                                         "point_on_segment_has_offset")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (replace -7)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replace -8)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst - "d!1 * c")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (<= const-decl "bool" reals nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (segment_2d type-eq-decl nil segments_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (miter_point_cross_pos formula-decl nil miter_point_sequences nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (point_on_segment_has_offset formula-decl nil segments_2d nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (cross_scales_1 formula-decl nil vectors_cross_2d nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cross_self_zero formula-decl nil vectors_cross_2d nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (add_cancel formula-decl nil vectors_2D vectors)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (parallel_pts_between_imp_not_on_seg formula-decl nil
     vectors_cross_2d nil)
    (points_on_parallel_ray_cross_pos_1 formula-decl nil
     vectors_cross_2d nil)
    (no_intersections_with_segment_across_line_far formula-decl nil
     segments_2d nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (miter_seg_pts_not_on_nonadj_edge_TCC1 0
  (miter_seg_pts_not_on_nonadj_edge_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (miter_seg_pts_not_on_nonadj_edge subtype "miter_point_sequences.j"
    "below[S`length]"))
  (miter_seg_pts_not_on_nonadj_edge_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_seg_pts_not_on_nonadj_edge subtype "miter_point_sequences.j"
    "below[S`length]")))
 (miter_seg_pts_not_on_nonadj_edge_TCC2 0
  (miter_seg_pts_not_on_nonadj_edge_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (miter_seg_pts_not_on_nonadj_edge subtype
    "(number_fields.+)(miter_point_sequences.j, 1)" "below[S`length]"))
  (miter_seg_pts_not_on_nonadj_edge_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_seg_pts_not_on_nonadj_edge subtype
    "(number_fields.+)(miter_point_sequences.j, 1)"
    "below[S`length]")))
 (miter_seg_pts_not_on_nonadj_edge_TCC3 0
  (miter_seg_pts_not_on_nonadj_edge_TCC3-2 nil 3874129021
   ("" (skeep*)
    (("" (use "successive_miter_points_neq") (("" (ground) nil nil))
      nil))
    nil)
   ((successive_miter_points_neq formula-decl nil miter_point_sequences
     nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (miter_seg_pts_not_on_nonadj_edge subtype "miter_point_sequences.h"
    "segment_2d"))
  (miter_seg_pts_not_on_nonadj_edge_TCC3-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_seg_pts_not_on_nonadj_edge subtype "miter_point_sequences.h"
    "segment_2d")))
 (miter_seg_pts_not_on_nonadj_edge_TCC4 0
  (miter_seg_pts_not_on_nonadj_edge_TCC4-2 nil 3874129021
   ("" (skeep* + t) (("" (inst - "j") (("" (assert) nil nil)) nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (miter_seg_pts_not_on_nonadj_edge subtype "miter_point_sequences.g"
    "segment_2d"))
  (miter_seg_pts_not_on_nonadj_edge_TCC4-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_seg_pts_not_on_nonadj_edge subtype "miter_point_sequences.g"
    "segment_2d")))
 (miter_seg_pts_not_on_nonadj_edge 0
  (miter_seg_pts_not_on_nonadj_edge-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin*)
      (("" (skeep)
        ((""
          (name-replace "e" "(# p1 := S`seq(i), p2 := S`seq(i + 1) #)")
          (("" (lemma "nearby_segment_distance_bounded")
            (("" (inst - "h" "e" "p" "d / min_miter_sine(S)")
              (("1" (lemma "miter_pt_dist_to_edge_endpt_bound")
                (("1" (inst-cp - "S" "i" "d")
                  (("1" (inst - "S" "i+1" "d")
                    (("1" (assert)
                      (("1" (skeep)
                        (("1" (typepred "d")
                          (("1" (expand "max_miter_offset")
                            (("1" (cross-mult -3)
                              (("1"
                                (case
                                 "d / min_miter_sine(S) <= min_segment_sep(S) / 6")
                                (("1"
                                  (lemma "min_seg_sep_all_points")
                                  (("1"
                                    (case "i < j")
                                    (("1"
                                      (inst - "S" "q" "p" "i" "j")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (rewrite "norm_sym")
                                            (("1"
                                              (assert)
                                              (("1" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst - "S" "p" "q" "j" "i")
                                      (("2"
                                        (assert)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-3 1))
                                  (("2" (real-props) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "adj_edge_parallel_endpts_neq")
                (("2" (inst - "S" "i")
                  (("2" (replace -2 :dir rl) (("2" (ground) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (<= const-decl "bool" reals nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (e skolem-const-decl "[# p1: point_2d, p2: point_2d #]"
     miter_point_sequences nil)
    (min_miter_sine const-decl "posreal" miter_point_sequences nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (min_segment_sep const-decl "posreal" segment_endpoint_sequences
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (min_seg_sep_all_points formula-decl nil segment_endpoint_sequences
     nil)
    (norm_sym formula-decl nil vectors_2D vectors)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (miter_pt_dist_to_edge_endpt_bound formula-decl nil
     miter_point_sequences nil)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (nearby_segment_distance_bounded formula-decl nil segments_2d nil))
   shostak))
 (miter_seg_pts_not_on_nonadj_next_wrap_TCC1 0
  (miter_seg_pts_not_on_nonadj_next_wrap_TCC1-2 nil 3874129021
   ("" (skeep*)
    (("" (use "wrapped_miter_points_neq")
      (("" (ground) (("" (ground) nil nil)) nil)) nil))
    nil)
   ((wrapped_miter_points_neq formula-decl nil miter_point_sequences
     nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (miter_seg_pts_not_on_nonadj_next_wrap subtype
    "miter_point_sequences.h" "segment_2d"))
  (miter_seg_pts_not_on_nonadj_next_wrap_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_seg_pts_not_on_nonadj_next_wrap subtype
    "miter_point_sequences.h" "segment_2d")))
 (miter_seg_pts_not_on_nonadj_next_wrap_TCC2 0
  (miter_seg_pts_not_on_nonadj_next_wrap_TCC2-2 nil 3874129021
   ("" (skeep*)
    (("" (replace -3 -8)
      (("" (assert)
        (("" (typepred "S")
          (("" (inst - "j") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (miter_seg_pts_not_on_nonadj_next_wrap subtype
    "miter_point_sequences.g" "segment_2d"))
  (miter_seg_pts_not_on_nonadj_next_wrap_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_seg_pts_not_on_nonadj_next_wrap subtype
    "miter_point_sequences.g" "segment_2d")))
 (miter_seg_pts_not_on_nonadj_next_wrap 0
  (miter_seg_pts_not_on_nonadj_next_wrap-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin :nth 1)
      (("" (flatten)
        (("" (skoletin*)
          ((""
            (name-replace "e"
             "(# p1 := S`seq(lbi), p2 := S`seq(1 + lbi) #)")
            (("" (lemma "nearby_segment_distance_bounded")
              (("" (skeep)
                (("" (inst - "h" "e" "p" "d / min_miter_sine(S)")
                  (("1" (lemma "miter_pt_dist_to_pivot_pt_bound")
                    (("1"
                      (inst-cp - "S`seq(S`length - 2)" "S`seq(lbi)"
                       "S`seq(1 + lbi)" "d")
                      (("1"
                        (inst - "S`seq(lbi)" "S`seq(1 + lbi)"
                         "S`seq(2 + lbi)" "d")
                        (("1" (assert)
                          (("1" (replace -8 :dir rl)
                            (("1" (replace -9 :dir rl)
                              (("1"
                                (lemma "min_miter_sine_le_each_sine")
                                (("1"
                                  (inst - "S" "1 + lbi")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (use
                                       "min_miter_sine_le_wrapped_sine")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -14 :dir rl)
                                          (("1"
                                            (split -5)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (typepred "d")
                                                (("1"
                                                  (expand
                                                   "max_miter_offset")
                                                  (("1"
                                                    (cross-mult -3)
                                                    (("1"
                                                      (case
                                                       "d / min_miter_sine(S) <= min_segment_sep(S) / 6")
                                                      (("1"
                                                        (lemma
                                                         "min_seg_sep_all_points")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "S"
                                                           "q"
                                                           "p"
                                                           "lbi"
                                                           "j")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (rewrite
                                                               "norm_sym")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "min_seg_sep_all_points")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "S"
                                                                     "p"
                                                                     "q"
                                                                     "j"
                                                                     "lbi")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-3 1))
                                                        (("2"
                                                          (real-props)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (real-props)
                                              (("2"
                                                (hide -2 -3)
                                                (("2"
                                                  (case
                                                   "forall (x,y,z: posreal): x <= y & z * y <= d => z * x <= d")
                                                  (("1"
                                                    (inst
                                                     -
                                                     "min_miter_sine(S)"
                                                     "half_angle_vsin(^(S`seq(S`length - 2) - S`seq(lbi)),
                                               ^(S`seq(1 + lbi) - S`seq(lbi)))"
                                                     "norm(h`p1 - e`p1)")
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (case
                                                         "z*x <= z*y")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (cancel-by
                                                           1
                                                           "z")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (real-props)
                                              (("3"
                                                (case
                                                 "forall (x,y,z: posreal): x <= y & z * y <= d => z * x <= d")
                                                (("1"
                                                  (hide -2 -5)
                                                  (("1"
                                                    (inst
                                                     -
                                                     "min_miter_sine(S)"
                                                     "half_angle_vsin(^(S`seq(lbi) - S`seq(1 + lbi)), ^(S`seq(2 + lbi) - S`seq(1 + lbi)))"
                                                     "norm(h`p2 - e`p2)")
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (case
                                                       "z*x <= z*y")
                                                      (("1"
                                                        (case
                                                         "z*x <= z*y")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (cancel-by
                                                         1
                                                         "z")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "three_point_miniseq?")
                          (("2"
                            (lemma
                             "edge_para_endpts_valid_miter_point_args")
                            (("2" (inst - "S" "1 + lbi")
                              (("1" (ground) nil nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "three_point_miniseq?")
                        (("2"
                          (lemma
                           "edge_para_endpts_valid_miter_point_args")
                          (("2" (inst - "S" "lbi")
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (split 4)
                                  (("1"
                                    (typepred "S")
                                    (("1"
                                      (inst - "S`length - 2")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (use
                                     "wrapped_adj_segs_not_dir_parallel")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (replace -11 :dir rl)
                                          (("2"
                                            (hide-all-but (-1 1))
                                            (("2"
                                              (expand "dir_parallel?")
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (rewrite
                                                     "normalize_scal")
                                                    (("2"
                                                      (expand "sign")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (equate "lbi" "0" (assert))
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (ground)
                                      (("1"
                                        (typepred "S")
                                        (("1"
                                          (inst - "S`length - 2")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (use
                                         "wrapped_adj_segs_not_dir_parallel")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (replace -10 :dir rl)
                                              (("2"
                                                (hide-all-but (-1 1))
                                                (("2"
                                                  (expand
                                                   "dir_parallel?")
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (rewrite
                                                         "normalize_scal")
                                                        (("2"
                                                          (expand
                                                           "sign")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (ground)
                    (("2" (lemma "adj_edge_parallel_endpts_neq")
                      (("2" (inst - "S" "lbi") (("2" (ground) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (<= const-decl "bool" reals nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nearby_segment_distance_bounded formula-decl nil segments_2d nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (e skolem-const-decl "[# p1: point_2d, p2: point_2d #]"
     miter_point_sequences nil)
    (min_miter_sine const-decl "posreal" miter_point_sequences nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (S skolem-const-decl "edge_parallel_endpoint_seq"
     miter_point_sequences nil)
    (lbi skolem-const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" miter_point_sequences nil)
    (edge_para_endpts_valid_miter_point_args formula-decl nil
     segment_endpoint_sequences nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min_miter_sine_le_wrapped_sine formula-decl nil
     miter_point_sequences nil)
    (div_cancel4 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (norm_sym formula-decl nil vectors_2D vectors)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min_seg_sep_all_points formula-decl nil segment_endpoint_sequences
     nil)
    (times_div1 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (min_segment_sep const-decl "posreal" segment_endpoint_sequences
     nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (min_miter_sine_le_each_sine formula-decl nil miter_point_sequences
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (sign const-decl "Sign" sign reals)
    (scal_1 formula-decl nil vectors_2D vectors)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (normalize_scal formula-decl nil vectors_2D vectors)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (wrapped_adj_segs_not_dir_parallel formula-decl nil
     segment_endpoint_sequences nil)
    (miter_pt_dist_to_pivot_pt_bound formula-decl nil
     miter_point_sequences nil)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil))
   shostak))
 (miter_seg_pts_not_on_nonadj_prev_wrap_TCC1 0
  (miter_seg_pts_not_on_nonadj_prev_wrap_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (miter_seg_pts_not_on_nonadj_prev_wrap subtype
    "miter_point_sequences.j" "below[S`length]"))
  (miter_seg_pts_not_on_nonadj_prev_wrap_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_seg_pts_not_on_nonadj_prev_wrap subtype
    "miter_point_sequences.j" "below[S`length]")))
 (miter_seg_pts_not_on_nonadj_prev_wrap_TCC2 0
  (miter_seg_pts_not_on_nonadj_prev_wrap_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (miter_seg_pts_not_on_nonadj_prev_wrap subtype
    "(number_fields.+)(miter_point_sequences.j, 1)" "below[S`length]"))
  (miter_seg_pts_not_on_nonadj_prev_wrap_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_seg_pts_not_on_nonadj_prev_wrap subtype
    "(number_fields.+)(miter_point_sequences.j, 1)"
    "below[S`length]")))
 (miter_seg_pts_not_on_nonadj_prev_wrap_TCC3 0
  (miter_seg_pts_not_on_nonadj_prev_wrap_TCC3-2 nil 3874129021
   ("" (skeep*)
    (("" (use "wrapped_miter_points_neq")
      (("" (ground) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((wrapped_miter_points_neq formula-decl nil miter_point_sequences
     nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (miter_seg_pts_not_on_nonadj_prev_wrap subtype
    "miter_point_sequences.h" "segment_2d"))
  (miter_seg_pts_not_on_nonadj_prev_wrap_TCC3-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_seg_pts_not_on_nonadj_prev_wrap subtype
    "miter_point_sequences.h" "segment_2d")))
 (miter_seg_pts_not_on_nonadj_prev_wrap_TCC4 0
  (miter_seg_pts_not_on_nonadj_prev_wrap_TCC4-2 nil 3874129021
   ("" (skeep*)
    (("" (replace -3)
      (("" (assert)
        (("" (typepred "S")
          (("" (inst - "j") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (miter_seg_pts_not_on_nonadj_prev_wrap subtype
    "miter_point_sequences.g" "segment_2d"))
  (miter_seg_pts_not_on_nonadj_prev_wrap_TCC4-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_seg_pts_not_on_nonadj_prev_wrap subtype
    "miter_point_sequences.g" "segment_2d")))
 (miter_seg_pts_not_on_nonadj_prev_wrap 0
  (miter_seg_pts_not_on_nonadj_prev_wrap-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin*)
      ((""
        (name-replace "e"
         "(# p1 := S`seq(S`length - 2), p2 := S`seq(lbi) #)")
        (("" (flatten)
          (("" (skeep)
            (("" (lemma "nearby_segment_distance_bounded")
              (("" (inst - "h" "e" "p" "d / min_miter_sine(S)")
                (("1" (lemma "miter_pt_dist_to_pivot_pt_bound")
                  (("1"
                    (inst-cp - "S`seq(S`length - 3)"
                     "S`seq(S`length - 2)" "S`seq(lbi)" "d")
                    (("1"
                      (inst - "S`seq(S`length - 2)" "S`seq(lbi)"
                       "S`seq(1 + lbi)" "d")
                      (("1" (assert)
                        (("1" (replace -10 :dir rl)
                          (("1" (replace -9 :dir rl)
                            (("1" (lemma "min_miter_sine_le_each_sine")
                              (("1"
                                (inst - "S" "S`length - 2")
                                (("1"
                                  (assert)
                                  (("1"
                                    (use
                                     "min_miter_sine_le_wrapped_sine")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -14 :dir rl)
                                        (("1"
                                          (split -5)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (typepred "d")
                                              (("1"
                                                (expand
                                                 "max_miter_offset")
                                                (("1"
                                                  (cross-mult -3)
                                                  (("1"
                                                    (case
                                                     "d / min_miter_sine(S) <= min_segment_sep(S) / 6")
                                                    (("1"
                                                      (lemma
                                                       "min_seg_sep_all_points")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "S"
                                                         "p"
                                                         "q"
                                                         "j"
                                                         "S`length - 2")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (-3 1))
                                                      (("2"
                                                        (real-props)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (real-props)
                                            (("2"
                                              (hide -1 -3)
                                              (("2"
                                                (case
                                                 "forall (x,y,z: posreal): x <= y & z * y <= d => z * x <= d")
                                                (("1"
                                                  (inst
                                                   -
                                                   "min_miter_sine(S)"
                                                   "half_angle_vsin(^(S`seq(S`length - 3) - S`seq(S`length - 2)),
                                                     ^(S`seq(S`length - 1) - S`seq(S`length - 2))) "
                                                   "norm(h`p1 - e`p1)")
                                                  (("1"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (case
                                                       "z*x <= z*y")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (cancel-by
                                                         1
                                                         "z")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (real-props)
                                            (("3"
                                              (hide -2 -4)
                                              (("3"
                                                (case
                                                 "forall (x,y,z: posreal): x <= y & z * y <= d => z * x <= d")
                                                (("1"
                                                  (inst
                                                   -
                                                   "min_miter_sine(S)"
                                                   "half_angle_vsin(^(S`seq(S`length - 2) - S`seq(lbi)), ^(S`seq(1 + lbi) - S`seq(lbi)))"
                                                   "norm(h`p2 - e`p2)")
                                                  (("1"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (case
                                                       "z*x <= z*y")
                                                      (("1"
                                                        (case
                                                         "z*x <= z*y")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (cancel-by
                                                         1
                                                         "z")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -1 -2)
                        (("2" (expand "three_point_miniseq?")
                          (("2" (lemma "adj_edge_parallel_endpts_neq")
                            (("2" (inst-cp - "S" "S`length - 2")
                              (("2"
                                (inst - "S" "lbi")
                                (("1"
                                  (ground)
                                  (("1"
                                    (expand "dir_parallel?")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (use
                                         "wrapped_adj_segs_not_dir_parallel")
                                        (("1"
                                          (ground)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -10 :dir rl)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (rewrite
                                                   "normalize_scal")
                                                  (("1"
                                                    (expand "sign")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1)
                      (("2" (expand "three_point_miniseq?")
                        (("2" (lemma "adj_edge_parallel_endpts_neq")
                          (("2" (inst-cp - "S" "S`length - 2")
                            (("2" (inst - "S" "S`length - 3")
                              (("2"
                                (ground)
                                (("2"
                                  (expand "dir_parallel?")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (use
                                       "wrapped_adj_segs_not_dir_parallel")
                                      (("2"
                                        (ground)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (rewrite
                                               "normalize_scal")
                                              (("2"
                                                (expand "sign")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (ground)
                  (("2" (lemma "adj_edge_parallel_endpts_neq")
                    (("2" (inst - "S" "S`length - 2")
                      (("2" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (<= const-decl "bool" reals nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nearby_segment_distance_bounded formula-decl nil segments_2d nil)
    (miter_pt_dist_to_pivot_pt_bound formula-decl nil
     miter_point_sequences nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (min_miter_sine_le_each_sine formula-decl nil miter_point_sequences
     nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (min_segment_sep const-decl "posreal" segment_endpoint_sequences
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (min_seg_sep_all_points formula-decl nil segment_endpoint_sequences
     nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (div_cancel4 formula-decl nil real_props nil)
    (min_miter_sine_le_wrapped_sine formula-decl nil
     miter_point_sequences nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (normalize_scal formula-decl nil vectors_2D vectors)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (sign const-decl "Sign" sign reals)
    (wrapped_adj_segs_not_dir_parallel formula-decl nil
     segment_endpoint_sequences nil)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (lbi skolem-const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" miter_point_sequences nil)
    (S skolem-const-decl "edge_parallel_endpoint_seq"
     miter_point_sequences nil)
    (three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (nnreal type-eq-decl nil real_types nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (min_miter_sine const-decl "posreal" miter_point_sequences nil)
    (e skolem-const-decl "[# p1: point_2d, p2: point_2d #]"
     miter_point_sequences nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   shostak))
 (miter_seg_pts_between_segments_1_TCC1 0
  (miter_seg_pts_between_segments_1_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (miter_seg_pts_between_segments_1 subtype
    "(number_fields.+)(1, miter_point_sequences.i)" "below[S`length]"))
  (miter_seg_pts_between_segments_1_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_seg_pts_between_segments_1 subtype
    "(number_fields.+)(1, miter_point_sequences.i)"
    "below[S`length]")))
 (miter_seg_pts_between_segments_1_TCC2 0
  (miter_seg_pts_between_segments_1_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (miter_seg_pts_between_segments_1 subtype "miter_point_sequences.i"
    "below[S`length]"))
  (miter_seg_pts_between_segments_1_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_seg_pts_between_segments_1 subtype "miter_point_sequences.i"
    "below[S`length]")))
 (miter_seg_pts_between_segments_1_TCC3 0
  (miter_seg_pts_between_segments_1_TCC3-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (min_miter_sine const-decl "posreal" miter_point_sequences nil)
    (- const-decl "Vector" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (min_seg_separation const-decl "posreal" segment_endpoint_sequences
     nil)
    (min_segment_sep const-decl "posreal" segment_endpoint_sequences
     nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (miter_seg_pts_between_segments_1 subtype
    "miter_point_sequences.S`seq(miter_point_sequences.i)"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.i))}"))
  (miter_seg_pts_between_segments_1_TCC3-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_seg_pts_between_segments_1 subtype
    "miter_point_sequences.S`seq(miter_point_sequences.i)"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.i))}")))
 (miter_seg_pts_between_segments_1_TCC4 0
  (miter_seg_pts_between_segments_1_TCC4-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (miter_seg_pts_between_segments_1 subtype
    "(number_fields.+)(2, miter_point_sequences.i)" "below[S`length]"))
  (miter_seg_pts_between_segments_1_TCC4-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_seg_pts_between_segments_1 subtype
    "(number_fields.+)(2, miter_point_sequences.i)"
    "below[S`length]")))
 (miter_seg_pts_between_segments_1_TCC5 0
  (miter_seg_pts_between_segments_1_TCC5-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "edge_para_endpts_valid_miter_point_args")
      (("" (inst - "S" "1 + i") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((edge_para_endpts_valid_miter_point_args formula-decl nil
     segment_endpoint_sequences nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (miter_seg_pts_between_segments_1 subtype
    "miter_point_sequences.S`seq((number_fields.+)(2, miter_point_sequences.i))"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.i)), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.S`seq(miter_point_sequences.i), miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.i))), (vectors_2D.-)(p, miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.i))))))}"))
  (miter_seg_pts_between_segments_1_TCC5-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_seg_pts_between_segments_1 subtype
    "miter_point_sequences.S`seq((number_fields.+)(2, miter_point_sequences.i))"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.i)), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.S`seq(miter_point_sequences.i), miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.i))), (vectors_2D.-)(p, miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.i))))))}")))
 (miter_seg_pts_between_segments_1_TCC6 0
  (miter_seg_pts_between_segments_1_TCC6-2 nil 3874129021
   ("" (skeep + t) (("" (inst - "1 + i") (("" (assert) nil nil)) nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (miter_seg_pts_between_segments_1 subtype
    "miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.i))"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq((number_fields.+)(2, miter_point_sequences.i))}"))
  (miter_seg_pts_between_segments_1_TCC6-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_seg_pts_between_segments_1 subtype
    "miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.i))"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq((number_fields.+)(2, miter_point_sequences.i))}")))
 (miter_seg_pts_between_segments_1_TCC7 0
  (miter_seg_pts_between_segments_1_TCC7-2 nil 3874129021
   ("" (skeep + t) (("" (assert) nil nil)) nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (miter_seg_pts_between_segments_1 subtype
    "(number_fields.+)(3, miter_point_sequences.i)" "below[S`length]"))
  (miter_seg_pts_between_segments_1_TCC7-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_seg_pts_between_segments_1 subtype
    "(number_fields.+)(3, miter_point_sequences.i)"
    "below[S`length]")))
 (miter_seg_pts_between_segments_1_TCC8 0
  (miter_seg_pts_between_segments_1_TCC8-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "edge_para_endpts_valid_miter_point_args")
      (("" (inst - "S" "2 + i") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((edge_para_endpts_valid_miter_point_args formula-decl nil
     segment_endpoint_sequences nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (miter_seg_pts_between_segments_1 subtype
    "miter_point_sequences.S`seq((number_fields.+)(3, miter_point_sequences.i))"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.S`seq((number_fields.+)(2, miter_point_sequences.i)), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.i)), miter_point_sequences.S`seq((number_fields.+)(2, miter_point_sequences.i))), (vectors_2D.-)(p, miter_point_sequences.S`seq((number_fields.+)(2, miter_point_sequences.i))))))}"))
  (miter_seg_pts_between_segments_1_TCC8-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_seg_pts_between_segments_1 subtype
    "miter_point_sequences.S`seq((number_fields.+)(3, miter_point_sequences.i))"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.S`seq((number_fields.+)(2, miter_point_sequences.i)), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.i)), miter_point_sequences.S`seq((number_fields.+)(2, miter_point_sequences.i))), (vectors_2D.-)(p, miter_point_sequences.S`seq((number_fields.+)(2, miter_point_sequences.i))))))}")))
 (miter_seg_pts_between_segments_1_TCC9 0
  (miter_seg_pts_between_segments_1_TCC9-2 nil 3874129021
   ("" (skeep)
    (("" (use "successive_miter_points_neq") (("" (ground) nil nil))
      nil))
    nil)
   ((successive_miter_points_neq formula-decl nil miter_point_sequences
     nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (miter_seg_pts_between_segments_1 subtype "miter_point_sequences.m2"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.m1}"))
  (miter_seg_pts_between_segments_1_TCC9-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_seg_pts_between_segments_1 subtype "miter_point_sequences.m2"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.m1}")))
 (miter_seg_pts_between_segments_1_TCC10 0
  (miter_seg_pts_between_segments_1_TCC10-2 nil 3874129021
   ("" (skeep)
    (("" (typepred "S")
      (("" (inst - "1 + i") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (miter_seg_pts_between_segments_1 subtype
    "miter_point_sequences.S`seq((number_fields.+)(2, miter_point_sequences.i))"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.i))}"))
  (miter_seg_pts_between_segments_1_TCC10-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_seg_pts_between_segments_1 subtype
    "miter_point_sequences.S`seq((number_fields.+)(2, miter_point_sequences.i))"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.i))}")))
 (miter_seg_pts_between_segments_1_TCC11 0
  (miter_seg_pts_between_segments_1_TCC11-2 nil 3874129021
   ("" (skeep)
    (("" (typepred "S")
      (("" (inst - "2 + i") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (miter_seg_pts_between_segments_1 subtype
    "miter_point_sequences.S`seq((number_fields.+)(3, miter_point_sequences.i))"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq((number_fields.+)(2, miter_point_sequences.i))}"))
  (miter_seg_pts_between_segments_1_TCC11-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_seg_pts_between_segments_1 subtype
    "miter_point_sequences.S`seq((number_fields.+)(3, miter_point_sequences.i))"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq((number_fields.+)(2, miter_point_sequences.i))}")))
 (miter_seg_pts_between_segments_1 0
  (miter_seg_pts_between_segments_1-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (lemma "three_pt_miniseq_in_endpt_seq")
          (("" (inst - "S" "2 + i" "d")
            (("" (lemma "four_pt_miniseq_in_endpt_seq")
              (("" (inst - "S" "1 + i" "d")
                (("" (flatten)
                  (("" (assert)
                    (("" (lemma "miter_point_cross_gt_0")
                      ((""
                        (inst - "S`seq(1 + i)" "S`seq(2 + i)"
                         "S`seq(3 + i)" "d")
                        (("" (assert)
                          ((""
                            (lemma "miter_pt_segment_parallel_to_orig")
                            ((""
                              (inst - "S`seq(i)" "S`seq(1 + i)"
                               "S`seq(2 + i)" "S`seq(3 + i)" "d")
                              ((""
                                (assert)
                                ((""
                                  (flatten)
                                  ((""
                                    (replace -10 :dir rl)
                                    ((""
                                      (replace -9 :dir rl)
                                      ((""
                                        (expand "dir_parallel?")
                                        ((""
                                          (skeep)
                                          ((""
                                            (expand "between_rays?")
                                            ((""
                                              (case
                                               "cross(S`seq(1 + i) - S`seq(2 + i), p - S`seq(2 + i)) > 0")
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (rewrite
                                                   "cross_antisymmetric"
                                                   1)
                                                  (("1"
                                                    (case
                                                     "point_on_segment?(p, (# p1 := m2, p2 := m1 #))")
                                                    (("1"
                                                      (rewrite
                                                       "point_on_segment_has_offset")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (case
                                                           "cross(p - S`seq(2 + i), S`seq(3 + i) - S`seq(2 + i)) > 0")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (case
                                                               "S`seq(1 + i) - S`seq(2 + i) = pk * (m1 - m2)")
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 1)
                                                                (("1"
                                                                  (equate
                                                                   "cross(m2 + d!1 * (m1 - m2) - S`seq(2 + i),
                                                            S`seq(3 + i) - S`seq(2 + i))"
                                                                   "cross(m2 - S`seq(2 + i), S`seq(3 + i) - S`seq(2 + i)) +
                                                  d!1 * cross(m1 - m2, S`seq(3 + i) - S`seq(2 + i))")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     +)
                                                                    (("1"
                                                                      (rewrite
                                                                       "cross_scales_1")
                                                                      (("1"
                                                                        (real-props)
                                                                        (("1"
                                                                          (case
                                                                           "d!1 * cross(m1 - m2, S`seq(3 + i) - S`seq(2 + i)) >= 0")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (real-props)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (-4
                                                                  1))
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (rewrite
                                                       "point_on_reverse_segment"
                                                       1
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (expand
                                                         "reverse_segment")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (lemma
                                                       "successive_miter_pair_neq")
                                                      (("3"
                                                        (inst
                                                         -
                                                         "S`seq(i)"
                                                         "S`seq(1 + i)"
                                                         "S`seq(2 + i)"
                                                         "S`seq(3 + i)"
                                                         "d")
                                                        (("3"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (case
                                                   "point_on_segment?(p, (# p1 := m2, p2 := m1 #))")
                                                  (("1"
                                                    (rewrite
                                                     "point_on_segment_has_offset")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (replace -1 1)
                                                        (("1"
                                                          (equate
                                                           "cross(S`seq(1 + i) - S`seq(2 + i),
                                                          m2 + d!1 * (m1 - m2) - S`seq(2 + i))"
                                                           "cross(S`seq(1 + i) - S`seq(2 + i), m2 - S`seq(2 + i)) +
                                                  d!1 * cross(S`seq(1 + i) - S`seq(2 + i), m1 - m2)")
                                                          (("1"
                                                            (case
                                                             "cross(S`seq(1 + i) - S`seq(2 + i), m1 - m2) = 0")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-3 1))
                                                              (("2"
                                                                (rewrite
                                                                 "cross_diff_both")
                                                                (("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (rewrite
                                                                     "cross_scales_1")
                                                                    (("2"
                                                                      (rewrite
                                                                       "cross_self_zero")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "point_on_reverse_segment"
                                                     1
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (expand
                                                       "reverse_segment")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (lemma
                                                     "successive_miter_pair_neq")
                                                    (("3"
                                                      (inst
                                                       -
                                                       "S`seq(i)"
                                                       "S`seq(1 + i)"
                                                       "S`seq(2 + i)"
                                                       "S`seq(3 + i)"
                                                       "d")
                                                      (("3"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "Vector" vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (<= const-decl "bool" reals nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (between_rays? const-decl "bool" between_rays nil)
    (three_pt_miniseq_in_endpt_seq formula-decl nil
     miter_point_sequences nil)
    (four_pt_miniseq_in_endpt_seq formula-decl nil
     miter_point_sequences nil)
    (miter_point_cross_gt_0 formula-decl nil miter_point_sequences nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (four_point_offset_dist? const-decl "bool"
     segment_endpoint_sequences nil)
    (four_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (cross_antisymmetric formula-decl nil vectors_cross_2d nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (successive_miter_pair_neq formula-decl nil miter_point_sequences
     nil)
    (point_on_reverse_segment formula-decl nil segments_2d nil)
    (reverse_segment const-decl "segment_2d" segments_2d nil)
    (point_on_segment_has_offset formula-decl nil segments_2d nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (* const-decl "Vector" vectors_2D vectors)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cross_scales_1 formula-decl nil vectors_cross_2d nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pos_times_ge formula-decl nil real_props nil)
    (neg_times_lt formula-decl nil real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cross_self_zero formula-decl nil vectors_cross_2d nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (cross_diff_both formula-decl nil vectors_cross_2d nil)
    (miter_pt_segment_parallel_to_orig formula-decl nil
     miter_point_sequences nil)
    (three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (miter_seg_pts_between_segments_2_TCC1 0
  (miter_seg_pts_between_segments_2_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (typepred "S") (("" (inst - "i") (("" (ground) nil nil)) nil))
      nil))
    nil)
   ((edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (miter_seg_pts_between_segments_2 subtype
    "miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.i))"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq(miter_point_sequences.i)}"))
  (miter_seg_pts_between_segments_2_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (miter_seg_pts_between_segments_2 subtype
    "miter_point_sequences.S`seq((number_fields.+)(1, miter_point_sequences.i))"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq(miter_point_sequences.i)}")))
 (miter_seg_pts_between_segments_2 0
  (miter_seg_pts_between_segments_2-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin*)
      (("" (flatten)
        (("" (lemma "three_pt_miniseq_in_endpt_seq")
          (("" (inst - "S" "1 + i" "d")
            (("" (lemma "four_pt_miniseq_in_endpt_seq")
              (("" (inst - "S" "1 + i" "d")
                (("" (flatten)
                  (("" (assert)
                    (("" (lemma "miter_point_cross_gt_0")
                      ((""
                        (inst - "S`seq(i)" "S`seq(1 + i)"
                         "S`seq(2 + i)" "d")
                        (("" (assert)
                          (("" (flatten)
                            ((""
                              (lemma
                               "miter_pt_segment_parallel_to_orig")
                              ((""
                                (inst
                                 -
                                 "S`seq(i)"
                                 "S`seq(1 + i)"
                                 "S`seq(2 + i)"
                                 "S`seq(3 + i)"
                                 "d")
                                ((""
                                  (assert)
                                  ((""
                                    (replace -10 :dir rl)
                                    ((""
                                      (replace -9 :dir rl)
                                      ((""
                                        (expand "dir_parallel?")
                                        ((""
                                          (skeep)
                                          ((""
                                            (expand "between_rays?")
                                            ((""
                                              (case
                                               "cross(S`seq(2 + i) - S`seq(1 + i), p - S`seq(1 + i)) < 0")
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (rewrite
                                                   "point_on_segment_has_offset")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (rewrite -9 1)
                                                      (("1"
                                                        (equate
                                                         "cross(S`seq(i) - S`seq(1 + i), m2 + d!1 * (m3 - m2) - S`seq(1 + i))"
                                                         "cross(S`seq(i) - S`seq(1 + i), m2 - S`seq(1 + i)) +
    d!1 * cross(S`seq(i) - S`seq(1 + i), m3 - m2)")
                                                        (("1"
                                                          (case
                                                           "d!1 * cross(S`seq(i) - S`seq(1 + i), m3 - m2) >= 0")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (replace
                                                               -2
                                                               +)
                                                              (("2"
                                                                (rewrite
                                                                 "cross_scales_2")
                                                                (("2"
                                                                  (mult-cases
                                                                   2)
                                                                  (("2"
                                                                    (mult-cases
                                                                     1)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "successive_miter_pair_neq")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "S`seq(i)"
                                                       "S`seq(1 + i)"
                                                       "S`seq(2 + i)"
                                                       "S`seq(3 + i)"
                                                       "d")
                                                      (("2"
                                                        (ground)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (rewrite
                                                   "cross_antisymmetric"
                                                   1)
                                                  (("2"
                                                    (case
                                                     "cross(p - S`seq(1 + i), S`seq(2 + i) - S`seq(1 + i)) > 0")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (rewrite
                                                         "point_on_segment_has_offset")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (replace
                                                             -8
                                                             1)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (equate
                                                                 "cross(m2 + d!1 * (m3 - m2) - S`seq(1 + i), pk * ((m3) - (m2)))"
                                                                 "cross(m2 - S`seq(1 + i), pk * ((m3) - (m2)))")
                                                                (("1"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "successive_miter_pair_neq")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "S`seq(i)"
                                                             "S`seq(1 + i)"
                                                             "S`seq(2 + i)"
                                                             "S`seq(3 + i)"
                                                             "d")
                                                            (("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "Vector" vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (<= const-decl "bool" reals nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (between_rays? const-decl "bool" between_rays nil)
    (three_pt_miniseq_in_endpt_seq formula-decl nil
     miter_point_sequences nil)
    (four_pt_miniseq_in_endpt_seq formula-decl nil
     miter_point_sequences nil)
    (miter_point_cross_gt_0 formula-decl nil miter_point_sequences nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (miter_pt_segment_parallel_to_orig formula-decl nil
     miter_point_sequences nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (cross const-decl "real" vectors_cross_2d nil)
    (point_on_segment_has_offset formula-decl nil segments_2d nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (neg_times_lt formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pos_times_ge formula-decl nil real_props nil)
    (cross_scales_2 formula-decl nil vectors_cross_2d nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (successive_miter_pair_neq formula-decl nil miter_point_sequences
     nil)
    (cross_antisymmetric formula-decl nil vectors_cross_2d nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (four_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (four_point_offset_dist? const-decl "bool"
     segment_endpoint_sequences nil)
    (three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (pt_on_seg_imp_pt_on_derived_seg_TCC1 0
  (pt_on_seg_imp_pt_on_derived_seg_TCC1-2 nil 3874129021
   ("" (skeep) (("" (replace -1) (("" (assert) nil nil)) nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors))
   shostak
   (pt_on_seg_imp_pt_on_derived_seg subtype "miter_point_sequences.v"
    "Nz_vector"))
  (pt_on_seg_imp_pt_on_derived_seg_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (pt_on_seg_imp_pt_on_derived_seg subtype "miter_point_sequences.v"
    "Nz_vector")))
 (pt_on_seg_imp_pt_on_derived_seg_TCC2 0
  (pt_on_seg_imp_pt_on_derived_seg_TCC2-2 nil 3874129021
   ("" (skeep)
    (("" (use "segment_far_endpoint_length")
      (("" (replace -1 -7)
        (("" (expand "length")
          (("" (cancel-add -7)
            (("" (replace -2 :dir rl)
              (("" (name-replace "u" "^(v)")
                (("" (move-terms -7 l 2)
                  (("" (factor -7 r)
                    (("" (use "scal_cancel") (("" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((segment_far_endpoint_length formula-decl nil segments_2d nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (length const-decl "posreal" segments_2d nil)
    (scal_cancel formula-decl nil vectors_2D vectors)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (scal_add_left formula-decl nil vectors_2D vectors)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (^ const-decl "Normalized" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (* const-decl "Vector" vectors_2D vectors)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   shostak
   (pt_on_seg_imp_pt_on_derived_seg subtype
    "(vectors_2D.-)(miter_point_sequences.s`p2, vectors_2D.*(miter_point_sequences.d2, vectors_2D.^(miter_point_sequences.v)))"
    "{p: vectors_cross_2d.point_2d | p /= (vectors_2D.+)(miter_point_sequences.s`p1, vectors_2D.*(miter_point_sequences.d1, vectors_2D.^(miter_point_sequences.v)))}"))
  (pt_on_seg_imp_pt_on_derived_seg_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (pt_on_seg_imp_pt_on_derived_seg subtype
    "(vectors_2D.-)(miter_point_sequences.s`p2, vectors_2D.*(miter_point_sequences.d2, vectors_2D.^(miter_point_sequences.v)))"
    "{p: vectors_cross_2d.point_2d | p /= (vectors_2D.+)(miter_point_sequences.s`p1, vectors_2D.*(miter_point_sequences.d1, vectors_2D.^(miter_point_sequences.v)))}")))
 (pt_on_seg_imp_pt_on_derived_seg 0
  (pt_on_seg_imp_pt_on_derived_seg-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin)
      (("" (flatten)
        (("" (rewrite "point_on_segment_has_offset" -)
          (("" (skeep)
            (("" (replace -3)
              (("" (replace -6 :dir rl)
                (("" (case "s`p2 = s`p1 + v")
                  (("1" (rewrite "point_on_segment_has_offset")
                    (("1"
                      (equate "s`p2 - d2 * ^(v) - (s`p1 + d1 * ^(v))"
                       "(norm(v) - d2 - d1) * ^(v)")
                      (("1" (replace -1 -3)
                        (("1"
                          (equate "s`p1 + v - (s`p1 + d * v)"
                           "(1 - d) * v")
                          (("1" (assert -2)
                            (("1" (rewrite* "norm_scal")
                              (("1"
                                (inst
                                 +
                                 "(d * norm(v) - d1) / (norm(v) - d2 - d1)")
                                (("1"
                                  (split 1)
                                  (("1"
                                    (cancel-add 1)
                                    (("1"
                                      (name-replace
                                       "ndd"
                                       "norm(v) - d2 - d1")
                                      (("1"
                                        (rewrite "scal_assoc")
                                        (("1"
                                          (real-props)
                                          (("1"
                                            (factor 1 r)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "^")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (cross-mult 1)
                                    (("2"
                                      (expand "abs")
                                      (("2" (real-props) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (cross-mult 1)
                                  (("2"
                                    (expand "abs")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("3" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (replace -1 1)
                        (("2" (hide-all-but 1)
                          (("2" (expand "^")
                            (("2" (name-replace "n" "norm(v)")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("3" (expand "v" 1) (("3" (ground) nil nil))
                        nil))
                      nil)
                     ("2" (replace -1 1)
                      (("2" (flatten)
                        (("2" (cancel-add -1)
                          (("2" (expand "^" -1)
                            (("2" (hide-all-but (-1 -7))
                              (("2"
                                (name-replace "n" "norm(v)")
                                (("2"
                                  (move-terms -1 r)
                                  (("2"
                                    (factor -1)
                                    (("2"
                                      (use "scal_eq_zero")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "v")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replace -6 1)
                    (("2" (move-terms 1 r 1) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "Vector" vectors_2D vectors)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (/= const-decl "boolean" notequal nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (point_on_segment_has_offset formula-decl nil segments_2d nil)
    (scal_eq_zero formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (norm_scal formula-decl nil vectors_2D vectors)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (div_cancel2 formula-decl nil real_props nil)
    (scal_sub_left formula-decl nil vectors_2D vectors)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (both_sides_minus_le1 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (d skolem-const-decl "nonneg_real" miter_point_sequences nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (d2 skolem-const-decl "real" miter_point_sequences nil)
    (d1 skolem-const-decl "real" miter_point_sequences nil)
    (v skolem-const-decl "Vector" miter_point_sequences nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (add_cancel formula-decl nil vectors_2D vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil))
   shostak))
 (pt_on_seg_imp_offset_pt_on_parallel_seg 0
  (pt_on_seg_imp_offset_pt_on_parallel_seg-1 nil 3874129021
   ("" (skeep)
    (("" (lemma "point_on_subsegment")
      (("" (inst - "p + v" "(# p1 := e`p1 + v, p2 := e`p2 + v #)" "s")
        (("1" (ground)
          (("1" (expand "point_on_segment?")
            (("1" (skeep*)
              (("1" (inst + "t")
                (("1" (assert)
                  (("1" (distrib 1)
                    (("1" (cancel-add 1) (("1" (distrib -3) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "subsegment?") (("2" (propax) nil nil)) nil))
          nil)
         ("2" (flatten)
          (("2" (cancel-add -1) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((point_on_subsegment formula-decl nil segments_2d_props nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "Vector" vectors_2D vectors)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (scal_add_right formula-decl nil vectors_2D vectors)
    (scal_sub_left formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "Vector" vectors_2D vectors)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (subsegment? const-decl "bool" segments_2d_props nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (segment_2d type-eq-decl nil segments_2d nil)
    (e skolem-const-decl "segment_2d" miter_point_sequences nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (v skolem-const-decl "vector_2d" miter_point_sequences nil))
   shostak))
 (half_angle_vcos_eq_miter_pt_vcos_TCC1 0
  (half_angle_vcos_eq_miter_pt_vcos_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (typepred "S")
      (("" (inst - "i - 1") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (half_angle_vcos_eq_miter_pt_vcos subtype "miter_point_sequences.u"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.v}"))
  (half_angle_vcos_eq_miter_pt_vcos_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (half_angle_vcos_eq_miter_pt_vcos subtype "miter_point_sequences.u"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.v}")))
 (half_angle_vcos_eq_miter_pt_vcos_TCC2 0
  (half_angle_vcos_eq_miter_pt_vcos_TCC2-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "edge_para_endpts_valid_miter_point_args")
      (("" (inst - "S" "i") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((edge_para_endpts_valid_miter_point_args formula-decl nil
     segment_endpoint_sequences nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak
   (half_angle_vcos_eq_miter_pt_vcos subtype "miter_point_sequences.w"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.v, (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.u, miter_point_sequences.v), (vectors_2D.-)(p, miter_point_sequences.v))))}"))
  (half_angle_vcos_eq_miter_pt_vcos_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (half_angle_vcos_eq_miter_pt_vcos subtype "miter_point_sequences.w"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.v, (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.u, miter_point_sequences.v), (vectors_2D.-)(p, miter_point_sequences.v))))}")))
 (half_angle_vcos_eq_miter_pt_vcos_TCC3 0
  (half_angle_vcos_eq_miter_pt_vcos_TCC3-2 nil 3874129021
   ("" (skeep)
    (("" (use "miter_point_neq_vertex")
      (("" (ground)
        (("" (replace -2 :dir rl)
          (("" (replace -1 :dir rl)
            (("" (replace -3 :dir rl)
              (("" (lemma "miter_point_neq_vertex")
                (("" (inst - "S" "i" "d") (("" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((miter_point_neq_vertex formula-decl nil miter_point_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (<= const-decl "bool" reals nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors))
   shostak
   (half_angle_vcos_eq_miter_pt_vcos subtype
    "(vectors_2D.-)(miter_point_sequences.m, miter_point_sequences.v)"
    "Nz_vector"))
  (half_angle_vcos_eq_miter_pt_vcos_TCC3-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (half_angle_vcos_eq_miter_pt_vcos subtype
    "(vectors_2D.-)(miter_point_sequences.m, miter_point_sequences.v)"
    "Nz_vector")))
 (half_angle_vcos_eq_miter_pt_vcos 0
  (half_angle_vcos_eq_miter_pt_vcos-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin*)
      (("" (rewrite "miter_point_defns_equiv")
        (("" (expand "miter_point_hyp")
          (("" (replace -1 :hide? t)
            (("" (assert)
              (("" (use "three_pt_miniseq_in_endpt_seq")
                (("" (flatten)
                  (("" (expand "three_point_miniseq?")
                    (("" (flatten)
                      (("" (rewrite "normalize_scal")
                        (("1" (expand "sign")
                          (("1" (lift-if)
                            (("1" (split 4)
                              (("1"
                                (rewrite "normalize_normalize")
                                (("1"
                                  (ground)
                                  (("1"
                                    (expand "segment_bisect_vector")
                                    (("1"
                                      (lemma
                                       "half_angle_cosine_defns_equiv")
                                      (("1"
                                        (inst - "v" "u" "w")
                                        (("1"
                                          (equate
                                           "half_angle_vcos(^(u - v), ^(w - v))"
                                           "half_angle_vcos(^(uv), ^(wv))"
                                           (assert))
                                          (("1"
                                            (replace -1 :hide? t)
                                            (("1"
                                              (expand
                                               "alt_half_angle_vcos")
                                              (("1"
                                                (apply
                                                 (repeat (lift-if)))
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (expand "vcos")
                                                    (("1"
                                                      (expand "uv")
                                                      (("1"
                                                        (hide-all-but
                                                         1)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -2)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (replace -1)
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (hide-all-but
                                                         2)
                                                        (("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (use
                                                     "parallel_equiv_cross_eq_0")
                                                    (("4"
                                                      (assert)
                                                      (("4"
                                                        (expand
                                                         "parallel?")
                                                        (("4"
                                                          (expand
                                                           "dir_parallel?")
                                                          (("4"
                                                            (skeep)
                                                            (("4"
                                                              (case
                                                               "nzk > 0")
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "nzk")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (hide-all-but
                                                                   (1
                                                                    3))
                                                                  (("2"
                                                                    (expand
                                                                     "^")
                                                                    (("2"
                                                                      (rewrite
                                                                       "norm_scal")
                                                                      (("2"
                                                                        (expand
                                                                         "abs")
                                                                        (("2"
                                                                          (ground)
                                                                          (("2"
                                                                            (real-props)
                                                                            (("2"
                                                                              (name-replace
                                                                               "n"
                                                                               "norm(w - v)")
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("5"
                                                    (expand "uv" 1)
                                                    (("5"
                                                      (expand "vcos")
                                                      (("5"
                                                        (name-replace*
                                                         ("nuv"
                                                          "^(u - v)"
                                                          "nwv"
                                                          "^(w - v)"))
                                                        (("5"
                                                          (expand
                                                           "^"
                                                           1)
                                                          (("5"
                                                            (hide-all-but
                                                             1)
                                                            (("5"
                                                              (rewrite
                                                               "dot_scal_right")
                                                              (("5"
                                                                (cross-mult
                                                                 1)
                                                                (("5"
                                                                  (equate
                                                                   "nuv + nwv"
                                                                   "nwv + nuv")
                                                                  (("1"
                                                                    (cancel-by
                                                                     1
                                                                     "norm(nwv + nuv)")
                                                                    (("1"
                                                                      (hide
                                                                       1)
                                                                      (("1"
                                                                        (grind)
                                                                        (("1"
                                                                          (use
                                                                           "sqv_normalized_eq_1")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("6"
                                                    (hide-all-but
                                                     (-1 1 3))
                                                    (("6"
                                                      (expand "^")
                                                      (("6"
                                                        (rewrite
                                                         "cross_scales")
                                                        (("6"
                                                          (real-props)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("7"
                                                    (hide-all-but
                                                     (-1 2))
                                                    (("7"
                                                      (expand "^")
                                                      (("7"
                                                        (rewrite
                                                         "cross_scales")
                                                        (("7"
                                                          (real-props)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("8"
                                                    (hide-all-but
                                                     (-1 3))
                                                    (("8"
                                                      (expand "^")
                                                      (("8"
                                                        (rewrite
                                                         "cross_scales")
                                                        (("8"
                                                          (real-props)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("9"
                                                    (expand "uv" 2)
                                                    (("9"
                                                      (expand "vcos")
                                                      (("9"
                                                        (name-replace*
                                                         ("nuv"
                                                          "^(u - v)"
                                                          "nwv"
                                                          "^(w - v)"))
                                                        (("9"
                                                          (expand
                                                           "^"
                                                           2)
                                                          (("9"
                                                            (hide-all-but
                                                             2)
                                                            (("9"
                                                              (rewrite
                                                               "dot_scal_right")
                                                              (("9"
                                                                (cross-mult
                                                                 1)
                                                                (("9"
                                                                  (equate
                                                                   "nuv + nwv"
                                                                   "nwv + nuv")
                                                                  (("1"
                                                                    (cancel-by
                                                                     1
                                                                     "norm(nwv + nuv)")
                                                                    (("1"
                                                                      (hide
                                                                       1)
                                                                      (("1"
                                                                        (field
                                                                         1)
                                                                        (("1"
                                                                          (grind)
                                                                          (("1"
                                                                            (case
                                                                             "forall (a, b: real): a * -b = -(a * b)")
                                                                            (("1"
                                                                              (rewrite*
                                                                               -1)
                                                                              (("1"
                                                                                (equate
                                                                                 "nwv`x * nuv`x"
                                                                                 "nuv`x * nwv`x"
                                                                                 (assert))
                                                                                (("1"
                                                                                  (elim-unary
                                                                                   1)
                                                                                  (("1"
                                                                                    (equate
                                                                                     "nwv`y * nuv`y"
                                                                                     "nuv`y * nwv`y"
                                                                                     (assert))
                                                                                    (("1"
                                                                                      (cancel-add
                                                                                       1)
                                                                                      (("1"
                                                                                        (use
                                                                                         "sqv_normalized_eq_1")
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "segment_bisect_vector")
                                    (("2"
                                      (lemma
                                       "half_angle_cosine_defns_equiv")
                                      (("2"
                                        (inst - "v" "u" "w")
                                        (("2"
                                          (equate
                                           "half_angle_vcos(^(u - v), ^(w - v))"
                                           "half_angle_vcos(^(uv), ^(wv))"
                                           (assert))
                                          (("2"
                                            (replace -1 :hide? t)
                                            (("2"
                                              (expand "wv" +)
                                              (("2"
                                                (expand
                                                 "alt_half_angle_vcos")
                                                (("2"
                                                  (apply
                                                   (repeat (lift-if)))
                                                  (("2"
                                                    (ground)
                                                    (("1"
                                                      (rewrite
                                                       "perp_right_preserves_norm"
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (replace -2)
                                                        (("1"
                                                          (hide-all-but
                                                           1)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -2)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (replace -1)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (hide-all-but
                                                           2)
                                                          (("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (use
                                                       "parallel_equiv_cross_eq_0")
                                                      (("4"
                                                        (assert)
                                                        (("4"
                                                          (expand
                                                           "parallel?")
                                                          (("4"
                                                            (expand
                                                             "dir_parallel?")
                                                            (("4"
                                                              (skeep)
                                                              (("4"
                                                                (case
                                                                 "nzk > 0")
                                                                (("1"
                                                                  (inst
                                                                   +
                                                                   "nzk")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     (1
                                                                      3))
                                                                    (("2"
                                                                      (expand
                                                                       "^")
                                                                      (("2"
                                                                        (rewrite
                                                                         "norm_scal")
                                                                        (("2"
                                                                          (expand
                                                                           "abs")
                                                                          (("2"
                                                                            (ground)
                                                                            (("2"
                                                                              (real-props)
                                                                              (("2"
                                                                                (name-replace
                                                                                 "n"
                                                                                 "norm(w - v)")
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("5"
                                                      (expand "vcos")
                                                      (("5"
                                                        (name-replace*
                                                         ("nuv"
                                                          "^(u - v)"
                                                          "nwv"
                                                          "^(w - v)"))
                                                        (("5"
                                                          (expand
                                                           "^"
                                                           1)
                                                          (("5"
                                                            (hide-all-but
                                                             1)
                                                            (("5"
                                                              (rewrite
                                                               "dot_scal_right")
                                                              (("5"
                                                                (cross-mult
                                                                 1)
                                                                (("5"
                                                                  (equate
                                                                   "nuv + nwv"
                                                                   "nwv + nuv")
                                                                  (("1"
                                                                    (cancel-by
                                                                     1
                                                                     "norm(nwv + nuv)")
                                                                    (("1"
                                                                      (hide
                                                                       1)
                                                                      (("1"
                                                                        (grind)
                                                                        (("1"
                                                                          (use
                                                                           "sqv_normalized_eq_1")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("6"
                                                      (hide-all-but
                                                       (-1 1 3))
                                                      (("6"
                                                        (expand "^")
                                                        (("6"
                                                          (rewrite
                                                           "cross_scales")
                                                          (("6"
                                                            (real-props)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("7"
                                                      (hide-all-but
                                                       (-1 2))
                                                      (("7"
                                                        (expand "^")
                                                        (("7"
                                                          (rewrite
                                                           "cross_scales")
                                                          (("7"
                                                            (real-props)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("8"
                                                      (hide-all-but
                                                       (-1 3))
                                                      (("8"
                                                        (expand "^")
                                                        (("8"
                                                          (rewrite
                                                           "cross_scales")
                                                          (("8"
                                                            (real-props)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("9"
                                                      (expand "vcos")
                                                      (("9"
                                                        (name-replace*
                                                         ("nuv"
                                                          "^(u - v)"
                                                          "nwv"
                                                          "^(w - v)"))
                                                        (("9"
                                                          (expand
                                                           "^"
                                                           2)
                                                          (("9"
                                                            (hide-all-but
                                                             2)
                                                            (("9"
                                                              (rewrite
                                                               "dot_scal_right")
                                                              (("9"
                                                                (cross-mult
                                                                 1)
                                                                (("9"
                                                                  (equate
                                                                   "nuv + nwv"
                                                                   "nwv + nuv")
                                                                  (("1"
                                                                    (name-replace
                                                                     "n"
                                                                     "norm(nwv + nuv)")
                                                                    (("1"
                                                                      (field
                                                                       1)
                                                                      (("1"
                                                                        (grind)
                                                                        (("1"
                                                                          (case
                                                                           "forall (a, b: real): a * -b = -(a * b)")
                                                                          (("1"
                                                                            (rewrite*
                                                                             -1)
                                                                            (("1"
                                                                              (elim-unary
                                                                               1)
                                                                              (("1"
                                                                                (cancel-add
                                                                                 1)
                                                                                (("1"
                                                                                  (move-terms
                                                                                   1
                                                                                   r)
                                                                                  (("1"
                                                                                    (elim-unary
                                                                                     1)
                                                                                    (("1"
                                                                                      (cancel-add
                                                                                       1)
                                                                                      (("1"
                                                                                        (use
                                                                                         "sqv_normalized_eq_1")
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (use "miter_half_angle_sine_pos")
                                  (("2"
                                    (assert)
                                    (("2" (cross-mult 1) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (use "miter_half_angle_sine_pos")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sub_eq_zero formula-decl nil vectors_2D vectors)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (<= const-decl "bool" reals nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (half_angle_vcos const-decl "{x: real | -1 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (vcos const-decl "{x: real | -1 <= x AND x <= 1}" vectors_2d_trig
     nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (miter_point_hyp const-decl "point_2d" vectors_2d_trig nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (add_cancel formula-decl nil vectors_2D vectors)
    (sign const-decl "Sign" sign reals)
    (scal_1 formula-decl nil vectors_2D vectors)
    (half_angle_cosine_defns_equiv formula-decl nil vectors_2d_trig
     nil)
    (alt_half_angle_vcos const-decl "{x: real | -1 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (neg_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (uv skolem-const-decl "Vector" miter_point_sequences nil)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (perp_right const-decl "vector_2d" vectors_cross_2d nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sub_eq_args formula-decl nil vectors_2D vectors)
    (add_neg_sub formula-decl nil vectors_2D vectors)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (comp_zero_y formula-decl nil vectors_2D vectors)
    (sqrt_0 formula-decl nil sqrt reals)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (neg_zero formula-decl nil vectors_2D vectors)
    (nzk skolem-const-decl "nzreal" miter_point_sequences nil)
    (norm_scal formula-decl nil vectors_2D vectors)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (- const-decl "Vector" vectors_2D vectors)
    (times_div2 formula-decl nil real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (parallel? const-decl "bool" vectors_2D vectors)
    (parallel_equiv_cross_eq_0 formula-decl nil vectors_cross_2d nil)
    (dot_scal_right formula-decl nil vectors_2D vectors)
    (sqv_normalized_eq_1 formula-decl nil vectors_cross_2d nil)
    (nz_sqv_gt_0 application-judgement "posreal" vectors_2D vectors)
    (both_sides_times1 formula-decl nil real_props nil)
    (div_401 skolem-const-decl "nnreal" miter_point_sequences nil)
    (div_cancel4 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_cancel3 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (times_div1 formula-decl nil real_props nil)
    (div_times formula-decl nil real_props nil)
    (neg_times_le formula-decl nil real_props nil)
    (neg_times_lt formula-decl nil real_props nil)
    (norm_diff_pos formula-decl nil vectors_cross_2d nil)
    (pos_times_gt formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cross_scales formula-decl nil vectors_cross_2d nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (norm_neg formula-decl nil vectors_2D vectors)
    (div_cancel2 formula-decl nil real_props nil)
    (cross_mult formula-decl nil real_props nil)
    (scal_neg_1 formula-decl nil vectors_2D vectors)
    (wv skolem-const-decl "Vector" miter_point_sequences nil)
    (div_408 skolem-const-decl "nnreal" miter_point_sequences nil)
    (nzk skolem-const-decl "nzreal" miter_point_sequences nil)
    (perp_right_preserves_norm formula-decl nil vectors_cross_2d nil)
    (normalize_normalize formula-decl nil vectors_2D vectors)
    (miter_half_angle_sine_pos formula-decl nil miter_point_sequences
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (normalize_scal formula-decl nil vectors_2D vectors)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (segment_bisect_vector const-decl "Nz_vector" vectors_2d_trig nil)
    (three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (three_pt_miniseq_in_endpt_seq formula-decl nil
     miter_point_sequences nil)
    (miter_point_defns_equiv formula-decl nil vectors_2d_trig nil))
   shostak))
 (miter_seg_pts_max_min_dist 0
  (miter_seg_pts_max_min_dist-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin*)
      (("" (lemma "successive_miter_points_neq")
        (("" (inst - "S" "1 + i" "d")
          (("" (assert)
            (("" (replace -1 :dir rl)
              (("" (replace -2 :dir rl)
                (("" (copy -2)
                  (("" (copy -2)
                    (("" (use "miter_point_defns_equiv")
                      (("" (replace -1 -2 :hide? t)
                        ((""
                          (rewrite "miter_point_defns_equiv_2" :dir rl)
                          (("" (flatten)
                            (("" (expand "miter_point_prev")
                              ((""
                                (expand "miter_point" -2)
                                ((""
                                  (name-replace*
                                   ("c1"
                                    "half_angle_vcos(^(S`seq(i) - S`seq(1 + i)),
                                                                 ^(S`seq(2 + i) - S`seq(1 + i)))"
                                    "c2"
                                    "half_angle_vcos(^(S`seq(1 + i) - S`seq(2 + i)),
                                                                 ^(S`seq(3 + i) - S`seq(2 + i)))"))
                                  ((""
                                    (name-replace*
                                     ("s1"
                                      "half_angle_vsin(^(S`seq(i) - S`seq(1 + i)),
                                                                  ^(S`seq(2 + i) - S`seq(1 + i)))"
                                      "s2"
                                      "half_angle_vsin(^(S`seq(1 + i) - S`seq(2 + i)),
                                                                  ^(S`seq(3 + i) - S`seq(2 + i)))"))
                                    ((""
                                      (equate
                                       "S`seq(2 + i) + d * (c2 / s2) * ^(S`seq(1 + i) - S`seq(2 + i)) +
                                  d * ^(perp_right(S`seq(1 + i) - S`seq(2 + i)))"
                                       "S`seq(2 + i) - d * (c2 / s2) * ^(S`seq(2 + i) - S`seq(1 + i)) +
                                  d * ^(perp_left(S`seq(2 + i) - S`seq(1 + i)))")
                                      (("1"
                                        (name-replace
                                         "ms"
                                         "min_miter_sine(S)"
                                         :hide?
                                         nil)
                                        (("1"
                                          (case
                                           "if c1 >= 0 then c1 / s1 <= c1 / ms else  c1 / s1 >= c1 / ms endif")
                                          (("1"
                                            (case
                                             "if c2 >= 0 then c2 / s2 <= c2 / ms else  c2 / s2 >= c2 / ms endif")
                                            (("1"
                                              (name-replace*
                                               ("u"
                                                "S`seq(2 + i) - S`seq(1 + i)"
                                                "v"
                                                "^(u)"))
                                              (("1"
                                                (case
                                                 "6 * d * abs(c1) / s1 <= norm(u) & 6 * d * abs(c2) / s2 <= norm(u)")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (rewrite
                                                     "perp_left_preserves_norm"
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (replace -3)
                                                      (("1"
                                                        (case
                                                         "norm(p - m1) < -(d * c1 / s1)")
                                                        (("1"
                                                          (case
                                                           "c1 < 0")
                                                          (("1"
                                                            (rewrite
                                                             "point_on_segment_has_offset")
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (lemma
                                                                 "three_pt_miniseq_in_endpt_seq")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "S"
                                                                   "1 + i"
                                                                   "d")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (expand
                                                                           "three_point_miniseq?")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "S`seq(1 + i)")
                                                                              (("1"
                                                                                (split
                                                                                 +)
                                                                                (("1"
                                                                                  (expand
                                                                                   "point_on_segment?")
                                                                                  (("1"
                                                                                    (inst
                                                                                     +
                                                                                     "0")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (replace
                                                                                   -16)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "norm_scal")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "abs"
                                                                                         -2)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "perp_comps")
                                                                                          (("2"
                                                                                            (inst-cp
                                                                                             -
                                                                                             "m1"
                                                                                             "S`seq(1 + i)"
                                                                                             "m2 - m1"
                                                                                             "d!1"
                                                                                             "perp_pt(S`seq(1 + i), m1, m2 - m1)")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "m1"
                                                                                               "S`seq(1 + i)"
                                                                                               "m2 - m1"
                                                                                               "0"
                                                                                               "perp_pt(S`seq(1 + i), m1, m2 - m1)")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "sq_le"
                                                                                                   1
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -2
                                                                                                     :hide?
                                                                                                     t)
                                                                                                    (("2"
                                                                                                      (move-terms
                                                                                                       -1
                                                                                                       r
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         1
                                                                                                         :dir
                                                                                                         rl
                                                                                                         :hide?
                                                                                                         t)
                                                                                                        (("2"
                                                                                                          (case
                                                                                                           "sq(norm((d!1 - perp_pt(S`seq(1 + i), m1, m2 - m1)) * (m2 - m1)))
                                                                                                                                                                  <= sq(norm(-1 * perp_pt(S`seq(1 + i), m1, m2 - m1) * (m2 - m1)))")
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "sq(norm(m1 - S`seq(1 + i))) <= sq(d / ms)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (lemma
                                                                                                               "miter_pt_dist_to_edge_endpt_bound")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "S"
                                                                                                                 "1 + i"
                                                                                                                 "d")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (rewrite
                                                                                                                     "sq_le"
                                                                                                                     -1
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (case
                                                                                                               "d!1 < perp_pt(S`seq(1 + i), m1, m2 - m1)")
                                                                                                              (("1"
                                                                                                                (hide-all-but
                                                                                                                 (-1
                                                                                                                  -17
                                                                                                                  +))
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   "sq_le")
                                                                                                                  (("1"
                                                                                                                    (rewrite*
                                                                                                                     "norm_scal")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "abs")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "perp_pt"
                                                                                                                   +)
                                                                                                                  (("2"
                                                                                                                    (cross-mult
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (split
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "sqv_rew"
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "sq_norm"
                                                                                                                             1
                                                                                                                             :dir
                                                                                                                             rl)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "half_angle_vcos_eq_miter_pt_vcos")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -
                                                                                                                                 "S"
                                                                                                                                 "1 + i"
                                                                                                                                 "d")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (equate
                                                                                                                                         "half_angle_vcos(^(S`seq(i) - S`seq(1 + i)),
                                                                                                                                  ^(S`seq(2 + i) - S`seq(1 + i)))"
                                                                                                                                         "c1"
                                                                                                                                         (assert))
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -21
                                                                                                                                           :dir
                                                                                                                                           rl)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "miter_pt_segment_parallel_to_edge")
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -
                                                                                                                                               "S"
                                                                                                                                               "1 + i"
                                                                                                                                               "d")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -22
                                                                                                                                                   :dir
                                                                                                                                                   rl)
                                                                                                                                                  (("1"
                                                                                                                                                    (replace
                                                                                                                                                     -21
                                                                                                                                                     :dir
                                                                                                                                                     rl)
                                                                                                                                                    (("1"
                                                                                                                                                      (copy
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "dir_parallel?"
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (skeep)
                                                                                                                                                          (("1"
                                                                                                                                                            (case
                                                                                                                                                             "^(S`seq(2 + i) - S`seq(1 + i)) = ^(m2 - m1)")
                                                                                                                                                            (("1"
                                                                                                                                                              (lemma
                                                                                                                                                               "complementary_angle_vcos_eq")
                                                                                                                                                              (("1"
                                                                                                                                                                (inst
                                                                                                                                                                 -
                                                                                                                                                                 "S`seq(2 + i)"
                                                                                                                                                                 "S`seq(1 + i)"
                                                                                                                                                                 "m1"
                                                                                                                                                                 "m2"
                                                                                                                                                                 "pk")
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (split
                                                                                                                                                                     -1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replace
                                                                                                                                                                       -5
                                                                                                                                                                       -1
                                                                                                                                                                       :dir
                                                                                                                                                                       rl)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (equate
                                                                                                                                                                         "(S`seq(1 + i) - m1) * (m2 - m1)"
                                                                                                                                                                         "vcos(^(S`seq(1 + i) - m1), ^(m2 - m1)) *
                                                                                                                                                                   norm(S`seq(1 + i) - m1) * norm(m2 - m1)")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (equate
                                                                                                                                                                           "vcos(^(S`seq(1 + i) - m1), ^(m2 - m1))"
                                                                                                                                                                           "-c1"
                                                                                                                                                                           (assert))
                                                                                                                                                                          (("1"
                                                                                                                                                                            (expand
                                                                                                                                                                             "sq"
                                                                                                                                                                             1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (cancel-by
                                                                                                                                                                               1
                                                                                                                                                                               "norm(m2 - m1)")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (lemma
                                                                                                                                                                                 "miter_pt_dist_to_pivot_pt_bound")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -
                                                                                                                                                                                   "S`seq(i)"
                                                                                                                                                                                   "S`seq(1 + i)"
                                                                                                                                                                                   "S`seq(2 + i)"
                                                                                                                                                                                   "d")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -27
                                                                                                                                                                                       :dir
                                                                                                                                                                                       rl)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (equate
                                                                                                                                                                                         "half_angle_vsin(^(S`seq(i) - S`seq(1 + i)),
                                                                                                                                                                                                          ^(S`seq(2 + i) - S`seq(1 + i)))"
                                                                                                                                                                                         "s1"
                                                                                                                                                                                         (assert))
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (rewrite
                                                                                                                                                                                           "norm_sym"
                                                                                                                                                                                           -1)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (mult-by
                                                                                                                                                                                             -1
                                                                                                                                                                                             "-c1")
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (case
                                                                                                                                                                                               "forall (a, b: real): a * -b = -(a * b)")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (rewrite
                                                                                                                                                                                                 -1
                                                                                                                                                                                                 =2)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (rewrite
                                                                                                                                                                                                   -1
                                                                                                                                                                                                   =2)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil)
                                                                                                                                                                                               ("2"
                                                                                                                                                                                                (hide-all-but
                                                                                                                                                                                                 1)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (grind)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "three_point_miniseq?")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (propax)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil)
                                                                                                                                                                         ("2"
                                                                                                                                                                          (hide-all-but
                                                                                                                                                                           1)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (grind)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (lemma
                                                                                                                                                                       "miter_point_neq_vertex")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (inst
                                                                                                                                                                         -
                                                                                                                                                                         "S"
                                                                                                                                                                         "1 + i"
                                                                                                                                                                         "d")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (lemma
                                                                                                                                                               "dir_parallel_imp_scaled_by_norms_eq")
                                                                                                                                                              (("2"
                                                                                                                                                                (inst
                                                                                                                                                                 -
                                                                                                                                                                 "S`seq(2 + i) - S`seq(1 + i)"
                                                                                                                                                                 "m2 - m1")
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "^"
                                                                                                                                                                   1)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (cross-mult
                                                                                                                                                                     1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "sqv_rew"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (use
                                                                                                                             "sqv_eq_0")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case-replace
                                                             "c1 = 0")
                                                            (("1"
                                                              (case-replace
                                                               "p = m1")
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "S`seq(1 + i)")
                                                                (("1"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (use
                                                                 "norm_eq_0")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-1
                                                                1
                                                                2))
                                                              (("2"
                                                                (case
                                                                 "-(d * c1 / s1) < 0")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (move-terms
                                                                   1
                                                                   l)
                                                                  (("2"
                                                                    (elim-unary
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (cross-mult
                                                                         1)
                                                                        (("2"
                                                                          (ground)
                                                                          (("1"
                                                                            (mult-cases
                                                                             1)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             -)
                                                                            (("2"
                                                                              (equate
                                                                               "0 * s1"
                                                                               "0"
                                                                               (assert))
                                                                              (("2"
                                                                                (mult-cases
                                                                                 2)
                                                                                (("2"
                                                                                  (expand
                                                                                   "s1")
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "miter_half_angle_sine_pos")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -
                                                                                       "S"
                                                                                       "1 + i")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "norm(m2 - p) < -(d * c2 / s2)")
                                                          (("1"
                                                            (case
                                                             "c2 < 0")
                                                            (("1"
                                                              (rewrite
                                                               "point_on_reverse_segment"
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (expand
                                                                 "reverse_segment")
                                                                (("1"
                                                                  (lemma
                                                                   "three_pt_miniseq_in_endpt_seq")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "S"
                                                                     "2 + i"
                                                                     "d")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (hide
                                                                           -2)
                                                                          (("1"
                                                                            (expand
                                                                             "three_point_miniseq?")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "point_on_segment_has_offset")
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (inst
                                                                                     +
                                                                                     "S`seq(2 + i)")
                                                                                    (("1"
                                                                                      (split
                                                                                       6)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "point_on_segment?")
                                                                                        (("1"
                                                                                          (inst
                                                                                           +
                                                                                           "1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (replace
                                                                                         -16)
                                                                                        (("2"
                                                                                          (equate
                                                                                           "m2 - (m2 + d!1 * (m1 - m2))"
                                                                                           "-d!1 * (m1 - m2)")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "norm_scal")
                                                                                            (("1"
                                                                                              (equate
                                                                                               "abs(-d!1)"
                                                                                               "d!1")
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "perp_comps")
                                                                                                (("1"
                                                                                                  (inst-cp
                                                                                                   -
                                                                                                   "m2"
                                                                                                   "S`seq(2 + i)"
                                                                                                   "m1 - m2"
                                                                                                   "d!1"
                                                                                                   "perp_pt(S`seq(2 + i), m2, m1 - m2)")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "m2"
                                                                                                     "S`seq(2 + i)"
                                                                                                     "m1 - m2"
                                                                                                     "0"
                                                                                                     "perp_pt(S`seq(2 + i), m2, m1 - m2)")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "sq_le"
                                                                                                         1
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -2
                                                                                                           :hide?
                                                                                                           t)
                                                                                                          (("1"
                                                                                                            (move-terms
                                                                                                             -1
                                                                                                             r
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               1
                                                                                                               :dir
                                                                                                               rl
                                                                                                               :hide?
                                                                                                               t)
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "sq(norm((d!1 - perp_pt(S`seq(2 + i), m2, m1 - m2)) * (m1 - m2)))
                                                                                                               <= sq(norm(-1 * perp_pt(S`seq(2 + i), m2, m1 - m2) * (m1 - m2)))")
                                                                                                                (("1"
                                                                                                                  (case
                                                                                                                   "sq(norm(m2 - S`seq(2 + i))) <= sq(d / ms)")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (lemma
                                                                                                                     "miter_pt_dist_to_edge_endpt_bound")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -
                                                                                                                       "S"
                                                                                                                       "2 + i"
                                                                                                                       "d")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "sq_le"
                                                                                                                           -1
                                                                                                                           :dir
                                                                                                                           rl)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (case
                                                                                                                     "d!1 < perp_pt(S`seq(2 + i), m2, m1 - m2)")
                                                                                                                    (("1"
                                                                                                                      (hide-all-but
                                                                                                                       (-1
                                                                                                                        -18
                                                                                                                        +))
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "sq_le")
                                                                                                                        (("1"
                                                                                                                          (rewrite*
                                                                                                                           "norm_scal")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "abs")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "perp_pt"
                                                                                                                         +)
                                                                                                                        (("2"
                                                                                                                          (cross-mult
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (split
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (rewrite
                                                                                                                                 "sqv_rew"
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (rewrite
                                                                                                                                   "sq_norm"
                                                                                                                                   1
                                                                                                                                   :dir
                                                                                                                                   rl)
                                                                                                                                  (("1"
                                                                                                                                    (lemma
                                                                                                                                     "half_angle_vcos_eq_miter_pt_vcos")
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -
                                                                                                                                       "S"
                                                                                                                                       "2 + i"
                                                                                                                                       "d")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (hide
                                                                                                                                             -2)
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -14)
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -20
                                                                                                                                                 :dir
                                                                                                                                                 rl)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "miter_pt_segment_parallel_to_edge")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -
                                                                                                                                                     "S"
                                                                                                                                                     "1 + i"
                                                                                                                                                     "d")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -21
                                                                                                                                                         :dir
                                                                                                                                                         rl)
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -22
                                                                                                                                                           :dir
                                                                                                                                                           rl)
                                                                                                                                                          (("1"
                                                                                                                                                            (copy
                                                                                                                                                             -1)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "dir_parallel?"
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (skeep)
                                                                                                                                                                (("1"
                                                                                                                                                                  (case
                                                                                                                                                                   "^(S`seq(1 + i) - S`seq(2 + i)) = ^(m1 - m2)")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (lemma
                                                                                                                                                                     "complementary_angle_vcos_eq")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (inst
                                                                                                                                                                       -
                                                                                                                                                                       "S`seq(1 + i)"
                                                                                                                                                                       "S`seq(2 + i)"
                                                                                                                                                                       "m2"
                                                                                                                                                                       "m1"
                                                                                                                                                                       "pk")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (split
                                                                                                                                                                           -1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (replace
                                                                                                                                                                             -5
                                                                                                                                                                             -1
                                                                                                                                                                             :dir
                                                                                                                                                                             rl)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (equate
                                                                                                                                                                               "(S`seq(2 + i) - m2) * (m1 - m2)"
                                                                                                                                                                               "vcos(^(S`seq(2 + i) - m2), ^(m1 - m2)) *
                                                                                                                                                                                                                     norm(S`seq(2 + i) - m2) * norm(m1 - m2)")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (equate
                                                                                                                                                                                 "vcos(^(S`seq(2 + i) - m2), ^(m1 - m2))"
                                                                                                                                                                                 "-c2"
                                                                                                                                                                                 (assert))
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "sq"
                                                                                                                                                                                   1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (cancel-by
                                                                                                                                                                                     1
                                                                                                                                                                                     "norm(m1 - m2)")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (lemma
                                                                                                                                                                                       "miter_pt_dist_to_pivot_pt_bound")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (inst
                                                                                                                                                                                         -
                                                                                                                                                                                         "S`seq(1 + i)"
                                                                                                                                                                                         "S`seq(2 + i)"
                                                                                                                                                                                         "S`seq(3 + i)"
                                                                                                                                                                                         "d")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (replace
                                                                                                                                                                                             -26
                                                                                                                                                                                             :dir
                                                                                                                                                                                             rl)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (replace
                                                                                                                                                                                               -18)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (rewrite
                                                                                                                                                                                                 "norm_sym"
                                                                                                                                                                                                 -1)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (mult-by
                                                                                                                                                                                                   -1
                                                                                                                                                                                                   "c2")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil)
                                                                                                                                                                                         ("2"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "three_point_miniseq?")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (propax)
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (hide-all-but
                                                                                                                                                                                 1)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (grind)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (lemma
                                                                                                                                                                             "miter_point_neq_vertex")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (inst
                                                                                                                                                                               -
                                                                                                                                                                               "S"
                                                                                                                                                                               "2 + i"
                                                                                                                                                                               "d")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("3"
                                                                                                                                                                            (hide-all-but
                                                                                                                                                                             (-2
                                                                                                                                                                              1))
                                                                                                                                                                            (("3"
                                                                                                                                                                              (grind)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (lemma
                                                                                                                                                                     "dir_parallel_imp_scaled_by_norms_eq")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (inst
                                                                                                                                                                       -
                                                                                                                                                                       "S`seq(1 + i) - S`seq(2 + i)"
                                                                                                                                                                       "m1 - m2")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "^"
                                                                                                                                                                         1)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (cross-mult
                                                                                                                                                                           1)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (hide-all-but
                                                                                                                                                                               (-2
                                                                                                                                                                                1))
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "dir_parallel?")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (skeep)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     +
                                                                                                                                                                                     "pk!1")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (grind)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (rewrite
                                                                                                                                 "sqv_rew"
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (use
                                                                                                                                   "sqv_eq_0")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             1)
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "-(d * c2 / s2) <= 0")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (1 2))
                                                                (("2"
                                                                  (move-terms
                                                                   1
                                                                   l)
                                                                  (("2"
                                                                    (elim-unary
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (real-props)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "s1 > 0 & s2 > 0")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (lemma
                                                                 "norm_ratio_miter_pt_seg_to_seg")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "S"
                                                                   "1 + i"
                                                                   "d")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -19
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (replace
                                                                         -18
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (replace
                                                                             -8)
                                                                            (("1"
                                                                              (add-formulas
                                                                               -5
                                                                               -6)
                                                                              (("1"
                                                                                (case
                                                                                 "norm(m2 - m1) > -(d * c1 / s1) + -(d * c2 / s2)")
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "p - d * perp_left(v)")
                                                                                  (("1"
                                                                                    (split
                                                                                     4)
                                                                                    (("1"
                                                                                      (case
                                                                                       "v = ^(m2 - m1)")
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "pt_on_seg_imp_pt_on_derived_seg")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -
                                                                                           "p"
                                                                                           "(# p1 := m1, p2 := m2 #)"
                                                                                           "-(d * c1 / s1)"
                                                                                           "-(d * c2 / s2)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "pt_on_seg_imp_offset_pt_on_parallel_seg")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -
                                                                                                   "p"
                                                                                                   "(# p1 := S`seq(1 + i), p2 := S`seq(2 + i) #)"
                                                                                                   "(# p1 := m1 + -(d * c1 / s1) * ^(m2 - m1),
                                                                                                p2 := m2 - -(d * c2 / s2) * ^(m2 - m1) #)"
                                                                                                   "-(d * perp_left(v))")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -2
                                                                                                       1
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -18
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -19
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (cancel-add!
                                                                                                               (!
                                                                                                                1
                                                                                                                1))
                                                                                                              (("1"
                                                                                                                (equate
                                                                                                                 "S`seq(1 + i) + d * (c1 / s1) * v +
                                                                                                                               -(d * c1 / s1) * v"
                                                                                                                 "S`seq(1 + i)")
                                                                                                                (("1"
                                                                                                                  (hide-all-but
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "point_on_segment?")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       +
                                                                                                                       "0")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (grind-with-ext)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide-all-but
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (grind-with-ext)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (cancel-add!
                                                                                                               (!
                                                                                                                1
                                                                                                                1))
                                                                                                              (("2"
                                                                                                                (equate
                                                                                                                 "S`seq(2 + i) - d * (c2 / s2) * v -
                                                                                                                               -(d * c2 / s2) * v"
                                                                                                                 "S`seq(2 + i)")
                                                                                                                (("1"
                                                                                                                  (hide-all-but
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "point_on_segment?")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       +
                                                                                                                       "1")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (grind-with-ext)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide-all-but
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (grind-with-ext)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     (-1
                                                                                                      -4))
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "^")
                                                                                                      (("2"
                                                                                                        (name-replace
                                                                                                         "n"
                                                                                                         "norm(m2 - m1)")
                                                                                                        (("2"
                                                                                                          (move-terms
                                                                                                           -1
                                                                                                           r
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (move-terms
                                                                                                             -1
                                                                                                             l
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "scal_cancel")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -
                                                                                                                 "1"
                                                                                                                 "(1 / n) * (-(d * c1 / s1) + -(d * c2 / s2))"
                                                                                                                 "m2 - m1")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (real-props)
                                                                                                                    (("2"
                                                                                                                      (grind-with-ext)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("3"
                                                                                                      (typepred
                                                                                                       "S")
                                                                                                      (("3"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "1 + i")
                                                                                                        (("3"
                                                                                                          (ground)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (lemma
                                                                                         "miter_pt_segment_parallel_to_edge")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "S"
                                                                                           "1 + i"
                                                                                           "d")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -20
                                                                                               :dir
                                                                                               rl)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -21
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("2"
                                                                                                  (hide-all-but
                                                                                                   (-1
                                                                                                    1))
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "dir_parallel_eqv_normalized_diffs_eq")
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "S")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -
                                                                                                         "1 + i")
                                                                                                        (("2"
                                                                                                          (ground)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (equate
                                                                                       "p - (p - d * perp_left(v))"
                                                                                       "d * perp_left(v)")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "norm_scal")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "abs"
                                                                                           +)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "v"
                                                                                             1)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "perp_left_preserves_norm")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (real-props)
                                                                                                  (("1"
                                                                                                    (mult-cases
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "ms"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "min_miter_sine_le_1")
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "norm(m2 - m1) > 0")
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (-1
                                                                                      -2
                                                                                      -3
                                                                                      -4
                                                                                      -5
                                                                                      -6
                                                                                      1))
                                                                                    (("1"
                                                                                      (case
                                                                                       "norm(u) > 0")
                                                                                      (("1"
                                                                                        (name-replace
                                                                                         "nu"
                                                                                         "norm(u)")
                                                                                        (("1"
                                                                                          (name-replace
                                                                                           "nm"
                                                                                           "norm(m2 - m1)")
                                                                                          (("1"
                                                                                            (case
                                                                                             "2 * (abs(c1) * d) / s1 + 2 * (abs(c2) * d) / s2 <= nm")
                                                                                            (("1"
                                                                                              (hide
                                                                                               -4)
                                                                                              (("1"
                                                                                                (case-replace
                                                                                                 "c1 = 0")
                                                                                                (("1"
                                                                                                  (case-replace
                                                                                                   "c2 = 0")
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (case
                                                                                                     "-(d * c2 / s2) < 2 * (abs(c2) * d) / s2")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "abs"
                                                                                                       -3
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       -2)
                                                                                                      (("2"
                                                                                                        (cancel-by
                                                                                                         1
                                                                                                         "1/s2")
                                                                                                        (("2"
                                                                                                          (cancel-by
                                                                                                           1
                                                                                                           "d")
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (case-replace
                                                                                                   "c2 = 0")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "abs"
                                                                                                     -2
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "-(d * c1 / s1) < 2 * (abs(c1) * d) / s1")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         -2)
                                                                                                        (("2"
                                                                                                          (cancel-by
                                                                                                           1
                                                                                                           "1/s1")
                                                                                                          (("2"
                                                                                                            (cancel-by
                                                                                                             1
                                                                                                             "d")
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (case
                                                                                                     "-(d * c1 / s1) < 2 * (abs(c1) * d) / s1 &
                                                                                                          -(d * c2 / s2) < 2 * (abs(c2) * d) / s2")
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (ground)
                                                                                                        (("1"
                                                                                                          (cancel-by
                                                                                                           1
                                                                                                           "d/s1")
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (cancel-by
                                                                                                           1
                                                                                                           "d/s2")
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (cross-mult
                                                                                               -4)
                                                                                              (("2"
                                                                                                (add-formulas
                                                                                                 -3
                                                                                                 -4)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "u")
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "S")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -
                                                                                               "1 + i")
                                                                                              (("2"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (1
                                                                                      5))
                                                                                    (("2"
                                                                                      (use
                                                                                       "norm_eq_0")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "miter_half_angle_sine_pos")
                                                              (("2"
                                                                (inst-cp
                                                                 -
                                                                 "S"
                                                                 "1 + i")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "S"
                                                                   "2 + i")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "d")
                                                  (("2"
                                                    (expand
                                                     "max_miter_offset")
                                                    (("2"
                                                      (lemma
                                                       "min_miter_sine_le_each_sine")
                                                      (("2"
                                                        (inst-cp
                                                         -
                                                         "S"
                                                         "1 + i")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "S"
                                                           "2 + i")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (replace
                                                               -11)
                                                              (("2"
                                                                (copy
                                                                 -12)
                                                                (("2"
                                                                  (expand
                                                                   "v"
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "u"
                                                                     -1)
                                                                    (("2"
                                                                      (replace
                                                                       -1
                                                                       -3)
                                                                      (("2"
                                                                        (lemma
                                                                         "min_seg_sep_bounds_seg_length")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "S"
                                                                           "1 + i")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "length")
                                                                              (("2"
                                                                                (replace
                                                                                 -9)
                                                                                (("2"
                                                                                  (split
                                                                                   1)
                                                                                  (("1"
                                                                                    (cross-mult
                                                                                     1)
                                                                                    (("1"
                                                                                      (cross-mult
                                                                                       -7)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -10)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "abs")
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (ground)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -12)
                                                                                                (("1"
                                                                                                  (mult-by
                                                                                                   -3
                                                                                                   "s1")
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "6 * (-c1 * d) <= 6 * d")
                                                                                                    (("1"
                                                                                                      (mult-by
                                                                                                       -7
                                                                                                       "min_segment_sep(S)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (mult-cases
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (mult-cases
                                                                                                         1
                                                                                                         :mult-op
                                                                                                         1*)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replace
                                                                                                 -12)
                                                                                                (("2"
                                                                                                  (mult-by
                                                                                                   -3
                                                                                                   "s1")
                                                                                                  (("2"
                                                                                                    (case
                                                                                                     "6 * (c1 * d) <= 6 * d")
                                                                                                    (("1"
                                                                                                      (mult-by
                                                                                                       -7
                                                                                                       "min_segment_sep(S)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (mult-cases
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (mult-cases
                                                                                                         1
                                                                                                         :mult-op
                                                                                                         1*)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (typepred
                                                                                     "d")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "max_miter_offset")
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "min_miter_sine_le_each_sine")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -
                                                                                           "S"
                                                                                           "2 + i")
                                                                                          (("2"
                                                                                            (beta
                                                                                             -1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -17)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "min_seg_sep_bounds_seg_length")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -
                                                                                                     "S"
                                                                                                     "2 + i")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "length")
                                                                                                        (("2"
                                                                                                          (cross-mult
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (cross-mult
                                                                                                             -5)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               -16)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "abs")
                                                                                                                (("2"
                                                                                                                  (lift-if)
                                                                                                                  (("2"
                                                                                                                    (ground)
                                                                                                                    (("1"
                                                                                                                      (mult-by
                                                                                                                       -8
                                                                                                                       "s2")
                                                                                                                      (("1"
                                                                                                                        (case
                                                                                                                         "6 * (-c2 * d) <= 6 * d")
                                                                                                                        (("1"
                                                                                                                          (mult-by
                                                                                                                           -6
                                                                                                                           "min_segment_sep(S)")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (mult-cases
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (mult-cases
                                                                                                                             1
                                                                                                                             :mult-op
                                                                                                                             1*)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (mult-by
                                                                                                                       -8
                                                                                                                       "s2")
                                                                                                                      (("2"
                                                                                                                        (case
                                                                                                                         "6 * (c2 * d) <= 6 * d")
                                                                                                                        (("1"
                                                                                                                          (mult-by
                                                                                                                           -11
                                                                                                                           "min_segment_sep(S)")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (mult-cases
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (mult-cases
                                                                                                                             1
                                                                                                                             :mult-op
                                                                                                                             1*)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "min_miter_sine_le_each_sine")
                                              (("2"
                                                (inst - "S" "2 + i")
                                                (("2"
                                                  (hide -2)
                                                  (("2"
                                                    (ground)
                                                    (("1"
                                                      (cross-mult 1)
                                                      (("1"
                                                        (mult-cases 1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (cross-mult 2)
                                                      (("2"
                                                        (mult-cases 2)
                                                        (("2"
                                                          (expand
                                                           "abs")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma
                                             "min_miter_sine_le_each_sine")
                                            (("2"
                                              (inst - "S" "1 + i")
                                              (("2"
                                                (ground)
                                                (("1"
                                                  (cross-mult 1)
                                                  (("1"
                                                    (mult-cases 1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (cross-mult 2)
                                                  (("2"
                                                    (mult-cases 2)
                                                    (("2"
                                                      (expand "abs")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (rewrite
                                           "perp_left_preserves_norm"
                                           :dir
                                           rl)
                                          (("2"
                                            (rewrite
                                             "perp_right_preserves_norm"
                                             :dir
                                             rl)
                                            (("2"
                                              (equate
                                               "^(S`seq(1 + i) - S`seq(2 + i))"
                                               "-^(S`seq(2 + i) - S`seq(1 + i))")
                                              (("1"
                                                (name-replace
                                                 "v"
                                                 "^(S`seq(2 + i) - S`seq(1 + i))"
                                                 :hide?
                                                 nil)
                                                (("1"
                                                  (hide -)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "Vector" vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (<= const-decl "bool" reals nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (min_miter_sine const-decl "posreal" miter_point_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (miter_point_defns_equiv formula-decl nil vectors_2d_trig nil)
    (miter_point_defns_equiv_2 formula-decl nil vectors_2d_trig nil)
    (miter_point_prev const-decl "point_2d" vectors_2d_trig nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (vector_2d type-eq-decl nil vectors_cross_2d nil)
    (perp_left const-decl "vector_2d" vectors_cross_2d nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (Normalized type-eq-decl nil vectors_2D vectors)
    (half_angle_vsin const-decl "{x: real | 0 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (Nz_vector type-eq-decl nil vectors_2D vectors)
    (^ const-decl "Normalized" vectors_2D vectors)
    (perp_right const-decl "vector_2d" vectors_cross_2d nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (half_angle_vcos const-decl "{x: real | -1 <= x AND x <= 1}"
     vectors_2d_trig nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (ge_times_ge_any1 formula-decl nil extra_real_props nil)
    (min_miter_sine_le_each_sine formula-decl nil miter_point_sequences
     nil)
    (length const-decl "posreal" segments_2d nil)
    (min_segment_sep const-decl "posreal" segment_endpoint_sequences
     nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (min_seg_sep_bounds_seg_length formula-decl nil
     segment_endpoint_sequences nil)
    (nz_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (pos_div_le formula-decl nil real_props nil)
    (neg_times_le formula-decl nil real_props nil)
    (pos_times_le formula-decl nil real_props nil)
    (point_on_reverse_segment formula-decl nil segments_2d nil)
    (add_zero_left formula-decl nil vectors_2D vectors)
    (div_413 skolem-const-decl "nnreal" miter_point_sequences nil)
    (reverse_segment const-decl "segment_2d" segments_2d nil)
    (nu skolem-const-decl "nnreal" miter_point_sequences nil)
    (div_416 skolem-const-decl "nzreal" miter_point_sequences nil)
    (div_419 skolem-const-decl "nzreal" miter_point_sequences nil)
    (div_div1 formula-decl nil real_props nil)
    (div_418 skolem-const-decl "nzreal" miter_point_sequences nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (div_414 skolem-const-decl "nzreal" miter_point_sequences nil)
    (pos_div_gt formula-decl nil real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (u skolem-const-decl "Vector" miter_point_sequences nil)
    (div_mult_pos_ge2 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (pos_times_ge formula-decl nil real_props nil)
    (add_div formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (ms skolem-const-decl "posreal" miter_point_sequences nil)
    (min_miter_sine_le_1 formula-decl nil miter_point_sequences nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (norm_normalize formula-decl nil vectors_2D vectors)
    (nz_norm_gt_0 application-judgement "posreal" vectors_2D vectors)
    (v skolem-const-decl "Normalized" miter_point_sequences nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (m2 skolem-const-decl "point_2d" miter_point_sequences nil)
    (d skolem-const-decl "miter_seq_offset_dist(S)"
       miter_point_sequences nil)
    (c2 skolem-const-decl "{x: real | -1 <= x AND x <= 1}"
     miter_point_sequences nil)
    (s2 skolem-const-decl "{x: real | 0 <= x AND x <= 1}"
     miter_point_sequences nil)
    (m1 skolem-const-decl "point_2d" miter_point_sequences nil)
    (c1 skolem-const-decl "{x: real | -1 <= x AND x <= 1}"
     miter_point_sequences nil)
    (- const-decl "Vector" vectors_2D vectors)
    (add_neg_sub formula-decl nil vectors_2D vectors)
    (scal_cancel formula-decl nil vectors_2D vectors)
    (div_times formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (div_distributes formula-decl nil real_props nil)
    (div_cancel4 formula-decl nil real_props nil)
    (pt_on_seg_imp_offset_pt_on_parallel_seg formula-decl nil
     miter_point_sequences nil)
    (point_sub_neg_scal formula-decl nil vectors_cross_2d nil)
    (point_add_neg_scal formula-decl nil vectors_cross_2d nil)
    (pt_on_seg_imp_pt_on_derived_seg formula-decl nil
     miter_point_sequences nil)
    (dir_parallel_eqv_normalized_diffs_eq formula-decl nil
     vectors_cross_2d nil)
    (norm_ratio_miter_pt_seg_to_seg formula-decl nil
     miter_point_sequences nil)
    (three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (norm_scal formula-decl nil vectors_2D vectors)
    (perp_comps formula-decl nil perpendicular_2D vectors)
    (sq_le formula-decl nil sq reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (sq const-decl "nonneg_real" sq reals)
    (miter_pt_dist_to_edge_endpt_bound formula-decl nil
     miter_point_sequences nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sqv_rew formula-decl nil vectors_2D vectors)
    (half_angle_vcos_eq_miter_pt_vcos formula-decl nil
     miter_point_sequences nil)
    (dir_parallel_imp_scaled_by_norms_eq formula-decl nil
     vectors_cross_2d nil)
    (scal_div_mult_right formula-decl nil vectors_2D vectors)
    (times_div1 formula-decl nil real_props nil)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (scal_div_mult_left formula-decl nil vectors_2D vectors)
    (complementary_angle_vcos_eq formula-decl nil vectors_2d_trig nil)
    (miter_point_neq_vertex formula-decl nil miter_point_sequences nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (norm_diff_nonzero_2 formula-decl nil vectors_cross_2d nil)
    (norm_diff_pos formula-decl nil vectors_cross_2d nil)
    (div_412 skolem-const-decl "nnreal" miter_point_sequences nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (zero_times1 formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (neg_one_times formula-decl nil extra_tegies nil)
    (S skolem-const-decl "edge_parallel_endpoint_seq"
     miter_point_sequences nil)
    (i skolem-const-decl "below(S`length - 3)" miter_point_sequences
       nil)
    (norm_sym formula-decl nil vectors_2D vectors)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (miter_pt_dist_to_pivot_pt_bound formula-decl nil
     miter_point_sequences nil)
    (vcos const-decl "{x: real | -1 <= x AND x <= 1}" vectors_2d_trig
     nil)
    (miter_pt_segment_parallel_to_edge formula-decl nil
     miter_point_sequences nil)
    (sq_norm formula-decl nil vectors_2D vectors)
    (sqv_eq_0 formula-decl nil vectors_2D vectors)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "real" vectors_2D vectors)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_mult_pos_neg_lt2 formula-decl nil extra_real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (perp_pt const-decl "real" perpendicular_2D vectors)
    (add_cancel formula-decl nil vectors_2D vectors)
    (scal_1 formula-decl nil vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors)
    (add_zero_right formula-decl nil vectors_2D vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (three_pt_miniseq_in_endpt_seq formula-decl nil
     miter_point_sequences nil)
    (point_on_segment_has_offset formula-decl nil segments_2d nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (s1 skolem-const-decl "{x: real | 0 <= x AND x <= 1}"
     miter_point_sequences nil)
    (miter_half_angle_sine_pos formula-decl nil miter_point_sequences
     nil)
    (neg_times_lt formula-decl nil real_props nil)
    (sub_eq_args formula-decl nil vectors_2D vectors)
    (norm_zero formula-decl nil vectors_2D vectors)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (minus_real_is_real application-judgement "real" reals nil)
    (perp_left_preserves_norm formula-decl nil vectors_cross_2d nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (neg_nzv application-judgement "Nz_vector" vectors_2D vectors)
    (perp_right_preserves_norm formula-decl nil vectors_cross_2d nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (successive_miter_points_neq formula-decl nil miter_point_sequences
     nil))
   shostak))
 (miter_point_seq_TCC1 0
  (miter_point_seq_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (miter_point_seq subtype
    "(number_fields.-)(miter_point_sequences.S`length, 2)" "nat"))
  (miter_point_seq_TCC1-1 nil 3874128243 ("" (subtype-tcc) nil nil) nil
   nil
   (miter_point_seq subtype
    "(number_fields.-)(miter_point_sequences.S`length, 2)" "nat")))
 (miter_point_seq_TCC2 0
  (miter_point_seq_TCC2-2 nil 3874129021
   ("" (skeep)
    (("" (assert)
      (("" (ground)
        (("1" (typepred "S")
          (("1" (expand "single_loop_back_seq?")
            (("1" (propax) nil nil)) nil))
          nil)
         ("2" (skeep)
          (("2" (use "successive_miter_points_neq")
            (("2" (ground) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (successive_miter_points_neq formula-decl nil miter_point_sequences
     nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak
   (miter_point_seq subtype
    "(# length := (number_fields.-)(miter_point_sequences.S`length, 2), seq := LAMBDA (i: naturalnumbers.below((number_fields.-)(miter_point_sequences.S`length, 2))): vectors_2d_trig.miter_point(miter_point_sequences.S`seq((number_fields.+)(i, 1)), miter_point_sequences.S`seq(i), miter_point_sequences.S`seq((number_fields.+)(i, 2)), miter_point_sequences.d) #)"
    "segment_endpoint_seq"))
  (miter_point_seq_TCC2-1 nil 3874128243 ("" (subtype-tcc) nil nil) nil
   nil
   (miter_point_seq subtype
    "(# length := (number_fields.-)(miter_point_sequences.S`length, 2), seq := LAMBDA (i: naturalnumbers.below((number_fields.-)(miter_point_sequences.S`length, 2))): vectors_2d_trig.miter_point(miter_point_sequences.S`seq((number_fields.+)(i, 1)), miter_point_sequences.S`seq(i), miter_point_sequences.S`seq((number_fields.+)(i, 2)), miter_point_sequences.d) #)"
    "segment_endpoint_seq")))
 (no_right_side_loop_back?_TCC1 0
  (no_right_side_loop_back?_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (no_right_side_loop_back? subtype
    "(number_fields.-)(miter_point_sequences.S`length, 2)"
    "below[S`length]"))
  (no_right_side_loop_back?_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (no_right_side_loop_back? subtype
    "(number_fields.-)(miter_point_sequences.S`length, 2)"
    "below[S`length]")))
 (no_right_side_loop_back?_TCC2 0
  (no_right_side_loop_back?_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (no_right_side_loop_back? subtype
    "(number_fields.-)(miter_point_sequences.lbi, 1)"
    "below[S`length]"))
  (no_right_side_loop_back?_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (no_right_side_loop_back? subtype
    "(number_fields.-)(miter_point_sequences.lbi, 1)"
    "below[S`length]")))
 (no_right_side_loop_back?_TCC3 0
  (no_right_side_loop_back?_TCC3-2 nil 3874129021
   ("" (skeep)
    (("" (typepred "S")
      (("" (inst - "lbi - 1")
        (("1" (ground) nil nil) ("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lbi skolem-const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" miter_point_sequences nil)
    (S skolem-const-decl "edge_parallel_endpoint_seq"
     miter_point_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (no_right_side_loop_back? subtype
    "miter_point_sequences.S`seq(miter_point_sequences.lbi)"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.lbi, 1))}"))
  (no_right_side_loop_back?_TCC3-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (no_right_side_loop_back? subtype
    "miter_point_sequences.S`seq(miter_point_sequences.lbi)"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.lbi, 1))}")))
 (no_right_side_loop_back?_TCC4 0
  (no_right_side_loop_back?_TCC4-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (no_right_side_loop_back? subtype
    "(number_fields.+)(miter_point_sequences.lbi, 1)"
    "below[S`length]"))
  (no_right_side_loop_back?_TCC4-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (no_right_side_loop_back? subtype
    "(number_fields.+)(miter_point_sequences.lbi, 1)"
    "below[S`length]")))
 (no_right_side_loop_back?_TCC5 0
  (no_right_side_loop_back?_TCC5-2 nil 3874129021
   ("" (skeep)
    (("" (typepred "S")
      (("" (inst - "lbi") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (no_right_side_loop_back? subtype
    "miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.lbi, 1))"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq(miter_point_sequences.lbi)}"))
  (no_right_side_loop_back?_TCC5-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (no_right_side_loop_back? subtype
    "miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.lbi, 1))"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq(miter_point_sequences.lbi)}")))
 (no_intersection_with_skimming_segments 0
  (no_intersection_with_skimming_segments-1 nil 3874129021
   ("" (skeep*)
    (("" (expand "miter_point_seq")
      (("" (expand "point_on_segment_seq?")
        (("" (ground)
          (("1" (skeep) nil nil)
           ("2" (use "miter_point_not_on_adj_segs")
            (("2" (ground)
              (("2" (ground)
                (("2" (skeep)
                  (("2" (case-replace "i = 0")
                    (("1" (assert) nil nil)
                     ("2" (case-replace "i = 1")
                      (("1" (assert) nil nil)
                       ("2" (typepred "i")
                        (("2" (equate "S`length" "3" (assert))
                          (("2" (hide-all-but (-1 1 2))
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skeep)
            (("3" (typepred "i_1")
              (("3" (skeep)
                (("3" (typepred "i")
                  (("3"
                    (name-replace*
                     ("m1" "miter_point(S`seq(1 + i_1),
                                                                                             S`seq(i_1),
                                                                                             S`seq(2 + i_1),
                                                                                             d)"
                      "m2" "miter_point(S`seq(2 + i_1),
                                                                                             S`seq(1 + i_1),
                                                                                             S`seq(3 + i_1),
                                                                                             d)"))
                    (("3" (lemma "successive_miter_points_neq")
                      (("3" (inst - "S" "1 + i_1" "d")
                        (("3" (flatten)
                          (("3" (case-replace "i = 1 + i_1")
                            (("1"
                              (lemma "miter_seg_points_not_on_edge")
                              (("1"
                                (inst - "S" "1 + i_1" "d")
                                (("1"
                                  (ground)
                                  (("1"
                                    (inst?)
                                    (("1" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (case-replace "i = i_1")
                              (("1"
                                (lemma
                                 "miter_seg_pts_not_on_prev_edge")
                                (("1"
                                  (inst - "S" "1 + i_1" _ "d")
                                  (("1"
                                    (rewrite
                                     "point_on_segment_has_offset")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (lemma
                                         "miter_pt_segment_parallel_to_edge")
                                        (("1"
                                          (inst - "S" "1 + i_1" "d")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "dir_parallel?")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (replace -5)
                                                  (("1"
                                                    (inst - "1/pk")
                                                    (("1"
                                                      (inst - "p")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -3)
                                                            (("1"
                                                              (rewrite
                                                               "point_on_segment_has_offset"
                                                               1)
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "d!1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 (1 4))
                                                                (("2"
                                                                  (grind-with-ext)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case-replace "i = i_1 + 2")
                                (("1"
                                  (lemma
                                   "miter_seg_pts_not_on_next_edge")
                                  (("1"
                                    (inst - "S" "2+i_1" _ "d")
                                    (("1"
                                      (rewrite
                                       "point_on_reverse_segment"
                                       :dir
                                       rl)
                                      (("1"
                                        (expand "reverse_segment")
                                        (("1"
                                          (rewrite
                                           "point_on_segment_has_offset")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -3)
                                                (("1"
                                                  (lemma
                                                   "miter_pt_segment_parallel_to_edge")
                                                  (("1"
                                                    (inst
                                                     -
                                                     "S"
                                                     "1 + i_1"
                                                     "d")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -4)
                                                        (("1"
                                                          (replace -5)
                                                          (("1"
                                                            (expand
                                                             "dir_parallel?")
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "1/pk")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "p")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (rewrite
                                                                       "point_on_segment_has_offset"
                                                                       1)
                                                                      (("1"
                                                                        (case
                                                                         "S`seq(1 + i_1) - S`seq(2 + i_1) = pk * (m1 - m2)")
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (inst
                                                                             +
                                                                             "d!1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (-1
                                                                            1))
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (move-terms
                                                                             -1
                                                                             l
                                                                             1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (cross-mult
                                                                                 -1)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "adj_edge_parallel_endpts_neq")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -
                                                                                     "S"
                                                                                     "1 + i_1")
                                                                                    (("2"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma
                                   "miter_seg_pts_not_on_nonadj_edge")
                                  (("2"
                                    (inst - "S" "1 + i_1" "i" "d")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (case "i = S`length - 2")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -2)
                                            (("1"
                                              (inst?)
                                              (("1" (ground) nil nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (expand
                                                 "no_right_side_loop_back?")
                                                (("2"
                                                  (name-replace
                                                   "lbi"
                                                   "loop_back_intercept(S)")
                                                  (("2"
                                                    (split -9)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (lemma
                                                         "miter_seg_pts_between_segments_2")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "S"
                                                           "p"
                                                           "i_1"
                                                           "d")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -2
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "on_segment_btw_rays_imp_all_btw")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "p"
                                                                     "S`seq(S`length - 2)"
                                                                     _
                                                                     _
                                                                     "(# p1 := S`seq(1 + i_1), p2 := S`seq(S`length - 2) #)")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -4)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (ground)
                                                                              (("1"
                                                                                (typepred
                                                                                 "S")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "S`length - 2")
                                                                                  (("1"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (rewrite
                                                                                 "point_on_reverse_segment"
                                                                                 1
                                                                                 :dir
                                                                                 rl)
                                                                                (("2"
                                                                                  (expand
                                                                                   "reverse_segment")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -3)
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (expand
                                                                                 "point_on_segment?")
                                                                                (("3"
                                                                                  (inst
                                                                                   +
                                                                                   "1")
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "S")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "i_1 + 1")
                                                                          (("2"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (ground)
                                                                        (("3"
                                                                          (typepred
                                                                           "S")
                                                                          (("3"
                                                                            (inst
                                                                             -
                                                                             "i_1")
                                                                            (("3"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "S")
                                                                      (("2"
                                                                        (inst
                                                                         -
                                                                         "S`length - 2")
                                                                        (("2"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "miter_seg_pts_between_segments_1")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "S"
                                                           "p"
                                                           "i_1"
                                                           "d")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (move-terms
                                                               -2
                                                               r
                                                               2)
                                                              (("2"
                                                                (replace
                                                                 -2
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "on_segment_btw_rays_imp_all_btw")
                                                                    (("2"
                                                                      (inst
                                                                       -
                                                                       "p"
                                                                       "S`seq(S`length - 2)"
                                                                       _
                                                                       _
                                                                       "(# p1 := S`seq(2 + i_1), p2 := S`seq(S`length - 2) #)")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (ground)
                                                                          (("1"
                                                                            (typepred
                                                                             "S")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "S`length - 2")
                                                                              (("1"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (rewrite
                                                                             "point_on_reverse_segment"
                                                                             1
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (expand
                                                                               "reverse_segment")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (replace
                                                                                   -4)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -3)
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (expand
                                                                             "point_on_segment?")
                                                                            (("3"
                                                                              (inst
                                                                               +
                                                                               "1")
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (typepred
                                                                           "S")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "2 + i_1")
                                                                            (("2"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (typepred
                                                                           "S")
                                                                          (("3"
                                                                            (inst
                                                                             -
                                                                             "1 + i_1")
                                                                            (("3"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "S")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "S`length - 2")
                                                                          (("2"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (ground)
                                          (("2"
                                            (inst?)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((miter_point_seq const-decl "segment_endpoint_seq"
     miter_point_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (miter_point_not_on_adj_segs formula-decl nil miter_point_sequences
     nil)
    (successive_miter_points_neq formula-decl nil miter_point_sequences
     nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (scal_1 formula-decl nil vectors_2D vectors)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (add_cancel formula-decl nil vectors_2D vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (miter_pt_segment_parallel_to_edge formula-decl nil
     miter_point_sequences nil)
    (point_on_segment_has_offset formula-decl nil segments_2d nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (miter_seg_pts_not_on_prev_edge formula-decl nil
     miter_point_sequences nil)
    (miter_seg_pts_not_on_nonadj_edge formula-decl nil
     miter_point_sequences nil)
    (on_segment_btw_rays_imp_all_btw formula-decl nil between_rays nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (add_zero_left formula-decl nil vectors_2D vectors)
    (scal_0 formula-decl nil vectors_2D vectors)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (i_1 skolem-const-decl "below(S`length - 3)" miter_point_sequences
     nil)
    (S skolem-const-decl "edge_parallel_endpoint_seq"
     miter_point_sequences nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (miter_seg_pts_between_segments_2 formula-decl nil
     miter_point_sequences nil)
    (miter_seg_pts_between_segments_1 formula-decl nil
     miter_point_sequences nil)
    (no_right_side_loop_back? const-decl "bool" miter_point_sequences
     nil)
    (miter_seg_pts_not_on_next_edge formula-decl nil
     miter_point_sequences nil)
    (point_on_reverse_segment formula-decl nil segments_2d nil)
    (* const-decl "Vector" vectors_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sub_eq_args formula-decl nil vectors_2D vectors)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (scal_zero formula-decl nil vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (zero const-decl "Vector" vectors_2D vectors)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (scal_div_mult_left formula-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (reverse_segment const-decl "segment_2d" segments_2d nil)
    (miter_seg_points_not_on_edge formula-decl nil
     miter_point_sequences nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (- const-decl "Vector" vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (point_on_segment_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (closed_miter_point_seq_TCC1 0
  (closed_miter_point_seq_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (closed_miter_point_seq subtype "segment_endpoint_sequences.i"
    "below[S`length]"))
  (closed_miter_point_seq_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (closed_miter_point_seq subtype "segment_endpoint_sequences.i"
    "below[S`length]")))
 (closed_miter_point_seq_TCC2 0
  (closed_miter_point_seq_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (closed_miter_point_seq subtype
    "(number_fields.+)(1, segment_endpoint_sequences.i)"
    "below[S`length]"))
  (closed_miter_point_seq_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (closed_miter_point_seq subtype
    "(number_fields.+)(1, segment_endpoint_sequences.i)"
    "below[S`length]")))
 (closed_miter_point_seq_TCC3 0
  (closed_miter_point_seq_TCC3-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (closed_miter_point_seq subtype
    "segment_endpoint_sequences.loop_back_intercept(segment_endpoint_sequences.S)"
    "below[S`length]"))
  (closed_miter_point_seq_TCC3-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (closed_miter_point_seq subtype
    "segment_endpoint_sequences.loop_back_intercept(segment_endpoint_sequences.S)"
    "below[S`length]")))
 (closed_miter_point_seq_TCC4 0
  (closed_miter_point_seq_TCC4-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (closed_miter_point_seq subtype
    "(number_fields.-)(segment_endpoint_sequences.S`length, 1)"
    "below[S`length]"))
  (closed_miter_point_seq_TCC4-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (closed_miter_point_seq subtype
    "(number_fields.-)(segment_endpoint_sequences.S`length, 1)"
    "below[S`length]")))
 (closed_miter_point_seq_TCC5 0
  (closed_miter_point_seq_TCC5-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (closed_miter_point_seq subtype
    "segment_endpoint_sequences.S`length" "posnat"))
  (closed_miter_point_seq_TCC5-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (closed_miter_point_seq subtype
    "segment_endpoint_sequences.S`length" "posnat")))
 (closed_miter_point_seq_TCC6 0
  (closed_miter_point_seq_TCC6-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak (closed_miter_point_seq subtype "0" "below[S`length]"))
  (closed_miter_point_seq_TCC6-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (closed_miter_point_seq subtype "0" "below[S`length]")))
 (closed_miter_point_seq_TCC7 0
  (closed_miter_point_seq_TCC7-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (closed_miter_point_seq subtype
    "(number_fields.-)(miter_point_sequences.S`length, 2)"
    "below[S`length]"))
  (closed_miter_point_seq_TCC7-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (closed_miter_point_seq subtype
    "(number_fields.-)(miter_point_sequences.S`length, 2)"
    "below[S`length]")))
 (closed_miter_point_seq_TCC8 0
  (closed_miter_point_seq_TCC8-2 nil 3874129021
   ("" (skeep)
    (("" (typepred "S")
      (("" (lemma "adj_edge_parallel_endpts_neq")
        (("" (inst - "S" "S`length - 2")
          (("1" (ground) nil nil) ("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (S skolem-const-decl
     "{S: edge_parallel_endpoint_seq | S`seq(0) = S`seq(S`length - 1)}"
     miter_point_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil))
   shostak
   (closed_miter_point_seq subtype
    "miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2))"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq(0)}"))
  (closed_miter_point_seq_TCC8-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (closed_miter_point_seq subtype
    "miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2))"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq(0)}")))
 (closed_miter_point_seq_TCC9 0
  (closed_miter_point_seq_TCC9-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak (closed_miter_point_seq subtype "1" "below[S`length]"))
  (closed_miter_point_seq_TCC9-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (closed_miter_point_seq subtype "1" "below[S`length]")))
 (closed_miter_point_seq_TCC10 0
  (closed_miter_point_seq_TCC10-2 nil 3874129021
   ("" (skeep + t)
    (("" (ground)
      (("1" (lemma "adj_edge_parallel_endpts_neq")
        (("1" (inst - "S" "0") (("1" (ground) nil nil)) nil)) nil)
       ("2" (use "wrapped_adj_segs_not_dir_parallel")
        (("2" (assert)
          (("2" (lemma "intercept_index_value")
            (("2" (inst - "S" "0")
              (("2" (assert)
                (("2" (replace -1)
                  (("2" (flatten)
                    (("2"
                      (rewrite "dir_parallel_eqv_normalized_diffs_eq")
                      (("1" (assert) nil nil)
                       ("2" (lemma "adj_edge_parallel_endpts_neq")
                        (("2" (inst - "S" "S`length - 2")
                          (("2" (ground) nil nil)) nil))
                        nil)
                       ("3" (lemma "adj_edge_parallel_endpts_neq")
                        (("3" (inst - "S" "0") (("3" (ground) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (lemma "intercept_index_value")
        (("3" (inst - "S" "0") (("3" (ground) nil nil)) nil)) nil)
       ("4" (lemma "intercept_index_value")
        (("4" (inst - "S" "0") (("4" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (dir_parallel_eqv_normalized_diffs_eq formula-decl nil
     vectors_cross_2d nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (intercept_index_value formula-decl nil segment_endpoint_sequences
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (wrapped_adj_segs_not_dir_parallel formula-decl nil
     segment_endpoint_sequences nil))
   shostak
   (closed_miter_point_seq subtype "miter_point_sequences.S`seq(1)"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.S`seq(0), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2)), miter_point_sequences.S`seq(0)), (vectors_2D.-)(p, miter_point_sequences.S`seq(0)))))}"))
  (closed_miter_point_seq_TCC10-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (closed_miter_point_seq subtype "miter_point_sequences.S`seq(1)"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.S`seq(0), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2)), miter_point_sequences.S`seq(0)), (vectors_2D.-)(p, miter_point_sequences.S`seq(0)))))}")))
 (closed_miter_point_seq_TCC11 0
  (closed_miter_point_seq_TCC11-2 nil 3874129021
   ("" (skeep)
    (("" (ground)
      (("1" (hide -1)
        (("1" (expand "singleton_seq")
          (("1" (expand "o") (("1" (assert) nil nil)) nil)) nil))
        nil)
       ("2" (skeep + t)
        (("2" (expand "o")
          (("2" (apply (repeat (lift-if)))
            (("2" (assert)
              (("2" (expand "singleton_seq")
                (("2" (typepred "S")
                  (("2" (lemma "intercept_index_value")
                    (("2" (inst - "S" "0")
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (split -11)
                            (("1" (flatten)
                              (("1"
                                (equate "i" "0" (assert))
                                (("1"
                                  (expand "miter_point_seq")
                                  (("1"
                                    (use "wrapped_miter_points_neq")
                                    (("1"
                                      (assert)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (split -1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "miter_point_seq")
                                    (("1"
                                      (use
                                       "successive_miter_points_neq")
                                      (("1" (ground) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "miter_point_seq")
                                    (("2"
                                      (equate
                                       "i"
                                       "S`length - 2"
                                       (assert))
                                      (("2"
                                        (assert)
                                        (("2"
                                          (use
                                           "wrapped_miter_points_neq")
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (singleton_seq const-decl "{uvs: uniq_vertex_seq | uvs`length = 1}"
     vertex_list nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (O const-decl "finseq" finite_sequences nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (S skolem-const-decl
     "{S: edge_parallel_endpoint_seq | S`seq(0) = S`seq(S`length - 1)}"
     miter_point_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (successive_miter_points_neq formula-decl nil miter_point_sequences
     nil)
    (m0 skolem-const-decl "point_2d" miter_point_sequences nil)
    (d skolem-const-decl "miter_seq_offset_dist(S)"
       miter_point_sequences nil)
    (i skolem-const-decl
       "below((singleton_seq(m0) o miter_point_seq(S, d) o
        singleton_seq(m0))`length
       - 1)" miter_point_sequences nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (wrapped_miter_points_neq formula-decl nil miter_point_sequences
     nil)
    (uniq_vertex_seq? const-decl "bool" vertex_list nil)
    (uniq_vertex_seq nonempty-type-eq-decl nil vertex_list nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (miter_point_seq const-decl "segment_endpoint_seq"
     miter_point_sequences nil)
    (intercept_index_value formula-decl nil segment_endpoint_sequences
     nil))
   shostak
   (closed_miter_point_seq subtype
    "finite_sequences[point_2d].o(finite_sequences[point_2d].o(vertex_list.singleton_seq(miter_point_sequences.m0), miter_point_sequences.miter_point_seq(miter_point_sequences.S, miter_point_sequences.d)), vertex_list.singleton_seq(miter_point_sequences.m0))"
    "segment_endpoint_seq"))
  (closed_miter_point_seq_TCC11-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (closed_miter_point_seq subtype
    "finite_sequences[point_2d].o(finite_sequences[point_2d].o(vertex_list.singleton_seq(miter_point_sequences.m0), miter_point_sequences.miter_point_seq(miter_point_sequences.S, miter_point_sequences.d)), vertex_list.singleton_seq(miter_point_sequences.m0))"
    "segment_endpoint_seq")))
 (length_closed_miter_point_seq 0
  (length_closed_miter_point_seq-1 nil 3874129021
   ("" (skeep)
    (("" (expand "closed_miter_point_seq")
      (("" (expand "singleton_seq")
        (("" (expand "o ")
          (("" (expand "miter_point_seq") (("" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((closed_miter_point_seq const-decl "segment_endpoint_seq"
     miter_point_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (miter_point_seq const-decl "segment_endpoint_seq"
     miter_point_sequences nil)
    (singleton_seq const-decl "{uvs: uniq_vertex_seq | uvs`length = 1}"
     vertex_list nil))
   shostak))
 (closed_miter_point_seq_element_TCC1 0
  (closed_miter_point_seq_element_TCC1-2 nil 3874129021
   ("" (skeep + t)
    (("" (rewrite "length_closed_miter_point_seq") nil nil)) nil)
   ((length_closed_miter_point_seq formula-decl nil
     miter_point_sequences nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (real nonempty-type-from-decl nil reals nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil))
   shostak
   (closed_miter_point_seq_element subtype "miter_point_sequences.i"
    "below[closed_miter_point_seq(S, d)`length]"))
  (closed_miter_point_seq_element_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (closed_miter_point_seq_element subtype "miter_point_sequences.i"
    "below[closed_miter_point_seq(S, d)`length]")))
 (closed_miter_point_seq_element_TCC2 0
  (closed_miter_point_seq_element_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (closed_miter_point_seq_element subtype
    "(number_fields.-)(miter_point_sequences.i, 1)" "below[S`length]"))
  (closed_miter_point_seq_element_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (closed_miter_point_seq_element subtype
    "(number_fields.-)(miter_point_sequences.i, 1)"
    "below[S`length]")))
 (closed_miter_point_seq_element_TCC3 0
  (closed_miter_point_seq_element_TCC3-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "adj_edge_parallel_endpts_neq")
      (("" (inst - "S" "i-1")
        (("1" (ground) nil nil) ("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (S skolem-const-decl
     "{S: edge_parallel_endpoint_seq | S`seq(0) = S`seq(S`length - 1)}"
     miter_point_sequences nil)
    (i skolem-const-decl "below(S`length)" miter_point_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (closed_miter_point_seq_element subtype
    "miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.i, 1))"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq(miter_point_sequences.i)}"))
  (closed_miter_point_seq_element_TCC3-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (closed_miter_point_seq_element subtype
    "miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.i, 1))"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq(miter_point_sequences.i)}")))
 (closed_miter_point_seq_element_TCC4 0
  (closed_miter_point_seq_element_TCC4-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak
   (closed_miter_point_seq_element subtype
    "(number_fields.+)(miter_point_sequences.i, 1)" "below[S`length]"))
  (closed_miter_point_seq_element_TCC4-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (closed_miter_point_seq_element subtype
    "(number_fields.+)(miter_point_sequences.i, 1)"
    "below[S`length]")))
 (closed_miter_point_seq_element_TCC5 0
  (closed_miter_point_seq_element_TCC5-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "edge_para_endpts_valid_miter_point_args")
      (("" (inst - "S" "i")
        (("1" (ground) nil nil) ("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((edge_para_endpts_valid_miter_point_args formula-decl nil
     segment_endpoint_sequences nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (S skolem-const-decl
     "{S: edge_parallel_endpoint_seq | S`seq(0) = S`seq(S`length - 1)}"
     miter_point_sequences nil)
    (i skolem-const-decl "below(S`length)" miter_point_sequences nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (closed_miter_point_seq_element subtype
    "miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.i, 1))"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.S`seq(miter_point_sequences.i), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.i, 1)), miter_point_sequences.S`seq(miter_point_sequences.i)), (vectors_2D.-)(p, miter_point_sequences.S`seq(miter_point_sequences.i)))))}"))
  (closed_miter_point_seq_element_TCC5-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (closed_miter_point_seq_element subtype
    "miter_point_sequences.S`seq((number_fields.+)(miter_point_sequences.i, 1))"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.S`seq(miter_point_sequences.i), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.i, 1)), miter_point_sequences.S`seq(miter_point_sequences.i)), (vectors_2D.-)(p, miter_point_sequences.S`seq(miter_point_sequences.i)))))}")))
 (closed_miter_point_seq_element 0
  (closed_miter_point_seq_element-1 nil 3874129021
   ("" (skeep)
    (("" (expand "closed_miter_point_seq")
      (("" (expand "o")
        (("" (expand "singleton_seq")
          (("" (expand "miter_point_seq" 1 1)
            (("" (apply (repeat (lift-if)))
              (("" (ground)
                (("" (expand "miter_point_seq") (("" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((closed_miter_point_seq const-decl "segment_endpoint_seq"
     miter_point_sequences nil)
    (singleton_seq const-decl "{uvs: uniq_vertex_seq | uvs`length = 1}"
     vertex_list nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (miter_point_seq const-decl "segment_endpoint_seq"
     miter_point_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   shostak))
 (no_intersection_with_wrap_edges_TCC1 0
  (no_intersection_with_wrap_edges_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak
   (no_intersection_with_wrap_edges subtype
    "(number_fields.-)(miter_point_sequences.S`length, 3)"
    "below[S`length]"))
  (no_intersection_with_wrap_edges_TCC1-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (no_intersection_with_wrap_edges subtype
    "(number_fields.-)(miter_point_sequences.S`length, 3)"
    "below[S`length]")))
 (no_intersection_with_wrap_edges_TCC2 0
  (no_intersection_with_wrap_edges_TCC2-2 nil 3874129021
   ("" (skeep)
    (("" (use "adj_edge_parallel_endpts_neq")
      (("1" (ground) nil nil)
       ("2" (typepred "S") (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (S skolem-const-decl
     "{S: edge_parallel_endpoint_seq | S`seq(0) = S`seq(S`length - 1)}"
     miter_point_sequences nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (no_intersection_with_wrap_edges subtype
    "miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 3))"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2))}"))
  (no_intersection_with_wrap_edges_TCC2-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (no_intersection_with_wrap_edges subtype
    "miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 3))"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2))}")))
 (no_intersection_with_wrap_edges_TCC3 0
  (no_intersection_with_wrap_edges_TCC3-2 nil 3874129021
   ("" (skeep)
    (("" (ground)
      (("1" (lemma "adj_edge_parallel_endpts_neq")
        (("1" (inst - "S" "S`length - 2")
          (("1" (ground) nil nil)
           ("2" (typepred "S") (("2" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (rewrite "dir_parallel_eqv_normalized_diffs_eq")
        (("1" (use "wrapped_adj_segs_not_dir_parallel")
          (("1" (assert)
            (("1" (ground)
              (("1" (typepred "S")
                (("1" (typepred "loop_back_intercept(S)")
                  (("1" (assert) nil nil)) nil))
                nil)
               ("2" (typepred "S")
                (("2" (typepred "loop_back_intercept(S)")
                  (("2" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "adj_edge_parallel_endpts_neq")
          (("2" (inst - "S" "S`length - 3")
            (("1" (ground) nil nil)
             ("2" (typepred "S") (("2" (ground) nil nil)) nil))
            nil))
          nil)
         ("3" (typepred "S")
          (("3" (lemma "adj_edge_parallel_endpts_neq")
            (("3" (inst - "S" "S`length - 2")
              (("1" (ground) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil)
         ("4" (typepred "S") (("4" (ground) nil nil)) nil)
         ("5" (typepred "S") (("5" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (S skolem-const-decl
     "{S: edge_parallel_endpoint_seq | S`seq(0) = S`seq(S`length - 1)}"
     miter_point_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (wrapped_adj_segs_not_dir_parallel formula-decl nil
     segment_endpoint_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (dir_parallel_eqv_normalized_diffs_eq formula-decl nil
     vectors_cross_2d nil))
   shostak
   (no_intersection_with_wrap_edges subtype
    "miter_point_sequences.S`seq(0)"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2)), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 3)), miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2))), (vectors_2D.-)(p, miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2))))))}"))
  (no_intersection_with_wrap_edges_TCC3-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (no_intersection_with_wrap_edges subtype
    "miter_point_sequences.S`seq(0)"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2)), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 3)), miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2))), (vectors_2D.-)(p, miter_point_sequences.S`seq((number_fields.-)(miter_point_sequences.S`length, 2))))))}")))
 (no_intersection_with_wrap_edges_TCC4 0
  (no_intersection_with_wrap_edges_TCC4-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "adj_edge_parallel_endpts_neq")
      (("" (inst - "S" "0")
        (("1" (ground) nil nil)
         ("2" (assert)
          (("2" (typepred "S") (("2" (ground) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((adj_edge_parallel_endpts_neq formula-decl nil
     segment_endpoint_sequences nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (S skolem-const-decl
     "{S: edge_parallel_endpoint_seq | S`seq(0) = S`seq(S`length - 1)}"
     miter_point_sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (no_intersection_with_wrap_edges subtype
    "miter_point_sequences.S`seq(0)"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq(1)}"))
  (no_intersection_with_wrap_edges_TCC4-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (no_intersection_with_wrap_edges subtype
    "miter_point_sequences.S`seq(0)"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.S`seq(1)}")))
 (no_intersection_with_wrap_edges_TCC5 0
  (no_intersection_with_wrap_edges_TCC5-2 nil 3874129021
   ("" (skeep + t)
    (("" (expand "single_loop_back_seq?") (("" (ground) nil nil)) nil))
    nil)
   ((single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak
   (no_intersection_with_wrap_edges subtype "2" "below[S`length]"))
  (no_intersection_with_wrap_edges_TCC5-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (no_intersection_with_wrap_edges subtype "2" "below[S`length]")))
 (no_intersection_with_wrap_edges_TCC6 0
  (no_intersection_with_wrap_edges_TCC6-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "edge_para_endpts_valid_miter_point_args")
      (("" (inst - "S" "1")
        (("1" (ground) nil nil)
         ("2" (typepred "S") (("2" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   ((edge_para_endpts_valid_miter_point_args formula-decl nil
     segment_endpoint_sequences nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (/= const-decl "boolean" notequal nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (S skolem-const-decl
     "{S: edge_parallel_endpoint_seq | S`seq(0) = S`seq(S`length - 1)}"
     miter_point_sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (no_intersection_with_wrap_edges subtype
    "miter_point_sequences.S`seq(2)"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.S`seq(1), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.S`seq(0), miter_point_sequences.S`seq(1)), (vectors_2D.-)(p, miter_point_sequences.S`seq(1)))))}"))
  (no_intersection_with_wrap_edges_TCC6-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (no_intersection_with_wrap_edges subtype
    "miter_point_sequences.S`seq(2)"
    "{p: vectors_cross_2d.point_2d | booleans.AND(p /= miter_point_sequences.S`seq(1), (booleans.NOT)(vectors_2D.dir_parallel?((vectors_2D.-)(miter_point_sequences.S`seq(0), miter_point_sequences.S`seq(1)), (vectors_2D.-)(p, miter_point_sequences.S`seq(1)))))}")))
 (no_intersection_with_wrap_edges_TCC7 0
  (no_intersection_with_wrap_edges_TCC7-2 nil 3874129021
   ("" (skeep*)
    (("" (use "wrapped_miter_points_neq")
      (("" (ground)
        (("" (ground)
          (("1" (case-replace "loop_back_intercept(S) = 0")
            (("1" (assert) nil nil)
             ("2" (hide-all-but 1)
              (("2" (typepred "S")
                (("2" (typepred "loop_back_intercept(S)")
                  (("2" (ground)
                    (("2" (expand "mostly_uniq_point_list?")
                      (("2" (inst -8 "0" "S`length - 1")
                        (("2" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case-replace "loop_back_intercept(S) = 0")
            (("1" (typepred "S") (("1" (propax) nil nil)) nil)
             ("2" (hide-all-but 1)
              (("2" (typepred "S")
                (("2" (typepred "loop_back_intercept(S)")
                  (("2" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((wrapped_miter_points_neq formula-decl nil miter_point_sequences
     nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (no_intersection_with_wrap_edges subtype "miter_point_sequences.m1"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.m0}"))
  (no_intersection_with_wrap_edges_TCC7-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (no_intersection_with_wrap_edges subtype "miter_point_sequences.m1"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.m0}")))
 (no_intersection_with_wrap_edges_TCC8 0
  (no_intersection_with_wrap_edges_TCC8-2 nil 3874129021
   ("" (skeep*)
    (("" (use "wrapped_miter_points_neq")
      (("" (ground)
        (("" (ground)
          (("1" (case-replace "loop_back_intercept(S) = 0")
            (("1" (ground) nil nil)
             ("2" (hide-all-but 1)
              (("2" (typepred "S")
                (("2" (typepred "loop_back_intercept(S)")
                  (("2" (ground)
                    (("2" (expand "mostly_uniq_point_list?")
                      (("2" (inst -8 "0" "S`length - 1")
                        (("2" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case-replace "loop_back_intercept(S) = 0")
            (("1" (typepred "S") (("1" (propax) nil nil)) nil)
             ("2" (hide-all-but 1)
              (("2" (typepred "S")
                (("2" (typepred "loop_back_intercept(S)")
                  (("2" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((wrapped_miter_points_neq formula-decl nil miter_point_sequences
     nil)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (real nonempty-type-from-decl nil reals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (no_intersection_with_wrap_edges subtype "miter_point_sequences.m2"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.m1}"))
  (no_intersection_with_wrap_edges_TCC8-1 nil 3874128243
   ("" (subtype-tcc) nil nil) nil nil
   (no_intersection_with_wrap_edges subtype "miter_point_sequences.m2"
    "{p: vectors_cross_2d.point_2d | p /= miter_point_sequences.m1}")))
 (no_intersection_with_wrap_edges 0
  (no_intersection_with_wrap_edges-1 nil 3874129021
   ("" (skeep*)
    (("" (skoletin*)
      (("" (skeep)
        (("" (expand "point_on_segment_seq?")
          (("" (split -1)
            (("1" (typepred "S") (("1" (ground) nil nil)) nil)
             ("2" (flatten)
              (("2" (skeep)
                (("2" (use "wrapped_miter_points_neq")
                  (("2" (assert)
                    (("2" (case-replace "loop_back_intercept(S) = 0")
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (lemma "three_pt_miniseq_in_endpt_seq")
                            (("1" (inst-cp - "S" "1" "d")
                              (("1"
                                (inst - "S" "S`length - 2" "d")
                                (("1"
                                  (use
                                   "three_pt_miniseq_in_endpt_seq_wrap")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (use
                                       "four_pt_miniseq_in_endpt_seq_wrap")
                                      (("1"
                                        (use
                                         "four_pt_miniseq_in_endpt_seq_wrap_2")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -11)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (case-replace
                                                   "i = S`length - 2")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "miter_seg_points_not_on_seg")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "S`seq(S`length - 3)"
                                                         "S`seq(S`length - 2)"
                                                         "S`seq(0)"
                                                         "S`seq(1)"
                                                         "d")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case-replace
                                                     "i = S`length - 3")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "miter_seg_pts_not_on_prev_seg")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "S`seq(S`length - 3)"
                                                           "S`seq(S`length - 2)"
                                                           "S`seq(0)"
                                                           _
                                                           "d")
                                                          (("1"
                                                            (rewrite
                                                             "point_on_segment_has_offset")
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (lemma
                                                                 "miter_pt_segment_parallel_to_orig")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "S`seq(S`length - 3)"
                                                                   "S`seq(S`length - 2)"
                                                                   "S`seq(0)"
                                                                   "S`seq(1)"
                                                                   "d")
                                                                  (("1"
                                                                    (beta
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "dir_parallel?")
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "1/pk")
                                                                          (("1"
                                                                            (skoletin*)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "p")
                                                                              (("1"
                                                                                (ground)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "point_on_segment_has_offset"
                                                                                   1)
                                                                                  (("1"
                                                                                    (inst
                                                                                     +
                                                                                     "d!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -2
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -5
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case-replace
                                                       "i = 0")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "miter_seg_pts_not_on_next_seg")
                                                          (("1"
                                                            (inst
                                                             -
                                                             "S`seq(S`length - 2)"
                                                             "S`seq(0)"
                                                             "S`seq(1)"
                                                             _
                                                             "d")
                                                            (("1"
                                                              (rewrite
                                                               "point_on_segment_has_offset")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (lemma
                                                                   "miter_pt_segment_parallel_to_orig")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "S`seq(S`length - 3)"
                                                                     "S`seq(S`length - 2)"
                                                                     "S`seq(0)"
                                                                     "S`seq(1)"
                                                                     "d")
                                                                    (("1"
                                                                      (beta
                                                                       -1)
                                                                      (("1"
                                                                        (expand
                                                                         "dir_parallel?")
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "1/pk")
                                                                            (("1"
                                                                              (skoletin*)
                                                                              (("1"
                                                                                (inst
                                                                                 -
                                                                                 "p")
                                                                                (("1"
                                                                                  (ground)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (case
                                                                                       "q = mp")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (hide-all-but
                                                                                           (-3
                                                                                            -14))
                                                                                          (("1"
                                                                                            (move-terms
                                                                                             -1
                                                                                             l
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (use
                                                                                                 "scal_eq_zero")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "three_point_miniseq?")
                                                                                                    (("1"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (rewrite
                                                                                         "point_on_reverse_segment"
                                                                                         2
                                                                                         :dir
                                                                                         rl)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "reverse_segment")
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "point_on_segment_has_offset"
                                                                                             2)
                                                                                            (("2"
                                                                                              (inst
                                                                                               +
                                                                                               "d!1")
                                                                                              (("2"
                                                                                                (case
                                                                                                 "q = mp - 1 / pk * (S`seq(0) - S`seq(S`length - 2))")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -6
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -23
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -24
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -4
                                                                                                           2
                                                                                                           :dir
                                                                                                           rl)
                                                                                                          (("1"
                                                                                                            (real-props)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -8
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (hide-all-but
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (replace
                                                                                                   -2
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "miter_seg_pts_not_on_nonadj_prev_wrap")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "S"
                                                           "i"
                                                           "d")
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case-replace
                                                   "i = 0")
                                                  (("1"
                                                    (lemma
                                                     "miter_seg_points_not_on_seg")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "S`seq(S`length - 2)"
                                                       "S`seq(0)"
                                                       "S`seq(1)"
                                                       "S`seq(2)"
                                                       "d")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case-replace
                                                     "i = S`length - 2")
                                                    (("1"
                                                      (lemma
                                                       "miter_seg_pts_not_on_prev_seg")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "S`seq(S`length - 2)"
                                                         "S`seq(0)"
                                                         "S`seq(1)"
                                                         _
                                                         "d")
                                                        (("1"
                                                          (rewrite
                                                           "point_on_segment_has_offset")
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (lemma
                                                               "miter_pt_segment_parallel_to_orig")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "S`seq(S`length - 2)"
                                                                 "S`seq(0)"
                                                                 "S`seq(1)"
                                                                 "S`seq(2)"
                                                                 "d")
                                                                (("1"
                                                                  (beta
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "dir_parallel?")
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "1/pk")
                                                                        (("1"
                                                                          (skoletin*)
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "p")
                                                                            (("1"
                                                                              (ground)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "point_on_segment_has_offset"
                                                                                 1)
                                                                                (("1"
                                                                                  (inst
                                                                                   +
                                                                                   "d!1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -2
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -5
                                                                                               1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case-replace
                                                       "i = 1")
                                                      (("1"
                                                        (lemma
                                                         "miter_seg_pts_not_on_next_seg")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "S`seq(0)"
                                                           "S`seq(1)"
                                                           "S`seq(2)"
                                                           _
                                                           "d")
                                                          (("1"
                                                            (rewrite
                                                             "point_on_segment_has_offset")
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (lemma
                                                                 "miter_pt_segment_parallel_to_orig")
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "S`seq(S`length - 2)"
                                                                   "S`seq(0)"
                                                                   "S`seq(1)"
                                                                   "S`seq(2)"
                                                                   "d")
                                                                  (("1"
                                                                    (beta
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "dir_parallel?")
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "1/pk")
                                                                          (("1"
                                                                            (skoletin*)
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "p")
                                                                              (("1"
                                                                                (ground)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "point_on_reverse_segment"
                                                                                     1
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "reverse_segment")
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "point_on_segment_has_offset"
                                                                                         1)
                                                                                        (("1"
                                                                                          (inst
                                                                                           +
                                                                                           "d!1")
                                                                                          (("1"
                                                                                            (case
                                                                                             "q = mp - 1 / pk * (S`seq(1) - S`seq(0))")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               1)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -6
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -22
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -23
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -4
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (real-props)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -8
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (hide-all-but
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replace
                                                                                               -2
                                                                                               1)
                                                                                              (("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (replace
                                                                                           -2
                                                                                           1)
                                                                                          (("2"
                                                                                            (hide-all-but
                                                                                             (-13
                                                                                              1))
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (move-terms
                                                                                                 -1
                                                                                                 r
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (use
                                                                                                     "scal_eq_zero")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "three_point_miniseq?")
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (replace
                                                                                       -2)
                                                                                      (("2"
                                                                                        (hide-all-but
                                                                                         (-13
                                                                                          1))
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (move-terms
                                                                                             -1
                                                                                             l
                                                                                             1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (use
                                                                                                 "scal_eq_zero")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "three_point_miniseq?")
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "miter_seg_pts_not_on_nonadj_next_wrap")
                                                        (("2"
                                                          (inst
                                                           -
                                                           "S"
                                                           "i"
                                                           "d")
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -)
                        (("2" (typepred "S")
                          (("2" (typepred "loop_back_intercept(S)")
                            (("2" (ground)
                              (("2"
                                (expand "mostly_uniq_point_list?")
                                (("2"
                                  (inst -8 "0" "S`length - 1")
                                  (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "Vector" vectors_2D vectors)
    (dir_parallel? const-decl "bool" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (miter_point const-decl "point_2d" vectors_2d_trig nil)
    (<= const-decl "bool" reals nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (point_on_segment_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_2d type-eq-decl nil segments_2d nil)
    (point_on_segment? const-decl "bool" segments_2d nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (wrapped_miter_points_neq formula-decl nil miter_point_sequences
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (three_pt_miniseq_in_endpt_seq_wrap formula-decl nil
     miter_point_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (four_pt_miniseq_in_endpt_seq_wrap formula-decl nil
     miter_point_sequences nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (sub_eq_args formula-decl nil vectors_2D vectors)
    (miter_seg_pts_not_on_nonadj_next_wrap formula-decl nil
     miter_point_sequences nil)
    (miter_seg_points_not_on_seg formula-decl nil miter_point_sequences
     nil)
    (four_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (four_point_offset_dist? const-decl "bool"
     segment_endpoint_sequences nil)
    (miter_seg_pts_not_on_next_seg formula-decl nil
     miter_point_sequences nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (scal_eq_zero formula-decl nil vectors_2D vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (reverse_segment const-decl "segment_2d" segments_2d nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_cancel2 formula-decl nil real_props nil)
    (scal_1 formula-decl nil vectors_2D vectors)
    (point_on_reverse_segment formula-decl nil segments_2d nil)
    (S skolem-const-decl
     "{S: edge_parallel_endpoint_seq | S`seq(0) = S`seq(S`length - 1)}"
     miter_point_sequences nil)
    (i skolem-const-decl "below(S`length - 1)" miter_point_sequences
       nil)
    (miter_seg_pts_not_on_nonadj_prev_wrap formula-decl nil
     miter_point_sequences nil)
    (three_point_offset_dist? const-decl "bool"
     segment_endpoint_sequences nil)
    (three_point_miniseq? const-decl "bool" segment_endpoint_sequences
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (add_cancel formula-decl nil vectors_2D vectors)
    (scal_assoc formula-decl nil vectors_2D vectors)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (* const-decl "Vector" vectors_2D vectors)
    (miter_pt_segment_parallel_to_orig formula-decl nil
     miter_point_sequences nil)
    (point_on_segment_has_offset formula-decl nil segments_2d nil)
    (miter_seg_pts_not_on_prev_seg formula-decl nil
     miter_point_sequences nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (four_pt_miniseq_in_endpt_seq_wrap_2 formula-decl nil
     miter_point_sequences nil)
    (three_pt_miniseq_in_endpt_seq formula-decl nil
     miter_point_sequences nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (no_intersection_with_closed_skimming_segs 0
  (no_intersection_with_closed_skimming_segs-1 nil 3874129021
   ("" (skeep*)
    (("" (typepred "S")
      (("" (expand "point_on_segment_seq?")
        (("" (use "length_closed_miter_point_seq")
          (("" (assert)
            (("" (skeep* - t)
              (("" (lemma "intercept_index_value")
                (("" (inst - "S" "0")
                  (("" (assert)
                    (("" (flatten)
                      (("" (replace -2)
                        (("" (hide -9)
                          (("" (expand "closed_miter_point_seq" -13)
                            ((""
                              (case "miter_point_seq(S, d)`length = S`length - 2")
                              (("1"
                                (case-replace "i!1 = 0")
                                (("1"
                                  (expand "singleton_seq")
                                  (("1"
                                    (expand "o ")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "miter_point_seq" -15)
                                        (("1"
                                          (use
                                           "no_intersection_with_wrap_edges")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (expand
                                                   "point_on_segment_seq?")
                                                  (("1"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case-replace "i!1 = S`length - 2")
                                  (("1"
                                    (expand "singleton_seq")
                                    (("1"
                                      (expand "o ")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand
                                           "miter_point_seq"
                                           -15)
                                          (("1"
                                            (use
                                             "no_intersection_with_wrap_edges")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst - "p")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (expand
                                                     "point_on_segment_seq?")
                                                    (("1"
                                                      (inst?)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "singleton_seq")
                                    (("2"
                                      (expand "o ")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lemma
                                           "no_intersection_with_skimming_segments")
                                          (("2"
                                            (inst - "S" "d")
                                            (("2"
                                              (ground)
                                              (("1"
                                                (inst - "p")
                                                (("1"
                                                  (expand
                                                   "point_on_segment_seq?")
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "no_right_side_loop_back?")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (expand "miter_point_seq")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((edge_parallel_endpoint_seq type-eq-decl nil
     segment_endpoint_sequences nil)
    (segments_do_not_cross? const-decl "bool"
     segment_endpoint_sequences nil)
    (mostly_uniq_point_list? const-decl "bool"
     segment_endpoint_sequences nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (loop_back_intercept const-decl "{i: below(S`length - 2) |
   IF FORALL (j: below(S`length - 3)): S`seq(j) /= S`seq(S`length - 1)
     THEN i = 0
   ELSE i < S`length - 3 AND S`seq(i) = S`seq(S`length - 1)
   ENDIF}" segment_endpoint_sequences nil)
    (/= const-decl "boolean" notequal nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (single_loop_back_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (segment_endpoint_seq type-eq-decl nil segment_endpoint_sequences
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (point_2d type-eq-decl nil vectors_cross_2d nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length_closed_miter_point_seq formula-decl nil
     miter_point_sequences nil)
    (miter_seq_offset_dist type-eq-decl nil miter_point_sequences nil)
    (max_miter_offset const-decl "posreal" miter_point_sequences nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (miter_point_seq const-decl "segment_endpoint_seq"
     miter_point_sequences nil)
    (no_intersection_with_skimming_segments formula-decl nil
     miter_point_sequences nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (no_right_side_loop_back? const-decl "bool" miter_point_sequences
     nil)
    (singleton_seq const-decl "{uvs: uniq_vertex_seq | uvs`length = 1}"
     vertex_list nil)
    (no_intersection_with_wrap_edges formula-decl nil
     miter_point_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (closed_miter_point_seq const-decl "segment_endpoint_seq"
     miter_point_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (intercept_index_value formula-decl nil segment_endpoint_sequences
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (point_on_segment_seq? const-decl "bool" segment_endpoint_sequences
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak)))

