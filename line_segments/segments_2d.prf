(segments_2d
 (segment_2d_to_Line_TCC1 0
  (segment_2d_to_Line_TCC1-2 nil 3874129021
   ("" (skeep 1 t)
    (("" (typepred "seg`p2")
      (("" (grind-with-ext)
        (("1" (expand "zero") (("1" (propax) nil nil)) nil)
         ("2" (expand "zero") (("2" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak
   (segment_2d_to_Line subtype
    "(vectors_2D.-)(segments_2d.seg`p2, segments_2d.seg`p1)"
    "Nz_vect2"))
  (segment_2d_to_Line_TCC1-1 nil 3874127254 ("" (subtype-tcc) nil nil)
   nil nil
   (segment_2d_to_Line subtype
    "(vectors_2D.-)(segments_2d.seg`p2, segments_2d.seg`p1)"
    "Nz_vect2")))
 (endpoint_diff_nonzero_1 0
  (endpoint_diff_nonzero_1-2 nil 3874129021
   ("" (skeep) (("" (typepred "s`p2") (("" (assert) nil nil)) nil))
    nil)
   nil shostak
   (endpoint_diff_nonzero_1 subtype
    "(vectors_2D.-)(segments_2d.s`p2, segments_2d.s`p1)" "Nz_vector"))
  (endpoint_diff_nonzero_1-1 nil 3874127254
   ("" (judgement-tcc) nil nil) nil nil
   (endpoint_diff_nonzero_1 subtype
    "(vectors_2D.-)(segments_2d.s`p2, segments_2d.s`p1)" "Nz_vector")))
 (endpoint_diff_nonzero_2 0
  (endpoint_diff_nonzero_2-2 nil 3874129021
   ("" (skeep) (("" (typepred "s`p2") (("" (assert) nil nil)) nil))
    nil)
   nil shostak
   (endpoint_diff_nonzero_2 subtype
    "(vectors_2D.-)(segments_2d.s`p1, segments_2d.s`p2)" "Nz_vector"))
  (endpoint_diff_nonzero_2-1 nil 3874127254
   ("" (judgement-tcc) nil nil) nil nil
   (endpoint_diff_nonzero_2 subtype
    "(vectors_2D.-)(segments_2d.s`p1, segments_2d.s`p2)" "Nz_vector")))
 (length_invariant_to_direction_TCC1 0
  (length_invariant_to_direction_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (length_invariant_to_direction subtype "segments_2d.s`p1"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d.s`p2}"))
  (length_invariant_to_direction_TCC1-1 nil 3874127254
   ("" (subtype-tcc) nil nil) nil nil
   (length_invariant_to_direction subtype "segments_2d.s`p1"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d.s`p2}")))
 (length_invariant_to_direction 0
  (length_invariant_to_direction-1 nil 3874129021 ("" (grind) nil nil)
   nil shostak))
 (normalize_eq 0
  (normalize_eq-1 nil 3874129021 ("" (grind) nil nil) nil shostak))
 (is_point_on_segment_alt?_eq_is_point_on_segment? 0
  (is_point_on_segment_alt?_eq_is_point_on_segment?-1 nil 3874129021
   ("" (skeep)
    (("" (iff)
      (("" (split)
        (("1"
          (expand* "is_point_on_segment_alt?" "is_point_on_segment?")
          (("1" (flatten)
            (("1" (case "norm(p - s`p1) = length(s)")
              (("1" (replace -1)
                (("1" (assert)
                  (("1" (case-replace "p = s`p2")
                    (("1" (hide -)
                      (("1"
                        (name-replace "v"
                         "vector_from_point_to_point(s`p1, s`p2)")
                        (("1" (grind) nil nil)) nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (case "(norm(p - s`p1) / length(s)) < 1")
                (("1" (split)
                  (("1" (grind) nil nil)
                   ("2" (name-replace "a" "norm(p - s`p1) / length(s)")
                    (("2" (typepred "a")
                      (("2" (hide -3 2)
                        (("2"
                          (lemma "vector_from_point_to_point_is_diff"
                           ("p1" "s`p1" "p2" "s`p2"))
                          (("2"
                            (lemma "vector_from_point_to_point_is_diff"
                             ("p1" "s`p1" "p2" "p"))
                            (("2" (replace -1 :hide? T)
                              (("2"
                                (replace -1 :hide? T)
                                (("2"
                                  (case-replace
                                   "p - s`p1 = a * (s`p2 - s`p1)")
                                  (("1"
                                    (name-replace "v" "(s`p2 - s`p1)")
                                    (("1"
                                      (case-replace
                                       "v * (a * v) = a * sqv(v)")
                                      (("1"
                                        (typepred "sqv(v)")
                                        (("1"
                                          (name-replace "v2" "sqv(v)")
                                          (("1" (field) nil nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3"
                    (lemma "vector_from_point_to_point_is_diff"
                     ("p1" "s`p1" "p2" "s`p2"))
                    (("3"
                      (lemma "vector_from_point_to_point_is_diff"
                       ("p1" "s`p1" "p2" "p"))
                      (("3" (replace -1 :hide? T)
                        (("3" (replace -1 :hide? T)
                          (("3"
                            (name-replace "a"
                             "(norm(p - s`p1) / length(s))")
                            (("3" (typepred "a")
                              (("3"
                                (case-replace
                                 "p - s`p1 = a * (s`p2 - s`p1)")
                                (("1"
                                  (name-replace "v" "s`p2 - s`p1")
                                  (("1"
                                    (case-replace
                                     "v * (a * v) = a * (v * v)")
                                    (("1"
                                      (cancel-by 1 "v*v")
                                      (("1"
                                        (rewrite "sqv_rew")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "length(s)")
                  (("2"
                    (name-replace*
                     ("a" "length(s)" "b" "norm(p - s`p1)"))
                    (("2" (field) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2"
          (expand* "is_point_on_segment_alt?" "is_point_on_segment?")
          (("2" (flatten)
            (("2"
              (lemma "vector_from_point_to_point_is_diff"
               ("p1" "s`p1" "p2" "s`p2"))
              (("2"
                (lemma "vector_from_point_to_point_is_diff"
                 ("p1" "s`p1" "p2" "p"))
                (("2" (replace -1 :hide? T)
                  (("2" (replace -1 :hide? T)
                    (("2" (split)
                      (("1" (expand* "length" "norm")
                        (("1" (use "sqrt_le")
                          (("1" (assert)
                            (("1" (hide 2)
                              (("1"
                                (typepred
                                 "are_vectors_collinear?(p - s`p1, s`p2 - s`p1)")
                                (("1"
                                  (replace -1 :hide? T)
                                  (("1"
                                    (expand "norm")
                                    (("1"
                                      (lemma
                                       "sqrt_times"
                                       ("nny"
                                        "sqv(p - s`p1)"
                                        "nnz"
                                        "sqv(s`p2 - s`p1)"))
                                      (("1"
                                        (replace -1 :dir RL :hide? T)
                                        (("1"
                                          (lemma
                                           "sqrt_lem"
                                           ("nny"
                                            "sqv(p - s`p1) * sqv(s`p2 - s`p1)"
                                            "nnz"
                                            "abs((p - s`p1) * (s`p2 - s`p1))"))
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (case-replace
                                               "abs((p - s`p1) * (s`p2 - s`p1)) * abs((p - s`p1) * (s`p2 - s`p1)) = ((p - s`p1) * (s`p2 - s`p1)) * ((p - s`p1) * (s`p2 - s`p1))")
                                              (("1"
                                                (case-replace
                                                 "(p - s`p1) * (s`p2 - s`p1) = sqrt(sqv(p - s`p1) * sqv(s`p2 - s`p1))")
                                                (("1"
                                                  (case-replace
                                                   "(p - s`p1) * (s`p2 - s`p1) = (s`p2 - s`p1) * (p - s`p1)")
                                                  (("1"
                                                    (replace -2)
                                                    (("1"
                                                      (hide
                                                       -1
                                                       -2
                                                       -3
                                                       -4
                                                       -5)
                                                      (("1"
                                                        (case-replace
                                                         "(s`p2 - s`p1) * (s`p2 - s`p1) = sqv(s`p2 - s`p1)")
                                                        (("1"
                                                          (typepred
                                                           "s`p2")
                                                          (("1"
                                                            (case
                                                             "sqv(s`p2 - s`p1) /= 0")
                                                            (("1"
                                                              (name-replace*
                                                               ("a"
                                                                "sqv(p - s`p1)"
                                                                "b"
                                                                "sqv(s`p2 - s`p1)"))
                                                              (("1"
                                                                (hide
                                                                 -1
                                                                 -2
                                                                 -4
                                                                 -5
                                                                 -7)
                                                                (("1"
                                                                  (lemma
                                                                   "sqrt_le"
                                                                   ("nny"
                                                                    "a * b"
                                                                    "nnz"
                                                                    "b * b"))
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (both-sides
                                                                       "/"
                                                                       "b"
                                                                       -1)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (-1 1))
                                                              (("2"
                                                                (expand*
                                                                 "sqv"
                                                                 "*"
                                                                 "-")
                                                                (("2"
                                                                  (bash)
                                                                  (("2"
                                                                    (apply-extensionality)
                                                                    (("1"
                                                                      (case-replace
                                                                       "s`p1`x * s`p1`x + s`p1`y * s`p1`y + s`p2`x * s`p2`x + s`p2`y * s`p2`y
                         - 2 * (s`p1`x * s`p2`x)
                         - 2 * (s`p1`y * s`p2`y) = sq(s`p1`x - s`p2`x) + sq(s`p1`y - s`p2`y)")
                                                                      (("1"
                                                                        (use
                                                                         "sq_plus_eq_0")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (case-replace
                                                                       "s`p1`x * s`p1`x + s`p1`y * s`p1`y + s`p2`x * s`p2`x + s`p2`y * s`p2`y
                         - 2 * (s`p1`x * s`p2`x)
                         - 2 * (s`p1`y * s`p2`y) = sq(s`p1`x - s`p2`x) + sq(s`p1`y - s`p2`y)")
                                                                      (("1"
                                                                        (use
                                                                         "sq_plus_eq_0")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (name-replace
                                                   "v1"
                                                   "p - s`p1")
                                                  (("2"
                                                    (name-replace
                                                     "v2"
                                                     "s`p2 - s`p1")
                                                    (("2"
                                                      (lemma
                                                       "sqrt_lem"
                                                       ("nny"
                                                        "sqv(v1) * sqv(v2)"
                                                        "nnz"
                                                        "v1 * v2"))
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (case-replace
                                                         "v1 * v2 = v2 * v1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (name-replace
                                                 "x"
                                                 "(p - s`p1) * (s`p2 - s`p1)")
                                                (("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2"
                        (typepred
                         "are_vectors_collinear?(p - s`p1, s`p2 - s`p1)")
                        (("2" (replace -1 :hide? T)
                          (("2"
                            (case "p - s`p1 = (norm(p - s`p1) / length(s)) * (s`p2 - s`p1)")
                            (("1"
                              (name-replace "b"
                               "(norm(p - s`p1) / length(s)) * (s`p2 - s`p1)")
                              (("1" (grind-with-ext) nil nil)) nil)
                             ("2" (hide 2)
                              (("2"
                                (expand "length")
                                (("2"
                                  (name-replace*
                                   ("v1"
                                    "p - s`p1"
                                    "v2"
                                    "s`p2 - s`p1"))
                                  (("2"
                                    (case-replace "v2 * v1 = v1 * v2")
                                    (("1"
                                      (hide -1 -2 -3)
                                      (("1"
                                        (grind)
                                        (("1"
                                          (model-check)
                                          (("1"
                                            (name-replace*
                                             ("xx1"
                                              "v1`x"
                                              "xx2"
                                              "v2`x"
                                              "y1"
                                              "v1`y"
                                              "y2"
                                              "v2`y"))
                                            (("1"
                                              (hide -1 -2 -3 -4)
                                              (("1"
                                                (both-sides
                                                 "*"
                                                 "sqrt(xx2 * xx2 + y2 * y2)"
                                                 1)
                                                (("1"
                                                  (case-replace
                                                   "(sqrt(xx1 * xx1 + y1 * y1) / sqrt(xx2 * xx2 + y2 * y2)) * y2 * sqrt(xx2 * xx2 + y2 * y2) = sqrt(xx1 * xx1 + y1 * y1) * y2")
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (lemma
                                                       "sqrt_times"
                                                       ("nny"
                                                        "xx1 * xx1 + y1 * y1"
                                                        "nnz"
                                                        "xx2 * xx2 + y2 * y2"))
                                                      (("1"
                                                        (replace
                                                         -1
                                                         :dir
                                                         RL
                                                         :hide?
                                                         T)
                                                        (("1"
                                                          (lemma
                                                           "sqrt_lem"
                                                           ("nny"
                                                            "(xx1 * xx1 + y1 * y1) * (xx2 * xx2 + y2 * y2)"
                                                            "nnz"
                                                            "xx1 * xx2 + y1 * y2"))
                                                          (("1"
                                                            (grind)
                                                            (("1"
                                                              (case
                                                               "y1 / y2 = sqrt(xx1 * xx1 + y1 * y1) / sqrt(xx2 * xx2 + y2 * y2)")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (lemma
                                                                   "sqrt_div"
                                                                   ("nny"
                                                                    "xx1 * xx1 + y1 * y1"
                                                                    "nnz"
                                                                    "xx2 * xx2 + y2 * y2"))
                                                                  (("2"
                                                                    (split)
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       :dir
                                                                       RL
                                                                       :hide?
                                                                       T)
                                                                      (("1"
                                                                        (lemma
                                                                         "sqrt_lem"
                                                                         ("nny"
                                                                          "(xx1 * xx1 + y1 * y1) / (xx2 * xx2 + y2 * y2)"
                                                                          "nnz"
                                                                          "y1 / y2"))
                                                                        (("1"
                                                                          (grind)
                                                                          (("1"
                                                                            (case
                                                                             "y1 * y1 * (xx2 * xx2 + y2 * y2) = y2 * y2 * (xx1 * xx1 + y1 * y1)")
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-1
                                                                                2))
                                                                              (("1"
                                                                                (both-sides
                                                                                 "*"
                                                                                 "y2 * y2"
                                                                                 1)
                                                                                (("1"
                                                                                  (both-sides
                                                                                   "*"
                                                                                   "(xx2 * xx2 + y2 * y2)"
                                                                                   1)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2
                                                                               3
                                                                               4)
                                                                              (("2"
                                                                                (grind)
                                                                                (("2"
                                                                                  (case
                                                                                   "sq(xx1 * y2 - xx2 * y1) = 0")
                                                                                  (("1"
                                                                                    (use
                                                                                     "sq_eq_0")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           "sq(xx1 * y2 - xx2 * y1) = 0")
                                                                          (("1"
                                                                            (use
                                                                             "sq_eq_0")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (case
                                                                                 "(y1 > 0) = (y2 > 0) OR y1 = 0 OR y2 = 0")
                                                                                (("1"
                                                                                  (field)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -2
                                                                                   -3
                                                                                   -4
                                                                                   -6
                                                                                   2
                                                                                   3)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (case
                                                                                       "y1 * y2 >= 0")
                                                                                      (("1"
                                                                                        (field)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (case
                                                                                         "(xx1 > 0) = (xx2 > 0) OR xx1 = 0 OR xx2 = 0")
                                                                                        (("1"
                                                                                          (split
                                                                                           -1)
                                                                                          (("1"
                                                                                            (case
                                                                                             "xx1 > 0")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "y1 > 0")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "y2 >= 0")
                                                                                                    (("1"
                                                                                                      (field)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (case
                                                                                                       "y2 = (xx2 / xx1) * y1")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "pos_times_gt"
                                                                                                         ("x"
                                                                                                          "(xx2 / xx1)"
                                                                                                          "y"
                                                                                                          "y1"))
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -2
                                                                                                           -1
                                                                                                           :dir
                                                                                                           RL)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (field)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (case
                                                                                                     "y1 = (xx1 / xx2) * y2")
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "pos_times_gt"
                                                                                                       ("x"
                                                                                                        "(xx1 / xx2)"
                                                                                                        "y"
                                                                                                        "y2"))
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -2
                                                                                                         -1
                                                                                                         :dir
                                                                                                         RL)
                                                                                                        (("1"
                                                                                                          (field)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "xx1 = 0")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (case
                                                                                                   "y2 = (xx2 / xx1) * y1")
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "pos_times_gt"
                                                                                                     ("x"
                                                                                                      "(xx2 / xx1)"
                                                                                                      "y"
                                                                                                      "y1"))
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -2
                                                                                                       -1
                                                                                                       :dir
                                                                                                       RL)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "pos_div_gt"
                                                                                                         ("x"
                                                                                                          "xx2"
                                                                                                          "n0y"
                                                                                                          "xx1"))
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("3"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (case
                                                                                           "xx1 * xx2 >= 0 OR y1 * y2 >= 0")
                                                                                          (("1"
                                                                                            (split
                                                                                             -1)
                                                                                            (("1"
                                                                                              (field)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (bash)
                                                                      (("2"
                                                                        (lemma
                                                                         "sq_plus_eq_0"
                                                                         ("a"
                                                                          "xx2"
                                                                          "b"
                                                                          "y2"))
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (lemma
                                                                 "sq_plus_eq_0"
                                                                 ("a"
                                                                  "xx2"
                                                                  "b"
                                                                  "y2"))
                                                                (("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (replace
                                                                 -1)
                                                                (("4"
                                                                  (assert)
                                                                  (("4"
                                                                    (case
                                                                     "xx2 = 0 OR y1 = 0")
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (lemma
                                                                         "sq_eq_0"
                                                                         ("a"
                                                                          "xx2 * y1"))
                                                                        (("2"
                                                                          (use
                                                                           "zero_times3")
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "sqrt((xx1 * xx1 + y1 * y1) * (xx2 * xx2 + y2 * y2))")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (name-replace*
                                             ("xx1"
                                              "v1`x"
                                              "xx2"
                                              "v2`x"
                                              "y1"
                                              "v1`y"
                                              "y2"
                                              "v2`y"))
                                            (("2"
                                              (hide -1 -2 -3 -4)
                                              (("2"
                                                (both-sides
                                                 "*"
                                                 "sqrt(xx2 * xx2 + y2 * y2)"
                                                 1)
                                                (("2"
                                                  (case-replace
                                                   "(sqrt(xx1 * xx1 + y1 * y1) / sqrt(xx2 * xx2 + y2 * y2)) * xx2 * sqrt(xx2 * xx2 + y2 * y2) = sqrt(xx1 * xx1 + y1 * y1) * xx2")
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (lemma
                                                       "sqrt_times"
                                                       ("nny"
                                                        "xx1 * xx1 + y1 * y1"
                                                        "nnz"
                                                        "xx2 * xx2 + y2 * y2"))
                                                      (("1"
                                                        (replace
                                                         -1
                                                         :dir
                                                         RL
                                                         :hide?
                                                         T)
                                                        (("1"
                                                          (lemma
                                                           "sqrt_lem"
                                                           ("nny"
                                                            "(xx1 * xx1 + y1 * y1) * (xx2 * xx2 + y2 * y2)"
                                                            "nnz"
                                                            "xx1 * xx2 + y1 * y2"))
                                                          (("1"
                                                            (grind)
                                                            (("1"
                                                              (case
                                                               "xx1 / xx2 = sqrt(xx1 * xx1 + y1 * y1) / sqrt(xx2 * xx2 + y2 * y2)")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (lemma
                                                                   "sqrt_div"
                                                                   ("nny"
                                                                    "xx1 * xx1 + y1 * y1"
                                                                    "nnz"
                                                                    "xx2 * xx2 + y2 * y2"))
                                                                  (("2"
                                                                    (split)
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       :dir
                                                                       RL
                                                                       :hide?
                                                                       T)
                                                                      (("1"
                                                                        (lemma
                                                                         "sqrt_lem"
                                                                         ("nny"
                                                                          "(xx1 * xx1 + y1 * y1) / (xx2 * xx2 + y2 * y2)"
                                                                          "nnz"
                                                                          "xx1 / xx2"))
                                                                        (("1"
                                                                          (grind)
                                                                          (("1"
                                                                            (case
                                                                             "xx1 * xx1 * (xx2 * xx2 + y2 * y2) = xx2 * xx2 * (xx1 * xx1 + y1 * y1)")
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-1
                                                                                2))
                                                                              (("1"
                                                                                (both-sides
                                                                                 "*"
                                                                                 "xx2 * xx2"
                                                                                 1)
                                                                                (("1"
                                                                                  (field)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              (("2"
                                                                                (case
                                                                                 "sq(xx1 * y2 - xx2 * y1) = 0")
                                                                                (("1"
                                                                                  (use
                                                                                   "sq_eq_0")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           "sq(xx1 * y2 - xx2 * y1) = 0")
                                                                          (("1"
                                                                            (use
                                                                             "sq_eq_0")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (case
                                                                                 "(xx1 > 0) = (xx2 > 0) OR xx1 = 0 OR xx2 = 0")
                                                                                (("1"
                                                                                  (field)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -2
                                                                                   -3
                                                                                   -4
                                                                                   -6
                                                                                   2
                                                                                   3)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (case
                                                                                       "xx1 * xx2 >= 0")
                                                                                      (("1"
                                                                                        (field)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (case
                                                                                         "(y1 > 0) = (y2 > 0) OR y1 = 0 OR y2 = 0")
                                                                                        (("1"
                                                                                          (split
                                                                                           -1)
                                                                                          (("1"
                                                                                            (case
                                                                                             "y1 > 0")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "xx1 > 0")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "xx2 >= 0")
                                                                                                    (("1"
                                                                                                      (field)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (case
                                                                                                       "xx2 = (y2 / y1) * xx1")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "pos_times_gt"
                                                                                                         ("x"
                                                                                                          "(y2 / y1)"
                                                                                                          "y"
                                                                                                          "xx1"))
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -2
                                                                                                           -1
                                                                                                           :dir
                                                                                                           RL)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (field)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (case
                                                                                                     "y1 = (xx1 / xx2) * y2")
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "pos_times_gt"
                                                                                                       ("x"
                                                                                                        "(xx1 / xx2)"
                                                                                                        "y"
                                                                                                        "y2"))
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -2
                                                                                                         -1
                                                                                                         :dir
                                                                                                         RL)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "y1 = 0")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (case
                                                                                                   "y2 = (xx2 / xx1) * y1")
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "pos_times_gt"
                                                                                                     ("x"
                                                                                                      "(xx2 / xx1)"
                                                                                                      "y"
                                                                                                      "y1"))
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -2
                                                                                                       -1
                                                                                                       :dir
                                                                                                       RL)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "pos_div_gt"
                                                                                                         ("x"
                                                                                                          "xx2"
                                                                                                          "n0y"
                                                                                                          "xx1"))
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("3"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (case
                                                                                           "xx1 * xx2 >= 0 OR y1 * y2 >= 0")
                                                                                          (("1"
                                                                                            (field)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (bash)
                                                                      (("2"
                                                                        (lemma
                                                                         "sq_plus_eq_0"
                                                                         ("a"
                                                                          "xx2"
                                                                          "b"
                                                                          "y2"))
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (lemma
                                                                 "sq_plus_eq_0"
                                                                 ("a"
                                                                  "xx2"
                                                                  "b"
                                                                  "y2"))
                                                                (("3"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (replace
                                                                 -1)
                                                                (("4"
                                                                  (case
                                                                   "y2 = 0 OR xx1 = 0")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (lemma
                                                                       "sq_eq_0"
                                                                       ("a"
                                                                        "y2 * xx1"))
                                                                      (("2"
                                                                        (use
                                                                         "zero_times3")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "sqrt((xx1 * xx1 + y1 * y1) * (xx2 * xx2 + y2 * y2))")
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (end_points_are_on_segment 0
  (end_points_are_on_segment-1 nil 3874129021
   ("" (skeep 1 t)
    (("" (split)
      (("1" (expand "is_point_on_segment?")
        (("1" (split)
          (("1" (grind) nil) ("2" (grind) nil)
           ("3"
            (name-replace "a" "vector_from_point_to_point(s`p1, s`p2)")
            (("3" (grind) nil)))))))
       ("2" (expand "is_point_on_segment?")
        (("2" (split)
          (("1" (grind) nil)
           ("2"
            (name-replace "a" "vector_from_point_to_point(s`p1, s`p2)")
            (("2" (grind) nil))))))))))
    nil)
   nil shostak))
 (one_parameter_min 0
  (one_parameter_min-1 nil 3874129021
   ("" (skeep)
    (("" (typepred "t")
      (("" (case "exists (d: real): b = a + d")
        (("1" (skeep)
          (("1" (replace -1)
            (("1" (assert)
              (("1" (move-terms 1 r 2)
                (("1" (mult-cases 1)
                  (("1" (claim "m = a" t)
                    (("1" (replace -1)
                      (("1" (cancel-by -7 "a") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (inst + "b-a") (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (one_parameter_max 0
  (one_parameter_max-1 nil 3874129021
   ("" (skeep)
    (("" (typepred "t")
      (("" (case "exists (d: real): b = a + d")
        (("1" (skeep)
          (("1" (replace -1)
            (("1" (assert)
              (("1" (move-terms 1 l 2)
                (("1" (mult-cases 1) (("1" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (inst + "b-a") (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (one_parameter_min_lt 0
  (one_parameter_min_lt-1 nil 3874129021
   ("" (skeep)
    (("" (typepred "t")
      (("" (case "exists (d: real): b = a + d")
        (("1" (skeep)
          (("1" (replace -1)
            (("1" (assert)
              (("1" (move-terms 1 r 2) (("1" (mult-cases 1) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (inst + "b-a") (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (one_parameter_max_lt 0
  (one_parameter_max_lt-1 nil 3874129021
   ("" (skeep)
    (("" (typepred "t")
      (("" (case "exists (d: real): b = a + d")
        (("1" (skeep)
          (("1" (replace -1)
            (("1" (assert)
              (("1" (move-terms 1 l 2) (("1" (mult-cases 1) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (inst + "b-a") (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (two_parameter_bounds 0
  (two_parameter_bounds-1 nil 3874129021
   ("" (skeep)
    (("" (typepred "a" "b")
      (("" (ground)
        (("1" (case "a = 0")
          (("1" (assert) nil nil)
           ("2" (div-by 2 "a")
            (("2" (rewrite "div_distributes" :dir rl)
              (("2" (real-props)
                (("2" (claim "b/a >= 0" nil)
                  (("1" (assert) nil nil) ("2" (cross-mult 1) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (case "exists (d: real): 0 <= d & d <= 1 & b = 1 - d")
          (("1" (skeep)
            (("1" (replace -3)
              (("1" (assert)
                (("1" (cancel 1)
                  (("1" (cancel 1)
                    (("1" (mult-cases 1 :mult-op 1*) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst + "1-b") (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (cross_diff_same 0
  (cross_diff_same-1 nil 3874129021
   ("" (skeep)
    (("" (expand "cross")
      (("" (move-terms -1 l 2)
        (("" (rewrite "pos_times_ge")
          (("" (rewrite "pos_times_ge")
            (("" (assert)
              (("" (split 3)
                (("1" (flatten)
                  (("1" (split -1)
                    (("1" (flatten)
                      (("1" (apply-extensionality 3 :hide? t)
                        (("1" (div-by -3 (! -3 r 2))
                          (("1" (use "neg_div_ge")
                            (("1" (replace -4)
                              (("1" (grind-reals) nil nil)) nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil)
                         ("2" (div-by -3 (! -3 l 2))
                          (("1" (use "neg_div_ge")
                            (("1" (replace -4 :dir rl)
                              (("1" (grind-reals) nil nil)) nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (apply-extensionality 3 :hide? t)
                        (("1" (div-by -3 (! -3 r 2))
                          (("1" (use "pos_div_ge")
                            (("1" (replace -4)
                              (("1" (grind-reals) nil nil)) nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil)
                         ("2" (div-by -3 (! -3 l 2))
                          (("1" (use "pos_div_ge")
                            (("1" (replace -4 :dir rl)
                              (("1" (grind-reals) nil nil)) nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split -1)
                    (("1" (flatten)
                      (("1" (apply-extensionality 4 :hide? t)
                        (("1" (div-by -3 (! -3 l 1))
                          (("1" (use "neg_div_ge")
                            (("1" (replace -4)
                              (("1" (grind-reals) nil nil)) nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil)
                         ("2" (div-by -3 (! -3 r 1))
                          (("1" (use "neg_div_ge")
                            (("1" (replace -4 :dir rl)
                              (("1" (grind-reals) nil nil)) nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (apply-extensionality 4 :hide? t)
                        (("1" (div-by -3 (! -3 l 1))
                          (("1" (use "pos_div_ge")
                            (("1" (replace -4)
                              (("1" (grind-reals) nil nil)) nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil)
                         ("2" (div-by -3 (! -3 r 1))
                          (("1" (use "pos_div_ge")
                            (("1" (replace -4 :dir rl)
                              (("1" (grind-reals) nil nil)) nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (sum_of_products_bound_left 0
  (sum_of_products_bound_left-1 nil 3874129021
   ("" (skeep)
    (("" (claim "0 > c * a and 0 >= d * b")
      (("1" (ground) nil nil)
       ("2" (split 1)
        (("1" (rewrite "neg_times_gt") (("1" (ground) nil nil)) nil)
         ("2" (rewrite "neg_times_ge")
          (("2" (rewrite* "pos_times_ge") (("2" (ground) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (sum_of_products_bound_right 0
  (sum_of_products_bound_right-1 nil 3874129021
   ("" (skeep)
    (("" (lemma "sum_of_products_bound_left")
      (("" (inst - "b" "a" "d" "c") (("" (ground) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (cross_diff_ratio_bounds_TCC1 0
  (cross_diff_ratio_bounds_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (cross_diff_ratio_bounds subtype "segments_2d.dq`x" "nznum"))
  (cross_diff_ratio_bounds_TCC1-1 nil 3874127254
   ("" (subtype-tcc) nil nil) nil nil
   (cross_diff_ratio_bounds subtype "segments_2d.dq`x" "nznum")))
 (cross_diff_ratio_bounds_TCC2 0
  (cross_diff_ratio_bounds_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (cross_diff_ratio_bounds subtype "segments_2d.dq`y" "nznum"))
  (cross_diff_ratio_bounds_TCC2-1 nil 3874127254
   ("" (subtype-tcc) nil nil) nil nil
   (cross_diff_ratio_bounds subtype "segments_2d.dq`y" "nznum")))
 (cross_diff_ratio_bounds 0
  (cross_diff_ratio_bounds-1 nil 3874129021
   ("" (skeep)
    (("" (lemma "cross_diff_same")
      (("" (inst - "p" "q" "v")
        (("" (assert)
          (("" (expand "cross")
            (("" (move-terms -4 l 2)
              (("" (assert)
                (("" (expand "*")
                  (("" (case "dq`x * dq`x + dq`y * dq`y > 0")
                    (("1" (lemma "sum_of_products_bound_left")
                      (("1" (inst - "dq`x" "dq`y" "dv`x" "dv`y")
                        (("1" (lemma "sum_of_products_bound_right")
                          (("1" (inst - "dq`x" "dq`y" "dv`x" "dv`y")
                            (("1" (split 3)
                              (("1"
                                (flatten)
                                (("1"
                                  (div-by -8 "dq`x")
                                  (("1"
                                    (replace -8 (-9 -10) :dir rl)
                                    (("1"
                                      (claim
                                       "%1 = dv`x / dq`x * (dq`x * dq`x + dq`y * dq`y)"
                                       (real-props)
                                       (! -9 r))
                                      (("1"
                                        (replace -1 (-10 -11) :hide? t)
                                        (("1"
                                          (div-by -9 (! -10 r))
                                          (("1"
                                            (div-by -10 (! -10 r))
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (div-by -8 "dq`y")
                                  (("1"
                                    (replace -8 (-9 -10))
                                    (("1"
                                      (claim
                                       "%1 = dv`y / dq`y * (dq`x * dq`x + dq`y * dq`y)"
                                       (real-props)
                                       (! -9 r))
                                      (("1"
                                        (replace -1 (-10 -11) :hide? t)
                                        (("1"
                                          (div-by -9 (! -10 r))
                                          (("1"
                                            (div-by -10 (! -10 r))
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-2 1 2))
                      (("2" (apply-extensionality 2 :hide? t)
                        (("1" (lemma "sq_gt_0")
                          (("1" (inst - "dq`x")
                            (("1" (lemma "sq_pos")
                              (("1"
                                (inst - "dq`y")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "sq_gt_0")
                          (("2" (inst - "dq`y")
                            (("2" (lemma "sq_pos")
                              (("2"
                                (inst - "dq`x")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (is_point_on_segment?_imp_point_on_segment? 0
  (is_point_on_segment?_imp_point_on_segment?-1 nil 3874129021
   ("" (skeep)
    (("" (expand* "is_point_on_segment?" "point_on_segment?")
      (("" (inst-cp + "0")
        (("" (assert)
          (("" (expand "are_vectors_collinear?")
            (("" (typepred "s`p2")
              (("" (flatten)
                (("" (rewrite* "vector_from_point_to_point_is_diff")
                  ((""
                    (lemma "cross_diff_ratio_bounds"
                     ("p" "s`p1" "q" "s`p2" "v" "p" "dq" "s`p2 - s`p1"
                      "dv" "p - s`p1"))
                    (("" (split -1)
                      (("1" (flatten)
                        (("1" (apply-extensionality 1 :hide? t)
                          (("1" (flatten)
                            (("1"
                              (inst +
                               "(p`x - s`p1`x) / (s`p2`x - s`p1`x)")
                              (("1"
                                (split +)
                                (("1"
                                  (expand "-")
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (expand "-")
                                  (("2" (propax) nil nil))
                                  nil)
                                 ("3"
                                  (expand "*" 1)
                                  (("3"
                                    (expand "+" 1)
                                    (("3"
                                      (apply-extensionality :hide? t)
                                      (("1"
                                        (move-terms 1 r 1)
                                        (("1"
                                          (elim-unary 1 r)
                                          (("1" (real-props) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (move-terms 1 r 1)
                                        (("2"
                                          (elim-unary 1 r)
                                          (("2"
                                            (expand "cross")
                                            (("2"
                                              (expand "-")
                                              (("2"
                                                (real-props)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (inst +
                             "(p`y - s`p1`y) / (s`p2`y - s`p1`y)")
                            (("2" (flatten)
                              (("2"
                                (split +)
                                (("1"
                                  (expand "-")
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (expand "-")
                                  (("2" (propax) nil nil))
                                  nil)
                                 ("3"
                                  (expand "*" 1)
                                  (("3"
                                    (expand "+" 1)
                                    (("3"
                                      (apply-extensionality :hide? t)
                                      (("1"
                                        (move-terms 1 r 1)
                                        (("1"
                                          (elim-unary 1 r)
                                          (("1"
                                            (real-props)
                                            (("1"
                                              (expand* "cross" "-")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (move-terms 1 r 1)
                                        (("2"
                                          (elim-unary 1 r)
                                          (("2" (real-props) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil) ("3" (grind) nil nil)
                       ("4" (propax) nil nil) ("5" (propax) nil nil)
                       ("6" (propax) nil nil) ("7" (grind) nil nil)
                       ("8" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (point_on_segment?_iff_is_point_on_segment? 0
  (point_on_segment?_iff_is_point_on_segment?-1 nil 3874129021
   ("" (skeep)
    (("" (ground)
      (("1"
        (expand* "point_on_segment?" "is_point_on_segment?"
         "are_vectors_collinear?" "vector_from_point_to_point" "cross"
         "*")
        (("1" (ground)
          (("1" (grind) nil nil)
           ("2" (skosimp*)
            (("2" (replace -3 :hide? t)
              (("2" (expand "+")
                (("2" (factor 1 r * :id? t)
                  (("2" (mult-cases 1)
                    (("2" (expand "id")
                      (("2"
                        (equate (! 1 r)
                         "sq(s`p1`x - s`p2`x) + sq(s`p1`y - s`p2`y)" t)
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skosimp*)
            (("3" (replace -3 :hide? t)
              (("3" (expand "+")
                (("3" (factor 1 l *)
                  (("3" (invoke (name-replace "E" $1s) (! 1 r))
                    (("3" (move-terms 1 l 1)
                      (("3" (factor 1 r *)
                        (("3" (mult-cases 1)
                          (("3" (expand "E")
                            (("3"
                              (equate (! 1 r)
                               "sq(s`p1`x - s`p2`x) + sq(s`p1`y - s`p2`y)"
                               t)
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "is_point_on_segment?_imp_point_on_segment?")
        (("2" (assert) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (end_points_are_on_segment_2 0
  (end_points_are_on_segment_2-1 nil 3874129021
   ("" (skeep 1 t)
    (("" (lemma "end_points_are_on_segment")
      (("" (inst -1 "s")
        (("" (use "point_on_segment?_iff_is_point_on_segment?")
          ((""
            (lemma "point_on_segment?_iff_is_point_on_segment?"
             ("p" "s`p2" "s" "s"))
            (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (p1_on_segment 0
  (p1_on_segment-1 nil 3874129021
   ("" (skeep)
    (("" (expand "point_on_segment?")
      (("" (inst + "0") (("" (assert) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (p2_on_segment 0
  (p2_on_segment-1 nil 3874129021
   ("" (skeep)
    (("" (expand "point_on_segment?")
      (("" (inst + "1") (("" (assert) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (mult_normalized_vec_by_lt_len_on_seg 0
  (mult_normalized_vec_by_lt_len_on_seg-1 nil 3874129021
   ("" (skeep 1 t)
    (("" (expand "point_on_segment?")
      (("" (inst 1 "d/length(s)")
        (("" (ground) (("1" (field) nil nil) ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (mult_normalized_vec_by_lt_len_on_seg2 0
  (mult_normalized_vec_by_lt_len_on_seg2-1 nil 3874129021
   ("" (skeep 1 t)
    (("" (expand "point_on_segment?")
      (("" (inst + "1 - d/length(s)")
        (("" (ground) (("1" (field) nil nil) ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (on_parallel_segment_on_ray 0
  (on_parallel_segment_on_ray-1 nil 3874129021
   ("" (skeep)
    (("" (expand "parallel?")
      (("" (expand "point_on_segment?")
        (("" (skeep*)
          (("" (expand "point_on_arb_ray?")
            (("" (case "nzk > 0")
              (("1" (move-terms -4 l 2)
                (("1" (hide 1)
                  (("1" (replace -4 :hide? t)
                    (("1" (move-terms -4 l 2)
                      (("1" (replace -4 :hide? t)
                        (("1" (inst + "(1-t)*nzk+d")
                          (("1" (grind-with-ext) nil nil)
                           ("2" (factor 1 l (2 3))
                            (("2" (case "nzk*(1-t) >= 0")
                              (("1" (assert) nil nil)
                               ("2" (mult-cases 1) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 3)
                (("2" (move-terms -3 l 2)
                  (("2" (replace -3 :hide? t)
                    (("2" (move-terms -3 l 2)
                      (("2" (move-terms -3 r 1)
                        (("2" (replace -3 :dir rl :hide? t)
                          (("2" (inst + "d-t*nzk")
                            (("1" (grind-with-ext) nil nil)
                             ("2" (move-terms 1 l 2)
                              (("2"
                                (assert)
                                (("2" (mult-cases 1) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (point_diff_start_parameter 0
  (point_diff_start_parameter-1 nil 3874129021 ("" (grind) nil nil) nil
   shostak))
 (parameter_eq_norm_ratio 0
  (parameter_eq_norm_ratio-1 nil 3874129021
   ("" (skeep)
    (("" (expand "norm")
      (("" (replace -1 :hide? t)
        (("" (rewrite "point_diff_start_parameter")
          (("" (rewrite "sqv_scal")
            (("" (rewrite "sqrt_times") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (parameter_eq_diff_ratio_x 0
  (parameter_eq_diff_ratio_x-1 nil 3874129021 ("" (grind) nil nil) nil
   shostak))
 (parameter_eq_diff_ratio_y 0
  (parameter_eq_diff_ratio_y-1 nil 3874129021 ("" (grind) nil nil) nil
   shostak))
 (parameters_lt_iff_norms_lt 0
  (parameters_lt_iff_norms_lt-1 nil 3874129021
   ("" (skeep)
    (("" (typepred "t1" "t2" "s`p2")
      (("" (rewrite "norm_lt_sqv")
        (("" (replace -6 :hide? t)
          (("" (replace -6 :hide? t)
            (("" (rewrite* "point_diff_start_parameter")
              (("" (rewrite* "sqv_scal")
                (("" (rewrite "both_sides_times_pos_lt1")
                  (("1" (rewrite "sq_lt") (("1" (assert) nil nil)) nil)
                   ("2" (rewrite "v_neq_zero" :dir rl)
                    (("2" (ground)
                      (("2" (rewrite "sub_eq_zero") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (opposite_endpoint_TCC1 0
  (opposite_endpoint_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (opposite_endpoint subtype "segments_2d.s`p2"
    "(segments_2d.segment_endpoint?(segments_2d.s))"))
  (opposite_endpoint_TCC1-1 nil 3874127254 ("" (subtype-tcc) nil nil)
   nil nil
   (opposite_endpoint subtype "segments_2d.s`p2"
    "(segments_2d.segment_endpoint?(segments_2d.s))")))
 (opposite_endpoint_TCC2 0
  (opposite_endpoint_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (opposite_endpoint subtype "segments_2d.s`p1"
    "(segments_2d.segment_endpoint?(segments_2d.s))"))
  (opposite_endpoint_TCC2-1 nil 3874127254 ("" (subtype-tcc) nil nil)
   nil nil
   (opposite_endpoint subtype "segments_2d.s`p1"
    "(segments_2d.segment_endpoint?(segments_2d.s))")))
 (reverse_reverse_segment 0
  (reverse_reverse_segment-1 nil 3874129021
   ("" (skeep)
    (("" (expand "reverse_segment")
      (("" (apply-extensionality :hide? t) nil nil)) nil))
    nil)
   nil shostak))
 (reverse_segment_endpoint 0
  (reverse_segment_endpoint-1 nil 3874129021 ("" (grind) nil nil) nil
   shostak))
 (point_on_reverse_segment 0
  (point_on_reverse_segment-1 nil 3874129021
   ("" (skeep)
    (("" (expand "reverse_segment")
      (("" (expand "point_on_segment?")
        (("" (ground)
          (("1" (skeep)
            (("1" (inst + "1-t")
              (("1" (assert)
                (("1" (replace -3) (("1" (grind) nil nil)) nil)) nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (inst + "1-t")
              (("2" (assert)
                (("2" (replace -3) (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (reverse_segment_same_length 0
  (reverse_segment_same_length-1 nil 3874129021 ("" (grind) nil nil)
   nil shostak))
 (opposite_opposite_endpoint 0
  (opposite_opposite_endpoint-1 nil 3874129021
   ("" (skeep + t) (("" (grind) nil nil)) nil) nil shostak))
 (opposite_endpoint_reverse_segment_TCC1 0
  (opposite_endpoint_reverse_segment_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (opposite_endpoint_reverse_segment subtype "segments_2d.u"
    "(segments_2d.segment_endpoint?(segments_2d.reverse_segment(segments_2d.s)))"))
  (opposite_endpoint_reverse_segment_TCC1-1 nil 3874127254
   ("" (subtype-tcc) nil nil) nil nil
   (opposite_endpoint_reverse_segment subtype "segments_2d.u"
    "(segments_2d.segment_endpoint?(segments_2d.reverse_segment(segments_2d.s)))")))
 (opposite_endpoint_reverse_segment 0
  (opposite_endpoint_reverse_segment-1 nil 3874129021
   ("" (skeep + t) (("" (grind) nil nil)) nil) nil shostak))
 (point_on_either_segment_TCC1 0
  (point_on_either_segment_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (point_on_either_segment subtype "segments_2d.v"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d.u}"))
  (point_on_either_segment_TCC1-1 nil 3874127254
   ("" (subtype-tcc) nil nil) nil nil
   (point_on_either_segment subtype "segments_2d.v"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d.u}")))
 (point_on_either_segment 0
  (point_on_either_segment-1 nil 3874129021
   ("" (skeep + t)
    (("" (expand "segment_endpoint?")
      (("" (expand "opposite_endpoint")
        (("" (lift-if)
          (("" (split -1)
            (("1" (assert)
              (("1" (case "(# p1 := s`p1, p2 := s`p2 #) = s")
                (("1" (replace -2)
                  (("1" (replace -3)
                    (("1" (replace -1) (("1" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1) (("2" (grind-with-ext) nil nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (replace -1)
                (("2" (replace -2)
                  (("2" (rewrite "point_on_reverse_segment" :dir rl)
                    (("2" (expand "reverse_segment")
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (segment_endpoint_diff_choices 0
  (segment_endpoint_diff_choices-1 nil 3874129021
   ("" (skeep + t) (("" (grind) nil nil)) nil) nil shostak))
 (collinear_impl_equals_collinear? 0
  (collinear_impl_equals_collinear?-1 nil 3874129021
   ("" (grind) nil nil) nil shostak))
 (collinear_alt_TCC1 0
  (collinear_alt_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (typepred "s1`p2")
      (("" (grind)
        (("" (case "s1`p1`x = s1`p2`x AND s1`p1`y = s1`p2`y")
          (("1" (flatten)
            (("1" (grind) (("1" (apply-extensionality) nil nil)) nil))
            nil)
           ("2" (expand "zero")
            (("2" (flatten) (("2" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (collinear_alt subtype
    "(vectors_2D.-)(segments_2d.s1`p2, segments_2d.s1`p1)"
    "{p: vectors_cross_2d.point_2d | p /= vectors_cross_2d.zero_point}"))
  (collinear_alt_TCC1-1 nil 3874127254 ("" (subtype-tcc) nil nil) nil
   nil
   (collinear_alt subtype
    "(vectors_2D.-)(segments_2d.s1`p2, segments_2d.s1`p1)"
    "{p: vectors_cross_2d.point_2d | p /= vectors_cross_2d.zero_point}")))
 (collinear_alt_TCC2 0
  (collinear_alt_TCC2-2 nil 3874129021
   ("" (skeep 1 t)
    (("" (expand* "zero_point" "zero")
      (("" (typepred "s2`p2")
        (("" (hide -2)
          (("" (grind) (("" (apply-extensionality) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (collinear_alt subtype
    "(vectors_2D.-)(segments_2d.s2`p2, segments_2d.s2`p1)"
    "{p: vectors_cross_2d.point_2d | p /= vectors_cross_2d.zero_point}"))
  (collinear_alt_TCC2-1 nil 3874127254 ("" (subtype-tcc) nil nil) nil
   nil
   (collinear_alt subtype
    "(vectors_2D.-)(segments_2d.s2`p2, segments_2d.s2`p1)"
    "{p: vectors_cross_2d.point_2d | p /= vectors_cross_2d.zero_point}")))
 (collinear_reflexive 0
  (collinear_reflexive-1 nil 3874129021 ("" (grind) nil nil) nil
   shostak))
 (collinear_symmetric_helper 0
  (collinear_symmetric_helper-1 nil 3874129021
   ("" (skeep)
    (("" (split)
      (("1" (case "w = x")
        (("1" (replace -1)
          (("1" (case "x - y = 0 AND x - z = 0")
            (("1" (flatten) (("1" (grind) nil)))
             ("2" (split)
              (("1"
                (case "a * x + c * x + b * y - a * y - b * x - c * x = (x - y) * (a - b)")
                (("1" (replace -1)
                  (("1" (hide -1 -2 -5 2)
                    (("1" (name-replace "g" "x - y")
                      (("1" (grind) nil)))))))
                 ("2" (grind) nil)))
               ("2"
                (case "a * x + d * x + b * z - a * z - b * x - d * x = (x - z) * (a - b)")
                (("1" (replace -1)
                  (("1" (hide -1 -2 -4 2)
                    (("1" (name-replace "v" "x - z")
                      (("1" (grind) nil)))))))
                 ("2" (grind) nil)))))))))
         ("2" (both-sides "*" "z - w" -2)
          (("1" (both-sides "*" "y - w" -3)
            (("1"
              (case "(a * x + d * w + b * z - a * z - b * w - d * x) * (y - w) - (a * x + c * w + b * y - a * y - b * w - c * x) * (z - w) = 0")
              (("1" (hide-all-but (-1 1 2))
                (("1"
                  (case "(w - x) * (a * (z - y) + c * (w - z) + d * (y - w)) = 0")
                  (("1"
                    (case "(a * (z - y) + c * (w - z) + d * (y - w)) = 0")
                    (("1" (hide-all-but (-1 2)) (("1" (grind) nil)))
                     ("2" (hide-all-but (-1 1 2))
                      (("2" (use "zero_times3")
                        (("2" (grind) nil)))))))
                   ("2" (grind) nil)))))
               ("2" (grind) nil)))
             ("2" (grind) nil)))
           ("2" (grind) nil)))))
       ("2" (both-sides "*" "z - w" -2)
        (("1" (both-sides "*" "y - w" -3)
          (("1"
            (case "(a * x + d * w + b * z - a * z - b * w - d * x) * (y - w) - (a * x + c * w + b * y - a * y - b * w - c * x) * (z - w) = 0")
            (("1" (hide-all-but (-1 -2 1))
              (("1"
                (case "(w - x) * (a * (z - y) + c * (w - z) + d * (y - w)) = 0")
                (("1"
                  (case "(a * (z - y) + c * (w - z) + d * (y - w)) = 0")
                  (("1" (hide-all-but (-1 1)) (("1" (grind) nil)))
                   ("2" (hide-all-but (-1 -3 1))
                    (("2" (use "zero_times3") (("2" (grind) nil)))))))
                 ("2" (grind) nil)))))
             ("2" (grind) nil)))
           ("2" (grind) nil)))
         ("2" (grind) nil))))))
    nil)
   nil shostak))
 (collinear_symmetric_half 0
  (collinear_symmetric_half-1 nil 3874129021
   ("" (skeep)
    (("" (typepred "s1`p2")
      (("" (expand* "collinear?" "are_points_collinear?")
        (("" (flatten)
          (("" (split)
            (("1" (grind)
              (("1"
                (name-replace*
                 ("a" "s1`p1`x" "b" "s1`p2`x" "c" "s2`p1`x" "d"
                  "s2`p2`x" "w" "s1`p1`y" "x" "s1`p2`y" "y" "s2`p1`y"
                  "z" "s2`p2`y"))
                (("1"
                  (lemma "collinear_symmetric_helper"
                   ("a" "a" "b" "b" "c" "c" "d" "d" "w" "w" "x" "x" "y"
                    "y" "z" "z"))
                  (("1" (case "a /= b OR w /= x")
                    (("1" (assert) nil)
                     ("2" (hide-all-but (1 3))
                      (("2" (expand* "a" "b" "w" "x")
                        (("2" (apply-extensionality 2) nil)))))))))))))
             ("2" (grind)
              (("2"
                (name-replace*
                 ("a" "s1`p1`x" "b" "s1`p2`x" "c" "s2`p1`x" "d"
                  "s2`p2`x" "w" "s1`p1`y" "x" "s1`p2`y" "y" "s2`p1`y"
                  "z" "s2`p2`y"))
                (("2"
                  (lemma "collinear_symmetric_helper"
                   ("a" "b" "b" "a" "c" "c" "d" "d" "w" "-x" "x" "-w"
                    "y" "-y" "z" "-z"))
                  (("2" (case "a /= b OR w /= x")
                    (("1" (grind) nil)
                     ("2" (hide-all-but (1 3))
                      (("2" (expand* "a" "b" "w" "x")
                        (("2" (apply-extensionality 2)
                          nil))))))))))))))))))))))
    nil)
   nil shostak))
 (collinear_symmetric 0
  (collinear_symmetric-1 nil 3874129021
   ("" (skeep 1 t)
    (("" (iff)
      (("" (split)
        (("1" (lemma "collinear_symmetric_half" ("s1" "s1" "s2" "s2"))
          (("1" (propax) nil)))
         ("2" (lemma "collinear_symmetric_half" ("s1" "s2" "s2" "s1"))
          (("2" (propax) nil))))))))
    nil)
   nil shostak))
 (collinear_impl_symmetric 0
  (collinear_impl_symmetric-1 nil 3874129021
   ("" (skeep 1 t)
    (("" (use "collinear_impl_equals_collinear?")
      ((""
        (lemma "collinear_impl_equals_collinear?"
         ("s2" "s1" "s1" "s2"))
        (("" (replace -1)
          (("" (replace -2) (("" (use "collinear_symmetric") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (collinear_reverse 0
  (collinear_reverse-1 nil 3874129021
   ("" (skeep)
    (("" (expand "reverse_segment")
      (("" (expand "collinear?") (("" (grind) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (collinear_as_parallel_with_p1_on_line 0
  (collinear_as_parallel_with_p1_on_line-1 nil 3874129021
   ("" (skeep)
    (("" (ground)
      (("1" (expand "collinear?")
        (("1" (flatten)
          (("1" (expand "are_points_collinear?")
            (("1" (rewrite* "vector_from_point_to_point_is_diff")
              (("1" (expand "are_vectors_collinear?")
                (("1" (rewrite "parallel_equiv_cross_eq_0")
                  (("1" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "collinear?")
        (("2" (flatten)
          (("2" (expand "are_points_collinear?")
            (("2" (rewrite* "vector_from_point_to_point_is_diff")
              (("2" (expand "are_vectors_collinear?")
                (("2" (case-replace "e`p1 = s`p1")
                  (("1" (inst + "0") (("1" (assert) nil nil)) nil)
                   ("2" (rewrite "parallel_equiv_cross_eq_0" :dir rl)
                    (("2" (rewrite "parallel_symm")
                      (("2" (expand "parallel?")
                        (("2" (skeep)
                          (("2" (inst + "nzk")
                            (("2" (replace -1 :dir rl)
                              (("2"
                                (hide-all-but 2)
                                (("2" (grind-with-ext) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand "collinear?")
        (("3" (expand "are_points_collinear?")
          (("3" (rewrite* "vector_from_point_to_point_is_diff")
            (("3" (expand "are_vectors_collinear?")
              (("3" (skeep)
                (("3" (replace -2)
                  (("3" (assert)
                    (("3" (rewrite "cross_scales_2")
                      (("3" (rewrite "cross_self_zero")
                        (("3" (assert)
                          (("3"
                            (equate "e`p2 - (s`p1 + k * (s`p2 - s`p1))"
                             "(e`p2 - s`p1) - k * (s`p2 - s`p1)")
                            (("1" (rewrite "parallel_equiv_cross_eq_0")
                              (("1"
                                (rewrite "cross_distrib_sub_2")
                                (("1"
                                  (rewrite "cross_scales_2")
                                  (("1"
                                    (rewrite "cross_self_zero")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -1)
                                (("2"
                                  (rewrite "cross_scales_2")
                                  (("2"
                                    (rewrite "cross_self_zero")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (collinear_transitive 0
  (collinear_transitive-1 nil 3874129021
   ("" (skeep)
    (("" (rewrite* "collinear_as_parallel_with_p1_on_line")
      (("" (flatten)
        (("" (skeep*)
          (("" (lemma "parallel_trans")
            ((""
              (inst - "s1`p2 - s1`p1" "s2`p2 - s2`p1" "s3`p2 - s3`p1")
              (("" (assert)
                (("" (replace -5 1 :hide? t)
                  (("" (rewrite "parallel_symm" -2)
                    (("" (expand "parallel?" -2)
                      (("" (skeep)
                        (("" (replace -2 1)
                          (("" (replace -3 1)
                            (("" (inst + "k + k!1 * nzk")
                              ((""
                                (hide-all-but 1)
                                (("" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (collinear_parallel 0
  (collinear_parallel-1 nil 3874129021
   ("" (skeep)
    (("" (use "collinear_as_parallel_with_p1_on_line")
      (("" (ground) nil nil)) nil))
    nil)
   nil shostak))
 (segment_intersect_kernel_TCC1 0
  (segment_intersect_kernel_TCC1-2 nil 3874129021
   ("" (skeep* 1 t)
    (("" (lemma "nondegen_self_dot_product_pos" ("ndv" "r"))
      (("1" (hide-all-but (-1 1)) (("1" (assert) nil nil)) nil)
       ("2" (hide -) (("2" (grind) nil nil)) nil))
      nil))
    nil)
   nil shostak
   (segment_intersect_kernel subtype
    "vectors_2D.*(segments_2d.r, segments_2d.r)" "nnreal"))
  (segment_intersect_kernel_TCC1-1 nil 3874127254
   ("" (subtype-tcc) nil nil) nil nil
   (segment_intersect_kernel subtype
    "vectors_2D.*(segments_2d.r, segments_2d.r)" "nnreal")))
 (segment_intersect_kernel_TCC2 0
  (segment_intersect_kernel_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (segment_intersect_kernel subtype "segments_2d.r_cross_s" "nznum"))
  (segment_intersect_kernel_TCC2-1 nil 3874127254
   ("" (subtype-tcc) nil nil) nil nil
   (segment_intersect_kernel subtype "segments_2d.r_cross_s" "nznum")))
 (segment_intersect_regression_TCC1 0
  (segment_intersect_regression_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (segment_intersect_regression subtype "segments_2d.x`p1`1" "real"))
  (segment_intersect_regression_TCC1-1 nil 3874127254
   ("" (subtype-tcc) nil nil) nil nil
   (segment_intersect_regression subtype "segments_2d.x`p1`1" "real")))
 (segment_intersect_regression_TCC2 0
  (segment_intersect_regression_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (segment_intersect_regression subtype
    "(LAMBDA (x: [# p1: [numfield, real], p2: [real, real] #]): (# p1 := (# x := segments_2d.x`p1`1, y := segments_2d.x`p1`2 #), p2 := (# x := segments_2d.x`p2`1, y := segments_2d.x`p2`2 #) #))((# p1 := ((number_fields.-)(1), 0), p2 := (1, 0) #))"
    "segment_2d"))
  (segment_intersect_regression_TCC2-1 nil 3874127254
   ("" (subtype-tcc) nil nil) nil nil
   (segment_intersect_regression subtype
    "(LAMBDA (x: [# p1: [numfield, real], p2: [real, real] #]): (# p1 := (# x := segments_2d.x`p1`1, y := segments_2d.x`p1`2 #), p2 := (# x := segments_2d.x`p2`1, y := segments_2d.x`p2`2 #) #))((# p1 := ((number_fields.-)(1), 0), p2 := (1, 0) #))"
    "segment_2d")))
 (segment_intersect_regression_TCC3 0
  (segment_intersect_regression_TCC3-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (segment_intersect_regression subtype "segments_2d.x`p1`1" "real"))
  (segment_intersect_regression_TCC3-1 nil 3874127254
   ("" (subtype-tcc) nil nil) nil nil
   (segment_intersect_regression subtype "segments_2d.x`p1`1" "real")))
 (segment_intersect_regression_TCC4 0
  (segment_intersect_regression_TCC4-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (segment_intersect_regression subtype
    "(LAMBDA (x: [# p1: [numfield, real], p2: [real, real] #]): (# p1 := (# x := segments_2d.x`p1`1, y := segments_2d.x`p1`2 #), p2 := (# x := segments_2d.x`p2`1, y := segments_2d.x`p2`2 #) #))((# p1 := ((number_fields.-)(2), 0), p2 := (2, 0) #))"
    "segment_2d"))
  (segment_intersect_regression_TCC4-1 nil 3874127254
   ("" (subtype-tcc) nil nil) nil nil
   (segment_intersect_regression subtype
    "(LAMBDA (x: [# p1: [numfield, real], p2: [real, real] #]): (# p1 := (# x := segments_2d.x`p1`1, y := segments_2d.x`p1`2 #), p2 := (# x := segments_2d.x`p2`1, y := segments_2d.x`p2`2 #) #))((# p1 := ((number_fields.-)(2), 0), p2 := (2, 0) #))"
    "segment_2d")))
 (segment_intersect_regression 0
  (segment_intersect_regression-1 nil 3874129021
   ("" (assert)
    ((""
      (case "forall (p, q: point_2d): vector_from_point_to_point(p, q) = q - p")
      (("1" (expand "segment_intersect_kernel")
        (("1" (rewrite -1)
          (("1" (rewrite -1)
            (("1" (lift-if)
              (("1" (assert)
                (("1" (ground)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)
                   ("3" (grind) nil nil) ("4" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2) (("2" (skeep) (("2" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak))
 (r_cross_s_anticommutative 0
  (r_cross_s_anticommutative-1 nil 3874129021 ("" (grind) nil nil) nil
   shostak))
 (parallel_commutative 0
  (parallel_commutative-1 nil 3874129021
   ("" (skeep 1 t)
    (("" (expand* "parallel?" "segment_intersect_kernel")
      (("" (iff)
        (("" (apply (repeat (lift-if)))
          (("" (split)
            (("1" (flatten)
              (("1" (assert)
                (("1" (split)
                  (("1" (propax) nil nil)
                   ("2" (flatten)
                    (("2" (split)
                      (("1" (use "r_cross_s_anticommutative")
                        (("1" (grind) nil nil)) nil)
                       ("2" (split)
                        (("1" (flatten)
                          (("1"
                            (lemma "collinear_impl_symmetric"
                             ("s1" "s" "s2" "e"))
                            (("1" (grind) nil nil)) nil))
                          nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (split)
                (("1" (assert)
                  (("1" (split)
                    (("1" (propax) nil nil)
                     ("2" (flatten)
                      (("2" (split)
                        (("1" (assert) nil nil)
                         ("2" (assert)
                          (("2" (split)
                            (("1" (use "r_cross_s_anticommutative")
                              (("1" (grind) nil nil)) nil)
                             ("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (split)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (split)
                        (("1" (flatten)
                          (("1"
                            (lemma "collinear_impl_symmetric"
                             ("s1" "s" "s2" "e"))
                            (("1" (grind) nil nil)) nil))
                          nil)
                         ("2" (flatten)
                          (("2" (split)
                            (("1" (use "r_cross_s_anticommutative")
                              (("1" (grind) nil nil)) nil)
                             ("2" (split)
                              (("1" (propax) nil nil)
                               ("2"
                                (split)
                                (("1"
                                  (use "r_cross_s_anticommutative")
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (split)
                        (("1" (propax) nil nil)
                         ("2" (flatten)
                          (("2" (split)
                            (("1" (assert) nil nil)
                             ("2" (split)
                              (("1"
                                (flatten)
                                (("1" (grind) nil nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (parallel_reverse 0
  (parallel_reverse-1 nil 3874129021
   ("" (skeep 1 t)
    (("" (expand* "parallel?" "segment_intersect_kernel")
      (("" (iff)
        (("" (apply (repeat (lift-if)))
          (("" (expand "vector_from_point_to_point")
            (("" (expand "reverse_segment")
              (("" (split)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                  nil)
                 ("2" (flatten) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (parallel_defs_almost_same 0
  (parallel_defs_almost_same-1 nil 3874129021
   ("" (skeep 1 t)
    (("" (typepred "s`p2" "e`p2")
      (("" (iff)
        (("" (expand* "parallel?" "collinear?")
          (("" (split)
            (("1" (flatten)
              (("1" (skeep -1 t)
                (("1" (expand "segment_intersect_kernel")
                  (("1" (apply (repeat (lift-if)))
                    (("1" (assert)
                      (("1" (split)
                        (("1" (grind) nil nil)
                         ("2" (flatten)
                          (("2" (split)
                            (("1" (grind)
                              (("1"
                                (case-replace
                                 "s`p2`x = s`p1`x + e`p2`x * nzk - e`p1`x * nzk"
                                 :hide?
                                 T)
                                (("1"
                                  (case-replace
                                   "s`p2`y = s`p1`y + e`p2`y * nzk - e`p1`y * nzk"
                                   :hide?
                                   T)
                                  (("1" (grind) nil nil)
                                   ("2" (grind) nil nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil)
                               ("2"
                                (case-replace
                                 "s`p2`x = s`p1`x + e`p2`x * nzk - e`p1`x * nzk"
                                 :hide?
                                 T)
                                (("1"
                                  (case-replace
                                   "s`p2`y = s`p1`y + e`p2`y * nzk - e`p1`y * nzk"
                                   :hide?
                                   T)
                                  (("1" (grind) nil nil)
                                   ("2" (grind) nil nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (split)
                              (("1" (propax) nil nil)
                               ("2"
                                (split)
                                (("1"
                                  (case
                                   "s`p2`x = s`p1`x + e`p2`x * nzk - e`p1`x * nzk")
                                  (("1"
                                    (case
                                     "s`p2`y = s`p1`y + e`p2`y * nzk - e`p1`y * nzk")
                                    (("1" (grind) nil nil)
                                     ("2" (grind) nil nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (split)
                (("1" (expand "segment_intersect_kernel")
                  (("1" (apply (repeat (lift-if)))
                    (("1" (assert)
                      (("1" (split)
                        (("1" (propax) nil nil)
                         ("2" (flatten)
                          (("2" (split)
                            (("1" (assert) nil nil)
                             ("2" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "cross" -1)
                                  (("1"
                                    (expand
                                     "vector_from_point_to_point")
                                    (("1"
                                      (case "e`p2`x = e`p1`x")
                                      (("1"
                                        (inst
                                         3
                                         "(s`p2`y - s`p1`y) / (e`p2`y - e`p1`y)")
                                        (("1"
                                          (grind)
                                          (("1" (field) nil nil)
                                           ("2"
                                            (case-replace
                                             "e`p1`y * s`p1`x + e`p2`y * s`p2`x - e`p1`y * s`p2`x - e`p2`y * s`p1`x = (e`p1`y - e`p2`y) * (s`p1`x - s`p2`x)")
                                            (("1"
                                              (use "zero_times3")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (apply-extensionality
                                                   4)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (grind)
                                          (("2"
                                            (case-replace
                                             "s`p2`y = s`p1`y")
                                            (("1"
                                              (grind)
                                              (("1"
                                                (case-replace
                                                 "e`p1`y * s`p1`x + e`p2`y * s`p2`x - e`p1`y * s`p2`x - e`p2`y * s`p1`x = (e`p1`y - e`p2`y) * (s`p1`x - s`p2`x)")
                                                (("1"
                                                  (use "zero_times3")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (apply-extensionality
                                                       3)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (grind)
                                          (("3"
                                            (case-replace
                                             "e`p2`y = e`p1`y")
                                            (("1"
                                              (apply-extensionality 3)
                                              nil
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst
                                         4
                                         "(s`p2`x - s`p1`x) / (e`p2`x - e`p1`x)")
                                        (("1"
                                          (hide 2 3)
                                          (("1"
                                            (apply-extensionality 2)
                                            (("1"
                                              (grind)
                                              (("1" (field) nil nil))
                                              nil)
                                             ("2"
                                              (case-replace
                                               "(s`p2`x - s`p1`x) / (e`p2`x - e`p1`x) = (s`p2`y - s`p1`y) / (e`p2`y - e`p1`y)"
                                               :hide?
                                               T)
                                              (("1"
                                                (grind)
                                                (("1" (field) nil nil))
                                                nil)
                                               ("2" (grind) nil nil)
                                               ("3"
                                                (case-replace
                                                 "e`p2`y = e`p1`y")
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (case-replace
                                                     "s`p2`x = s`p1`x")
                                                    (("1"
                                                      (grind)
                                                      (("1"
                                                        (case-replace
                                                         "e`p1`x * s`p2`y + e`p2`x * s`p1`y - e`p1`x * s`p1`y - e`p2`x * s`p2`y = (e`p1`x - e`p2`x) * (s`p1`y - s`p2`y)")
                                                        (("1"
                                                          (use
                                                           "zero_times3")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case-replace
                                                       "e`p1`x * s`p2`y + e`p2`x * s`p1`y - e`p1`x * s`p1`y - e`p2`x * s`p2`y = (e`p1`x - e`p2`x) * (s`p1`y - s`p2`y)")
                                                      (("1"
                                                        (use
                                                         "zero_times3")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case-replace
                                           "s`p2`x = s`p1`x")
                                          (("1"
                                            (grind)
                                            (("1"
                                              (case-replace
                                               "e`p1`x * s`p2`y + e`p2`x * s`p1`y - e`p1`x * s`p1`y - e`p2`x * s`p2`y = (e`p1`x - e`p2`x) * (s`p2`y - s`p1`y)")
                                              (("1"
                                                (use "zero_times3")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2" (field) nil nil))
                                          nil)
                                         ("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst 1 "(s`p2`x - s`p1`x) / (e`p2`x - e`p1`x)")
                  (("1" (grind) (("1" (field) nil nil)) nil)
                   ("2" (grind)
                    (("2" (case-replace "s`p2`x = s`p1`x")
                      (("1" (grind)
                        (("1"
                          (case-replace
                           "e`p1`x * s`p1`y + s`p1`x * s`p2`y - e`p1`x * s`p2`y - s`p1`y * s`p1`x = (e`p1`x - s`p1`x) * (s`p1`y - s`p2`y)")
                          (("1" (use "zero_times3")
                            (("1" (assert)
                              (("1"
                                (split)
                                (("1"
                                  (case-replace "e`p1`x = s`p1`x")
                                  (("1"
                                    (grind)
                                    (("1"
                                      (case-replace
                                       "e`p2`x * s`p1`y + s`p1`x * s`p2`y - e`p2`x * s`p2`y - s`p1`y * s`p1`x = (e`p2`x - s`p1`x) * (s`p1`y - s`p2`y)")
                                      (("1"
                                        (use "zero_times3")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split)
                                            (("1"
                                              (case-replace
                                               "e`p2`x = s`p1`x")
                                              (("1"
                                                (grind)
                                                (("1"
                                                  (reveal 1)
                                                  (("1"
                                                    (inst
                                                     1
                                                     "(e`p2`y - e`p1`y) / (s`p2`y - s`p1`y)")
                                                    (("1"
                                                      (grind)
                                                      (("1"
                                                        (field)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (apply-extensionality
                                                       2)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (apply-extensionality
                                                       1)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil)
                                             ("2"
                                              (apply-extensionality 1)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (apply-extensionality 1)
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil)
                   ("3" (reveal 1)
                    (("3"
                      (inst 1 "(s`p2`y - s`p1`y) / (e`p2`y - e`p1`y)")
                      (("1" (grind)
                        (("1" (case-replace "e`p2`x = e`p1`x")
                          (("1" (grind) (("1" (field) nil nil)) nil)
                           ("2" (grind) nil nil))
                          nil)
                         ("2" (case-replace "e`p2`x = e`p1`x")
                          (("1" (grind)
                            (("1"
                              (case "(s`p2`y - s`p1`y) * (e`p2`y - e`p2`y) = 0")
                              (("1"
                                (apply-extensionality 3)
                                (("1"
                                  (case-replace "s`p2`y = s`p1`y")
                                  (("1"
                                    (grind)
                                    (("1"
                                      (case-replace
                                       "e`p1`y * s`p2`x + s`p1`x * s`p1`y - e`p1`y * s`p1`x - s`p1`y * s`p2`x = (e`p1`y - s`p1`y) * (s`p2`x - s`p1`x)")
                                      (("1"
                                        (use "zero_times3")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case-replace
                                             "e`p1`y = s`p1`y")
                                            (("1"
                                              (grind)
                                              (("1"
                                                (case-replace
                                                 "e`p2`y * s`p2`x + s`p1`x * s`p1`y - e`p2`y * s`p1`x - s`p1`y * s`p2`x = (e`p2`y - s`p1`y) * (s`p2`x - s`p1`x)")
                                                (("1"
                                                  (use "zero_times3")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (reveal 1)
                                    (("2"
                                      (inst
                                       1
                                       "(s`p2`y - s`p1`y) * (e`p2`y - e`p1`y)")
                                      (("1"
                                        (field)
                                        (("1"
                                          (split)
                                          (("1"
                                            (grind)
                                            (("1"
                                              (case
                                               "e`p1`x * (s`p1`y - s`p2`y) + s`p1`x * s`p2`y - s`p2`x * s`p1`y = e`p2`y * (s`p1`x - s`p2`x)")
                                              (("1"
                                                (case
                                                 "e`p1`x * (s`p1`y - s`p2`y) + s`p1`x * s`p2`y - s`p2`x * s`p1`y = e`p1`y * (s`p1`x - s`p2`x)")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (case
                                                     "(e`p1`y - e`p2`y) * (s`p1`x - s`p2`x) = 0")
                                                    (("1"
                                                      (use
                                                       "zero_times3")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case
                                             "e`p1`x * (s`p1`y - s`p2`y) + s`p1`x * s`p2`y - s`p2`x * s`p1`y = e`p2`y * (s`p1`x - s`p2`x)")
                                            (("1"
                                              (case
                                               "e`p1`x * (s`p1`y - s`p2`y) + s`p1`x * s`p2`y - s`p2`x * s`p1`y = e`p1`y * (s`p1`x - s`p2`x)")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (case
                                                   "(e`p1`y - e`p2`y) * (s`p1`x - s`p2`x) = 0")
                                                  (("1"
                                                    (use "zero_times3")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case
                                         "(e`p1`y - e`p2`y) * (s`p1`y - s`p2`y) = 0")
                                        (("1"
                                          (use "zero_times3")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (bash)
                        (("2" (case "s`p2`y = s`p1`y")
                          (("1" (grind)
                            (("1"
                              (case "(e`p1`y - s`p1`y) * (s`p2`x - s`p1`x) = 0")
                              (("1"
                                (use "zero_times3")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split)
                                    (("1"
                                      (case-replace "e`p1`y = s`p1`y")
                                      (("1"
                                        (grind)
                                        (("1"
                                          (case
                                           "(e`p2`y - s`p1`y) * (s`p2`x - s`p1`x) = 0")
                                          (("1"
                                            (use "zero_times3")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split)
                                                (("1"
                                                  (case-replace
                                                   "e`p2`y = s`p1`y")
                                                  (("1"
                                                    (grind)
                                                    (("1"
                                                      (apply-extensionality
                                                       2)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case-replace
                                                   "s`p2`x = s`p1`x")
                                                  (("1"
                                                    (grind-with-ext)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (apply-extensionality 1)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("3" (apply-extensionality 4) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (segment_intersect_calc_alt_support 0
  (segment_intersect_calc_alt_support-1 nil 3874129021
   ("" (apply (branch (grind) ((field)))) nil nil) nil shostak))
 (overlapping_y_axis_segments_are_collinear_overlapping_TCC1 0
  (overlapping_y_axis_segments_are_collinear_overlapping_TCC1-2 nil
   3874129021 ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   nil shostak
   (overlapping_y_axis_segments_are_collinear_overlapping subtype
    "segments_2d.s1" "segment_2d"))
  (overlapping_y_axis_segments_are_collinear_overlapping_TCC1-1 nil
   3874127254 ("" (subtype-tcc) nil nil) nil nil
   (overlapping_y_axis_segments_are_collinear_overlapping subtype
    "segments_2d.s1" "segment_2d")))
 (overlapping_y_axis_segments_are_collinear_overlapping_TCC2 0
  (overlapping_y_axis_segments_are_collinear_overlapping_TCC2-2 nil
   3874129021 ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   nil shostak
   (overlapping_y_axis_segments_are_collinear_overlapping subtype
    "segments_2d.s2" "segment_2d"))
  (overlapping_y_axis_segments_are_collinear_overlapping_TCC2-1 nil
   3874127254 ("" (subtype-tcc) nil nil) nil nil
   (overlapping_y_axis_segments_are_collinear_overlapping subtype
    "segments_2d.s2" "segment_2d")))
 (overlapping_y_axis_segments_are_collinear_overlapping 0
  (overlapping_y_axis_segments_are_collinear_overlapping-1 nil
   3874129021 ("" (grind) nil nil) nil shostak))
 (connecting_y_axis_segments_are_collinear_overlapping_TCC1 0
  (connecting_y_axis_segments_are_collinear_overlapping_TCC1-2 nil
   3874129021 ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   nil shostak
   (connecting_y_axis_segments_are_collinear_overlapping subtype
    "segments_2d.s1" "segment_2d"))
  (connecting_y_axis_segments_are_collinear_overlapping_TCC1-1 nil
   3874127254 ("" (subtype-tcc) nil nil) nil nil
   (connecting_y_axis_segments_are_collinear_overlapping subtype
    "segments_2d.s1" "segment_2d")))
 (connecting_y_axis_segments_are_collinear_overlapping_TCC2 0
  (connecting_y_axis_segments_are_collinear_overlapping_TCC2-2 nil
   3874129021 ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil)
   nil shostak
   (connecting_y_axis_segments_are_collinear_overlapping subtype
    "segments_2d.s2" "segment_2d"))
  (connecting_y_axis_segments_are_collinear_overlapping_TCC2-1 nil
   3874127254 ("" (subtype-tcc) nil nil) nil nil
   (connecting_y_axis_segments_are_collinear_overlapping subtype
    "segments_2d.s2" "segment_2d")))
 (connecting_y_axis_segments_are_collinear_overlapping 0
  (connecting_y_axis_segments_are_collinear_overlapping-1 nil
   3874129021 ("" (grind) nil nil) nil shostak))
 (x_intersects_TCC1 0
  (x_intersects_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (x_intersects subtype "segments_2d.s1" "segment_2d"))
  (x_intersects_TCC1-1 nil 3874127254 ("" (subtype-tcc) nil nil) nil
   nil (x_intersects subtype "segments_2d.s1" "segment_2d")))
 (x_intersects_TCC2 0
  (x_intersects_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (x_intersects subtype "segments_2d.s2" "segment_2d"))
  (x_intersects_TCC2-1 nil 3874127254 ("" (subtype-tcc) nil nil) nil
   nil (x_intersects subtype "segments_2d.s2" "segment_2d")))
 (x_intersects 0
  (x_intersects-1 nil 3874129021 ("" (grind) nil nil) nil shostak))
 (t_intersects_TCC1 0
  (t_intersects_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (t_intersects subtype "segments_2d.s1" "segment_2d"))
  (t_intersects_TCC1-1 nil 3874127254 ("" (subtype-tcc) nil nil) nil
   nil (t_intersects subtype "segments_2d.s1" "segment_2d")))
 (t_intersects_TCC2 0
  (t_intersects_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (t_intersects subtype "segments_2d.s2" "segment_2d"))
  (t_intersects_TCC2-1 nil 3874127254 ("" (subtype-tcc) nil nil) nil
   nil (t_intersects subtype "segments_2d.s2" "segment_2d")))
 (t_intersects 0
  (t_intersects-1 nil 3874129021 ("" (grind) nil nil) nil shostak))
 (are_segments_intersecting?_regression_TCC1 0
  (are_segments_intersecting?_regression_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (are_segments_intersecting?_regression subtype "segments_2d.s1"
    "segment_2d"))
  (are_segments_intersecting?_regression_TCC1-1 nil 3874127254
   ("" (subtype-tcc) nil nil) nil nil
   (are_segments_intersecting?_regression subtype "segments_2d.s1"
    "segment_2d")))
 (are_segments_intersecting?_regression_TCC2 0
  (are_segments_intersecting?_regression_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (are_segments_intersecting?_regression subtype "segments_2d.s2"
    "segment_2d"))
  (are_segments_intersecting?_regression_TCC2-1 nil 3874127254
   ("" (subtype-tcc) nil nil) nil nil
   (are_segments_intersecting?_regression subtype "segments_2d.s2"
    "segment_2d")))
 (are_segments_intersecting?_regression 0
  (are_segments_intersecting?_regression-1 nil 3874129021
   ("" (grind) nil nil) nil shostak))
 (are_segments_intersecting_alt_reflexive 0
  (are_segments_intersecting_alt_reflexive-1 nil 3874129021
   ("" (skeep 1 t)
    (("" (expand "are_segments_intersecting_alt?")
      (("" (inst 1 "s1`p1")
        (("" (expand "is_point_on_segment?")
          (("" (expand "is_point_on_segment?")
            (("" (split)
              (("1" (grind) nil)
               ("2" (expand "vector_from_point_to_point")
                (("2"
                  (name-replace*
                   ("x" "s1`p2`x - s1`p1`x" "y" "s1`p2`y - s1`p1`y"))
                  (("2" (hide -) (("2" (grind) nil)))))))
               ("3" (expand "vector_from_point_to_point")
                (("3"
                  (name-replace*
                   ("x" "s1`p2`x - s1`p1`x" "y" "s1`p2`y - s1`p1`y"))
                  (("3" (hide -) (("3" (grind) nil))))))))))))))))))
    nil)
   nil shostak))
 (are_segments_intersecting_alt_symmetric_half 0
  (are_segments_intersecting_alt_symmetric_half-1 nil 3874129021
   ("" (skeep 1 t)
    (("" (expand "are_segments_intersecting_alt?")
      (("" (skeep -1 t) (("" (inst?) nil))))))
    nil)
   nil shostak))
 (are_segments_intersecting_alt_symmetric 0
  (are_segments_intersecting_alt_symmetric-1 nil 3874129021
   ("" (skeep 1 t)
    (("" (iff)
      (("" (split)
        (("1"
          (lemma "are_segments_intersecting_alt_symmetric_half"
           ("s1" "s1" "s2" "s2"))
          (("1" (propax) nil)))
         ("2"
          (lemma "are_segments_intersecting_alt_symmetric_half"
           ("s1" "s2" "s2" "s1"))
          (("2" (propax) nil))))))))
    nil)
   nil shostak))
 (are_segments_intersecting_alt_reverse 0
  (are_segments_intersecting_alt_reverse-1 nil 3874129021
   ("" (skeep)
    (("" (expand "are_segments_intersecting_alt?")
      (("" (iff)
        (("" (ground)
          (("1" (skeep - t)
            (("1" (expand "is_point_on_segment?")
              (("1" (inst + "p1")
                (("1" (expand "is_point_on_segment?" +)
                  (("1"
                    (rewrite*
                     "point_on_segment?_iff_is_point_on_segment?" :dir
                     rl)
                    (("1" (rewrite "point_on_reverse_segment") nil
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep - t)
            (("2" (inst + "p1")
              (("2" (expand "is_point_on_segment?")
                (("2"
                  (rewrite*
                   "point_on_segment?_iff_is_point_on_segment?" :dir
                   rl)
                  (("2" (rewrite "point_on_reverse_segment") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (segment_far_endpoint_length 0
  (segment_far_endpoint_length-1 nil 3874129021
   ("" (skeep)
    (("" (expand* "^" "length" "^")
      (("" (real-props) (("" (grind-with-ext) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (dir_parallel_diffs_eqv_norm_diffs_eq 0
  (dir_parallel_diffs_eqv_norm_diffs_eq-1 nil 3874129021
   ("" (skeep)
    (("" (rewrite "dir_parallel_eqv_normalized_diffs_eq")
      (("" (ground) nil nil)) nil))
    nil)
   nil shostak))
 (is_point_on_seg_equiv 0
  (is_point_on_seg_equiv-1 nil 3874129021
   ("" (skeep)
    (("" (expand "is_point_on_segment?")
      ((""
        (rewrite* "point_on_segment?_iff_is_point_on_segment?" :dir rl)
        (("" (assert) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (is_point_on_seg_equiv_2 0
  (is_point_on_seg_equiv_2-1 nil 3874129021
   ("" (skeep)
    (("" (use "is_point_on_seg_equiv")
      (("" (expand "is_point_on_segment?" -) (("" (propax) nil))))))
    nil)
   nil shostak))
 (point_on_segment_has_offset 0
  (point_on_segment_has_offset-1 nil 3874129021
   ("" (skeep)
    (("" (expand "point_on_segment?")
      (("" (ground)
        (("1" (skeep)
          (("1" (inst + "t")
            (("1" (assert)
              (("1" (replace -3)
                (("1" (rewrite "scal_sub_left")
                  (("1" (rewrite "scal_sub_right")
                    (("1" (cancel-add 1) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (inst + "d")
            (("2" (assert)
              (("2" (replace -1)
                (("2" (rewrite "scal_sub_left")
                  (("2" (rewrite "scal_sub_right")
                    (("2" (cancel-add 1) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (point_on_segment_has_norm_offset 0
  (point_on_segment_has_norm_offset-1 nil 3874129021
   ("" (skeep)
    (("" (use "point_on_segment_has_offset")
      (("" (expand* "^" "length" "^")
        (("" (ground)
          (("1" (skeep)
            (("1" (inst + "d * norm(s`p2 - s`p1)")
              (("1" (assert) (("1" (mult-cases 1 :mult-op 1*) nil nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (inst + "d / norm(s`p2 - s`p1)")
              (("2" (real-props) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (offset_point_on_segment_iff_bounded 0
  (offset_point_on_segment_iff_bounded-1 nil 3874129021
   ("" (skeep)
    (("" (ground)
      (("1" (rewrite "point_on_segment_has_norm_offset")
        (("1" (skeep)
          (("1" (name-replace "V" "^(s`p2 - s`p1)")
            (("1" (cancel-add -1)
              (("1" (use "scal_cancel") (("1" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (rewrite "point_on_segment_has_norm_offset")
        (("2" (inst?) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (nearby_segment_distance_bounded 0
  (nearby_segment_distance_bounded-1 nil 3874129021
   ("" (skeep)
    (("" (expand "point_on_segment?")
      (("" (skeep)
        (("" (inst + "(1 - t) * e`p1 + t * e`p2")
          (("" (ground)
            (("1" (inst?) (("1" (assert) nil nil)) nil)
             ("2" (replace -5 :hide? t)
              (("2"
                (invoke (name-replace "r" "%1" :hide? nil) (! 1 l 1))
                (("2" (factor -1 l (1 3))
                  (("2" (factor -1 l (2 3))
                    (("2" (expand "norm")
                      (("2" (equate "d" "sqrt(sq(d))" t)
                        (("2" (rewrite* "sqrt_le")
                          (("2" (replace -1 :dir rl)
                            (("2" (rewrite "sqv_add")
                              (("2"
                                (rewrite* "sqv_scal")
                                (("2"
                                  (factor 1 l (3 4))
                                  (("2"
                                    (lemma "one_parameter_max")
                                    (("2"
                                      (inst
                                       -
                                       "sqv(s`p1 - e`p1)"
                                       "sqv(s`p2 - e`p2)"
                                       "sq(d)"
                                       "t")
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (use "dot_sqv_add")
                                          (("1"
                                            (mult-by -1 "t*(1-t)")
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (hide-all-but (-6 -7 1))
                                              (("2"
                                                (factor 1 l)
                                                (("2"
                                                  (mult-cases 1)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil)
                                         ("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (point_on_interior_segment 0
  (point_on_interior_segment-1 nil 3874129021
   ("" (skeep)
    (("" (expand "point_on_segment?")
      (("" (skeep*)
        (("" (replace -6)
          (("" (replace -9)
            (("" (inst + "t!1 - t*t!1 +t*t!2")
              (("" (ground)
                (("1" (move-terms 1 r 2)
                  (("1" (assert)
                    (("1" (case "t*t!1 <= t!1")
                      (("1" (assert)
                        (("1" (case "t*t!2 >= 0")
                          (("1" (assert) nil nil)
                           ("2" (mult-cases 1) nil nil))
                          nil))
                        nil)
                       ("2" (mult-cases 1 :mult-op 1*) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (move-terms 1 l 2)
                  (("2" (case "t*t!2 <= t")
                    (("1" (lemma "two_parameter_bounds")
                      (("1" (inst - "t" "t!1") (("1" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (mult-cases 1) nil nil))
                    nil))
                  nil)
                 ("3" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (collinear_distances_additive 0
  (collinear_distances_additive-1 nil 3874129021
   ("" (skeep)
    (("" (rewrite* "point_on_segment_has_norm_offset")
      (("" (skeep*)
        (("" (replace -1)
          (("" (replace -3)
            (("" (assert)
              ((""
                (equate
                 "e`p1 + d!1 * ^(e`p2 - e`p1) - (e`p1 + d * ^(e`p2 - e`p1))"
                 "(d!1 - d) * ^(e`p2 - e`p1)")
                (("1" (rewrite* "norm_scal") (("1" (grind) nil nil))
                  nil)
                 ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (collinear_distances_additive_2 0
  (collinear_distances_additive_2-1 nil 3874129021
   ("" (skeep)
    (("" (expand "segment_endpoint?")
      (("" (ground)
        (("1" (lemma "collinear_distances_additive")
          (("1" (inst - "e" "p" "q") (("1" (ground) nil nil)) nil))
          nil)
         ("2" (lemma "collinear_distances_additive")
          (("2" (inst - "reverse_segment(e)" "p" "q")
            (("2" (rewrite* "point_on_reverse_segment")
              (("2" (expand "reverse_segment") (("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (segment_endpoints_neq_midpoint 0
  (segment_endpoints_neq_midpoint-1 nil 3874129021
   ("" (skeep)
    (("" (expand "segment_midpoint")
      (("" (ground)
        (("1" (distrib -1)
          (("1" (move-terms -1 r 1)
            (("1" (factor -1)
              (("1" (assert) (("1" (mult-by -1 "2") nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (distrib -1)
          (("2" (use "comps_eq")
            (("2" (replace -1 :hide? t)
              (("2" (flatten)
                (("2" (grind)
                  (("2" (move-terms -1 r 2)
                    (("2" (move-terms -2 r 2)
                      (("2" (factor * l)
                        (("2" (assert)
                          (("2" (typepred "s`p2")
                            (("2" (ground)
                              (("2"
                                (apply-extensionality :hide? t)
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (segment_midpoint_on_segment 0
  (segment_midpoint_on_segment-1 nil 3874129021
   ("" (skeep)
    (("" (expand "segment_midpoint")
      (("" (expand "point_on_segment?")
        (("" (inst + "1/2")
          (("" (ground) (("" (distrib 1) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (rightward_segment_offset_TCC1 0
  (rightward_segment_offset_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (lemma "scaled_perp_left_neq_scaled_vector")
      (("" (inst - "1" "0" "s`p2 - s`p1") (("" (ground) nil nil)) nil))
      nil))
    nil)
   nil shostak
   (rightward_segment_offset subtype
    "vectors_cross_2d.perp_left((vectors_2D.-)(segments_2d.s`p2, segments_2d.s`p1))"
    "Nz_vector"))
  (rightward_segment_offset_TCC1-1 nil 3874127254
   ("" (subtype-tcc) nil nil) nil nil
   (rightward_segment_offset subtype
    "vectors_cross_2d.perp_left((vectors_2D.-)(segments_2d.s`p2, segments_2d.s`p1))"
    "Nz_vector")))
 (leftward_segment_offset_TCC1 0
  (leftward_segment_offset_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (assert)
      (("" (use "perp_right_nzvect_neq_zero") (("" (ground) nil nil))
        nil))
      nil))
    nil)
   nil shostak
   (leftward_segment_offset subtype
    "vectors_cross_2d.perp_right((vectors_2D.-)(segments_2d.s`p2, segments_2d.s`p1))"
    "Nz_vector"))
  (leftward_segment_offset_TCC1-1 nil 3874127254
   ("" (subtype-tcc) nil nil) nil nil
   (leftward_segment_offset subtype
    "vectors_cross_2d.perp_right((vectors_2D.-)(segments_2d.s`p2, segments_2d.s`p1))"
    "Nz_vector")))
 (midpoint_reverse 0
  (midpoint_reverse-1 nil 3874129021 ("" (grind) nil nil) nil shostak))
 (norm_midpoint_to_p1_half_len 0
  (norm_midpoint_to_p1_half_len-1 nil 3874129021
   ("" (skeep)
    (("" (expand* "length" "norm" "segment_midpoint")
      ((""
        (case-replace
         "1/2 * (s`p1 + s`p2) - s`p1 = -1/2 * s`p1 + 1/2 * s`p2" :hide?
         T)
        (("1" (lemma "sqrt_scal" ("a" "1/2" "nnx" "sqv(s`p2 - s`p1)"))
          (("1" (expand "abs")
            (("1" (replace -1 :hide? T)
              (("1" (use "sqrt_eq")
                (("1"
                  (case "sqv(-1 / 2 * s`p1 + 1 / 2 * s`p2) = sq(1/2) * sqv(s`p2 - s`p1)")
                  (("1" (assert) nil nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (norm_midpoint_to_p2_half_len 0
  (norm_midpoint_to_p2_half_len-1 nil 3874129021
   ("" (skeep)
    (("" (expand* "length" "norm" "segment_midpoint")
      ((""
        (case-replace
         "1/2 * (s`p1 + s`p2) - s`p2 = 1/2 * s`p1 - 1/2 * s`p2" :hide?
         T)
        (("1" (lemma "sqrt_scal" ("a" "1/2" "nnx" "sqv(s`p2 - s`p1)"))
          (("1" (expand "abs")
            (("1" (replace -1 :hide? T)
              (("1" (use "sqrt_eq")
                (("1"
                  (case "sqv(1 / 2 * s`p1 - 1 / 2 * s`p2) = sq(1/2) * sqv(s`p2 - s`p1)")
                  (("1" (assert) nil nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (rightward_reverse_is_leftward 0
  (rightward_reverse_is_leftward-1 nil 3874129021 ("" (grind) nil nil)
   nil shostak))
 (leftward_reverse_is_rightward 0
  (leftward_reverse_is_rightward-1 nil 3874129021 ("" (grind) nil nil)
   nil shostak))
 (perp_left_point_not_on_segment 0
  (perp_left_point_not_on_segment-1 nil 3874129021
   ("" (skeep)
    (("" (rewrite* "point_on_segment_has_offset")
      (("" (skeep*)
        (("" (replace -1)
          (("" (cancel-add -3)
            (("" (move-terms -3 l 1)
              (("" (factor -3 r)
                (("" (expand "^")
                  (("" (rewrite "norm_perp_left_is_norm_left")
                    (("" (real-props)
                      (("" (hide -1)
                        (("" (use "scaled_vector_neq_scaled_perp_left")
                          (("" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (perp_right_point_not_on_segment 0
  (perp_right_point_not_on_segment-1 nil 3874129021
   ("" (skeep)
    (("" (rewrite* "point_on_segment_has_offset")
      (("" (skeep*)
        (("" (replace -1)
          (("" (cancel-add -3)
            (("" (move-terms -3 l 1)
              (("" (factor -3 r)
                (("" (expand "^")
                  (("" (rewrite "norm_perp_right_is_norm_right")
                    (("" (real-props)
                      (("" (hide -1)
                        ((""
                          (use "scaled_vector_neq_scaled_perp_right")
                          (("" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (no_intersections_with_segment_across_line 0
  (no_intersections_with_segment_across_line-1 nil 3874129021
   ("" (skeep)
    (("" (rewrite "point_on_segment_has_offset")
      (("" (skeep)
        (("" (replace -4 :hide? t)
          (("" (replace -2 :dir rl :hide? t)
            (("" (name-replace* ("u" "s`p1" "v" "s`p2") :hide? t)
              (("" (name-replace "w" "e`p2")
                (("" (case-replace "d=0")
                  (("1" (assert)
                    (("1" (rewrite "cross_antisymmetric")
                      (("1" (assert) nil nil)) nil))
                    nil)
                   ("2"
                    (equate "u + d * (v - u) - v"
                     "(u - v) + d * (v - u)" t)
                    (("2" (rewrite "cross_distrib_add_2")
                      (("2" (rewrite "cross_scales_2" -2)
                        (("2" (rewrite "cross_diff_2" -2)
                          (("2" (rewrite "cross_antisymmetric" -1)
                            (("2" (move-terms -2 l 1)
                              (("2"
                                (equate
                                 "d * -cross(w - v, u - v)"
                                 "-(d * cross(w - v, u - v))"
                                 t)
                                (("2"
                                  (elim-unary -2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (cancel-by
                                       -2
                                       "cross(w - v, u - v)")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (no_intersections_with_segment_across_line_far 0
  (no_intersections_with_segment_across_line_far-1 nil 3874129021
   ("" (skeep)
    (("" (rewrite "point_on_segment_has_offset")
      (("" (skeep)
        (("" (replace -4 :hide? t)
          (("" (replace -2 :dir rl :hide? t)
            (("" (name-replace* ("u" "s`p1" "v" "s`p2") :hide? t)
              (("" (name-replace "w" "e`p2")
                (("" (case-replace "d=0")
                  (("1" (grind) nil nil)
                   ("2" (assert)
                    (("2" (rewrite "cross_scales_2" -2)
                      (("2" (real-props) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (no_intersections_with_parallel_segments_TCC1 0
  (no_intersections_with_parallel_segments_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (no_intersections_with_parallel_segments subtype "segments_2d.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= segments_2d.p}"))
  (no_intersections_with_parallel_segments_TCC1-1 nil 3874127254
   ("" (subtype-tcc) nil nil) nil nil
   (no_intersections_with_parallel_segments subtype "segments_2d.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= segments_2d.p}")))
 (no_intersections_with_parallel_segments 0
  (no_intersections_with_parallel_segments-1 nil 3874129021
   ("" (skeep*)
    (("" (expand "parallel?")
      (("" (skeep)
        (("" (rewrite* "point_on_segment_has_offset")
          (("" (skeep*)
            (("" (replace -1 :hide? t)
              (("" (replace -2 :hide? t)
                (("" (inst - "(d!1 * nzk - d) / nzk")
                  (("" (ground)
                    (("" (real-props)
                      (("" (move-terms -2 l 2)
                        (("" (name-replace "v" "q-p")
                          (("" (replace -2 :hide? t)
                            (("" (grind-with-ext) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (pythagorean_path_parallel_segments 0
  (pythagorean_path_parallel_segments-1 nil 3874129021
   ("" (skeep)
    (("" (skoletin)
      (("" (flatten)
        (("" (lemma "pythagorean_path_between_points")
          (("" (inst - "s`p1" "e`p1" "^(v)")
            (("" (skeep)
              (("" (expand "^")
                (("" (real-props)
                  ((""
                    (equate "b * perp_right((1 / norm(v)) * v)"
                     "(b / norm(v)) * perp_right(v)")
                    (("1" (inst?) nil nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (p2_dist_from_hub_eq_p1_dist_plus_len 0
  (p2_dist_from_hub_eq_p1_dist_plus_len-1 nil 3874129021
   ("" (skeep)
    (("" (skeep - t)
      (("" (use "segment_far_endpoint_length")
        (("" (replace -1 1)
          (("" (expand "^" 1)
            (("" (expand "length")
              (("" (real-props)
                (("" (equate "s`p1 + (s`p2 - s`p1) - v" "s`p2 - v")
                  (("1" (lemma "collinear_distances_additive_line")
                    (("1" (inst - "v" "s`p1" "s`p2")
                      (("1" (assert)
                        (("1" (hide 2)
                          (("1" (replace -4)
                            (("1"
                              (equate
                               "s`p1 - (s`p1 + k * (s`p2 - s`p1))"
                               "-k * (s`p2 - s`p1)")
                              (("1"
                                (equate
                                 "s`p2 - (s`p1 + k * (s`p2 - s`p1))"
                                 "(1 - k) * (s`p2 - s`p1)")
                                (("1"
                                  (expand "dir_parallel?")
                                  (("1"
                                    (inst + "-k / (1 - k)")
                                    (("1"
                                      (name-replace
                                       "kk"
                                       "-k / (1 - k)")
                                      (("1"
                                        (rewrite "scal_assoc")
                                        (("1"
                                          (equate "kk - k * kk" "-k")
                                          (("1"
                                            (expand "kk")
                                            (("1"
                                              (real-props)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (splash 1)
                                      (("1" (assert) nil nil)
                                       ("2" (cross-mult 1) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (grind-with-ext) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (farther_from_hub_imp_farther_from_p 0
  (farther_from_hub_imp_farther_from_p-1 nil 3874129021
   ("" (skeep)
    (("" (skeep)
      (("" (case "^(s`p2 - v) = ^(s`p1 - v)")
        (("1" (lemma "law_of_cosines_sq_vcos")
          (("1" (inst-cp - "p" "v" "s`p1")
            (("1" (inst - "p" "v" "s`p2")
              (("1" (assert)
                (("1" (rewrite "sq_lt" + :dir rl)
                  (("1" (replace -1 :hide? t)
                    (("1" (replace -1 :hide? t)
                      (("1" (cancel-add 4)
                        (("1" (replace -1)
                          (("1"
                            (name-replace "cos_a"
                             "vcos(^(p - v), ^(s`p1 - v))")
                            (("1"
                              (use "p2_dist_from_hub_eq_p1_dist_plus_len")
                              (("1"
                                (ground)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (expand "sq")
                                    (("1"
                                      (cancel-add 4)
                                      (("1"
                                        (mult-by
                                         -5
                                         "2 * length(s) * cos_a")
                                        (("1"
                                          (add-formulas 4 -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (move-terms 1 l)
                                              (("1"
                                                (factor 1 r (2 3))
                                                (("1"
                                                  (case
                                                   "2 * length(s) * norm(s`p1 - v) * (1 - cos_a) >= 0")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (mult-cases 1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "cos_a < 0")
                                          (("1"
                                            (case
                                             "2 * (length(s) * norm(p - v) * cos_a) <= 0")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (equate
                                               "2 * (length(s) * norm(p - v) * cos_a)"
                                               "(2 * length(s) * norm(p - v)) * cos_a"
                                               (assert))
                                              (("2"
                                                (mult-cases 1)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (equate
                                             "2 * (length(s) * cos_a)"
                                             "(2 * length(s)) * cos_a"
                                             (assert))
                                            (("2"
                                              (mult-cases 2)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (inst?) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (replace -1 1)
          (("2"
            (equate "s`p1 - (s`p1 + k * (s`p2 - s`p1))"
             "-k * (s`p2 - s`p1)")
            (("1"
              (equate "s`p2 - (s`p1 + k * (s`p2 - s`p1))"
               "(1 - k) * (s`p2 - s`p1)")
              (("1" (rewrite* "normalize_scal")
                (("1" (expand "sign") (("1" (propax) nil nil)) nil))
                nil)
               ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
              nil)
             ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
            nil))
          nil)
         ("3" (propax) nil nil) ("4" (propax) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (collinear_imp_seg_points_on_same_line 0
  (collinear_imp_seg_points_on_same_line-1 nil 3874129021
   ("" (skeep* + t)
    (("" (expand "point_on_segment?")
      (("" (expand "collinear?")
        (("" (flatten)
          ((""
            (case "cross(s`p2 - s`p1, e`p1 - s`p1) = 0 &
         cross(s`p2 - s`p1, e`p2 - s`p1) = 0")
            (("1" (flatten)
              (("1" (hide -5 -6)
                (("1" (lemma "cross_eq_0_iff_point_on_line_2")
                  (("1" (inst-cp - "s`p1" "s`p2" "e`p1")
                    (("1" (inst - "s`p1" "s`p2" "e`p2")
                      (("1" (assert)
                        (("1" (rewrite* "point_on_segment_has_offset")
                          (("1" (skeep*)
                            (("1" (ground)
                              (("1"
                                (skeep*)
                                (("1"
                                  (hide -3 -4)
                                  (("1"
                                    (replace -1 :hide? t)
                                    (("1"
                                      (replace -1 :hide? t)
                                      (("1"
                                        (equate
                                         "s`p1 + d!3 * (s`p2 - s`p1) - (s`p1 + d!2 * (s`p2 - s`p1))"
                                         "(d!3 - d!2) * (s`p2 - s`p1)")
                                        (("1"
                                          (name-replace
                                           "v"
                                           "s`p2 - s`p1")
                                          (("1"
                                            (factor -3 r (2 3))
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (replace -3)
                                                (("1"
                                                  (inst
                                                   +
                                                   "d!2 + d!1 * (d!3 - d!2) - d")
                                                  (("1"
                                                    (hide-all-but 1)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (hide -3 -4)
                                  (("2"
                                    (replace -1 :hide? t)
                                    (("2"
                                      (replace -1 :hide? t)
                                      (("2"
                                        (name-replace
                                         "v"
                                         "s`p2 - s`p1")
                                        (("2"
                                          (replace -1 :hide? t)
                                          (("2"
                                            (replace -2 :hide? t)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst
                                                 +
                                                 "d!1 * d!2 - d")
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (skeep)
                                (("3"
                                  (hide -3 -4)
                                  (("3"
                                    (replace -1 :hide? t)
                                    (("3"
                                      (replace -1 :hide? t)
                                      (("3"
                                        (name-replace
                                         "v"
                                         "s`p2 - s`p1")
                                        (("3"
                                          (replace -1 :hide? t)
                                          (("3"
                                            (replace -2 :hide? t)
                                            (("3"
                                              (equate
                                               "s`p1 - (s`p1 + d!2 * v)"
                                               "-(d!2 * v)")
                                              (("1"
                                                (inst
                                                 +
                                                 "d!2 - d!1 * d!2 - d")
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but (-3 -4 1)) (("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (nonoverlapping_collinear_seg_pts_dir_parallel 0
  (nonoverlapping_collinear_seg_pts_dir_parallel-1 nil 3874129021
   ("" (skeep)
    (("" (use "collinear_imp_seg_points_on_same_line")
      (("" (assert)
        (("" (inst - "p" "q")
          (("1" (skeep)
            (("1" (replace -1)
              (("1" (assert)
                (("1" (rewrite "point_on_segment_has_offset")
                  (("1" (skeep)
                    (("1" (replace -3)
                      (("1" (assert)
                        (("1" (case-replace "d!1 = 0")
                          (("1" (assert) nil nil)
                           ("2"
                            (equate
                             "s`p1 - (s`p1 + d!1 * (s`p2 - s`p1) + d * (s`p2 - s`p1))"
                             "-((d!1 + d) * (s`p2 - s`p1))")
                            (("1" (factor! (! -6 l 1))
                              (("1"
                                (rewrite* "norm_scal")
                                (("1"
                                  (name-replace "v" "s`p2 - s`p1")
                                  (("1"
                                    (expand "dir_parallel?")
                                    (("1"
                                      (cancel-by -6 "norm(v)")
                                      (("1"
                                        (expand "abs")
                                        (("1"
                                          (apply (repeat (lift-if)))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (inst
                                                 +
                                                 "-(d!1 / (d!1 + d))")
                                                (("1"
                                                  (name-replace
                                                   "dd"
                                                   "d!1 + d")
                                                  (("1"
                                                    (equate
                                                     "-(d!1 / dd) * -(dd * v)"
                                                     "d!1 * v")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (splash 1 t)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (move-terms 1 l)
                                                    (("2"
                                                      (elim-unary 1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (cross-mult
                                                           1)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "are_segments_intersecting_alt?")
                                                (("2"
                                                  (inst + "q")
                                                  (("1"
                                                    (rewrite
                                                     "is_point_on_seg_equiv")
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "is_point_on_seg_equiv")
                                                    (("2"
                                                      (rewrite
                                                       "point_on_segment_has_offset")
                                                      (("2"
                                                        (inst
                                                         +
                                                         "d!1 + d")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (factor
                                                             -4
                                                             r
                                                             (2 3))
                                                            (("2"
                                                              (expand
                                                               "v")
                                                              (("2"
                                                                (replace
                                                                 -4
                                                                 1)
                                                                (("2"
                                                                  (cancel-add
                                                                   1)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "point_on_segment?" +) (("2" (propax) nil nil))
            nil)
           ("3" (expand "point_on_segment?" +) (("3" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (disjoint_collinear_segs_dist_bound_p1 0
  (disjoint_collinear_segs_dist_bound_p1-1 nil 3874129021
   ("" (skeep* + t)
    (("" (rewrite "point_on_segment_has_offset")
      (("" (skeep)
        (("" (replace -3 :hide? t)
          ((""
            (equate "s`p1 + d * (s`p2 - s`p1) - v"
             "(s`p1 - v) + d * (s`p2 - s`p1)")
            (("1"
              (lemma "nonoverlapping_collinear_seg_pts_dir_parallel")
              (("1" (inst - "s" "e" "s`p2" "v")
                (("1" (ground)
                  (("1" (expand "dir_parallel?")
                    (("1" (skeep)
                      (("1" (replace -1)
                        (("1" (real-props)
                          (("1"
                            (equate
                             "(s`p1 - v) + (d * pk) * (s`p1 - v)"
                             "(1 + d * pk) * (s`p1 - v)")
                            (("1" (rewrite "norm_scal")
                              (("1"
                                (mult-cases 2 :mult-op 1*)
                                (("1"
                                  (expand "abs")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-1 1))
                    (("2" (expand "segment_endpoint?")
                      (("2" (split -1)
                        (("1" (replace -1) (("1" (assert) nil nil))
                          nil)
                         ("2" (replace -1) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (rewrite "norm_sym" -4)
                    (("3" (rewrite "norm_sym" 1)
                      (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but (-1 1)) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (disjoint_collinear_segs_dist_bound_both 0
  (disjoint_collinear_segs_dist_bound_both-1 nil 3874129021
   ("" (skeep + t)
    (("" (expand "segment_endpoint?" -1)
      (("" (ground)
        (("1" (expand "opposite_endpoint")
          (("1" (lemma "disjoint_collinear_segs_dist_bound_p1")
            (("1" (inst - "s" "e" "v" "p") (("1" (ground) nil nil))
              nil))
            nil))
          nil)
         ("2" (lemma "disjoint_collinear_segs_dist_bound_p1")
          (("2" (inst - "reverse_segment(s)" "e" "v" "p")
            (("2" (ground)
              (("1" (expand "reverse_segment") (("1" (assert) nil nil))
                nil)
               ("2" (expand "collinear?")
                (("2" (expand "reverse_segment")
                  (("2" (ground)
                    (("1" (expand "are_points_collinear?")
                      (("1" (expand "vector_from_point_to_point")
                        (("1" (hide -5)
                          (("1" (expand "are_vectors_collinear?")
                            (("1" (expand "cross")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "are_points_collinear?")
                      (("2" (expand "vector_from_point_to_point")
                        (("2" (hide -4)
                          (("2" (expand "are_vectors_collinear?")
                            (("2" (expand "cross")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (expand "are_segments_intersecting_alt?")
                (("3" (skeep - t)
                  (("3" (inst + "p1")
                    (("3" (rewrite* "is_point_on_seg_equiv")
                      (("3" (rewrite "point_on_reverse_segment") nil
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (rewrite "point_on_reverse_segment") nil nil)
               ("5" (expand "reverse_segment")
                (("5" (expand "opposite_endpoint")
                  (("5" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (dir_parallel_segs_dist_bound_p1_p1 0
  (dir_parallel_segs_dist_bound_p1_p1-1 nil 3874129021
   ("" (skeep)
    (("" (rewrite* "dir_parallel_eqv_normalized_diffs_eq")
      (("1" (rewrite* "point_on_segment_has_norm_offset")
        (("1" (skeep*)
          (("1" (replace -1 :hide? t)
            (("1" (replace -2 :hide? t)
              (("1"
                (equate
                 "s`p1 + d * ^(s`p2 - s`p1) - (e`p1 + d!1 * ^(e`p2 - e`p1))"
                 "(s`p1 - e`p1) + (d + d!1) * ^(s`p1 - e`p1)")
                (("1" (expand "^" 1)
                  (("1"
                    (equate (! 1 r 1)
                     "(1 + (d!1 + d) * (1 / norm(s`p1 - e`p1))) * (s`p1 - e`p1)")
                    (("1" (rewrite "norm_scal")
                      (("1"
                        (name-replace "k"
                         "1 + (1 / norm(s`p1 - e`p1)) * d!1 + (1 / norm(s`p1 - e`p1)) * d")
                        (("1" (case "k >= 1")
                          (("1" (mult-cases 1 :mult-op 1*)
                            (("1" (assert) nil nil)) nil)
                           ("2" (hide-all-but 1)
                            (("2" (expand "k")
                              (("2"
                                (cancel-add 1)
                                (("2" (real-props) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (equate "^(e`p2 - e`p1)" "-^(e`p1 - e`p2)")
                  (("1" (replace -4 :dir rl)
                    (("1" (replace -3)
                      (("1" (hide-all-but 1)
                        (("1" (name-replace "v" "^(s`p1 - e`p1)")
                          (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten) (("2" (replace -1) (("2" (assert) nil nil)) nil))
        nil)
       ("3" (flatten) (("3" (replace -1) (("3" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (endpt_1_closer_to_q_imp_q_farther_from_p 0
  (endpt_1_closer_to_q_imp_q_farther_from_p-1 nil 3874129021
   ("" (skeep)
    (("" (rewrite "point_on_segment_has_offset")
      (("" (skeep)
        (("" (replace -1)
          (("" (case-replace "d = 0")
            (("1" (assert) nil nil)
             ("2" (hide 2)
              (("2" (rewrite "point_on_segment_has_offset")
                (("2" (replace -3)
                  (("2" (assert)
                    (("2"
                      (equate "s`p1 + k * (s`p2 - s`p1) - s`p2"
                       "(k - 1) * (s`p2 - s`p1)")
                      (("1"
                        (equate
                         "s`p1 + k * (s`p2 - s`p1) - (s`p1 + d * (s`p2 - s`p1))"
                         "(k - d) * (s`p2 - s`p1)")
                        (("1" (rewrite* "norm_scal")
                          (("1" (cancel-by -4 "norm(s`p2 - s`p1)")
                            (("1" (cancel-by 4 "norm(s`p2 - s`p1)")
                              (("1"
                                (hide -1 -3 2 3)
                                (("1"
                                  (case "k >= 1")
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (case "k < 0")
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (inst + "k")
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (endpt_2_closer_to_q_imp_q_farther_from_p 0
  (endpt_2_closer_to_q_imp_q_farther_from_p-1 nil 3874129021
   ("" (skeep)
    (("" (rewrite "point_on_segment_has_offset")
      (("" (skeep)
        (("" (replace -1)
          (("" (case-replace "d = 1")
            (("1" (hide-all-but 1) (("1" (grind-with-ext) nil nil))
              nil)
             ("2" (hide 2)
              (("2" (rewrite "point_on_segment_has_offset")
                (("2" (replace -3)
                  (("2" (assert)
                    (("2"
                      (equate "s`p1 + k * (s`p2 - s`p1) - s`p2"
                       "(k - 1) * (s`p2 - s`p1)")
                      (("1"
                        (equate
                         "s`p1 + k * (s`p2 - s`p1) - (s`p1 + d * (s`p2 - s`p1))"
                         "(k - d) * (s`p2 - s`p1)")
                        (("1" (rewrite* "norm_scal")
                          (("1" (cancel-by -4 "norm(s`p2 - s`p1)")
                            (("1" (cancel-by 4 "norm(s`p2 - s`p1)")
                              (("1"
                                (hide -1 -3 2 3)
                                (("1"
                                  (case "k >= 1")
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (case "k < 0")
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (inst + "k")
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (parallel_normalized_cases 0
  (parallel_normalized_cases-1 nil 3874129021
   ("" (skeep + t)
    (("" (use "parallel_defs_almost_same")
      (("" (assert)
        (("" (hide -2)
          (("" (expand "parallel?")
            (("" (skeep)
              (("" (replace -1)
                (("" (rewrite "normalize_scal")
                  (("" (expand "sign")
                    (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (parallel_normalized_vector_cases 0
  (parallel_normalized_vector_cases-1 nil 3874129021
   ("" (skeep)
    (("" (expand "parallel?")
      (("" (skeep)
        (("" (replace -1 :hide? t)
          (("" (rewrite "normalize_scal")
            (("" (expand "sign")
              (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

