(vectors_2d_trig
 (vsin_TCC1 0
  (vsin_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (use "abs_dot_and_cross_le_1")
      (("" (expand "abs") (("" (ground) nil nil)) nil)) nil))
    nil)
   nil shostak
   (vsin subtype
    "vectors_cross_2d.cross(vectors_2d_trig.u, vectors_2d_trig.v)"
    "{x: reals.real | booleans.AND(reals.<=((number_fields.-)(1), x), reals.<=(x, 1))}"))
  (vsin_TCC1-1 nil 3874127250 ("" (subtype-tcc) nil nil) nil nil
   (vsin subtype
    "vectors_cross_2d.cross(vectors_2d_trig.u, vectors_2d_trig.v)"
    "{x: reals.real | booleans.AND(reals.<=((number_fields.-)(1), x), reals.<=(x, 1))}")))
 (vcos_TCC1 0
  (vcos_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (use "abs_dot_and_cross_le_1")
      (("" (expand "abs") (("" (ground) nil nil)) nil)) nil))
    nil)
   nil shostak
   (vcos subtype "vectors_2D.*(vectors_2d_trig.u, vectors_2d_trig.v)"
    "{x: reals.real | booleans.AND(reals.<=((number_fields.-)(1), x), reals.<=(x, 1))}"))
  (vcos_TCC1-1 nil 3874127250 ("" (subtype-tcc) nil nil) nil nil
   (vcos subtype "vectors_2D.*(vectors_2d_trig.u, vectors_2d_trig.v)"
    "{x: reals.real | booleans.AND(reals.<=((number_fields.-)(1), x), reals.<=(x, 1))}")))
 (vsin_sq_plus_vcos_sq 0
  (vsin_sq_plus_vcos_sq-1 nil 3874129020
   ("" (skeep)
    (("" (typepred "u" "v")
      (("" (expand "norm")
        (("" (lemma "sqrt_eq_1")
          (("" (inst-cp - "sqv(u)")
            (("" (inst - "sqv(v)")
              (("" (ground)
                (("" (hide -3 -4) (("" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (vector_lengths_from_sin_cos_1_TCC1 0
  (vector_lengths_from_sin_cos_1_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (vector_lengths_from_sin_cos_1 subtype
    "(vectors_2D.-)(vectors_2d_trig.v, vectors_2d_trig.u)"
    "Nz_vector"))
  (vector_lengths_from_sin_cos_1_TCC1-1 nil 3874127250
   ("" (subtype-tcc) nil nil) nil nil
   (vector_lengths_from_sin_cos_1 subtype
    "(vectors_2D.-)(vectors_2d_trig.v, vectors_2d_trig.u)"
    "Nz_vector")))
 (vector_lengths_from_sin_cos_1_TCC2 0
  (vector_lengths_from_sin_cos_1_TCC2-2 nil 3874129020
   ("" (skeep) (("" (move-terms -3 l 2) (("" (ground) nil nil)) nil))
    nil)
   nil shostak
   (vector_lengths_from_sin_cos_1 subtype
    "(vectors_2D.-)(vectors_2d_trig.w, vectors_2d_trig.u)"
    "Nz_vector"))
  (vector_lengths_from_sin_cos_1_TCC2-1 nil 3874127250
   ("" (subtype-tcc) nil nil) nil nil
   (vector_lengths_from_sin_cos_1 subtype
    "(vectors_2D.-)(vectors_2d_trig.w, vectors_2d_trig.u)"
    "Nz_vector")))
 (vector_lengths_from_sin_cos_1 0
  (vector_lengths_from_sin_cos_1-1 nil 3874129020
   ("" (skeep)
    (("" (ground)
      (("1" (expand "vcos")
        (("1" (expand "^")
          (("1" (real-props)
            (("1" (cancel-by 1 "norm(w - u)")
              (("1" (expand "norm")
                (("1" (rewrite "sqrt_def")
                  (("1" (hide 1)
                    (("1" (expand "sqv") (("1" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "vsin")
        (("2" (expand "^")
          (("2" (rewrite "cross_scales")
            (("2" (real-props)
              (("2" (cancel-by 1 "norm(w - u)")
                (("2" (expand "cross")
                  (("2" (expand "norm")
                    (("2" (rewrite "sqrt_times" :dir rl)
                      (("2" (transform-both 2 "sq(%1)")
                        (("1" (rewrite "sq_sqrt")
                          (("1" (hide 2 3)
                            (("1" (expand "sqv")
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (rewrite "sq_eq") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (vector_lengths_from_sin_cos_2_TCC1 0
  (vector_lengths_from_sin_cos_2_TCC1-2 nil 3874129020
   ("" (skeep) (("" (move-terms -3 l 2) (("" (ground) nil nil)) nil))
    nil)
   nil shostak
   (vector_lengths_from_sin_cos_2 subtype
    "(vectors_2D.-)(vectors_2d_trig.w, vectors_2d_trig.u)"
    "Nz_vector"))
  (vector_lengths_from_sin_cos_2_TCC1-1 nil 3874127250
   ("" (subtype-tcc) nil nil) nil nil
   (vector_lengths_from_sin_cos_2 subtype
    "(vectors_2D.-)(vectors_2d_trig.w, vectors_2d_trig.u)"
    "Nz_vector")))
 (vector_lengths_from_sin_cos_2_TCC2 0
  (vector_lengths_from_sin_cos_2_TCC2-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (vector_lengths_from_sin_cos_2 subtype
    "(vectors_2D.-)(vectors_2d_trig.v, vectors_2d_trig.u)"
    "Nz_vector"))
  (vector_lengths_from_sin_cos_2_TCC2-1 nil 3874127250
   ("" (subtype-tcc) nil nil) nil nil
   (vector_lengths_from_sin_cos_2 subtype
    "(vectors_2D.-)(vectors_2d_trig.v, vectors_2d_trig.u)"
    "Nz_vector")))
 (vector_lengths_from_sin_cos_2 0
  (vector_lengths_from_sin_cos_2-1 nil 3874129020
   ("" (skeep)
    (("" (ground)
      (("1" (expand "vcos")
        (("1" (expand "^")
          (("1" (real-props)
            (("1" (cancel-by 1 "norm(w - u)")
              (("1" (expand "norm")
                (("1" (rewrite "sqrt_def")
                  (("1" (hide 1)
                    (("1" (expand "sqv") (("1" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "vsin")
        (("2" (expand "^")
          (("2" (rewrite "cross_scales")
            (("2" (real-props)
              (("2" (cancel-by 1 "norm(w - u)")
                (("2" (expand "cross")
                  (("2" (expand "norm")
                    (("2" (rewrite "sqrt_times" :dir rl)
                      (("2" (transform-both 2 "sq(%1)")
                        (("1" (rewrite "sq_sqrt")
                          (("1" (hide 2 3)
                            (("1" (expand "sqv")
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (rewrite "sq_eq") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (scaled_sin_cos_eq 0
  (scaled_sin_cos_eq-1 nil 3874129020
   ("" (skeep)
    (("" (ground)
      (("1" (expand "vsin")
        (("1" (rewrite* "normalize_scal")
          (("1" (expand "sign") (("1" (assert) nil nil)) nil)) nil))
        nil)
       ("2" (expand "vcos")
        (("2" (rewrite* "normalize_scal")
          (("2" (expand "sign") (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (triangle_vertex_imp_sin_cos_pos_1_TCC1 0
  (triangle_vertex_imp_sin_cos_pos_1_TCC1-2 nil 3874129020
   ("" (skeep) (("" (move-terms -3 l 2) (("" (ground) nil nil)) nil))
    nil)
   nil shostak
   (triangle_vertex_imp_sin_cos_pos_1 subtype
    "(vectors_2D.-)(vectors_2d_trig.v, vectors_2d_trig.u)"
    "Nz_vector"))
  (triangle_vertex_imp_sin_cos_pos_1_TCC1-1 nil 3874127250
   ("" (subtype-tcc) nil nil) nil nil
   (triangle_vertex_imp_sin_cos_pos_1 subtype
    "(vectors_2D.-)(vectors_2d_trig.v, vectors_2d_trig.u)"
    "Nz_vector")))
 (triangle_vertex_imp_sin_cos_pos_1_TCC2 0
  (triangle_vertex_imp_sin_cos_pos_1_TCC2-2 nil 3874129020
   ("" (skeep)
    (("" (replace -1)
      (("" (replace -2)
        (("" (cancel-add -3)
          (("" (move-terms -3 l 2)
            (("" (assert)
              (("" (div-by -3 "d")
                (("" (rewrite "scal_neg")
                  (("" (use "vector_neq_scaled_perp_right")
                    (("1" (ground) nil nil)
                     ("2" (flatten)
                      (("2" (move-terms -1 l 2)
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (triangle_vertex_imp_sin_cos_pos_1 subtype
    "(vectors_2D.-)(vectors_2d_trig.p, vectors_2d_trig.u)"
    "Nz_vector"))
  (triangle_vertex_imp_sin_cos_pos_1_TCC2-1 nil 3874127250
   ("" (subtype-tcc) nil nil) nil nil
   (triangle_vertex_imp_sin_cos_pos_1 subtype
    "(vectors_2D.-)(vectors_2d_trig.p, vectors_2d_trig.u)"
    "Nz_vector")))
 (triangle_vertex_imp_sin_cos_pos_1 0
  (triangle_vertex_imp_sin_cos_pos_1-1 nil 3874129020
   ("" (skeep)
    (("" (case "p = u")
      (("1" (use "right_triangle_vertices_neq_1")
        (("1" (ground) nil nil)) nil)
       ("2" (lemma "vector_lengths_from_sin_cos_1")
        (("2" (inst - "u" "q" "p")
          (("2" (replace -2 :hide? t)
            (("2" (assert)
              (("2" (split -1)
                (("1" (flatten)
                  (("1" (case "norm(p - u) > 0")
                    (("1" (div-by -2 "norm(p - u)")
                      (("1" (div-by -3 "norm(p - u)")
                        (("1" (lemma "scaled_sin_cos_eq")
                          (("1" (inst - "v - u" "p - u" "d" "1")
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1 :hide? t)
                                  (("1"
                                    (replace -1 :hide? t)
                                    (("1"
                                      (replace -2 :dir rl :hide? t)
                                      (("1"
                                        (replace -2 :dir rl :hide? t)
                                        (("1"
                                          (ground)
                                          (("1"
                                            (cross-mult 1)
                                            (("1"
                                              (rewrite "norm_scal")
                                              (("1"
                                                (expand "abs")
                                                (("1"
                                                  (real-props)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (cross-mult 1)
                                            (("2"
                                              (real-props)
                                              (("2"
                                                (replace -2 :hide? t)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (rewrite
                                                     "norm_scal")
                                                    (("2"
                                                      (expand "abs")
                                                      (("2"
                                                        (real-props)
                                                        (("2"
                                                          (rewrite
                                                           "norm_perp_right_is_norm_right")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (use "vect_sub_eq_zero")
                                (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "norm_diff_pos") nil nil))
                    nil))
                  nil)
                 ("2" (hide 4)
                  (("2" (flatten)
                    (("2" (cancel-add -1)
                      (("2" (use "scal_eq_zero")
                        (("2" (ground)
                          (("2" (use "vect_sub_eq_zero")
                            (("2" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 4)
                  (("3" (flatten)
                    (("3" (replace -1 :dir rl :hide? t)
                      (("3" (cancel-add -1)
                        (("3" (lemma "scal_eq_zero")
                          (("3" (inst - "c" "perp_right(v - u)")
                            (("3" (ground)
                              (("3"
                                (hide -2 1)
                                (("3"
                                  (use "comps_eq")
                                  (("3"
                                    (replace -1 :hide? t)
                                    (("3"
                                      (flatten)
                                      (("3" (grind-with-ext) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (hide 4)
                  (("4" (replace -1 :hide? t)
                    (("4" (assert)
                      (("4"
                        (equate (! 1 l 2)
                         "d * (v - u) + c * perp_right(v - u)")
                        (("1" (rewrite "cross_distrib_add_2")
                          (("1" (rewrite "cross_self_zero")
                            (("1" (rewrite "cross_scales")
                              (("1"
                                (real-props)
                                (("1"
                                  (rewrite "cross_perp_right_pos")
                                  (("1"
                                    (ground)
                                    (("1"
                                      (use "vect_sub_eq_zero")
                                      (("1" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (hide 4)
                  (("5" (replace -1 :hide? t)
                    (("5" (assert)
                      (("5" (equate (! 1 l 2) "-d * (v - u)")
                        (("1" (real-props)
                          (("1" (rewrite "dot_perp_right_is_zero") nil
                            nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (triangle_vertex_imp_sin_cos_pos_2_TCC1 0
  (triangle_vertex_imp_sin_cos_pos_2_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (replace -1)
      (("" (replace -2)
        (("" (cancel-add -3)
          (("" (move-terms -3 l 2)
            (("" (assert)
              (("" (div-by -3 "d")
                (("" (rewrite "scal_neg")
                  (("" (use "vector_neq_scaled_perp_left")
                    (("1" (ground) nil nil)
                     ("2" (flatten)
                      (("2" (move-terms -1 l 2)
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (triangle_vertex_imp_sin_cos_pos_2 subtype
    "(vectors_2D.-)(vectors_2d_trig.p, vectors_2d_trig.u)"
    "Nz_vector"))
  (triangle_vertex_imp_sin_cos_pos_2_TCC1-1 nil 3874127250
   ("" (subtype-tcc) nil nil) nil nil
   (triangle_vertex_imp_sin_cos_pos_2 subtype
    "(vectors_2D.-)(vectors_2d_trig.p, vectors_2d_trig.u)"
    "Nz_vector")))
 (triangle_vertex_imp_sin_cos_pos_2_TCC2 0
  (triangle_vertex_imp_sin_cos_pos_2_TCC2-2 nil 3874129020
   ("" (skeep) (("" (move-terms -3 l 2) (("" (assert) nil nil)) nil))
    nil)
   nil shostak
   (triangle_vertex_imp_sin_cos_pos_2 subtype
    "(vectors_2D.-)(vectors_2d_trig.v, vectors_2d_trig.u)"
    "Nz_vector"))
  (triangle_vertex_imp_sin_cos_pos_2_TCC2-1 nil 3874127250
   ("" (subtype-tcc) nil nil) nil nil
   (triangle_vertex_imp_sin_cos_pos_2 subtype
    "(vectors_2D.-)(vectors_2d_trig.v, vectors_2d_trig.u)"
    "Nz_vector")))
 (triangle_vertex_imp_sin_cos_pos_2 0
  (triangle_vertex_imp_sin_cos_pos_2-1 nil 3874129020
   ("" (skeep)
    (("" (case "p = u")
      (("1" (use "right_triangle_vertices_neq_2")
        (("1" (ground) nil nil)) nil)
       ("2" (lemma "vector_lengths_from_sin_cos_2")
        (("2" (inst - "u" "q" "p")
          (("2" (replace -2 :hide? t)
            (("2" (assert)
              (("2" (split -1)
                (("1" (flatten)
                  (("1" (case "norm(p - u) > 0")
                    (("1" (div-by -2 "norm(p - u)")
                      (("1" (div-by -3 "norm(p - u)")
                        (("1" (lemma "scaled_sin_cos_eq")
                          (("1" (inst - "p - u" "v - u" "1" "d")
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1 :hide? t)
                                  (("1"
                                    (replace -1 :hide? t)
                                    (("1"
                                      (replace -2 :dir rl :hide? t)
                                      (("1"
                                        (replace -2 :dir rl :hide? t)
                                        (("1"
                                          (ground)
                                          (("1"
                                            (cross-mult 1)
                                            (("1"
                                              (rewrite "norm_scal")
                                              (("1"
                                                (expand "abs")
                                                (("1"
                                                  (real-props)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (cross-mult 1)
                                            (("2"
                                              (real-props)
                                              (("2"
                                                (replace -2 :hide? t)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (rewrite
                                                     "norm_scal")
                                                    (("2"
                                                      (expand "abs")
                                                      (("2"
                                                        (real-props)
                                                        (("2"
                                                          (rewrite
                                                           "norm_perp_left_is_norm_left")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (use "vect_sub_eq_zero")
                                (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (rewrite "norm_diff_pos") nil nil))
                    nil))
                  nil)
                 ("2" (hide 4)
                  (("2" (flatten)
                    (("2" (cancel-add -1)
                      (("2" (use "scal_eq_zero")
                        (("2" (ground)
                          (("2" (use "vect_sub_eq_zero")
                            (("2" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 4)
                  (("3" (flatten)
                    (("3" (replace -1 :dir rl :hide? t)
                      (("3" (cancel-add -1)
                        (("3" (lemma "scal_eq_zero")
                          (("3" (inst - "c" "perp_left(v - u)")
                            (("3" (ground)
                              (("3"
                                (hide -2 1)
                                (("3"
                                  (use "comps_eq")
                                  (("3"
                                    (replace -1 :hide? t)
                                    (("3"
                                      (flatten)
                                      (("3" (grind-with-ext) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (hide 4)
                  (("4" (replace -1 :hide? t)
                    (("4" (assert)
                      (("4"
                        (equate (! 1 l 1)
                         "d * (v - u) + c * perp_left(v - u)")
                        (("1" (rewrite "cross_distrib_add_1")
                          (("1" (rewrite "cross_self_zero")
                            (("1" (rewrite "cross_scales")
                              (("1"
                                (real-props)
                                (("1"
                                  (rewrite "cross_antisymmetric")
                                  (("1"
                                    (use "cross_perp_left_neg")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (use "vect_sub_eq_zero")
                                      (("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (hide 4)
                  (("5" (replace -1 :hide? t)
                    (("5" (assert)
                      (("5" (equate (! 1 l 2) "-d * (v - u)")
                        (("1" (real-props)
                          (("1" (rewrite "dot_perp_left_is_zero") nil
                            nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (complementary_angle_vcos_eq_TCC1 0
  (complementary_angle_vcos_eq_TCC1-2 nil 3874129020
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (complementary_angle_vcos_eq subtype
    "(vectors_2D.-)(vectors_2d_trig.u, vectors_2d_trig.v)"
    "Nz_vector"))
  (complementary_angle_vcos_eq_TCC1-1 nil 3874127250
   ("" (subtype-tcc) nil nil) nil nil
   (complementary_angle_vcos_eq subtype
    "(vectors_2D.-)(vectors_2d_trig.u, vectors_2d_trig.v)"
    "Nz_vector")))
 (complementary_angle_vcos_eq_TCC2 0
  (complementary_angle_vcos_eq_TCC2-2 nil 3874129020
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (complementary_angle_vcos_eq subtype
    "(vectors_2D.-)(vectors_2d_trig.w, vectors_2d_trig.v)"
    "Nz_vector"))
  (complementary_angle_vcos_eq_TCC2-1 nil 3874127250
   ("" (subtype-tcc) nil nil) nil nil
   (complementary_angle_vcos_eq subtype
    "(vectors_2D.-)(vectors_2d_trig.w, vectors_2d_trig.v)"
    "Nz_vector")))
 (complementary_angle_vcos_eq_TCC3 0
  (complementary_angle_vcos_eq_TCC3-2 nil 3874129020
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (complementary_angle_vcos_eq subtype
    "(vectors_2D.-)(vectors_2d_trig.v, vectors_2d_trig.w)"
    "Nz_vector"))
  (complementary_angle_vcos_eq_TCC3-1 nil 3874127250
   ("" (subtype-tcc) nil nil) nil nil
   (complementary_angle_vcos_eq subtype
    "(vectors_2D.-)(vectors_2d_trig.v, vectors_2d_trig.w)"
    "Nz_vector")))
 (complementary_angle_vcos_eq_TCC4 0
  (complementary_angle_vcos_eq_TCC4-2 nil 3874129020
   ("" (skeep) (("" (replace -2) (("" (assert) nil nil)) nil)) nil) nil
   shostak
   (complementary_angle_vcos_eq subtype
    "(vectors_2D.-)(vectors_2d_trig.x, vectors_2d_trig.w)"
    "Nz_vector"))
  (complementary_angle_vcos_eq_TCC4-1 nil 3874127250
   ("" (subtype-tcc) nil nil) nil nil
   (complementary_angle_vcos_eq subtype
    "(vectors_2D.-)(vectors_2d_trig.x, vectors_2d_trig.w)"
    "Nz_vector")))
 (complementary_angle_vcos_eq 0
  (complementary_angle_vcos_eq-1 nil 3874129020
   ("" (skeep)
    (("" (replace -1)
      (("" (expand "vcos")
        (("" (rewrite "normalize_scal")
          (("" (expand "sign")
            (("" (equate "^(w - v)" "-^(v - w)")
              (("1" (name-replace* ("a" "^(x - w)" "b" "^(v - w)"))
                (("1" (hide -) (("1" (grind) nil nil)) nil)) nil)
               ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (perp_comps_cos_sin_left 0
  (perp_comps_cos_sin_left-1 nil 3874129020
   ("" (skeep)
    (("" (grind-with-ext)
      (("1" (cancel-by 1 "u`x")
        (("1" (typepred "v") (("1" (rewrite "sq_eq" :dir rl) nil nil))
          nil))
        nil)
       ("2" (equate "u`x * v`y * -v`x" "-(u`x * v`x * v`y)" (assert))
        (("2" (elim-unary 1)
          (("2" (assert)
            (("2" (cancel-by 1 "u`y")
              (("2" (typepred "v")
                (("2" (rewrite "sq_eq" :dir rl) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (perp_comps_cos_sin_right 0
  (perp_comps_cos_sin_right-1 nil 3874129020
   ("" (skeep)
    (("" (grind-with-ext)
      (("1" (equate "u`x * v`y * -u`y" "-(u`x * u`y * v`y)" (assert))
        (("1" (elim-unary 1)
          (("1" (assert)
            (("1" (cancel-by 1 "v`x")
              (("1" (typepred "u")
                (("1" (rewrite "sq_eq" :dir rl) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (cancel-by 1 "v`y")
        (("2" (typepred "u") (("2" (rewrite "sq_eq" :dir rl) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (half_angle_vsin_TCC1 0
  (half_angle_vsin_TCC1-2 nil 3874129020
   ("" (skeep) (("" (cross-mult 1) nil nil)) nil) nil shostak
   (half_angle_vsin subtype
    "number_fields./(((number_fields.-)(1, vectors_2d_trig.vcos(vectors_2d_trig.u, vectors_2d_trig.v))), 2)"
    "nonneg_real"))
  (half_angle_vsin_TCC1-1 nil 3874127250 ("" (subtype-tcc) nil nil) nil
   nil
   (half_angle_vsin subtype
    "number_fields./(((number_fields.-)(1, vectors_2d_trig.vcos(vectors_2d_trig.u, vectors_2d_trig.v))), 2)"
    "nonneg_real")))
 (half_angle_vsin_TCC2 0
  (half_angle_vsin_TCC2-2 nil 3874129020
   ("" (skeep)
    (("" (ground)
      (("" (lemma "sqrt_le")
        (("" (inst - "(1 - vcos(u, v)) / 2" "1")
          (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak
   (half_angle_vsin subtype
    "sqrt.sqrt(number_fields./(((number_fields.-)(1, vectors_2d_trig.vcos(vectors_2d_trig.u, vectors_2d_trig.v))), 2))"
    "{x: reals.real | booleans.AND(reals.<=(0, x), reals.<=(x, 1))}"))
  (half_angle_vsin_TCC2-1 nil 3874127250 ("" (subtype-tcc) nil nil) nil
   nil
   (half_angle_vsin subtype
    "sqrt.sqrt(number_fields./(((number_fields.-)(1, vectors_2d_trig.vcos(vectors_2d_trig.u, vectors_2d_trig.v))), 2))"
    "{x: reals.real | booleans.AND(reals.<=(0, x), reals.<=(x, 1))}")))
 (half_angle_vcos_TCC1 0
  (half_angle_vcos_TCC1-2 nil 3874129020
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (half_angle_vcos subtype
    "number_fields./(((number_fields.+)(1, vectors_2d_trig.vcos(vectors_2d_trig.u, vectors_2d_trig.v))), 2)"
    "nonneg_real"))
  (half_angle_vcos_TCC1-1 nil 3874127250 ("" (subtype-tcc) nil nil) nil
   nil
   (half_angle_vcos subtype
    "number_fields./(((number_fields.+)(1, vectors_2d_trig.vcos(vectors_2d_trig.u, vectors_2d_trig.v))), 2)"
    "nonneg_real")))
 (half_angle_vcos_TCC2 0
  (half_angle_vcos_TCC2-2 nil 3874129020
   ("" (skeep)
    (("" (assert)
      (("" (replace -1 :hide? t)
        (("" (lemma "sqrt_le")
          (("" (inst - "(1 + vcos(u, v)) / 2" "1")
            (("" (ground) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (half_angle_vcos subtype "vectors_2d_trig.mag"
    "{x: reals.real | booleans.AND(reals.<=((number_fields.-)(1), x), reals.<=(x, 1))}"))
  (half_angle_vcos_TCC2-1 nil 3874127250 ("" (subtype-tcc) nil nil) nil
   nil
   (half_angle_vcos subtype "vectors_2d_trig.mag"
    "{x: reals.real | booleans.AND(reals.<=((number_fields.-)(1), x), reals.<=(x, 1))}")))
 (half_angle_vcos_TCC3 0
  (half_angle_vcos_TCC3-2 nil 3874129020
   ("" (skeep)
    (("" (assert)
      (("" (lemma "sqrt_le")
        (("" (inst - "(1 + vcos(u, v)) / 2" "1")
          (("" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak
   (half_angle_vcos subtype "(number_fields.-)(vectors_2d_trig.mag)"
    "{x: reals.real | booleans.AND(reals.<=((number_fields.-)(1), x), reals.<=(x, 1))}"))
  (half_angle_vcos_TCC3-1 nil 3874127250 ("" (subtype-tcc) nil nil) nil
   nil
   (half_angle_vcos subtype "(number_fields.-)(vectors_2d_trig.mag)"
    "{x: reals.real | booleans.AND(reals.<=((number_fields.-)(1), x), reals.<=(x, 1))}")))
 (half_angle_vsin_vcos_same_TCC1 0
  (half_angle_vsin_vcos_same_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (half_angle_vsin_vcos_same subtype
    "(vectors_2D.-)(vectors_2d_trig.u)" "Normalized"))
  (half_angle_vsin_vcos_same_TCC1-1 nil 3874127250
   ("" (subtype-tcc) nil nil) nil nil
   (half_angle_vsin_vcos_same subtype
    "(vectors_2D.-)(vectors_2d_trig.u)" "Normalized")))
 (half_angle_vsin_vcos_same 0
  (half_angle_vsin_vcos_same-1 nil 3874129020
   ("" (skeep)
    (("" (use "dot_normalized_eq_1")
      (("" (flatten)
        (("" (expand "half_angle_vsin")
          (("" (expand "half_angle_vcos")
            (("" (expand "vcos")
              (("" (replace -1)
                (("" (replace -2)
                  (("" (ground)
                    (("" (lift-if)
                      (("" (ground)
                        (("" (rewrite "cross_self_zero")
                          (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (half_angle_sine_dir_nonparallel_TCC1 0
  (half_angle_sine_dir_nonparallel_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (replace -3) (("" (rewrite "add_move_left" :dir rl) nil nil))
      nil))
    nil)
   nil shostak
   (half_angle_sine_dir_nonparallel subtype "vectors_2d_trig.uv"
    "Nz_vector"))
  (half_angle_sine_dir_nonparallel_TCC1-1 nil 3874127250
   ("" (subtype-tcc) nil nil) nil nil
   (half_angle_sine_dir_nonparallel subtype "vectors_2d_trig.uv"
    "Nz_vector")))
 (half_angle_sine_dir_nonparallel_TCC2 0
  (half_angle_sine_dir_nonparallel_TCC2-2 nil 3874129020
   ("" (skeep)
    (("" (replace -3)
      (("" (move-terms -2 r 2) (("" (assert) nil nil)) nil)) nil))
    nil)
   nil shostak
   (half_angle_sine_dir_nonparallel subtype "vectors_2d_trig.wv"
    "Nz_vector"))
  (half_angle_sine_dir_nonparallel_TCC2-1 nil 3874127250
   ("" (subtype-tcc) nil nil) nil nil
   (half_angle_sine_dir_nonparallel subtype "vectors_2d_trig.wv"
    "Nz_vector")))
 (half_angle_sine_dir_nonparallel_TCC3 0
  (half_angle_sine_dir_nonparallel_TCC3-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (half_angle_sine_dir_nonparallel subtype
    "number_fields./(((number_fields.-)(1, vectors_2d_trig.vcos(vectors_2D.^(vectors_2d_trig.uv), vectors_2D.^(vectors_2d_trig.wv)))), 2)"
    "nonneg_real"))
  (half_angle_sine_dir_nonparallel_TCC3-1 nil 3874127250
   ("" (subtype-tcc) nil nil) nil nil
   (half_angle_sine_dir_nonparallel subtype
    "number_fields./(((number_fields.-)(1, vectors_2d_trig.vcos(vectors_2D.^(vectors_2d_trig.uv), vectors_2D.^(vectors_2d_trig.wv)))), 2)"
    "nonneg_real")))
 (half_angle_sine_dir_nonparallel 0
  (half_angle_sine_dir_nonparallel-1 nil 3874129020
   ("" (skeep + t)
    (("" (skoletin*)
      (("" (typepred "vcos(^(uv), ^(wv))")
        (("1" (expand "vcos")
          (("1" (use "dot_normalized_lt_1")
            (("1" (split -1)
              (("1" (rewrite "dir_parallel_eqv_normalized_diffs_eq")
                (("1" (assert) nil nil)) nil)
               ("2" (assert)
                (("2" (lemma "sqrt_eq_0")
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2 5)
          (("2" (ground)
            (("2" (replace -1)
              (("2" (move-terms -2 r 2) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("3" (hide 2 5)
          (("3" (ground)
            (("3" (replace -1)
              (("3" (move-terms -3 r 2) (("3" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (half_angle_cosine_dir_nonparallel 0
  (half_angle_cosine_dir_nonparallel-1 nil 3874129020
   ("" (skeep + t)
    (("" (assert)
      (("" (expand "half_angle_vcos")
        (("" (lift-if)
          (("" (ground)
            (("" (lemma "sqrt_lt")
              (("" (inst - "(1 + vcos(^(u - v), ^(w - v))) / 2" "1")
                (("" (assert)
                  (("" (cross-mult 1)
                    (("" (use "half_angle_sine_dir_nonparallel")
                      (("" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (alt_half_angle_vsin_TCC1 0
  (alt_half_angle_vsin_TCC1-2 nil 3874129020
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (alt_half_angle_vsin subtype
    "(vectors_2D.-)(vectors_2d_trig.u, vectors_2d_trig.v)"
    "Nz_vector"))
  (alt_half_angle_vsin_TCC1-1 nil 3874127250 ("" (subtype-tcc) nil nil)
   nil nil
   (alt_half_angle_vsin subtype
    "(vectors_2D.-)(vectors_2d_trig.u, vectors_2d_trig.v)"
    "Nz_vector")))
 (alt_half_angle_vsin_TCC2 0
  (alt_half_angle_vsin_TCC2-2 nil 3874129020
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (alt_half_angle_vsin subtype
    "(vectors_2D.-)(vectors_2d_trig.w, vectors_2d_trig.v)"
    "Nz_vector"))
  (alt_half_angle_vsin_TCC2-1 nil 3874127250 ("" (subtype-tcc) nil nil)
   nil nil
   (alt_half_angle_vsin subtype
    "(vectors_2D.-)(vectors_2d_trig.w, vectors_2d_trig.v)"
    "Nz_vector")))
 (alt_half_angle_vsin_TCC3 0
  (alt_half_angle_vsin_TCC3-2 nil 3874129020
   ("" (skeep)
    (("" (use "norm_eq_0")
      (("" (assert)
        (("" (move-terms -1 l 2) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak
   (alt_half_angle_vsin subtype
    "vectors_2D.norm((vectors_2D.+)(vectors_2d_trig.uv, vectors_2d_trig.wv))"
    "nznum"))
  (alt_half_angle_vsin_TCC3-1 nil 3874127250 ("" (subtype-tcc) nil nil)
   nil nil
   (alt_half_angle_vsin subtype
    "vectors_2D.norm((vectors_2D.+)(vectors_2d_trig.uv, vectors_2d_trig.wv))"
    "nznum")))
 (alt_half_angle_vsin_TCC4 0
  (alt_half_angle_vsin_TCC4-2 nil 3874129020
   ("" (skeep)
    (("" (lemma "alt_half_angle_vsin_TCC3")
      (("" (inst - "v" "u" "w" "uv" "wv")
        (("" (assert)
          (("" (flatten)
            (("" (ground)
              (("1" (cross-mult 1) nil nil)
               ("2" (cross-mult 1)
                (("2" (rewrite "sq_le" 1 :dir rl)
                  (("2" (expand "norm")
                    (("2" (use "sq_sqrt")
                      (("2" (split -1)
                        (("1" (replace -1 :hide? t)
                          (("1" (rewrite "sqv_add")
                            (("1" (rewrite* "sqv_normalized_eq_1")
                              (("1"
                                (use "sum_squares_cross_and_dot")
                                (("1"
                                  (move-terms -1 l 1)
                                  (("1"
                                    (replace -1 :hide? t)
                                    (("1"
                                      (move-terms 1 l)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (equate
                                           (! 1 r)
                                           "sq(1 + uv * wv)")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (expand "sq")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (alt_half_angle_vsin subtype
    "number_fields./(real_defs.abs(vectors_cross_2d.cross(vectors_2d_trig.uv, vectors_2d_trig.wv)), vectors_2D.norm((vectors_2D.+)(vectors_2d_trig.uv, vectors_2d_trig.wv)))"
    "{x: reals.real | booleans.AND(reals.<=(0, x), reals.<=(x, 1))}"))
  (alt_half_angle_vsin_TCC4-1 nil 3874127250 ("" (subtype-tcc) nil nil)
   nil nil
   (alt_half_angle_vsin subtype
    "number_fields./(real_defs.abs(vectors_cross_2d.cross(vectors_2d_trig.uv, vectors_2d_trig.wv)), vectors_2D.norm((vectors_2D.+)(vectors_2d_trig.uv, vectors_2d_trig.wv)))"
    "{x: reals.real | booleans.AND(reals.<=(0, x), reals.<=(x, 1))}")))
 (alt_half_angle_vcos_TCC1 0
  (alt_half_angle_vcos_TCC1-2 nil 3874129020
   ("" (skeep*)
    (("" (replace -3 :hide? t)
      (("" (case "norm(uv + wv) = 0")
        (("1" (use "norm_eq_0")
          (("1" (assert)
            (("1" (move-terms -1 l 2) (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (ground)
          (("1" (case "0 <= (1 + uv * wv) / norm(uv + wv)")
            (("1" (assert) nil nil)
             ("2" (cross-mult 1)
              (("2" (use "abs_dot_and_cross_le_1")
                (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("2" (cross-mult 1)
            (("2" (rewrite "sq_le" 1 :dir rl)
              (("2" (expand "norm")
                (("2" (use "sq_sqrt")
                  (("2" (split -1)
                    (("1" (replace -1 :hide? t)
                      (("1" (rewrite "sqv_add")
                        (("1" (rewrite* "sqv_normalized_eq_1")
                          (("1" (expand "sq")
                            (("1" (assert)
                              (("1"
                                (factor 1 l (2 3))
                                (("1"
                                  (assert)
                                  (("1"
                                    (cancel-add 1)
                                    (("1"
                                      (use "abs_dot_and_cross_le_1")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (rewrite "sq_le" :dir rl)
                                          (("1"
                                            (rewrite "sq_rew")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (alt_half_angle_vcos subtype "vectors_2d_trig.mag"
    "{x: reals.real | booleans.AND(reals.<=((number_fields.-)(1), x), reals.<=(x, 1))}"))
  (alt_half_angle_vcos_TCC1-1 nil 3874127250 ("" (subtype-tcc) nil nil)
   nil nil
   (alt_half_angle_vcos subtype "vectors_2d_trig.mag"
    "{x: reals.real | booleans.AND(reals.<=((number_fields.-)(1), x), reals.<=(x, 1))}")))
 (alt_half_angle_vcos_TCC2 0
  (alt_half_angle_vcos_TCC2-2 nil 3874129020
   ("" (skeep*)
    (("" (replace -3 :hide? t)
      (("" (case "norm(uv + wv) = 0")
        (("1" (use "norm_eq_0")
          (("1" (assert)
            (("1" (move-terms -1 l 2) (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (ground)
          (("1" (mult-by 1 "-1" -)
            (("1" (real-props)
              (("1" (rewrite "sq_le" 1 :dir rl)
                (("1" (expand "norm")
                  (("1" (use "sq_sqrt")
                    (("1" (split -1)
                      (("1" (replace -1 :hide? t)
                        (("1" (rewrite "sqv_add")
                          (("1" (rewrite* "sqv_normalized_eq_1")
                            (("1" (expand "sq")
                              (("1"
                                (assert)
                                (("1"
                                  (factor 1 l (2 3))
                                  (("1"
                                    (assert)
                                    (("1"
                                      (cancel-add 1)
                                      (("1"
                                        (use "abs_dot_and_cross_le_1")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (rewrite "sq_le" :dir rl)
                                            (("1"
                                              (rewrite "sq_rew")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (mult-by 1 "-1" -)
            (("2" (real-props)
              (("2" (move-terms 1 l)
                (("2" (assert)
                  (("2" (use "abs_dot_and_cross_le_1")
                    (("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (alt_half_angle_vcos subtype
    "(number_fields.-)(vectors_2d_trig.mag)"
    "{x: reals.real | booleans.AND(reals.<=((number_fields.-)(1), x), reals.<=(x, 1))}"))
  (alt_half_angle_vcos_TCC2-1 nil 3874127250 ("" (subtype-tcc) nil nil)
   nil nil
   (alt_half_angle_vcos subtype
    "(number_fields.-)(vectors_2d_trig.mag)"
    "{x: reals.real | booleans.AND(reals.<=((number_fields.-)(1), x), reals.<=(x, 1))}")))
 (half_angle_sine_defns_equiv_TCC1 0
  (half_angle_sine_defns_equiv_TCC1-2 nil 3874129020
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (half_angle_sine_defns_equiv subtype
    "(vectors_2D.-)(vectors_2d_trig.w, vectors_2d_trig.v)"
    "Nz_vector"))
  (half_angle_sine_defns_equiv_TCC1-1 nil 3874127250
   ("" (subtype-tcc) nil nil) nil nil
   (half_angle_sine_defns_equiv subtype
    "(vectors_2D.-)(vectors_2d_trig.w, vectors_2d_trig.v)"
    "Nz_vector")))
 (half_angle_sine_defns_equiv 0
  (half_angle_sine_defns_equiv-1 nil 3874129020
   ("" (auto-rewrite "sqv_normalized_eq_1")
    (("" (skeep)
      (("" (expand "half_angle_vsin")
        (("" (expand "alt_half_angle_vsin")
          (("" (lift-if)
            (("" (ground)
              (("1" (replace -1)
                (("1" (expand "vcos")
                  (("1" (equate "-^(w - v)" "-1 * ^(w - v)")
                    (("1" (rewrite "dot_scal_left")
                      (("1" (use "dot_normalized_eq_1")
                        (("1" (flatten)
                          (("1" (replace -1) (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "vcos")
                (("2" (lemma "dot_normalized_lt_1")
                  (("2" (inst - "^(u - v)" "^(w - v)")
                    (("2" (ground)
                      (("1" (replace -1)
                        (("1" (rewrite "cross_self_zero")
                          (("1" (use "dot_normalized_eq_1")
                            (("1" (flatten)
                              (("1"
                                (replace -1)
                                (("1"
                                  (expand "abs")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "norm")
                        (("2" (rewrite "sq_eq" :dir rl)
                          (("1" (rewrite "sq_div")
                            (("1" (cross-mult 2)
                              (("1"
                                (use "sum_squares_cross_and_dot")
                                (("1"
                                  (move-terms -1 l 1)
                                  (("1"
                                    (replace -1 :hide? t)
                                    (("1"
                                      (rewrite "sqv_add")
                                      (("1"
                                        (expand "sq")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (prop)
                              (("2"
                                (hide 2)
                                (("2"
                                  (equate "0" "sqrt(0)" (assert))
                                  (("2"
                                    (use "sqrt_eq")
                                    (("2"
                                      (replace -1 :hide? t)
                                      (("2"
                                        (rewrite "sqv_add")
                                        (("2"
                                          (use
                                           "dot_normalized_gt_neg_1")
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (cross-mult 1)
                            (("2" (ground)
                              (("2"
                                (hide 3)
                                (("2"
                                  (lemma "sqrt_gt_0")
                                  (("2"
                                    (inst - "sqv(^(u - v) + ^(w - v))")
                                    (("2"
                                      (replace -1 :dir rl :hide? t)
                                      (("2"
                                        (rewrite "sqv_add")
                                        (("2"
                                          (use
                                           "dot_normalized_gt_neg_1")
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (half_angle_cosine_defns_equiv 0
  (half_angle_cosine_defns_equiv-1 nil 3874129020
   ("" (auto-rewrite "sqv_normalized_eq_1" "cross_self_zero")
    (("" (skeep)
      (("" (expand "half_angle_vcos")
        (("" (expand "alt_half_angle_vcos")
          (("" (case-replace "^(u - v) = -^(w - v)")
            (("1" (expand "vcos")
              (("1" (case-replace "-^(w - v) = -1 * ^(w - v)")
                (("1" (rewrite "cross_scales_1")
                  (("1" (rewrite "dot_scal_left")
                    (("1" (assert)
                      (("1" (use "dot_normalized_eq_1")
                        (("1" (ground)
                          (("1" (replace -1) (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (lift-if)
                (("2" (case "norm(^(u - v) + ^(w - v)) = 0")
                  (("1" (use "norm_eq_0")
                    (("1" (assert)
                      (("1" (hide 2)
                        (("1" (move-terms -1 l 2)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "(1 + ^(u - v) * ^(w - v)) / 2 >= 0")
                    (("1"
                      (case "sqrt((1 + vcos(^(u - v), ^(w - v))) / 2) =
              (1 + ^(u - v) * ^(w - v)) / norm(^(u - v) + ^(w - v))")
                      (("1" (replace -1 :hide? t)
                        (("1" (ground) nil nil)) nil)
                       ("2" (hide 4)
                        (("2" (lemma "dot_normalized_lt_1")
                          (("2" (inst - "^(u - v)" "^(w - v)")
                            (("2" (ground)
                              (("1"
                                (replace -1)
                                (("1"
                                  (expand "vcos")
                                  (("1"
                                    (use "dot_normalized_eq_1")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (factor! (! 1 r 2 1))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (rewrite "norm_scal")
                                                (("1"
                                                  (expand "abs")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "norm")
                                (("2"
                                  (rewrite "sq_eq" :dir rl)
                                  (("1"
                                    (rewrite "sq_div")
                                    (("1"
                                      (rewrite "sqv_add")
                                      (("1"
                                        (cross-mult 1)
                                        (("1"
                                          (expand "sq")
                                          (("1"
                                            (expand "vcos")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (cross-mult 1) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (assert) nil nil)
                       ("4" (expand "vcos") (("4" (propax) nil nil))
                        nil))
                      nil)
                     ("2" (hide 4)
                      (("2" (cross-mult 1)
                        (("2" (use "dot_normalized_gt_neg_1")
                          (("2" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (law_of_cosines_sqv 0
  (law_of_cosines_sqv-1 nil 3874129020 ("" (grind) nil nil) nil
   shostak))
 (law_of_cosines_sq 0
  (law_of_cosines_sq-1 nil 3874129020
   ("" (auto-rewrite "sq_norm") (("" (grind) nil nil)) nil) nil
   shostak))
 (law_of_cosines_sq_vcos_TCC1 0
  (law_of_cosines_sq_vcos_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (law_of_cosines_sq_vcos subtype
    "(vectors_2D.-)(vectors_2d_trig.u, vectors_2d_trig.v)"
    "Nz_vector"))
  (law_of_cosines_sq_vcos_TCC1-1 nil 3874127250
   ("" (subtype-tcc) nil nil) nil nil
   (law_of_cosines_sq_vcos subtype
    "(vectors_2D.-)(vectors_2d_trig.u, vectors_2d_trig.v)"
    "Nz_vector")))
 (law_of_cosines_sq_vcos_TCC2 0
  (law_of_cosines_sq_vcos_TCC2-2 nil 3874129020
   ("" (skeep*)
    (("" (use "vect_sub_eq_zero") (("" (assert) nil nil)) nil)) nil)
   nil shostak
   (law_of_cosines_sq_vcos subtype
    "(vectors_2D.-)(vectors_2d_trig.w, vectors_2d_trig.v)"
    "Nz_vector"))
  (law_of_cosines_sq_vcos_TCC2-1 nil 3874127250
   ("" (subtype-tcc) nil nil) nil nil
   (law_of_cosines_sq_vcos subtype
    "(vectors_2D.-)(vectors_2d_trig.w, vectors_2d_trig.v)"
    "Nz_vector")))
 (law_of_cosines_sq_vcos 0
  (law_of_cosines_sq_vcos-1 nil 3874129020
   ("" (skeep)
    (("" (skoletin*)
      (("" (lemma "law_of_cosines_sq" ("u" "u" "v" "v" "w" "w"))
        (("" (assert)
          (("" (expand* "vcos" "^") (("" (real-props) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (dot_0_eqv_perp_vectors_TCC1 0
  (dot_0_eqv_perp_vectors_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (use "perp_left_nzvect_neq_zero") (("" (assert) nil nil))
      nil))
    nil)
   nil shostak
   (dot_0_eqv_perp_vectors subtype
    "vectors_cross_2d.perp_left(vectors_2d_trig.u)" "Nz_vector"))
  (dot_0_eqv_perp_vectors_TCC1-1 nil 3874127250
   ("" (subtype-tcc) nil nil) nil nil
   (dot_0_eqv_perp_vectors subtype
    "vectors_cross_2d.perp_left(vectors_2d_trig.u)" "Nz_vector")))
 (dot_0_eqv_perp_vectors_TCC2 0
  (dot_0_eqv_perp_vectors_TCC2-2 nil 3874129020
   ("" (skeep)
    (("" (use "perp_right_nzvect_neq_zero") (("" (assert) nil nil))
      nil))
    nil)
   nil shostak
   (dot_0_eqv_perp_vectors subtype
    "vectors_cross_2d.perp_right(vectors_2d_trig.u)" "Nz_vector"))
  (dot_0_eqv_perp_vectors_TCC2-1 nil 3874127250
   ("" (subtype-tcc) nil nil) nil nil
   (dot_0_eqv_perp_vectors subtype
    "vectors_cross_2d.perp_right(vectors_2d_trig.u)" "Nz_vector")))
 (dot_0_eqv_perp_vectors 0
  (dot_0_eqv_perp_vectors-1 nil 3874129020
   (""
    (auto-rewrite "vect_sub_eq_zero" "add_cancel_add_2"
                  "add_cancel_sub_2" "perp_left_nzvect_neq_zero"
                  "perp_right_nzvect_neq_zero")
    (("" (skeep)
      (("" (ground)
        (("1" (typepred "u" "v")
          (("1" (flatten)
            (("1" (expand "^")
              (("1" (cross-mult +)
                (("1" (rewrite "norm_perp_right_is_norm_right")
                  (("1" (rewrite "norm_perp_left_is_norm_left")
                    (("1" (expand* "perp_left" "perp_right")
                      (("1"
                        (equate "norm(u) * v"
                         "norm(u) * (# x := v`x, y := v`y #)")
                        (("1" (expand "*")
                          (("1" (move-terms -1 l 2)
                            (("1" (assert)
                              (("1"
                                (equate
                                 "-1 * (u`y * v`y)"
                                 "-(u`y * v`y)")
                                (("1"
                                  (case
                                   "sq(u`x) * sq(v`x) = sq(u`y) * sq(v`y)")
                                  (("1"
                                    (case "v = (v`x, v`y)")
                                    (("1"
                                      (case "u = (u`x, u`y)")
                                      (("1"
                                        (expand "zero")
                                        (("1"
                                          (case
                                           "forall (a, b: real):                                 
                                                       (sq(u`x) + sq(u`y)) * sq(a) = (sq(v`x) + sq(v`y)) * sq(b)                                  
                                                       & (norm(u) * a < 0 iff norm(v) * b < 0) =>                                                 
                                                         norm(u) * a = norm(v) * b")
                                          (("1"
                                            (case "u`x < 0")
                                            (("1"
                                              (case "u`y < 0")
                                              (("1"
                                                (case "v`x < 0")
                                                (("1"
                                                  (case "v`y < 0")
                                                  (("1"
                                                    (hide-all-but
                                                     (-1 -2 -3 -4 -7))
                                                    (("1"
                                                      (case
                                                       "u`y * v`y > 0 & u`x * v`x > 0")
                                                      (("1"
                                                        (ground)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (ground)
                                                        (("1"
                                                          (mult-cases
                                                           1)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (mult-cases
                                                           1)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst-cp
                                                     -
                                                     "v`x"
                                                     "u`y")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "v`y"
                                                       "-u`x")
                                                      (("2"
                                                        (split -4)
                                                        (("1"
                                                          (split -5)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (real-props)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (flatten)
                                                            (("3"
                                                              (mult-cases
                                                               1)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (flatten)
                                                            (("4"
                                                              (mult-cases
                                                               1)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           "sq_neg")
                                                          (("2"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (flatten)
                                                          (("3"
                                                            (field)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (flatten)
                                                          (("4"
                                                            (field)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "v`y < 0")
                                                  (("1"
                                                    (inst-cp
                                                     -
                                                     "v`x"
                                                     "-u`y")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "v`y"
                                                       "u`x")
                                                      (("1"
                                                        (split -4)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split 2)
                                                              (("1"
                                                                (rewrite
                                                                 "sq_neg")
                                                                (("1"
                                                                  (real-props)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (mult-cases
                                                                   -1)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (flatten)
                                                                (("3"
                                                                  (mult-cases
                                                                   -1)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (real-props)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (flatten)
                                                          (("3"
                                                            (field)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (flatten)
                                                          (("4"
                                                            (field)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "u`y * v`y <= 0")
                                                    (("1"
                                                      (case
                                                       "u`x * v`x <= 0")
                                                      (("1"
                                                        (case-replace
                                                         "v`y = 0")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (field)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (field)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (field)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (field)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "v`x < 0")
                                                (("1"
                                                  (case "v`y < 0")
                                                  (("1"
                                                    (inst-cp
                                                     -
                                                     "v`x"
                                                     "-u`y")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "v`y"
                                                       "u`x")
                                                      (("1"
                                                        (split -4)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split 2)
                                                              (("1"
                                                                (rewrite
                                                                 "sq_neg")
                                                                (("1"
                                                                  (real-props)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (case-replace
                                                                   "u`y = 0")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (equate
                                                                       "-(0 * v`y)"
                                                                       "0"
                                                                       (assert))
                                                                      (("1"
                                                                        (field)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (field)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (flatten)
                                                                (("3"
                                                                  (field)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (flatten)
                                                          (("3"
                                                            (field)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (flatten)
                                                          (("4"
                                                            (field)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "u`y * v`y >= 0 & u`x * v`x > 0")
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (split 1)
                                                      (("1"
                                                        (field)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (field)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "v`y < 0")
                                                  (("1"
                                                    (case-replace
                                                     "u`x = 0")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "u`y * v`y <= 0")
                                                      (("1"
                                                        (case
                                                         "u`x * v`x < 0")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (case-replace
                                                           "v`x = 0")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (mult-cases
                                                               -2)
                                                              (("1"
                                                                (case-replace
                                                                 "u`y = 0")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "v`y"
                                                                     "u`x")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (ground)
                                                                        (("1"
                                                                          (field)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (field)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "-(u`y * v`y) > 0")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (move-terms
                                                                     1
                                                                     l)
                                                                    (("2"
                                                                      (elim-unary
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (field)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (case-replace
                                                             "u`y = 0")
                                                            (("1"
                                                              (field)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "u`x * v`x < 0 & -(u`y * v`y) >= 0")
                                                              (("1"
                                                                (ground)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (field)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (field)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst-cp
                                                     -
                                                     "v`x"
                                                     "u`y")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "v`y"
                                                       "-u`x")
                                                      (("2"
                                                        (split -2)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -3)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (field)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (flatten)
                                                              (("3"
                                                                (field)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           "sq_neg")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (flatten)
                                                          (("3"
                                                            (field)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (flatten)
                                                          (("4"
                                                            (case-replace
                                                             "v`y = 0")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (field)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case-replace
                                                               "v`x = 0")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (field)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (field)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case "u`y < 0")
                                              (("1"
                                                (case "v`x < 0")
                                                (("1"
                                                  (case "v`y < 0")
                                                  (("1"
                                                    (case-replace
                                                     "u`x = 0")
                                                    (("1"
                                                      (case
                                                       "u`y * v`y > 0")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (field)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst-cp
                                                       -
                                                       "v`x"
                                                       "u`y")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "v`y"
                                                         "-u`x")
                                                        (("2"
                                                          (split -4)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split
                                                               -5)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (field)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (flatten)
                                                                (("3"
                                                                  (field)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "sq_neg")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (flatten)
                                                            (("3"
                                                              (field)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (flatten)
                                                            (("4"
                                                              (field)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case-replace
                                                     "v`y = 0")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst
                                                         -
                                                         "v`x"
                                                         "u`y")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (apply
                                                             (branch
                                                              (ground)
                                                              ((field))))
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (case
                                                         "u`y * v`y < 0")
                                                        (("1"
                                                          (case
                                                           "u`x * v`x <= 0")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (field)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (field)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "v`y < 0")
                                                  (("1"
                                                    (case
                                                     "u`y * v`y > 0")
                                                    (("1"
                                                      (case
                                                       "u`x * v`x >= 0")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (field)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (field)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst-cp
                                                     -
                                                     "v`x"
                                                     "-u`y")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "v`y"
                                                       "u`x")
                                                      (("2"
                                                        (split -2)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -3)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (rewrite
                                                               "sq_neg")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (field)
                                                              nil
                                                              nil)
                                                             ("4"
                                                              (field)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (flatten)
                                                          (("3"
                                                            (field)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (flatten)
                                                          (("4"
                                                            (field)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "v`x < 0")
                                                (("1"
                                                  (case "v`y < 0")
                                                  (("1"
                                                    (case-replace
                                                     "u`x = 0")
                                                    (("1"
                                                      (case
                                                       "u`y * v`y < 0")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (field)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (case
                                                       "u`x * v`x < 0")
                                                      (("1"
                                                        (case
                                                         "u`y * v`y <= 0")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (field)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (field)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst-cp
                                                     -
                                                     "v`x"
                                                     "-u`y")
                                                    (("2"
                                                      (inst
                                                       -
                                                       "v`y"
                                                       "u`x")
                                                      (("2"
                                                        (split -2)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split 4)
                                                              (("1"
                                                                (rewrite
                                                                 "sq_neg")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (case-replace
                                                                   "u`y = 0")
                                                                  (("1"
                                                                    (case
                                                                     "u`x * v`x < 0")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (field)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (field)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (flatten)
                                                                (("3"
                                                                  (field)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (flatten)
                                                          (("3"
                                                            (field)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (flatten)
                                                          (("4"
                                                            (field)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "v`y < 0")
                                                  (("1"
                                                    (inst-cp
                                                     -
                                                     "v`x"
                                                     "u`y")
                                                    (("1"
                                                      (inst
                                                       -
                                                       "v`y"
                                                       "-u`x")
                                                      (("1"
                                                        (split -2)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -3)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (field)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (flatten)
                                                              (("3"
                                                                (field)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (rewrite
                                                           "sq_neg")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (flatten)
                                                          (("3"
                                                            (mult-cases
                                                             1)
                                                            (("3"
                                                              (case
                                                               "u`y * v`y < 0")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (field)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (flatten)
                                                          (("4"
                                                            (field)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "u`y * v`y = 0")
                                                    (("1"
                                                      (case
                                                       "u`x * v`x = 0")
                                                      (("1"
                                                        (mult-cases -1)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case-replace
                                                               "v`x = 0")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (field)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (mult-cases
                                                                   -2)
                                                                  (("2"
                                                                    (inst
                                                                     -
                                                                     "v`x"
                                                                     "u`y")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (ground)
                                                                        (("1"
                                                                          (field)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (field)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (replace -1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (case-replace
                                                               "u`y = 0")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst
                                                                   -
                                                                   "v`y"
                                                                   "u`x")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (ground)
                                                                      (("1"
                                                                        (field)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (field)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "-(u`y * v`y) < 0")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (move-terms
                                                                   1
                                                                   l)
                                                                  (("2"
                                                                    (elim-unary
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (field)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (field)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (copy 1)
                                                      (("2"
                                                        (mult-cases 1)
                                                        (("2"
                                                          (case
                                                           "u`x = 0 or v`x = 0")
                                                          (("1"
                                                            (ground)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (case
                                                               "u`x * v`x > 0 & u`y * v`y > 0")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (field)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (field)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (lemma "sq_eq_abs")
                                              (("2"
                                                (inst
                                                 -
                                                 "norm(u) * a"
                                                 "norm(v) * b")
                                                (("2"
                                                  (expand "abs")
                                                  (("2"
                                                    (apply
                                                     (repeat
                                                      (lift-if)))
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (rewrite*
                                                                 "sq_times")
                                                                (("1"
                                                                  (rewrite*
                                                                   "sq_norm")
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-2
                                                                      1))
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (split -1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (rewrite*
                                                                 "sq_times")
                                                                (("2"
                                                                  (rewrite*
                                                                   "sq_norm")
                                                                  (("2"
                                                                    (hide-all-but
                                                                     (-1
                                                                      2))
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 4 5)
                                        (("2"
                                          (grind)
                                          (("2"
                                            (cancel-by 1 "norm(u)")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (apply-extensionality :hide? t)
                                      nil
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 4 5)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (cancel-by 1 "norm(u)")
                          (("2" (apply-extensionality :hide? t) nil
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "^")
          (("2" (cross-mult -1)
            (("2" (rewrite "norm_perp_left_is_norm_left")
              (("2" (div-by -1 "norm(u)")
                (("2" (replace -1 :hide? t) (("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (expand "^")
          (("3" (cross-mult -1)
            (("3" (rewrite "norm_perp_right_is_norm_right")
              (("3" (div-by -1 "norm(u)")
                (("3" (replace -1 :hide? t) (("3" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (norm_perp_sum_le_eqv_norm_le 0
  (norm_perp_sum_le_eqv_norm_le-1 nil 3874129020
   ("" (auto-rewrite "sqrt_le" "sqv_add") (("" (grind) nil nil)) nil)
   nil shostak))
 (norm_perp_diff_le_eqv_norm_le 0
  (norm_perp_diff_le_eqv_norm_le-1 nil 3874129020
   ("" (auto-rewrite "sqrt_le" "sqv_sub") (("" (grind) nil nil)) nil)
   nil shostak))
 (pythagorean_path_between_points 0
  (pythagorean_path_between_points-1 nil 3874129020
   ("" (skeep + t)
    (("" (name "tp" "perp_pt(q, p, v)")
      (("" (lemma "perp_is_normal")
        (("" (inst - "p" "q" "v" "1+tp" "tp")
          (("" (assert)
            (("" (inst + "tp" _)
              (("" (name-replace "r" "p + tp * v" :hide? nil)
                (("" (case "q=r")
                  (("1" (inst + "0") (("1" (assert) nil nil)) nil)
                   ("2" (inst-cp + "norm(q - r)")
                    (("2" (inst + "-norm(q - r)")
                      (("2" (move-terms 2 r 1)
                        (("2" (move-terms 3 r 1)
                          (("2" (auto-rewrite "vect_sub_eq_zero")
                            (("2" (rewrite "dot_0_eqv_perp_vectors")
                              (("2"
                                (expand "^")
                                (("2"
                                  (rewrite
                                   "norm_perp_right_is_norm_right")
                                  (("2"
                                    (rewrite
                                     "norm_perp_left_is_norm_left")
                                    (("2"
                                      (replace -4)
                                      (("2"
                                        (hide-all-but (-2 2 3))
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (perp_ray_line_xing_components_TCC1 0
  (perp_ray_line_xing_components_TCC1-2 nil 3874129020
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (perp_ray_line_xing_components subtype
    "(vectors_2D.-)(vectors_2d_trig.v, vectors_2d_trig.u)"
    "Nz_vector"))
  (perp_ray_line_xing_components_TCC1-1 nil 3874127250
   ("" (subtype-tcc) nil nil) nil nil
   (perp_ray_line_xing_components subtype
    "(vectors_2D.-)(vectors_2d_trig.v, vectors_2d_trig.u)"
    "Nz_vector")))
 (perp_ray_line_xing_components_TCC2 0
  (perp_ray_line_xing_components_TCC2-2 nil 3874129020
   ("" (auto-rewrite "vect_sub_eq_zero")
    (("" (skeep*) (("" (assert) nil nil)) nil)) nil)
   nil shostak
   (perp_ray_line_xing_components subtype
    "(vectors_2D.-)(vectors_2d_trig.w, vectors_2d_trig.u)"
    "Nz_vector"))
  (perp_ray_line_xing_components_TCC2-1 nil 3874127250
   ("" (subtype-tcc) nil nil) nil nil
   (perp_ray_line_xing_components subtype
    "(vectors_2D.-)(vectors_2d_trig.w, vectors_2d_trig.u)"
    "Nz_vector")))
 (perp_ray_line_xing_components 0
  (perp_ray_line_xing_components-1 nil 3874129020
   ("" (skeep + t)
    (("" (skoletin*)
      (("" (flatten)
        (("" (inst + "c * vcos(dir_w, dir_v)" "c * vsin(dir_w, dir_v)")
          (("1" (ground)
            (("1" (rewrite* "sq_times")
              (("1" (factor 1 r)
                (("1" (lemma "vsin_sq_plus_vcos_sq")
                  (("1" (inst - "dir_w" "dir_v")
                    (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "perp_comps_cos_sin_right")
              (("2" (inst - "dir_w" "dir_v")
                (("2" (mult-by -1 "c")
                  (("2" (distrib -1) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (rewrite "parallel_equiv_cross_eq_0")
            (("2" (expand "vsin")
              (("2" (ground) (("2" (field) nil nil)) nil)) nil))
            nil)
           ("3" (flatten)
            (("3" (expand "vcos") (("3" (field) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (segment_bisect_vector_TCC1 0
  (segment_bisect_vector_TCC1-2 nil 3874129020
   ("" (skeep) (("" (replace -2) (("" (assert) nil nil)) nil)) nil) nil
   shostak
   (segment_bisect_vector subtype "vectors_2d_trig.wv" "Nz_vector"))
  (segment_bisect_vector_TCC1-1 nil 3874127250
   ("" (subtype-tcc) nil nil) nil nil
   (segment_bisect_vector subtype "vectors_2d_trig.wv" "Nz_vector")))
 (segment_bisect_vector_TCC2 0
  (segment_bisect_vector_TCC2-2 nil 3874129020
   ("" (skeep) (("" (replace -1) (("" (assert) nil nil)) nil)) nil) nil
   shostak
   (segment_bisect_vector subtype "vectors_2d_trig.uv" "Nz_vector"))
  (segment_bisect_vector_TCC2-1 nil 3874127250
   ("" (subtype-tcc) nil nil) nil nil
   (segment_bisect_vector subtype "vectors_2d_trig.uv" "Nz_vector")))
 (segment_bisect_vector_TCC3 0
  (segment_bisect_vector_TCC3-2 nil 3874129020
   ("" (skeep)
    (("" (replace -1)
      (("" (hide-all-but -6)
        (("" (use "comps_eq")
          (("" (replace -1 :hide? t)
            (("" (use "sub_eq_zero") (("" (grind-with-ext) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (segment_bisect_vector subtype
    "vectors_cross_2d.perp_right(vectors_2d_trig.uv)" "Nz_vector"))
  (segment_bisect_vector_TCC3-1 nil 3874127250
   ("" (subtype-tcc) nil nil) nil nil
   (segment_bisect_vector subtype
    "vectors_cross_2d.perp_right(vectors_2d_trig.uv)" "Nz_vector")))
 (segment_bisect_vector_TCC4 0
  (segment_bisect_vector_TCC4-2 nil 3874129020
   ("" (skeep)
    (("" (replace -6 :hide? t)
      (("" (replace -3)
        (("" (rewrite "parallel_equiv_cross_eq_0" :dir rl)
          (("" (expand "parallel?")
            (("" (name-replace* ("nuv" "^(uv)" "nwv" "^(wv)"))
              (("" (move-terms -6 r 2)
                (("" (assert)
                  (("" (replace -1 :dir rl :hide? t)
                    (("" (replace -1 :dir rl :hide? t)
                      (("" (expand "^")
                        (("" (mult-by -4 "norm(wv)")
                          (("" (rewrite "scal_neg")
                            (("" (real-props)
                              ((""
                                (replace -1 :dir rl)
                                ((""
                                  (inst + "-norm(uv) / norm(wv)")
                                  (("1" (real-props) nil nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (cross-mult -1)
                                      (("2"
                                        (real-props)
                                        (("2"
                                          (use "norm_eq_0")
                                          (("2"
                                            (use "sub_eq_zero")
                                            (("2" (ground) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (flatten)
                                    (("3"
                                      (use "norm_eq_0")
                                      (("3"
                                        (lemma "sub_eq_zero")
                                        (("3"
                                          (inst - "w" "v")
                                          (("3" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (segment_bisect_vector subtype "vectors_2d_trig.a" "Nz_vector"))
  (segment_bisect_vector_TCC4-1 nil 3874127250
   ("" (subtype-tcc) nil nil) nil nil
   (segment_bisect_vector subtype "vectors_2d_trig.a" "Nz_vector")))
 (segment_bisect_vector_TCC5 0
  (segment_bisect_vector_TCC5-2 nil 3874129020
   ("" (skeep)
    (("" (move-terms -5 l)
      (("" (assert)
        (("" (replace -4 :hide? t)
          (("" (replace -3 :hide? t)
            (("" (rewrite "parallel_equiv_cross_eq_0" :dir rl)
              (("" (expand "parallel?")
                (("" (name-replace* ("nuv" "^(uv)" "nwv" "^(wv)"))
                  (("" (move-terms -5 r 2)
                    (("" (assert)
                      (("" (replace -1 :dir rl :hide? t)
                        (("" (replace -1 :dir rl :hide? t)
                          (("" (expand "^")
                            (("" (mult-by -3 "norm(wv)")
                              ((""
                                (rewrite "scal_neg")
                                ((""
                                  (real-props)
                                  ((""
                                    (replace -1 :dir rl)
                                    ((""
                                      (inst + "-norm(uv) / norm(wv)")
                                      (("1" (real-props) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (cross-mult -1)
                                          (("2"
                                            (real-props)
                                            (("2"
                                              (use "norm_eq_0")
                                              (("2"
                                                (use "sub_eq_zero")
                                                (("2"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (flatten)
                                        (("3"
                                          (use "norm_eq_0")
                                          (("3"
                                            (lemma "sub_eq_zero")
                                            (("3"
                                              (inst - "w" "v")
                                              (("3" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (segment_bisect_vector subtype "(vectors_2D.-)(vectors_2d_trig.a)"
    "Nz_vector"))
  (segment_bisect_vector_TCC5-1 nil 3874127250
   ("" (subtype-tcc) nil nil) nil nil
   (segment_bisect_vector subtype "(vectors_2D.-)(vectors_2d_trig.a)"
    "Nz_vector")))
 (miter_point_hyp_TCC1 0
  (miter_point_hyp_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (expand "half_angle_vsin")
      (("" (use "half_angle_sine_dir_nonparallel")
        (("" (assert) (("" (ground) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak (miter_point_hyp subtype "vectors_2d_trig.s" "nznum"))
  (miter_point_hyp_TCC1-1 nil 3874127250 ("" (subtype-tcc) nil nil) nil
   nil (miter_point_hyp subtype "vectors_2d_trig.s" "nznum")))
 (miter_point_TCC1 0
  (miter_point_TCC1-2 nil 3874129020
   ("" (skeep*)
    (("" (expand "half_angle_vsin")
      (("" (use "half_angle_sine_dir_nonparallel")
        (("" (assert) (("" (flatten) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak (miter_point subtype "vectors_2d_trig.hsin" "nznum"))
  (miter_point_TCC1-1 nil 3874127250 ("" (subtype-tcc) nil nil) nil nil
   (miter_point subtype "vectors_2d_trig.hsin" "nznum")))
 (miter_point_TCC2 0
  (miter_point_TCC2-2 nil 3874129020
   ("" (skeep + t)
    (("" (use "perp_left_nzvect_neq_zero")
      (("" (use "perp_right_nzvect_neq_zero") (("" (ground) nil nil))
        nil))
      nil))
    nil)
   nil shostak
   (miter_point subtype
    "vectors_cross_2d.perp_left(vectors_2d_trig.wv)" "Nz_vector"))
  (miter_point_TCC2-1 nil 3874127250 ("" (subtype-tcc) nil nil) nil nil
   (miter_point subtype
    "vectors_cross_2d.perp_left(vectors_2d_trig.wv)" "Nz_vector")))
 (miter_point_prev_TCC1 0
  (miter_point_prev_TCC1-2 nil 3874129020
   ("" (skeep)
    (("" (use "sub_eq_zero")
      (("" (ground)
        (("" (use "perp_right_nzvect_neq_zero") (("" (ground) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (miter_point_prev subtype
    "vectors_cross_2d.perp_right(vectors_2d_trig.uv)" "Nz_vector"))
  (miter_point_prev_TCC1-1 nil 3874127250 ("" (subtype-tcc) nil nil)
   nil nil
   (miter_point_prev subtype
    "vectors_cross_2d.perp_right(vectors_2d_trig.uv)" "Nz_vector")))
 (bisect_vector_cross_dot_eq 0
  (bisect_vector_cross_dot_eq-1 nil 3874129020
   ("" (skeep)
    (("" (skoletin)
      (("" (expand "segment_bisect_vector")
        (("" (lift-if)
          (("" (split -1)
            (("1" (flatten)
              (("1" (lemma "parallel_equiv_cross_eq_0")
                (("1" (inst - "u - v" "w - v")
                  (("1" (assert)
                    (("1" (typepred "w")
                      (("1" (expand "parallel?")
                        (("1" (skeep)
                          (("1" (expand "dir_parallel?")
                            (("1" (case "nzk > 0")
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (case-replace
                                 "^(perp_right(u - v)) = perp_right(^(u - v))")
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (replace -4)
                                    (("1"
                                      (rewrite "normalize_scal")
                                      (("1"
                                        (expand "sign")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (rewrite
                                             "dot_perp_right_is_zero")
                                            (("1"
                                              (ground)
                                              (("1"
                                                (equate
                                                 "-^(w - v)"
                                                 "-1 * ^(w - v)"
                                                 (assert))
                                                (("1"
                                                  (rewrite
                                                   "cross_scales_1")
                                                  (("1"
                                                    (rewrite
                                                     "cross_antisymmetric"
                                                     1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but 1)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (split -1)
                (("1" (flatten)
                  (("1" (expand "^" -2 1)
                    (("1" (replace -2)
                      (("1" (rewrite "cross_scales_1")
                        (("1" (rewrite "cross_scales_2")
                          (("1" (ground)
                            (("1" (cross-mult 1)
                              (("1"
                                (rewrite "cross_distrib_add_1")
                                (("1"
                                  (rewrite "cross_distrib_add_2")
                                  (("1"
                                    (rewrite* "cross_self_zero")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "dot_add_right")
                              (("2"
                                (rewrite "dot_add_left")
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (lemma "dot_normalized_eq_1")
                                      (("2"
                                        (inst-cp - "^(u - v)")
                                        (("2"
                                          (inst - "^(w - v)")
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "^" -1 1)
                    (("2"
                      (name-replace "n"
                       "1 / norm(-(^(w - v) + ^(u - v)))")
                      (("2" (replace -1)
                        (("2" (ground)
                          (("1"
                            (equate "n * -(^(w - v) + ^(u - v))"
                             "-n * (^(w - v) + ^(u - v))")
                            (("1" (rewrite "cross_scales_2")
                              (("1"
                                (rewrite "cross_scales_1")
                                (("1"
                                  (rewrite "cross_distrib_add_1")
                                  (("1"
                                    (rewrite "cross_distrib_add_2")
                                    (("1"
                                      (rewrite* "cross_self_zero")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (grind) nil nil)) nil))
                            nil)
                           ("2" (rewrite "dot_neg_right")
                            (("2" (rewrite "dot_neg_left")
                              (("2"
                                (rewrite "dot_add_right")
                                (("2"
                                  (rewrite "dot_add_left")
                                  (("2"
                                    (lemma "dot_normalized_eq_1")
                                    (("2"
                                      (inst-cp - "^(u - v)")
                                      (("2"
                                        (inst - "^(w - v)")
                                        (("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (miter_point_defns_equiv 0
  (miter_point_defns_equiv-1 nil 3874129020
   (""
    (auto-rewrite "cross_both_norm_eq_0" "sqv_normalized_eq_1"
                  "norm_sum_same_eq_2")
    (("" (skeep)
      (("" (expand "miter_point")
        (("" (expand "miter_point_hyp")
          (("" (name-replace "wv" "^(w - v)")
            (("" (name-replace "pl" "^(perp_left(w - v))")
              (("" (name-replace "uv" "^(u - v)")
                ((""
                  (name-replace "bv"
                   "^(segment_bisect_vector(v, u, w))")
                  (("" (cancel-add 1)
                    (("" (cross-mult 1)
                      (("" (distrib 1)
                        (("" (real-props)
                          (("" (factor 1 l)
                            (("" (div-by 1 "d")
                              ((""
                                (expand "bv")
                                ((""
                                  (expand "segment_bisect_vector")
                                  ((""
                                    (expand "uv")
                                    ((""
                                      (expand "wv")
                                      ((""
                                        (rewrite
                                         "half_angle_sine_defns_equiv")
                                        ((""
                                          (rewrite
                                           "half_angle_cosine_defns_equiv")
                                          ((""
                                            (expand
                                             "alt_half_angle_vsin")
                                            ((""
                                              (expand
                                               "alt_half_angle_vcos")
                                              ((""
                                                (case
                                                 "^(u - v) = -^(w - v)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (expand "pl")
                                                        (("1"
                                                          (grind-with-ext)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case-replace
                                                         "u - v = -(w - v)")
                                                        (("1"
                                                          (hide-all-but
                                                           2)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "^"
                                                           -2)
                                                          (("2"
                                                            (cross-mult
                                                             -2)
                                                            (("2"
                                                              (rewrite
                                                               "scal_neg")
                                                              (("2"
                                                                (replace
                                                                 -2
                                                                 3)
                                                                (("2"
                                                                  (rewrite
                                                                   "cross_scales_1")
                                                                  (("2"
                                                                    (auto-rewrite
                                                                     "cross_self_zero")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (expand "^" -1)
                                                        (("3"
                                                          (cross-mult
                                                           -1)
                                                          (("3"
                                                            (rewrite
                                                             "scal_neg")
                                                            (("3"
                                                              (replace
                                                               -1
                                                               3)
                                                              (("3"
                                                                (rewrite
                                                                 "cross_scales_1")
                                                                (("3"
                                                                  (rewrite
                                                                   "cross_self_zero")
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (case
                                                     "cross(u - v, w - v) = 0")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (typepred
                                                             "w")
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (expand
                                                                 "dir_parallel?")
                                                                (("1"
                                                                  (use
                                                                   "cross_eq_0_iff_point_on_line")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (case-replace
                                                                         "d!1 = 0")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (move-terms
                                                                           -1
                                                                           r
                                                                           1)
                                                                          (("2"
                                                                            (case
                                                                             "d!1 > 0")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (replace
                                                                               -1
                                                                               5)
                                                                              (("2"
                                                                                (rewrite
                                                                                 "normalize_scal")
                                                                                (("2"
                                                                                  (expand
                                                                                   "sign")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flip-ineq
                                                             1)
                                                            (("2"
                                                              (rewrite
                                                               "cross_both_norm_eq_0"
                                                               :dir
                                                               rl)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (case
                                                         "cross(^(u - v), ^(w - v)) >= 0")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (mult-by
                                                                 1
                                                                 "norm(^(u - v) + ^(w - v))")
                                                                (("1"
                                                                  (distrib
                                                                   1)
                                                                  (("1"
                                                                    (real-props)
                                                                    (("1"
                                                                      (equate
                                                                       "^(^(w - v) + ^(u - v))"
                                                                       "1/norm(^(u - v) + ^(w - v)) * (^(w - v) + ^(u - v))")
                                                                      (("1"
                                                                        (real-props)
                                                                        (("1"
                                                                          (expand
                                                                           "pl")
                                                                          (("1"
                                                                            (expand
                                                                             "abs")
                                                                            (("1"
                                                                              (distrib
                                                                               1)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "perp_left_preserves_norm"
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (name-replace
                                                                                   "uv1"
                                                                                   "^(u - v)")
                                                                                  (("1"
                                                                                    (name-replace
                                                                                     "wv1"
                                                                                     "^(w - v)")
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       1)
                                                                                      (("1"
                                                                                        (cancel-add
                                                                                         1)
                                                                                        (("1"
                                                                                          (use
                                                                                           "perp_comps_cos_sin_left")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "vcos")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "vsin")
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "^"
                                                                           1
                                                                           1)
                                                                          (("2"
                                                                            (rewrite
                                                                             "add_comm")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (flatten)
                                                                        (("3"
                                                                          (use
                                                                           "norm_eq_0")
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (hide-all-but
                                                                               (-1
                                                                                3))
                                                                              (("3"
                                                                                (move-terms
                                                                                 -1
                                                                                 l
                                                                                 2)
                                                                                (("3"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (use
                                                                 "cross_both_norm_gt_0")
                                                                (("2"
                                                                  (split-ineq
                                                                   -2)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (ground)
                                                              (("1"
                                                                (use
                                                                 "cross_both_norm_gt_0")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "abs")
                                                                (("2"
                                                                  (equate
                                                                   "^(-(^(w - v) + ^(u - v)))"
                                                                   "-(1/norm(^(u - v) + ^(w - v))) * (^(w - v) + ^(u - v))")
                                                                  (("1"
                                                                    (mult-by
                                                                     2
                                                                     "norm(^(u - v) + ^(w - v))")
                                                                    (("1"
                                                                      (real-props)
                                                                      (("1"
                                                                        (name-replace
                                                                         "n"
                                                                         "norm(^(u - v) + ^(w - v))")
                                                                        (("1"
                                                                          (equate
                                                                           "n * (-((1 + ^(u - v) * ^(w - v)) / n) * ^(w - v) +
         -cross(^(u - v), ^(w - v)) / n * pl)"
                                                                           "-((1 + ^(u - v) * ^(w - v)) * ^(w - v) +
         cross(^(u - v), ^(w - v)) * pl)")
                                                                          (("1"
                                                                            (name-replace
                                                                             "uv1"
                                                                             "^(u - v)")
                                                                            (("1"
                                                                              (name-replace
                                                                               "wv1"
                                                                               "^(w - v)")
                                                                              (("1"
                                                                                (move-terms
                                                                                 1
                                                                                 r)
                                                                                (("1"
                                                                                  (elim-unary
                                                                                   1)
                                                                                  (("1"
                                                                                    (distrib
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (cancel-add
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "pl")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "perp_left_preserves_norm"
                                                                                             :dir
                                                                                             rl)
                                                                                            (("1"
                                                                                              (use
                                                                                               "perp_comps_cos_sin_left")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "wv1")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "vcos")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "vsin")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (name-replace
                                                                               "uv1"
                                                                               "^(u - v)")
                                                                              (("2"
                                                                                (name-replace
                                                                                 "wv1"
                                                                                 "^(w - v)")
                                                                                (("2"
                                                                                  (grind-with-ext)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "^"
                                                                       1
                                                                       1)
                                                                      (("2"
                                                                        (equate
                                                                         "^(u - v) + ^(w - v)"
                                                                         "^(w - v) + ^(u - v)"
                                                                         (assert))
                                                                        (("1"
                                                                          (name-replace
                                                                           "s"
                                                                           "^(w - v) + ^(u - v)")
                                                                          (("1"
                                                                            (rewrite
                                                                             "norm_neg")
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (rewrite
                                                                           "add_comm")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (miter_point_defns_equiv_2 0
  (miter_point_defns_equiv_2-1 nil 3874129020
   (""
    (auto-rewrite "cross_both_norm_eq_0" "sqv_normalized_eq_1"
                  "norm_sum_same_eq_2")
    (("" (skeep)
      (("" (expand "miter_point_prev")
        (("" (expand "miter_point_hyp")
          (("" (name-replace "wv" "^(w - v)")
            (("" (name-replace "uv" "^(u - v)")
              ((""
                (name-replace "bv" "^(segment_bisect_vector(v, u, w))")
                (("" (cancel-add 1)
                  (("" (cross-mult 1)
                    (("" (distrib 1)
                      (("" (real-props)
                        (("" (factor 1 l)
                          (("" (div-by 1 "d")
                            (("" (expand "bv")
                              ((""
                                (expand "segment_bisect_vector")
                                ((""
                                  (expand "uv")
                                  ((""
                                    (expand "wv")
                                    ((""
                                      (rewrite
                                       "half_angle_sine_defns_equiv")
                                      ((""
                                        (rewrite
                                         "half_angle_cosine_defns_equiv")
                                        ((""
                                          (expand
                                           "alt_half_angle_vsin")
                                          ((""
                                            (expand
                                             "alt_half_angle_vcos")
                                            ((""
                                              (case
                                               "^(u - v) = -^(w - v)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (expand "^" -2)
                                                      (("1"
                                                        (cross-mult -2)
                                                        (("1"
                                                          (rewrite
                                                           "scal_neg")
                                                          (("1"
                                                            (replace
                                                             -2
                                                             2)
                                                            (("1"
                                                              (rewrite
                                                               "cross_scales_1")
                                                              (("1"
                                                                (auto-rewrite
                                                                 "cross_self_zero")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "^" -1)
                                                      (("2"
                                                        (cross-mult -1)
                                                        (("2"
                                                          (rewrite
                                                           "scal_neg")
                                                          (("2"
                                                            (replace
                                                             -1
                                                             3)
                                                            (("2"
                                                              (rewrite
                                                               "cross_scales_1")
                                                              (("2"
                                                                (rewrite
                                                                 "cross_self_zero")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (case
                                                   "cross(u - v, w - v) = 0")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (hide 1)
                                                          (("1"
                                                            (typepred
                                                             "w")
                                                            (("1"
                                                              (expand
                                                               "dir_parallel?")
                                                              (("1"
                                                                (use
                                                                 "cross_eq_0_iff_point_on_line")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (case-replace
                                                                       "d!1 = 0")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (move-terms
                                                                         -1
                                                                         r
                                                                         1)
                                                                        (("2"
                                                                          (case
                                                                           "d!1 > 0")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (replace
                                                                             -1
                                                                             5)
                                                                            (("2"
                                                                              (rewrite
                                                                               "normalize_scal")
                                                                              (("2"
                                                                                (expand
                                                                                 "sign")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flip-ineq 1)
                                                          (("2"
                                                            (rewrite
                                                             "cross_both_norm_eq_0"
                                                             :dir
                                                             rl)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (case
                                                       "cross(^(u - v), ^(w - v)) >= 0")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (mult-by
                                                               1
                                                               "norm(^(u - v) + ^(w - v))")
                                                              (("1"
                                                                (distrib
                                                                 1)
                                                                (("1"
                                                                  (real-props)
                                                                  (("1"
                                                                    (equate
                                                                     "^(^(w - v) + ^(u - v))"
                                                                     "1/norm(^(u - v) + ^(w - v)) * (^(w - v) + ^(u - v))")
                                                                    (("1"
                                                                      (real-props)
                                                                      (("1"
                                                                        (expand
                                                                         "abs")
                                                                        (("1"
                                                                          (distrib
                                                                           1)
                                                                          (("1"
                                                                            (rewrite
                                                                             "perp_right_preserves_norm"
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (name-replace
                                                                               "uv1"
                                                                               "^(u - v)")
                                                                              (("1"
                                                                                (name-replace
                                                                                 "wv1"
                                                                                 "^(w - v)")
                                                                                (("1"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("1"
                                                                                    (cancel-add
                                                                                     1)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "perp_comps_cos_sin_right")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -
                                                                                         "uv1"
                                                                                         "wv1")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "vcos")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "vsin")
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "^"
                                                                         1
                                                                         1)
                                                                        (("2"
                                                                          (rewrite
                                                                           "add_comm")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (flatten)
                                                                      (("3"
                                                                        (use
                                                                         "norm_eq_0")
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (hide-all-but
                                                                             (-1
                                                                              3))
                                                                            (("3"
                                                                              (move-terms
                                                                               -1
                                                                               l
                                                                               2)
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (use
                                                               "cross_both_norm_gt_0")
                                                              (("2"
                                                                (split-ineq
                                                                 -2)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (lift-if)
                                                          (("2"
                                                            (ground)
                                                            (("1"
                                                              (use
                                                               "cross_both_norm_gt_0")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "abs")
                                                              (("2"
                                                                (equate
                                                                 "^(-(^(w - v) + ^(u - v)))"
                                                                 "-(1/norm(^(u - v) + ^(w - v))) * (^(w - v) + ^(u - v))")
                                                                (("1"
                                                                  (mult-by
                                                                   2
                                                                   "norm(^(u - v) + ^(w - v))")
                                                                  (("1"
                                                                    (real-props)
                                                                    (("1"
                                                                      (name-replace
                                                                       "n"
                                                                       "norm(^(u - v) + ^(w - v))")
                                                                      (("1"
                                                                        (name-replace
                                                                         "pr"
                                                                         "^(perp_right(u - v))")
                                                                        (("1"
                                                                          (equate
                                                                           "n * (-((1 + ^(u - v) * ^(w - v)) / n) * ^(u - v) +
                                 -cross(^(u - v), ^(w - v)) / n * pr)"
                                                                           "-((1 + ^(u - v) * ^(w - v)) * ^(u - v) +
                                 cross(^(u - v), ^(w - v)) * pr)")
                                                                          (("1"
                                                                            (name-replace
                                                                             "uv1"
                                                                             "^(u - v)")
                                                                            (("1"
                                                                              (name-replace
                                                                               "wv1"
                                                                               "^(w - v)")
                                                                              (("1"
                                                                                (move-terms
                                                                                 1
                                                                                 r)
                                                                                (("1"
                                                                                  (elim-unary
                                                                                   1)
                                                                                  (("1"
                                                                                    (distrib
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (cancel-add
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "pr")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "perp_right_preserves_norm"
                                                                                             :dir
                                                                                             rl)
                                                                                            (("1"
                                                                                              (use
                                                                                               "perp_comps_cos_sin_right")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "wv1")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "vcos")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "vsin")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "uv1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (name-replace
                                                                               "uv1"
                                                                               "^(u - v)")
                                                                              (("2"
                                                                                (name-replace
                                                                                 "wv1"
                                                                                 "^(w - v)")
                                                                                (("2"
                                                                                  (grind-with-ext)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "^"
                                                                     1
                                                                     1)
                                                                    (("2"
                                                                      (equate
                                                                       "^(u - v) + ^(w - v)"
                                                                       "^(w - v) + ^(u - v)"
                                                                       (assert))
                                                                      (("1"
                                                                        (name-replace
                                                                         "s"
                                                                         "^(w - v) + ^(u - v)")
                                                                        (("1"
                                                                          (rewrite
                                                                           "norm_neg")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (rewrite
                                                                         "add_comm")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

