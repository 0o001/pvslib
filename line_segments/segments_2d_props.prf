(segments_2d_props
 (endpoint_diff_nonzero_1 0
  (endpoint_diff_nonzero_1-2 nil 3874129022
   ("" (skeep) (("" (typepred "s`p2") (("" (assert) nil nil)) nil))
    nil)
   nil shostak
   (endpoint_diff_nonzero_1 subtype
    "(vectors_2D.-)(segments_2d_props.s`p2, segments_2d_props.s`p1)"
    "Nz_vector"))
  (endpoint_diff_nonzero_1-1 nil 3874127255
   ("" (judgement-tcc) nil nil) nil nil
   (endpoint_diff_nonzero_1 subtype
    "(vectors_2D.-)(segments_2d_props.s`p2, segments_2d_props.s`p1)"
    "Nz_vector")))
 (endpoint_diff_nonzero_2 0
  (endpoint_diff_nonzero_2-2 nil 3874129022
   ("" (skeep) (("" (typepred "s`p2") (("" (assert) nil nil)) nil))
    nil)
   nil shostak
   (endpoint_diff_nonzero_2 subtype
    "(vectors_2D.-)(segments_2d_props.s`p1, segments_2d_props.s`p2)"
    "Nz_vector"))
  (endpoint_diff_nonzero_2-1 nil 3874127255
   ("" (judgement-tcc) nil nil) nil nil
   (endpoint_diff_nonzero_2 subtype
    "(vectors_2D.-)(segments_2d_props.s`p1, segments_2d_props.s`p2)"
    "Nz_vector")))
 (point_on_subsegment 0
  (point_on_subsegment-1 nil 3874129022
   ("" (skeep)
    (("" (expand "subsegment?")
      (("" (flatten)
        (("" (lemma "point_on_interior_segment")
          (("" (inst - "p" "s" "e") (("" (ground) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (proper_subsegment_excludes_p1 0
  (proper_subsegment_excludes_p1-1 nil 3874129022
   ("" (skeep)
    (("" (expand "subsegment?")
      (("" (flatten)
        (("" (expand "point_on_segment?")
          (("" (skeep*)
            (("" (expand "segment_endpoint?")
              (("" (flatten)
                (("" (replace -3)
                  (("" (case-replace "t=0")
                    (("1" (assert) nil nil)
                     ("2" (case-replace "t=1")
                      (("1" (assert) nil nil)
                       ("2" (inst + "t")
                        (("1" (grind) nil nil) ("2" (ground) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (proper_subsegment_excludes_p2 0
  (proper_subsegment_excludes_p2-1 nil 3874129022
   ("" (skeep)
    (("" (expand "subsegment?")
      (("" (flatten)
        (("" (hide -1)
          (("" (expand "point_on_segment?")
            (("" (skeep)
              (("" (expand "segment_endpoint?")
                (("" (flatten)
                  (("" (replace -3)
                    (("" (case-replace "t=0")
                      (("1" (assert) nil nil)
                       ("2" (case-replace "t=1")
                        (("1" (assert) nil nil)
                         ("2" (inst + "t")
                          (("1" (grind) nil nil)
                           ("2" (ground) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (proper_subsegment_excludes_endpoints 0
  (proper_subsegment_excludes_endpoints-1 nil 3874129022
   ("" (skeep)
    (("" (use "proper_subsegment_excludes_p1")
      (("" (use "proper_subsegment_excludes_p2")
        (("" (ground)
          (("" (rewrite "point_on_segment_has_offset")
            (("" (skeep*)
              (("" (expand "segment_endpoint?" -8)
                (("" (replace -5)
                  (("" (replace -1 -8)
                    (("" (replace -3 -8)
                      (("" (hide -1 -3 -5 -7 +)
                        (("" (ground)
                          (("1" (move-terms -1 l 1)
                            (("1" (assert)
                              (("1"
                                (rewrite* "scal_sub_right")
                                (("1"
                                  (rewrite* "scal_add_right")
                                  (("1"
                                    (rewrite* "scal_sub_right")
                                    (("1"
                                      (cancel-add -1)
                                      (("1"
                                        (move-terms -1 l (5 6))
                                        (("1"
                                          (assert)
                                          (("1"
                                            (factor -1 l (1 2))
                                            (("1"
                                              (factor -1 l (2 3))
                                              (("1"
                                                (factor -1 *)
                                                (("1"
                                                  (use "scal_cancel")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case "d!2 = 0")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (move-terms
                                                         -1
                                                         l
                                                         2)
                                                        (("2"
                                                          (case
                                                           "d!2*d!1>0")
                                                          (("1"
                                                            (case
                                                             "d!2*d-d<0")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (move-terms
                                                               1
                                                               l
                                                               2)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (cancel-by
                                                                   1
                                                                   "d")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (mult-cases
                                                             1)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (cancel-add! (! -1 l 3 2))
                            (("2" (factor! (! -1 l 3 2))
                              (("2"
                                (move-terms -1 l 1)
                                (("2"
                                  (factor -1 l)
                                  (("2"
                                    (equate
                                     "e`p2-e`p1"
                                     "1*(e`p2-e`p1)"
                                     (assert))
                                    (("2"
                                      (rewrite "scal_assoc")
                                      (("2"
                                        (use "scal_cancel")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (case-replace "d!2=1")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (factor -1 l (2 3))
                                              (("2"
                                                (move-terms -1 l 2)
                                                (("2"
                                                  (elim-unary!
                                                   (! -1 l 2))
                                                  (("2"
                                                    (case-replace
                                                     "d!1=0")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (case-replace
                                                       "d!2=0")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "d!1*d!2<d!2")
                                                        (("1"
                                                          (case
                                                           "1-d!1*d!2>1-d!2")
                                                          (("1"
                                                            (case
                                                             "d*(1-d!2)<1-d!2")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (cancel-by
                                                               1
                                                               "1-d!2")
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (cancel-by
                                                           1
                                                           "d!2")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (segment_endpoint_subsegment_endpoint 0
  (segment_endpoint_subsegment_endpoint-1 nil 3874129022
   ("" (skeep)
    (("" (use "proper_subsegment_excludes_endpoints")
      (("" (assert)
        (("" (expand "subsegment?")
          (("" (flatten)
            (("" (rewrite* "point_on_segment_has_offset")
              (("" (skeep*)
                (("" (expand "segment_endpoint?")
                  (("" (flatten)
                    (("" (case-replace "d=0")
                      (("1" (assert) nil nil)
                       ("2" (case-replace "d=1")
                        (("1" (assert) (("1" (cancel-add -2) nil nil))
                          nil)
                         ("2"
                          (case "d * norm(s`p2 - s`p1) < norm(e`p2 - e`p1)")
                          (("1"
                            (case "(1-d) * norm(s`p2 - s`p1) < norm(e`p2 - e`p1)")
                            (("1" (ground)
                              (("1"
                                (replace -1)
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (replace -5)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (rewrite "norm_scal")
                                        (("1"
                                          (expand "abs")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -1)
                                (("2"
                                  (replace -2)
                                  (("2"
                                    (replace -5)
                                    (("2"
                                      (equate
                                       "e`p2 - (e`p2 + d * (s`p2 - e`p2))"
                                       "-d * (s`p2 - e`p2)"
                                       t)
                                      (("2"
                                        (rewrite "norm_scal")
                                        (("2"
                                          (expand "abs")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (replace -1)
                                (("3"
                                  (replace -2)
                                  (("3"
                                    (replace -5)
                                    (("3"
                                      (equate
                                       "s`p1 + d * (e`p1 - s`p1) - e`p1"
                                       "(1-d)*(s`p1 - e`p1)"
                                       t)
                                      (("3"
                                        (rewrite "norm_scal")
                                        (("3"
                                          (expand "abs")
                                          (("3"
                                            (rewrite "norm_sym")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (replace -1)
                                (("4"
                                  (replace -2)
                                  (("4"
                                    (replace -5)
                                    (("4"
                                      (equate
                                       "e`p2 - (s`p1 + d * (e`p2 - s`p1))"
                                       "(1-d)*(e`p2 - s`p1)"
                                       t)
                                      (("4"
                                        (rewrite "norm_scal")
                                        (("4"
                                          (expand "abs")
                                          (("4" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -4 1)
                              (("2"
                                (replace -6 1)
                                (("2"
                                  (equate
                                   "e`p1 + d!2 * (e`p2 - e`p1) - (e`p1 + d!1 * (e`p2 - e`p1))"
                                   "(d!2 - d!1) * (e`p2 - e`p1)")
                                  (("1"
                                    (rewrite "norm_scal")
                                    (("1"
                                      (div-by 1 "norm(e`p2 - e`p1)")
                                      (("1"
                                        (equate
                                         "(1-d) * (abs((d!2 - d!1)) * norm((e`p2 - e`p1))) / norm(e`p2 - e`p1)"
                                         "(1-d) * abs(d!2 - d!1)")
                                        (("1"
                                          (hide-all-but
                                           (-3 -5 -7 1 2 3))
                                          (("1"
                                            (grind)
                                            (("1"
                                              (factor 1 l)
                                              (("1"
                                                (mult-cases 1)
                                                nil
                                                nil))
                                              nil)
                                             ("2"
                                              (equate
                                               "-1 * (d!2 * d) - d!1 + d!1 * d + d!2"
                                               "(1-d) * (d!2 - d!1)"
                                               t)
                                              (("2"
                                                (mult-cases 2)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replace -3 1)
                            (("2" (replace -5 1)
                              (("2"
                                (equate
                                 "e`p1 + d!2 * (e`p2 - e`p1) - (e`p1 + d!1 * (e`p2 - e`p1))"
                                 "(d!2 - d!1) * (e`p2 - e`p1)")
                                (("1"
                                  (rewrite "norm_scal")
                                  (("1"
                                    (div-by 1 "norm(e`p2 - e`p1)")
                                    (("1"
                                      (equate
                                       "d * (abs((d!2 - d!1)) * norm((e`p2 - e`p1))) / norm(e`p2 - e`p1)"
                                       "d * abs(d!2 - d!1)")
                                      (("1"
                                        (hide-all-but (-2 -4 -6 1 2 3))
                                        (("1"
                                          (grind)
                                          (("1" (mult-cases 1) nil nil)
                                           ("2"
                                            (factor 2 l)
                                            (("2"
                                              (mult-cases 2)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (point_on_segment_split_TCC1 0
  (point_on_segment_split_TCC1-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (point_on_segment_split subtype "segments_2d_props.s`p2"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= segments_2d_props.p}"))
  (point_on_segment_split_TCC1-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (point_on_segment_split subtype "segments_2d_props.s`p2"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= segments_2d_props.p}")))
 (point_on_segment_split 0
  (point_on_segment_split-1 nil 3874129022
   ("" (skeep)
    (("" (rewrite* "point_on_segment_has_norm_offset")
      (("" (skeep*)
        (("" (case "d!1 <= d")
          (("1" (hide 4)
            (("1" (inst + "d!1")
              (("1" (ground)
                (("1" (replace -2)
                  (("1" (replace -4)
                    (("1" (assert)
                      (("1" (rewrite "normalize_scal")
                        (("1" (expand "sign")
                          (("1" (rewrite "normalize_normalize")
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (ground)
                          (("2" (replace -1) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "length")
                  (("2" (replace -2)
                    (("2" (assert)
                      (("2" (rewrite "norm_scal")
                        (("2" (expand "abs") (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 4)
            (("2" (inst + "d!1 - d")
              (("1" (ground)
                (("1" (replace -1 1)
                  (("1" (expand "^" 1 3)
                    (("1" (real-props)
                      (("1"
                        (equate
                         "s`p2 - (s`p1 + d / norm(s`p2 - s`p1) * (s`p2 - s`p1))"
                         "(1 - d / norm(s`p2 - s`p1)) * (s`p2 - s`p1)")
                        (("1" (rewrite "normalize_scal")
                          (("1" (name-replace "V" "^(s`p2 - s`p1)")
                            (("1" (expand "sign")
                              (("1"
                                (lift-if)
                                (("1"
                                  (ground)
                                  (("1"
                                    (replace -4)
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (move-terms 1 l 2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (cross-mult 1)
                                        (("2"
                                          (expand "length")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (ground)
                            (("2" (hide 1) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (grind-with-ext) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "length")
                  (("2" (replace -1)
                    (("2" (expand "^" 1)
                      (("2" (real-props)
                        (("2"
                          (equate
                           "s`p2 - (s`p1 + d / norm(s`p2 - s`p1) * (s`p2 - s`p1))"
                           "(1 - d / norm(s`p2 - s`p1)) * (s`p2 - s`p1)")
                          (("1" (rewrite "norm_scal")
                            (("1" (expand "abs")
                              (("1"
                                (lift-if)
                                (("1"
                                  (ground)
                                  (("1"
                                    (move-terms -1 l 2)
                                    (("1"
                                      (assert)
                                      (("1" (cross-mult -1) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (point_on_initial_subsegment 0
  (point_on_initial_subsegment-1 nil 3874129022
   ("" (skeep)
    (("" (rewrite* "point_on_segment_has_norm_offset")
      (("" (skeep*)
        (("" (replace -3)
          (("" (replace -1)
            (("" (expand "length")
              (("" (assert)
                (("" (rewrite* "norm_scal")
                  (("" (rewrite "normalize_scal")
                    (("1" (rewrite "normalize_normalize")
                      (("1" (expand "sign")
                        (("1" (inst + "d")
                          (("1" (expand "abs") (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (ground)
                      (("2" (replace -1)
                        (("2" (inst + "0") (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (point_on_final_subsegment_TCC1 0
  (point_on_final_subsegment_TCC1-2 nil 3874129022
   ("" (skeep) (("" (replace -4) (("" (assert) nil nil)) nil)) nil) nil
   shostak
   (point_on_final_subsegment subtype "segments_2d_props.s`p2"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_props.q}"))
  (point_on_final_subsegment_TCC1-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (point_on_final_subsegment subtype "segments_2d_props.s`p2"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_props.q}")))
 (point_on_final_subsegment 0
  (point_on_final_subsegment-1 nil 3874129022
   ("" (skeep)
    (("" (rewrite "point_on_reverse_segment" :dir rl)
      (("" (rewrite "point_on_reverse_segment" -2 :dir rl)
        (("" (rewrite "point_on_reverse_segment" 2 :dir rl)
          (("" (expand "reverse_segment")
            (("" (rewrite* "point_on_segment_has_norm_offset")
              (("" (expand "length")
                (("" (skeep*)
                  (("" (replace -1)
                    (("" (replace -3)
                      ((""
                        (equate "s`p2 - (s`p2 + d * ^(s`p1 - s`p2))"
                         "-d * ^(s`p1 - s`p2)")
                        (("1"
                          (case-replace
                           "s`p2 - (s`p2 + d!1 * ^(s`p1 - s`p2)) = -d!1 * ^(s`p1 - s`p2)")
                          (("1" (assert)
                            (("1" (rewrite* "norm_scal")
                              (("1"
                                (rewrite "normalize_scal")
                                (("1"
                                  (rewrite "normalize_normalize")
                                  (("1"
                                    (expand "sign")
                                    (("1"
                                      (inst + "d")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide-all-but (-6 2))
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (ground)
                                  (("2"
                                    (replace -1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind) nil nil)) nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (subsegment_same_normalized_diff 0
  (subsegment_same_normalized_diff-1 nil 3874129022
   ("" (skeep)
    (("" (expand "subsegment?")
      (("" (flatten)
        (("" (rewrite* "point_on_segment_has_offset")
          (("" (skeep*)
            (("" (equate "s`p2 - s`p1" "(d!1 - d) * (e`p2 - e`p1)")
              (("1" (expand "^")
                (("1" (rewrite "norm_scal")
                  (("1" (expand "abs")
                    (("1" (lift-if)
                      (("1" (split 1)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (hide 1)
                              (("1"
                                (real-props)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2" (hide 3)
                              (("2"
                                (real-props)
                                (("2" (cross-mult 2) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2 3) (("2" (grind-with-ext) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (reverse_segment_has_neg_norm_diff 0
  (reverse_segment_has_neg_norm_diff-1 nil 3874129022
   ("" (skeep)
    (("" (replace -1)
      (("" (expand "reverse_segment")
        (("" (hide -1) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak))
 (points_on_segment_heads 0
  (points_on_segment_heads-1 nil 3874129022
   ("" (skeep)
    (("" (lemma "point_on_initial_subsegment")
      (("" (inst-cp - "p" "q" "s")
        (("" (inst - "q" "p" "s") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak))
 (points_on_segment_tails_TCC1 0
  (points_on_segment_tails_TCC1-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (points_on_segment_tails subtype "segments_2d_props.s`p2"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_props.q}"))
  (points_on_segment_tails_TCC1-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (points_on_segment_tails subtype "segments_2d_props.s`p2"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_props.q}")))
 (points_on_segment_tails_TCC2 0
  (points_on_segment_tails_TCC2-2 nil 3874129022
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (points_on_segment_tails subtype "segments_2d_props.s`p2"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= segments_2d_props.p}"))
  (points_on_segment_tails_TCC2-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (points_on_segment_tails subtype "segments_2d_props.s`p2"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= segments_2d_props.p}")))
 (points_on_segment_tails 0
  (points_on_segment_tails-1 nil 3874129022
   ("" (skeep)
    (("" (lemma "point_on_final_subsegment")
      (("" (inst-cp - "p" "q" "s")
        (("" (inst - "q" "p" "s") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak))
 (heads_on_aligned_segments_are_eq 0
  (heads_on_aligned_segments_are_eq-1 nil 3874129022
   ("" (skeep)
    (("" (rewrite* "point_on_segment_has_norm_offset")
      (("" (skeep*)
        (("" (replace -5)
          (("" (replace -1 -3)
            (("" (name-replace "V" "^(e`p2 - e`p1)")
              (("" (cancel-add -3)
                (("" (factor -3 r)
                  (("" (lemma "scal_eq_zero")
                    (("" (inst - "d + d!1" "V")
                      (("" (ground)
                        (("1" (case-replace "d = 0")
                          (("1" (assert) nil nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (expand "V")
                          (("2" (hide-all-but -1)
                            (("2" (expand "^")
                              (("2" (cross-mult -1) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (tails_on_aligned_segments_are_eq 0
  (tails_on_aligned_segments_are_eq-1 nil 3874129022
   ("" (skeep)
    (("" (lemma "heads_on_aligned_segments_are_eq")
      (("" (inst - "reverse_segment(s)" "reverse_segment(e)")
        (("" (rewrite* "point_on_reverse_segment")
          (("" (expand "reverse_segment")
            (("" (assert)
              (("" (hide-all-but (-3 1)) (("" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (on_parallel_segment_within_endpoints 0
  (on_parallel_segment_within_endpoints-1 nil 3874129022
   ("" (skeep)
    (("" (expand "parallel?")
      (("" (expand "point_on_segment?")
        (("" (skeep*)
          (("" (case "nzk > 0")
            (("1" (move-terms -4 l 2)
              (("1" (replace -4 :hide? t)
                (("1" (move-terms -4 l 2)
                  (("1" (replace -4 :hide? t)
                    (("1" (inst + "d-t*nzk" "(1-t)*nzk+d")
                      (("1" (split 1)
                        (("1" (move-terms 1 l 2)
                          (("1" (cancel-add 1)
                            (("1" (mult-cases 1) nil)))))
                         ("2" (cancel-add 1)
                          (("2" (mult-cases 1) nil)))
                         ("3" (flatten)
                          (("3" (hide 2)
                            (("3" (ground)
                              (("1" (grind-with-ext) nil)
                               ("2" (grind-with-ext) nil)))))))))
                       ("2" (move-terms 1 l (2 3))
                        (("2" (assert)
                          (("2" (factor 1 r)
                            (("2" (mult-cases 1) nil)))))))))))))))))
             ("2" (move-terms -3 l 2)
              (("2" (replace -3 :hide? t)
                (("2" (move-terms -3 l 2)
                  (("2" (move-terms -3 r 1)
                    (("2" (replace -3 :dir rl :hide? t)
                      (("2" (inst + "(1-t)*nzk+d" "d-t*nzk")
                        (("1" (split 2)
                          (("1" (cancel-add 1)
                            (("1" (mult-cases 1) nil)))
                           ("2" (move-terms 1 r 2)
                            (("2" (cancel-add 1)
                              (("2" (mult-cases 1) nil)))))
                           ("3" (flatten)
                            (("3" (hide 1)
                              (("3"
                                (ground)
                                (("1" (grind-with-ext) nil)
                                 ("2" (grind-with-ext) nil)))))))))
                         ("2" (move-terms 1 l 2)
                          (("2" (assert)
                            (("2" (mult-cases 1)
                              nil))))))))))))))))))))))))))
    nil)
   nil shostak))
 (points_on_same_segment_dir_parallel 0
  (points_on_same_segment_dir_parallel-1 nil 3874129022
   ("" (skeep)
    (("" (rewrite* "point_on_segment_has_norm_offset")
      (("" (skeep*)
        (("" (replace -1)
          (("" (replace -3)
            (("" (assert)
              (("" (rewrite* "norm_scal")
                (("" (expand "abs")
                  ((""
                    (equate "e`p1 + d!1 * ^(e`p2 - e`p1) -
                     (e`p1 + d * ^(e`p2 - e`p1))"
                     "(d!1 - d) * ^(e`p2 - e`p1)" t)
                    (("" (expand "dir_parallel?")
                      (("" (expand "^")
                        (("" (real-props)
                          (("" (inst + "(d!1 - d) / norm(e`p2 - e`p1)")
                            ((""
                              (case "(d!1 - d) / norm(e`p2 - e`p1) > 0")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide 2)
                                (("2" (cross-mult 1) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (points_on_same_segment_norm_diffs_eq_TCC1 0
  (points_on_same_segment_norm_diffs_eq_TCC1-2 nil 3874129022
   ("" (skeep) (("" (move-terms -4 l 2) (("" (assert) nil nil)) nil))
    nil)
   nil shostak
   (points_on_same_segment_norm_diffs_eq subtype
    "(vectors_2D.-)(segments_2d_props.q, segments_2d_props.p)"
    "Nz_vector"))
  (points_on_same_segment_norm_diffs_eq_TCC1-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (points_on_same_segment_norm_diffs_eq subtype
    "(vectors_2D.-)(segments_2d_props.q, segments_2d_props.p)"
    "Nz_vector")))
 (points_on_same_segment_norm_diffs_eq 0
  (points_on_same_segment_norm_diffs_eq-1 nil 3874129022
   ("" (skeep)
    (("" (rewrite* "point_on_segment_has_norm_offset")
      (("" (skeep*)
        (("" (replace -1)
          (("" (replace -3)
            (("" (assert)
              (("" (rewrite* "norm_scal")
                (("" (expand "abs")
                  ((""
                    (equate "e`p1 + d!1 * ^(e`p2 - e`p1) -
                         (e`p1 + d * ^(e`p2 - e`p1))"
                     "(d!1 - d) * ^(e`p2 - e`p1)" t)
                    (("" (rewrite "normalize_scal")
                      (("" (rewrite "normalize_normalize")
                        (("" (expand "sign") (("" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (point_on_segment_on_subsegment_TCC1 0
  (point_on_segment_on_subsegment_TCC1-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (point_on_segment_on_subsegment subtype "0" "below[S`length]"))
  (point_on_segment_on_subsegment_TCC1-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (point_on_segment_on_subsegment subtype "0" "below[S`length]")))
 (point_on_segment_on_subsegment_TCC2 0
  (point_on_segment_on_subsegment_TCC2-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (point_on_segment_on_subsegment subtype
    "(number_fields.-)(segments_2d_props.S`length, 1)"
    "below[S`length]"))
  (point_on_segment_on_subsegment_TCC2-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (point_on_segment_on_subsegment subtype
    "(number_fields.-)(segments_2d_props.S`length, 1)"
    "below[S`length]")))
 (point_on_segment_on_subsegment_TCC3 0
  (point_on_segment_on_subsegment_TCC3-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (point_on_segment_on_subsegment subtype "segments_2d_props.k"
    "below[S`length]"))
  (point_on_segment_on_subsegment_TCC3-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (point_on_segment_on_subsegment subtype "segments_2d_props.k"
    "below[S`length]")))
 (point_on_segment_on_subsegment_TCC4 0
  (point_on_segment_on_subsegment_TCC4-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (point_on_segment_on_subsegment subtype
    "(number_fields.+)(segments_2d_props.k, 1)" "below[S`length]"))
  (point_on_segment_on_subsegment_TCC4-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (point_on_segment_on_subsegment subtype
    "(number_fields.+)(segments_2d_props.k, 1)" "below[S`length]")))
 (point_on_segment_on_subsegment_TCC5 0
  (point_on_segment_on_subsegment_TCC5-2 nil 3874129022
   ("" (skeep)
    (("" (skeep) (("" (inst -5 "k" "k+1") (("" (assert) nil nil)) nil))
      nil))
    nil)
   nil shostak
   (point_on_segment_on_subsegment subtype
    "segments_2d_props.S`seq((number_fields.+)(segments_2d_props.k, 1))"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_props.S`seq(segments_2d_props.k)}"))
  (point_on_segment_on_subsegment_TCC5-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (point_on_segment_on_subsegment subtype
    "segments_2d_props.S`seq((number_fields.+)(segments_2d_props.k, 1))"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_props.S`seq(segments_2d_props.k)}")))
 (point_on_segment_on_subsegment 0
  (point_on_segment_on_subsegment-1 nil 3874129022
   ("" (induct "n")
    (("1" (skeep) (("1" (assert) nil nil)) nil)
     ("2" (skeep*)
      (("2" (case "S`length = 2")
        (("1" (hide -2)
          (("1" (inst + "0")
            (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
          nil)
         ("2"
          (case "S`seq(0) = S`seq(S`length - 1) or
                                                                    S`seq(0) = S`seq(S`length - 2) or
                                                                    S`seq(S`length-1) = S`seq(S`length - 2)")
          (("1" (hide -2 2)
            (("1" (ground)
              (("1" (inst -6 "0" "S`length-1")
                (("1" (assert)
                  (("1" (replace -1 :dir rl) (("1" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (inst -6 "0" "S`length-2")
                (("2" (replace -1 :dir rl) (("2" (assert) nil nil))
                  nil))
                nil)
               ("3" (inst -6 "S`length-2" "S`length-1")
                (("3" (replace -1) (("3" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("2" (flatten)
            (("2"
              (case "norm(S`seq(S`length - 1) - S`seq(0)) > 0 and
                                                                 norm(S`seq(S`length - 2) - S`seq(0)) > 0")
              (("1" (flatten)
                (("1"
                  (case "norm(S`seq(S`length-2)-S`seq(0)) <= norm(p-S`seq(0))")
                  (("1" (hide -4)
                    (("1" (inst + "S`length-2")
                      (("1" (assert)
                        (("1" (inst -7 "S`length-2")
                          (("1"
                            (rewrite* "point_on_segment_has_offset")
                            (("1" (skeep*)
                              (("1"
                                (replace -6)
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -10)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -7)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (rewrite* "norm_scal")
                                            (("1"
                                              (expand "abs")
                                              (("1"
                                                (cancel
                                                 -1
                                                 "norm(S`seq(S`length - 1) - S`seq(0))")
                                                (("1"
                                                  (inst
                                                   +
                                                   "(d!1 - d)/(1 - d)")
                                                  (("1"
                                                    (equate
                                                     "S`seq(S`length - 1) -
                                                                                         (S`seq(0) + d * (S`seq(S`length - 1) - S`seq(0)))"
                                                     "(1 - d) * (S`seq(S`length - 1) - S`seq(0))")
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (name-replace
                                                         "V"
                                                         "S`seq(S`length - 1) - S`seq(0)")
                                                        (("1"
                                                          (hide-all-but
                                                           1)
                                                          (("1"
                                                            (cancel-add
                                                             1)
                                                            (("1"
                                                              (move-terms
                                                               1
                                                               r
                                                               1)
                                                              (("1"
                                                                (factor
                                                                 1
                                                                 l)
                                                                (("1"
                                                                  (factor!
                                                                   (!
                                                                    1
                                                                    r
                                                                    1))
                                                                  (("1"
                                                                    (cross-mult
                                                                     1)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (cross-mult 1)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (grind-with-ext)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (cross-mult 1)
                                                    (("2"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (ground)
                                                    (("3"
                                                      (case-replace
                                                       "d!1=1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case-replace
                                                           "d=1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (equate
                                                               "S`seq(0) + (S`seq(S`length - 1) - S`seq(0))"
                                                               "S`seq(S`length - 1)")
                                                              (("1"
                                                                (hide-all-but
                                                                 1)
                                                                (("1"
                                                                  (grind-with-ext)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil)
                   ("2"
                    (inst - "p" "S^(0,S`length-2)"
                     "(# p1 := S`seq(0), p2 := S`seq(S`length - 2) #)")
                    (("1" (ground)
                      (("1" (skeep - t)
                        (("1" (expand "^")
                          (("1" (expand "min")
                            (("1" (inst? +) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "^")
                        (("2" (expand "min") (("2" (assert) nil nil))
                          nil))
                        nil)
                       ("3" (expand "^")
                        (("3" (expand "min") (("3" (assert) nil nil))
                          nil))
                        nil)
                       ("4" (expand "^")
                        (("4" (expand "min") (("4" (propax) nil nil))
                          nil))
                        nil)
                       ("5" (skeep + t)
                        (("5" (expand "^")
                          (("5" (expand "min")
                            (("5" (case-replace "S`length-2 = i")
                              (("1"
                                (expand "point_on_segment?" 1)
                                (("1"
                                  (inst 1 "1")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (inst-cp -8 "i" "S`length-1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (case-replace
                                     "S`seq(S`length-1) = S`seq(i)")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (inst-cp -7 "i")
                                      (("2"
                                        (inst -7 "S`length-2")
                                        (("2"
                                          (replace -6)
                                          (("2"
                                            (inst-cp
                                             -9
                                             "i"
                                             "S`length-2")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lemma
                                                 "point_on_initial_subsegment")
                                                (("2"
                                                  (inst
                                                   -
                                                   "S`seq(i)"
                                                   "S`seq(S`length - 2)"
                                                   "e")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("6" (skeep + t)
                        (("6" (expand "^")
                          (("6" (expand "min")
                            (("6" (inst -10 "i" "j")
                              (("6" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("7" (inst + "S`length-2")
                        (("7" (assert)
                          (("7" (lemma "point_on_segment_split")
                            (("7"
                              (inst - "S`seq(S`length - 2)" "p" "e")
                              (("7"
                                (ground)
                                (("1"
                                  (replace -6)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2" (inst -6 "S`length-2") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (ground) nil nil) ("3" (assert) nil nil))
                    nil)
                   ("3" (assert) nil nil))
                  nil))
                nil)
               ("2" (hide -1 6)
                (("2" (lemma "norm_eq_0")
                  (("2" (inst-cp - "S`seq(S`length - 1) - S`seq(0)")
                    (("1" (inst - "S`seq(S`length - 2) - S`seq(0)")
                      (("1" (ground) nil nil) ("2" (assert) nil nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (ground) nil nil))
              nil))
            nil)
           ("3" (ground) nil nil) ("4" (ground) nil nil)
           ("5" (ground) nil nil) ("6" (assert) nil nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep*)
        (("3" (inst -5 "k" "k+1") (("3" (assert) nil nil)) nil)) nil))
      nil)
     ("4" (hide 2) (("4" (skeep) (("4" (assert) nil nil)) nil)) nil)
     ("5" (hide 2) (("5" (skeep) (("5" (assert) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (horiz_segment_straddles_point 0
  (horiz_segment_straddles_point-1 nil 3874129022
   ("" (skeep)
    (("" (case "p`x <= max(e`p1`x, e`p2`x)")
      (("1" (case "p`y = e`p1`y")
        (("1" (rewrite "point_on_segment_has_offset" +)
          (("1" (expand "max")
            (("1" (expand "min")
              (("1" (lift-if)
                (("1" (ground)
                  (("1" (inst + "(p`x - e`p1`x) / (e`p2`x - e`p1`x)")
                    (("1" (real-props)
                      (("1" (apply-extensionality 2 :hide? t)
                        (("1" (hide -6)
                          (("1" (grind)
                            (("1" (factor 1 r (2 3))
                              (("1"
                                (move-terms 1 r 2)
                                (("1" (cross-mult 1) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (real-props) nil nil))
                    nil)
                   ("2"
                    (inst + "1 - (p`x - e`p2`x) / (e`p1`x - e`p2`x)")
                    (("1" (ground)
                      (("1" (hide -6)
                        (("1" (apply-extensionality 1 :hide? t)
                          (("1" (grind)
                            (("1" (move-terms 1 r 1)
                              (("1"
                                (factor 1 r)
                                (("1" (cross-mult 1) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (move-terms 1 l 2)
                        (("2" (cancel-add 1)
                          (("2" (cross-mult 1) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (move-terms 1 l 2)
                      (("2" (assert) (("2" (cross-mult 1) nil nil))
                        nil))
                      nil))
                    nil)
                   ("3" (inst + "0") (("3" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (rewrite "point_on_segment_has_offset" -3)
          (("2" (skeep) (("2" (grind) nil nil)) nil)) nil))
        nil)
       ("2" (rewrite "point_on_segment_has_offset" -2)
        (("2" (skeep)
          (("2" (use "comps_eq")
            (("2" (replace -1 :hide? t)
              (("2" (flatten)
                (("2" (hide -5 2)
                  (("2" (grind)
                    (("1" (move-terms -3 l 2)
                      (("1" (replace -3)
                        (("1" (move-terms 1 l 2)
                          (("1" (factor 1 l (1 2))
                            (("1" (factor 1 r)
                              (("1"
                                (case-replace "d_1 = 1")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (mult-by -1 "1 - d_1")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (move-terms -2 l 2)
                      (("2" (replace -2)
                        (("2" (cancel-add 2)
                          (("2" (mult-by 1 "d_1")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (endpoint_on_straddling_horiz_segment_TCC1 0
  (endpoint_on_straddling_horiz_segment_TCC1-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (endpoint_on_straddling_horiz_segment subtype "segments_2d_props.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= segments_2d_props.p}"))
  (endpoint_on_straddling_horiz_segment_TCC1-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (endpoint_on_straddling_horiz_segment subtype "segments_2d_props.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= segments_2d_props.p}")))
 (endpoint_on_straddling_horiz_segment 0
  (endpoint_on_straddling_horiz_segment-1 nil 3874129022
   ("" (skeep)
    (("" (rewrite* "point_on_segment_has_norm_offset")
      (("" (skeep)
        (("" (expand "length")
          (("" (expand "^")
            (("" (rewrite* "norm_diff_horiz")
              (("" (expand "abs")
                (("" (assert)
                  (("" (inst + "e`p1`x - p`x")
                    (("" (ground)
                      (("1" (move-terms 1 r 1)
                        (("1" (apply-extensionality :hide? t)
                          (("1" (expand "*" 1)
                            (("1" (expand "-" 1)
                              (("1" (real-props) nil nil)) nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (move-terms -7 r 1)
                        (("2" (rewrite "comps_eq" -7)
                          (("2" (flatten)
                            (("2" (grind)
                              (("2"
                                (factor -7 r)
                                (("2"
                                  (cross-mult -7)
                                  (("2"
                                    (move-terms -7 l (1 2))
                                    (("2"
                                      (factor -7 l)
                                      (("2"
                                        (factor -7 r (1 2))
                                        (("2"
                                          (factor -7 r (2 3))
                                          (("2"
                                            (equate
                                             "-e`p1`x + e`p2`x"
                                             "e`p2`x - e`p1`x"
                                             (assert))
                                            (("2"
                                              (cancel-by
                                               -7
                                               "e`p2`x - e`p1`x")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (extended_segment_TCC1 0
  (extended_segment_TCC1-2 nil 3874129022
   ("" (skeep)
    (("" (move-terms -1 l 2)
      (("" (factor -1 r) (("" (cancel-by -1 "1 + k") nil nil)) nil))
      nil))
    nil)
   nil shostak
   (extended_segment subtype
    "(vectors_2D.-)(vectors_2D.*(((number_fields.+)(1, segments_2d_props.k)), segments_2d_props.s`p2), vectors_2D.*(segments_2d_props.k, segments_2d_props.s`p1))"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_props.s`p1}"))
  (extended_segment_TCC1-1 nil 3874127255 ("" (subtype-tcc) nil nil)
   nil nil
   (extended_segment subtype
    "(vectors_2D.-)(vectors_2D.*(((number_fields.+)(1, segments_2d_props.k)), segments_2d_props.s`p2), vectors_2D.*(segments_2d_props.k, segments_2d_props.s`p1))"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_props.s`p1}")))
 (endpoint_on_extended_segment 0
  (endpoint_on_extended_segment-1 nil 3874129022
   ("" (skeep)
    (("" (expand "extended_segment")
      (("" (expand "point_on_segment?")
        (("" (inst + "1 / (1 + k)")
          (("" (ground)
            (("1" (cross-mult 1) nil nil)
             ("2" (distrib 1)
              (("2" (name-replace "kp1" "1 + k" :hide? nil)
                (("2" (mult-by 1 "kp1")
                  (("2" (distrib 1)
                    (("2" (real-props)
                      (("2" (expand "kp1") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (are_segments_overlapping_refl 0
  (are_segments_overlapping_refl-1 nil 3874129022
   ("" (skeep)
    (("" (expand "are_segments_overlapping?")
      (("" (inst + "s`p1" "s`p2") (("" (assert) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (are_segments_overlapping_symm 0
  (are_segments_overlapping_symm-1 nil 3874129022
   ("" (skeep)
    (("" (expand "are_segments_overlapping?")
      (("" (ground)
        (("1" (skeep)
          (("1" (inst + "p1" "p2") (("1" (assert) nil nil)) nil)) nil)
         ("2" (skeep)
          (("2" (inst + "p1" "p2") (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (subsegment_parallel 0
  (subsegment_parallel-1 nil 3874129022
   ("" (skeep)
    (("" (expand "point_on_segment?")
      (("" (skeep)
        (("" (expand "parallel?")
          (("" (case "t=0")
            (("1" (replace -4)
              (("1" (replace -1) (("1" (assert) nil nil)) nil)) nil)
             ("2" (inst + "1/t")
              (("1" (replace -3) (("1" (grind) nil nil)) nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (subsegment_parallel_2 0
  (subsegment_parallel_2-1 nil 3874129022
   ("" (skeep)
    (("" (expand "point_on_segment?")
      (("" (skosimp*)
        (("" (expand "parallel?")
          (("" (inst + "1/(t!2 - t!1)")
            (("1" (replace -3 2)
              (("1" (replace -6 2)
                (("1" (cross-mult 2)
                  (("1" (factor 2 r (2 4))
                    (("1" (factor 2 r (2 3))
                      (("1" (assert) (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (segments_parallel_imp_subsegments_parallel 0
  (segments_parallel_imp_subsegments_parallel-1 nil 3874129022
   ("" (skeep)
    (("" (lemma "subsegment_parallel_2")
      (("" (inst-cp - "ss" "s`p1" "s`p2")
        (("" (inst - "ee" "e`p1" "e`p2")
          (("" (assert)
            (("" (lemma "point_on_subsegment")
              (("" (inst-cp - "s`p1" "s" "ss")
                (("" (inst-cp - "s`p2" "s" "ss")
                  (("" (inst-cp - "e`p2" "e" "ee")
                    (("" (inst - "e`p1" "e" "ee")
                      (("" (assert)
                        (("" (lemma "parallel_trans")
                          ((""
                            (inst-cp - "ss`p2 - ss`p1" "ee`p2 - ee`p1"
                             "e`p2 - e`p1")
                            (("" (rewrite "parallel_symm" -8)
                              ((""
                                (inst
                                 -
                                 "s`p2 - s`p1"
                                 "ss`p2 - ss`p1"
                                 "e`p2 - e`p1")
                                (("" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (overlapping_parallel 0
  (overlapping_parallel-1 nil 3874129022
   ("" (skeep)
    (("" (expand "are_segments_overlapping?")
      (("" (skeep)
        (("" (lemma "subsegment_parallel_2")
          (("" (inst-cp -1 "s1" "p1" "p2")
            (("" (inst -1 "s2" "p1" "p2")
              (("" (assert)
                (("" (rewrite "parallel_symm" -2)
                  (("" (lemma "parallel_trans")
                    ((""
                      (inst -1 "s2`p2 - s2`p1" "p2 - p1"
                       "s1`p2 - s1`p1")
                      (("" (assert)
                        (("" (rewrite "parallel_symm") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (overlapping_normalized_directions 0
  (overlapping_normalized_directions-1 nil 3874129022
   ("" (skeep)
    (("" (use "overlapping_parallel")
      (("" (assert)
        (("" (expand "parallel?")
          (("" (skeep)
            (("" (replace -1)
              (("" (expand "^")
                (("" (rewrite "norm_scal")
                  (("" (expand "abs")
                    (("" (lift-if)
                      (("" (ground)
                        (("" (hide-all-but (-1 1))
                          (("" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (parallel_segments_equiv_collinear 0
  (parallel_segments_equiv_collinear-1 nil 3874129022
   ("" (skeep)
    (("" (typepred "s1`p2" "s2`p2")
      (("" (rewrite "parallel_vectors_equiv_collinear")
        (("1" (use "sub_eq_zero") (("1" (ground) nil nil)) nil)
         ("2" (use "sub_eq_zero") (("2" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (non_overlapping_segments_intersect_once 0
  (non_overlapping_segments_intersect_once-1 nil 3874129022
   ("" (skeep)
    (("" (expand "are_segments_overlapping?")
      (("" (inst + "p1" "p2") (("" (ground) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (overlapping_subsegments_and_segments 0
  (overlapping_subsegments_and_segments-1 nil 3874129022
   ("" (skeep)
    (("" (expand "are_segments_overlapping?")
      (("" (skeep)
        (("" (inst + "p1" "p2")
          (("" (assert)
            (("" (lemma "point_on_subsegment")
              (("" (ground)
                (("1" (inst - "p1" "s" "ss") (("1" (assert) nil nil))
                  nil)
                 ("2" (inst - "p2" "s" "ss") (("2" (assert) nil nil))
                  nil)
                 ("3" (inst - "p1" "e" "ee") (("3" (assert) nil nil))
                  nil)
                 ("4" (inst - "p2" "e" "ee") (("4" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (reverse_segment_overlapping 0
  (reverse_segment_overlapping-1 nil 3874129022
   ("" (skeep)
    (("" (expand "are_segments_overlapping?")
      (("" (ground)
        (("1" (skeep)
          (("1" (inst + "p1" "p2")
            (("1" (assert)
              (("1" (rewrite* "point_on_reverse_segment")
                (("1" (ground) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (inst + "p1" "p2")
            (("2" (assert)
              (("2" (rewrite* "point_on_reverse_segment") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (parallel_segments_interior_point_overlapping 0
  (parallel_segments_interior_point_overlapping-1 nil 3874129022
   ("" (skeep)
    (("" (expand "are_segments_overlapping?")
      (("" (inst + "p" _)
        (("" (replace -2)
          (("" (assert)
            (("" (rewrite* "point_on_segment_has_offset")
              (("" (expand "parallel?")
                (("" (skeep*)
                  (("" (case "0 < d and d < 1")
                    (("1" (flatten)
                      (("1" (hide 1)
                        (("1" (case "nzk > 0")
                          (("1" (case "(1-d)*nzk < 1")
                            (("1" (inst + "s`p2")
                              (("1"
                                (ground)
                                (("1"
                                  (replace -1 -8)
                                  (("1"
                                    (move-terms -8 r 1)
                                    (("1"
                                      (lemma "scal_cancel")
                                      (("1"
                                        (inst - "1" "d" "s`p2 - s`p1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite
                                   "point_on_segment_has_offset")
                                  (("2"
                                    (replace -5)
                                    (("2"
                                      (move-terms -5 l 2)
                                      (("2"
                                        (replace -5 +)
                                        (("2"
                                          (inst + "(1-d)*nzk")
                                          (("1"
                                            (ground)
                                            (("1"
                                              (grind-with-ext)
                                              nil
                                              nil))
                                            nil)
                                           ("2"
                                            (move-terms 1 l 2)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (mult-cases
                                                 1
                                                 :mult-op
                                                 1*)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst + "e`p2")
                              (("2"
                                (ground)
                                (("2"
                                  (rewrite
                                   "point_on_segment_has_offset")
                                  (("2"
                                    (replace -4)
                                    (("2"
                                      (move-terms -6 r 2)
                                      (("2"
                                        (replace -6 1 :dir rl)
                                        (("2"
                                          (inst + "d + 1/nzk")
                                          (("1"
                                            (ground)
                                            (("1"
                                              (grind-with-ext)
                                              nil
                                              nil)
                                             ("2"
                                              (move-terms 1 l 2)
                                              (("2"
                                                (cross-mult 1)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "1/nzk > 0")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (cross-mult 1)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case "-nzk*d < 1")
                            (("1" (inst + "s`p1")
                              (("1"
                                (ground)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (move-terms -7 r 1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "scal_eq_zero")
                                        (("1"
                                          (inst - "d" "s`p2 - s`p1")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite
                                   "point_on_segment_has_offset")
                                  (("2"
                                    (replace -4)
                                    (("2"
                                      (inst + "-nzk*d")
                                      (("1"
                                        (ground)
                                        (("1"
                                          (grind-with-ext)
                                          nil
                                          nil))
                                        nil)
                                       ("2" (mult-cases 1) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst + "e`p2")
                              (("2"
                                (ground)
                                (("2"
                                  (rewrite
                                   "point_on_segment_has_offset")
                                  (("2"
                                    (replace -3)
                                    (("2"
                                      (move-terms -5 r 2)
                                      (("2"
                                        (replace -5 + :dir rl)
                                        (("2"
                                          (inst + "d + 1/nzk")
                                          (("1"
                                            (ground)
                                            (("1"
                                              (grind-with-ext)
                                              nil
                                              nil)
                                             ("2"
                                              (move-terms 1 l 2)
                                              (("2"
                                                (cross-mult 1)
                                                (("2"
                                                  (case
                                                   "nzk - d*nzk < 0")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (move-terms 1 l 2)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (mult-cases
                                                         1
                                                         :mult-op
                                                         1*)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (move-terms 1 l 2)
                                            (("2"
                                              (cross-mult 1)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 3)
                      (("2" (expand "segment_endpoint?")
                        (("2" (case-replace "d=0")
                          (("1" (assert) nil nil)
                           ("2" (case-replace "d=1")
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1" (cancel-add -4) nil nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (non_overlapping_parallel_segments_with_endpt 0
  (non_overlapping_parallel_segments_with_endpt-1 nil 3874129022
   ("" (skeep)
    (("" (case "p = e`p1")
      (("1" (use "parallel_segments_interior_point_overlapping")
        (("1" (assert) nil nil)) nil)
       ("2" (case "p = e`p2")
        (("1" (lemma "parallel_segments_interior_point_overlapping")
          (("1" (inst - "s" "reverse_segment(e)" "p")
            (("1" (ground)
              (("1" (expand "are_segments_overlapping?")
                (("1" (skeep)
                  (("1" (inst + "p1" "p2")
                    (("1" (assert)
                      (("1" (lemma "point_on_reverse_segment")
                        (("1" (inst-cp - "p1" "e")
                          (("1" (inst - "p2" "e")
                            (("1" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "reverse_segment")
                (("2" (rewrite "parallel_diff_points_comm_right") nil
                  nil))
                nil)
               ("3" (expand "reverse_segment") (("3" (propax) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "are_segments_overlapping?")
          (("2" (inst + "p" _)
            (("2" (assert)
              (("2" (rewrite* "point_on_segment_has_offset")
                (("2" (expand "parallel?")
                  (("2" (skeep*)
                    (("2" (case "d!1 = 0 or d!1 = 1")
                      (("1" (ground)
                        (("1" (replace -1) (("1" (assert) nil nil))
                          nil)
                         ("2" (replace -1)
                          (("2" (assert)
                            (("2" (cancel-add -5) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (hide 3 4)
                          (("2" (case "0 < d and d < 1")
                            (("1" (flatten)
                              (("1"
                                (hide 4)
                                (("1"
                                  (case "nzk > 0")
                                  (("1"
                                    (case "d * nzk > d!1")
                                    (("1"
                                      (inst + "e`p1")
                                      (("1"
                                        (ground)
                                        (("1"
                                          (rewrite
                                           "point_on_segment_has_offset")
                                          (("1"
                                            (replace -5)
                                            (("1"
                                              (replace -8 -6)
                                              (("1"
                                                (inst
                                                 +
                                                 "d - d!1 / nzk")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (grind-with-ext)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (move-terms 1 l 2)
                                                    (("2"
                                                      (move-terms
                                                       1
                                                       r
                                                       1)
                                                      (("2"
                                                        (claim
                                                         "d!1/nzk > 0")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (cross-mult
                                                           1)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (move-terms 1 l 2)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (cross-mult 1)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst + "s`p1")
                                      (("2"
                                        (ground)
                                        (("1"
                                          (replace -1 -6)
                                          (("1"
                                            (move-terms -6 r 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma "scal_eq_zero")
                                                (("1"
                                                  (inst
                                                   -
                                                   "d"
                                                   "s`p2 - s`p1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite
                                           "point_on_segment_has_offset")
                                          (("2"
                                            (replace -4)
                                            (("2"
                                              (replace -5 -7)
                                              (("2"
                                                (inst + "d!1 - d*nzk")
                                                (("2"
                                                  (ground)
                                                  (("1"
                                                    (grind-with-ext)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (move-terms 1 l 2)
                                                    (("2"
                                                      (move-terms
                                                       1
                                                       r
                                                       1)
                                                      (("2"
                                                        (case
                                                         "d*nzk > 0")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (mult-cases
                                                           1)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case "nzk*(d-1) > d!1")
                                    (("1"
                                      (inst + "e`p1")
                                      (("1"
                                        (ground)
                                        (("1"
                                          (rewrite
                                           "point_on_segment_has_offset")
                                          (("1"
                                            (replace -7 -5)
                                            (("1"
                                              (replace -4)
                                              (("1"
                                                (inst
                                                 +
                                                 "d - d!1 / nzk")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (grind-with-ext)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (move-terms 1 l 2)
                                                    (("2"
                                                      (move-terms
                                                       1
                                                       r
                                                       1)
                                                      (("2"
                                                        (cross-mult 1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (move-terms 1 l 2)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (cross-mult 1)
                                                      (("2"
                                                        (case
                                                         "d*nzk < 0")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (mult-cases
                                                           1)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst + "s`p2")
                                      (("2"
                                        (ground)
                                        (("1"
                                          (replace -1 -5)
                                          (("1"
                                            (move-terms -5 r 1)
                                            (("1"
                                              (lemma "scal_cancel")
                                              (("1"
                                                (inst
                                                 -
                                                 "1"
                                                 "d"
                                                 "s`p2 - s`p1")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite
                                           "point_on_segment_has_offset")
                                          (("2"
                                            (replace -3)
                                            (("2"
                                              (move-terms -3 l 2)
                                              (("2"
                                                (replace -3 1)
                                                (("2"
                                                  (replace -4 -6)
                                                  (("2"
                                                    (inst
                                                     +
                                                     "d!1 + (1-d)*nzk")
                                                    (("2"
                                                      (ground)
                                                      (("1"
                                                        (grind-with-ext)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (move-terms
                                                         1
                                                         l
                                                         (2 3))
                                                        (("2"
                                                          (case
                                                           "d * nzk - nzk > 0")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (move-terms
                                                             1
                                                             l
                                                             2)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (mult-cases
                                                                 1
                                                                 :mult-op
                                                                 1*)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (replace -2 + :hide? t)
                                (("2"
                                  (hide -1 -3 -4)
                                  (("2"
                                    (expand "segment_endpoint?")
                                    (("2"
                                      (case-replace "d=0")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (case-replace "d=1")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide-all-but 6)
                                            (("1"
                                              (grind-with-ext)
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (non_overlapping_parallel_segments_share_endpoint 0
  (non_overlapping_parallel_segments_share_endpoint-1 nil 3874129022
   ("" (skeep)
    (("" (ground)
      (("1" (use "non_overlapping_parallel_segments_with_endpt")
        (("1" (ground) nil nil)) nil)
       ("2" (lemma "non_overlapping_parallel_segments_with_endpt")
        (("2" (inst - "e" "s" "p")
          (("2" (ground)
            (("1" (rewrite "parallel_symm") nil nil)
             ("2" (expand "are_segments_overlapping?")
              (("2" (skeep)
                (("2" (inst + "p1" "p2") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (contained_or_partial_overlap 0
  (contained_or_partial_overlap-1 nil 3874129022
   ("" (skeep + t)
    (("" (expand "contained_overlap?")
      (("" (expand "partial_overlap?")
        (("" (flatten)
          (("" (skeep*)
            (("" (inst + "p" "p!1") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (overlap_endpoints_first 0
  (overlap_endpoints_first-1 nil 3874129022
   ("" (skeep + t)
    (("" (use "overlapping_normalized_directions")
      (("" (assert)
        (("" (expand "are_segments_overlapping?")
          (("" (skeep)
            (("" (rewrite* "point_on_segment_has_norm_offset")
              (("" (skeep*)
                (("" (name-replace "v" "^(s2`p2 - s2`p1)")
                  (("" (ground)
                    (("1" (replace -1 :hide? t)
                      (("1" (replace -5)
                        (("1" (move-terms -1 l 2)
                          (("1" (factor -1 r (2 3))
                            (("1" (replace -1)
                              (("1"
                                (case "d >= d!2")
                                (("1"
                                  (inst 3 "d - d!2")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (rewrite "add_comm" 3)
                                      nil
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (inst 3 "d!2 - d")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide-all-but 3)
                                      (("1" (grind-with-ext) nil nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace -1 :hide? t)
                      (("2" (replace -5)
                        (("2" (move-terms -1 l 2)
                          (("2" (replace -1)
                            (("2" (case "d!2 + d >= length(s2)")
                              (("1"
                                (inst 4 "d - length(s2) + d!2")
                                (("1"
                                  (assert)
                                  (("1"
                                    (case-replace
                                     "s2`p2 = s2`p1 + length(s2) * v")
                                    (("1"
                                      (hide-all-but (-3 4))
                                      (("1" (grind-with-ext) nil nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (expand "v")
                                        (("2"
                                          (expand "length")
                                          (("2"
                                            (expand "^")
                                            (("2"
                                              (real-props)
                                              (("2"
                                                (grind-with-ext)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil)
                               ("2"
                                (inst 3 "d + d!2")
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide-all-but 3)
                                    (("2" (grind-with-ext) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (overlap_endpoints_second 0
  (overlap_endpoints_second-1 nil 3874129022
   ("" (skeep + t)
    (("" (use "overlapping_normalized_directions")
      (("" (assert)
        (("" (expand "are_segments_overlapping?")
          (("" (skeep)
            (("" (rewrite* "point_on_segment_has_norm_offset")
              (("" (skeep*)
                (("" (name-replace "v" "^(s2`p2 - s2`p1)")
                  (("" (ground)
                    (("1" (replace -1 :hide? t)
                      (("1" (replace -5)
                        (("1" (move-terms -1 l 2)
                          (("1" (factor -1 r (2 3))
                            (("1" (replace -1)
                              (("1"
                                (case "d >= d!2")
                                (("1"
                                  (inst 3 "d - d!2")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (rewrite "add_comm" 3)
                                      nil
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (lemma "segment_far_endpoint_length")
                                  (("2"
                                    (inst - "s2")
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (equate "^(s2`p2 - s2`p1)" "v")
                                        (("1"
                                          (replace -2 5)
                                          (("1"
                                            (inst
                                             5
                                             "length(s2) + d - d!2")
                                            (("1"
                                              (ground)
                                              (("1"
                                                (hide-all-but 1)
                                                (("1"
                                                  (grind-with-ext)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst
                                                 4
                                                 "length(s1) + d!2 - d")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "segment_far_endpoint_length")
                                                    (("2"
                                                      (inst - "s1")
                                                      (("2"
                                                        (replace -1 4)
                                                        (("2"
                                                          (hide-all-but
                                                           4)
                                                          (("2"
                                                            (reveal
                                                             -14)
                                                            (("2"
                                                              (replace
                                                               -1
                                                               :hide?
                                                               t)
                                                              (("2"
                                                                (grind-with-ext)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "v")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace -1 :hide? t)
                      (("2" (replace -5)
                        (("2" (move-terms -1 l 2)
                          (("2" (replace -1)
                            (("2" (lemma "segment_far_endpoint_length")
                              (("2"
                                (inst-cp - "s1")
                                (("2"
                                  (inst - "s2")
                                  (("2"
                                    (reveal -3 -4)
                                    (("2"
                                      (replace -1 :hide? t)
                                      (("2"
                                        (replace -1 :hide? t)
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (replace -2)
                                            (("2"
                                              (inst
                                               2
                                               "d + d!2 - length(s1)")
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (hide-all-but 1)
                                                  (("1"
                                                    (grind-with-ext)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst 3 "d + d!2")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but 3)
                                                    (("2"
                                                      (grind-with-ext)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (min_overlap_point_props 0
  (min_overlap_point_props-1 nil 3874129022
   ("" (skeep + t)
    (("" (skoletin)
      (("" (expand "min_overlap_point")
        (("" (lift-if)
          (("" (split -1)
            (("1" (flatten)
              (("1" (replace -2)
                (("1" (ground)
                  (("1" (skeep) (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (split -1)
                (("1" (flatten)
                  (("1" (replace -2 :hide? t)
                    (("1" (ground)
                      (("1" (use "overlap_endpoints_first")
                        (("1" (assert)
                          (("1"
                            (rewrite*
                             "point_on_segment_has_norm_offset")
                            (("1" (skeep)
                              (("1"
                                (name-replace "v" "^(s2`p2 - s2`p1)")
                                (("1"
                                  (replace -3 :hide? t)
                                  (("1"
                                    (move-terms -1 r 2)
                                    (("1"
                                      (replace -1 :dir rl)
                                      (("1"
                                        (inst 2 "length(s2) - d")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "segment_far_endpoint_length")
                                            (("1"
                                              (inst - "s2")
                                              (("1"
                                                (hide-all-but (-1 2))
                                                (("1"
                                                  (replace -1 :hide? t)
                                                  (("1"
                                                    (expand "v")
                                                    (("1"
                                                      (rewrite
                                                       "scal_sub_left")
                                                      (("1"
                                                        (grind-with-ext)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst 2 "d - length(s2)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (rewrite "scal_sub_left")
                                              (("1"
                                                (cancel-add 2)
                                                (("1"
                                                  (lemma
                                                   "segment_far_endpoint_length")
                                                  (("1"
                                                    (inst - "s2")
                                                    (("1"
                                                      (hide-all-but
                                                       (-1 2))
                                                      (("1"
                                                        (expand "v")
                                                        (("1"
                                                          (expand
                                                           "length")
                                                          (("1"
                                                            (expand
                                                             "^")
                                                            (("1"
                                                              (real-props)
                                                              (("1"
                                                                (grind-with-ext)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2"
                          (rewrite* "point_on_segment_has_norm_offset")
                          (("2" (skeep*)
                            (("2" (name-replace "v" "^(s2`p2 - s2`p1)")
                              (("2"
                                (replace -5 :hide? t)
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (move-terms -3 r 2)
                                      (("2"
                                        (replace -3 :dir rl)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (factor! (! 1 l 1))
                                            (("2"
                                              (rewrite* "norm_scal")
                                              (("2"
                                                (expand "abs")
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (ground)
                                                    (("2"
                                                      (inst
                                                       2
                                                       "d!1 - d")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (hide-all-but
                                                           2)
                                                          (("2"
                                                            (grind-with-ext)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (replace -1 :hide? t)
                    (("2" (use "overlapping_normalized_directions")
                      (("2" (assert)
                        (("2" (hide 1)
                          (("2" (ground)
                            (("1" (use "overlap_endpoints_first")
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite*
                                   "point_on_segment_has_norm_offset")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (name-replace
                                       "v"
                                       "^(s2`p2 - s2`p1)")
                                      (("1"
                                        (replace -3 :hide? t)
                                        (("1"
                                          (move-terms -1 r 2)
                                          (("1"
                                            (replace -1 :dir rl)
                                            (("1"
                                              (inst 1 "d - length(s2)")
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (use
                                                   "segment_far_endpoint_length")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (rewrite
                                                       "scal_sub_left")
                                                      (("1"
                                                        (equate
                                                         "^(s2`p2 - s2`p1)"
                                                         "v")
                                                        (("1"
                                                          (hide-all-but
                                                           1)
                                                          (("1"
                                                            (grind-with-ext)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand "v")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst 2 "d")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide-all-but 2)
                                                    (("2"
                                                      (grind-with-ext)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (rewrite*
                                 "point_on_segment_has_norm_offset")
                                (("2"
                                  (skeep*)
                                  (("2"
                                    (name-replace
                                     "v"
                                     "^(s2`p2 - s2`p1)")
                                    (("2"
                                      (replace -5 :hide? t)
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (move-terms -3 l 2)
                                            (("2"
                                              (replace -3 1)
                                              (("2"
                                                (lemma
                                                 "segment_far_endpoint_length")
                                                (("2"
                                                  (inst - "s2")
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (equate
                                                       "s2`p1 + length(s2) * ^(s2`p2 - s2`p1) -
            (s2`p1 + d!1 * v - d * -v)"
                                                       "length(s2) * ^(s2`p2 - s2`p1) - d!1 * v - d * v")
                                                      (("1"
                                                        (equate
                                                         "^(s2`p2 - s2`p1)"
                                                         "v")
                                                        (("1"
                                                          (factor!
                                                           (! 1 l 1))
                                                          (("1"
                                                            (rewrite*
                                                             "norm_scal")
                                                            (("1"
                                                              (expand
                                                               "abs")
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (ground)
                                                                  (("1"
                                                                    (cancel-by
                                                                     2
                                                                     "norm(v)")
                                                                    (("1"
                                                                      (replace
                                                                       -5
                                                                       4)
                                                                      (("1"
                                                                        (inst
                                                                         +
                                                                         "d!1 + d")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide-all-but
                                                                             4)
                                                                            (("1"
                                                                              (grind-with-ext)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand "v")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind-with-ext)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (max_overlap_point_props 0
  (max_overlap_point_props-1 nil 3874129022
   ("" (skeep + t)
    (("" (skoletin)
      (("" (expand "max_overlap_point")
        (("" (lift-if)
          (("" (split -1)
            (("1" (flatten)
              (("1" (replace -2)
                (("1" (ground)
                  (("1" (skeep)
                    (("1"
                      (rewrite "point_on_segment_has_norm_offset" -1)
                      (("1" (skeep)
                        (("1" (replace -1)
                          (("1" (assert)
                            (("1" (rewrite "norm_scal")
                              (("1"
                                (expand "abs")
                                (("1"
                                  (expand "length")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (split -1)
                (("1" (flatten)
                  (("1" (replace -2 :hide? t)
                    (("1" (ground)
                      (("1" (use "overlap_endpoints_second")
                        (("1" (assert)
                          (("1"
                            (rewrite*
                             "point_on_segment_has_norm_offset")
                            (("1" (skeep)
                              (("1"
                                (name-replace "v" "^(s2`p2 - s2`p1)")
                                (("1"
                                  (replace -3 :hide? t)
                                  (("1"
                                    (move-terms -1 r 2)
                                    (("1"
                                      (replace -1 :dir rl)
                                      (("1"
                                        (lemma
                                         "segment_far_endpoint_length")
                                        (("1"
                                          (inst-cp - "s1")
                                          (("1"
                                            (inst - "s2")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (inst
                                                 1
                                                 "length(s2) + d")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (reveal -4)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (hide-all-but
                                                         1)
                                                        (("1"
                                                          (grind-with-ext)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -2)
                                                    (("2"
                                                      (reveal -3)
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (replace
                                                           -4
                                                           2
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (inst
                                                             +
                                                             "length(s1) - d")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (hide-all-but
                                                                 2)
                                                                (("2"
                                                                  (grind-with-ext)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2"
                          (rewrite* "point_on_segment_has_norm_offset")
                          (("2" (skeep*)
                            (("2" (name-replace "v" "^(s2`p2 - s2`p1)")
                              (("2"
                                (replace -5 :hide? t)
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "v" 1)
                                      (("2"
                                        (rewrite "norm_scal")
                                        (("2"
                                          (expand "abs")
                                          (("2"
                                            (lemma
                                             "segment_far_endpoint_length")
                                            (("2"
                                              (inst - "s2")
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (move-terms -4 r 2)
                                                  (("2"
                                                    (reveal -4)
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (replace
                                                         -5
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (equate
                                                           "s1`p1 + d * v - d!1 * v + length(s2) * v - s1`p1"
                                                           "(d - d!1 + length(s2)) * v")
                                                          (("1"
                                                            (rewrite
                                                             "norm_scal")
                                                            (("1"
                                                              (expand
                                                               "abs")
                                                              (("1"
                                                                (inst
                                                                 2
                                                                 "d!1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind-with-ext)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (replace -1 :hide? t)
                    (("2" (use "overlapping_normalized_directions")
                      (("2" (assert)
                        (("2" (hide 1)
                          (("2" (ground)
                            (("1" (use "overlap_endpoints_second")
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite*
                                   "point_on_segment_has_norm_offset")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (name-replace
                                       "v"
                                       "^(s2`p2 - s2`p1)")
                                      (("1"
                                        (replace -3 :hide? t)
                                        (("1"
                                          (move-terms -1 r 2)
                                          (("1"
                                            (replace -1 :dir rl)
                                            (("1"
                                              (lemma
                                               "segment_far_endpoint_length")
                                              (("1"
                                                (inst-cp - "s1")
                                                (("1"
                                                  (inst - "s2")
                                                  (("1"
                                                    (reveal -3 -4)
                                                    (("1"
                                                      (replace
                                                       -1
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         :hide?
                                                         t)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (inst
                                                             1
                                                             "length(s2) + d")
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (hide-all-but
                                                                 1)
                                                                (("1"
                                                                  (rewrite
                                                                   "scal_add_left")
                                                                  (("1"
                                                                    (rewrite*
                                                                     "scal_neg")
                                                                    (("1"
                                                                      (name-replace
                                                                       "dv"
                                                                       "(-d) * v")
                                                                      (("1"
                                                                        (name-replace
                                                                         "L"
                                                                         "length(s2)")
                                                                        (("1"
                                                                          (grind-with-ext)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -2
                                                                 2)
                                                                (("2"
                                                                  (replace
                                                                   -3
                                                                   2
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (inst
                                                                     2
                                                                     "length(s2) + d - length(s1)")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide-all-but
                                                                         2)
                                                                        (("2"
                                                                          (grind-with-ext)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (rewrite*
                                 "point_on_segment_has_norm_offset")
                                (("2"
                                  (skeep*)
                                  (("2"
                                    (name-replace
                                     "v"
                                     "^(s2`p2 - s2`p1)")
                                    (("2"
                                      (replace -5 :hide? t)
                                      (("2"
                                        (replace -1 1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (rewrite "norm_scal")
                                            (("2"
                                              (expand "abs")
                                              (("2"
                                                (mult-cases 1)
                                                (("2"
                                                  (replace -3)
                                                  (("2"
                                                    (move-terms -1 l 2)
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (equate
                                                           "d * -v - d!1 * v"
                                                           "-(d + d!1) * v"
                                                           t)
                                                          (("2"
                                                            (rewrite
                                                             "norm_scal")
                                                            (("2"
                                                              (expand
                                                               "v"
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (min_max_overlap_points_neq 0
  (min_max_overlap_points_neq-1 nil 3874129022
   ("" (skeep + t)
    (("" (use "min_overlap_point_props")
      (("" (use "max_overlap_point_props")
        (("" (assert)
          (("" (flatten)
            (("" (expand "are_segments_overlapping?")
              (("" (skeep)
                (("" (inst-cp -3 "p1")
                  (("" (inst -3 "p2")
                    (("" (inst-cp -7 "p1")
                      (("" (inst -7 "p2")
                        (("" (assert)
                          ((""
                            (rewrite "point_on_segment_has_norm_offset"
                             -9)
                            ((""
                              (rewrite
                               "point_on_segment_has_norm_offset" -10)
                              ((""
                                (skeep*)
                                ((""
                                  (replace -9)
                                  ((""
                                    (replace -11)
                                    ((""
                                      (assert)
                                      ((""
                                        (rewrite* "norm_scal_norm")
                                        ((""
                                          (expand "abs")
                                          ((""
                                            (cancel-add 1)
                                            ((""
                                              (case "d = d!1")
                                              (("1" (assert) nil nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (min_overlap_point_neq_p2 0
  (min_overlap_point_neq_p2-1 nil 3874129022
   ("" (skeep + t)
    (("" (use "min_overlap_point_props")
      (("" (ground)
        (("" (flatten)
          (("" (replace -5)
            (("" (expand "are_segments_overlapping?")
              (("" (skeep)
                (("" (inst-cp - "p1")
                  (("" (inst - "p2")
                    (("" (assert)
                      (("" (hide -1 -2 -7 -8)
                        (("" (rewrite* "point_on_segment_has_offset")
                          (("" (skeep*)
                            (("" (replace -3)
                              ((""
                                (replace -5)
                                ((""
                                  (assert)
                                  ((""
                                    (rewrite* "norm_scal")
                                    ((""
                                      (expand "abs")
                                      ((""
                                        (case "d = d!1")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (case "d < d!1")
                                          (("1"
                                            (mult-cases -3 :mult-op 1*)
                                            nil
                                            nil)
                                           ("2"
                                            (mult-cases -1 :mult-op 1*)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (max_overlap_point_neq_p1 0
  (max_overlap_point_neq_p1-1 nil 3874129022
   ("" (skeep + t)
    (("" (use "max_overlap_point_props")
      (("" (ground)
        (("" (flatten)
          (("" (replace -5)
            (("" (expand "are_segments_overlapping?")
              (("" (skeep)
                (("" (inst-cp - "p1")
                  (("" (inst - "p2")
                    (("" (assert)
                      (("" (hide -1 -2 -7 -8)
                        (("" (rewrite* "point_on_segment_has_offset")
                          (("" (skeep*)
                            (("" (replace -3)
                              ((""
                                (replace -5)
                                ((""
                                  (assert)
                                  ((""
                                    (rewrite* "norm_scal")
                                    ((""
                                      (expand "abs")
                                      ((""
                                        (case "d = d!1")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (case "d < d!1")
                                          (("1"
                                            (mult-cases -2 :mult-op 1*)
                                            nil
                                            nil)
                                           ("2"
                                            (mult-cases -2 :mult-op 1*)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (min_overlap_point_offset_lt_len 0
  (min_overlap_point_offset_lt_len-1 nil 3874129022
   ("" (skeep + t)
    (("" (use "min_overlap_point_props")
      (("" (ground)
        (("" (flatten)
          (("" (rewrite "point_on_segment_has_offset" -1)
            (("" (skeep)
              (("" (replace -1 1)
                (("" (assert)
                  (("" (rewrite "norm_scal")
                    (("" (expand "abs")
                      (("" (case-replace "d=1")
                        (("1" (assert)
                          (("1" (cancel-add -2)
                            (("1" (use "min_overlap_point_neq_p2")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (cancel-by 2 (! 2 r)) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (max_overlap_point_offset_gt_0 0
  (max_overlap_point_offset_gt_0-1 nil 3874129022
   ("" (skeep + t)
    (("" (use "max_overlap_point_props")
      (("" (ground)
        (("" (flatten)
          (("" (rewrite "point_on_segment_has_offset" -1)
            (("" (skeep)
              (("" (replace -1 1)
                (("" (assert)
                  (("" (rewrite "norm_scal")
                    (("" (expand "abs")
                      (("" (mult-cases 1)
                        (("" (case-replace "d=0")
                          (("1" (assert)
                            (("1" (use "max_overlap_point_neq_p1")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (subsegment_min_overlap_point_eq_p1 0
  (subsegment_min_overlap_point_eq_p1-1 nil 3874129022
   ("" (skeep)
    (("" (use "heads_on_aligned_segments_are_eq")
      (("" (ground)
        (("1" (expand "subsegment?") (("1" (propax) nil nil)) nil)
         ("2" (use "min_overlap_point_props") (("2" (ground) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (subsegment_min_overlap_points_eq 0
  (subsegment_min_overlap_points_eq-1 nil 3874129022
   ("" (skeep)
    (("" (use "heads_on_aligned_segments_are_eq")
      (("" (ground)
        (("1" (expand "subsegment?")
          (("1" (use "min_overlap_point_props")
            (("1" (assert)
              (("1" (ground)
                (("1" (replace -10)
                  (("1" (expand "min_overlap_point" +)
                    (("1" (lift-if)
                      (("1" (lemma "point_on_subsegment")
                        (("1" (inst - "ss`p1" "e" "ee")
                          (("1" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "point_on_subsegment")
          (("2" (inst - "s`p1" "s" "ss") (("2" (assert) nil nil)) nil))
          nil)
         ("3" (use "subsegment_min_overlap_point_eq_p1")
          (("3" (assert)
            (("3" (replace -1 :dir rl) (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (subsegment_max_overlap_point_eq_p2 0
  (subsegment_max_overlap_point_eq_p2-1 nil 3874129022
   ("" (skeep)
    (("" (use "tails_on_aligned_segments_are_eq")
      (("" (ground)
        (("1" (expand "subsegment?") (("1" (propax) nil nil)) nil)
         ("2" (use "max_overlap_point_props") (("2" (ground) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (subsegment_max_overlap_points_eq 0
  (subsegment_max_overlap_points_eq-1 nil 3874129022
   ("" (skeep)
    (("" (use "tails_on_aligned_segments_are_eq")
      (("" (ground)
        (("1" (expand "subsegment?")
          (("1" (use "max_overlap_point_props")
            (("1" (assert)
              (("1" (ground)
                (("1" (replace -10)
                  (("1" (expand "max_overlap_point" +)
                    (("1" (lift-if)
                      (("1" (lemma "point_on_subsegment")
                        (("1" (inst - "ss`p2" "e" "ee")
                          (("1" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "point_on_subsegment")
          (("2" (inst - "s`p2" "s" "ss") (("2" (assert) nil nil)) nil))
          nil)
         ("3" (use "subsegment_max_overlap_point_eq_p2")
          (("3" (assert)
            (("3" (replace -1 :dir rl) (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (subsegment_min_overlap_point_neq_p2 0
  (subsegment_min_overlap_point_neq_p2-1 nil 3874129022
   ("" (skeep + t)
    (("" (use "min_overlap_point_neq_p2")
      (("" (ground)
        (("" (expand "subsegment?")
          (("" (flatten)
            (("" (use "min_overlap_point_props")
              (("" (ground)
                (("" (flatten)
                  (("" (replace -8)
                    (("" (lemma "segment_endpoint_subsegment_endpoint")
                      (("" (inst - "ss`p2" "s" "ss")
                        (("" (assert)
                          (("" (expand "segment_endpoint?")
                            ((""
                              (rewrite
                               "point_on_segment_has_norm_offset" -6)
                              ((""
                                (rewrite
                                 "point_on_segment_has_norm_offset"
                                 -7)
                                ((""
                                  (skeep*)
                                  ((""
                                    (lemma
                                     "segment_far_endpoint_length")
                                    ((""
                                      (inst - "s")
                                      ((""
                                        (replace -1 -9)
                                        ((""
                                          (replace -11)
                                          ((""
                                            (replace -7 -9)
                                            ((""
                                              (name-replace
                                               "V"
                                               "^(ss`p2 - ss`p1)")
                                              ((""
                                                (cancel-add -9)
                                                ((""
                                                  (factor -9 l)
                                                  ((""
                                                    (use "scal_cancel")
                                                    ((""
                                                      (assert)
                                                      ((""
                                                        (case-replace
                                                         "d=length(ss)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "segment_far_endpoint_length")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "ss")
                                                            (("2"
                                                              (replace
                                                               -4
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 -9)
                                                                (("2"
                                                                  (cancel-add
                                                                   -9)
                                                                  (("2"
                                                                    (use
                                                                     "scal_cancel")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (subsegment_max_overlap_point_neq_p1 0
  (subsegment_max_overlap_point_neq_p1-1 nil 3874129022
   ("" (skeep + t)
    (("" (use "max_overlap_point_neq_p1")
      (("" (ground)
        (("" (expand "subsegment?")
          (("" (flatten)
            (("" (use "max_overlap_point_props")
              (("" (ground)
                (("" (flatten)
                  (("" (replace -8)
                    (("" (lemma "segment_endpoint_subsegment_endpoint")
                      (("" (inst - "ss`p1" "s" "ss")
                        (("" (assert)
                          (("" (expand "segment_endpoint?")
                            ((""
                              (rewrite
                               "point_on_segment_has_norm_offset" -6)
                              ((""
                                (rewrite
                                 "point_on_segment_has_norm_offset"
                                 -7)
                                ((""
                                  (skeep*)
                                  ((""
                                    (lemma
                                     "segment_far_endpoint_length")
                                    ((""
                                      (inst - "s")
                                      ((""
                                        (replace -1 -9)
                                        ((""
                                          (replace -11)
                                          ((""
                                            (replace -7 -9)
                                            ((""
                                              (name-replace
                                               "V"
                                               "^(ss`p2 - ss`p1)")
                                              ((""
                                                (cancel-add -9)
                                                ((""
                                                  (factor -9 l)
                                                  ((""
                                                    (use "scal_cancel")
                                                    ((""
                                                      (assert)
                                                      ((""
                                                        (case-replace
                                                         "d=length(ss)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "segment_far_endpoint_length")
                                                          (("2"
                                                            (inst
                                                             -
                                                             "ss")
                                                            (("2"
                                                              (replace
                                                               -4)
                                                              (("2"
                                                                (replace
                                                                 -3
                                                                 -9)
                                                                (("2"
                                                                  (hide-all-but
                                                                   -9)
                                                                  (("2"
                                                                    (rewrite
                                                                     "add_assoc"
                                                                     :dir
                                                                     rl)
                                                                    (("2"
                                                                      (name-replace
                                                                       "U"
                                                                       "length(s) * V + d * V")
                                                                      (("2"
                                                                        (cancel-add
                                                                         -1)
                                                                        (("2"
                                                                          (expand
                                                                           "U")
                                                                          (("2"
                                                                            (factor
                                                                             -1
                                                                             r)
                                                                            (("2"
                                                                              (use
                                                                               "scal_eq_zero")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (min_overlap_pt_in_initial_subsegment 0
  (min_overlap_pt_in_initial_subsegment-1 nil 3874129022
   ("" (skeep)
    (("" (lemma "point_on_initial_subsegment")
      (("" (inst - "min_overlap_point(a, b)" "p" "a")
        (("" (use "min_overlap_point_props")
          (("" (ground)
            (("" (flatten)
              (("" (inst - "p") (("" (ground) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (max_overlap_pt_in_final_subsegment_TCC1 0
  (max_overlap_pt_in_final_subsegment_TCC1-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (max_overlap_pt_in_final_subsegment subtype "segments_2d_props.a`p2"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= segments_2d_props.p}"))
  (max_overlap_pt_in_final_subsegment_TCC1-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (max_overlap_pt_in_final_subsegment subtype "segments_2d_props.a`p2"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= segments_2d_props.p}")))
 (max_overlap_pt_in_final_subsegment 0
  (max_overlap_pt_in_final_subsegment-1 nil 3874129022
   ("" (skeep)
    (("" (lemma "point_on_final_subsegment")
      (("" (inst - "max_overlap_point(a, b)" "p" "a")
        (("" (use "max_overlap_point_props")
          (("" (ground)
            (("" (flatten)
              (("" (inst - "p")
                (("" (ground)
                  (("" (lemma "collinear_distances_additive")
                    (("" (inst-cp - "a" "p" "a`p2")
                      ((""
                        (inst - "a" "max_overlap_point(a, b)" "a`p2")
                        (("" (assert)
                          (("" (ground)
                            (("1"
                              (rewrite "point_on_segment_has_offset"
                               -3)
                              (("1"
                                (skeep)
                                (("1"
                                  (replace -3 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (rewrite "norm_scal")
                                      (("1"
                                        (expand "abs")
                                        (("1"
                                          (mult-cases 1 :mult-op 1*)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (rewrite "point_on_segment_has_offset"
                               -4)
                              (("2"
                                (skeep)
                                (("2"
                                  (replace -4 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (rewrite "norm_scal")
                                      (("2"
                                        (expand "abs")
                                        (("2"
                                          (hide-all-but (-5 1))
                                          (("2"
                                            (mult-cases 1 :mult-op 1*)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (all_overlapping_points_bounded_TCC1 0
  (all_overlapping_points_bounded_TCC1-2 nil 3874129022
   ("" (skeep)
    (("" (skeep)
      (("" (replace -5)
        (("" (assert)
          (("" (use "min_max_overlap_points_neq")
            (("" (ground) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (all_overlapping_points_bounded subtype "segments_2d_props.overlap"
    "segment_2d"))
  (all_overlapping_points_bounded_TCC1-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (all_overlapping_points_bounded subtype "segments_2d_props.overlap"
    "segment_2d")))
 (all_overlapping_points_bounded 0
  (all_overlapping_points_bounded-1 nil 3874129022
   ("" (skeep + t)
    (("" (ground)
      (("" (use "min_overlap_point_props")
        (("" (assert)
          (("" (flatten)
            (("" (inst-cp - "p")
              (("" (inst - "q")
                (("" (assert)
                  (("" (use "max_overlap_point_props")
                    (("" (assert)
                      (("" (flatten)
                        (("" (inst-cp - "p")
                          (("" (inst - "q")
                            (("" (assert)
                              ((""
                                (hide -2 -6 -11 -13)
                                ((""
                                  (rewrite*
                                   "point_on_segment_has_norm_offset")
                                  (("1"
                                    (skeep*)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (replace -5)
                                        (("1"
                                          (replace -10)
                                          (("1"
                                            (replace -12)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "length")
                                                (("1"
                                                  (equate
                                                   "s1`p1 + d * ^(s1`p2 - s1`p1) - (s1`p1 + d!1 * ^(s1`p2 - s1`p1))"
                                                   "(d - d!1) * ^(s1`p2 - s1`p1)")
                                                  (("1"
                                                    (rewrite*
                                                     "norm_scal")
                                                    (("1"
                                                      (rewrite
                                                       "normalize_scal")
                                                      (("1"
                                                        (rewrite
                                                         "normalize_normalize")
                                                        (("1"
                                                          (expand
                                                           "abs")
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (expand
                                                               "sign")
                                                              (("1"
                                                                (inst
                                                                 +
                                                                 "d!2 - d!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("1"
                                                                      (grind-with-ext)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "sign")
                                                              (("2"
                                                                (inst
                                                                 +
                                                                 "d!3 - d!1")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (grind-with-ext)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (ground)
                                                          (("2"
                                                            (move-terms
                                                             -1
                                                             l
                                                             2)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (use
                                                                   "min_max_overlap_points_neq")
                                                                  (("2"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (use "min_max_overlap_points_neq")
                                    (("2" (ground) nil nil))
                                    nil)
                                   ("3"
                                    (use "min_max_overlap_points_neq")
                                    (("3" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (only_one_overlapping_segment_TCC1 0
  (only_one_overlapping_segment_TCC1-2 nil 3874129022
   ("" (skeep)
    (("" (use "min_max_overlap_points_neq") (("" (ground) nil nil))
      nil))
    nil)
   nil shostak
   (only_one_overlapping_segment subtype
    "segments_2d_props.max_overlap_point(segments_2d_props.s1, segments_2d_props.s2)"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_props.min_overlap_point(segments_2d_props.s1, segments_2d_props.s2)}"))
  (only_one_overlapping_segment_TCC1-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (only_one_overlapping_segment subtype
    "segments_2d_props.max_overlap_point(segments_2d_props.s1, segments_2d_props.s2)"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_props.min_overlap_point(segments_2d_props.s1, segments_2d_props.s2)}")))
 (only_one_overlapping_segment 0
  (only_one_overlapping_segment-1 nil 3874129022
   ("" (skeep + t)
    (("" (use "min_overlap_point_props")
      (("" (assert)
        (("" (flatten)
          (("" (use "max_overlap_point_props")
            (("" (assert)
              (("" (flatten)
                (("" (lemma "point_on_subsegment")
                  (("" (hide -4 -7)
                    ((""
                      (inst - "p" "(# p1 := min_overlap_point(s1, s2),
                           p2 := max_overlap_point(s1, s2) #)" _)
                      (("1" (inst-cp - "s1")
                        (("1" (inst - "s2")
                          (("1" (expand "subsegment?")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (use "min_max_overlap_points_neq")
                        (("2" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (min_overlap_point_symm_TCC1 0
  (min_overlap_point_symm_TCC1-2 nil 3874129022
   ("" (skeep + t)
    (("" (use "are_segments_overlapping_symm") (("" (assert) nil nil))
      nil))
    nil)
   nil shostak
   (min_overlap_point_symm subtype "segments_2d_props.s1"
    "(segments_2d_props.are_segments_overlapping?(segments_2d_props.s2))"))
  (min_overlap_point_symm_TCC1-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (min_overlap_point_symm subtype "segments_2d_props.s1"
    "(segments_2d_props.are_segments_overlapping?(segments_2d_props.s2))")))
 (min_overlap_point_symm_TCC2 0
  (min_overlap_point_symm_TCC2-2 nil 3874129022
   ("" (skeep + t)
    (("" (use "are_segments_overlapping_symm") (("" (assert) nil nil))
      nil))
    nil)
   nil shostak
   (min_overlap_point_symm subtype "segments_2d_props.s1"
    "(segments_2d_props.are_segments_overlapping?(segments_2d_props.s2))"))
  (min_overlap_point_symm_TCC2-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (min_overlap_point_symm subtype "segments_2d_props.s1"
    "(segments_2d_props.are_segments_overlapping?(segments_2d_props.s2))")))
 (min_overlap_point_symm 0
  (min_overlap_point_symm-1 nil 3874129022
   ("" (skeep + t)
    (("" (lift-if)
      (("" (ground)
        (("1" (expand "min_overlap_point")
          (("1" (apply (repeat (lift-if)))
            (("1" (ground)
              (("1" (rewrite* "point_on_segment_has_offset")
                (("1" (skeep*)
                  (("1" (case-replace "d=0")
                    (("1" (assert) nil nil)
                     ("2" (case-replace "d!1=0")
                      (("1" (assert) nil nil)
                       ("2" (move-terms -1 r 1)
                        (("2" (move-terms -3 l)
                          (("2" (move-terms -3 r 2)
                            (("2" (replace -1)
                              (("2"
                                (move-terms -3 l 2)
                                (("2"
                                  (expand "^")
                                  (("2"
                                    (mult-by -5 "norm(s2`p2 - s2`p1)")
                                    (("2"
                                      (real-props)
                                      (("2"
                                        (replace -1 :dir rl)
                                        (("2"
                                          (rewrite "scal_assoc")
                                          (("2"
                                            (rewrite
                                             "scal_add_left"
                                             :dir
                                             rl)
                                            (("2"
                                              (lemma "scal_eq_zero")
                                              (("2"
                                                (inst
                                                 -
                                                 "d!1 * (norm(s2`p2 - s2`p1) / norm(s1`p2 - s1`p1)) + d"
                                                 "s1`p2 - s1`p1")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (name-replace
                                                     "N"
                                                     "norm(s2`p2 - s2`p1) / norm(s1`p2 - s1`p1)")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (use "overlap_endpoints_first")
                (("2" (assert)
                  (("2" (rewrite* "point_on_segment_has_norm_offset")
                    (("2" (skeep)
                      (("2" (case "d <= length(s2)")
                        (("1" (inst 3 "length(s2) - d")
                          (("1" (ground)
                            (("1" (expand "length")
                              (("1"
                                (expand "^")
                                (("1"
                                  (real-props)
                                  (("1"
                                    (real-props)
                                    (("1"
                                      (case
                                       "s1`p1 = s2`p2 - d / norm(s1`p2 - s1`p1) * (s1`p2 - s1`p1)")
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (mult-by
                                           -5
                                           "norm(s1`p2 - s1`p1)")
                                          (("1"
                                            (name-replace
                                             "N"
                                             "norm(s1`p2 - s1`p1)")
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (hide-all-but
                                                 (-3 -5 1))
                                                (("1"
                                                  (grind-with-ext)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (replace -2 1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (inst 2 "d - length(s2)")
                          (("1" (assert)
                            (("1"
                              (case "s1`p1 = s2`p2 -  d * ^(s1`p2 - s1`p1)")
                              (("1"
                                (name-replace "V" "^(s1`p2 - s1`p1)")
                                (("1"
                                  (replace -1 2)
                                  (("1"
                                    (hide-all-but (-4 1 2))
                                    (("1"
                                      (rewrite "scal_sub_left")
                                      (("1"
                                        (cancel-add 2)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (apply-extensionality
                                             2
                                             :hide?
                                             t)
                                            (("1" (grind) nil nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -1 1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (use "overlapping_normalized_directions")
          (("2" (assert)
            (("2" (hide 1)
              (("2" (expand "min_overlap_point")
                (("2" (expand "max_overlap_point")
                  (("2" (apply (repeat (lift-if)))
                    (("2" (ground)
                      (("1" (rewrite* "point_on_segment_has_offset")
                        (("1" (skeep*)
                          (("1" (case-replace "d=0")
                            (("1" (assert) nil nil)
                             ("2" (case-replace "d!1=1")
                              (("1"
                                (assert)
                                (("1" (cancel-add -4) nil nil))
                                nil)
                               ("2"
                                (expand "^")
                                (("2"
                                  (mult-by -5 "norm(s1`p2 - s1`p1)")
                                  (("2"
                                    (replace -1 -2)
                                    (("2"
                                      (name-replace
                                       "N"
                                       "norm(s1`p2 - s1`p1)")
                                      (("2"
                                        (replace -4 -2)
                                        (("2"
                                          (rewrite "scal_neg")
                                          (("2"
                                            (real-props)
                                            (("2"
                                              (hide -1 -4)
                                              (("2"
                                                (name-replace
                                                 "V"
                                                 "(d * (-N)) / norm(s2`p2 - s2`p1) * (s2`p2 - s2`p1)")
                                                (("2"
                                                  (move-terms -1 r)
                                                  (("2"
                                                    (expand "V")
                                                    (("2"
                                                      (equate
                                                       "s2`p2 - s2`p1 - d!1 * (s2`p2 - s2`p1)"
                                                       "(1 - d!1) * (s2`p2 - s2`p1)"
                                                       t)
                                                      (("2"
                                                        (rewrite
                                                         "scal_sub_left"
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (use
                                                           "scal_eq_zero")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (equate
                                                               "(d * (-N)) / norm(s2`p2 - s2`p1)"
                                                               "-(d * N) / norm(s2`p2 - s2`p1)"
                                                               t)
                                                              (("2"
                                                                (hide
                                                                 -2
                                                                 -5)
                                                                (("2"
                                                                  (equate
                                                                   "1 - -(d * N) / norm(s2`p2 - s2`p1) - d!1"
                                                                   "1 + (d * N) / norm(s2`p2 - s2`p1) - d!1"
                                                                   t)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (use "overlap_endpoints_first")
                        (("2" (assert)
                          (("2"
                            (rewrite*
                             "point_on_segment_has_norm_offset")
                            (("2" (skeep)
                              (("2"
                                (case "d <= length(s2)")
                                (("1"
                                  (inst 3 "d")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -4)
                                      (("1"
                                        (name-replace
                                         "V"
                                         "^(s2`p2 - s2`p1)")
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (hide-all-but 3)
                                            (("1"
                                              (grind-with-ext)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (inst 2 "d - length(s2)")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (case
                                         "s1`p1 = s2`p1 - d * ^(s1`p2 - s1`p1)")
                                        (("1"
                                          (name-replace
                                           "V"
                                           "^(s1`p2 - s1`p1)")
                                          (("1"
                                            (replace -1 2)
                                            (("1"
                                              (hide-all-but (-4 1 2))
                                              (("1"
                                                (rewrite
                                                 "scal_sub_left")
                                                (("1"
                                                  (cancel-add 2)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (apply-extensionality
                                                       2
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -1 1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (max_overlap_point_symm 0
  (max_overlap_point_symm-1 nil 3874129022
   ("" (skeep + t)
    (("" (lift-if)
      (("" (ground)
        (("1" (expand "max_overlap_point")
          (("1" (apply (repeat (lift-if)))
            (("1" (ground)
              (("1" (rewrite* "point_on_segment_has_norm_offset")
                (("1" (skeep*)
                  (("1" (lemma "segment_far_endpoint_length")
                    (("1" (inst-cp - "s1")
                      (("1" (inst - "s2")
                        (("1" (case "d = length(s1)")
                          (("1" (assert) nil nil)
                           ("2" (case "d!1 = length(s2)")
                            (("1" (assert) nil nil)
                             ("2" (replace -7)
                              (("2"
                                (equate
                                 "s1`p1 + d * ^(s2`p2 - s2`p1)"
                                 "s1`p2 + (d - length(s1)) * ^(s2`p2 - s2`p1)")
                                (("1"
                                  (name-replace "V" "^(s2`p2 - s2`p1)")
                                  (("1"
                                    (replace -1 -3)
                                    (("1"
                                      (replace -5 -3)
                                      (("1"
                                        (cancel-add -3)
                                        (("1"
                                          (move-terms -3 l)
                                          (("1"
                                            (factor -3 r)
                                            (("1"
                                              (lemma "scal_eq_zero")
                                              (("1"
                                                (inst
                                                 -
                                                 "(d - length(s1)) + d!1 - length(s2)"
                                                 "V")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (expand "V")
                                                    (("1"
                                                      (expand "^")
                                                      (("1"
                                                        (cross-mult -1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replace -2 1)
                                  (("2"
                                    (hide-all-but 1)
                                    (("2" (grind-with-ext) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (use "overlap_endpoints_second")
                (("2" (assert)
                  (("2" (rewrite* "point_on_segment_has_norm_offset")
                    (("2" (skeep)
                      (("2" (case "length(s1) <= length(s2) + d")
                        (("1" (inst 3 "length(s1) - d")
                          (("1" (assert)
                            (("1" (replace -4 :dir rl)
                              (("1"
                                (replace -2 3)
                                (("1"
                                  (hide-all-but 3)
                                  (("1"
                                    (rewrite "scal_sub_left")
                                    (("1"
                                      (cancel-add 1)
                                      (("1"
                                        (use
                                         "segment_far_endpoint_length")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (inst 2 "d + length(s2)")
                          (("2" (assert)
                            (("2"
                              (equate
                               "s1`p1 + (length(s2) + d) * ^(s1`p2 - s1`p1)"
                               "s2`p1 - d * ^(s1`p2 - s1`p1) + (length(s2) + d) * ^(s1`p2 - s1`p1)")
                              (("1"
                                (rewrite "scal_add_left")
                                (("1"
                                  (replace -3)
                                  (("1"
                                    (hide-all-but 2)
                                    (("1"
                                      (cancel-add 1)
                                      (("1"
                                        (use
                                         "segment_far_endpoint_length")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -1 1)
                                (("2"
                                  (hide-all-but 1)
                                  (("2" (grind-with-ext) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (use "overlapping_normalized_directions")
          (("2" (assert)
            (("2" (hide 1)
              (("2" (expand "min_overlap_point")
                (("2" (expand "max_overlap_point")
                  (("2" (apply (repeat (lift-if)))
                    (("2" (lemma "segment_far_endpoint_length")
                      (("2" (inst-cp - "s1")
                        (("2" (inst - "s2")
                          (("2" (ground)
                            (("1"
                              (rewrite*
                               "point_on_segment_has_norm_offset")
                              (("1"
                                (skeep*)
                                (("1"
                                  (case "d = length(s1)")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (hide-all-but (-2 1))
                                      (("1"
                                        (expand "^")
                                        (("1"
                                          (expand "length")
                                          (("1"
                                            (real-props)
                                            (("1"
                                              (cancel-add -1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case-replace "d!1 = 0")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (replace -7)
                                      (("2"
                                        (replace -3 -6)
                                        (("2"
                                          (name-replace
                                           "V"
                                           "s2`p2 - s2`p1")
                                          (("2"
                                            (replace -1 -6)
                                            (("2"
                                              (cancel-add -6)
                                              (("2"
                                                (move-terms -6 r)
                                                (("2"
                                                  (rewrite* "scal_neg")
                                                  (("2"
                                                    (factor -6 l)
                                                    (("2"
                                                      (lemma
                                                       "scal_eq_zero")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "(-d) + d!1 - (-length(s1))"
                                                         "^(V)")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide-all-but
                                                             -1)
                                                            (("2"
                                                              (expand
                                                               "V")
                                                              (("2"
                                                                (expand
                                                                 "^")
                                                                (("2"
                                                                  (cross-mult
                                                                   -1)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (use "overlap_endpoints_second")
                              (("2"
                                (assert)
                                (("2"
                                  (rewrite*
                                   "point_on_segment_has_norm_offset")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (replace -5 :hide? t)
                                      (("2"
                                        (name-replace
                                         "V"
                                         "^(s2`p2 - s2`p1)")
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (case
                                             "length(s1) - d >= length(s2)")
                                            (("1"
                                              (inst 1 "d + length(s2)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite* "scal_neg")
                                                  (("1"
                                                    (equate
                                                     "s1`p1 + (-(length(s2) + d)) * V"
                                                     "s1`p1 + (-d) * V - length(s2) * V"
                                                     t)
                                                    (("1"
                                                      (replace -4)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst
                                               4
                                               "length(s2) - length(s1) + d")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -4 4)
                                                  (("1"
                                                    (case
                                                     "s2`p1 = s1`p1 + d * -V - length(s2) * V")
                                                    (("1"
                                                      (replace -1 4)
                                                      (("1"
                                                        (hide-all-but
                                                         4)
                                                        (("1"
                                                          (grind-with-ext)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -3 1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (subsegments_overlap_min_max_subsegments_TCC1 0
  (subsegments_overlap_min_max_subsegments_TCC1-2 nil 3874129022
   ("" (skeep + t)
    (("" (lemma "overlapping_subsegments_and_segments")
      (("" (inst - "s" "e" "ss" "ee") (("" (ground) nil nil)) nil))
      nil))
    nil)
   nil shostak
   (subsegments_overlap_min_max_subsegments subtype
    "segments_2d_props.ee"
    "(segments_2d_props.are_segments_overlapping?(segments_2d_props.ss))"))
  (subsegments_overlap_min_max_subsegments_TCC1-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (subsegments_overlap_min_max_subsegments subtype
    "segments_2d_props.ee"
    "(segments_2d_props.are_segments_overlapping?(segments_2d_props.ss))")))
 (subsegments_overlap_min_max_subsegments_TCC2 0
  (subsegments_overlap_min_max_subsegments_TCC2-2 nil 3874129022
   ("" (skeep)
    (("" (use "min_max_overlap_points_neq") (("" (ground) nil nil))
      nil))
    nil)
   nil shostak
   (subsegments_overlap_min_max_subsegments subtype
    "segments_2d_props.max_overlap_point(segments_2d_props.ss, segments_2d_props.ee)"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_props.min_overlap_point(segments_2d_props.ss, segments_2d_props.ee)}"))
  (subsegments_overlap_min_max_subsegments_TCC2-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (subsegments_overlap_min_max_subsegments subtype
    "segments_2d_props.max_overlap_point(segments_2d_props.ss, segments_2d_props.ee)"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_props.min_overlap_point(segments_2d_props.ss, segments_2d_props.ee)}")))
 (subsegments_overlap_min_max_subsegments 0
  (subsegments_overlap_min_max_subsegments-1 nil 3874129022
   ("" (skeep + t)
    (("" (lemma "overlapping_subsegments_and_segments")
      (("" (inst - "s" "e" "ss" "ee")
        (("" (assert)
          (("" (expand "subsegment?" +)
            (("" (lemma "all_overlapping_points_bounded")
              ((""
                (inst - "min_overlap_point(s, e)"
                 "max_overlap_point(s, e)" "ss" "ee")
                (("" (split -1)
                  (("1" (ground) nil nil)
                   ("2" (hide 2)
                    (("2" (use "min_overlap_point_props")
                      (("2" (lemma "point_on_subsegment")
                        (("2"
                          (inst - "min_overlap_point(s, e)" "s" "ss")
                          (("2" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide 2)
                    (("3" (use "min_overlap_point_props")
                      (("3" (lemma "point_on_subsegment")
                        (("3"
                          (inst - "min_overlap_point(s, e)" "e" "ee")
                          (("3" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("4" (hide 2)
                    (("4" (use "max_overlap_point_props")
                      (("4" (lemma "point_on_subsegment")
                        (("4"
                          (inst - "max_overlap_point(s, e)" "s" "ss")
                          (("4" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide 2)
                    (("5" (use "max_overlap_point_props")
                      (("5" (lemma "point_on_subsegment")
                        (("5"
                          (inst - "max_overlap_point(s, e)" "e" "ee")
                          (("5" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (shorter_segment_not_overlapping 0
  (shorter_segment_not_overlapping-1 nil 3874129022
   ("" (skeep)
    (("" (expand "are_segments_overlapping?")
      (("" (skeep)
        (("" (inst + "p1" "p2")
          (("" (assert)
            (("" (hide -5 -6)
              (("" (expand "point_on_segment?")
                (("" (skosimp*)
                  (("" (replace -4)
                    (("" (assert)
                      (("" (replace -3)
                        (("" (lemma "two_parameter_bounds")
                          (("" (ground)
                            (("1" (inst + "t!1 + t!2 - t!1 * t!2")
                              (("1" (grind) nil nil)) nil)
                             ("2" (inst + "t!1 + t!3 - t!1 * t!3")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (overlap_straddles_interior_point 0
  (overlap_straddles_interior_point-1 nil 3874129022
   ("" (skeep)
    (("" (ground)
      (("1" (expand "segment_endpoint?")
        (("1" (expand "min_overlap_point")
          (("1" (lift-if) (("1" (ground) nil nil)) nil)) nil))
        nil)
       ("2" (expand "segment_endpoint?")
        (("2" (expand "max_overlap_point")
          (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (overlap_semi_straddles_interior_point 0
  (overlap_semi_straddles_interior_point-1 nil 3874129022
   ("" (skeep)
    (("" (expand "segment_endpoint?")
      (("" (expand "min_overlap_point")
        (("" (expand "max_overlap_point")
          (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (are_segments_overlapping_trans_aligned 0
  (are_segments_overlapping_trans_aligned-1 nil 3874129022
   ("" (skeep)
    (("" (lemma "overlap_straddles_interior_point")
      (("" (inst - "a" "b" "p")
        (("" (lemma "overlap_semi_straddles_interior_point")
          (("" (inst - "b" "c" "p")
            (("" (assert)
              (("" (expand "are_segments_overlapping?" +)
                (("" (inst + "p" _)
                  (("" (ground)
                    (("1" (lemma "min_overlap_point_props")
                      (("1" (inst - "b" "c")
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (lemma "min_overlap_point_props")
                              (("1"
                                (inst - "a" "b")
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (case
                                       "point_on_segment?(min_overlap_point(b, c),
                                                                                                                                      (# p1 := min_overlap_point(a, b), p2 := p #))")
                                      (("1"
                                        (inst
                                         +
                                         "min_overlap_point(b, c)")
                                        (("1"
                                          (ground)
                                          (("1"
                                            (lemma
                                             "point_on_subsegment")
                                            (("1"
                                              (inst
                                               -
                                               "min_overlap_point(b, c)"
                                               "(# p1 := min_overlap_point(a, b), p2 := p #)"
                                               "a")
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (expand
                                                   "subsegment?")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case
                                         "point_on_segment?(min_overlap_point(a, b),
                                                                                                                                                                            (# p1 := min_overlap_point(b, c), p2 := p #))")
                                        (("1"
                                          (inst
                                           +
                                           "min_overlap_point(a, b)")
                                          (("1"
                                            (ground)
                                            (("1"
                                              (lemma
                                               "point_on_subsegment")
                                              (("1"
                                                (inst
                                                 -
                                                 "min_overlap_point(a, b)"
                                                 "(# p1 := min_overlap_point(b, c), p2 := p #)"
                                                 "c")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (expand
                                                     "subsegment?")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma
                                           "points_on_segment_tails")
                                          (("2"
                                            (inst
                                             -
                                             "min_overlap_point(a, b)"
                                             "min_overlap_point(b, c)"
                                             "(# p1 := b`p1, p2 := p #)")
                                            (("1"
                                              (ground)
                                              (("1"
                                                (lemma
                                                 "min_overlap_pt_in_initial_subsegment")
                                                (("1"
                                                  (inst - "p" "b" "a")
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (rewrite
                                                       "min_overlap_point_symm"
                                                       -1)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "segment_endpoint?")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "are_segments_overlapping_symm"
                                                     1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "min_overlap_pt_in_initial_subsegment")
                                                (("2"
                                                  (inst - "p" "b" "c")
                                                  (("2"
                                                    (ground)
                                                    (("2"
                                                      (expand
                                                       "segment_endpoint?")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand
                                               "segment_endpoint?")
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "max_overlap_point_props")
                      (("2" (inst - "b" "c")
                        (("2" (lemma "max_overlap_point_props")
                          (("2" (inst - "a" "b")
                            (("2" (assert)
                              (("2"
                                (flatten)
                                (("2"
                                  (case
                                   "point_on_segment?(max_overlap_point(b, c),
                                                                                                                                      (# p1 := p, p2 := max_overlap_point(a, b) #))")
                                  (("1"
                                    (inst + "max_overlap_point(b, c)")
                                    (("1"
                                      (ground)
                                      (("1"
                                        (lemma "point_on_subsegment")
                                        (("1"
                                          (inst
                                           -
                                           "max_overlap_point(b, c)"
                                           "(# p1 := p, p2 := max_overlap_point(a, b) #)"
                                           "a")
                                          (("1"
                                            (ground)
                                            (("1"
                                              (expand "subsegment?")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case
                                     "point_on_segment?(max_overlap_point(a, b),
                                                                                                                                                                            (# p1 := p, p2 := max_overlap_point(b, c) #))")
                                    (("1"
                                      (inst
                                       +
                                       "max_overlap_point(a, b)")
                                      (("1"
                                        (ground)
                                        (("1"
                                          (lemma "point_on_subsegment")
                                          (("1"
                                            (inst
                                             -
                                             "max_overlap_point(a, b)"
                                             "(# p1 := p, p2 := max_overlap_point(b, c) #)"
                                             "c")
                                            (("1"
                                              (ground)
                                              (("1"
                                                (expand "subsegment?")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "points_on_segment_heads")
                                      (("2"
                                        (inst
                                         -
                                         "max_overlap_point(a, b)"
                                         "max_overlap_point(b, c)"
                                         "(# p1 := p, p2 := b`p2 #)")
                                        (("1"
                                          (ground)
                                          (("1"
                                            (lemma
                                             "max_overlap_pt_in_final_subsegment")
                                            (("1"
                                              (inst - "p" "b" "a")
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (rewrite
                                                   "max_overlap_point_symm"
                                                   -1)
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "segment_endpoint?")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite
                                                 "are_segments_overlapping_symm"
                                                 1)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma
                                             "max_overlap_pt_in_final_subsegment")
                                            (("2"
                                              (inst - "p" "b" "c")
                                              (("2"
                                                (ground)
                                                (("2"
                                                  (expand
                                                   "segment_endpoint?")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "segment_endpoint?")
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (are_segments_overlapping_trans 0
  (are_segments_overlapping_trans-1 nil 3874129022
   ("" (skeep)
    (("" (case "^(a`p2 - a`p1) = ^(b`p2 - b`p1)")
      (("1" (lemma "are_segments_overlapping_trans_aligned")
        (("1" (inst - "a" "b" "c" "p") (("1" (assert) nil nil)) nil))
        nil)
       ("2" (lemma "are_segments_overlapping_trans_aligned")
        (("2" (inst - "a" "reverse_segment(b)" "c" "p")
          (("2" (ground)
            (("1" (rewrite "reverse_segment_overlapping") nil nil)
             ("2" (rewrite "are_segments_overlapping_symm")
              (("2" (rewrite "reverse_segment_overlapping")
                (("2" (rewrite "are_segments_overlapping_symm") nil
                  nil))
                nil))
              nil)
             ("3" (expand "reverse_segment")
              (("3" (use "overlapping_normalized_directions")
                (("3" (ground)
                  (("3" (replace -1)
                    (("3" (hide-all-but 1) (("3" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (rewrite "point_on_reverse_segment") nil nil)
             ("5" (expand "reverse_segment")
              (("5" (expand "segment_endpoint?")
                (("5" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (segments_overlapping_implies_kernel 0
  (segments_overlapping_implies_kernel-1 nil 3874129022
   ("" (skeep)
    (("" (use "overlapping_parallel")
      (("" (assert)
        (("" (name-replace* ("s" "s1" "e" "s2"))
          ((""
            (case "point_on_segment?(e`p1, s) or point_on_segment?(e`p2, s) or
         point_on_segment?(s`p1, e)")
            (("1" (expand "segment_intersect_kernel")
              (("1" (lift-if)
                (("1" (assert)
                  (("1"
                    (case "forall (u, v: point_2d):
                  vector_from_point_to_point(u, v) = v - u")
                    (("1" (rewrite -1)
                      (("1" (rewrite -1)
                        (("1" (hide -1)
                          (("1" (split 1)
                            (("1" (flatten)
                              (("1"
                                (split 1)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (split -3)
                                    (("1"
                                      (rewrite
                                       "point_on_segment_has_offset")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (replace -1 +)
                                          (("1"
                                            (hide-all-but (-2 1))
                                            (("1"
                                              (assert)
                                              (("1"
                                                (rewrite "sqv_rew")
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (mult-cases
                                                     1
                                                     :mult-op
                                                     1*)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (rewrite
                                       "point_on_segment_has_offset")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (replace -1 +)
                                          (("2"
                                            (hide-all-but (-2 2))
                                            (("2"
                                              (assert)
                                              (("2"
                                                (rewrite "sqv_rew")
                                                (("2"
                                                  (ground)
                                                  (("2"
                                                    (mult-cases
                                                     1
                                                     :mult-op
                                                     1*)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "parallel?")
                                      (("3"
                                        (skeep)
                                        (("3"
                                          (replace -6 +)
                                          (("3"
                                            (rewrite* "dot_scal_canon")
                                            (("3"
                                              (rewrite*
                                               "dot_scal_right")
                                              (("3"
                                                (rewrite "sqv_rew")
                                                (("3"
                                                  (rewrite*
                                                   "point_on_segment_has_offset")
                                                  (("3"
                                                    (skeep*)
                                                    (("3"
                                                      (replace -1 +)
                                                      (("3"
                                                        (equate
                                                         "e`p1 - (e`p1 + d * (e`p2 - e`p1))"
                                                         "-d * (e`p2 - e`p1)")
                                                        (("1"
                                                          (equate
                                                           "e`p2 - (e`p1 + d * (e`p2 - e`p1))"
                                                           "id(1 - d) * (e`p2 - e`p1)")
                                                          (("1"
                                                            (rewrite*
                                                             "dot_assoc"
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (rewrite
                                                               "sqv_rew")
                                                              (("1"
                                                                (case
                                                                 "nzk > 0")
                                                                (("1"
                                                                  (real-props)
                                                                  (("1"
                                                                    (case-replace
                                                                     "d = 0")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (real-props)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "id")
                                                                        (("2"
                                                                          (cancel-by
                                                                           3
                                                                           "sqv((e`p2 - e`p1))")
                                                                          (("2"
                                                                            (cancel-by
                                                                             4
                                                                             "sqv((e`p2 - e`p1))")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (case-replace
                                                                   "d = 0")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (real-props)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "id")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (real-props)
                                                                        (("2"
                                                                          (cancel-by
                                                                           3
                                                                           "sqv((e`p2 - e`p1))")
                                                                          (("2"
                                                                            (cancel-by
                                                                             6
                                                                             "sqv((e`p2 - e`p1))")
                                                                            (("2"
                                                                              (cancel-by
                                                                               6
                                                                               "nzk")
                                                                              (("2"
                                                                                (factor
                                                                                 3)
                                                                                (("2"
                                                                                  (mult-cases
                                                                                   3)
                                                                                  (("2"
                                                                                    (case-replace
                                                                                     "d = 1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (real-props)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1)
                              (("2"
                                (rewrite
                                 "parallel_equiv_cross_eq_0"
                                 :dir
                                 rl)
                                (("2"
                                  (expand "are_segments_overlapping?")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (rewrite*
                                       "point_on_segment_has_offset")
                                      (("2"
                                        (skeep*)
                                        (("2"
                                          (replace -8 -4)
                                          (("2"
                                            (move-terms -4 r 1)
                                            (("2"
                                              (move-terms -4 l 2)
                                              (("2"
                                                (rewrite
                                                 "parallel_symm")
                                                (("2"
                                                  (expand "parallel?")
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (replace -3 -4)
                                                      (("2"
                                                        (rewrite
                                                         "scal_assoc")
                                                        (("2"
                                                          (factor -4 r)
                                                          (("2"
                                                            (replace
                                                             -4
                                                             +)
                                                            (("2"
                                                              (rewrite
                                                               "cross_scales_1")
                                                              (("2"
                                                                (rewrite
                                                                 "cross_self_zero")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -3)
              (("2" (lemma "overlap_endpoints_first")
                (("2" (inst - "s" "e")
                  (("2" (lemma "overlap_endpoints_second")
                    (("2" (inst - "s" "e") (("2" (ground) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (kernel_eq_segments_overlapping_unless_shared_endpt 0
  (kernel_eq_segments_overlapping_unless_shared_endpt-1 nil 3874129022
   ("" (skeep 1 t)
    (("" (split)
      (("1" (flatten)
        (("1" (use "segments_overlapping_implies_kernel")
          (("1" (assert) nil nil)) nil))
        nil)
       ("2" (flatten)
        (("2" (expand "segment_intersect_kernel")
          (("2" (lift-if)
            (("2" (assert)
              (("2" (split)
                (("1" (flatten)
                  (("1" (split)
                    (("1"
                      (case "forall (u, v: point_2d): vector_from_point_to_point(u, v) = v - u")
                      (("1" (rewrite -1)
                        (("1" (rewrite -1)
                          (("1" (hide -1)
                            (("1" (name-replace* ("s" "s1" "e" "s2"))
                              (("1"
                                (expand "segments_share_an_endpoint")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (case
                                     "point_on_segment?(e`p1, s) or point_on_segment?(e`p2, s) or
                                       point_on_segment?(s`p1, e)")
                                    (("1"
                                      (hide -4)
                                      (("1"
                                        (lemma
                                         "parallel_segments_interior_point_overlapping")
                                        (("1"
                                          (rewrite
                                           "parallel_equiv_cross_eq_0"
                                           :dir
                                           rl)
                                          (("1"
                                            (ground)
                                            (("1"
                                              (inst - "s" "e" "e`p1")
                                              (("1"
                                                (expand
                                                 "segment_endpoint?")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst
                                               -
                                               "s"
                                               "reverse_segment(e)"
                                               "e`p2")
                                              (("2"
                                                (ground)
                                                (("1"
                                                  (expand
                                                   "are_segments_overlapping?")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (rewrite*
                                                       "point_on_reverse_segment")
                                                      (("1"
                                                        (inst
                                                         +
                                                         "p1"
                                                         "p2")
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "reverse_segment")
                                                  (("2"
                                                    (expand
                                                     "parallel?")
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst + "-nzk")
                                                        (("2"
                                                          (replace -4)
                                                          (("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (expand
                                                   "reverse_segment")
                                                  (("3"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (expand
                                                   "segment_endpoint?")
                                                  (("4"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (inst - "e" "s" "s`p1")
                                              (("3"
                                                (expand
                                                 "segment_endpoint?")
                                                (("3"
                                                  (rewrite
                                                   "parallel_symm")
                                                  (("3"
                                                    (rewrite
                                                     "are_segments_overlapping_symm")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (lemma
                                         "parallel_equiv_cross_eq_0")
                                        (("2"
                                          (inst-cp
                                           -
                                           "s`p2 - s`p1"
                                           "e`p2 - e`p1")
                                          (("2"
                                            (inst
                                             -
                                             "e`p1 - s`p1"
                                             "s`p2 - s`p1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "^(e`p2 - e`p1) = ^(s`p2 - s`p1) or ^(e`p2 - e`p1) = -^(s`p2 - s`p1)")
                                                (("1"
                                                  (expand
                                                   "parallel?"
                                                   -2)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (case-replace
                                                           "e`p2 - s`p1 = id(nzk + length(e) / length(s)) * (s`p2 - s`p1)")
                                                          (("1"
                                                            (rewrite*
                                                             "dot_assoc"
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (rewrite
                                                               "sqv_rew")
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (div-by
                                                                   -1
                                                                   "sqv(s`p2 - s`p1)")
                                                                  (("1"
                                                                    (div-by
                                                                     -2
                                                                     "sqv(s`p2 - s`p1)")
                                                                    (("1"
                                                                      (rewrite
                                                                       "point_on_segment_has_offset")
                                                                      (("1"
                                                                        (inst
                                                                         +
                                                                         "nzk")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -5
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("1"
                                                                                (grind-with-ext)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (equate
                                                                           "nzk"
                                                                           "0"
                                                                           (assert))
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (name-replace
                                                                   "k"
                                                                   "id(length(e) / length(s) + nzk)")
                                                                  (("2"
                                                                    (div-by
                                                                     -1
                                                                     "sqv(s`p2 - s`p1)")
                                                                    (("2"
                                                                      (div-by
                                                                       -2
                                                                       "sqv(s`p2 - s`p1)")
                                                                      (("2"
                                                                        (rewrite
                                                                         "point_on_segment_has_offset"
                                                                         2)
                                                                        (("2"
                                                                          (inst
                                                                           +
                                                                           "k")
                                                                          (("1"
                                                                            (replace
                                                                             -3
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 2)
                                                                                (("1"
                                                                                  (grind-with-ext)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (name-replace
                                                                   "k"
                                                                   "id(length(e) / length(s) + nzk)")
                                                                  (("3"
                                                                    (div-by
                                                                     -2
                                                                     "sqv(s`p2 - s`p1)")
                                                                    (("3"
                                                                      (div-by
                                                                       -1
                                                                       "sqv(s`p2 - s`p1)")
                                                                      (("3"
                                                                        (rewrite
                                                                         "point_on_segment_has_offset"
                                                                         3)
                                                                        (("3"
                                                                          (case
                                                                           "e`p2 - e`p1 = (k - nzk) * (s`p2 - s`p1)")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             3)
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "-(nzk / (k - nzk))")
                                                                              (("1"
                                                                                (split
                                                                                 3)
                                                                                (("1"
                                                                                  (move-terms
                                                                                   -6
                                                                                   l
                                                                                   2)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -6
                                                                                     1)
                                                                                    (("1"
                                                                                      (factor
                                                                                       1
                                                                                       r
                                                                                       (1
                                                                                        3))
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("1"
                                                                                          (cancel-add
                                                                                           1)
                                                                                          (("1"
                                                                                            (equate
                                                                                             "-(nzk / (k - nzk)) * (k - nzk)"
                                                                                             "-nzk")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (move-terms
                                                                                   1
                                                                                   l)
                                                                                  (("2"
                                                                                    (move-terms
                                                                                     1
                                                                                     r
                                                                                     1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (equate
                                                                                         "-(-(nzk / (k - nzk)))"
                                                                                         "nzk / (k - nzk)"
                                                                                         (assert))
                                                                                        (("2"
                                                                                          (real-props)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (move-terms
                                                                                 1
                                                                                 l)
                                                                                (("2"
                                                                                  (elim-unary
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (cross-mult
                                                                                       1)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (flatten)
                                                                                (("3"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (move-terms
                                                                             -3
                                                                             l
                                                                             2)
                                                                            (("2"
                                                                              (move-terms
                                                                               -5
                                                                               l
                                                                               2)
                                                                              (("2"
                                                                                (replace
                                                                                 -3
                                                                                 1)
                                                                                (("2"
                                                                                  (replace
                                                                                   -5
                                                                                   1)
                                                                                  (("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("4"
                                                                  (name-replace
                                                                   "k"
                                                                   "id(length(e) / length(s) + nzk)")
                                                                  (("4"
                                                                    (div-by
                                                                     -2
                                                                     "sqv(s`p2 - s`p1)")
                                                                    (("4"
                                                                      (div-by
                                                                       -1
                                                                       "sqv(s`p2 - s`p1)")
                                                                      (("4"
                                                                        (rewrite
                                                                         "point_on_segment_has_offset"
                                                                         3)
                                                                        (("4"
                                                                          (case
                                                                           "e`p2 - e`p1 = (k - nzk) * (s`p2 - s`p1)")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             3)
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "-(nzk / (k - nzk))")
                                                                              (("1"
                                                                                (split
                                                                                 3)
                                                                                (("1"
                                                                                  (move-terms
                                                                                   -6
                                                                                   l
                                                                                   2)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -6
                                                                                     1)
                                                                                    (("1"
                                                                                      (factor
                                                                                       1
                                                                                       r
                                                                                       (1
                                                                                        3))
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("1"
                                                                                          (cancel-add
                                                                                           1)
                                                                                          (("1"
                                                                                            (equate
                                                                                             "-(nzk / (k - nzk)) * (k - nzk)"
                                                                                             "-nzk")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (move-terms
                                                                                   1
                                                                                   l)
                                                                                  (("2"
                                                                                    (move-terms
                                                                                     1
                                                                                     r
                                                                                     1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (equate
                                                                                         "-(-(nzk / (k - nzk)))"
                                                                                         "nzk / (k - nzk)"
                                                                                         (assert))
                                                                                        (("2"
                                                                                          (real-props)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (move-terms
                                                                                 1
                                                                                 l)
                                                                                (("2"
                                                                                  (elim-unary
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (cross-mult
                                                                                       1)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (flatten)
                                                                                (("3"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (move-terms
                                                                             -3
                                                                             l
                                                                             2)
                                                                            (("2"
                                                                              (move-terms
                                                                               -5
                                                                               l
                                                                               2)
                                                                              (("2"
                                                                                (replace
                                                                                 -3
                                                                                 1)
                                                                                (("2"
                                                                                  (replace
                                                                                   -5
                                                                                   1)
                                                                                  (("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide -6)
                                                            (("2"
                                                              (move-terms
                                                               -2
                                                               l
                                                               2)
                                                              (("2"
                                                                (lemma
                                                                 "segment_far_endpoint_length")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "e")
                                                                  (("2"
                                                                    (replace
                                                                     -2)
                                                                    (("2"
                                                                      (expand
                                                                       "^"
                                                                       -1)
                                                                      (("2"
                                                                        (replace
                                                                         -1
                                                                         1)
                                                                        (("2"
                                                                          (replace
                                                                           -3
                                                                           1)
                                                                          (("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case-replace
                                                           "e`p2 - s`p1 = id(nzk - length(e) / length(s)) * (s`p2 - s`p1)")
                                                          (("1"
                                                            (rewrite*
                                                             "dot_assoc"
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (rewrite
                                                               "sqv_rew")
                                                              (("1"
                                                                (ground)
                                                                (("1"
                                                                  (div-by
                                                                   -1
                                                                   "sqv(s`p2 - s`p1)")
                                                                  (("1"
                                                                    (div-by
                                                                     -2
                                                                     "sqv(s`p2 - s`p1)")
                                                                    (("1"
                                                                      (rewrite
                                                                       "point_on_segment_has_offset")
                                                                      (("1"
                                                                        (inst
                                                                         +
                                                                         "nzk")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -5
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("1"
                                                                                (grind-with-ext)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (equate
                                                                           "nzk"
                                                                           "0"
                                                                           (assert))
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (name-replace
                                                                   "k"
                                                                   "id(nzk - length(e) / length(s))")
                                                                  (("2"
                                                                    (div-by
                                                                     -1
                                                                     "sqv(s`p2 - s`p1)")
                                                                    (("2"
                                                                      (div-by
                                                                       -2
                                                                       "sqv(s`p2 - s`p1)")
                                                                      (("2"
                                                                        (rewrite
                                                                         "point_on_segment_has_offset"
                                                                         2)
                                                                        (("2"
                                                                          (inst
                                                                           +
                                                                           "k")
                                                                          (("1"
                                                                            (replace
                                                                             -3
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 2)
                                                                                (("1"
                                                                                  (grind-with-ext)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (name-replace
                                                                   "k"
                                                                   "id(nzk - length(e) / length(s))")
                                                                  (("3"
                                                                    (div-by
                                                                     -2
                                                                     "sqv(s`p2 - s`p1)")
                                                                    (("3"
                                                                      (div-by
                                                                       -1
                                                                       "sqv(s`p2 - s`p1)")
                                                                      (("3"
                                                                        (rewrite
                                                                         "point_on_segment_has_offset"
                                                                         3)
                                                                        (("3"
                                                                          (case
                                                                           "e`p2 - e`p1 = (k - nzk) * (s`p2 - s`p1)")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             3)
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "-(nzk / (k - nzk))")
                                                                              (("1"
                                                                                (split
                                                                                 3)
                                                                                (("1"
                                                                                  (move-terms
                                                                                   -6
                                                                                   l
                                                                                   2)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -6
                                                                                     1)
                                                                                    (("1"
                                                                                      (factor
                                                                                       1
                                                                                       r
                                                                                       (1
                                                                                        3))
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("1"
                                                                                          (cancel-add
                                                                                           1)
                                                                                          (("1"
                                                                                            (equate
                                                                                             "-(nzk / (k - nzk)) * (k - nzk)"
                                                                                             "-nzk")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (move-terms
                                                                                   1
                                                                                   l)
                                                                                  (("2"
                                                                                    (move-terms
                                                                                     1
                                                                                     r
                                                                                     1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (equate
                                                                                         "-(-(nzk / (k - nzk)))"
                                                                                         "nzk / (k - nzk)"
                                                                                         (assert))
                                                                                        (("2"
                                                                                          (real-props)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (move-terms
                                                                                 1
                                                                                 l)
                                                                                (("2"
                                                                                  (elim-unary
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (cross-mult
                                                                                       1)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (flatten)
                                                                                (("3"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (move-terms
                                                                             -3
                                                                             l
                                                                             2)
                                                                            (("2"
                                                                              (move-terms
                                                                               -5
                                                                               l
                                                                               2)
                                                                              (("2"
                                                                                (replace
                                                                                 -3
                                                                                 1)
                                                                                (("2"
                                                                                  (replace
                                                                                   -5
                                                                                   1)
                                                                                  (("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("4"
                                                                  (name-replace
                                                                   "k"
                                                                   "id(nzk - length(e) / length(s))")
                                                                  (("4"
                                                                    (div-by
                                                                     -2
                                                                     "sqv(s`p2 - s`p1)")
                                                                    (("4"
                                                                      (div-by
                                                                       -1
                                                                       "sqv(s`p2 - s`p1)")
                                                                      (("4"
                                                                        (rewrite
                                                                         "point_on_segment_has_offset"
                                                                         3)
                                                                        (("4"
                                                                          (case
                                                                           "e`p2 - e`p1 = (k - nzk) * (s`p2 - s`p1)")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             3)
                                                                            (("1"
                                                                              (inst
                                                                               +
                                                                               "-(nzk / (k - nzk))")
                                                                              (("1"
                                                                                (split
                                                                                 3)
                                                                                (("1"
                                                                                  (move-terms
                                                                                   -6
                                                                                   l
                                                                                   2)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -6
                                                                                     1)
                                                                                    (("1"
                                                                                      (factor
                                                                                       1
                                                                                       r
                                                                                       (1
                                                                                        3))
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         1)
                                                                                        (("1"
                                                                                          (cancel-add
                                                                                           1)
                                                                                          (("1"
                                                                                            (equate
                                                                                             "-(nzk / (k - nzk)) * (k - nzk)"
                                                                                             "-nzk")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (move-terms
                                                                                   1
                                                                                   l)
                                                                                  (("2"
                                                                                    (move-terms
                                                                                     1
                                                                                     r
                                                                                     1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (equate
                                                                                         "-(-(nzk / (k - nzk)))"
                                                                                         "nzk / (k - nzk)"
                                                                                         (assert))
                                                                                        (("2"
                                                                                          (real-props)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (move-terms
                                                                                 1
                                                                                 l)
                                                                                (("2"
                                                                                  (elim-unary
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (cross-mult
                                                                                       1)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (flatten)
                                                                                (("3"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (move-terms
                                                                             -3
                                                                             l
                                                                             2)
                                                                            (("2"
                                                                              (move-terms
                                                                               -5
                                                                               l
                                                                               2)
                                                                              (("2"
                                                                                (replace
                                                                                 -3
                                                                                 1)
                                                                                (("2"
                                                                                  (replace
                                                                                   -5
                                                                                   1)
                                                                                  (("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide -6)
                                                            (("2"
                                                              (move-terms
                                                               -2
                                                               l
                                                               2)
                                                              (("2"
                                                                (lemma
                                                                 "segment_far_endpoint_length")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "e")
                                                                  (("2"
                                                                    (replace
                                                                     -2)
                                                                    (("2"
                                                                      (expand
                                                                       "^"
                                                                       -1)
                                                                      (("2"
                                                                        (replace
                                                                         -1
                                                                         1)
                                                                        (("2"
                                                                          (replace
                                                                           -3
                                                                           1)
                                                                          (("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide -5)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "parallel?"
                                                       -2)
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (replace -2)
                                                          (("2"
                                                            (rewrite
                                                             "normalize_scal")
                                                            (("2"
                                                              (expand
                                                               "sign")
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (perp_right_segment_nonzero 0
  (perp_right_segment_nonzero-1 nil 3874129022
   ("" (skeep)
    (("" (expand "perp_right")
      (("" (decompose-equality -1)
        (("" (typepred "s`p2") (("" (grind-with-ext) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (perp_left_segment_nonzero 0
  (perp_left_segment_nonzero-1 nil 3874129022
   ("" (skeep)
    (("" (expand "perp_left")
      (("" (decompose-equality -1)
        (("" (typepred "s`p2") (("" (grind-with-ext) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (endpoint_norm_bound 0
  (endpoint_norm_bound-1 nil 3874129022
   ("" (skeep)
    (("" (expand "point_on_segment?")
      (("" (skeep)
        (("" (rewrite "scal_sub_left")
          (("" (replace -3)
            (("" (factor! (! 1 l 1) (2 3))
              (("" (assert)
                (("" (rewrite "norm_scal")
                  (("" (expand "abs")
                    (("" (elim-unary! (! 1 l 2 1))
                      (("" (cancel-by 1 "norm(e`p2 - e`p1)") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (endpoint_norm_bound_lt 0
  (endpoint_norm_bound_lt-1 nil 3874129022
   ("" (skeep)
    (("" (use "endpoint_norm_bound")
      (("" (assert)
        (("" (rewrite "point_on_segment_has_norm_offset")
          (("" (skeep)
            (("" (replace -2)
              (("" (assert)
                (("" (rewrite "norm_scal")
                  (("" (expand "abs")
                    (("" (case-replace "d = norm(e`p2 - e`p1)")
                      (("1" (expand "^")
                        (("1" (real-props)
                          (("1" (hide-all-but 1)
                            (("1" (grind-with-ext) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (subsegment_p1_closest_to_segment_p1 0
  (subsegment_p1_closest_to_segment_p1-1 nil 3874129022
   ("" (skeep)
    (("" (expand "subsegment?")
      (("" (flatten)
        (("" (rewrite* "point_on_segment_has_norm_offset")
          (("" (skeep*)
            (("" (replace -7 :dir rl)
              (("" (replace -1 (-5 1))
                (("" (factor -5 r (2 3))
                  (("" (replace -5)
                    (("" (assert)
                      (("" (rewrite* "norm_scal")
                        (("" (expand "abs") (("" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (non_overlapping_collinear_segments 0
  (non_overlapping_collinear_segments-1 nil 3874129022
   ("" (skeep)
    (("" (expand "are_segments_overlapping?")
      (("" (skeep)
        (("" (lemma "point_on_subsegment")
          (("" (inst-cp - "p1" "s" "h")
            (("" (inst - "p2" "s" "h")
              (("" (assert)
                (("" (lemma "subsegment_p1_closest_to_segment_p1")
                  (("" (inst-cp - "s" "h" "s`p2")
                    (("" (inst-cp - "e" "h" "p2")
                      (("" (inst - "e" "h" "p1")
                        (("" (assert)
                          (("" (expand "subsegment?")
                            (("" (flatten)
                              ((""
                                (lemma "endpoint_norm_bound_lt")
                                ((""
                                  (inst-cp - "p1" "s")
                                  ((""
                                    (inst - "p2" "s")
                                    ((""
                                      (assert)
                                      ((""
                                        (lemma
                                         "collinear_distances_additive")
                                        ((""
                                          (inst-cp - "h" "s`p1" "s`p2")
                                          ((""
                                            (inst-cp - "h" "s`p1" "p1")
                                            ((""
                                              (inst - "h" "s`p1" "p2")
                                              (("" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (between_points_on_segment_TCC1 0
  (between_points_on_segment_TCC1-2 nil 3874129022
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (between_points_on_segment subtype
    "(vectors_2D.-)(segments_2d_props.p, segments_2d_props.q)"
    "Nz_vector"))
  (between_points_on_segment_TCC1-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (between_points_on_segment subtype
    "(vectors_2D.-)(segments_2d_props.p, segments_2d_props.q)"
    "Nz_vector")))
 (between_points_on_segment 0
  (between_points_on_segment-1 nil 3874129022
   ("" (skeep)
    (("" (case "exists (s: segment_2d): s = (# p1 := q, p2 := p #)")
      (("1" (skeep)
        (("1" (lemma "point_on_interior_segment")
          (("1" (inst - "q + d * ^(p - q)" "s" "e")
            (("1" (replace -2)
              (("1" (assert)
                (("1" (expand "point_on_segment?" 1)
                  (("1" (expand "^")
                    (("1" (inst + "d/norm(p-q)")
                      (("1" (ground)
                        (("1" (cross-mult 1) nil nil)
                         ("2" (cross-mult 1) nil nil)
                         ("3" (hide-all-but (1 2))
                          (("3" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (inst + "(# p1 := q, p2 := p #)") (("2" (ground) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (between_points_on_subsegment_TCC1 0
  (between_points_on_subsegment_TCC1-2 nil 3874129022
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (between_points_on_subsegment subtype
    "(vectors_2D.-)(segments_2d_props.p, segments_2d_props.q)"
    "Nz_vector"))
  (between_points_on_subsegment_TCC1-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (between_points_on_subsegment subtype
    "(vectors_2D.-)(segments_2d_props.p, segments_2d_props.q)"
    "Nz_vector")))
 (between_points_on_subsegment 0
  (between_points_on_subsegment-1 nil 3874129022
   ("" (skeep)
    (("" (expand "^")
      (("" (expand "point_on_segment?")
        (("" (inst + "d/norm(p-q)")
          (("1" (ground)
            (("1" (cross-mult 1) nil nil) ("2" (cross-mult 1) nil nil)
             ("3" (rewrite "scal_sub_left")
              (("3" (cancel-add 1)
                (("3" (rewrite "scal_sub_right")
                  (("3" (elim-unary 1)
                    (("3" (mult-by 1 "norm(p-q)") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (ground) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (endpoint_not_on_subsegment 0
  (endpoint_not_on_subsegment-1 nil 3874129022
   ("" (skeep)
    (("" (lemma "proper_subsegment_excludes_endpoints")
      (("" (inst - "e`p1" "(# p1 := q, p2 := p #)" "e")
        (("1" (assert)
          (("1" (expand "subsegment?")
            (("1" (expand "segment_endpoint?") (("1" (propax) nil nil))
              nil))
            nil))
          nil)
         ("2" (ground) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (between_points_not_endpoints 0
  (between_points_not_endpoints-1 nil 3874129022
   ("" (skeep)
    (("" (lemma "proper_subsegment_excludes_endpoints")
      (("" (inst - "r" "(# p1 := q, p2 := p #)" "e")
        (("1" (ground)
          (("1" (expand "subsegment?") (("1" (propax) nil nil)) nil))
          nil)
         ("2" (ground) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (point_on_segment_cross_is_0 0
  (point_on_segment_cross_is_0-1 nil 3874129022 ("" (grind) nil nil)
   nil shostak))
 (cross_is_0_point_on_segments_TCC1 0
  (cross_is_0_point_on_segments_TCC1-2 nil 3874129022
   ("" (skeep)
    (("" (equate "2*e`p1" "e`p1+e`p1" t)
      (("" (cancel-add -3)
        (("" (typepred "e`p2")
          (("" (hide-all-but (-1 -4))
            (("" (move-terms -2 l 2) (("" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (cross_is_0_point_on_segments subtype
    "(vectors_2D.-)(vectors_2D.*(2, segments_2d_props.e`p1), segments_2d_props.e`p2)"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_props.e`p1}"))
  (cross_is_0_point_on_segments_TCC1-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (cross_is_0_point_on_segments subtype
    "(vectors_2D.-)(vectors_2D.*(2, segments_2d_props.e`p1), segments_2d_props.e`p2)"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_props.e`p1}")))
 (cross_is_0_point_on_segments 0
  (cross_is_0_point_on_segments-1 nil 3874129022
   ("" (skeep)
    (("" (case-replace "p=e`p1")
      (("1" (hide-all-but 1)
        (("1" (expand "point_on_segment?")
          (("1" (inst + "0") (("1" (assert) nil nil)) nil)) nil))
        nil)
       ("2" (rewrite "parallel_equiv_cross_eq_0" :dir rl)
        (("2" (expand "parallel?")
          (("2" (skeep)
            (("2" (move-terms -1 l 2)
              (("2" (replace -1)
                (("2" (assert)
                  (("2" (rewrite "norm_scal")
                    (("2" (cancel-by -2 (! -2 r))
                      (("2" (expand "abs")
                        (("2" (lift-if)
                          (("2" (expand "point_on_segment?")
                            (("2" (ground)
                              (("1"
                                (hide 3)
                                (("1"
                                  (inst + "-nzk")
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 5)
                                (("2"
                                  (inst + "nzk")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (rev_cross_is_0_point_on_segments_TCC1 0
  (rev_cross_is_0_point_on_segments_TCC1-2 nil 3874129022
   ("" (skeep)
    (("" (hide-all-but -3)
      (("" (equate "2*e`p1" "e`p1+e`p1" t)
        (("" (cancel-add -1)
          (("" (move-terms -1 l 2)
            (("" (typepred "e`p2") (("" (ground) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (rev_cross_is_0_point_on_segments subtype
    "(vectors_2D.-)(vectors_2D.*(2, segments_2d_props.e`p1), segments_2d_props.e`p2)"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_props.e`p1}"))
  (rev_cross_is_0_point_on_segments_TCC1-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (rev_cross_is_0_point_on_segments subtype
    "(vectors_2D.-)(vectors_2D.*(2, segments_2d_props.e`p1), segments_2d_props.e`p2)"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_props.e`p1}")))
 (rev_cross_is_0_point_on_segments 0
  (rev_cross_is_0_point_on_segments-1 nil 3874129022
   ("" (skeep)
    (("" (rewrite "cross_antisymmetric")
      (("" (use "cross_is_0_point_on_segments") (("" (ground) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (all_segment_points_have_pos_cross_1 0
  (all_segment_points_have_pos_cross_1-1 nil 3874129022
   ("" (skeep)
    (("" (rewrite "point_on_segment_has_offset")
      (("" (skeep)
        (("" (replace -1)
          (("" (assert)
            (("" (rewrite "cross_scales_1")
              (("" (real-props)
                (("" (case-replace "d=0")
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (all_segment_points_have_pos_cross_2 0
  (all_segment_points_have_pos_cross_2-1 nil 3874129022
   ("" (skeep)
    (("" (rewrite "point_on_segment_has_offset")
      (("" (skeep)
        (("" (replace -1)
          (("" (assert)
            (("" (rewrite "cross_scales_2")
              (("" (real-props)
                (("" (case-replace "d=0")
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (all_segment_points_have_pos_cross_3 0
  (all_segment_points_have_pos_cross_3-1 nil 3874129022
   ("" (skeep)
    (("" (expand "point_on_segment?")
      (("" (skeep)
        (("" (replace -3 :hide? t)
          (("" (case-replace "t = 0")
            (("1" (assert) nil nil)
             ("2" (case-replace "t = 1")
              (("1" (assert) nil nil)
               ("2"
                (equate "(1 - t) * s`p1 + t * s`p2 - v"
                 "(1 - t) * (s`p1 - v) + t * (s`p2 - v)")
                (("1" (rewrite "cross_distrib_add_1")
                  (("1" (rewrite* "cross_scales_1")
                    (("1" (rewrite "cross_self_zero")
                      (("1" (assert) (("1" (real-props) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (all_segment_points_have_pos_cross_4 0
  (all_segment_points_have_pos_cross_4-1 nil 3874129022
   ("" (skeep)
    (("" (expand "point_on_segment?")
      (("" (skeep)
        (("" (replace -3 :hide? t)
          (("" (case-replace "t = 0")
            (("1" (assert) nil nil)
             ("2" (case-replace "t = 1")
              (("1" (assert) nil nil)
               ("2"
                (equate "(1 - t) * s`p1 + t * s`p2 - v"
                 "(1 - t) * (s`p1 - v) + t * (s`p2 - v)")
                (("1" (rewrite "cross_distrib_add_2")
                  (("1" (rewrite* "cross_scales_2")
                    (("1" (rewrite "cross_self_zero")
                      (("1" (assert)
                        (("1" (factor! (! 4 l 1))
                          (("1" (split 4)
                            (("1" (flatten)
                              (("1" (mult-cases -1) nil nil)) nil)
                             ("2" (flatten)
                              (("2" (mult-cases 1) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (pos_cross_falling_segment_horiz_points 0
  (pos_cross_falling_segment_horiz_points-1 nil 3874129022
   ("" (skeep)
    (("" (rewrite "point_on_segment_has_offset")
      (("" (skeep)
        (("" (replace -3 :hide? t)
          (("" (grind)
            (("" (case-replace "d = 0")
              (("1" (assert)
                (("1" (factor -2 l (1 3))
                  (("1" (factor -2 l (2 3))
                    (("1"
                      (equate
                       "p`x * (s`p2`y - s`p1`y) + s`p1`x * (s`p1`y - s`p2`y)"
                       "(s`p1`y - s`p2`y) * (s`p1`x - p`x)")
                      (("1" (mult-cases -2) nil nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (move-terms 2 r 1)
                (("2" (factor -1 l (2 4))
                  (("2" (factor -1 l (2 3))
                    (("2"
                      (equate
                       "s`p1`x * (s`p1`y - s`p2`y) + p`x * (s`p2`y - s`p1`y)"
                       "(p`x - s`p1`x) * (s`p2`y - s`p1`y)")
                      (("1" (factor 2 r)
                        (("1" (factor -1 l (2 4))
                          (("1" (factor -1 l (3 4))
                            (("1"
                              (equate
                               "s`p2`x * d * (-s`p2`y + s`p1`y) + s`p1`x * d * (-s`p1`y + s`p2`y)"
                               "d * (s`p2`x - s`p1`x) * (s`p1`y - s`p2`y)")
                              (("1"
                                (move-terms -1 l 2)
                                (("1"
                                  (equate
                                   "0 - (p`x - s`p1`x) * (s`p2`y - s`p1`y)"
                                   "(p`x - s`p1`x) * (s`p1`y - s`p2`y)"
                                   (assert))
                                  (("1"
                                    (div-by -1 "s`p1`y - s`p2`y")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (falling_segment_horiz_points_pos_cross 0
  (falling_segment_horiz_points_pos_cross-1 nil 3874129022
   ("" (skeep)
    (("" (rewrite "point_on_segment_has_offset")
      (("" (skeep)
        (("" (replace -2 :hide? t)
          (("" (grind)
            (("" (case-replace "d = 0")
              (("1" (assert)
                (("1" (factor 1 l (1 3))
                  (("1" (factor 1 l (2 3))
                    (("1"
                      (equate
                       "p`x * (s`p2`y - s`p1`y) + s`p1`x * (s`p1`y - s`p2`y)"
                       "(s`p1`y - s`p2`y) * (s`p1`x - p`x)")
                      (("1" (mult-cases 1) nil nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (factor 2 l (2 4))
                (("2" (factor 2 l (2 3))
                  (("2"
                    (equate
                     "s`p1`x * (s`p1`y - s`p2`y) + p`x * (s`p2`y - s`p1`y)"
                     "(p`x - s`p1`x) * (s`p2`y - s`p1`y)")
                    (("1" (factor 2 l (2 5))
                      (("1" (factor 2 l (3 4))
                        (("1"
                          (equate
                           "s`p2`y * d * (-s`p2`x + s`p1`x) + s`p1`y * d * (-s`p1`x + s`p2`x)"
                           "d * (s`p2`y - s`p1`y) * (s`p1`x - s`p2`x)"
                           (assert))
                          (("1" (factor 2 l)
                            (("1" (move-terms -3 r 1)
                              (("1"
                                (factor -3 r)
                                (("1" (mult-cases 2) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (complementary_angle_cross_pos_1_TCC1 0
  (complementary_angle_cross_pos_1_TCC1-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (complementary_angle_cross_pos_1 subtype "segments_2d_props.w"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_props.u}"))
  (complementary_angle_cross_pos_1_TCC1-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (complementary_angle_cross_pos_1 subtype "segments_2d_props.w"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_props.u}")))
 (complementary_angle_cross_pos_1 0
  (complementary_angle_cross_pos_1-1 nil 3874129022
   ("" (skeep)
    (("" (use "point_on_reverse_segment")
      (("1" (assert)
        (("1" (expand "reverse_segment")
          (("1" (rewrite* "point_on_segment_has_offset")
            (("1" (skeep*)
              (("1" (replace -1 4)
                (("1" (replace -3 -5)
                  (("1"
                    (equate "u - (u + d!1 * (w - u))" "-d!1 * (w - u)")
                    (("1"
                      (equate "w - (w + d * (u - w))" "-d * (u - w)")
                      (("1" (replace -1 4 :dir rl)
                        (("1" (replace -3 -5 :dir rl)
                          (("1" (rewrite "cross_scales_2")
                            (("1" (rewrite "cross_scales_1")
                              (("1"
                                (real-props)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (case-replace "d = 0")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (assert)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (ground) nil nil))
      nil))
    nil)
   nil shostak))
 (complementary_angle_cross_pos_2 0
  (complementary_angle_cross_pos_2-1 nil 3874129022
   ("" (skeep)
    (("" (use "point_on_reverse_segment")
      (("1" (assert)
        (("1" (expand "reverse_segment")
          (("1" (rewrite* "point_on_segment_has_offset")
            (("1" (skeep*)
              (("1" (replace -1 -5)
                (("1" (replace -3 4)
                  (("1"
                    (equate "u - (u + d!1 * (w - u))" "-d!1 * (w - u)")
                    (("1"
                      (equate "w - (w + d * (u - w))" "-d * (u - w)")
                      (("1" (replace -1 -5 :dir rl)
                        (("1" (replace -3 4 :dir rl)
                          (("1" (rewrite "cross_scales_2")
                            (("1" (rewrite "cross_scales_1")
                              (("1"
                                (real-props)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (case-replace "d!1 = 0")
                                    (("1" (assert) nil nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (ground) nil nil))
      nil))
    nil)
   nil shostak))
 (endpts_cross_pos_imp_pt_on_seg_cross_pos_TCC1 0
  (endpts_cross_pos_imp_pt_on_seg_cross_pos_TCC1-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (endpts_cross_pos_imp_pt_on_seg_cross_pos subtype
    "segments_2d_props.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= segments_2d_props.p}"))
  (endpts_cross_pos_imp_pt_on_seg_cross_pos_TCC1-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (endpts_cross_pos_imp_pt_on_seg_cross_pos subtype
    "segments_2d_props.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= segments_2d_props.p}")))
 (endpts_cross_pos_imp_pt_on_seg_cross_pos 0
  (endpts_cross_pos_imp_pt_on_seg_cross_pos-1 nil 3874129022
   ("" (skeep)
    (("" (expand "point_on_segment?")
      (("" (skeep)
        (("" (replace -5 :hide? t)
          ((""
            (equate "(1 - t) * p + t * q - w"
             "(1 - t) * (p - w) + t * (q - w)")
            (("1" (rewrite "cross_distrib_add_2")
              (("1" (rewrite* "cross_scales_2")
                (("1" (mult-by -1 "(1 - t)")
                  (("1" (mult-by -2 "t") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (triangle_split_angles_cross_pos_TCC1 0
  (triangle_split_angles_cross_pos_TCC1-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (triangle_split_angles_cross_pos subtype "segments_2d_props.u"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_props.w}"))
  (triangle_split_angles_cross_pos_TCC1-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (triangle_split_angles_cross_pos subtype "segments_2d_props.u"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_props.w}")))
 (triangle_split_angles_cross_pos_TCC2 0
  (triangle_split_angles_cross_pos_TCC2-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (triangle_split_angles_cross_pos subtype "segments_2d_props.v"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_props.u}"))
  (triangle_split_angles_cross_pos_TCC2-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (triangle_split_angles_cross_pos subtype "segments_2d_props.v"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_props.u}")))
 (triangle_split_angles_cross_pos_TCC3 0
  (triangle_split_angles_cross_pos_TCC3-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (triangle_split_angles_cross_pos subtype "segments_2d_props.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= segments_2d_props.p}"))
  (triangle_split_angles_cross_pos_TCC3-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (triangle_split_angles_cross_pos subtype "segments_2d_props.q"
    "{p_1: vectors_cross_2d.point_2d | p_1 /= segments_2d_props.p}")))
 (triangle_split_angles_cross_pos 0
  (triangle_split_angles_cross_pos-1 nil 3874129022
   ("" (skeep)
    (("" (lemma "triangle_vertices_cross_pos")
      (("" (inst - "u" "w" "v")
        (("" (assert)
          (("" (flatten)
            (("" (case "u = w or u = v or v = w")
              (("1" (split -1)
                (("1" (hide-all-but (-1 -2)) (("1" (grind) nil nil))
                  nil)
                 ("2" (hide-all-but (-1 -4)) (("2" (grind) nil nil))
                  nil)
                 ("3" (hide-all-but (-1 -3)) (("3" (grind) nil nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (lemma "all_segment_points_have_pos_cross_2")
                  (("2" (inst - "p" "(# p1 := w, p2 := u #)" "v - w")
                    (("1" (assert)
                      (("1"
                        (lemma "all_segment_points_have_pos_cross_3")
                        (("1" (inst - "q" "(# p1 := u, p2 := v #)" "w")
                          (("1" (assert)
                            (("1"
                              (lemma
                               "all_segment_points_have_pos_cross_2")
                              (("1"
                                (inst
                                 -
                                 "p"
                                 "(# p1 := w, p2 := u #)"
                                 "q - w")
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma
                                     "all_segment_points_have_pos_cross_3")
                                    (("1"
                                      (inst
                                       -
                                       "r"
                                       "(# p1 := p, p2 := q #)"
                                       "w")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma
                                           "all_segment_points_have_pos_cross_2")
                                          (("1"
                                            (inst
                                             -
                                             "p"
                                             "(# p1 := w, p2 := u #)"
                                             "r - w")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 "endpts_cross_pos_imp_pt_on_seg_cross_pos")
                                                (("1"
                                                  (inst
                                                   -
                                                   "v"
                                                   "w"
                                                   "p"
                                                   "q"
                                                   "r")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "all_segment_points_have_pos_cross_4")
                                                      (("1"
                                                        (inst
                                                         -
                                                         "q"
                                                         "(# p1 := u, p2 := v #)"
                                                         "w")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (lemma
                                                               "triangle_vertices_cross_pos")
                                                              (("1"
                                                                (inst
                                                                 -
                                                                 "w"
                                                                 "r"
                                                                 "p")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (lemma
                                                                       "complementary_angle_cross_pos_2")
                                                                      (("1"
                                                                        (inst
                                                                         -
                                                                         "r"
                                                                         "v"
                                                                         "w"
                                                                         "p")
                                                                        (("1"
                                                                          (ground)
                                                                          (("1"
                                                                            (lemma
                                                                             "triangle_vertices_cross_pos")
                                                                            (("1"
                                                                              (inst
                                                                               -
                                                                               "r"
                                                                               "w"
                                                                               "v")
                                                                              (("1"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (rewrite
                                                                             "point_on_reverse_segment"
                                                                             1
                                                                             :dir
                                                                             rl)
                                                                            (("2"
                                                                              (expand
                                                                               "reverse_segment")
                                                                              (("2"
                                                                                (replace
                                                                                 -3)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (ground) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (triangle_cross_pos_below 0
  (triangle_cross_pos_below-1 nil 3874129022
   ("" (skeep)
    (("" (name-replace* ("vdx" "u`x - v`x" "vdy" "u`y - v`y"))
      (("" (name-replace* ("wdx" "u`x - w`x" "wdy" "u`y - w`y"))
        ((""
          (name-replace*
           ("p" "(# x := u`x - u`y * wdx / wdy, y := 0 #)" "q"
            "(# x := u`x - u`y * vdx / vdy, y := 0 #)"))
          (("" (case "u = w or u = v")
            (("1" (ground) nil nil)
             ("2" (flatten)
              (("2"
                (case "point_on_segment?(p, (# p1 := u, p2 := w #))")
                (("1"
                  (case "point_on_segment?(q, (# p1 := u, p2 := v #))")
                  (("1" (case "p`x < 0 & 0 < q`x")
                    (("1" (flatten)
                      (("1" (case "cross(w - u, v - u) > 0")
                        (("1" (lemma "triangle_split_angles_cross_pos")
                          (("1" (inst - "u" "v" "w" "p" "q" "(0,0)")
                            (("1" (ground)
                              (("1"
                                (lemma "triangle_vertices_cross_pos")
                                (("1"
                                  (inst - "u" "w" "v")
                                  (("1"
                                    (ground)
                                    (("1"
                                      (lemma
                                       "triangle_vertices_cross_pos")
                                      (("1"
                                        (inst
                                         -
                                         "w"
                                         "v"
                                         "(# x := 0, y := 0 #)")
                                        (("1"
                                          (ground)
                                          (("1"
                                            (rewrite
                                             "cross_distrib_sub_1")
                                            (("1"
                                              (expand "cross" -1 1)
                                              (("1"
                                                (rewrite
                                                 "cross_distrib_sub_2"
                                                 -1)
                                                (("1"
                                                  (rewrite
                                                   "cross_self_zero")
                                                  (("1"
                                                    (rewrite
                                                     "cross_antisymmetric")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite
                                 "point_on_reverse_segment"
                                 1
                                 :dir
                                 rl)
                                (("2"
                                  (expand "reverse_segment")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (case "p`y = 0 & q`y = 0")
                                (("1"
                                  (hide-all-but (-1 -3 -4 1))
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "point_on_segment?")
                                      (("1"
                                        (inst + "-p`x / (q`x - p`x)")
                                        (("1"
                                          (grind)
                                          (("1"
                                            (mult-by 1 "q`x - p`x")
                                            (("1"
                                              (name-replace
                                               "dx"
                                               "q`x - p`x")
                                              (("1"
                                                (mult-by 1 "dx")
                                                (("1"
                                                  (real-props)
                                                  (("1"
                                                    (real-props)
                                                    (("1"
                                                      (factor 1 r)
                                                      (("1"
                                                        (mult-cases 1)
                                                        (("1"
                                                          (equate
                                                           "p`x * dx + q`x * -p`x - p`x * -p`x"
                                                           "p`x * dx + p`x * (p`x - q`x)")
                                                          (("1"
                                                            (factor
                                                             1
                                                             l)
                                                            (("1"
                                                              (expand
                                                               "dx")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (cross-mult 1) nil nil)
                                           ("3"
                                            (cross-mult 1)
                                            nil
                                            nil))
                                          nil)
                                         ("2" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (lemma "all_segment_points_have_pos_cross_1")
                          (("2"
                            (inst - "(u`x - u`y * wdx / wdy, 0)"
                             "(# p1 := u, p2 := w #)" "v - u")
                            (("1" (ground)
                              (("1"
                                (lemma
                                 "all_segment_points_have_pos_cross_2")
                                (("1"
                                  (inst
                                   -
                                   "(u`x - u`y * vdx / vdy, 0)"
                                   "(# p1 := u, p2 := v #)"
                                   _)
                                  (("1"
                                    (inst
                                     -
                                     "(# x := u`x - u`y * wdx / wdy, y := 0 #) - u")
                                    (("1"
                                      (replace -6)
                                      (("1"
                                        (replace -7)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (case "p`y = 0 & q`y = 0")
                                            (("1"
                                              (hide-all-but
                                               (-1 -2 -3 -4 -15 2))
                                              (("1"
                                                (replace
                                                 -2
                                                 :dir
                                                 rl
                                                 :hide?
                                                 t)
                                                (("1"
                                                  (grind)
                                                  (("1"
                                                    (factor 1 l)
                                                    (("1"
                                                      (mult-cases 1)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (ground) nil nil))
                                            nil)
                                           ("2" (propax) nil nil)
                                           ("3" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -6)
                                (("2" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (ground)
                      (("1" (replace -4 1 :dir rl)
                        (("1" (assert)
                          (("1" (mult-by 1 "wdy")
                            (("1" (real-props)
                              (("1"
                                (real-props)
                                (("1"
                                  (expand "wdy")
                                  (("1"
                                    (expand "wdx")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replace -3 1 :dir rl)
                        (("2" (assert)
                          (("2" (mult-by 1 "vdy")
                            (("2" (real-props)
                              (("2"
                                (real-props)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 -3)
                    (("2" (rewrite "point_on_segment_has_offset")
                      (("2" (inst + "u`y / (u`y - v`y)")
                        (("1" (ground)
                          (("1" (replace -1 1 :dir rl)
                            (("1" (replace -4)
                              (("1"
                                (hide-all-but (-6 -8 1))
                                (("1"
                                  (grind-with-ext)
                                  (("1"
                                    (factor 1 r (2 3))
                                    (("1" (cancel-by 1 "u`y") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (cross-mult 1) nil nil))
                          nil)
                         ("2" (cross-mult 1) (("2" (assert) nil nil))
                          nil)
                         ("3" (ground) nil nil))
                        nil))
                      nil))
                    nil)
                   ("3" (ground) nil nil))
                  nil)
                 ("2" (hide -1)
                  (("2" (lemma "point_on_segment_has_offset")
                    (("2"
                      (inst -
                       "(# x := u`x - u`y * wdx / wdy, y := 0 #)" _)
                      (("2" (name-replace "s" "(# p1 := u, p2 := w #)")
                        (("2" (inst?)
                          (("2" (replace -2)
                            (("2" (replace -1 :hide? t)
                              (("2"
                                (inst + "u`y / (u`y - w`y)")
                                (("1"
                                  (ground)
                                  (("1"
                                    (expand "s")
                                    (("1"
                                      (case
                                       "(u + u`y / (u`y - w`y) * (w - u))`y = 0")
                                      (("1"
                                        (apply-extensionality :hide? t)
                                        (("1"
                                          (expand "wdx")
                                          (("1"
                                            (expand "+" 1)
                                            (("1"
                                              (expand "*" 1)
                                              (("1"
                                                (expand "-" 1)
                                                (("1"
                                                  (replace -3)
                                                  (("1"
                                                    (real-props)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (expand* "+" "*" "-")
                                          (("2"
                                            (cancel-by 1 "u`y")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (cross-mult 1) nil nil))
                                  nil)
                                 ("2"
                                  (cross-mult 1)
                                  (("2" (assert) nil nil))
                                  nil)
                                 ("3" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (ground) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (triangle_cross_pos_split_y 0
  (triangle_cross_pos_split_y-1 nil 3874129022
   ("" (skeep)
    (("" (lemma "triangle_cross_pos_below")
      (("" (inst - "a - u" "b - u" "c - u")
        (("" (assert) (("" (expand "-" 1) (("" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (triangle_cross_pos_above 0
  (triangle_cross_pos_above-1 nil 3874129022
   ("" (skeep)
    (("" (lemma "triangle_cross_pos_below")
      (("" (inst - "-v" "-w" "-u") (("" (grind) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (isosceles_dist_to_opp_side_bound_TCC1 0
  (isosceles_dist_to_opp_side_bound_TCC1-2 nil 3874129022
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (isosceles_dist_to_opp_side_bound subtype "segments_2d_props.w"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_props.u}"))
  (isosceles_dist_to_opp_side_bound_TCC1-1 nil 3874127255
   ("" (subtype-tcc) nil nil) nil nil
   (isosceles_dist_to_opp_side_bound subtype "segments_2d_props.w"
    "{p: vectors_cross_2d.point_2d | p /= segments_2d_props.u}")))
 (isosceles_dist_to_opp_side_bound 0
  (isosceles_dist_to_opp_side_bound-1 nil 3874129022
   ("" (skeep*)
    (("" (rewrite "point_on_segment_has_offset")
      (("" (skeep)
        (("" (lemma "perp_comps")
          (("" (inst-cp - "u" "v" "w - u" "d" "perp_pt(v, u, w - u)")
            (("1" (inst - "u" "v" "w - u" "1" "perp_pt(v, u, w - u)")
              (("1" (assert)
                (("1" (name-replace "ppt" "perp_pt(v, u, w - u)")
                  (("1" (replace -4 :dir rl)
                    (("1" (rewrite "sq_le" + :dir rl)
                      (("1" (equate "(u + (w - u)) - v" "w - v")
                        (("1" (replace -3)
                          (("1" (replace -1 +)
                            (("1" (replace -2 +)
                              (("1"
                                (cancel-add 2)
                                (("1"
                                  (hide -1 -2)
                                  (("1"
                                    (rewrite "sq_le" +)
                                    (("1"
                                      (rewrite* "norm_scal")
                                      (("1"
                                        (real-props)
                                        (("1"
                                          (case-replace "ppt = 1/2")
                                          (("1"
                                            (expand "abs")
                                            (("1"
                                              (apply
                                               (repeat (lift-if)))
                                              (("1" (ground) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 3)
                                            (("2"
                                              (expand "ppt")
                                              (("2"
                                                (expand "perp_pt")
                                                (("2"
                                                  (cross-mult 1)
                                                  (("2"
                                                    (expand "norm")
                                                    (("2"
                                                      (rewrite
                                                       "sqrt_eq")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (two_segments_w_same_st_pt_and_one_more_pt_same_normalized 0
  (two_segments_w_same_st_pt_and_one_more_pt_same_normalized-1 nil
   3874129022
   ("" (skeep 1 t)
    (("" (skeep -2 t)
      (("" (expand "^")
        (("" (case "are_segments_overlapping?(s1)(s2)")
          (("1" (use "overlapping_parallel")
            (("1" (assert)
              (("1" (expand "parallel?")
                (("1" (skeep -1)
                  (("1" (replace -1)
                    (("1" (expand "^")
                      (("1" (rewrite "norm_scal")
                        (("1" (expand "abs")
                          (("1" (lift-if)
                            (("1" (ground)
                              (("1"
                                (expand "point_on_segment?")
                                (("1"
                                  (skeep -5)
                                  (("1"
                                    (skeep -8)
                                    (("1"
                                      (replace -4)
                                      (("1"
                                        (case-replace "t!1 = 0")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (replace -7)
                                          (("2"
                                            (case-replace
                                             "s2`p2 = (1/t!1) * ((t!1 - t) * s1`p1 + t * s1`p2)")
                                            (("1"
                                              (hide 2 3 -4)
                                              (("1"
                                                (case-replace
                                                 "(1 / t!1) * ((t!1 - t) * s1`p1 + t * s1`p2) - s1`p1 = (t / t!1) * (s1`p2 - s1`p1)")
                                                (("1"
                                                  (case-replace
                                                   "nzk * ((t / t!1) * (s1`p2 - s1`p1)) = (nzk * (t / t!1)) * (s1`p2 - s1`p1)")
                                                  (("1"
                                                    (case
                                                     "nzk * (t / t!1) = 1")
                                                    (("1"
                                                      (lemma
                                                       "quotient_pos_ge"
                                                       ("n0x" "t!1"))
                                                      (("1"
                                                        (lemma
                                                         "pos_times_ge"
                                                         ("x"
                                                          "t"
                                                          "y"
                                                          "1/t!1"))
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "pos_times_ge"
                                                               ("x"
                                                                "nzk"
                                                                "y"
                                                                "(t/t!1)"))
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (-5 1))
                                                      (("2"
                                                        (name-replace
                                                         "x"
                                                         "nzk * (t / t!1)")
                                                        (("2"
                                                          (grind-with-ext)
                                                          (("2"
                                                            (div-by
                                                             -1
                                                             "s1`p2`x - s1`p1`x")
                                                            (("1"
                                                              (field)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (div-by
                                                               -3
                                                               "s1`p2`y - s1`p1`y")
                                                              (("1"
                                                                (field)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (typepred
                                                                 "s1`p2")
                                                                (("2"
                                                                  (grind-with-ext)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind-with-ext)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2 3 4 -3)
                                              (("2"
                                                (grind-with-ext)
                                                nil
                                                nil))
                                              nil)
                                             ("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "are_segments_overlapping?")
            (("2" (inst 1 "s1`p1" "q")
              (("2" (split)
                (("1" (assert) nil nil)
                 ("2" (use "end_points_are_on_segment_2")
                  (("2" (assert) nil nil)) nil)
                 ("3" (propax) nil nil)
                 ("4" (replace -1 :dir RL)
                  (("4" (use "end_points_are_on_segment_2")
                    (("4" (assert) nil nil)) nil))
                  nil)
                 ("5" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (two_segments_w_opp_end_pt_and_one_more_pt_same_antinormalized 0
  (two_segments_w_opp_end_pt_and_one_more_pt_same_antinormalized-1 nil
   3874129022
   ("" (skeep 1 t)
    (("" (skeep -2 t)
      ((""
        (lemma
         "two_segments_w_same_st_pt_and_one_more_pt_same_normalized"
         ("s1" "s1" "s2" "reverse_segment(s2)"))
        (("1" (split)
          (("1"
            (lemma "reverse_segment_has_neg_norm_diff"
             ("s" "s2" "e" "reverse_segment(s2)"))
            (("1" (assert)
              (("1" (replace -2 :dir RL)
                (("1" (hide-all-but (-1 2))
                  (("1"
                    (name-replace*
                     ("x" "^(s2`p2 - s2`p1)" "y" "^(s1`p2 - s1`p1)")
                     :hide? T)
                    (("1" (grind-with-ext) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst 1 "q")
            (("2" (assert)
              (("2" (use "point_on_reverse_segment")
                (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (hide -2 -3 3) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak)))

