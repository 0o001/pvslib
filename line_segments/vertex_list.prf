(vertex_list
 (uniq_vertex_seq_TCC1 0
  (uniq_vertex_seq_TCC1-2 nil 3874129021
   (""
    (inst 1
     "(# length := 1, seq := LAMBDA(i: below(1)): (# x := 0, y := 0 #) #)")
    (("" (grind) nil nil)) nil)
   nil shostak
   (uniq_vertex_seq existence ""
    "{x: finseq[point_2d] | vertex_list.uniq_vertex_seq?(x)}"))
  (uniq_vertex_seq_TCC1-1 nil 3874127251 ("" (existence-tcc) nil nil)
   nil nil
   (uniq_vertex_seq existence ""
    "{x: finseq[point_2d] | vertex_list.uniq_vertex_seq?(x)}")))
 (uniq_vertex_seq_alt?_TCC1 0
  (uniq_vertex_seq_alt?_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (uniq_vertex_seq_alt? subtype "vertex_list.i" "below[f`length]"))
  (uniq_vertex_seq_alt?_TCC1-1 nil 3874127251
   ("" (subtype-tcc) nil nil) nil nil
   (uniq_vertex_seq_alt? subtype "vertex_list.i" "below[f`length]")))
 (uniq_vertex_seq_alt?_same_as_uniq_vertex_seq 0
  (uniq_vertex_seq_alt?_same_as_uniq_vertex_seq-1 nil 3874129021
   ("" (skeep 1 t)
    (("" (expand* "uniq_vertex_seq?" "uniq_vertex_seq_alt?")
      (("" (iff)
        (("" (split)
          (("1" (flatten)
            (("1" (assert)
              (("1" (skeep 1 t)
                (("1" (inst -5 "i" "j") (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (assert)
              (("2" (skeep 1 t)
                (("2" (case "j > i")
                  (("1" (inst -5 "i" "j")
                    (("1" (assert) nil nil) ("2" (assert) nil nil))
                    nil)
                   ("2" (inst -4 "j" "i")
                    (("1" (assert) nil nil) ("2" (assert) nil nil)
                     ("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (singleton_seq_is_uniq 0
  (singleton_seq_is_uniq-1 nil 3874129021 ("" (grind) nil nil) nil
   shostak))
 (singleton_seq_TCC1 0
  (singleton_seq_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (singleton_seq subtype
    "(# length := 1, seq := LAMBDA (i: naturalnumbers.below(1)): vertex_list.p #)"
    "{uvs: vertex_list.uniq_vertex_seq | uvs`length = 1}"))
  (singleton_seq_TCC1-1 nil 3874127251 ("" (subtype-tcc) nil nil) nil
   nil
   (singleton_seq subtype
    "(# length := 1, seq := LAMBDA (i: naturalnumbers.below(1)): vertex_list.p #)"
    "{uvs: vertex_list.uniq_vertex_seq | uvs`length = 1}")))
 (uniq_vertex_seq_with_empty_TCC1 0
  (uniq_vertex_seq_with_empty_TCC1-2 nil 3874129021
   ("" (inst 1 "empty_seq[point_2d]") (("" (grind) nil nil)) nil) nil
   shostak
   (uniq_vertex_seq_with_empty existence ""
    "{x: finseq[point_2d] | vertex_list.uniq_vertex_seq_with_empty?(x)}"))
  (uniq_vertex_seq_with_empty_TCC1-1 nil 3874127251
   ("" (existence-tcc) nil nil) nil nil
   (uniq_vertex_seq_with_empty existence ""
    "{x: finseq[point_2d] | vertex_list.uniq_vertex_seq_with_empty?(x)}")))
 (empty_seq_is_uniq_vertex_seq_with_empty 0
  (empty_seq_is_uniq_vertex_seq_with_empty-1 nil 3874129021
   ("" (grind) nil nil) nil shostak))
 (append_to_uniq_vertex_seq_TCC1 0
  (append_to_uniq_vertex_seq_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (append_to_uniq_vertex_seq subtype
    "LAMBDA (i: naturalnumbers.upto(vertex_list.s`length)): IF reals.<(i, vertex_list.s`length) THEN vertex_list.s`seq(i) ELSE vertex_list.p ENDIF"
    "[below[1 + s`length] -> point_2d]"))
  (append_to_uniq_vertex_seq_TCC1-1 nil 3874127251
   ("" (subtype-tcc) nil nil) nil nil
   (append_to_uniq_vertex_seq subtype
    "LAMBDA (i: naturalnumbers.upto(vertex_list.s`length)): IF reals.<(i, vertex_list.s`length) THEN vertex_list.s`seq(i) ELSE vertex_list.p ENDIF"
    "[below[1 + s`length] -> point_2d]")))
 (append_to_uniq_vertex_seq_TCC2 0
  (append_to_uniq_vertex_seq_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (append_to_uniq_vertex_seq subtype
    "(# length := (number_fields.+)(vertex_list.s`length, 1), seq := LAMBDA (i: naturalnumbers.upto(vertex_list.s`length)): IF reals.<(i, vertex_list.s`length) THEN vertex_list.s`seq(i) ELSE vertex_list.p ENDIF #)"
    "uniq_vertex_seq"))
  (append_to_uniq_vertex_seq_TCC2-1 nil 3874127251
   ("" (subtype-tcc) nil nil) nil nil
   (append_to_uniq_vertex_seq subtype
    "(# length := (number_fields.+)(vertex_list.s`length, 1), seq := LAMBDA (i: naturalnumbers.upto(vertex_list.s`length)): IF reals.<(i, vertex_list.s`length) THEN vertex_list.s`seq(i) ELSE vertex_list.p ENDIF #)"
    "uniq_vertex_seq")))
 (uniq_vertex_list_TCC1 0
  (uniq_vertex_list_TCC1-2 nil 3874129021
   ("" (skeep 1 t)
    ((""
      (inst 1 "LAMBDA(i: below(num_vertices)): (# x := 0, y := i #)")
      (("" (grind) nil nil)) nil))
    nil)
   nil shostak
   (uniq_vertex_list existence ""
    "{x: [naturalnumbers.below(vertex_list.num_vertices) -> point_2d] | vertex_list.uniq_vertex_list?(vertex_list.num_vertices)(x)}"))
  (uniq_vertex_list_TCC1-1 nil 3874127251 ("" (existence-tcc) nil nil)
   nil nil
   (uniq_vertex_list existence ""
    "{x: [naturalnumbers.below(vertex_list.num_vertices) -> point_2d] | vertex_list.uniq_vertex_list?(vertex_list.num_vertices)(x)}")))
 (uniq_seq_is_uniq_list 0
  (uniq_seq_is_uniq_list-1 nil 3874129021 ("" (grind) nil nil) nil
   shostak))
 (uniq_vertex_list_alt?_TCC1 0
  (uniq_vertex_list_alt?_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (uniq_vertex_list_alt? subtype "vertex_list.i"
    "naturalnumbers.below(vertex_list.num_vertices)"))
  (uniq_vertex_list_alt?_TCC1-1 nil 3874127251
   ("" (subtype-tcc) nil nil) nil nil
   (uniq_vertex_list_alt? subtype "vertex_list.i"
    "naturalnumbers.below(vertex_list.num_vertices)")))
 (uniq_vertex_list_alt?_same_as_uniq_vertex_list 0
  (uniq_vertex_list_alt?_same_as_uniq_vertex_list-1 nil 3874129021
   ("" (skeep 1 t)
    (("" (expand* "uniq_vertex_list?" "uniq_vertex_list_alt?")
      (("" (iff)
        (("" (split)
          (("1" (flatten)
            (("1" (assert)
              (("1" (skeep 1 t)
                (("1" (inst -4 "i" "j") (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (assert)
              (("2" (skeep 1 t)
                (("2" (case "j > i")
                  (("1" (inst -4 "i" "j")
                    (("1" (assert) nil nil) ("2" (assert) nil nil))
                    nil)
                   ("2" (inst -3 "j" "i")
                    (("1" (assert) nil nil) ("2" (assert) nil nil)
                     ("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (rotated_vertices_TCC1 0
  (rotated_vertices_TCC1-2 nil 3874129021
   ("" (skeep)
    (("" (typepred "s")
      (("" (expand "uniq_vertex_list?")
        (("" (skeep + t)
          (("" (inst - "rem(len)(i_1 + n)" "rem(len)(j + n)")
            (("1" (ground) nil nil)
             ("2" (ground)
              (("2" (rewrite "rem_sum_elim2")
                (("2" (rewrite* "rem_mod") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak
   (rotated_vertices subtype
    "LAMBDA (i: naturalnumbers.below(vertex_list.len)): vertex_list.s(modulo_arithmetic.rem(vertex_list.len)((number_fields.+)(i, vertex_list.n)))"
    "vertex_list.uniq_vertex_list(vertex_list.len)"))
  (rotated_vertices_TCC1-1 nil 3874127251 ("" (subtype-tcc) nil nil)
   nil nil
   (rotated_vertices subtype
    "LAMBDA (i: naturalnumbers.below(vertex_list.len)): vertex_list.s(modulo_arithmetic.rem(vertex_list.len)((number_fields.+)(i, vertex_list.n)))"
    "vertex_list.uniq_vertex_list(vertex_list.len)")))
 (vertex_list_prefix_TCC1 0
  (vertex_list_prefix_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (vertex_list_prefix subtype "vertex_list.i"
    "naturalnumbers.below(vertex_list.len)"))
  (vertex_list_prefix_TCC1-1 nil 3874127251 ("" (subtype-tcc) nil nil)
   nil nil
   (vertex_list_prefix subtype "vertex_list.i"
    "naturalnumbers.below(vertex_list.len)")))
 (vertex_list_prefix_TCC2 0
  (vertex_list_prefix_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (vertex_list_prefix subtype
    "LAMBDA (i: naturalnumbers.below((number_fields.+)(vertex_list.n, 1))): vertex_list.s(i)"
    "vertex_list.uniq_vertex_list((number_fields.+)(1, vertex_list.n))"))
  (vertex_list_prefix_TCC2-1 nil 3874127251 ("" (subtype-tcc) nil nil)
   nil nil
   (vertex_list_prefix subtype
    "LAMBDA (i: naturalnumbers.below((number_fields.+)(vertex_list.n, 1))): vertex_list.s(i)"
    "vertex_list.uniq_vertex_list((number_fields.+)(1, vertex_list.n))")))
 (singleton_seq_length 0
  (singleton_seq_length-1 nil 3874129021 ("" (grind) nil nil) nil
   shostak))
 (singleton_seq_first_TCC1 0
  (singleton_seq_first_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (singleton_seq_first subtype "0" "below[singleton_seq(p)`length]"))
  (singleton_seq_first_TCC1-1 nil 3874127251 ("" (subtype-tcc) nil nil)
   nil nil
   (singleton_seq_first subtype "0" "below[singleton_seq(p)`length]")))
 (singleton_seq_first 0
  (singleton_seq_first-1 nil 3874129021 ("" (grind) nil nil) nil
   shostak))
 (concat_empty_seq 0
  (concat_empty_seq-1 nil 3874129021 ("" (grind-with-ext) nil nil) nil
   shostak))
 (subseq2_empty_seq 0
  (subseq2_empty_seq-1 nil 3874129021
   ("" (skeep) (("" (expand "^^") (("" (propax) nil nil)) nil)) nil)
   nil shostak))
 (subseq_full_seq_TCC1 0
  (subseq_full_seq_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (subseq_full_seq subtype
    "(number_fields.-)(vertex_list.s`length, 1)" "nat"))
  (subseq_full_seq_TCC1-1 nil 3874127251 ("" (subtype-tcc) nil nil) nil
   nil
   (subseq_full_seq subtype
    "(number_fields.-)(vertex_list.s`length, 1)" "nat")))
 (subseq_full_seq 0
  (subseq_full_seq-1 nil 3874129021 ("" (grind-with-ext) nil nil) nil
   shostak))
 (subseq2_full_seq 0
  (subseq2_full_seq-1 nil 3874129021 ("" (grind-with-ext) nil nil) nil
   shostak))
 (subseq2_length 0
  (subseq2_length-1 nil 3874129021 ("" (grind) nil nil) nil shostak))
 (subseq_split_TCC1 0
  (subseq_split_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (subseq_split subtype "(number_fields.+)(vertex_list.j, 1)"
    "below[s`length]"))
  (subseq_split_TCC1-1 nil 3874127251 ("" (subtype-tcc) nil nil) nil
   nil
   (subseq_split subtype "(number_fields.+)(vertex_list.j, 1)"
    "below[s`length]")))
 (subseq_split 0
  (subseq_split-1 nil 3874129021
   ("" (skosimp*)
    (("" (expand "^")
      (("" (apply (repeat (lift-if)))
        (("" (assert)
          (("" (expand "singleton_seq")
            (("" (expand "o ")
              (("" (ground)
                (("1" (grind) nil nil)
                 ("2" (apply-extensionality :hide? t)
                  (("1" (lift-if)
                    (("1" (ground)
                      (("1" (grind)
                        (("1" (typepred "x!1")
                          (("1" (grind)
                            (("1" (case "x!1 = 1 - i!1 + j!1")
                              (("1" (grind) nil nil)
                               ("2"
                                (hide 3)
                                (("2"
                                  (generalize "x!1" "x" "nat")
                                  (("2"
                                    (induct "x")
                                    (("1" (grind) nil nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil) ("3" (grind) nil nil)
                   ("4" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (subseq_same_seq_TCC1 0
  (subseq_same_seq_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (subseq_same_seq subtype "vertex_list.j"
    "below[(^[point_2d](s, (0, i)))`length]"))
  (subseq_same_seq_TCC1-1 nil 3874127251 ("" (subtype-tcc) nil nil) nil
   nil
   (subseq_same_seq subtype "vertex_list.j"
    "below[(^[point_2d](s, (0, i)))`length]")))
 (subseq_same_seq 0
  (subseq_same_seq-1 nil 3874129021 ("" (grind) nil nil) nil shostak))
 (subseq_concat_left 0
  (subseq_concat_left-1 nil 3874129021 ("" (grind-with-ext) nil nil)
   nil shostak))
 (subseq_concat_seq_left_TCC1 0
  (subseq_concat_seq_left_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (subseq_concat_seq_left subtype "vertex_list.j"
    "below[(^[point_2d](s, (0, i)))`length]"))
  (subseq_concat_seq_left_TCC1-1 nil 3874127251
   ("" (subtype-tcc) nil nil) nil nil
   (subseq_concat_seq_left subtype "vertex_list.j"
    "below[(^[point_2d](s, (0, i)))`length]")))
 (subseq_concat_seq_left 0
  (subseq_concat_seq_left-1 nil 3874129021 ("" (grind) nil nil) nil
   shostak))
 (concat_length 0
  (concat_length-1 nil 3874129021 ("" (grind) nil nil) nil shostak))
 (concat_singleton_seq_TCC1 0
  (concat_singleton_seq_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (concat_singleton_seq subtype "vertex_list.n"
    "below[(o[point_2d](s, singleton_seq(p)))`length]"))
  (concat_singleton_seq_TCC1-1 nil 3874127251
   ("" (subtype-tcc) nil nil) nil nil
   (concat_singleton_seq subtype "vertex_list.n"
    "below[(o[point_2d](s, singleton_seq(p)))`length]")))
 (concat_singleton_seq 0
  (concat_singleton_seq-1 nil 3874129021 ("" (grind) nil nil) nil
   shostak))
 (concat_singleton_left_TCC1 0
  (concat_singleton_left_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (concat_singleton_left subtype "0"
    "below[(o[point_2d](singleton_seq(p), s))`length]"))
  (concat_singleton_left_TCC1-1 nil 3874127251
   ("" (subtype-tcc) nil nil) nil nil
   (concat_singleton_left subtype "0"
    "below[(o[point_2d](singleton_seq(p), s))`length]")))
 (concat_singleton_left 0
  (concat_singleton_left-1 nil 3874129021 ("" (grind) nil nil) nil
   shostak))
 (length_concat_left 0
  (length_concat_left-1 nil 3874129021 ("" (grind-with-ext) nil nil)
   nil shostak))
 (find_seq_index_TCC1 0
  (find_seq_index_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (find_seq_index subtype "vertex_list.S`length"
    "naturalnumbers.upto(vertex_list.S`length)"))
  (find_seq_index_TCC1-1 nil 3874127251 ("" (subtype-tcc) nil nil) nil
   nil
   (find_seq_index subtype "vertex_list.S`length"
    "naturalnumbers.upto(vertex_list.S`length)")))
 (find_seq_index_TCC2 0
  (find_seq_index_TCC2-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (find_seq_index subtype "(number_fields.-)(vertex_list.i, 1)"
    "below[S`length]"))
  (find_seq_index_TCC2-1 nil 3874127251 ("" (subtype-tcc) nil nil) nil
   nil
   (find_seq_index subtype "(number_fields.-)(vertex_list.i, 1)"
    "below[S`length]")))
 (find_seq_index_TCC3 0
  (find_seq_index_TCC3-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (find_seq_index subtype "(number_fields.-)(vertex_list.i, 1)"
    "naturalnumbers.upto(vertex_list.S`length)"))
  (find_seq_index_TCC3-1 nil 3874127251 ("" (subtype-tcc) nil nil) nil
   nil
   (find_seq_index subtype "(number_fields.-)(vertex_list.i, 1)"
    "naturalnumbers.upto(vertex_list.S`length)")))
 (find_seq_index_TCC4 0
  (find_seq_index_TCC4-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (find_seq_index subtype "(number_fields.-)(vertex_list.i, 1)"
    "naturalnumbers.upto(vertex_list.S`length)"))
  (find_seq_index_TCC4-1 nil 3874127251 ("" (subtype-tcc) nil nil) nil
   nil
   (find_seq_index subtype "(number_fields.-)(vertex_list.i, 1)"
    "naturalnumbers.upto(vertex_list.S`length)")))
 (find_seq_index_TCC5 0
  (find_seq_index_TCC5-2 nil 3874129021 ("" (termination-tcc) nil nil)
   nil shostak
   (find_seq_index termination
    "vertex_list.find_seq_index(vertex_list.v, vertex_list.S, (number_fields.-)(vertex_list.i, 1))"
    "nil"))
  (find_seq_index_TCC5-1 nil 3874127251 ("" (termination-tcc) nil nil)
   nil nil
   (find_seq_index termination
    "vertex_list.find_seq_index(vertex_list.v, vertex_list.S, (number_fields.-)(vertex_list.i, 1))"
    "nil")))
 (find_seq_index_member_TCC1 0
  (find_seq_index_member_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (find_seq_index_member subtype "vertex_list.index"
    "below[S`length]"))
  (find_seq_index_member_TCC1-1 nil 3874127251
   ("" (subtype-tcc) nil nil) nil nil
   (find_seq_index_member subtype "vertex_list.index"
    "below[S`length]")))
 (find_seq_index_member 0
  (find_seq_index_member-1 nil 3874129021
   ("" (induct "i")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skeep*)
      (("3" (expand "find_seq_index" +)
        (("3" (lift-if)
          (("3" (ground) (("3" (inst?) (("3" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2) (("4" (grind) nil nil)) nil))
    nil)
   nil shostak))
 (find_seq_index_missing_TCC1 0
  (find_seq_index_missing_TCC1-2 nil 3874129021
   ("" (then (skeep* + t) (assert) (subtype-tcc)) nil nil) nil shostak
   (find_seq_index_missing subtype "vertex_list.j" "below[S`length]"))
  (find_seq_index_missing_TCC1-1 nil 3874127251
   ("" (subtype-tcc) nil nil) nil nil
   (find_seq_index_missing subtype "vertex_list.j" "below[S`length]")))
 (find_seq_index_missing 0
  (find_seq_index_missing-1 nil 3874129021
   ("" (induct "i")
    (("1" (grind) nil nil)
     ("2" (skeep*)
      (("2" (expand "find_seq_index" -4)
        (("2" (lift-if)
          (("2" (ground)
            (("2" (inst?)
              (("2" (assert)
                (("2" (inst - "j") (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (grind) nil nil)) nil))
    nil)
   nil shostak)))

