daidalus_io : THEORY

BEGIN
 
  IMPORTING get_kinematic_bands, 
            PVSioChecker@pvsio_checker,
	    structures@Maybe

  GCore: Global[Core, defcore]
  GParam: Global[Parameters, defparam]

  load_parameters(param:Parameters): void = 
    set[Parameters](GParam, param) AND 
    set[Core](GCore, update_from_param_all(val(GCore), param))

  xml_band_init(bands:list[RealBand], (regions:list[Region]|length(bands) = length(regions)), acc:string): 
    RECURSIVE string = 
    IF null?(bands) THEN acc 
    ELSE LET band = car(bands), 
    	     region = car(regions),
	     remain_bands = cdr(bands), 
	     remain_regions = cdr(regions), 
	     newstring = acc+"    <band region='"+pvs2str(region)+"'>
      <lower> "+to_str(band`lb)+
	     " </lower>
      <upper> "+to_str(band`ub)+ 
	     " </upper>
    </band>
" IN
    xml_band_init(remain_bands, remain_regions, newstring)
    ENDIF
    MEASURE length(bands) 

  xml_band(bands:list[RealBand],(regions:list[Region]|length(bands) = length(regions))): 
    string = xml_band_init(bands,regions,"")

  xml_kinematic_band(tb:string,kb:KinematicBand) : string = "
  <bands type='"+tb+"' recovery_time='"+to_str(kb`3)+"'>
"+xml_band(kb`1, kb`2)+"  </bands>"

  xml_bands(ucore:UpdatedCore,utrk,ugs,uvs:nnreal): string =
    LET trkb = IF utrk=0 THEN "" ELSE xml_kinematic_band("trk",get_kinematic_trk_bands(ucore,utrk)) ENDIF,
        vsb = IF ugs=0 THEN "" ELSE xml_kinematic_band("gs",get_kinematic_vs_bands(ucore,ugs)) ENDIF,
        gsb = IF uvs=0 THEN "" ELSE xml_kinematic_band("vs",get_kinematic_gs_bands(ucore,uvs)) ENDIF IN
  "<daidalus>"+trkb+vsb+gsb+"
</daidalus>"

  daidalus((traffic:Traffic | NOT null?(traffic) ),utrk,ugs,uvs:nnreal): string = 
    LET core:Core = val(GCore), 
        own = car(traffic), 
        acs = cdr(traffic),
	indic = delay?(core`cd,core`delay_time,own,acs),
        delay = IF indic THEN core`delay_time ELSE 0 ENDIF,
	omega = g*tan(core`bank_angle)/gs(own`v),
        core0:Core = core WITH [`ownship := own,
                                `traffic := acs,
                                `delay_ownship := delay_ac(delay)(own), 
                                `delay_traffic := delay_traf(delay)(acs)
			       ],
        core1:Core = update_RA_thr(core0),
        core2:Core = update_omega(core1),
        core3:Core = core2 WITH [`outdated := FALSE] IN
    xml_bands(core3,utrk,ugs,uvs)
 
END daidalus_io
