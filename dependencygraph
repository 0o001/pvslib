#!/usr/bin/env perl
# Script for generating a library dependency graph (requires dot) 
# Based on code wriiten by George Hagen (NASA)

use Getopt::Long;
use File::Basename;

$usageln = "Usage: dependencygraph [--help] [<option> ...] [<file>]";

sub usage() {
  print <<EOF;
dependencygraph -- generates a library dependency graph for <file>.

This script builds a dot graph of library dependecies. It will then call 
Graphviz's dot utility on that file to produce a pdf graph.

$usageln
<option> is
  --dot                    don't generate PDF unless --pdf is specified
  --pdf                    generate a pdf file (default)
  --title=<string>         use <string> as the title of the graph
  --out=<outfile>          use <outfile> as name of the output file
  --zoom=<dir1>,...,<dirn> zoom into libraries <dir1>,...,<dirn>
  --help                   print this message
  --after=<dir>            process all libraries after <dir>, exclusive
  --before=<dir>           process all libraries before <dir>, exclusive
  --but=<dir1>,..,<dirn>   do not process libraries <dir1>,...,<dirn>
  --do=<dir1>,..,<dirn>    process libraries <dir1>,...,<dirn> 
  --from=<dir>             process all libraries from <dir>, inclusive
  --to=<dir>               process all libraries to <dir>, inclusive
  --top=<topfile>          specify name of the top file directory

File <file> is an ordered list of libraries to be processed by proveit. If <file>
is not provided, the file name all-theories is assumed. Particular developments in
<file> can be selected using the options: --do, --after, --before, --from,
--to. The option --but unselect a list of developments. If <outfile>
is not specified, <file><postfix> is used. The <postfix> depends on
library selection option, i.e.,
--do,--but,--from,--to,--after,--before,--zoom.

When the option --zoom is used, the specified developments are zoomed
such that the each theory in those developments in represented by a
node in the dependency graph.
EOF
  exit;
}

sub deslash($)
{
  my $string = shift;
  $string =~ s|/||g;
  return $string;
}

sub trim($)
{
	my $string = shift;
	$string =~ s/^\s+//;
	$string =~ s/\s+$//;
	return $string;
}

my %libgraph;
my $graph;

sub qid {
  my ($lib,$th) = @_;
  if ($th) {
    return "{$lib"."_at_"."$th [label=\"$th\"]}";
  } else {
    return "{$lib [label=\"$lib\"]}";
  }
} 

sub edgestr {
  my ($fromlib,$fromth,$tolib,$toth) = @_;
  my $from = $fromlib;
  if ($fromth) {
    $from = "$fromlib_at_$fromth";
  }
  my $to = $tolib;
  if ($toth) {
    $to = "$tolib_at_$toth";
  }
  if (!$libgraph{$from}{$to}) {
    $libgraph{$from}{$to}=1;
    push(@targets,$tolib) if grep(/^$tolib$/,@nasalib) && !grep(/^$tolib$/,@targets);
    push(@external,$tolib) if !$toth && !grep(/^$tolib$/,@external);
    return qid($fromlib,$fromth)." -> ".qid($tolib,$toth).";\n";
  }
  return "";
}

sub writesubgraph {
  my ($lib, $from, $tos) = @_;
  @tolist = split /,/,$tos;
  foreach $to (@tolist) {
    @libto = split /@/,$to;
    if ($libto[1]) {
      my $str;
      if (grep(/^$libto[0]$/,@zoomlist)) {
	$str = edgestr($lib,$from,$libto[0],$libto[1]);
      } else {
	$str = edgestr($lib,$from,$libto[0],"");
      }
      $graph .= "  ".$str if $str;
    } else {
      my $str = edgestr($lib,$from,$lib,$to);
      $subgraph{$lib} .= "    ".$str if $str;
    }
  }
}

GetOptions('dot'=>\$dot,
	   'pdf'=>\$pdf,
	   'out=s'=>\$out,
	   'title=s'=>\$title,
           'after=s'=>\$after,
           'before=s'=>\$before,
	   'but=s'=>\@but,
	   'do=s'=>\@do,
	   'zoom=s'=>\@zoom,
           'from=s'=>\$from,
	   'help'=>\$help,
	   'top=s'=>\$top,
           'to=s'=>\$to) or exit 1;

$after = deslash($after);
$before = deslash($before);
$to = deslash($to);
$from = deslash($from);
$do = deslash(join(',',@do));
$but = deslash(join(',',@but));
$zoom = deslash(join(',',@zoom));

usage if $help;

$file = shift;
if (!$file) {
    $file = 'all-theories';
} elsif ( ! -f $file ) {
  die 'File $file not found';
}
die "$usageln\n" if shift; 

@butlist = split /,/,$but;
@dolist = split /,/,$do;
@zoomlist = split /,/,$zoom;

die "$file is a directory\n" if -d $file;
open (INFILE,$file) || die "File $file doesn't exist\n";

if ($out) {
  my ($base,$path,$type) = fileparse($out,qr{\..*});  
  if ($type eq ".pdf") {
    $pdf = 1;
    $dot = 0;
  } elsif ($type eq ".dot") {
    $dot = 1;
    $pdf = 0;
  }
  $out  = "$path$base";
} else {
  my ($base,$path,$type) = fileparse($file,qr{\..*});  
  $out  = "$path$base";
  my $dol = join('_',@dolist);
  $out .= "-$dol" if $dol;
  my $butl = join('_',@butlist);
  $out .= "-but_$butl" if $butl;
  $out .= "-from_$from" if $from;
  $out .= "-to_$to" if $to;
  $out .= "-after_$after" if $after;
  $out .= "-below_$below" if $below;
  my $zooml = join('_',@zoomlist);
  $out .= "-zoom_$zooml" if $zooml;
}

my $all = !($from || $after || @dolist || @zoomlist);

while (<INFILE>) {
  $line = $_;
  $line =~ s/\#.*$//;
  $line = trim($line);
  if ($line) {
    @listline = split /:/,$line;
    $lib = trim($listline[0]);
    if ($lib && -d $lib) {
      push(@nasalib,$lib);
      if ($lib eq $from) {
	$all = 1;
      } elsif ($lib eq $before) {
	$all = 0;
      }
      if (!grep(/^$lib$/,@butlist) && 
	  ($all || grep(/^$lib$/,@dolist) || grep(/^$lib$/,@zoomlist))) { 
	push(@targets,$lib);
      }
      if ($lib eq $after) {
	$all = 1;
      } elsif ($lib eq $to) {
	$all = 0;
      }
    } elsif ($lib) {
      die "Directory $lib not found\n";
    } 
  }
}

close(INFILE);
if ($top) {
  $topfile = $top;
} else {
  $topfile = "top";
}

die "Nothing to generate\n" if !@targets;

my @libraries=@targets;

foreach $lib (@libraries) {
  push(@nodes,$lib);
  if (-f "$lib/pvsbin/$topfile.dep") {
    open(FILE,"$lib/pvsbin/$topfile.dep");
    $zoom = grep(/^$lib$/,@zoomlist);
    $graph .= "  ".qid($lib,"").";\n" if !$zoom;
    while($line = <FILE>) {
      if ($zoom) {
	if ($line =~/(.+):(.*)/ && $1 ne "$topfile") {
	  $subgraph{$lib} .= "    ".qid($lib,$1).";\n";
	  writesubgraph($lib,$1,$2) if $2;
	}
      } elsif ($line =~/(.+)\//) {
	my $str = edgestr($lib,"",$1,"");
	$graph .= "  ".$str if $str;
      }
    } 
    close FILE;
  } else {
    die "File $lib/pvsbin/$topfile.dep not found\n";
  }
}

foreach $ext (@external) {
  $graph .= "  {$ext [label=\"$ext\", style=filled, fillcolor=yellow]}\n";
}

foreach $lib (@zoomlist) {
  $graph .= "  subgraph cluster_$lib {\n";
  $graph .= $subgraph{$lib};
  $graph .= "    label=\"$lib\";\n";
  $graph .= "    style=filled;\n";
  $graph .= "  }\n";
}

my ($graphname,$path,$type) = fileparse($out);
$graphname =~ s/-/_/g;

open(DOT,">$out.dot") or die "can't open $out.dot\n";
print DOT "digraph $graphname {\n";
if ($title) {
  print DOT "labelloc=\"t\"";
  print DOT "label=\"$title\"";
}
print DOT "  rankdir=LR;\n";
#print DOT "  node [shape=box]\n" if !$zoom;
print DOT "  concentrate=true;\n";
print DOT "  splines=true;\n";  # splines=ortho for a more circuit diagram form, splines=true for default curves
print DOT $graph;
print DOT "}\n";
close(DOT);
print "File $out.dot has been generated\n" if $dot;
if (!$dot || $pdf) {
  die "To produce $out.pdf, install Graphviz and add it to PATH\n" if !`which dot`;
  `dot -Tpdf $out.dot -o $out.pdf`;
  print "File $out.pdf has been generated\n";
} 

`rm $out.dot` if !$dot;


