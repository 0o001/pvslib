(float_IEEE_754
 (Sulp_TCC1 0
  (Sulp_TCC1-1 nil 3671548042 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (unb_single type-eq-decl nil float_IEEE_754 nil)
    (Fsubnormal? const-decl "bool" float nil)
    (Fnormal? const-decl "bool" float nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (single_precision_format const-decl "Format" float_IEEE_754 nil)
    (^ const-decl "real" exponentiation nil)
    (vNum const-decl "posnat" float nil)
    (Fbounded? const-decl "bool" float nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (RtoS_TCC1 0
  (RtoS_TCC1-1 nil 3667932138
   ("" (skeep)
    (("" (use "RND_EClosest_isEclosest")
      (("" (expand "closest_single?") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((RND_EClosest_isEclosest formula-decl nil float nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (single_precision_format const-decl "Format" float_IEEE_754 nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (closest_single? const-decl "bool" float_IEEE_754 nil))
   shostak))
 (StoR_round 0
  (StoR_round-1 nil 3675274831
   ("" (skeep)
    (("" (expand "StoR")
      (("" (expand "Sulp")
        (("" (use "ClosestUlp")
          (("" (assert)
            (("" (split -1)
              (("1"
                (invoke (typepred "%3") (? 1 "Closest?(%1)(%2,%3)"))
                (("1" (expand "closest_single?")
                  (("1" (expand "EvenClosest?")
                    (("1" (flatten) nil nil)) nil))
                  nil))
                nil)
               ("2" (invoke (typepred "%2") (? 1 "Fbounded?(%1)(%2)"))
                (("2" (expand "Fcanonic?")
                  (("2" (expand "Fnormal?")
                    (("2" (expand "Fsubnormal?")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((StoR const-decl "real" float_IEEE_754 nil)
    (ClosestUlp formula-decl nil float nil)
    (RtoS const-decl "(closest_single?(x1))" float_IEEE_754 nil)
    (closest_single? const-decl "bool" float_IEEE_754 nil)
    (unb_single type-eq-decl nil float_IEEE_754 nil)
    (Fcanonic? const-decl "bool" float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (single_precision_format const-decl "Format" float_IEEE_754 nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (EvenClosest? const-decl "bool" float nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Fsubnormal? const-decl "bool" float nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (Fnormal? const-decl "bool" float nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (Fulp_posreal_j application-judgement "posreal" float_IEEE_754 nil)
    (Sulp const-decl "posreal" float_IEEE_754 nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (StoR_RtoS 0
  (StoR_RtoS-1 nil 3675275376
   (""
    (case "FORALL(x,y,z: real): abs(x-y) <= z IMPLIES EXISTS(v:real): v ## [|-z,z|] AND x = y + v")
    (("1" (skeep)
      (("1" (use "StoR_round")
        (("1" (inst? -2 :where -1)
          (("1" (assert)
            (("1" (expand "##")
              (("1" (skeep -2)
                (("1" (inst 1 "v") (("1" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (inst 1 "x-y")
          (("2" (assert)
            (("2" (use "interval_as_absdif")
              (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Sulp const-decl "posreal" float_IEEE_754 nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (RtoS const-decl "(closest_single?(x1))" float_IEEE_754 nil)
    (closest_single? const-decl "bool" float_IEEE_754 nil)
    (StoR const-decl "real" float_IEEE_754 nil)
    (unb_single type-eq-decl nil float_IEEE_754 nil)
    (single_precision_format const-decl "Format" float_IEEE_754 nil)
    (Fcanonic? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (ub_interval formula-decl nil interval "interval_arith/")
    (lb_interval formula-decl nil interval "interval_arith/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (StoR_round formula-decl nil float_IEEE_754 nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Interval type-eq-decl nil interval "interval_arith/")
    (|##| const-decl "bool" interval "interval_arith/")
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (StoR_inc 0
  (StoR_inc-1 nil 3675328982
   ("" (skeep)
    (("" (expand "<=" -1)
      (("" (use "FleCorrect")
        (("" (assert)
          (("" (expand "StoR") (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" float nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (StoR const-decl "real" float_IEEE_754 nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float nil)
    (single_precision_format const-decl "Format" float_IEEE_754 nil)
    (unb_single type-eq-decl nil float_IEEE_754 nil)
    (FleCorrect formula-decl nil float nil))
   shostak))
 (RtoS_inc 0
  (RtoS_inc-1 nil 3675330582
   ("" (skeep)
    (("" (case "x1=x2")
      (("1" (replace -1 :hide? t)
        (("1" (expand "<=")
          (("1" (use "FleCorrect") (("1" (assert) nil nil)) nil)) nil))
        nil)
       ("2" (expand "RtoS")
        (("2" (use "RND_EClosest_isEclosest")
          (("2" (use "EvenClosest_Monotone")
            (("2" (expand "Monotone?")
              (("2"
                (inst -1 "x1" "x2"
                 "RND_EClosest(single_precision_format)(x1)"
                 "RND_EClosest(single_precision_format)(x2)")
                (("1" (assert)
                  (("1" (split -1)
                    (("1" (expand "<=" 2)
                      (("1" (use "FleCorrect") (("1" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (use "RND_EClosest_isEclosest") nil nil))
                    nil))
                  nil)
                 ("2"
                  (typepred
                   "RND_EClosest[2](single_precision_format)(x2)")
                  (("2" (expand "Fcanonic?")
                    (("2" (expand "Fnormal?")
                      (("2" (expand "Fsubnormal?")
                        (("2" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (<= const-decl "bool" float nil) (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float nil)
    (single_precision_format const-decl "Format" float_IEEE_754 nil)
    (unb_single type-eq-decl nil float_IEEE_754 nil)
    (closest_single? const-decl "bool" float_IEEE_754 nil)
    (RtoS const-decl "(closest_single?(x1))" float_IEEE_754 nil)
    (FleCorrect formula-decl nil float nil)
    (RND_EClosest_isEclosest formula-decl nil float nil)
    (Monotone? const-decl "bool" float nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (Fnormal? const-decl "bool" float nil)
    (Fsubnormal? const-decl "bool" float nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Fbounded? const-decl "bool" float nil)
    (RND_EClosest const-decl "(Fcanonic?(b))" float nil)
    (x2 skolem-const-decl "real" float_IEEE_754 nil)
    (EvenClosest_Monotone formula-decl nil float nil))
   shostak))
 (Sulp_def 0
  (Sulp_def-1 nil 3671547731
   ("" (skeep)
    (("" (expand "Sulp")
      (("" (use "FulpCanonic") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((Sulp const-decl "posreal" float_IEEE_754 nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (Fulp_posreal_j application-judgement "posreal" float_IEEE_754 nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (single_precision_format const-decl "Format" float_IEEE_754 nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float nil)
    (unb_single type-eq-decl nil float_IEEE_754 nil)
    (FulpCanonic formula-decl nil float nil))
   shostak))
 (RtoS_opp 0
  (RtoS_opp-2 "" 3675336247
   ("" (skeep)
    (("" (use "FcanonicUnique")
      (("" (inst -1 "single_precision_format")
        (("" (assert)
          (("" (split -1)
            (("1" (hide 2)
              (("1" (case "closest_single?(-x)(RtoS(-x))")
                (("1" (case "closest_single?(-x)(Fopp(RtoS(x)))")
                  (("1" (use "EvenClosest_Unique")
                    (("1" (inst -1 "single_precision_format")
                      (("1" (expand "Unique?")
                        (("1" (inst? -1 :where 1)
                          (("1" (inst -1 "-x")
                            (("1" (assert)
                              (("1"
                                (expand "closest_single?")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (use "FcanonicBounded")
                            (("2" (assert)
                              (("2"
                                (use "FcanonicOpp")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (typepred "RtoS(-x)")
                            (("3" (use "FcanonicBounded")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (expand "closest_single?")
                      (("2" (use "EvenClosestFopp")
                        (("2" (assert)
                          (("2" (typepred "RtoS(x)")
                            (("2" (expand "closest_single?")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (use "FcanonicOpp") (("3" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (typepred "RtoS(-x)") (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (use "FcanonicOpp") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FcanonicUnique formula-decl nil float nil)
    (Fopp const-decl "float" float nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (RtoS const-decl "(closest_single?(x1))" float_IEEE_754 nil)
    (closest_single? const-decl "bool" float_IEEE_754 nil)
    (unb_single type-eq-decl nil float_IEEE_754 nil)
    (single_precision_format const-decl "Format" float_IEEE_754 nil)
    (Fcanonic? const-decl "bool" float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Fbounded? const-decl "bool" float nil)
    (x skolem-const-decl "real" float_IEEE_754 nil)
    (FcanonicOpp formula-decl nil float nil)
    (FcanonicBounded formula-decl nil float nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Unique? const-decl "bool" float nil)
    (EvenClosest_Unique formula-decl nil float nil)
    (EvenClosestFopp formula-decl nil float nil))
   shostak)
  (RtoS_opp-1 nil 3675331460
   ("" (skeep)
    (("" (case "closest_single?(x)(RtoS(x))")
      (("1" (case "closest_single?(-x)(RtoS(-x))")
        (("1" (case "closest_single?(-x)(Fopp(RtoS(x)))")
          (("1" (hide -3)
            (("1" (expand "closest_single?")
              (("1" (expand "EvenClosest?")
                (("1" (flatten)
                  (("1" (split -2)
                    (("1" (split -4)
                      (("1" (postpone) nil nil)
                       ("2" (inst -1 "Fopp(RtoS(x))")
                        (("2" (assert)
                          (("2" (use "FcanonicUnique")
                            (("2" (assert)
                              (("2"
                                (use "FcanonicOpp")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst -1 "RtoS(-x)")
                      (("2" (assert)
                        (("2" (use "FcanonicUnique")
                          (("2" (assert)
                            (("2" (use "FcanonicOpp")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (postpone) nil nil) ("3" (postpone) nil nil))
          nil)
         ("2" (postpone) nil nil))
        nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   nil shostak))
 (Fadd_TCC1 0
  (Fadd_TCC1-1 nil 3669052115
   ("" (skeep*)
    (("" (invoke (typepred "%1") (! 1 1))
      (("" (expand* "closest_single?" "closest_double?") nil nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (single_precision_format const-decl "Format" float_IEEE_754 nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Fbounded? const-decl "bool" float nil)
    (EvenClosest? const-decl "bool" float nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (FtoR const-decl "real" float nil)
    (Fadd const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) + FtoR(f2), f3)}"
     float_ops nil)
    (unb_single type-eq-decl nil float_IEEE_754 nil)
    (closest_single? const-decl "bool" float_IEEE_754 nil))
   nil))
 (Fadd_correctly_rounded 0
  (Fadd_correctly_rounded-1 nil 3675523231
   ("" (skeep)
    (("" (expand "Fadd")
      (("" (expand "Fadd")
        (("" (expand "Fg")
          (("" (expand "StoR")
            (("" (expand "RtoS") (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((Fadd const-decl "(closest_single?(FtoR(f1) + FtoR(f2)))"
     float_IEEE_754 nil)
    (Fg const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(g(FtoR(f1), FtoR(f2)), f3)}"
     binop_em_scheme nil)
    (RtoS const-decl "(closest_single?(x1))" float_IEEE_754 nil)
    (StoR const-decl "real" float_IEEE_754 nil)
    (Fadd const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) + FtoR(f2), f3)}"
     float_ops nil))
   nil))
 (Fsub_TCC1 0
  (Fsub_TCC1-1 nil 3669052115 ("" (resulting-type-tcc))
   ((closest_single? const-decl "bool" float_IEEE_754 nil)
    (unb_single type-eq-decl nil float_IEEE_754 nil)
    (Fsub const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) - FtoR(f2), f3)}"
     float_ops nil)
    (FtoR const-decl "real" float nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (EvenClosest? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (single_precision_format const-decl "Format" float_IEEE_754 nil)
    (Fcanonic? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (Fsub_correctly_rounded 0
  (Fsub_correctly_rounded-1 nil 3676387538
   ("" (skeep)
    (("" (invoke (expand "%1") (? 1 "%1(%0) ="))
      (("" (invoke (expand "%1") (? 1 "%1(%0)(%0) ="))
        (("" (expand "Fg")
          (("" (expand "RtoS")
            (("" (expand "StoR") (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((Fsub const-decl "(closest_single?(FtoR(f1) - FtoR(f2)))"
     float_IEEE_754 nil)
    (Fg const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(g(FtoR(f1), FtoR(f2)), f3)}"
     binop_em_scheme nil)
    (StoR const-decl "real" float_IEEE_754 nil)
    (RtoS const-decl "(closest_single?(x1))" float_IEEE_754 nil)
    (Fsub const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) - FtoR(f2), f3)}"
     float_ops nil))
   shostak))
 (Fmul_TCC1 0
  (Fmul_TCC1-1 nil 3669052115 ("" (resulting-type-tcc))
   ((closest_single? const-decl "bool" float_IEEE_754 nil)
    (unb_single type-eq-decl nil float_IEEE_754 nil)
    (Fmul const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) * FtoR(f2), f3)}"
     float_ops nil)
    (FtoR const-decl "real" float nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (EvenClosest? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (single_precision_format const-decl "Format" float_IEEE_754 nil)
    (Fcanonic? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (Fmul_correctly_rounded 0
  (Fmul_correctly_rounded-1 nil 3676387759
   ("" (skeep)
    (("" (invoke (expand "%1") (? 1 "%1(%0) ="))
      (("" (invoke (expand "%1") (? 1 "%1(%0)(%0) ="))
        (("" (expand "Fg")
          (("" (expand "RtoS")
            (("" (expand "StoR") (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((Fmul const-decl "(closest_single?(FtoR(f1) * FtoR(f2)))"
     float_IEEE_754 nil)
    (Fg const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(g(FtoR(f1), FtoR(f2)), f3)}"
     binop_em_scheme nil)
    (StoR const-decl "real" float_IEEE_754 nil)
    (RtoS const-decl "(closest_single?(x1))" float_IEEE_754 nil)
    (Fmul const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) * FtoR(f2), f3)}"
     float_ops nil))
   shostak))
 (Fdiv_TCC1 0
  (Fdiv_TCC1-1 nil 3668262858 ("" (resulting-type-tcc))
   ((closest_single? const-decl "bool" float_IEEE_754 nil)
    (unb_single type-eq-decl nil float_IEEE_754 nil)
    (Fdiv const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) / FtoR(f2), f3)}"
     float_ops nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (EvenClosest? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (FtoR const-decl "real" float nil)
    (div_pre2 const-decl "bool" float_ops nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (single_precision_format const-decl "Format" float_IEEE_754 nil)
    (Fcanonic? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (Fdiv_correctly_rounded_TCC1 0
  (Fdiv_correctly_rounded_TCC1-1 nil 3675523228
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (single_precision_format const-decl "Format" float_IEEE_754 nil)
    (unb_single type-eq-decl nil float_IEEE_754 nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (div_pre2 const-decl "bool" float_ops nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (/= const-decl "boolean" notequal nil)
    (Fsubnormal? const-decl "bool" float nil)
    (Fnormal? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (vNum const-decl "posnat" float nil)
    (^ const-decl "real" exponentiation nil)
    (StoR const-decl "real" float_IEEE_754 nil)
    (FtoR const-decl "real" float nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (Fdiv_correctly_rounded 0
  (Fdiv_correctly_rounded-1 nil 3676387791
   ("" (skeep)
    (("" (invoke (expand "%1") (? 1 "%1(%0) ="))
      (("" (invoke (expand "%1") (? 1 "%1(%0)(%0) ="))
        (("" (expand "Fg")
          (("" (expand "RtoS")
            (("" (expand "StoR") (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((Fdiv const-decl "(closest_single?(FtoR(f1) / FtoR(f2)))"
     float_IEEE_754 nil)
    (Fg const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(g(FtoR(f1), FtoR(f2)), f3)}"
     binop_em_scheme nil)
    (StoR const-decl "real" float_IEEE_754 nil)
    (RtoS const-decl "(closest_single?(x1))" float_IEEE_754 nil)
    (Fdiv const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) / FtoR(f2), f3)}"
     float_ops nil))
   shostak))
 (Fmod_TCC1 0
  (Fmod_TCC1-1 nil 3676386975 ("" (resulting-type-tcc) nil nil)
   ((closest_single? const-decl "bool" float_IEEE_754 nil)
    (unb_single type-eq-decl nil float_IEEE_754 nil)
    (Fmod const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(mod(FtoR(f1), FtoR(f2)), f3)}"
     float_ops nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (EvenClosest? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (FtoR const-decl "real" float nil)
    (mod_pre2 const-decl "bool" float_ops nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (single_precision_format const-decl "Format" float_IEEE_754 nil)
    (Fcanonic? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (Ffloor_TCC1 0
  (Ffloor_TCC1-1 nil 3668264714 ("" (resulting-type-tcc))
   ((closest_single? const-decl "bool" float_IEEE_754 nil)
    (unb_single type-eq-decl nil float_IEEE_754 nil)
    (Ffloor const-decl
     "{f2: (Fcanonic?(b)) | EvenClosest?(b)(floor(FtoR(f1)), f2)}"
     float_ops nil)
    (FtoR const-decl "real" float nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (EvenClosest? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (single_precision_format const-decl "Format" float_IEEE_754 nil)
    (Fcanonic? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (Ffloor_correctly_rounded 0
  (Ffloor_correctly_rounded-1 nil 3676387814
   ("" (skeep)
    (("" (invoke (expand "%1") (? 1 "%1(%0) ="))
      (("" (invoke (expand "%1") (? 1 "%1(%0)(%0) ="))
        (("" (expand "Fg")
          (("" (expand "RtoS")
            (("" (expand "StoR") (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((Ffloor const-decl "(closest_single?(floor(FtoR(f1))))"
     float_IEEE_754 nil)
    (Fg const-decl
     "{f2: (Fcanonic?(b)) | EvenClosest?(b)(g(FtoR(f1)), f2)}"
     unop_em_scheme nil)
    (StoR const-decl "real" float_IEEE_754 nil)
    (RtoS const-decl "(closest_single?(x1))" float_IEEE_754 nil)
    (Ffloor const-decl
     "{f2: (Fcanonic?(b)) | EvenClosest?(b)(floor(FtoR(f1)), f2)}"
     float_ops nil))
   shostak))
 (closest_double?_TCC1 0
  (closest_double?_TCC1-1 nil 3671548042 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (double type-eq-decl nil float_IEEE_754 nil)
    (Fsubnormal? const-decl "bool" float nil)
    (Fnormal? const-decl "bool" float nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (double_precision_format const-decl "Format" float_IEEE_754 nil)
    (^ const-decl "real" exponentiation nil)
    (vNum const-decl "posnat" float nil)
    (Fbounded? const-decl "bool" float nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (RtoD_TCC1 0
  (RtoD_TCC1-1 nil 3669031337
   ("" (skeep)
    (("" (use "RND_EClosest_isEclosest")
      (("" (expand "closest_double?") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((RND_EClosest_isEclosest formula-decl nil float nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (double_precision_format const-decl "Format" float_IEEE_754 nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (closest_double? const-decl "bool" float_IEEE_754 nil))
   shostak))
 (DPadd_TCC1 0
  (DPadd_TCC1-1 nil 3669052301 ("" (resulting-type-tcc))
   ((closest_double? const-decl "bool" float_IEEE_754 nil)
    (double type-eq-decl nil float_IEEE_754 nil)
    (Fadd const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) + FtoR(f2), f3)}"
     float_ops nil)
    (FtoR const-decl "real" float nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (EvenClosest? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (double_precision_format const-decl "Format" float_IEEE_754 nil)
    (Fcanonic? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (DPsub_TCC1 0
  (DPsub_TCC1-1 nil 3669052301 ("" (resulting-type-tcc))
   ((closest_double? const-decl "bool" float_IEEE_754 nil)
    (double type-eq-decl nil float_IEEE_754 nil)
    (Fsub const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) - FtoR(f2), f3)}"
     float_ops nil)
    (FtoR const-decl "real" float nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (EvenClosest? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (double_precision_format const-decl "Format" float_IEEE_754 nil)
    (Fcanonic? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (DPmul_TCC1 0
  (DPmul_TCC1-1 nil 3669052301 ("" (resulting-type-tcc))
   ((closest_double? const-decl "bool" float_IEEE_754 nil)
    (double type-eq-decl nil float_IEEE_754 nil)
    (Fmul const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) * FtoR(f2), f3)}"
     float_ops nil)
    (FtoR const-decl "real" float nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (EvenClosest? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (double_precision_format const-decl "Format" float_IEEE_754 nil)
    (Fcanonic? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (DPdiv_TCC1 0
  (DPdiv_TCC1-2 nil 3669033797 ("" (resulting-type-tcc) nil nil)
   ((closest_double? const-decl "bool" float_IEEE_754 nil)
    (double type-eq-decl nil float_IEEE_754 nil)
    (Fdiv const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) / FtoR(f2), f3)}"
     float_ops nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (EvenClosest? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (FtoR const-decl "real" float nil)
    (div_pre2 const-decl "bool" float_ops nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (double_precision_format const-decl "Format" float_IEEE_754 nil)
    (Fcanonic? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak)
  (DPdiv_TCC1-1 nil 3669031337 ("" (subtype-tcc) nil nil) nil nil))
 (DPexp_TCC1 0
  (DPexp_TCC1-1 nil 3669031337 ("" (resulting-type-tcc))
   ((closest_double? const-decl "bool" float_IEEE_754 nil)
    (double type-eq-decl nil float_IEEE_754 nil)
    (Fexp const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) ^ FtoR(f2), f3)}"
     float_ops nil)
    (^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (EvenClosest? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (FtoR const-decl "real" float nil)
    (exp_pre2 const-decl "bool" float_ops nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (double_precision_format const-decl "Format" float_IEEE_754 nil)
    (Fcanonic? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (DPmod_TCC1 0
  (DPmod_TCC1-1 nil 3669031337 ("" (resulting-type-tcc))
   ((closest_double? const-decl "bool" float_IEEE_754 nil)
    (double type-eq-decl nil float_IEEE_754 nil)
    (Fmod const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(mod(FtoR(f1), FtoR(f2)), f3)}"
     float_ops nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (EvenClosest? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (FtoR const-decl "real" float nil)
    (mod_pre2 const-decl "bool" float_ops nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (double_precision_format const-decl "Format" float_IEEE_754 nil)
    (Fcanonic? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (DPfloor_TCC1 0
  (DPfloor_TCC1-1 nil 3669031337 ("" (resulting-type-tcc))
   ((closest_double? const-decl "bool" float_IEEE_754 nil)
    (double type-eq-decl nil float_IEEE_754 nil)
    (Ffloor const-decl
     "{f2: (Fcanonic?(b)) | EvenClosest?(b)(floor(FtoR(f1)), f2)}"
     float_ops nil)
    (FtoR const-decl "real" float nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (EvenClosest? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (double_precision_format const-decl "Format" float_IEEE_754 nil)
    (Fcanonic? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil)))

