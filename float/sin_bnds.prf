(sin_bnds
 (sin_error_prep 0
  (sin_error_prep-1 nil 3680957043
   (""
    (case "FORALL (x: real, eps:nnreal): abs(sin(x + eps) - sin(x)) <= 2*abs(sin(eps/2))")
    (("1" (skeep)
      (("1" (case "eps >=0")
        (("1" (inst?)
          (("1" (assert)
            (("1" (case "abs(eps/2) = eps/2")
              (("1" (assert) nil nil)
               ("2" (rewrite "abs_div")
                (("2" (assert)
                  (("2" (expand "abs" 1) (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "sin_neg")
          (("2" (inst -1 "-(x+eps)")
            (("2" (simplify -1)
              (("2" (case "NOT --(x+eps)= x+eps")
                (("1" (assert) nil nil)
                 ("2" (replaces -1)
                  (("2" (replaces -1)
                    (("2" (lemma "sin_neg")
                      (("2" (inst -1 "-x")
                        (("2" (case "NOT --x = x")
                          (("1" (assert) nil nil)
                           ("2" (replaces -1)
                            (("2" (replaces -1)
                              (("2"
                                (lemma "abs_neg")
                                (("2"
                                  (inst -1 " sin(-x - eps) -sin(-x)")
                                  (("2"
                                    (replaces -1)
                                    (("2"
                                      (inst -1 "-x" "-eps")
                                      (("1"
                                        (case
                                         "not abs(eps/2)  = -eps/2")
                                        (("1"
                                          (rewrite "abs_div")
                                          (("1"
                                            (expand "abs" 1)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replaces -1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (rewrite " sin_diff")
          (("2" (rewrite "abs_mult")
            (("2" (rewrite "abs_mult")
              (("2" (expand "abs" 1 1)
                (("2" (cancel-by 1 "2")
                  (("2" (hide (-1 1))
                    (("2" (cancel-by 1 "abs(sin(eps/2))")
                      (("2" (hide (-1 1))
                        (("2" (expand "abs")
                          (("2" (lift-if 1)
                            (("2" (split 1)
                              (("1" (assert) nil nil)
                               ("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_diff formula-decl nil trig_extra "trig_fnd/")
    (cos_range application-judgement "trig_range" sincos_def
     "trig_fnd/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (eps skolem-const-decl "nnreal" sin_bnds nil)
    (CBD_11 skolem-const-decl
     "{n: nonneg_real | n >= sin(eps / 2) AND n >= -sin(eps / 2)}"
     sin_bnds nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (pos_div_gt formula-decl nil real_props nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (abs_mult formula-decl nil real_props nil)
    (cos const-decl "real" sincos_def "trig_fnd/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sin_neg formula-decl nil trig_basic "trig_fnd/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs_neg formula-decl nil abs_lems "reals/")
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (eps skolem-const-decl "real" sin_bnds nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (abs_div formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sin_range application-judgement "trig_range" sincos_def
     "trig_fnd/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sin const-decl "real" sincos_def "trig_fnd/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil))
   shostak))
 (cos_error_prep 0
  (cos_error_prep-1 nil 3680958608
   ("" (lemma "cos_shift")
    (("" (skeep)
      (("" (inst-cp -1 "pi/2-x-eps")
        (("" (simplify -2)
          (("" (inst -1 "pi/2-x")
            (("" (simplify -1)
              (("" (replaces -1)
                (("" (replaces -1)
                  (("" (lemma "sin_error_prep")
                    (("" (inst -1 "pi/2-x" "-eps")
                      (("" (case "NOT abs(-eps / 2) = abs(eps / 2)")
                        (("1" (hide-all-but 1)
                          (("1" (ground)
                            (("1" (expand "abs")
                              (("1"
                                (ground)
                                (("1"
                                  (lift-if 1)
                                  (("1"
                                    (split 1)
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (replaces -1) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_range application-judgement "trig_range" sincos_def
     "trig_fnd/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cos_range application-judgement "trig_range" sincos_def
     "trig_fnd/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sin_error_prep formula-decl nil sin_bnds nil)
    (pi const-decl "posreal" atan "trig_fnd/")
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cos_shift formula-decl nil trig_basic "trig_fnd/"))
   shostak))
 (sin_bound_TCC1 0
  (sin_bound_TCC1-1 nil 3680961614 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (sin_bound_TCC2 0
  (sin_bound_TCC2-1 nil 3680961614 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (sin_bound_TCC3 0
  (sin_bound_TCC3-1 nil 3680961614 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (sin_bound_TCC4 0
  (sin_bound_TCC4-1 nil 3680961614 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (sin_bound 0
  (sin_bound-1 nil 3680961614
   ("" (skeep)
    (("" (lemma "sin_lb_gt0")
      (("" (case "eps = 0")
        (("1" (replaces -1)
          (("1" (simplify 1)
            (("1" (rewrite "sin_0")
              (("1" (expand "abs") (("1" (eval-formula 1) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (inst -1 "2" "eps/2")
          (("1" (split -1)
            (("1" (lemma "trig_approx.sin_lb")
              (("1" (inst -1 "2" "eps/2")
                (("1" (case "NOT abs(sin(eps/2)) = sin(eps/2)")
                  (("1" (expand "abs") (("1" (assert) nil nil)) nil)
                   ("2" (replaces -1)
                    (("2" (lemma "trig_approx.sin_ub")
                      (("2" (inst-cp -1 "0" "eps/2")
                        (("1" (expand "sin_ub" -2)
                          (("1" (expand "sin_approx")
                            (("1" (expand "sigma")
                              (("1"
                                (expand "sigma")
                                (("1"
                                  (expand "sin_term")
                                  (("1"
                                    (expand "factorial")
                                    (("1"
                                      (expand "factorial")
                                      (("1"
                                        (expand "^" -2)
                                        (("1"
                                          (expand "expt")
                                          (("1"
                                            (expand "expt")
                                            (("1"
                                              (simplify -2)
                                              (("1"
                                                (cross-mult -2)
                                                (("1"
                                                  (inst -1 "2" "eps/2")
                                                  (("1"
                                                    (expand "sin_ub")
                                                    (("1"
                                                      (expand
                                                       "sin_approx")
                                                      (("1"
                                                        (expand
                                                         "sigma")
                                                        (("1"
                                                          (expand
                                                           "sigma")
                                                          (("1"
                                                            (expand
                                                             "sigma")
                                                            (("1"
                                                              (expand
                                                               "sigma")
                                                              (("1"
                                                                (expand
                                                                 "sigma")
                                                                (("1"
                                                                  (expand
                                                                   "sigma")
                                                                  (("1"
                                                                    (expand
                                                                     "sin_term")
                                                                    (("1"
                                                                      (case
                                                                       "NOT 2*((-1) ^ 0 * (eps / 2) ^ (1) / factorial(1) +
        (-1) ^ 1 * (eps / 2) ^ (3) / factorial(3)
        + (-1) ^ 2 * (eps / 2) ^ (5) / factorial(5)
        + (-1) ^ 3 * (eps / 2) ^ (7) / factorial(7)
        + (-1) ^ 4 * (eps / 2) ^ (9) / factorial(9)) = eps - eps ^ 3 / 24 + eps ^ 5 / 1920 - eps ^ 7 / 322560 +
            eps ^ 9 / 92897280")
                                                                      (("1"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (both-sides
                                                                         "*"
                                                                         "2"
                                                                         -2)
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "min")
                                                                            (("1"
                                                                              (lift-if
                                                                               2)
                                                                              (("1"
                                                                                (split
                                                                                 2)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil)
             ("2" (cross-mult 1)
              (("2" (mult-ineq -1 -1) (("2" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (cross-mult 1) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((sin_lb_gt0 formula-decl nil trig_approx "trig_fnd/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (eps skolem-const-decl "nnreal" sin_bnds nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (<= const-decl "bool" reals nil)
    (sin_lb formula-decl nil trig_approx "trig_fnd/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (sin const-decl "real" sincos_def "trig_fnd/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sin_ub formula-decl nil trig_approx "trig_fnd/")
    (sin_ub const-decl "real" trig_approx "trig_fnd/")
    (sigma def-decl "real" sigma "reals/")
    (sin_term const-decl "real" trig_approx "trig_fnd/")
    (expt def-decl "real" exponentiation nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nnreal_expt application-judgement "nnreal" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (int_expt application-judgement "int" exponentiation nil)
    (nzreal_expt application-judgement "nzreal" exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (factorial_1 formula-decl nil factorial "ints/")
    (add_div formula-decl nil real_props nil)
    (pos_times_le formula-decl nil real_props nil)
    (neg_times_le formula-decl nil real_props nil)
    (pos_times_lt formula-decl nil real_props nil)
    (neg_times_lt formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (even? const-decl "bool" integers nil)
    (< const-decl "bool" reals nil)
    (nzreal_exp application-judgement "nzreal" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div1 formula-decl nil real_props nil)
    (^ const-decl "real" exponentiation nil)
    (factorial def-decl "posnat" factorial "ints/")
    (sin_approx const-decl "real" trig_approx "trig_fnd/")
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sin_0 formula-decl nil trig_basic "trig_fnd/")
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_min application-judgement "{s: rat | s <= q AND s <= r}"
     real_defs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (sin_range application-judgement "trig_range" sincos_def
     "trig_fnd/")
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (sin_error_bound_TCC1 0
  (sin_error_bound_TCC1-1 nil 3680963345 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (sin_error_bound_TCC2 0
  (sin_error_bound_TCC2-1 nil 3680963345 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (sin_error_bound_TCC3 0
  (sin_error_bound_TCC3-1 nil 3680963345 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (sin_error_bound_TCC4 0
  (sin_error_bound_TCC4-1 nil 3680963345 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (sin_error_bound 0
  (sin_error_bound-1 nil 3680963347
   ("" (skeep)
    (("" (skoletin)
      (("" (lemma "sin_error_prep")
        (("" (inst?)
          (("" (lemma "sin_bound")
            (("" (inst -1 "peps")
              (("" (typepred (eps))
                (("" (assert)
                  (("" (case " NOT abs(eps/2) = peps/2")
                    (("1" (rewrite "abs_div" 1)
                      (("1" (expand "abs" 1 2) (("1" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sin const-decl "real" sincos_def "trig_fnd/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (^ const-decl "real" exponentiation nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (abs_div formula-decl nil real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sin_bound formula-decl nil sin_bnds nil)
    (sin_error_prep formula-decl nil sin_bnds nil)
    (sin_range application-judgement "trig_range" sincos_def
     "trig_fnd/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   shostak))
 (cos_error_bound 0
  (cos_error_bound-1 nil 3680964690
   ("" (skeep)
    (("" (skoletin)
      (("" (lemma "cos_error_prep")
        (("" (inst?)
          (("" (lemma "sin_bound")
            (("" (inst -1 "peps")
              (("" (typepred (eps))
                (("" (assert)
                  (("" (case " NOT abs(eps/2) = peps/2")
                    (("1" (rewrite "abs_div" 1)
                      (("1" (expand "abs" 1 2) (("1" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cos const-decl "real" sincos_def "trig_fnd/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (^ const-decl "real" exponentiation nil)
    (sin_range application-judgement "trig_range" sincos_def
     "trig_fnd/")
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (abs_div formula-decl nil real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sin_bound formula-decl nil sin_bnds nil)
    (cos_error_prep formula-decl nil sin_bnds nil)
    (cos_range application-judgement "trig_range" sincos_def
     "trig_fnd/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_exp application-judgement "nnreal" exponentiation nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   shostak)))

