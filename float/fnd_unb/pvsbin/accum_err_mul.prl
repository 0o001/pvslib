%-------------------------------------------
% @formula: mul_accum_err 
% @theory: accum_err_mul
% @pvsfile: accum_err_mul.pvs
% @status: âœ¨ untried
%-------------------------------------------
mul_accum_err : PROOF
(then (expand "mul_aerr_bound")(skeep)
  (spread (case "EXISTS(ep1:real): -e1 <= ep1 AND ep1 <= e1 AND FtoR(f1) = r1 + ep1")
   ((then (hide -2)
     (spread (case "EXISTS(ep2:real): -e2 <= ep2 AND ep2 <= e2 AND FtoR(f2) = r2 + ep2")
      ((then (hide -3)(skeep -1)(skeep -4)(replace -3 :hide? t)(replace -5 :hide? t)
        (spread (case "NOT (r1 + ep1) * (r2 + ep2) = r1*r2 + r1 * ep2 + ep1*r2 + ep1*ep2")
         ((then (assert))
          (then (replace -1 :hide? t)(assert)
           (spread (case "NOT abs(ep1 * ep2 + ep1 * r2 + r1 * ep2) <= abs(ep1 * ep2) + abs(ep1 * r2) + abs(r1 * ep2)")
            ((then (hide 2)(grind))
             (spread (case "NOT abs(ep1 * ep2) = abs(ep1) * abs(ep2)")
              ((then (assert)(use "abs_mult"))
               (then (replace -1 :hide? t)(use "abs_mult")(replace -1 :hide? t)(use "abs_mult")(replace -1 :hide? t)
                (spread (case "abs(ep1) * abs(ep2) + abs(ep1) * abs(r2) + abs(r1) * abs(ep2) <= abs(r1) * e2 + abs(r2) * e1 + e1 * e2")
                 ((then (assert))
                  (then (hide (-1 2))
                   (spread (case "NOT abs(r1) * e2 + abs(r2) * e1 + e1 * e2 = e1*e2 + e1*abs(r2) + abs(r1) * e2")
                    ((then (assert))
                     (then (replace -1 :hide? t)(lemma "le_plus_le")(inst -1 " e1 * abs(r2) + abs(r1) * e2" "abs(ep1) * abs(ep2)" "e1 * e2" " abs(ep1) * abs(r2) + abs(r1) * abs(ep2)")(assert)(hide 2)
                      (spread (split 1)
                       ((then (expand "abs")(lift-if 1)
                         (spread (split 1)
                          ((then (flatten)(lift-if 1)
                            (spread (split 1)
                             ((then (flatten)(assert)(grind)(use "le_times_le_pos")(assert))
                              (then (flatten)
                               (spread (use "le_times_le_pos")
                                ((then (assert))
                                 (then (assert))
                                 (then (assert))))))))
                           (then (flatten)(lift-if)
                            (spread (split 2)
                             ((then (flatten)
                               (spread (use "le_times_le_pos")
                                ((then (assert))
                                 (then (assert))
                                 (then (assert)))))
                              (then (flatten)
                               (spread (use "le_times_le_pos")
                                ((then (assert))
                                 (then (assert))
                                 (then (assert)))))))))))
                        (then (lemma "le_plus_le")(inst -1 "abs(r1) * e2" "abs(ep1) * abs(r2)" "e1 * abs(r2)" "abs(r1) * abs(ep2)")(assert)(hide 2)
                         (spread (split 1)
                          ((spread (grind)
                            ((then (use "le_times_le_pos")(assert))
                             (then (use "le_times_le_pos")(assert))
                             (then (use "le_times_le_pos")(assert))
                             (then (use "le_times_le_pos")(assert))))
                           (spread (grind)
                            ((then (use "le_times_le_pos")(assert))
                             (then (use "le_times_le_pos")(assert))
                             (then (use "le_times_le_pos")(assert))
                             (then (use "le_times_le_pos")(assert))))))))))))))))))))))))
       (then (inst 1 "(FtoR(f2) - r2)")(assert)))))
    (then (inst 1 "(FtoR(f1) - r1)")(assert)))))
QED mul_accum_err