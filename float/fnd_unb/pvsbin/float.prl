%-------------------------------------------
% @formula: ulp_monotone 
% @theory: float
% @pvsfile: float.pvs
% @status: ✨ untried
%-------------------------------------------
ulp_monotone : PROOF
(then (skeep)(expand "ulp")(use "FulpMonotone")(assert)
  (spread (split -1)
   ((then (hide 2)(use "FleCorrect")(replace -1 :hide? t :dir rl)(lemma "rndf_monotone")(inst? -1 :where -3)
     (spread (inst?)
      ((then (assert)(expand "<=")(propax))
       (then (typepred "round")(expand "rounded_mode?")(flatten)))))
    (then (lemma "rle_rounded_r0")(inst? -1 :where -2)(inst? -1 :where 1)(inst?)(inst?)
     (spread (split -1)
      ((then (propax))
       (then (typepred "r::RNDF(b,round)")(inst -1 "x")(assert))
       (then (assert))
       (then (typepred "r::RNDF(b,round)")(inst -1 "x"))
       (then (propax))))))))
QED ulp_monotone


%-------------------------------------------
% @formula: Fopp_RtoF 
% @theory: float
% @pvsfile: float.pvs
% @status: ✨ untried
%-------------------------------------------
Fopp_RtoF : PROOF
(then (skeep)(use "FcanonicUnique")
  (spread (split -1)
   ((then (propax))
    (then (hide 2)(use "EvenClosest_Unique")(expand "Unique?")
     (spread (inst -1 "-x" "Fopp(RtoF(x))" "RtoF(-x)")
      ((spread (split -1)
        ((then (assert))
         (then (hide 2)(typepred "RtoF")(inst?))
         (then (hide 2)(use "EvenClosestFopp")
          (spread (split -1)
           ((then (propax))
            (then (hide 2)(typepred "RtoF")(inst?))
            (then (hide 2)(typepred "RtoF")(inst? -2)))))))
       (then (hide 2)(use "FoppBounded")(assert)))))
    (then (hide 2)(lemma "FcanonicOpp")(inst -1 "b" "RtoF(x)")(assert)(hide 2)(typepred "RtoF")(inst? -2))
    (then (hide 2)(typepred "RtoF")(inst? -2)))))
QED Fopp_RtoF


%-------------------------------------------
% @formula: ulp_abs 
% @theory: float
% @pvsfile: float.pvs
% @status: ✨ untried
%-------------------------------------------
ulp_abs : PROOF
(then (skeep)(expand "ulp")(lemma "FulpAbs")(inst -1 "b" "RtoF(x)")(assert)(replace -1 :hide? t :dir rl)(use "FulpCanonic")
  (spread (split -1)
   ((then (replace -1 :hide? t)(lemma "FulpCanonic")(inst? -1)
     (spread (split -1)
      ((then (replace -1 :hide? t)(expand "abs")(lift-if 1)
        (spread (split 1)
         ((then (flatten)(expand "Fabs")
           (spread (case "RtoF(-x)`Fexp = Fexp(RtoF(x))")
            ((then (assert))
             (then (hide 2)
              (spread (use "Fopp_RtoF")
               ((then (grind))
                (then (hide-all-but 1)(typepred "RtoF")
                 (spread (split 1)
                  ((then (skeep)(inst? -1)(typepred "round")(inst?)(assert))
                   (then (propax)))))))))))
          (then (flatten)(expand "Fabs")(propax)))))
       (then (use "FabsCanonic")(assert)(hide-all-but 1)(typepred "RtoF")(inst? -2)))))
    (then (typepred "RtoF")(inst? -2)))))
QED ulp_abs


%-------------------------------------------
% @formula: closest_ulp 
% @theory: float
% @pvsfile: float.pvs
% @status: ✨ untried
%-------------------------------------------
closest_ulp : PROOF
(then (skeep)(expand "ulp")
  (spread (case "Closest?(b)(r, RtoF(r))")
   ((then (lemma "ClosestUlp")(inst -1 "b" "RtoF(r)" "r")(assert)
     (spread (case "abs(FtoR(RtoF(r)) - r) = abs(FtoR(p) - r)")
      ((then (replace -1 :hide? t)(propax))
       (then (hide -1 2)(expand "Closest?")(inst -1 "p")(inst -3 "RtoF(r)")(assert)))))
    (then (typepred "RtoF")(inst?)(typepred "round")(inst?)(assert)))))
QED closest_ulp