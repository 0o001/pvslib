(cr_sin
 (Fsin_bounded 0
  (Fsin_bounded-1 nil 3679473796
   ("" (skeep)
    (("" (lemma "Fg_bounded[radix,b,sin_pre,sin]")
      (("" (inst -1 "f1")
        (("" (expand "Fsin") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((sin const-decl "real" sincos_def "trig_fnd/")
    (TRUE const-decl "bool" booleans nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (radix formal-const-decl "above(1)" cr_sin nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Fg_bounded formula-decl nil unop_em_scheme nil)
    (Fsin const-decl
     "{f2: (Fcanonic?(b)) | EvenClosest?(b)(sin(FtoR(f1)), f2)}" cr_sin
     nil)
    (float type-eq-decl nil float nil))
   shostak))
 (Fsin_error 0
  (Fsin_error-1 nil 3679473863
   ("" (skeep)
    (("" (lemma "Fg_error[radix,b,sin_pre,sin]")
      (("" (inst -1 "f1")
        (("" (expand "Fsin") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((sin const-decl "real" sincos_def "trig_fnd/")
    (TRUE const-decl "bool" booleans nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (radix formal-const-decl "above(1)" cr_sin nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Fg_error formula-decl nil unop_em_scheme nil)
    (Fsin const-decl
     "{f2: (Fcanonic?(b)) | EvenClosest?(b)(sin(FtoR(f1)), f2)}" cr_sin
     nil)
    (float type-eq-decl nil float nil)
    (sin_range application-judgement "trig_range" sincos_def
     "trig_fnd/")
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak)))

