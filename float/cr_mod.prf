(cr_mod
 (Fmod_TCC1 0
  (Fmod_TCC1-1 nil 3668260573 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (mod_pre2 const-decl "bool" cr_mod nil)
    (int nonempty-type-eq-decl nil integers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" cr_mod nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (Fsubnormal? const-decl "bool" float nil)
    (Fnormal? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (vNum const-decl "posnat" float nil)
    (/= const-decl "boolean" notequal nil)
    (FtoR const-decl "real" float nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (Fmod_TCC2 0
  (Fmod_TCC2-1 nil 3668260573 ("" (subtype-tcc) nil nil)
   ((nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (mod_pre1 const-decl "bool" cr_mod nil)
    (FtoR const-decl "real" float nil))
   nil))
 (Fmod_TCC3 0
  (Fmod_TCC3-1 nil 3668260573 ("" (grind) nil nil)
   ((mod_pre1 const-decl "bool" cr_mod nil)
    (/= const-decl "boolean" notequal nil)
    (mod_pre2 const-decl "bool" cr_mod nil))
   nil))
 (Fmod_bounded 0
  (Fmod_bounded-1 nil 3669722117
   ("" (skeep)
    (("" (lemma "Fg_bounded[radix,b,mod_pre1,mod_pre2,mod]")
      (("1" (inst -1 "f1" "f2")
        (("1" (expand "Fmod") (("1" (propax) nil nil)) nil)
         ("2" (expand "mod_pre1") (("2" (propax) nil nil)) nil))
        nil)
       ("2" (hide 2)
        (("2" (skeep)
          (("2" (expand "mod_pre2")
            (("2" (assert)
              (("2" (expand "mod_pre1") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (mod_pre2 const-decl "bool" cr_mod nil)
    (mod_pre1 const-decl "bool" cr_mod nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (radix formal-const-decl "above(1)" cr_mod nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Fg_bounded formula-decl nil binop_em_scheme nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (Fmod const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(mod(FtoR(f1), FtoR(f2)), f3)}"
     cr_mod nil)
    (f1 skolem-const-decl "float[radix]" cr_mod nil)
    (FtoR const-decl "real" float nil)
    (float type-eq-decl nil float nil))
   nil))
 (Fmod_error_TCC1 0
  (Fmod_error_TCC1-1 nil 3669723590 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (mod_pre2 const-decl "bool" cr_mod nil)
    (int nonempty-type-eq-decl nil integers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" cr_mod nil)
    (float type-eq-decl nil float nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil)
    (FtoR const-decl "real" float nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil))
   nil))
 (Fmod_error 0
  (Fmod_error-1 nil 3669723591
   ("" (skeep)
    (("" (use "Fg_error[radix,b,mod_pre1,mod_pre2,mod]")
      (("1" (expand "Fmod") (("1" (propax) nil nil)) nil)
       ("2" (expand "mod_pre1") (("2" (propax) nil nil)) nil)
       ("3" (hide-all-but 1)
        (("3" (expand "mod_pre1")
          (("3" (skeep*)
            (("3" (expand "mod_pre2") (("3" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((IFF const-decl "[bool, bool -> bool]" booleans nil)
    (Fg_error formula-decl nil binop_em_scheme nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" cr_mod nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (mod_pre1 const-decl "bool" cr_mod nil)
    (mod_pre2 const-decl "bool" cr_mod nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (f1 skolem-const-decl "float[radix]" cr_mod nil)
    (FtoR const-decl "real" float nil)
    (float type-eq-decl nil float nil)
    (Fulp_posreal_j application-judgement "posreal" cr_mod nil)
    (Fmod const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(mod(FtoR(f1), FtoR(f2)), f3)}"
     cr_mod nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak)))

