%
% IEEE 754 instantiation of the high level specification for single precision numbers.
%
ieee754sp: THEORY
BEGIN

  ieee754radix: MACRO nat = 2
  ieee754sp_prec: MACRO nat = 24
  ieee754sp_dexp: MACRO nat = 149

  IMPORTING float[ieee754radix],
   	    float_props_rounding[ieee754radix]
	    
  x,x1,x2: VAR real

  single_precision_format: Format=(#Prec:=ieee754sp_prec,dExp:=ieee754sp_dexp#)

  % single precision numbers 
  unb_single: TYPE = (Fcanonic?(single_precision_format))

  f,f1,f2: VAR unb_single
  
  Sulp(f1): posreal = Fulp(single_precision_format)(f1)

  min_Sulp: nonneg_real = min_Fulp(single_precision_format)

  Sminexp: MACRO int = -dExp(single_precision_format)

  sp_closest?(x1,(f1:(Fbounded?(single_precision_format)))): bool =
    EvenClosest?(single_precision_format)(x1,f1)
        
  closest_single?(x1)(f1:(Fbounded?(single_precision_format))): bool =
    sp_closest?(x1,f1)

  sp_closest?_j: JUDGEMENT
    sp_closest? HAS_TYPE
        {round: RestrictedRounding[2](single_precision_format, EvenClosest?) |
                                 rounded_mode?(single_precision_format)(round) }

  sp_closest?_closestroundingpred_j: JUDGEMENT
    sp_closest? HAS_TYPE ClosestRoundingPred[2](single_precision_format)

  % real to single-precision conversion.
  RtoS(x1): { f:unb_single |  closest_single?(x1)(f) } =
    RND_EClosest(single_precision_format)(x1)

  rtos_canonicroundfun_exactrepconservation_j: JUDGEMENT
    RtoS HAS_TYPE {RtoF:
          CanonicRoundingFun(single_precision_format, sp_closest?) |
                exact_rep_conservation[2]
                    (single_precision_format, sp_closest?)(RtoF)}
		    
  StoR(f1): real = FtoR(f1)
  CONVERSION StoR

  rtos_canonic_rounding_fun_j: JUDGEMENT
    RtoS HAS_TYPE CanonicRoundingFun[2](single_precision_format,sp_closest?)

  noteq_rew_rl1 : LEMMA FORALL(X,Y: unb_single):
    X < Y IMPLIES (NOT X = Y)

  noteq_rew_rl2 : LEMMA FORALL(X,Y: unb_single):
    X > Y IMPLIES (NOT X = Y)

  noteq_rew : LEMMA FORALL(X,Y: unb_single):
    (NOT X = Y) = (X > Y OR X < Y)	

  neq_rew : LEMMA FORALL(X,Y: unb_single):
    X /= Y = NOT X = Y

  % Unit in the Last Place (ulp) definition for single precision
  ulp_sp(x): nonneg_real = ulp(single_precision_format,sp_closest?,RtoS)(x)

  StoR_round: LEMMA
    abs(StoR(RtoS(x1)) - x1) <= Sulp(RtoS(x1)) / 2
  AUTO_REWRITE+ StoR_round

  StoR_RtoS: LEMMA
   EXISTS(e1: real):
    - Sulp(RtoS(x1)) / 2 <= e1 AND
    e1 <= Sulp(RtoS(x1)) / 2 AND
    StoR(RtoS(x1)) = x1 + e1

  % StoR conversion is an increasing function.
  StoR_inc: LEMMA
    f1 <= f2 IMPLIES StoR(f1) <= StoR(f2)

  % RtoS conversion is an increasing function.
  RtoS_inc: LEMMA
    x1 <= x2 IMPLIES RtoS(x1) <= RtoS(x2)

  % ULP definition for single precision numbers.
  Sulp_def: LEMMA
    Sulp(f1) = 2^Fexp(f1)

  RtoS_opp: LEMMA
    RtoS(-x) = Fopp(RtoS(x))

  unique_zero_RtoS: LEMMA
    unique_zero(
      single_precision_format,
      EvenClosest?(single_precision_format),
      RtoS)

  sp_rep_exp_bound: LEMMA
    FORALL(exp   : int | -ieee754sp_dexp <= exp,
	   x     : real,
	   err   : nonneg_real,
	   f     : unb_single):
    abs(StoR(f) - x) <= err AND
    abs(x)+err <= ieee754radix^exp
    IMPLIES Fexp(f) <= exp

END ieee754sp
