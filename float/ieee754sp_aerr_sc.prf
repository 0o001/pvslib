(ieee754sp_aerr_sc
 (Sadd_aerr_TCC1 0
  (Sadd_aerr_TCC1-1 nil 3680278183 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (Sadd_aerr_TCC2 0
  (Sadd_aerr_TCC2-1 nil 3680278183
   ("" (skeep)
    (("" (use "StoR_RtoS")
      (("" (skeep)
        (("" (inst?)
          (("" (assert)
            (("" (expand "Sulp") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((StoR_RtoS formula-decl nil ieee754sp nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    nil (Sulp const-decl "posreal" ieee754sp nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (Sadd_aerr_TCC3 0
  (Sadd_aerr_TCC3-1 nil 3680278183 ("" (assuming-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (Sadd_aerr_TCC4 0
  (Sadd_aerr_TCC4-1 nil 3680278183 ("" (assuming-tcc) nil nil)
   ((rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (RtoS const-decl "(closest_single?(x1))" ieee754sp nil)
    (StoR const-decl "real" ieee754sp nil)
    (Fadd const-decl "(closest_single?(FtoR(f1) + FtoR(f2)))" ieee754sp
     nil)
    (Fadd const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) + FtoR(f2), f3)}"
     float_ops nil)
    (Fg const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(g(FtoR(f1), FtoR(f2)), f3)}"
     binop_em_scheme nil)
    (RND_Max const-decl "(Fcanonic?(b))" float nil)
    (Fopp const-decl "float" float nil)
    (FtoR const-decl "real" float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (Sadd_aerr_TCC5 0
  (Sadd_aerr_TCC5-1 nil 3680278183 ("" (assuming-tcc) nil nil)
   (nil (|##| const-decl "bool" interval "interval_arith/")
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (I_err_add_TCC1 0
  (I_err_add_TCC1-1 nil 3680278183
   ("" (skeep)
    (("" (typepred "RtoS((r1 + e1) + (r2 + e2))")
      (("" (expand "Fcanonic?")
        (("" (split -1)
          (("1" (expand "Fnormal?")
            (("1" (flatten) (("1" (assert) nil nil)) nil)) nil)
           ("2" (expand "Fsubnormal?")
            (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (RtoS const-decl "(closest_single?(x1))" ieee754sp nil)
    (closest_single? const-decl "bool" ieee754sp nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (Fcanonic? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (Fnormal? const-decl "bool" float nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Fsubnormal? const-decl "bool" float nil))
   nil))
 (Sadd_aerr 0
  (Sadd_aerr-1 nil 3680280124
   (""
    (then (skeep) (use "Sadd_aerr.aerr") (assert) (expand "Add")
     (expand "[||]") (propax))
    nil nil)
   ((r2i_Proper application-judgement "ProperInterval" interval
     "interval_arith/")
    nil nil (Add const-decl "Interval" interval "interval_arith/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (Fulp_posreal_j application-judgement "posreal" ieee754sp_aerr_sc
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (Fadd const-decl "(closest_single?(FtoR(f1) + FtoR(f2)))" ieee754sp
     nil)
    (FtoR const-decl "real" float nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (RtoS const-decl "(closest_single?(x1))" ieee754sp nil)
    (closest_single? const-decl "bool" ieee754sp nil)
    (StoR const-decl "real" ieee754sp nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (Fcanonic? const-decl "bool" float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (aerr formula-decl nil float_aerr_sc_schm_op2 nil))
   shostak))
 (Ssub_aerr_TCC1 0
  (Ssub_aerr_TCC1-1 nil 3680287981 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (Ssub_aerr_TCC2 0
  (Ssub_aerr_TCC2-1 nil 3680287981 ("" (assuming-tcc) nil nil)
   ((rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (RtoS const-decl "(closest_single?(x1))" ieee754sp nil)
    (StoR const-decl "real" ieee754sp nil)
    (Fsub const-decl "(closest_single?(FtoR(f1) - FtoR(f2)))" ieee754sp
     nil)
    (Fsub const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) - FtoR(f2), f3)}"
     float_ops nil)
    (Fg const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(g(FtoR(f1), FtoR(f2)), f3)}"
     binop_em_scheme nil)
    (RND_Max const-decl "(Fcanonic?(b))" float nil)
    (Fopp const-decl "float" float nil)
    (FtoR const-decl "real" float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (Ssub_aerr_TCC3 0
  (Ssub_aerr_TCC3-1 nil 3680287981 ("" (assuming-tcc) nil nil)
   (nil (|##| const-decl "bool" interval "interval_arith/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (I_err_sub_TCC1 0
  (I_err_sub_TCC1-1 nil 3680287981
   ("" (skeep)
    (("" (use "FcanonicBounded") (("" (assert) nil nil)) nil)) nil)
   ((FcanonicBounded formula-decl nil float nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (RtoS const-decl "(closest_single?(x1))" ieee754sp nil)
    (closest_single? const-decl "bool" ieee754sp nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (Fcanonic? const-decl "bool" float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (Ssub_aerr 0
  (Ssub_aerr-1 nil 3680288022
   (""
    (then (skeep) (use "Ssub_aerr.aerr") (assert) (expand "Add")
     (expand "[||]") (propax))
    nil nil)
   ((nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (r2i_Proper application-judgement "ProperInterval" interval
     "interval_arith/")
    nil nil (Add const-decl "Interval" interval "interval_arith/")
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    nil (real_plus_real_is_real application-judgement "real" reals nil)
    (Fsub const-decl "(closest_single?(FtoR(f1) - FtoR(f2)))" ieee754sp
     nil)
    (FtoR const-decl "real" float nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (RtoS const-decl "(closest_single?(x1))" ieee754sp nil)
    (closest_single? const-decl "bool" ieee754sp nil)
    (StoR const-decl "real" ieee754sp nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (Fcanonic? const-decl "bool" float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (aerr formula-decl nil float_aerr_sc_schm_op2 nil))
   shostak))
 (Smul_aerr_TCC1 0
  (Smul_aerr_TCC1-1 nil 3680288118 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (Smul_aerr_TCC2 0
  (Smul_aerr_TCC2-1 nil 3680288118 ("" (assuming-tcc) nil nil)
   ((rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (RtoS const-decl "(closest_single?(x1))" ieee754sp nil)
    (StoR const-decl "real" ieee754sp nil)
    (Fmul const-decl "(closest_single?(FtoR(f1) * FtoR(f2)))" ieee754sp
     nil)
    (Fmul const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) * FtoR(f2), f3)}"
     float_ops nil)
    (Fg const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(g(FtoR(f1), FtoR(f2)), f3)}"
     binop_em_scheme nil)
    (RND_Max const-decl "(Fcanonic?(b))" float nil)
    (Fopp const-decl "float" float nil)
    (FtoR const-decl "real" float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (Smul_aerr_TCC3 0
  (Smul_aerr_TCC3-1 nil 3680288118 ("" (assuming-tcc) nil nil)
   (nil (|##| const-decl "bool" interval "interval_arith/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (I_err_mul_TCC1 0
  (I_err_mul_TCC1-1 nil 3680288118
   ("" (skeep)
    (("" (use "FcanonicBounded") (("" (assert) nil nil)) nil)) nil)
   ((FcanonicBounded formula-decl nil float nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (RtoS const-decl "(closest_single?(x1))" ieee754sp nil)
    (closest_single? const-decl "bool" ieee754sp nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (Fcanonic? const-decl "bool" float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (Smul_aerr 0
  (Smul_aerr-1 nil 3680288123
   ("" (skeep)
    (("" (lemma "Smul_aerr.aerr")
      (("" (inst? -1 :where -2)
        (("" (inst? -1 :where -3)
          (("" (assert)
            (("" (expand "Add")
              (("" (expand "[||]") (("" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Fmul const-decl "(closest_single?(FtoR(f1) * FtoR(f2)))" ieee754sp
     nil)
    (FtoR const-decl "real" float nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (RtoS const-decl "(closest_single?(x1))" ieee754sp nil)
    (closest_single? const-decl "bool" ieee754sp nil)
    (StoR const-decl "real" ieee754sp nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (Fcanonic? const-decl "bool" float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (aerr formula-decl nil float_aerr_sc_schm_op2 nil)
    (Add const-decl "Interval" interval "interval_arith/") nil nil
    (real_plus_real_is_real application-judgement "real" reals nil)
    (r2i_Proper application-judgement "ProperInterval" interval
     "interval_arith/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    nil
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (Sdiv_aerr_TCC1 0
  (Sdiv_aerr_TCC1-1 nil 3680280613 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (Sdiv_aerr_TCC2 0
  (Sdiv_aerr_TCC2-1 nil 3680280613 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (StoR const-decl "real" ieee754sp nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (div_pre2 const-decl "bool" float_ops nil)
    (/= const-decl "boolean" notequal nil)
    (FtoR const-decl "real" float nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (Sdiv_aerr_TCC3 0
  (Sdiv_aerr_TCC3-1 nil 3680280613 ("" (subtype-tcc) nil nil) nil nil))
 (Sdiv_aerr_TCC4 0
  (Sdiv_aerr_TCC4-1 nil 3680280613
   ("" (skeep) (("" (use "zero_times3") (("" (assert) nil nil)) nil))
    nil)
   ((zero_times3 formula-decl nil real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (Sdiv_aerr_TCC5 0
  (Sdiv_aerr_TCC5-1 nil 3680280613 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil))
 (Sdiv_aerr_TCC6 0
  (Sdiv_aerr_TCC6-1 nil 3680280613 ("" (assuming-tcc) nil nil)
   ((rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (RtoS const-decl "(closest_single?(x1))" ieee754sp nil)
    (StoR const-decl "real" ieee754sp nil)
    (Fdiv const-decl "(closest_single?(FtoR(f1) / FtoR(f2)))" ieee754sp
     nil)
    (Fdiv const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) / FtoR(f2), f3)}"
     float_ops nil)
    (Fg const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(g(FtoR(f1), FtoR(f2)), f3)}"
     binop_em_scheme nil)
    (RND_Max const-decl "(Fcanonic?(b))" float nil)
    (Fopp const-decl "float" float nil)
    (FtoR const-decl "real" float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (Sdiv_aerr_TCC7 0
  (Sdiv_aerr_TCC7-1 nil 3680280613
   ("" (skeep)
    ((""
      (case "(x + y) / (z + w) = x / z + (z * y - x * w) / (z * z + z * w)")
      (("1" (replace -1 :hide? t :dir rl) (("1" (grind) nil nil)) nil)
       ("2" (hide 8) (("2" (grind-reals) nil nil)) nil))
      nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (|##| const-decl "bool" interval "interval_arith/") nil
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cross_mult formula-decl nil real_props nil)
    (add_div formula-decl nil real_props nil))
   nil))
 (I_err_div_TCC1 0
  (I_err_div_TCC1-1 nil 3680280613 ("" (subtype-tcc) nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (I_err_div_TCC2 0
  (I_err_div_TCC2-1 nil 3680280613 ("" (subtype-tcc) nil nil) nil nil))
 (I_err_div_TCC3 0
  (I_err_div_TCC3-1 nil 3680280613
   ("" (skeep)
    (("" (use "FcanonicBounded") (("" (assert) nil nil)) nil)) nil)
   ((FcanonicBounded formula-decl nil float nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (RtoS const-decl "(closest_single?(x1))" ieee754sp nil)
    (closest_single? const-decl "bool" ieee754sp nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (Fcanonic? const-decl "bool" float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (Sdiv_aerr_TCC8 0
  (Sdiv_aerr_TCC8-1 nil 3680280613 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (div_pre2 const-decl "bool" float_ops nil)
    (StoR const-decl "real" ieee754sp nil)
    (FtoR const-decl "real" float nil)
    (/= const-decl "boolean" notequal nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (Sdiv_aerr_TCC9 0
  (Sdiv_aerr_TCC9-1 nil 3680280613
   ("" (skeep)
    (("" (lemma "zero_times3")
      (("" (inst -1 "r2" "r2+e2") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((zero_times3 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (Sdiv_aerr_TCC10 0
  (Sdiv_aerr_TCC10-1 nil 3680280613
   ("" (skeep)
    (("" (use "FcanonicBounded") (("" (assert) nil nil)) nil)) nil)
   ((FcanonicBounded formula-decl nil float nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (RtoS const-decl "(closest_single?(x1))" ieee754sp nil)
    (closest_single? const-decl "bool" ieee754sp nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (Fcanonic? const-decl "bool" float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil))
 (Sdiv_aerr 0
  (Sdiv_aerr-1 nil 3680280618
   ("" (skeep)
    (("" (use "Sdiv_aerr.aerr")
      (("" (assert)
        (("" (expand "Add")
          (("" (expand "[||]") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((aerr formula-decl nil float_aerr_sc_schm_op2 nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (StoR const-decl "real" ieee754sp nil)
    (closest_single? const-decl "bool" ieee754sp nil)
    (RtoS const-decl "(closest_single?(x1))" ieee754sp nil)
    (/= const-decl "boolean" notequal nil)
    (div_pre2 const-decl "bool" float_ops nil)
    (FtoR const-decl "real" float nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (Fdiv const-decl "(closest_single?(FtoR(f1) / FtoR(f2)))" ieee754sp
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil) nil
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (Add const-decl "Interval" interval "interval_arith/") nil nil
    (r2i_Proper application-judgement "ProperInterval" interval
     "interval_arith/"))
   shostak))
 (Sfloor_aerr_TCC1 0
  (Sfloor_aerr_TCC1-1 nil 3680286977 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (Sfloor_aerr_TCC2 0
  (Sfloor_aerr_TCC2-1 nil 3680286977 ("" (assuming-tcc) nil nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (Sfloor_aerr_TCC3 0
  (Sfloor_aerr_TCC3-1 nil 3680286977 ("" (assuming-tcc) nil nil)
   ((rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (RtoS const-decl "(closest_single?(x1))" ieee754sp nil)
    (StoR const-decl "real" ieee754sp nil)
    (Ffloor const-decl "(closest_single?(floor(FtoR(f1))))" ieee754sp
     nil)
    (Ffloor const-decl
     "{f2: (Fcanonic?(b)) | EvenClosest?(b)(floor(FtoR(f1)), f2)}"
     float_ops nil)
    (Fg const-decl
     "{f2: (Fcanonic?(b)) | EvenClosest?(b)(g(FtoR(f1)), f2)}"
     unop_em_scheme nil)
    (RND_Max const-decl "(Fcanonic?(b))" float nil)
    (Fopp const-decl "float" float nil)
    (FtoR const-decl "real" float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (Sfloor_aerr_TCC4 0
  (Sfloor_aerr_TCC4-1 nil 3680286977 ("" (assuming-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil) nil
    (|##| const-decl "bool" interval "interval_arith/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil))
 (I_err_floor_TCC1 0
  (I_err_floor_TCC1-1 nil 3680286977
   ("" (skeep)
    (("" (use "FcanonicBounded") (("" (assert) nil nil)) nil)) nil)
   ((FcanonicBounded formula-decl nil float nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (RtoS const-decl "(closest_single?(x1))" ieee754sp nil)
    (closest_single? const-decl "bool" ieee754sp nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (Fcanonic? const-decl "bool" float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (Sfloor_aerr 0
  (Sfloor_aerr-1 nil 3680286983
   (""
    (then (skeep) (use "Sfloor_aerr.aerr") (assert) (expand "Add")
     (expand "[||]") (propax))
    nil nil)
   (nil
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (r2i_Proper application-judgement "ProperInterval" interval
     "interval_arith/")
    nil nil (Add const-decl "Interval" interval "interval_arith/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (fractional const-decl "{x | 0 <= x & x < 1}" floor_ceil nil)
    (restrict const-decl "R" restrict nil)
    (Ffloor const-decl "(closest_single?(floor(FtoR(f1))))" ieee754sp
     nil)
    (FtoR const-decl "real" float nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (TRUE const-decl "bool" booleans nil)
    (RtoS const-decl "(closest_single?(x1))" ieee754sp nil)
    (closest_single? const-decl "bool" ieee754sp nil)
    (StoR const-decl "real" ieee754sp nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (Fcanonic? const-decl "bool" float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (aerr formula-decl nil float_aerr_sc_schm_op1 nil))
   shostak)))

