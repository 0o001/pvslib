(ulp_bounds
 (div_ulp_TCC1 0
  (div_ulp_TCC1-1 nil 3696783778 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (div_ulp_TCC2 0
  (div_ulp_TCC2-1 nil 3696783778
   ("" (skeep :preds? t)
    (("" (expand "abs" -8)
      (("" (lift-if -8)
        (("" (split -8)
          (("1" (flatten)
            (("1" (move-terms -2 l 1)
              (("1" (move-terms -2 l 1)
                (("1" (simplify)
                  (("1" (case "x2+eps2 = 0")
                    (("1" (assert) nil nil) ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (div_ulp 0
  (div_ulp-1 nil 3696784197
   ("" (skeep)
    (("" (lemma "abs_div")
      (("" (inst?)
        (("" (replaces -1)
          (("" (case "NOT  1 / abs((x2 + h2)) <= 1 / (abs(x2) - eps2)")
            (("1" (hide 2)
              (("1" (typepred "eps2")
                (("1" (case "not abs(x2)-eps2>0")
                  (("1" (hide 2)
                    (("1" (expand "abs" 1)
                      (("1" (lift-if 1)
                        (("1" (split 1)
                          (("1" (flatten)
                            (("1" (flip-ineq 1)
                              (("1"
                                (assert)
                                (("1"
                                  (swap-rel -3)
                                  (("1"
                                    (case "NOT x2-eps2<0")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (move-terms -1 l 1)
                                      (("2"
                                        (move-terms -1 l 1)
                                        (("2"
                                          (move-terms -2 l 1)
                                          (("2"
                                            (move-terms -2 l 1)
                                            (("2"
                                              (mult-ineq -1 -2)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (flip-ineq 1)
                              (("2"
                                (flip-ineq 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (case "not x2+eps2>=0")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (swap-rel -2)
                                      (("2"
                                        (move-terms -2 r 1)
                                        (("2"
                                          (move-terms -2 r 1)
                                          (("2"
                                            (mult-ineq -1 -2)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (cross-mult 1)
                    (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (case "NOT abs((x1 + h1)) <= (abs(x1) + eps1)")
              (("1" (hide 2)
                (("1" (hide -1) (("1" (grind) nil nil)) nil)) nil)
               ("2" (case "0<=1 / abs((x2 + h2))")
                (("1" (mult-ineq -2 -3)
                  (("1" (assert) nil nil)
                   ("2" (ground)
                    (("1" (rewrite "abs_abs") (("1" (assert) nil nil))
                      nil)
                     ("2" (case "NOT 1 = abs(1)")
                      (("1" (assert) (("1" (eval-formula 1) nil nil))
                        nil)
                       ("2" (replace -1 -4)
                        (("2" (replace -1 1)
                          (("2" (rewrite "abs_div" :dir rl)
                            (("2" (rewrite "abs_div" :dir rl)
                              (("2"
                                (rewrite "abs_abs")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) (("2" (cross-mult 1) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (h2 skolem-const-decl "{h2: real | NOT h2 + x2 = 0}" ulp_bounds
     nil)
    (x2 skolem-const-decl "real" ulp_bounds nil)
    (times_div2 formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (eps2 skolem-const-decl
     "{eps2: nnreal | -1 * (eps2 * eps2) - eps2 * x2 + (eps2 * x2 + x2 * x2) > 0}"
     ulp_bounds nil)
    (ge_times_ge_any1 formula-decl nil extra_real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< const-decl "bool" reals nil)
    (lt_times_lt_any1 formula-decl nil extra_real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (abs_abs formula-decl nil real_props nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
     real_defs nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (le_times_le_any1 formula-decl nil extra_real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (abs_div formula-decl nil real_props nil))
   shostak))
 (sqrt_ulp_TCC1 0
  (sqrt_ulp_TCC1-1 nil 3696781995 ("" (subtype-tcc) nil nil) nil nil))
 (sqrt_ulp 0
  (sqrt_ulp-1 nil 3696781995
   ("" (skeep)
    (("" (typepred "sqrt(x + h)")
      (("" (expand "abs" 1)
        (("" (assert)
          (("" (lemma "sqrt_le")
            (("" (inst?) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sqrt_le formula-decl nil sqrt "reals/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil))
   shostak))
 (atan_ulp 0
  (atan_ulp-1 nil 3696782363
   ("" (skeep)
    (("" (case "NOT abs(x+h) <= abs(x) + eps")
      (("1" (hide 2) (("1" (grind) nil nil)) nil)
       ("2" (case "NOT abs(atan(x+h)) = atan(abs(x+h))")
        (("1" (hide 2)
          (("1" (expand "abs" 1 2)
            (("1" (lift-if 1)
              (("1" (split 1)
                (("1" (lemma "atan_neg")
                  (("1" (inst?)
                    (("1" (lemma "abs_neg")
                      (("1" (inst -1 "atan(h+x)")
                        (("1" (replace -2 -1 :dir rl)
                          (("1" (replace -2 -1)
                            (("1" (replace -1 :dir rl)
                              (("1"
                                (replace -2 -1 :dir rl)
                                (("1"
                                  (replace -2 1 :dir rl)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (case "not atan(-(h + x)) >=0")
                                      (("1"
                                        (lemma "atan_0")
                                        (("1"
                                          (lemma
                                           "atan_strict_increasing")
                                          (("1"
                                            (expand
                                             "strict_increasing?")
                                            (("1"
                                              (inst -1 "0" "-(h+x)")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "abs " 1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (flip-ineq 1)
                    (("2" (case "h+x=0")
                      (("1" (replaces -1)
                        (("1" (lemma "atan_0")
                          (("1" (assert)
                            (("1" (expand "abs")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (lemma "atan_0")
                          (("2" (lemma "atan_strict_increasing")
                            (("2" (expand "strict_increasing?")
                              (("2"
                                (inst -1 "0" "h+x")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "abs")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (replaces -1)
            (("2" (case "abs(h + x) = abs(x) + eps")
              (("1" (assert) nil nil)
               ("2" (lemma "atan_strict_increasing")
                (("2" (expand "strict_increasing?")
                  (("2" (inst -1 "abs(h + x) " " abs(x) + eps")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (atan_neg formula-decl nil atan "trig_fnd/")
    (abs_neg formula-decl nil abs_lems "reals/")
    (atan_strict_increasing formula-decl nil atan "trig_fnd/")
    (pi_bound name-judgement "{r: posreal | pi_lb < r AND r < pi_ub}"
     atan_approx "trig_fnd/")
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (strict_increasing? const-decl "bool" real_fun_preds "reals/")
    (atan_0 formula-decl nil atan "trig_fnd/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (pi const-decl "posreal" atan "trig_fnd/")
    (real_abs_lt_pi2 nonempty-type-eq-decl nil atan "trig_fnd/")
    (atan const-decl "real_abs_lt_pi2" atan "trig_fnd/"))
   shostak)))

