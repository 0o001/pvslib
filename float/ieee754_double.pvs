%
% This theory defines the binary format binary64.
% 
ieee754_double : THEORY
BEGIN

  IMPORTING ieee754_top[2,53,1023]

  binary64 : TYPE = ieee754_data.datum
  double   : TYPE = binary64

  x,y: VAR binary64

  % special values

  pInf_double  : binary64
  nInf_double  : binary64
  pZero_double : binary64
  nZero_double : binary64

  NaN?_double   : [ binary64 -> bool ]
  finite?_double: [ binary64 -> bool ]

  % operations

  add_double(x,y: binary64): binary64
  sub_double(x,y: binary64): binary64
  mul_double(x,y: binary64): binary64
  div_double(x,y: binary64): binary64
  min_double(x,y: binary64): binary64
  max_double(x,y: binary64): binary64
  abs_double(x: binary64)  : binary64
  sqrt_double(x: binary64) : binary64

  qlt_double(x,y: binary64): bool
  qle_double(x,y: binary64): bool
  qgt_double(x,y: binary64): bool
  qge_double(x,y: binary64): bool
  qeq_double(x,y: binary64): bool
  qun_double(x,y: binary64): bool

  % conversions

  proj_double  : [ (finite?_double) -> real ]
  round_double : [   real   ->   binary64   ]

  % definitions

  pInf_def: AXIOM pInf_double = pInf
  nInf_def: AXIOM nInf_double = nInf
  pZero_def: AXIOM pZero_double = pZero
  nZero_def: AXIOM nZero_double = nZero
  
  NaN?_def: AXIOM NaN?_double(x) = NaN?(x)
  finite?_def: AXIOM finite?_double(x) = finite?(x)

  add_def: AXIOM add_double(x,y) = add_ieee754(x,y)
  sub_def: AXIOM sub_double(x,y) = sub_ieee754(x,y)
  mul_def: AXIOM mul_double(x,y) = mul_ieee754(x,y)
  div_def: AXIOM div_double(x,y) = div_ieee754(x,y)
  min_def: AXIOM min_double(x,y) = min_ieee754(x,y)
  max_def: AXIOM max_double(x,y) = max_ieee754(x,y)
  abs_def: AXIOM abs_double(x)   = abs_ieee754(x)
  sqrt_def: AXIOM sqrt_double(x) = sqt_ieee754(x)

  qlt_def: AXIOM qlt_double(x,y) = qlt_ieee754(x,y)
  qle_def: AXIOM qle_double(x,y) = qle_ieee754(x,y)
  qgt_def: AXIOM qgt_double(x,y) = qgt_ieee754(x,y)
  qge_def: AXIOM qge_double(x,y) = qge_ieee754(x,y)
  qeq_def: AXIOM qeq_double(x,y) = qeq_ieee754(x,y)
  qun_def: AXIOM qun_double(x,y) = qun_ieee754(x,y)

  proj_def: AXIOM FORALL(x: (finite?_double)): proj_double(x) = proj(x)
  round_def: AXIOM FORALL(r: real): round_double(r) = round(r)

  % additional operators

  neg_double(x: binary64): MACRO binary64 = sub_double(pZero_double, x)

  ulp_double(r: er_real): real = ulp(r)

END ieee754_double
