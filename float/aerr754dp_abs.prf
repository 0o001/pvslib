(aerr754dp_abs
 (IMP_accum_err_abs_TCC1 0
  (IMP_accum_err_abs_TCC1-1 nil 3698666691 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (IMP_accum_err_abs_TCC2 0
  (IMP_accum_err_abs_TCC2-1 nil 3698666691 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (> const-decl "bool" reals nil)
    (radix formal-const-decl "above(1)" accum_err_abs nil)
    (dp_closest? const-decl "bool" ieee754dp nil)
    (EvenClosest? const-decl "bool" float nil)
    (even? const-decl "bool" integers nil)
    (Closest? const-decl "bool" float nil)
    (FtoR const-decl "real" float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (IMP_accum_err_abs_TCC3 0
  (IMP_accum_err_abs_TCC3-3 nil 3698666838
   ("" (expand "RtoD")
    (("" (lemma "ClosestRtoF_exact_rep_conv")
      (("" (inst? -1)
        (("" (hide 2)
          (("" (split 1)
            (("1" (skeep)
              (("1" (typepred "RtoD(x)")
                (("1" (expand "RtoD")
                  (("1" (expand "closest_double?")
                    (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (typepred "RtoD(r)")
                (("2" (expand "closest_double?")
                  (("2" (expand "dp_closest?")
                    (("2" (expand "EvenClosest?")
                      (("2" (flatten)
                        (("2" (expand "RtoD") (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fbounded? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (dp_closest? const-decl "bool" ieee754dp nil)
    (RNDF type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (Fcanonic? const-decl "bool" float nil)
    (RND_EClosest const-decl "(Fcanonic?(b))" float nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (closest_double? const-decl "bool" ieee754dp nil)
    (EvenClosest? const-decl "bool" float nil)
    (ClosestRtoF_exact_rep_conv formula-decl nil float nil))
   nil)
  (IMP_accum_err_abs_TCC3-2 nil 3698666805
   ("" (expand "RtoS")
    (("" (lemma "ClosestRtoF_exact_rep_conv")
      (("" (inst? -1)
        (("" (hide 2)
          (("" (split 1)
            (("1" (skeep)
              (("1" (typepred "RtoS(x)")
                (("1" (expand "RtoS")
                  (("1" (expand "closest_single?")
                    (("1" (propax) nil)))))))))
             ("2" (skeep)
              (("2" (typepred "RtoS(r)")
                (("2" (expand "closest_single?")
                  (("2" (expand "sp_closest?")
                    (("2" (expand "EvenClosest?")
                      (("2" (flatten)
                        (("2" (expand "RtoS")
                          (("2" (propax) nil))))))))))))))))))))))))
    nil)
   nil nil)
  (IMP_accum_err_abs_TCC3-1 nil 3698666691 ("" (subtype-tcc) nil nil)
   nil nil))
 (Dabs_aerr 0
  (Dabs_aerr-2 nil 3698666754
   ("" (skeep)
    (("" (expand "Dabs")
      (("" (expand "DtoR")
        (("" (lemma "accum_err_abs")
          (("" (inst?)
            (("" (split -1)
              (("1" (expand "abs_aerr_bound")
                (("1" (expand "aebounddp_abs") (("1" (propax) nil nil))
                  nil))
                nil)
               ("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (DtoR const-decl "real" ieee754dp nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (abs_aerr_bound const-decl "real" accum_err_abs nil)
    (aebounddp_abs const-decl "nonneg_real" aerr754dp_abs nil)
    (accum_err_abs formula-decl nil accum_err_abs nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fbounded? const-decl "bool" float nil)
    (dp_closest? const-decl "bool" ieee754dp nil)
    (Fcanonic? const-decl "bool" float nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (closest_double? const-decl "bool" ieee754dp nil)
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp nil)
    (Dabs const-decl
     "{f: unb_double | closest_double?(abs(DtoR(f1)))(f)}"
     ieee754dp_abs nil))
   nil)
  (Dabs_aerr-1 nil 3698666740
   ("" (expand "aeboundsp_abs")
    (("" (skeep)
      (("" (expand "Sabs")
        (("" (expand "StoR")
          (("" (lemma "accum_err_abs")
            (("" (inst?)
              (("" (split -1)
                (("1" (expand "abs_aerr_bound") (("1" (propax) nil)))
                 ("2" (propax) nil))))))))))))))
    nil)
   nil nil)))

