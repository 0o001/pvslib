(aerr_mul_props
 (IMP_accum_err_mul_TCC1 0
  (IMP_accum_err_mul_TCC1-2 nil 3698574400
   ("" (use "round_even_closest") nil nil)
   ((round_even_closest formula-decl nil aerr_mul_props nil)) nil)
  (IMP_accum_err_mul_TCC1-1 nil 3698574361 ("" (assuming-tcc) nil nil)
   nil nil))
 (IMP_accum_err_mul_TCC2 0
  (IMP_accum_err_mul_TCC2-2 nil 3698574425
   ("" (use "round_rounded_mode") nil nil)
   ((round_rounded_mode formula-decl nil aerr_mul_props nil)) nil)
  (IMP_accum_err_mul_TCC2-1 nil 3698574361 ("" (assuming-tcc) nil nil)
   nil nil))
 (power_of_radix_left_mult_pre_r_TCC1 0
  (power_of_radix_left_mult_pre_r_TCC1-1 nil 3698084231
   ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil))
   nil))
 (aelemmath_exact_mul_l_TCC1 0
  (aelemmath_exact_mul_l_TCC1-1 nil 3698084260
   ("" (skeep) (("" (use "mul_accum_err") (("" (assert) nil nil)) nil))
    nil)
   ((mul_accum_err formula-decl nil accum_err_mul nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" aerr_mul_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (b formal-const-decl "Format[radix]" aerr_mul_props nil)
    (float type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Closest? const-decl "bool" float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred[radix](b)"
           aerr_mul_props nil)
    (RNDF type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (exact_rep_conservation const-decl "bool" float nil)
    (RtoF formal-const-decl "{RtoF: CanonicRoundingFun(b, round) |
         exact_rep_conservation[radix](b, round)(RtoF)}" aerr_mul_props
     nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (aelemmath_exact_mul_l_TCC2 0
  (aelemmath_exact_mul_l_TCC2-1 nil 3698084260
   ("" (skeep)
    (("" (skeep*)
      (("" (case "n!1 = n")
        (("1" (replace -1)
          (("1" (replace -2 1)
            (("1" (lemma "Fmul_radix_power_error_ulp")
              (("1" (inst -1 "radix" "b" "round" "RtoF" "n" "f2")
                (("1" (assert) nil nil)
                 ("2" (typepred "n!1")
                  (("2" (assert) (("2" (postpone) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (replace -2 :hide? t)
          (("2" (lemma "Closest_int_exact_rep")
            (("2" (inst -1 "b" "round" "RtoF" "radix ^ n!1")
              (("1" (expand "exactly_representable")
                (("1" (replace -1 :hide? t)
                  (("1" (hide 2)
                    (("1" (use "both_sides_expt1")
                      (("1" (replace -1 :hide? t)
                        (("1" (assert)
                          (("1" (typepred "radix")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (expand "/=")
                        (("2" (replace -1 :hide? t)
                          (("2" (assert)
                            (("2" (lemma "expt_x0")
                              (("2"
                                (inst -1 "radix")
                                (("2"
                                  (replace -1 :dir rl :hide? t)
                                  (("2"
                                    (lemma "both_sides_expt_gt1_le")
                                    (("2"
                                      (inst -1 "radix" "n!1" "0")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (expand "/=")
                        (("3" (replace -1 :hide? t)
                          (("3" (assert)
                            (("3" (lemma "expt_x0")
                              (("3"
                                (inst -1 "radix")
                                (("3"
                                  (replace -1 :dir rl :hide? t)
                                  (("3"
                                    (lemma "both_sides_expt_gt1_le")
                                    (("3"
                                      (inst -1 "radix" "n" "0")
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (expand "vNum")
                  (("2" (expand "abs")
                    (("2" (lift-if 1)
                      (("2" (split 1)
                        (("1" (flatten)
                          (("1" (typepred "radix")
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (flatten)
                          (("2" (hide 1)
                            (("2" (lemma "both_sides_expt_gt1_lt")
                              (("2"
                                (typepred "n!1")
                                (("2"
                                  (inst? - :where -1)
                                  (("2"
                                    (inst - "radix")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (typepred "radix")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide-all-but 1)
                (("3" (typepred "RtoF")
                  (("3" (typepred "round")
                    (("3" (hide-all-but (-1 -2 1))
                      (("3" (skeep)
                        (("3" (inst?)
                          (("3" (inst?) (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (vNum const-decl "posnat" float nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (n!1 skolem-const-decl
     "{n: below(Prec(b)) | n < Prec(b) - Fexp(f2)}" aerr_mul_props nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_expt1 formula-decl nil exponentiation nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_expt_gt1_le formula-decl nil exponentiation nil)
    (expt_x0 formula-decl nil exponentiation nil)
    (exactly_representable const-decl "bool" float nil)
    (both_sides_expt_gt1_lt formula-decl nil exponentiation nil)
    (Closest_int_exact_rep formula-decl nil float nil)
    (Fmul_radix_power_error_ulp formula-decl nil std_mul_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (RtoF formal-const-decl "{RtoF: CanonicRoundingFun(b, round) |
         exact_rep_conservation[radix](b, round)(RtoF)}" aerr_mul_props
     nil)
    (exact_rep_conservation const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (RNDF type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred[radix](b)"
           aerr_mul_props nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Rounding type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (f2 skolem-const-decl "(Fcanonic?(b))" aerr_mul_props nil)
    (n skolem-const-decl "below(Prec(b))" aerr_mul_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (radix formal-const-decl "above(1)" aerr_mul_props nil)
    (Format type-eq-decl nil float nil)
    (b formal-const-decl "Format[radix]" aerr_mul_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (float type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil))
   nil))
 (accum_err_bound_exact_l 0
  (accum_err_bound_exact_l-1 nil 3698082268
   ("" (skeep*)
    (("" (use "aelemmath_exact_mul_l.accumulated_error")
      (("1" (assert)
        (("1" (split 1)
          (("1" (lemma "Closest_int_exact_rep")
            (("1" (inst -1 "b" "round" "RtoF" "radix^n")
              (("1" (expand "exactly_representable")
                (("1" (replace -1)
                  (("1" (assert)
                    (("1" (expand "abs" 1) (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (expand "vNum")
                  (("2" (expand "abs")
                    (("2" (lemma "both_sides_expt_gt1_gt")
                      (("2" (typepred "n")
                        (("2" (expand ">")
                          (("2" (inst? -2 :where -1)
                            (("2" (inst? -2 :where 1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide-all-but 1)
                (("3" (skeep)
                  (("3" (typepred "RtoF")
                    (("3" (inst -1 "r!1")
                      (("3" (typepred "round")
                        (("3" (inst -1 "r!1" "RtoF(r!1)")
                          (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst 1 "n") nil nil) ("3" (inst 1 "n") nil nil)
           ("4" (hide-all-but 1)
            (("4" (lemma "Closest_int_exact_rep")
              (("4" (inst -1 "b" "round" "RtoF" "radix^n")
                (("1" (expand "exactly_representable")
                  (("1" (inst?) nil nil)) nil)
                 ("2" (hide-all-but 1)
                  (("2" (expand "vNum")
                    (("2" (expand "abs")
                      (("2" (typepred "n")
                        (("2" (lemma "both_sides_expt_gt1_gt")
                          (("2" (expand ">")
                            (("2" (inst? -1 :where -2)
                              (("2"
                                (inst? -1 :where 1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide-all-but 1)
                  (("3" (skeep)
                    (("3" (typepred "RtoF")
                      (("3" (inst -1 "r!1")
                        (("3" (typepred "round")
                          (("3" (inst?) (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide-all-but 1)
        (("2" (typepred "RtoF")
          (("2" (inst?) (("2" (inst?) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((accumulated_error formula-decl nil accum_err_exact_op2sch nil)
    (int nonempty-type-eq-decl nil integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" aerr_mul_props nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (b formal-const-decl "Format[radix]" aerr_mul_props nil)
    (restrict const-decl "R" restrict nil)
    (FtoR const-decl "real" float nil) (>= const-decl "bool" reals nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Fbounded? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Closest? const-decl "bool" float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (round formal-const-decl "ClosestRoundingPred[radix](b)"
           aerr_mul_props nil)
    (RNDF type-eq-decl nil float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (exact_rep_conservation const-decl "bool" float nil)
    (RtoF formal-const-decl "{RtoF: CanonicRoundingFun(b, round) |
         exact_rep_conservation[radix](b, round)(RtoF)}" aerr_mul_props
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Fmul const-decl
     "{f3: (Fcanonic?(b)) | Closest?(b)(FtoR(f1) * FtoR(f2), f3)}"
     std_mul nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (TRUE const-decl "bool" booleans nil)
    (mul_aerr_bound const-decl "nonneg_real" accum_err_mul nil)
    (n skolem-const-decl "{n: nat | n < Prec(b)}" aerr_mul_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (vNum const-decl "posnat" float nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (exactly_representable const-decl "bool" float nil)
    (both_sides_expt_gt1_gt formula-decl nil exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Closest_int_exact_rep formula-decl nil float nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak)))

