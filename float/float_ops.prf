(float_ops
 (Fadd_bounded 0
  (Fadd_bounded-1 nil 3669717954
   ("" (skeep)
    (("" (lemma "Fg_bounded[radix,b,trivial1,trivial2,+]")
      (("" (inst -1 "f1" "f2")
        (("" (expand "Fadd") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (radix formal-const-decl "above(1)" float_ops nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Fg_bounded formula-decl nil binop_em_scheme nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (Fadd const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) + FtoR(f2), f3)}"
     float_ops nil)
    (float type-eq-decl nil float nil))
   shostak))
 (Fadd_error 0
  (Fadd_error-1 nil 3669723024
   ("" (skeep)
    (("" (use "ClosestUlp")
      (("" (split -1)
        (("1" (propax) nil nil)
         ("2" (hide 2)
          (("2" (invoke (typepred "%1") (! 1 2))
            (("2" (expand "EvenClosest?") (("2" (flatten) nil nil))
              nil))
            nil))
          nil)
         ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   ((ClosestUlp formula-decl nil float nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" float_ops nil)
    (Fadd const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) + FtoR(f2), f3)}"
     float_ops nil)
    (FtoR const-decl "real" float nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (EvenClosest? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (Fcanonic? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (Fadd_bounded formula-decl nil float_ops nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (Fadd_error_ulp 0
  (Fadd_error_ulp-1 nil 3681669557
   (""
    (then (skeep) (lemma "closest_ulp")
     (invoke (inst -1 "%1" "%2" "%3" "%4" "%5") (! 1 2 1 0 1)
      (! 1 1 1 1 1) (! 1 2 1 1) (! 1 2 1 0 2) (! 1 2 1 0 3))
     (spread (split -1)
      ((propax)
       (then (invoke (typepred "%1") (! 1 1)) (use "FcanonicBounded")
        (assert))
       (then (invoke (typepred "%1") (! 1 2)) (expand "EvenClosest?")
        (flatten)))))
    nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (RNDF type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Rounding type-eq-decl nil float nil)
    (Fadd const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) + FtoR(f2), f3)}"
     float_ops nil)
    (FtoR const-decl "real" float nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (EvenClosest? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (Fcanonic? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Fadd_bounded formula-decl nil float_ops nil)
    (FcanonicBounded formula-decl nil float nil)
    (closest_ulp formula-decl nil float nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" float_ops nil))
   shostak))
 (Fsub_bounded 0
  (Fsub_bounded-2 nil 3669720527
   ("" (skeep)
    (("" (lemma "Fg_bounded[radix,b,trivial1,trivial2,-]")
      (("" (inst -1 "f1" "f2")
        (("" (expand "Fsub") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (radix formal-const-decl "above(1)" float_ops nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Fg_bounded formula-decl nil binop_em_scheme nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Fsub const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) - FtoR(f2), f3)}"
     float_ops nil)
    (float type-eq-decl nil float nil))
   nil)
  (Fsub_bounded-1 nil 3669718601
   ("" (skeep)
    (("" (lemma "Fg_bounded[radix,b,trivial1,trivial2,-]")
      (("" (inst -1 "f1" "f2")
        (("" (expand "Fsub") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((float type-eq-decl nil float nil)
    (Fsub const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) - FtoR(f2), f3)}"
     float_ops nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Fg_bounded formula-decl nil binop_em_scheme nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" float_ops nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (TRUE const-decl "bool" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   nil))
 (Fsub_error 0
  (Fsub_error-1 nil 3669723077
   ("" (skeep)
    (("" (use "ClosestUlp")
      (("" (split -1)
        (("1" (propax) nil nil)
         ("2" (hide 2)
          (("2" (invoke (typepred "%1") (! 1 2))
            (("2" (expand "EvenClosest?") (("2" (flatten) nil nil))
              nil))
            nil))
          nil)
         ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   ((ClosestUlp formula-decl nil float nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" float_ops nil)
    (Fsub const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) - FtoR(f2), f3)}"
     float_ops nil)
    (FtoR const-decl "real" float nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (EvenClosest? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (Fcanonic? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Fsub_bounded formula-decl nil float_ops nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (Fsub_error_ulp 0
  (Fsub_error_ulp-1 nil 3682173568
   (""
    (then (skeep) (lemma "closest_ulp")
     (invoke (inst -1 "%1" "%2" "%3" "%4" "%5") (! 1 2 1 0 1)
      (! 1 1 1 1 1) (! 1 2 1 1) (! 1 2 1 0 2) (! 1 2 1 0 3))
     (spread (split -1)
      ((propax)
       (then (invoke (typepred "%1") (! 1 1)) (use "FcanonicBounded")
        (assert))
       (then (invoke (typepred "%1") (! 1 2)) (expand "EvenClosest?")
        (flatten)))))
    nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (RNDF type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Rounding type-eq-decl nil float nil)
    (Fsub const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) - FtoR(f2), f3)}"
     float_ops nil)
    (FtoR const-decl "real" float nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (EvenClosest? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (Fcanonic? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Fsub_bounded formula-decl nil float_ops nil)
    (FcanonicBounded formula-decl nil float nil)
    (closest_ulp formula-decl nil float nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" float_ops nil))
   shostak))
 (Fmul_bounded 0
  (Fmul_bounded-1 nil 3669720582
   ("" (skeep)
    (("" (lemma "Fg_bounded[radix,b,trivial1,trivial2,*]")
      (("" (inst -1 "f1" "f2")
        (("" (expand "Fmul") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (radix formal-const-decl "above(1)" float_ops nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Fg_bounded formula-decl nil binop_em_scheme nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (Fmul const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) * FtoR(f2), f3)}"
     float_ops nil)
    (float type-eq-decl nil float nil))
   nil))
 (Fmul_error 0
  (Fmul_error-1 nil 3669723123
   ("" (skeep)
    (("" (use "ClosestUlp")
      (("" (split -1)
        (("1" (propax) nil nil)
         ("2" (hide 2)
          (("2" (invoke (typepred "%1") (! 1 2))
            (("2" (expand "EvenClosest?") (("2" (flatten) nil nil))
              nil))
            nil))
          nil)
         ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   ((ClosestUlp formula-decl nil float nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" float_ops nil)
    (Fmul const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) * FtoR(f2), f3)}"
     float_ops nil)
    (FtoR const-decl "real" float nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (EvenClosest? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (Fcanonic? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Fmul_bounded formula-decl nil float_ops nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (Fmul_error_ulp 0
  (Fmul_error_ulp-1 nil 3682174813
   (""
    (then (skeep) (lemma "closest_ulp")
     (invoke (inst -1 "%1" "%2" "%3" "%4" "%5") (! 1 2 1 0 1)
      (! 1 1 1 1 1) (! 1 2 1 1) (! 1 2 1 0 2) (! 1 2 1 0 3))
     (spread (split -1)
      ((propax)
       (then (invoke (typepred "%1") (! 1 1)) (use "FcanonicBounded")
        (assert))
       (then (invoke (typepred "%1") (! 1 2)) (expand "EvenClosest?")
        (flatten)))))
    nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (RNDF type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Rounding type-eq-decl nil float nil)
    (Fmul const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) * FtoR(f2), f3)}"
     float_ops nil)
    (FtoR const-decl "real" float nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (EvenClosest? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (Fcanonic? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Fmul_bounded formula-decl nil float_ops nil)
    (FcanonicBounded formula-decl nil float nil)
    (closest_ulp formula-decl nil float nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" float_ops nil))
   shostak))
 (Fdiv_TCC1 0
  (Fdiv_TCC1-1 nil 3667923012 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (div_pre2 const-decl "bool" float_ops nil)
    (int nonempty-type-eq-decl nil integers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" float_ops nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (Fsubnormal? const-decl "bool" float nil)
    (Fnormal? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (vNum const-decl "posnat" float nil)
    (/= const-decl "boolean" notequal nil)
    (FtoR const-decl "real" float nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (Fdiv_TCC2 0
  (Fdiv_TCC2-1 nil 3668187090 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (div_pre2 const-decl "bool" float_ops nil)
    (int nonempty-type-eq-decl nil integers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" float_ops nil)
    (float type-eq-decl nil float nil)
    (FtoR const-decl "real" float nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (Fdiv_bounded 0
  (Fdiv_bounded-1 nil 3669720753
   ("" (skeep)
    ((""
      (lemma
       "Fg_bounded[radix,b,trivial1,div_pre2,LAMBDA(x1,(x2|div_pre2(x1)(x2))):x1/x2]")
      (("1" (inst -1 "f1" "f2")
        (("1" (expand "Fdiv") (("1" (propax) nil nil)) nil)) nil)
       ("2" (hide 2)
        (("2" (skeep)
          (("2" (typepred "x2")
            (("2" (expand "div_pre2") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (div_pre2 const-decl "bool" float_ops nil)
    (TRUE const-decl "bool" booleans nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (radix formal-const-decl "above(1)" float_ops nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Fg_bounded formula-decl nil binop_em_scheme nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (Fdiv const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) / FtoR(f2), f3)}"
     float_ops nil)
    (float type-eq-decl nil float nil)
    (FtoR const-decl "real" float nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil))
 (Fdiv_error_TCC1 0
  (Fdiv_error_TCC1-1 nil 3669723167 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (div_pre2 const-decl "bool" float_ops nil)
    (int nonempty-type-eq-decl nil integers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" float_ops nil)
    (float type-eq-decl nil float nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil)
    (FtoR const-decl "real" float nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil))
   nil))
 (Fdiv_error 0
  (Fdiv_error-1 nil 3669723169
   ("" (skeep)
    ((""
      (use "Fg_error[radix,b,trivial1,div_pre2,LAMBDA(x1,(x2|div_pre2(x1)(x2))):x1/x2]")
      (("1" (expand "Fdiv") (("1" (propax) nil nil)) nil)
       ("2" (hide 2)
        (("2" (skeep :preds? t)
          (("2" (expand "div_pre2") (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((Fg_error formula-decl nil binop_em_scheme nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" float_ops nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (TRUE const-decl "bool" booleans nil)
    (div_pre2 const-decl "bool" float_ops nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (float type-eq-decl nil float nil)
    (FtoR const-decl "real" float nil)
    (Fdiv const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) / FtoR(f2), f3)}"
     float_ops nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (Fdiv_error_ulp 0
  (Fdiv_error_ulp-1 nil 3682163955
   (""
    (then (skeep) (lemma "closest_ulp")
     (invoke (inst -1 "%1" "%2" "%3" "%4" "%5") (! 1 2 1 0 1)
      (! 1 1 1 1 1) (! 1 2 1 1) (! 1 2 1 0 2) (! 1 2 1 0 3))
     (spread (split -1)
      ((propax)
       (then (invoke (typepred "%1") (! 1 1)) (use "FcanonicBounded")
        (assert))
       (then (invoke (typepred "%1") (! 1 2)) (expand "EvenClosest?")
        (flatten)))))
    nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (RNDF type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Rounding type-eq-decl nil float nil)
    (Fdiv const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) / FtoR(f2), f3)}"
     float_ops nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (EvenClosest? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (Fcanonic? const-decl "bool" float nil)
    (FtoR const-decl "real" float nil)
    (div_pre2 const-decl "bool" float_ops nil)
    (float type-eq-decl nil float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Fdiv_bounded formula-decl nil float_ops nil)
    (FcanonicBounded formula-decl nil float nil)
    (closest_ulp formula-decl nil float nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" float_ops nil))
   shostak))
 (Fexp_TCC1 0
  (Fexp_TCC1-1 nil 3668254167 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (exp_pre2 const-decl "bool" float_ops nil)
    (int nonempty-type-eq-decl nil integers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" float_ops nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (integer? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil)
    (vNum const-decl "posnat" float nil)
    (Fbounded? const-decl "bool" float nil)
    (Fnormal? const-decl "bool" float nil)
    (Fsubnormal? const-decl "bool" float nil)
    (FtoR const-decl "real" float nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (Fexp_TCC2 0
  (Fexp_TCC2-1 nil 3668254167 ("" (subtype-tcc) nil nil)
   ((nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (exp_pre1 const-decl "bool" float_ops nil)
    (FtoR const-decl "real" float nil))
   nil))
 (Fexp_TCC3 0
  (Fexp_TCC3-1 nil 3668254967 ("" (subtype-tcc) nil nil)
   ((exp_pre1 const-decl "bool" float_ops nil)
    (/= const-decl "boolean" notequal nil)
    (integer? const-decl "bool" integers nil)
    (exp_pre2 const-decl "bool" float_ops nil))
   nil))
 (Fexp_bounded 0
  (Fexp_bounded-2 nil 3669720962
   ("" (skeep)
    ((""
      (lemma
       "Fg_bounded[radix,b,exp_pre1,exp_pre2,LAMBDA((x1|exp_pre1(x1)),(x2|exp_pre2(x1)(x2))):x1^x2]")
      (("1" (inst -1 "f1" "f2")
        (("1" (expand "Fexp")
          (("1" (assert)
            (("1" (expand "Fg") (("1" (propax) nil nil)) nil)) nil))
          nil)
         ("2" (hide 2)
          (("2" (expand "exp_pre1") (("2" (propax) nil nil)) nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (skeep :preds? t)
          (("2" (expand "exp_pre2")
            (("2" (flatten)
              (("2" (assert)
                (("2" (ground)
                  (("1" (expand "integer?") (("1" (propax) nil nil))
                    nil)
                   ("2" (expand "integer?") (("2" (propax) nil nil))
                    nil)
                   ("3" (expand "integer?") (("3" (propax) nil nil))
                    nil)
                   ("4" (expand "integer?") (("4" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((^ const-decl "real" exponentiation nil)
    (>= const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (exp_pre2 const-decl "bool" float_ops nil)
    (exp_pre1 const-decl "bool" float_ops nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (radix formal-const-decl "above(1)" float_ops nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Fg_bounded formula-decl nil binop_em_scheme nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Fexp const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) ^ FtoR(f2), f3)}"
     float_ops nil)
    (Fg const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(g(FtoR(f1), FtoR(f2)), f3)}"
     binop_em_scheme nil)
    (FtoR const-decl "real" float nil)
    (float type-eq-decl nil float nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (integer? const-decl "bool" integers nil))
   nil)
  (Fexp_bounded-1 nil 3669720930
   ("" (skeep)
    (("" (lemma "Fg_bounded[radix,b,trivial1,exp_pre2,^]")
      (("1" (inst -1 "f1" "f2")
        (("1" (expand "Fexp") (("1" (propax) nil)))))
       ("2" (hide 2)
        (("2" (skeep)
          (("2" (typepred "x2")
            (("2" (expand "exp_pre2") (("2" (assert) nil))))))))))))
    nil)
   nil nil))
 (Fexp_error_TCC1 0
  (Fexp_error_TCC1-1 nil 3669723413 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (exp_pre2 const-decl "bool" float_ops nil)
    (int nonempty-type-eq-decl nil integers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" float_ops nil)
    (float type-eq-decl nil float nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (integer? const-decl "bool" integers nil)
    (/= const-decl "boolean" notequal nil)
    (FtoR const-decl "real" float nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil))
   nil))
 (Fexp_error 0
  (Fexp_error-1 nil 3669723431
   ("" (skeep)
    ((""
      (use "Fg_error[radix,b,exp_pre1,exp_pre2,LAMBDA((x1|exp_pre1(x1)),(x2|exp_pre2(x1)(x2))):x1^x2]")
      (("1" (expand "Fexp")
        (("1" (assert)
          (("1" (expand "Fg") (("1" (propax) nil nil)) nil)) nil))
        nil)
       ("2" (expand "exp_pre1") (("2" (propax) nil nil)) nil)
       ("3" (hide 2)
        (("3" (skeep :preds? t) (("3" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((AND const-decl "[bool, bool -> bool]" booleans nil)
    (Fg_error formula-decl nil binop_em_scheme nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" float_ops nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (exp_pre1 const-decl "bool" float_ops nil)
    (exp_pre2 const-decl "bool" float_ops nil)
    (restrict const-decl "R" restrict nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (>= const-decl "bool" reals nil)
    (^ const-decl "real" exponentiation nil)
    (FtoR const-decl "real" float nil)
    (float type-eq-decl nil float nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Fg const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(g(FtoR(f1), FtoR(f2)), f3)}"
     binop_em_scheme nil)
    (Fexp const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) ^ FtoR(f2), f3)}"
     float_ops nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (integer? const-decl "bool" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (Fmod_TCC1 0
  (Fmod_TCC1-1 nil 3668260573 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (mod_pre2 const-decl "bool" float_ops nil)
    (int nonempty-type-eq-decl nil integers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" float_ops nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (Fsubnormal? const-decl "bool" float nil)
    (Fnormal? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (vNum const-decl "posnat" float nil)
    (/= const-decl "boolean" notequal nil)
    (FtoR const-decl "real" float nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (Fmod_TCC2 0
  (Fmod_TCC2-1 nil 3668260573 ("" (subtype-tcc) nil nil)
   ((nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (mod_pre1 const-decl "bool" float_ops nil)
    (FtoR const-decl "real" float nil))
   nil))
 (Fmod_TCC3 0
  (Fmod_TCC3-1 nil 3668260573 ("" (grind) nil nil)
   ((mod_pre1 const-decl "bool" float_ops nil)
    (/= const-decl "boolean" notequal nil)
    (mod_pre2 const-decl "bool" float_ops nil))
   nil))
 (Fmod_bounded 0
  (Fmod_bounded-1 nil 3669722117
   ("" (skeep)
    (("" (lemma "Fg_bounded[radix,b,mod_pre1,mod_pre2,mod]")
      (("1" (inst -1 "f1" "f2")
        (("1" (expand "Fmod") (("1" (propax) nil nil)) nil)
         ("2" (expand "mod_pre1") (("2" (propax) nil nil)) nil))
        nil)
       ("2" (hide 2)
        (("2" (skeep)
          (("2" (expand "mod_pre2")
            (("2" (assert)
              (("2" (expand "mod_pre1") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (mod_pre2 const-decl "bool" float_ops nil)
    (mod_pre1 const-decl "bool" float_ops nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (radix formal-const-decl "above(1)" float_ops nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Fg_bounded formula-decl nil binop_em_scheme nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (Fmod const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(mod(FtoR(f1), FtoR(f2)), f3)}"
     float_ops nil)
    (FtoR const-decl "real" float nil)
    (float type-eq-decl nil float nil))
   nil))
 (Fmod_error_TCC1 0
  (Fmod_error_TCC1-1 nil 3669723590 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (mod_pre2 const-decl "bool" float_ops nil)
    (int nonempty-type-eq-decl nil integers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" float_ops nil)
    (float type-eq-decl nil float nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil)
    (FtoR const-decl "real" float nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil))
   nil))
 (Fmod_error 0
  (Fmod_error-1 nil 3669723591
   ("" (skeep)
    (("" (use "Fg_error[radix,b,mod_pre1,mod_pre2,mod]")
      (("1" (expand "Fmod") (("1" (propax) nil nil)) nil)
       ("2" (expand "mod_pre1") (("2" (propax) nil nil)) nil)
       ("3" (hide-all-but 1)
        (("3" (expand "mod_pre1")
          (("3" (skeep*)
            (("3" (expand "mod_pre2") (("3" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((IFF const-decl "[bool, bool -> bool]" booleans nil)
    (Fg_error formula-decl nil binop_em_scheme nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" float_ops nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (mod_pre1 const-decl "bool" float_ops nil)
    (mod_pre2 const-decl "bool" float_ops nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (mod const-decl "{k | abs(k) < abs(j)}" reals_mod "reals/")
    (FtoR const-decl "real" float nil)
    (float type-eq-decl nil float nil)
    (Fmod const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(mod(FtoR(f1), FtoR(f2)), f3)}"
     float_ops nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (Fneg_bounded 0
  (Fneg_bounded-1 nil 3683490070
   ("" (skeep)
    (("" (lemma "Fg_bounded[radix,b,neg_pre,-]")
      (("" (inst -1 "f1")
        (("" (expand "Fneg") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((- const-decl "[numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (radix formal-const-decl "above(1)" float_ops nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Fg_bounded formula-decl nil unop_em_scheme nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (Fneg const-decl
     "{f2: (Fcanonic?(b)) | EvenClosest?(b)(-(FtoR(f1)), f2)}"
     float_ops nil)
    (float type-eq-decl nil float nil))
   shostak))
 (Fneg_error 0
  (Fneg_error-1 nil 3683490124
   ("" (skeep)
    (("" (lemma "Fg_error[radix,b,neg_pre,-]")
      (("" (inst -1 "f1")
        (("" (expand "Fneg") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((- const-decl "[numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (radix formal-const-decl "above(1)" float_ops nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Fg_error formula-decl nil unop_em_scheme nil)
    (Fneg const-decl
     "{f2: (Fcanonic?(b)) | EvenClosest?(b)(-(FtoR(f1)), f2)}"
     float_ops nil)
    (float type-eq-decl nil float nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (Fneg_error_ulp 0
  (Fneg_error_ulp-1 nil 3683490206
   ("" (skeep)
    (("" (lemma "closest_ulp")
      ((""
        (invoke (inst -1 "%1" "%2" "%3" "%4" "%5") (! 1 2 1 0 1)
         (! 1 1 1 1 1) (! 1 2 1 1) (! 1 2 1 0 2) (! 1 2 1 0 3))
        (("" (split -1)
          (("1" (propax) nil nil)
           ("2" (invoke (typepred "%1") (! 1 1))
            (("2" (use "FcanonicBounded") (("2" (assert) nil nil))
              nil))
            nil)
           ("3" (invoke (typepred "%1") (! 1 2))
            (("3" (expand "EvenClosest?") (("3" (flatten) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((radix formal-const-decl "above(1)" float_ops nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (closest_ulp formula-decl nil float nil)
    (FcanonicBounded formula-decl nil float nil)
    (Fneg_bounded formula-decl nil float_ops nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (float type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (EvenClosest? const-decl "bool" float nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (FtoR const-decl "real" float nil)
    (Fneg const-decl
     "{f2: (Fcanonic?(b)) | EvenClosest?(b)(-(FtoR(f1)), f2)}"
     float_ops nil)
    (Rounding type-eq-decl nil float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Closest? const-decl "bool" float nil)
    (RNDF type-eq-decl nil float nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (Ffloor_bounded 0
  (Ffloor_bounded-1 nil 3669723971
   ("" (skeep)
    (("" (lemma "Fg_bounded[radix,b,flr_pre,floor]")
      (("" (inst -1 "f1")
        (("" (expand "Ffloor") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (radix formal-const-decl "above(1)" float_ops nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Fg_bounded formula-decl nil unop_em_scheme nil)
    (Ffloor const-decl
     "{f2: (Fcanonic?(b)) | EvenClosest?(b)(floor(FtoR(f1)), f2)}"
     float_ops nil)
    (float type-eq-decl nil float nil))
   shostak))
 (Ffloor_error 0
  (Ffloor_error-1 nil 3669724064
   ("" (skeep)
    (("" (lemma "Fg_error[radix,b,flr_pre,floor]")
      (("" (inst -1 "f1")
        (("" (expand "Ffloor") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (radix formal-const-decl "above(1)" float_ops nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Fg_error formula-decl nil unop_em_scheme nil)
    (Ffloor const-decl
     "{f2: (Fcanonic?(b)) | EvenClosest?(b)(floor(FtoR(f1)), f2)}"
     float_ops nil)
    (float type-eq-decl nil float nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (Ffloor_error_ulp 0
  (Ffloor_error_ulp-1 nil 3682181140
   (""
    (then (skeep) (lemma "closest_ulp")
     (invoke (inst -1 "%1" "%2" "%3" "%4" "%5") (! 1 2 1 0 1)
      (! 1 1 1 1 1) (! 1 2 1 1) (! 1 2 1 0 2) (! 1 2 1 0 3))
     (spread (split -1)
      ((propax)
       (then (invoke (typepred "%1") (! 1 1)) (use "FcanonicBounded")
        (assert))
       (then (invoke (typepred "%1") (! 1 2)) (expand "EvenClosest?")
        (flatten)))))
    nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (RNDF type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Rounding type-eq-decl nil float nil)
    (Ffloor const-decl
     "{f2: (Fcanonic?(b)) | EvenClosest?(b)(floor(FtoR(f1)), f2)}"
     float_ops nil)
    (FtoR const-decl "real" float nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (EvenClosest? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (Fcanonic? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Ffloor_bounded formula-decl nil float_ops nil)
    (FcanonicBounded formula-decl nil float nil)
    (closest_ulp formula-decl nil float nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" float_ops nil))
   shostak))
 (Fsqrt_TCC1 0
  (Fsqrt_TCC1-1 nil 3679422302 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" float_ops nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (Fsubnormal? const-decl "bool" float nil)
    (Fnormal? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (vNum const-decl "posnat" float nil)
    (FtoR const-decl "real" float nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (Fsqrt_bounded 0
  (Fsqrt_bounded-1 nil 3679473764
   ("" (skeep)
    (("" (lemma "Fg_bounded[radix,b,sqrt_pre,sqrt]")
      (("" (inst -1 "f1")
        (("" (expand "Fsqrt") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (radix formal-const-decl "above(1)" float_ops nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Fg_bounded formula-decl nil unop_em_scheme nil)
    (Fsqrt const-decl
     "{f2: (Fcanonic?(b)) | EvenClosest?(b)(sqrt(FtoR(f1)), f2)}"
     float_ops nil)
    (float type-eq-decl nil float nil)
    (FtoR const-decl "real" float nil))
   shostak))
 (Fsqrt_error_TCC1 0
  (Fsqrt_error_TCC1-1 nil 3679422302 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" float_ops nil)
    (float type-eq-decl nil float nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (FtoR const-decl "real" float nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil))
   nil))
 (Fsqrt_error 0
  (Fsqrt_error-1 nil 3679473837
   ("" (skeep)
    (("" (lemma "Fg_error[radix,b,sqrt_pre,sqrt]")
      (("" (inst -1 "f1")
        (("" (expand "Fsqrt") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (radix formal-const-decl "above(1)" float_ops nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Fg_error formula-decl nil unop_em_scheme nil)
    (Fsqrt const-decl
     "{f2: (Fcanonic?(b)) | EvenClosest?(b)(sqrt(FtoR(f1)), f2)}"
     float_ops nil)
    (float type-eq-decl nil float nil)
    (FtoR const-decl "real" float nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (Fsqrt_error_ulp 0
  (Fsqrt_error_ulp-1 nil 3682183755
   ("" (skeep)
    (("" (lemma "closest_ulp")
      ((""
        (invoke (inst -1 "%1" "%2" "%3" "%4" "%5") (! 1 2 1 0 1)
         (! 1 1 1 1 1) (! 1 2 1 1) (! 1 2 1 0 2) (! 1 2 1 0 3))
        (("" (split -1)
          (("1" (propax) nil nil)
           ("2" (invoke (typepred "%1") (! 1 1))
            (("2" (use "FcanonicBounded") (("2" (assert) nil nil))
              nil))
            nil)
           ("3" (invoke (typepred "%1") (! 1 2))
            (("3" (expand "EvenClosest?") (("3" (flatten) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((radix formal-const-decl "above(1)" float_ops nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (closest_ulp formula-decl nil float nil)
    (FcanonicBounded formula-decl nil float nil)
    (Fsqrt_bounded formula-decl nil float_ops nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (float type-eq-decl nil float nil) (>= const-decl "bool" reals nil)
    (FtoR const-decl "real" float nil)
    (Fcanonic? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (EvenClosest? const-decl "bool" float nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (Fsqrt const-decl
     "{f2: (Fcanonic?(b)) | EvenClosest?(b)(sqrt(FtoR(f1)), f2)}"
     float_ops nil)
    (Rounding type-eq-decl nil float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Closest? const-decl "bool" float nil)
    (RNDF type-eq-decl nil float nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (Fsin_bounded 0
  (Fsin_bounded-1 nil 3679473796
   ("" (skeep)
    (("" (lemma "Fg_bounded[radix,b,sin_pre,sin]")
      (("" (inst -1 "f1")
        (("" (expand "Fsin") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((sin const-decl "real" sincos_def "trig_fnd/")
    (TRUE const-decl "bool" booleans nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (radix formal-const-decl "above(1)" float_ops nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Fg_bounded formula-decl nil unop_em_scheme nil)
    (Fsin const-decl
     "{f2: (Fcanonic?(b)) | EvenClosest?(b)(sin(FtoR(f1)), f2)}"
     float_ops nil)
    (float type-eq-decl nil float nil))
   shostak))
 (Fsin_error 0
  (Fsin_error-1 nil 3679473863
   ("" (skeep)
    (("" (lemma "Fg_error[radix,b,sin_pre,sin]")
      (("" (inst -1 "f1")
        (("" (expand "Fsin") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((sin const-decl "real" sincos_def "trig_fnd/")
    (TRUE const-decl "bool" booleans nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (radix formal-const-decl "above(1)" float_ops nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Fg_error formula-decl nil unop_em_scheme nil)
    (Fsin const-decl
     "{f2: (Fcanonic?(b)) | EvenClosest?(b)(sin(FtoR(f1)), f2)}"
     float_ops nil)
    (float type-eq-decl nil float nil)
    (sin_range application-judgement "trig_range" sincos_def
     "trig_fnd/")
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak)))

