accum_err_flr_t[
  radix : above(1),
  (IMPORTING cr_flr[radix])
  b     : Format,
  round : {round: RestrictedRounding(b,EvenClosest?) | rounded_mode?(b)(round)},
  RtoF  : CanonicRoundingFun(b,round)
]: THEORY
BEGIN
  f1 : VAR (Fbounded?(b))
  e1 : VAR nonneg_real
  r1 : VAR real

  IMPORTING reals@abs_lems,
            interval_arith@interval_mps

  flr_t_aerr_bound_pre(r1,e1): MACRO bool =
    floor(r1) = floor(r1-e1) AND
    floor(r1) = floor(r1+e1)

  flr_t_aerr_bound(r1,e1): real =
    e1

  floor_accum_err: LEMMA 
    abs(FtoR(f1)-r1) <= e1 AND
    floor(r1) = floor(r1-e1) AND
    floor(r1) = floor(r1+e1) 
    IMPLIES abs(floor(FtoR(f1))-floor(r1)) <= flr_t_aerr_bound(r1,e1)

  flr_t_ulp_bound(r1,e1): nonneg_real =
    abs(floor(r1)) + e1

  Ffloor_accum_err_bound: LEMMA
    abs(FtoR(f1)-r1) <= e1 AND
    floor(r1) = floor(r1-e1) AND
    floor(r1) = floor(r1+e1) 
    IMPLIES abs(floor(FtoR(f1))) <= flr_t_ulp_bound(r1,e1)  

  IMPORTING accum_err_op1sch[
              (Fbounded?(b)), FtoR, RtoF, ulp(b, round, RtoF),
	      LAMBDA(f1): TRUE, Ffloor(b),
	      LAMBDA(r1): TRUE, floor,
	      flr_t_aerr_bound_pre,	
	      LAMBDA(r1,(e1|flr_t_aerr_bound_pre(r1,e1))):flr_t_aerr_bound(r1,e1),
	      flr_t_aerr_bound_pre,
	      LAMBDA(r1,(e1|flr_t_aerr_bound_pre(r1,e1))):flr_t_ulp_bound(r1,e1)] AS flr_prf

  accum_err_bound: LEMMA
    abs(FtoR(f1)-r1) <= e1  AND
    floor(r1) = floor(r1-e1) AND
    floor(r1) = floor(r1+e1) 
    IMPLIES abs(FtoR(Ffloor(b)(f1)) - floor(r1))
            <= flr_t_aerr_bound(r1,e1)
	       + ulp(b, round, RtoF)(flr_t_ulp_bound(r1,e1)) / 2    

END accum_err_flr_t
