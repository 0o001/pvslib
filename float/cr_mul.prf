(cr_mul
 (Fmul_bounded 0
  (Fmul_bounded-1 nil 3669720582
   ("" (skeep)
    (("" (lemma "Fg_bounded[radix,b,trivial1,trivial2,*]")
      (("" (inst -1 "f1" "f2")
        (("" (expand "Fmul") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (radix formal-const-decl "above(1)" cr_mul nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Fg_bounded formula-decl nil binop_em_scheme nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (Fmul const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) * FtoR(f2), f3)}"
     cr_mul nil)
    (float type-eq-decl nil float nil))
   nil))
 (Fmul_error 0
  (Fmul_error-1 nil 3669723123
   ("" (skeep)
    (("" (use "ClosestUlp")
      (("" (split -1)
        (("1" (propax) nil nil)
         ("2" (hide 2)
          (("2" (invoke (typepred "%1") (! 1 2))
            (("2" (expand "EvenClosest?") (("2" (flatten) nil nil))
              nil))
            nil))
          nil)
         ("3" (assert) nil nil))
        nil))
      nil))
    nil)
   ((ClosestUlp formula-decl nil float nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" cr_mul nil)
    (Fmul const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) * FtoR(f2), f3)}"
     cr_mul nil)
    (FtoR const-decl "real" float nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (EvenClosest? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (Fcanonic? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Fmul_bounded formula-decl nil cr_mul nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (Fmul_error_ulp 0
  (Fmul_error_ulp-1 nil 3682174813
   (""
    (then (skeep) (lemma "closest_ulp")
     (invoke (inst -1 "%1" "%2" "%3" "%4" "%5") (! 1 2 1 0 1)
      (! 1 1 1 1 1) (! 1 2 1 1) (! 1 2 1 0 2) (! 1 2 1 0 3))
     (spread (split -1)
      ((propax)
       (then (invoke (typepred "%1") (! 1 1)) (use "FcanonicBounded")
        (assert))
       (then (invoke (typepred "%1") (! 1 2)) (expand "EvenClosest?")
        (flatten)))))
    nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (RNDF type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Rounding type-eq-decl nil float nil)
    (Fmul const-decl
     "{f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1) * FtoR(f2), f3)}"
     cr_mul nil)
    (FtoR const-decl "real" float nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (EvenClosest? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (Fcanonic? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (Format type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Fmul_bounded formula-decl nil cr_mul nil)
    (FcanonicBounded formula-decl nil float nil)
    (closest_ulp formula-decl nil float nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" cr_mul nil))
   shostak)))

