%
% This theory defines the binary format binary32.
% 
ieee754_single : THEORY
BEGIN

  IMPORTING ieee754_top[2,24,127]

  binary32 : TYPE = ieee754_data.datum
  single   : TYPE = binary32

  x,y: VAR binary32

  % special values

  pInf_single  : binary32
  nInf_single  : binary32
  pZero_single : binary32
  nZero_single : binary32

  NaN?_single    : [ binary32 -> bool ]
  finite?_single : [ binary32 -> bool ]

  % operations

  add_single(x,y: binary32): binary32
  sub_single(x,y: binary32): binary32
  mul_single(x,y: binary32): binary32
  div_single(x,y: binary32): binary32
  min_single(x,y: binary32): binary32
  max_single(x,y: binary32): binary32
  abs_single(x: binary32)  : binary32
  sqrt_single(x: binary32) : binary32

  ;< (x,y: binary32): bool
  ;<=(x,y: binary32): bool
  ;> (x,y: binary32): bool
  ;>=(x,y: binary32): bool
  ;= (x,y: binary32): bool
  qun(x,y: binary32): bool

  % conversions

  proj_single  : [ (finite?_single) -> real ]
  round_single : [   real   ->   binary32   ]

  % definitions

  pInf_def: AXIOM pInf_single = pInf
  nInf_def: AXIOM nInf_single = nInf
  pZero_def: AXIOM pZero_single = pZero
  nZero_def: AXIOM nZero_single = nZero
  
  NaN?_def: AXIOM NaN?_single(x) = NaN?(x)
  finite?_def: AXIOM finite?_single(x) = finite?(x)

  add_def: AXIOM add_single(x,y) = add_ieee754(x,y)
  sub_def: AXIOM sub_single(x,y) = sub_ieee754(x,y)
  mul_def: AXIOM mul_single(x,y) = mul_ieee754(x,y)
  div_def: AXIOM div_single(x,y) = div_ieee754(x,y)
  min_def: AXIOM min_single(x,y) = min_ieee754(x,y)
  max_def: AXIOM max_single(x,y) = max_ieee754(x,y)
  abs_def: AXIOM abs_single(x)   = abs_ieee754(x)
  sqrt_def: AXIOM sqrt_single(x) = sqt_ieee754(x)

  qlt_def: AXIOM x <  y   = qlt_ieee754(x,y)
  qle_def: AXIOM x <= y   = qle_ieee754(x,y)
  qgt_def: AXIOM x >  y   = qgt_ieee754(x,y)
  qge_def: AXIOM x >= y   = qge_ieee754(x,y)
  qeq_def: AXIOM (x = y)  = qeq_ieee754(x,y)
  qun_def: AXIOM qun(x,y) = qun_ieee754(x,y)

  proj_def: AXIOM FORALL(x: (finite?_single)): proj_single(x) = proj(x)
  round_def: AXIOM FORALL(r: real): round_single(r) = round(r)

  % additional operators

  neg_single(x: binary32): MACRO binary32 = sub_single(pZero_single, x)

  ulp_single(r: er_real): real = ulp(r)

END ieee754_single
