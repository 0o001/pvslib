%
% IEEE 754 instantiations of the high level specification.
%
float_IEEE_754: THEORY
BEGIN

  IMPORTING float_ops[2]

  x,x1,x2: VAR real

  single_precision_format: Format = (# Prec := 24, dExp := 149 #)

  % single precision numbers 
  unb_single: TYPE = (Fcanonic?(single_precision_format))

  f,f1,f2: VAR unb_single
  
  Sulp(f1): posreal = Fulp(single_precision_format)(f1)

  closest_single?(x1)(f1): bool = EvenClosest?(single_precision_format)(x1,f1)

  % real to single-precision conversion.
  RtoS(x1): (closest_single?(x1)) =
    RND_EClosest(single_precision_format)(x1)

  StoR(f1): real = FtoR(f1)
  CONVERSION StoR

  StoR_round: LEMMA
    abs(StoR(RtoS(x1)) - x1) <= Sulp(RtoS(x1)) / 2
  AUTO_REWRITE+ StoR_round

  StoR_RtoS: LEMMA
   EXISTS(e1: real):
    - Sulp(RtoS(x1)) / 2 <= e1 AND
    e1 <= Sulp(RtoS(x1)) / 2 AND
    StoR(RtoS(x1)) = x1 + e1

  % StoR conversion is an increasing function.
  StoR_inc: LEMMA
    f1 <= f2 IMPLIES StoR(f1) <= StoR(f2)

  % RtoS conversion is an increasing function.
  RtoS_inc: LEMMA
    x1 <= x2 IMPLIES RtoS(x1) <= RtoS(x2)

  % ULP definition for single precision numbers.
  Sulp_def: LEMMA
    Sulp(f1) = 2^Fexp(f1)

  RtoS_opp: LEMMA
    RtoS(-x) = Fopp(RtoS(x))

  % Correctly rounded functions

  %   Addition

  Fadd(f1,f2):(closest_single?(FtoR(f1)+FtoR(f2))) =
    Fadd(single_precision_format)(f1,f2)

  Fadd_correctly_rounded: LEMMA
    Fadd(f1,f2) = RtoS(StoR(f1) + StoR(f2))

  %   Subtraction

  Fsub(f1,f2):(closest_single?(FtoR(f1)-FtoR(f2))) =
    Fsub(single_precision_format)(f1,f2)
    
  Fsub_correctly_rounded: LEMMA
    Fsub(f1,f2) = RtoS(StoR(f1) - StoR(f2))
    
  %   Multiplication

  Fmul(f1,f2):(closest_single?(FtoR(f1)*FtoR(f2))) =
    Fmul(single_precision_format)(f1,f2)
    
  Fmul_correctly_rounded: LEMMA
    Fmul(f1,f2) = RtoS(StoR(f1) * StoR(f2))
    
  %   Division

  Fdiv(f1,(f2|div_pre2(FtoR(f1))(FtoR(f2))))
                                         :(closest_single?(FtoR(f1)/FtoR(f2))) =
    Fdiv(single_precision_format)(f1,f2)

  Fdiv_correctly_rounded: LEMMA
   FORALL (f2|div_pre2(FtoR(f1))(FtoR(f2))):
    Fdiv(f1,f2) = RtoS(StoR(f1) / StoR(f2))

  Fmod(f1,(f2|mod_pre2(FtoR(f1))(FtoR(f2)))):
                                     (closest_single?(mod(FtoR(f1),FtoR(f2)))) =
    Fmod(single_precision_format)(f1,f2)

  %   Floor

  Ffloor(f1):(closest_single?(floor(FtoR(f1)))) =
    Ffloor(single_precision_format)(f1)

  Ffloor_correctly_rounded: LEMMA
    Ffloor(f1) = RtoS(floor(StoR(f1)))

    
  %
  % Double precision
  %
  
  double_precision_format: Format = (# Prec := 53, dExp := 1074 #)

  double: TYPE = (Fcanonic?(double_precision_format))

  d1,d2: VAR double

  closest_double?(x1)(d1): bool = EvenClosest?(double_precision_format)(x1,d1)

  % real to double-precision conversion.
  RtoD(x1): (closest_double?(x1)) =
    RND_EClosest(double_precision_format)(x1)

  DtoR(d1): real = FtoR(d1)
  
  % Correctly rounded functions

  DPadd(d1,d2):(closest_double?(FtoR(d1)+FtoR(d2))) =
    Fadd(double_precision_format)(d1,d2)

  DPsub(d1,d2):(closest_double?(FtoR(d1)-FtoR(d2))) =
    Fsub(double_precision_format)(d1,d2)
    
  DPmul(d1,d2):(closest_double?(FtoR(d1)*FtoR(d2))) =
    Fmul(double_precision_format)(d1,d2)
    
  DPdiv(d1,(d2|div_pre2(FtoR(d1))(FtoR(d2))))
                                         :(closest_double?(FtoR(d1)/FtoR(d2))) =
    Fdiv(double_precision_format)(d1,d2)

  DPexp(d1,(d2|exp_pre2(FtoR(d1))(FtoR(d2)))):
                                          (closest_double?(FtoR(d1)^FtoR(d2))) =
    Fexp(double_precision_format)(d1,d2)

  DPmod(d1,(d2|mod_pre2(FtoR(d1))(FtoR(d2)))):
                                     (closest_double?(mod(FtoR(d1),FtoR(d2)))) =
    Fmod(double_precision_format)(d1,d2)

  DPfloor(d1):(closest_double?(floor(FtoR(d1)))) =
    Ffloor(double_precision_format)(d1)

END float_IEEE_754
