(ieee754sp_sqt
 (IMP_cr_sqt_TCC1 0
  (IMP_cr_sqt_TCC1-1 nil 3685103346 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (Ssqrt_TCC1 0
  (Ssqrt_TCC1-1 nil 3679331159 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (Fsubnormal? const-decl "bool" float nil)
    (Fnormal? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (vNum const-decl "posnat" float nil)
    (^ const-decl "real" exponentiation nil)
    (FtoR const-decl "real" float nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (Ssqrt_TCC2 0
  (Ssqrt_TCC2-2 nil 3682436876
   ("" (skeep*)
    (("" (invoke (typepred "%1") (! 1 1))
      (("" (expand* "closest_single?" "closest_double?" "sp_closest?")
        nil nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil) (FtoR const-decl "real" float nil)
    (Fbounded? const-decl "bool" float nil)
    (EvenClosest? const-decl "bool" float nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt "reals/")
    (Fsqrt const-decl
     "{f2: (Fcanonic?(b)) | EvenClosest?(b)(sqrt(FtoR(f1)), f2)}"
     cr_sqt nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (sp_closest? const-decl "bool" ieee754sp nil)
    (closest_single? const-decl "bool" ieee754sp nil))
   nil)
  (Ssqrt_TCC2-1 nil 3682435648 ("" (subtype-tcc) nil nil) nil nil))
 (Ssqrt_correctly_rounded_TCC1 0
  (Ssqrt_correctly_rounded_TCC1-1 nil 3679331159
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (single_precision_format const-decl "Format" ieee754sp nil)
    (unb_single type-eq-decl nil ieee754sp nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (Fsubnormal? const-decl "bool" float nil)
    (Fnormal? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (vNum const-decl "posnat" float nil)
    (^ const-decl "real" exponentiation nil)
    (StoR const-decl "real" ieee754sp nil)
    (FtoR const-decl "real" float nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   shostak))
 (Ssqrt_correctly_rounded 0
  (Ssqrt_correctly_rounded-1 nil 3679394484
   ("" (skeep)
    (("" (invoke (expand "%1") (? 1 "%1(%0) ="))
      (("" (invoke (expand "%1") (? 1 "%1(%0)(%0) ="))
        (("" (expand "Fg")
          (("" (expand "RtoS")
            (("" (expand "StoR") (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((Ssqrt const-decl
     "{f: unb_single | closest_single?(sqrt(FtoR(f1)))(f)}"
     ieee754sp_sqt nil)
    (Fg const-decl
     "{f2: (Fcanonic?(b)) | EvenClosest?(b)(g(FtoR(f1)), f2)}"
     unop_em_scheme nil)
    (StoR const-decl "real" ieee754sp nil)
    (RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}"
     ieee754sp nil)
    (Fsqrt const-decl
     "{f2: (Fcanonic?(b)) | EvenClosest?(b)(sqrt(FtoR(f1)), f2)}"
     cr_sqt nil))
   shostak)))

