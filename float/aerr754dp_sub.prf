(aerr754dp_sub
 (IMP_accum_err_sub_TCC1 0
  (IMP_accum_err_sub_TCC1-2 nil 3682174086 ("" (assert) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil)
  (IMP_accum_err_sub_TCC1-1 nil 3682019787 ("" (subtype-tcc) nil nil)
   nil nil))
 (Dsub_aerr 0
  (Dsub_aerr-2 nil 3682252068
   ("" (expand " aebounddp_sub")
    (("" (skeep)
      (("" (lemma "accum_err_bound")
        (("" (expand "DtoR")
          (("" (expand "Dsub" 1)
            (("" (expand "ulp_dp")
              (("" (inst?)
                (("" (inst?)
                  (("" (split -1)
                    (("1" (assert) nil nil) ("2" (propax) nil nil)
                     ("3" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (DtoR const-decl "real" ieee754dp nil)
    (ulp_dp const-decl "nonneg_real" ieee754dp nil)
    (rtos_canonic_rounding_fun_j name-judgement
     "CanonicRoundingFun[2](double_precision_format, dp_closest?)"
     ieee754dp nil)
    (dp_closest?_j name-judgement
     "{round: RestrictedRounding[2](double_precision_format, EvenClosest?) |
         rounded_mode?(double_precision_format)(round)}" ieee754dp nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (Dsub const-decl
     "{f: unb_double | closest_double?(FtoR(f1) - FtoR(f2))(f)}"
     ieee754dp_sub nil)
    (accum_err_bound formula-decl nil accum_err_sub nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fbounded? const-decl "bool" float nil)
    (dp_closest? const-decl "bool" ieee754dp nil)
    (Fcanonic? const-decl "bool" float nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (closest_double? const-decl "bool" ieee754dp nil)
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp nil)
    (aebounddp_sub const-decl "nonneg_real" aerr754dp_sub nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil)
  (Dsub_aerr-1 nil 3682019964
   ("" (skeep)
    (("" (lemma "accum_err_bound")
      (("" (expand "DtoR")
        (("" (expand "Dsub" 1)
          (("" (expand "ulp_dp")
            (("" (inst?)
              (("" (inst?)
                (("" (split -1)
                  (("1" (assert) nil nil) ("2" (propax) nil nil)
                   ("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp nil)
    (closest_double? const-decl "bool" ieee754dp nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (Fcanonic? const-decl "bool" float nil)
    (dp_closest? const-decl "bool" ieee754dp nil)
    (Fbounded? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (Format type-eq-decl nil float nil)
    (accum_err_bound formula-decl nil accum_err_sub nil)
    (dp_closest?_j name-judgement
     "{round: RestrictedRounding[2](double_precision_format, EvenClosest?) |
         rounded_mode?(double_precision_format)(round)}" ieee754dp nil)
    (ulp_dp const-decl "nonneg_real" ieee754dp nil)
    (DtoR const-decl "real" ieee754dp nil))
   shostak)))

