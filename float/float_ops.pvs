%
% Definition of (correctly rounded) operations. An operation is said to be "cor-
% rectly rounded" when it is computed exactly and then rounded to the nearest
% floating-point number.
%
float_ops[radix:above(1)]: THEORY
BEGIN

  IMPORTING float[radix],
  	    binop_em_scheme,
	    unop_em_scheme,
	    reals@reals_mod

  b:        VAR Format
  f1,f2:    VAR float
  x1,x2,x3: VAR real

  trivial1(x1):     MACRO bool = TRUE    
  trivial2(x1)(x2): MACRO bool = TRUE    

  % Addition ----------------------------------------------------------------- %

  Fadd(b)(f1,f2): {f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1)+FtoR(f2),f3)} =
    Fg[radix,b,trivial1,trivial2,+](f1,f2)

  Fadd_bounded: LEMMA Fbounded?(b)(Fadd(b)(f1,f2))
  AUTO_REWRITE+ Fadd_bounded

  Fadd_error: LEMMA 
    abs(FtoR(Fadd(b)(f1,f2)) - (FtoR(f1)+FtoR(f2))) <= Fulp(b)(Fadd(b)(f1,f2))/2

  Fadd_error_ulp: LEMMA 
   FORALL(round: Rounding(b) | FORALL(f:(Fbounded?(b)),x:real):
                                            round(x,f) IMPLIES Closest?(b)(x,f),
          RtoF : RNDF(b,round)):
    abs(FtoR(Fadd(b)(f1,f2)) - (FtoR(f1)+FtoR(f2)))
    <= ulp(b,round,RtoF)(FtoR(f1)+FtoR(f2))/2

%|- F*_error_ulp : PROOF
%|- (then (skeep) (lemma "closest_ulp")
%|-  (invoke (inst -1 "%1" "%2" "%3" "%4" "%5") (! 1 2 1 0 1) (! 1 1 1 1 1)
%|-   (! 1 2 1 1) (! 1 2 1 0 2) (! 1 2 1 0 3))
%|-  (spread (split -1)
%|-   ((propax)
%|-    (then (invoke (typepred "%1") (! 1 1)) (use "FcanonicBounded")
%|-     (assert))
%|-    (then (invoke (typepred "%1") (! 1 2)) (expand "EvenClosest?")
%|-     (flatten)))))
%|- QED

  % Substraction ------------------------------------------------------------- %

  Fsub(b)(f1,f2): {f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1)-FtoR(f2),f3)} =
    Fg[radix,b,trivial1,trivial2,-](f1,f2)

  Fsub_bounded: LEMMA Fbounded?(b)(Fsub(b)(f1,f2))
  AUTO_REWRITE+ Fsub_bounded

  Fsub_error: LEMMA 
    abs(FtoR(Fsub(b)(f1,f2)) - (FtoR(f1)-FtoR(f2))) <= Fulp(b)(Fsub(b)(f1,f2))/2
    
  Fsub_error_ulp: LEMMA 
   FORALL(round: Rounding(b) | FORALL(f:(Fbounded?(b)),x:real):
                                            round(x,f) IMPLIES Closest?(b)(x,f),
          RtoF : RNDF(b,round)):
    abs(FtoR(Fsub(b)(f1,f2)) - (FtoR(f1)-FtoR(f2)))
    <= ulp(b,round,RtoF)(FtoR(f1)-FtoR(f2))/2
    
  % Multiplication ----------------------------------------------------------- %

  Fmul(b)(f1,f2): {f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1)*FtoR(f2),f3)} =
    Fg[radix,b,trivial1,trivial2,*](f1,f2)

  Fmul_bounded: LEMMA Fbounded?(b)(Fmul(b)(f1,f2))
  AUTO_REWRITE+ Fmul_bounded
  
  Fmul_error: LEMMA 
    abs(FtoR(Fmul(b)(f1,f2)) - (FtoR(f1)*FtoR(f2))) <= Fulp(b)(Fmul(b)(f1,f2))/2
    
  Fmul_error_ulp: LEMMA 
   FORALL(round: Rounding(b) | FORALL(f:(Fbounded?(b)),x:real):
                                            round(x,f) IMPLIES Closest?(b)(x,f),
          RtoF : RNDF(b,round)):
    abs(FtoR(Fmul(b)(f1,f2)) - (FtoR(f1)*FtoR(f2)))
    <= ulp(b,round,RtoF)(FtoR(f1)*FtoR(f2))/2
    
  % Division ----------------------------------------------------------------- %

  div_pre2(x1)(x2):bool = x2/=0

  Fdiv(b)(f1,(f2|div_pre2(FtoR(f1))(FtoR(f2)))):{ f3:(Fcanonic?(b))|
			     EvenClosest?(b)(FtoR(f1)/FtoR(f2),f3) } = 
    Fg[radix,b,trivial1,div_pre2,LAMBDA(x1,(x2|div_pre2(x1)(x2))):x1/x2](f1,f2)

  Fdiv_bounded: LEMMA
   FORALL(f2|div_pre2(FtoR(f1))(FtoR(f2))):
    Fbounded?(b)(Fdiv(b)(f1,f2))
  AUTO_REWRITE+ Fdiv_bounded
  
  Fdiv_error: LEMMA 
   FORALL(f2|div_pre2(FtoR(f1))(FtoR(f2))):
    abs(FtoR(Fdiv(b)(f1,f2)) - (FtoR(f1)/FtoR(f2))) <= Fulp(b)(Fdiv(b)(f1,f2))/2
    
  Fdiv_error_ulp: CONJECTURE
   FORALL(round: Rounding(b) | FORALL(f:(Fbounded?(b)),x:real):
                                            round(x,f) IMPLIES Closest?(b)(x,f),
          RtoF : RNDF(b,round),
	  f1,(f2|div_pre2(FtoR(f1))(FtoR(f2)))):
    abs(FtoR(Fdiv(b)(f1,f2)) - (FtoR(f1)/FtoR(f2)))
    <= ulp(b,round,RtoF)(FtoR(f1)/FtoR(f2))/2
    
  % Exponentiation ----------------------------------------------------------- %

  exp_pre1(x1) : bool = TRUE
  exp_pre2(x1)(x2): bool = integer?(x2) AND (x1/=0 OR x2>=0)
  
  Fexp(b)(f1,(f2|exp_pre2(FtoR(f1))(FtoR(f2)))): {f3: (Fcanonic?(b)) |
  				        EvenClosest?(b)(FtoR(f1)^FtoR(f2),f3)} =
    Fg[radix,b,exp_pre1,exp_pre2,^](f1,f2)

  Fexp_bounded: LEMMA
   FORALL(f2|exp_pre2(FtoR(f1))(FtoR(f2))):
    Fbounded?(b)(Fexp(b)(f1,f2))
  AUTO_REWRITE+ Fexp_bounded
  
  Fexp_error: LEMMA 
   FORALL(f2|exp_pre2(FtoR(f1))(FtoR(f2))):
    abs(FtoR(Fexp(b)(f1,f2)) - (FtoR(f1)^FtoR(f2))) <= Fulp(b)(Fexp(b)(f1,f2))/2
    
  % Modulo operation --------------------------------------------------------- %

  mod_pre1(x1) : bool = TRUE
  mod_pre2(x1)(x2): bool = x2/=0

  Fmod(b)(f1,(f2|mod_pre2(FtoR(f1))(FtoR(f2)))): {f3: (Fcanonic?(b)) |
  				   EvenClosest?(b)(mod(FtoR(f1),FtoR(f2)),f3)} =
    Fg[radix,b,mod_pre1,mod_pre2,mod](f1,f2)
  
  Fmod_bounded: LEMMA
   FORALL(f2|mod_pre2(FtoR(f1))(FtoR(f2))):
    Fbounded?(b)(Fmod(b)(f1,f2))
  AUTO_REWRITE+ Fmod_bounded

  Fmod_error: LEMMA 
   FORALL(f2|mod_pre2(FtoR(f1))(FtoR(f2))):
    abs(FtoR(Fmod(b)(f1,f2))-(mod(FtoR(f1),FtoR(f2))))<=Fulp(b)(Fmod(b)(f1,f2))/2
    
  % Neg ---------------------------------------------------------------------- %

  neg_pre(x1):MACRO bool = TRUE

  Fneg(b)(f1): {f2: (Fcanonic?(b)) | EvenClosest?(b)(-(FtoR(f1)),f2) } =
    Fg[radix,b,neg_pre,-](f1)
    
  Fneg_bounded: LEMMA
    Fbounded?(b)(Fneg(b)(f1))
  AUTO_REWRITE+ Fneg_bounded

  Fneg_error: LEMMA 
    abs(FtoR(Fneg(b)(f1))-(-(FtoR(f1))))<=Fulp(b)(Fneg(b)(f1))/2
    
  Fneg_error_ulp: CONJECTURE 
   FORALL(round: Rounding(b) | FORALL(f:(Fbounded?(b)),x:real):
                                            round(x,f) IMPLIES Closest?(b)(x,f),
          RtoF : RNDF(b,round)):
    abs(FtoR(Fneg(b)(f1)) - -FtoR(f1)) <= ulp(b,round,RtoF)(-(FtoR(f1)))/2

  % Floor -------------------------------------------------------------------- %

  flr_pre(x1):MACRO bool = TRUE

  Ffloor(b)(f1): {f2: (Fcanonic?(b)) | EvenClosest?(b)(floor(FtoR(f1)),f2) } =
    Fg[radix,b,flr_pre,floor](f1)
    
  Ffloor_bounded: LEMMA
    Fbounded?(b)(Ffloor(b)(f1))
  AUTO_REWRITE+ Ffloor_bounded

  Ffloor_error: LEMMA 
    abs(FtoR(Ffloor(b)(f1))-(floor(FtoR(f1))))<=Fulp(b)(Ffloor(b)(f1))/2
    
  Ffloor_error_ulp: LEMMA 
   FORALL(round: Rounding(b) | FORALL(f:(Fbounded?(b)),x:real):
                                            round(x,f) IMPLIES Closest?(b)(x,f),
          RtoF : RNDF(b,round)):
    abs(FtoR(Ffloor(b)(f1)) - floor(FtoR(f1)))
    <= ulp(b,round,RtoF)(floor(FtoR(f1)))/2

  % Sqrt -------------------------------------------------------------------- %

  IMPORTING reals@sqrt

  sqrt_pre(x1):MACRO bool = x1 >= 0

  Fsqrt(b)((f1|sqrt_pre(FtoR(f1)))): {f2: (Fcanonic?(b)) | EvenClosest?(b)(sqrt(FtoR(f1)),f2) } =
    Fg[radix,b,sqrt_pre,sqrt](f1)
    
  Fsqrt_bounded: LEMMA
   FORALL(f1|sqrt_pre(FtoR(f1))):
    Fbounded?(b)(Fsqrt(b)(f1))
  AUTO_REWRITE+ Fsqrt_bounded

  Fsqrt_error: LEMMA
   FORALL(f1|sqrt_pre(FtoR(f1))):
    abs(FtoR(Fsqrt(b)(f1))-(sqrt(FtoR(f1))))<=Fulp(b)(Fsqrt(b)(f1))/2

  Fsqrt_error_ulp: LEMMA 
   FORALL(round: Rounding(b) | FORALL(f:(Fbounded?(b)),x:real):
                                            round(x,f) IMPLIES Closest?(b)(x,f),
          RtoF : RNDF(b,round),
	  f1|sqrt_pre(FtoR(f1))):
    abs(FtoR(Fsqrt(b)(f1)) - sqrt(FtoR(f1)))
    <= ulp(b,round,RtoF)(sqrt(FtoR(f1)))/2
    
  % Trigonometric functions ------------------------------------------------ %

  IMPORTING trig_fnd@trig_basic

  sin_pre(x1):MACRO bool = TRUE
  
  Fsin(b)(f1): {f2: (Fcanonic?(b)) | EvenClosest?(b)(sin(FtoR(f1)),f2) } =
    Fg[radix,b,sin_pre,sin](f1)
    
  Fsin_bounded: LEMMA
    Fbounded?(b)(Fsin(b)(f1))
  AUTO_REWRITE+ Fsin_bounded

  Fsin_error: LEMMA
    abs(FtoR(Fsin(b)(f1))-(sin(FtoR(f1))))<=Fulp(b)(Fsin(b)(f1))/2
    
END float_ops
