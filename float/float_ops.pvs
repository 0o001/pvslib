%
% Definition of (correctly rounded) operations. An operation is said to be "cor-
% rectly rounded" when it is computed exactly and then rounded to the nearest
% floating-point number.
%
float_ops[radix:above(1)]: THEORY
BEGIN

  IMPORTING float[radix],
  	    binop_em_scheme,
	    unop_em_scheme,
	    reals@reals_mod,
	    interval_arith@interval

  b:        VAR Format
  f1,f2:    VAR float
  x1,x2,x3: VAR real

  trivial1(x1):     MACRO bool = TRUE    
  trivial2(x1)(x2): MACRO bool = TRUE    

  % Addition ----------------------------------------------------------------- %

  Fadd(b)(f1,f2): {f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1)+FtoR(f2),f3)} =
    Fg[radix,b,trivial1,trivial2,+](f1,f2)

  Fadd_bounded: LEMMA Fbounded?(b)(Fadd(b)(f1,f2))
  AUTO_REWRITE+ Fadd_bounded

  Fadd_error: LEMMA 
    abs(FtoR(Fadd(b)(f1,f2)) - (FtoR(f1)+FtoR(f2))) <= Fulp(b)(Fadd(b)(f1,f2))/2

  % Substraction ------------------------------------------------------------- %

  Fsub(b)(f1,f2): {f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1)-FtoR(f2),f3)} =
    Fg[radix,b,trivial1,trivial2,-](f1,f2)

  Fsub_bounded: LEMMA Fbounded?(b)(Fsub(b)(f1,f2))
  AUTO_REWRITE+ Fsub_bounded

  Fsub_error: LEMMA 
    abs(FtoR(Fsub(b)(f1,f2)) - (FtoR(f1)-FtoR(f2))) <= Fulp(b)(Fsub(b)(f1,f2))/2
    
  % Multiplication ----------------------------------------------------------- %

  Fmul(b)(f1,f2): {f3: (Fcanonic?(b)) | EvenClosest?(b)(FtoR(f1)*FtoR(f2),f3)} =
    Fg[radix,b,trivial1,trivial2,*](f1,f2)

  Fmul_bounded: LEMMA Fbounded?(b)(Fmul(b)(f1,f2))
  AUTO_REWRITE+ Fmul_bounded
  
  Fmul_error: LEMMA 
    abs(FtoR(Fmul(b)(f1,f2)) - (FtoR(f1)*FtoR(f2))) <= Fulp(b)(Fmul(b)(f1,f2))/2
    
  % Division ----------------------------------------------------------------- %

  div_pre2(x1)(x2):bool = x2/=0

  Fdiv(b)(f1,(f2|div_pre2(FtoR(f1))(FtoR(f2)))):{ f3:(Fcanonic?(b))|
			     EvenClosest?(b)(FtoR(f1)/FtoR(f2),f3) } = 
    Fg[radix,b,trivial1,div_pre2,LAMBDA(x1,(x2|div_pre2(x1)(x2))):x1/x2](f1,f2)

  Fdiv_bounded: LEMMA
   FORALL(f2|div_pre2(FtoR(f1))(FtoR(f2))):
    Fbounded?(b)(Fdiv(b)(f1,f2))
  AUTO_REWRITE+ Fdiv_bounded
  
  Fdiv_error: LEMMA 
   FORALL(f2|div_pre2(FtoR(f1))(FtoR(f2))):
    abs(FtoR(Fdiv(b)(f1,f2)) - (FtoR(f1)/FtoR(f2))) <= Fulp(b)(Fdiv(b)(f1,f2))/2
    
  % Exponentiation ----------------------------------------------------------- %

  exp_pre1(x1) : bool = TRUE
  exp_pre2(x1)(x2): bool = integer?(x2) AND (x1/=0 OR x2>=0)
  
  Fexp(b)(f1,(f2|exp_pre2(FtoR(f1))(FtoR(f2)))): {f3: (Fcanonic?(b)) |
  				        EvenClosest?(b)(FtoR(f1)^FtoR(f2),f3)} =
    Fg[radix,b,exp_pre1,exp_pre2,^](f1,f2)

  Fexp_bounded: LEMMA
   FORALL(f2|exp_pre2(FtoR(f1))(FtoR(f2))):
    Fbounded?(b)(Fexp(b)(f1,f2))
  AUTO_REWRITE+ Fexp_bounded
  
  Fexp_error: LEMMA 
   FORALL(f2|exp_pre2(FtoR(f1))(FtoR(f2))):
    abs(FtoR(Fexp(b)(f1,f2)) - (FtoR(f1)^FtoR(f2))) <= Fulp(b)(Fexp(b)(f1,f2))/2
    
  % Modulo operation --------------------------------------------------------- %

  mod_pre1(x1) : bool = TRUE
  mod_pre2(x1)(x2): bool = x2/=0

  Fmod(b)(f1,(f2|mod_pre2(FtoR(f1))(FtoR(f2)))): {f3: (Fcanonic?(b)) |
  				   EvenClosest?(b)(mod(FtoR(f1),FtoR(f2)),f3)} =
    Fg[radix,b,mod_pre1,mod_pre2,mod](f1,f2)
  
  Fmod_bounded: LEMMA
   FORALL(f2|mod_pre2(FtoR(f1))(FtoR(f2))):
    Fbounded?(b)(Fmod(b)(f1,f2))
  AUTO_REWRITE+ Fmod_bounded

  Fmod_error: LEMMA 
   FORALL(f2|mod_pre2(FtoR(f1))(FtoR(f2))):
    abs(FtoR(Fmod(b)(f1,f2))-(mod(FtoR(f1),FtoR(f2))))<=Fulp(b)(Fmod(b)(f1,f2))/2
    
  % Floor -------------------------------------------------------------------- %

  flr_pre(x1):MACRO bool = TRUE

  Ffloor(b)(f1): {f2: (Fcanonic?(b)) | EvenClosest?(b)(floor(FtoR(f1)),f2) } =
    Fg[radix,b,flr_pre,floor](f1)
    
  Ffloor_bounded: LEMMA
    Fbounded?(b)(Ffloor(b)(f1))
  AUTO_REWRITE+ Ffloor_bounded

  Ffloor_error: LEMMA 
    abs(FtoR(Ffloor(b)(f1))-(floor(FtoR(f1))))<=Fulp(b)(Ffloor(b)(f1))/2

END float_ops
