(ieee754dp
 (IMP_float_TCC1 0
  (IMP_float_TCC1-1 nil 3685102973 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (Dulp_TCC1 0
  (Dulp_TCC1-1 nil 3690117572 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (Fsubnormal? const-decl "bool" float nil)
    (Fnormal? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (vNum const-decl "posnat" float nil)
    (^ const-decl "real" exponentiation nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (Fulp const-decl "real" float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   nil))
 (dp_closest?_j 0
  (dp_closest?_j-1 nil 3682006290
   ("" (split 1)
    (("1" (skeep)
      (("1" (expand "dp_closest?") (("1" (propax) nil nil)) nil)) nil)
     ("2" (expand "dp_closest?")
      (("2" (use "EvenClosest_rounded_mode")
        (("2"
          (case "EvenClosest?(double_precision_format) = LAMBDA (x1, (f1: (Fbounded?(double_precision_format)))):
               EvenClosest?(double_precision_format)(x1, f1)")
          (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((EvenClosest? const-decl "bool" float nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Fbounded? const-decl "bool" float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (EvenClosest_rounded_mode formula-decl nil float nil)
    (dp_closest? const-decl "bool" ieee754dp nil))
   shostak))
 (RtoD_TCC1 0
  (RtoD_TCC1-1 nil 3667932138
   ("" (skeep)
    (("" (use "RND_EClosest_isEclosest")
      (("" (expand "closest_double?")
        (("" (expand "dp_closest?") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((RND_EClosest_isEclosest formula-decl nil float nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (dp_closest? const-decl "bool" ieee754dp nil)
    (closest_double? const-decl "bool" ieee754dp nil))
   shostak))
 (rtos_canonic_rounding_fun_j 0
  (rtos_canonic_rounding_fun_j-1 nil 3682263783
   ("" (split 1)
    (("1" (skeep)
      (("1" (typepred "RtoD(x)")
        (("1" (expand "closest_double?") (("1" (propax) nil nil)) nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (typepred "RtoD(x)") (("2" (propax) nil nil)) nil)) nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (Fbounded? const-decl "bool" float nil)
    (closest_double? const-decl "bool" ieee754dp nil)
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp nil))
   nil))
 (noteq_rew_rl1 0
  (noteq_rew_rl1-1 nil 3683491511 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (expt def-decl "real" exponentiation nil)
    (vNum const-decl "posnat" float nil)
    (Fbounded? const-decl "bool" float nil)
    (Fnormal? const-decl "bool" float nil)
    (Fsubnormal? const-decl "bool" float nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" float nil) (Flt? const-decl "bool" float nil)
    (Fminus const-decl "float" float nil)
    (^ const-decl "real" exponentiation nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil))
   shostak))
 (noteq_rew_rl2 0
  (noteq_rew_rl2-1 nil 3683491521
   ("" (skeep)
    (("" (replace -2) (("" (expand ">") (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (Fminus const-decl "float" float nil)
    (Flt? const-decl "bool" float nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" float nil))
   shostak))
 (noteq_rew 0
  (noteq_rew-1 nil 3682009054
   ("" (skeep)
    (("" (iff)
      (("" (split 1)
        (("1" (flatten)
          (("1" (expand ">")
            (("1" (expand "<")
              (("1" (use "FltCorrect")
                (("1" (replace -1 :hide? t)
                  (("1" (use "FltCorrect")
                    (("1" (replace -1 :hide? t)
                      (("1" (assert)
                        (("1" (case "FtoR(X)=FtoR(Y)")
                          (("1" (hide-all-but (-1 1))
                            (("1" (use "FcanonicUnique")
                              (("1"
                                (inst -1 "double_precision_format")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "real" exponentiation nil)
    (Fminus const-decl "float" float nil)
    (Flt? const-decl "bool" float nil)
    (expt def-decl "real" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (< const-decl "bool" float nil) (FtoR const-decl "real" float nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (FcanonicUnique formula-decl nil float nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (FltCorrect formula-decl nil float nil)
    (> const-decl "bool" float nil))
   shostak))
 (neq_rew 0
  (neq_rew-1 nil 3682009780
   ("" (expand "/=") (("" (propax) nil nil)) nil)
   ((/= const-decl "boolean" notequal nil)) shostak))
 (Dabs_TCC1 0
  (Dabs_TCC1-1 nil 3681829993
   ("" (skeep) (("" (use "FabsCanonic") (("" (assert) nil nil)) nil))
    nil)
   ((FabsCanonic formula-decl nil float nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (Fcanonic? const-decl "bool" float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (DtoR_round 0
  (DtoR_round-1 nil 3675274831
   ("" (skeep)
    (("" (expand "DtoR")
      (("" (expand "Dulp")
        (("" (use "ClosestUlp")
          (("" (assert)
            (("" (split -1)
              (("1"
                (invoke (typepred "%3") (? 1 "Closest?(%1)(%2,%3)"))
                (("1" (expand "closest_double?")
                  (("1" (expand "dp_closest?")
                    (("1" (expand "EvenClosest?")
                      (("1" (flatten) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2"
                (invoke (typepred "%3") (? 1 "Fbounded?%1(%2)(%3)"))
                (("2" (expand "Fcanonic?")
                  (("2" (expand "Fnormal?")
                    (("2" (expand "Fsubnormal?")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DtoR const-decl "real" ieee754dp nil)
    (ClosestUlp formula-decl nil float nil)
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp nil)
    (closest_double? const-decl "bool" ieee754dp nil)
    (Fbounded? const-decl "bool" float nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (Fcanonic? const-decl "bool" float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (EvenClosest? const-decl "bool" float nil)
    (dp_closest? const-decl "bool" ieee754dp nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Fsubnormal? const-decl "bool" float nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (Fnormal? const-decl "bool" float nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rtos_canonic_rounding_fun_j name-judgement
     "CanonicRoundingFun[2](double_precision_format, dp_closest?)"
     ieee754dp nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (Dulp const-decl "posreal" ieee754dp nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (DtoR_RtoD 0
  (DtoR_RtoD-1 nil 3675275376
   (""
    (case "FORALL(x,y,z: real): abs(x-y) <= z IMPLIES EXISTS(v:real): v >= -z AND v <= z AND x = y + v")
    (("1" (skeep)
      (("1" (use "DtoR_round")
        (("1" (inst? -2 :where -1)
          (("1" (assert)
            (("1" (skeep -2)
              (("1" (inst 1 "v") (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep) (("2" (inst 1 "x-y") (("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (DtoR const-decl "real" ieee754dp nil)
    (Fbounded? const-decl "bool" float nil)
    (closest_double? const-decl "bool" ieee754dp nil)
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Dulp const-decl "posreal" ieee754dp nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rtos_canonic_rounding_fun_j name-judgement
     "CanonicRoundingFun[2](double_precision_format, dp_closest?)"
     ieee754dp nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (DtoR_round formula-decl nil ieee754dp nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (DtoR_inc 0
  (DtoR_inc-1 nil 3675328982
   ("" (skeep)
    (("" (expand "<=" -1)
      (("" (use "FleCorrect")
        (("" (assert)
          (("" (expand "DtoR") (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" float nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (DtoR const-decl "real" ieee754dp nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (FleCorrect formula-decl nil float nil))
   shostak))
 (RtoD_inc 0
  (RtoD_inc-1 nil 3675330582
   ("" (skeep)
    (("" (case "x1=x2")
      (("1" (replace -1 :hide? t)
        (("1" (expand "<=")
          (("1" (use "FleCorrect") (("1" (assert) nil nil)) nil)) nil))
        nil)
       ("2" (expand "RtoD")
        (("2" (use "RND_EClosest_isEclosest")
          (("2" (use "EvenClosest_Monotone")
            (("2" (expand "Monotone?")
              (("2"
                (inst -1 "x1" "x2"
                 "RND_EClosest(double_precision_format)(x1)"
                 "RND_EClosest(double_precision_format)(x2)")
                (("1" (assert)
                  (("1" (split -1)
                    (("1" (expand "<=" 2)
                      (("1" (use "FleCorrect") (("1" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (use "RND_EClosest_isEclosest") nil nil))
                    nil))
                  nil)
                 ("2"
                  (typepred
                   "RND_EClosest[2](double_precision_format)(x2)")
                  (("2" (expand "Fcanonic?")
                    (("2" (expand "Fnormal?")
                      (("2" (expand "Fsubnormal?")
                        (("2" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (<= const-decl "bool" float nil) (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rtos_canonic_rounding_fun_j name-judgement
     "CanonicRoundingFun[2](double_precision_format, dp_closest?)"
     ieee754dp nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (Fbounded? const-decl "bool" float nil)
    (closest_double? const-decl "bool" ieee754dp nil)
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp nil)
    (FleCorrect formula-decl nil float nil)
    (RND_EClosest_isEclosest formula-decl nil float nil)
    (Monotone? const-decl "bool" float nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (RND_EClosest const-decl "(Fcanonic?(b))" float nil)
    (EvenClosest_Monotone formula-decl nil float nil))
   shostak))
 (Dulp_def 0
  (Dulp_def-1 nil 3671547731
   ("" (skeep)
    (("" (expand "Dulp")
      (("" (use "FulpCanonic") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((Dulp const-decl "posreal" ieee754dp nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (FulpCanonic formula-decl nil float nil))
   shostak))
 (RtoD_opp 0
  (RtoD_opp-2 "" 3675336247
   ("" (skeep)
    (("" (use "FcanonicUnique")
      (("" (inst -1 "double_precision_format")
        (("" (assert)
          (("" (split -1)
            (("1" (hide 2)
              (("1" (case "closest_double?(-x)(RtoD(-x))")
                (("1" (case "closest_double?(-x)(Fopp(RtoD(x)))")
                  (("1" (use "EvenClosest_Unique")
                    (("1" (inst -1 "double_precision_format")
                      (("1" (expand "Unique?")
                        (("1" (inst? -1 :where 1)
                          (("1" (inst -1 "-x")
                            (("1" (assert)
                              (("1"
                                (expand "closest_double?")
                                (("1"
                                  (expand "dp_closest?")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "closest_double?")
                    (("2" (expand "dp_closest?")
                      (("2" (hide 2)
                        (("2" (use "EvenClosestFopp")
                          (("2" (assert)
                            (("2" (typepred "RtoD(x)")
                              (("2"
                                (expand "closest_double?")
                                (("2"
                                  (expand "dp_closest?")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (use "FcanonicOpp")
                    (("3" (assert)
                      (("3" (use "FcanonicBounded")
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (typepred "RtoD(-x)") (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (use "FcanonicOpp") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FcanonicUnique formula-decl nil float nil)
    (Fopp const-decl "float" float nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp nil)
    (closest_double? const-decl "bool" ieee754dp nil)
    (Fbounded? const-decl "bool" float nil)
    (unb_double type-eq-decl nil ieee754dp nil)
    (double_precision_format const-decl "Format" ieee754dp nil)
    (Fcanonic? const-decl "bool" float nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Format type-eq-decl nil float nil)
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (float type-eq-decl nil float nil)
    (int nonempty-type-eq-decl nil integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rtos_canonic_rounding_fun_j name-judgement
     "CanonicRoundingFun[2](double_precision_format, dp_closest?)"
     ieee754dp nil)
    (dp_closest? const-decl "bool" ieee754dp nil)
    (Unique? const-decl "bool" float nil)
    (EvenClosest_Unique formula-decl nil float nil)
    (EvenClosestFopp formula-decl nil float nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FcanonicBounded formula-decl nil float nil)
    (FcanonicOpp formula-decl nil float nil))
   shostak)
  (RtoD_opp-1 nil 3675331460
   ("" (skeep)
    (("" (case "closest_double?(x)(RtoD(x))")
      (("1" (case "closest_double?(-x)(RtoD(-x))")
        (("1" (case "closest_double?(-x)(Fopp(RtoD(x)))")
          (("1" (hide -3)
            (("1" (expand "closest_double?")
              (("1" (expand "EvenClosest?")
                (("1" (flatten)
                  (("1" (split -2)
                    (("1" (split -4)
                      (("1" (postpone) nil nil)
                       ("2" (inst -1 "Fopp(RtoD(x))")
                        (("2" (assert)
                          (("2" (use "FcanonicUnique")
                            (("2" (assert)
                              (("2"
                                (use "FcanonicOpp")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst -1 "RtoD(-x)")
                      (("2" (assert)
                        (("2" (use "FcanonicUnique")
                          (("2" (assert)
                            (("2" (use "FcanonicOpp")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (postpone) nil nil) ("3" (postpone) nil nil))
          nil)
         ("2" (postpone) nil nil))
        nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   nil shostak)))

