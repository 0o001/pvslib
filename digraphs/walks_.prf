(walks_
 (IMP_digraphs__TCC1 0
  (IMP_digraphs__TCC1-1 nil 3657646096
   ("" (use "concretedigraph_implements_abstractdigraph") nil nil) nil
   nil
   (IMP_digraphs_ assuming
    "digraphs_[walks_.T, walks_.ConcreteDigraph, walks_.vert, walks_.edges, walks_.size, walks_.make].digraphs_"
    "concretedigraph_implements_abstractdigraph: ASSUMPTION digraphs_abs[digraphs_.T, digraphs_.ConcreteDigraph, digraphs_.vert, digraphs_.edges, digraphs_.size, digraphs_.make].correct_implementation")))
 (walk?_TCC1 0
  (walk?_TCC1-1 nil 3253634007 ("" (subtype-tcc) nil nil)
   ((finseq type-eq-decl nil finite_sequences nil)) nil
   (walk? subtype "walks_.n" "below[length(ps)]")))
 (walk?_TCC2 0
  (walk?_TCC2-1 nil 3253634007 ("" (subtype-tcc) nil nil)
   ((finseq type-eq-decl nil finite_sequences nil)) nil
   (walk? subtype "(number_fields.+)(walks_.n, 1)"
    "below[length(ps)]")))
 (from?_TCC1 0
  (from?_TCC1-1 nil 3253634007 ("" (subtype-tcc) nil nil) nil nil
   (from? subtype "0" "below[ps`length]")))
 (from?_TCC2 0
  (from?_TCC2-1 nil 3253634007 ("" (subtype-tcc) nil nil) nil nil
   (from? subtype "(number_fields.-)(length(walks_.ps), 1)"
    "below[ps`length]")))
 (verts_of_TCC1 0
  (verts_of_TCC1-1 nil 3253634007
   ("" (skosimp*)
    (("" (lemma "is_finite_surj[T]")
      ((""
        (inst -
         "{t: T | EXISTS (i: below(length(ww!1))): finseq_appl[T](ww!1)(i) = t}")
        (("" (assert)
          (("" (hide 2)
            ((""
              (inst 1 "length(ww!1)"
               "(LAMBDA (i: below(length(ww!1))): seq(ww!1)(i))")
              (("1" (expand "surjective?")
                (("1" (skosimp*)
                  (("1" (typepred "y!1")
                    (("1" (skosimp*)
                      (("1" (inst?)
                        (("1" (expand "finseq_appl")
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*)
                (("2" (inst?)
                  (("2" (expand "finseq_appl") (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((is_finite_surj formula-decl nil finite_sets nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (finseq type-eq-decl nil finite_sequences nil))
   nil
   (verts_of subtype
    "{t: walks_.T | EXISTS (i: naturalnumbers.below(length(walks_.ww))): finite_sequences[walks_.T].finseq_appl(walks_.ww)(i) = t}"
    "finite_set[T]")))
 (edges_of_TCC1 0
  (edges_of_TCC1-1 nil 3253634007 ("" (subtype-tcc) nil nil) nil nil
   (edges_of subtype "walks_.i" "below[length(ww)]")))
 (edges_of_TCC2 0
  (edges_of_TCC2-1 nil 3253634007 ("" (subtype-tcc) nil nil) nil nil
   (edges_of subtype "(number_fields.+)(walks_.i, 1)"
    "below[length(ww)]")))
 (edges_of_TCC3 0
  (edges_of_TCC3-2 nil 3656947467
   ("" (skosimp*)
    (("" (lemma "is_finite_surj[edgetype]")
      (("" (inst?)
        (("" (assert)
          (("" (hide 2)
            ((""
              (inst + "length(ww!1)-1"
               "(LAMBDA (i: below[length(ww!1)-1]): (ww!1(i),ww!1(i+1)))")
              (("1" (expand "finseq_appl")
                (("1" (expand "surjective?")
                  (("1" (skosimp*)
                    (("1" (typepred "y!1")
                      (("1" (skosimp*)
                        (("1" (inst + "i!1")
                          (("1" (expand "finseq_appl")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*) (("2" (inst?) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((edgetype type-eq-decl nil digraphs_utils nil)
    (is_finite_surj formula-decl nil finite_sets nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (finseq type-eq-decl nil finite_sequences nil))
   nil
   (edges_of subtype
    "{e: digraphs_utils[walks_.T].edgetype | EXISTS (i: naturalnumbers.below((number_fields.-)(length(walks_.ww), 1))): e = (finite_sequences[walks_.T].finseq_appl(walks_.ww)(i), finite_sequences[walks_.T].finseq_appl(walks_.ww)((number_fields.+)(i, 1)))}"
    "finite_set[edgetype[T]]"))
  (edges_of_TCC3-1 nil 3253634007
   ("" (skosimp*)
    (("" (lemma "is_finite_surj[edgetype[T]]")
      (("" (inst?)
        (("" (assert)
          (("" (hide 2)
            ((""
              (inst + "length(ww!1)-1"
               "(LAMBDA (i: below[length(ww!1)-1]): (ww!1(i),ww!1(i+1)))")
              (("1" (expand "finseq_appl")
                (("1" (expand "surjective?")
                  (("1" (skosimp*)
                    (("1" (typepred "y!1")
                      (("1" (skosimp*)
                        (("1" (inst + "i!1")
                          (("1" (expand "finseq_appl")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skosimp*) (("2" (inst?) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((is_finite_surj formula-decl nil finite_sets nil)) nil
   (edges_of subtype
    "{e: digraphs_utils[walks_.T].edgetype | EXISTS (i: naturalnumbers.below((number_fields.-)(length(walks_.ww), 1))): e = (finite_sequences[walks_.T].finseq_appl(walks_.ww)(i), finite_sequences[walks_.T].finseq_appl(walks_.ww)((number_fields.+)(i, 1)))}"
    "finite_set[edgetype[T]]")))
 (walk_from_l 0
  (walk_from_l-2 nil 3560851290
   ("" (skosimp*)
    (("" (expand* "walk_from?" "from?")
      (("" (flatten)
        (("" (expand "walk?")
          (("" (flatten)
            (("" (inst - "0") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (walk_from_l-1 nil 3253634007
   ("" (skosimp*)
    (("" (expand "walk_from?")
      (("" (flatten)
        (("" (expand "walk?")
          (("" (flatten)
            (("" (inst - "0") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (verts_in?_concat_TCC1 0
  (verts_in?_concat_TCC1-1 nil 3253634007 ("" (subtype-tcc) nil nil)
   ((O const-decl "finseq" finite_sequences nil)) nil
   (verts_in?_concat subtype
    "finite_sequences[walks_.T].o(walks_.s1, walks_.s2)" "prewalk")))
 (verts_in?_concat 0
  (verts_in?_concat-1 nil 3253634007
   ("" (skosimp*)
    (("" (expand "verts_in?")
      (("" (skosimp*)
        (("" (typepred "i!1")
          (("" (expand "o ")
            (("" (ground)
              (("1" (typepred "s1!1")
                (("1" (expand "verts_in?") (("1" (inst?) nil nil))
                  nil))
                nil)
               ("2" (typepred "s2!1")
                (("2" (expand "verts_in?") (("2" (inst?) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil))
   nil))
 (verts_in?_caret_TCC1 0
  (verts_in?_caret_TCC1-1 nil 3253634007
   ("" (skosimp*)
    (("" (expand "verts_in?")
      (("" (expand "^")
        (("" (expand min)
          (("" (expand "empty_seq")
            (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((empty_seq const-decl "finseq" finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil))
   nil
   (verts_in?_caret subtype
    "finite_sequences[walks_.T].^(walks_.ps, (walks_.i, walks_.j))"
    "prewalk")))
 (verts_in?_caret 0
  (verts_in?_caret-1 nil 3253634007
   ("" (skosimp*)
    (("" (expand "verts_in?")
      (("" (skosimp*)
        (("" (inst?)
          (("1" (typepred "i!2")
            (("1" (expand "^")
              (("1" (expand "empty_seq")
                (("1" (lift-if)
                  (("1" (ground)
                    (("1" (typepred "i!2")
                      (("1" (expand "^")
                        (("1" (typepred "j!1")
                          (("1" (reveal -1) (("1" (inst?) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "i!1")
            (("2" (typepred "i!2")
              (("2" (expand "^")
                (("2" (lift-if)
                  (("2" (expand "empty_seq") (("2" (ground) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((^ const-decl "finseq" finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil))
   nil))
 (vert_seq_lem 0
  (vert_seq_lem-1 nil 3253634007
   ("" (skosimp*)
    (("" (expand "finseq_appl")
      (("" (typepred "w!1")
        (("" (expand "verts_in?") (("" (inst - "n!1") nil nil)) nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (finseq type-eq-decl nil finite_sequences nil))
   nil))
 (verts_of_subset 0
  (verts_of_subset-1 nil 3253634007
   ("" (skosimp*)
    (("" (typepred "w!1")
      (("" (expand "subset?")
        (("" (skosimp*)
          (("" (expand "verts_in?")
            (("" (expand "member")
              (("" (expand "verts_of")
                (("" (skosimp*)
                  (("" (expand "finseq_appl")
                    (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (edges_of_subset 0
  (edges_of_subset-1 nil 3253634007
   ("" (skosimp*)
    (("" (expand "subset?")
      (("" (skosimp*)
        (("" (expand "member")
          (("" (expand "edges_of")
            (("" (expand "finseq_appl")
              (("" (skosimp*)
                (("" (replace -2)
                  (("" (hide -2)
                    (("" (expand "walk?")
                      (("" (flatten)
                        (("" (inst - "i!1")
                          (("" (assert)
                            (("" (expand "edge?")
                              ((""
                                (expand "finseq_appl")
                                (("" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (edge? const-decl "bool" digraphs_ nil))
   nil))
 (walk_verts_in 0
  (walk_verts_in-1 nil 3253634007
   ("" (skosimp*) (("" (expand "walk?") (("" (flatten) nil nil)) nil))
    nil)
   nil nil))
 (walk_from_vert 0
  (walk_from_vert-2 nil 3560851336
   ("" (skosimp*)
    (("" (expand* "walk_from?" "from?")
      (("" (flatten)
        (("" (expand "walk?")
          (("" (flatten)
            (("" (expand "verts_in?")
              (("" (inst-cp -3 "0")
                (("" (inst -3 "length(w!1)-1") (("" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq type-eq-decl nil finite_sequences nil)) nil)
  (walk_from_vert-1 nil 3253634007
   ("" (skosimp*)
    (("" (expand "walk_from?")
      (("" (flatten)
        (("" (expand "walk?")
          (("" (flatten)
            (("" (expand "verts_in?")
              (("" (inst-cp -3 "0")
                (("" (inst -3 "length(w!1)-1") (("" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (walk_edge_in 0
  (walk_edge_in-1 nil 3253634007
   ("" (skosimp*)
    (("" (expand "walk?")
      (("" (flatten)
        (("" (split 1)
          (("1" (hide -2)
            (("1" (expand "verts_in?")
              (("1" (skosimp*)
                (("1" (inst?)
                  (("1" (expand "verts_of")
                    (("1" (hide -2)
                      (("1" (expand "subset?")
                        (("1" (expand "member")
                          (("1" (inst?)
                            (("1" (split -2)
                              (("1" (propax) nil nil)
                               ("2"
                                (inst?)
                                (("2"
                                  (expand "finseq_appl")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (hide -5)
              (("2" (expand "subset?")
                (("2" (expand "member")
                  (("2" (inst?)
                    (("2" (assert)
                      (("2" (expand "edge?")
                        (("2" (inst?)
                          (("2" (expand "edges_of")
                            (("2" (assert)
                              (("2" (inst + "n!1") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((edge? const-decl "bool" digraphs_ nil)
    (edgetype type-eq-decl nil digraphs_utils nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (finseq type-eq-decl nil finite_sequences nil))
   nil))
 (prewalk_across_TCC1 0
  (prewalk_across_TCC1-1 nil 3253634007 ("" (subtype-tcc) nil nil) nil
   nil (prewalk_across subtype "0" "below[length(ww)]")))
 (prewalk_across_TCC2 0
  (prewalk_across_TCC2-1 nil 3253634007 ("" (subtype-tcc) nil nil) nil
   nil
   (prewalk_across subtype "(number_fields.-)(length(walks_.ww), 1)"
    "below[length(ww)]")))
 (prewalk_across_TCC3 0
  (prewalk_across_TCC3-1 nil 3253634007 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil (prewalk_across subtype "walks_.i" "below[length(ww)]")))
 (prewalk_across_TCC4 0
  (prewalk_across_TCC4-1 nil 3253634007 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil
   (prewalk_across subtype "(number_fields.+)(walks_.i, 1)"
    "below[length(ww)]")))
 (prewalk_across 0
  (prewalk_across-1 nil 3253634007
   ("" (skosimp*)
    ((""
      (case "(FORALL (i: below(length(ww!1))): seq(ww!1)(i) = seq(ww!1)(0))")
      (("1" (inst -1 "length(ww!1)-1")
        (("1" (assert)
          (("1" (expand "finseq_appl") (("1" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (hide 3)
        (("2" (induct "i")
          (("2" (skosimp*)
            (("2" (reveal 1)
              (("2" (inst + "jb!1")
                (("2" (expand "finseq_appl") (("2" (ground) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (finseq type-eq-decl nil finite_sequences nil))
   nil))
 (trunc1_TCC1 0
  (trunc1_TCC1-1 nil 3253634007 ("" (subtype-tcc) nil nil) nil nil
   (trunc1 subtype "(number_fields.-)(length(walks_.p), 2)" "nat")))
 (trunc1_TCC2 0
  (trunc1_TCC2-1 nil 3253634007 ("" (subtype-tcc) nil nil)
   ((^ const-decl "finseq" finite_sequences nil)) nil
   (trunc1 subtype
    "finite_sequences[walks_.T].^(walks_.p, (0, (number_fields.-)(length(walks_.p), 2)))"
    "prewalk")))
 (add1_TCC1 0
  (add1_TCC1-1 nil 3253634007 ("" (subtype-tcc) nil nil) nil nil
   (add1 subtype
    "(# length := (number_fields.+)(length(walks_.ww), 1), seq := (LAMBDA (ii: naturalnumbers.below((number_fields.+)(length(walks_.ww), 1))): IF reals.<(ii, length(walks_.ww)) THEN seq(walks_.ww)(ii) ELSE walks_.x ENDIF) #)"
    "prewalk")))
 (gen_seq1_is_walk 0
  (gen_seq1_is_walk-1 nil 3253634007
   ("" (skosimp*)
    (("" (expand "gen_seq1")
      (("" (expand "walk?")
        (("" (expand "verts_in?") (("" (skosimp*) nil nil)) nil)) nil))
      nil))
    nil)
   nil nil))
 (edge_to_walk_TCC1 0
  (edge_to_walk_TCC1-2 "" 3790100589
   ("" (skeep*)
    (("" (assert)
      (("" (use "edges_in_verts")
        (("" (split -1)
          (("1" (assert) nil nil) ("2" (assert) nil nil)
           ("3" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((concretedigraph_implements_abstractdigraph formula-decl nil
     digraphs_ nil)
    (is_finite const-decl "bool" finite_sets nil)
    (edges_in_verts formula-decl nil digraphs_abs nil))
   shostak (edge_to_walk subtype "walks_.u" "(walks_.vert(walks_.G))"))
  (edge_to_walk_TCC1-1 nil 3253634007
   ("" (skeep*)
    (("" (assert)
      (("" (use "edges_in_verts")
        (("" (split -1)
          (("1" (inst?) (("1" (assert) nil nil)) nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((concretedigraph_implements_abstractdigraph formula-decl nil
     digraphs_ nil)
    (is_finite const-decl "bool" finite_sets nil)
    (edges_in_verts formula-decl nil digraphs_abs nil))
   nil (edge_to_walk subtype "walks_.u" "(walks_.vert(walks_.G))")))
 (edge_to_walk_TCC2 0
  (edge_to_walk_TCC2-2 "" 3790100590
   ("" (skeep)
    (("" (use "edges_in_verts")
      (("" (split -1)
        (("1" (assert) nil nil) ("2" (assert) nil nil)
         ("3" (propax) nil nil))
        nil))
      nil))
    nil)
   ((edges_in_verts formula-decl nil digraphs_abs nil)
    (is_finite const-decl "bool" finite_sets nil)
    (concretedigraph_implements_abstractdigraph formula-decl nil
     digraphs_ nil))
   shostak (edge_to_walk subtype "walks_.v" "(walks_.vert(walks_.G))"))
  (edge_to_walk_TCC2-1 nil 3253634007
   ("" (skeep)
    (("" (use "edges_in_verts")
      (("" (split -1)
        (("1" (inst?) (("1" (assert) nil nil)) nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((edges_in_verts formula-decl nil digraphs_abs nil)
    (is_finite const-decl "bool" finite_sets nil)
    (concretedigraph_implements_abstractdigraph formula-decl nil
     digraphs_ nil))
   nil (edge_to_walk subtype "walks_.v" "(walks_.vert(walks_.G))")))
 (edge_to_walk 0
  (edge_to_walk-1 nil 3253634007
   ("" (skosimp*)
    (("" (expand "walk?")
      (("" (expand "gen_seq2")
        (("" (split 2)
          (("1" (expand "verts_in?") (("1" (propax) nil nil)) nil)
           ("2" (skosimp*)
            (("2" (expand "finseq_appl")
              (("2" (assert)
                (("2" (expand "edge?") (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((edge? const-decl "bool" digraphs_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (walk?_caret_TCC1 0
  (walk?_caret_TCC1-1 nil 3253634007 ("" (subtype-tcc) nil nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (edge? const-decl "bool" digraphs_ nil))
   nil
   (walk?_caret subtype
    "finite_sequences[walks_.T].^(walks_.ps, (walks_.i, walks_.j))"
    "prewalk")))
 (walk?_caret 0
  (walk?_caret-1 nil 3253634007
   ("" (skosimp*)
    (("" (expand "walk?")
      (("" (flatten)
        (("" (split +)
          (("1" (rewrite "verts_in?_caret") nil nil)
           ("2" (skosimp*)
            (("2" (expand "finseq_appl")
              (("2" (expand "edge?")
                (("2" (expand "^")
                  (("2" (assert)
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((edge? const-decl "bool" digraphs_ nil)
    (^ const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (finseq type-eq-decl nil finite_sequences nil))
   nil))
 (l_trunc1_TCC1 0
  (l_trunc1_TCC1-1 nil 3253634007 ("" (subtype-tcc) nil nil)
   ((finseq type-eq-decl nil finite_sequences nil)) nil
   (l_trunc1 subtype "walks_.ww" "Longprewalk")))
 (l_trunc1 0
  (l_trunc1-1 nil 3253634007
   ("" (skosimp*)
    (("" (expand "trunc1")
      (("" (expand "^") (("" (expand min) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((^ const-decl "finseq" finite_sequences nil)) nil))
 (walk?_add1 0
  (walk?_add1-1 nil 3253634007
   ("" (skosimp*)
    (("" (expand "walk?")
      (("" (flatten)
        (("" (split 1)
          (("1" (expand "verts_in?")
            (("1" (expand "add1")
              (("1" (skosimp*)
                (("1" (hide -2)
                  (("1" (inst?)
                    (("1" (ground) nil nil) ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (expand "finseq_appl")
              (("2" (expand "add1")
                (("2" (lift-if)
                  (("2" (split 1)
                    (("1" (flatten)
                      (("1" (inst?)
                        (("1" (lift-if) (("1" (ground) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (flatten) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (finseq type-eq-decl nil finite_sequences nil))
   nil))
 (walk_concat_edge_TCC1 0
  (walk_concat_edge_TCC1-1 nil 3253634007 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (edge? const-decl "bool" digraphs_ nil)
    (O const-decl "finseq" finite_sequences nil))
   nil
   (walk_concat_edge subtype
    "finite_sequences[walks_.T].o(walks_.w1, walks_.w2)" "prewalk")))
 (walk_concat_edge 0
  (walk_concat_edge-2 nil 3560851383
   ("" (skosimp*)
    (("" (expand* "walk_from?" "from?")
      (("" (flatten)
        (("" (expand "o ")
          (("" (assert)
            (("" (auto-rewrite "finseq_appl")
              (("" (expand "walk?")
                (("" (assert)
                  (("" (flatten)
                    (("" (assert)
                      (("" (split +)
                        (("1" (expand "verts_in?")
                          (("1" (skosimp*)
                            (("1" (hide -4)
                              (("1"
                                (ground)
                                (("1" (inst?) nil nil)
                                 ("2"
                                  (hide -3)
                                  (("2" (inst?) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (case "n!1 < length(w1!1)")
                            (("1" (assert)
                              (("1"
                                (lift-if)
                                (("1"
                                  (inst?)
                                  (("1" (ground) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (hide -5)
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((O const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (finseq type-eq-decl nil finite_sequences nil))
   nil)
  (walk_concat_edge-1 nil 3253634007
   ("" (skosimp*)
    (("" (expand "walk_from?")
      (("" (flatten)
        (("" (expand "o ")
          (("" (assert)
            (("" (auto-rewrite "finseq_appl")
              (("" (expand "walk?")
                (("" (assert)
                  (("" (flatten)
                    (("" (assert)
                      (("" (split +)
                        (("1" (expand "verts_in?")
                          (("1" (skosimp*)
                            (("1" (hide -4)
                              (("1"
                                (ground)
                                (("1" (inst?) nil nil)
                                 ("2"
                                  (hide -3)
                                  (("2" (inst?) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (case "n!1 < length(w1!1)")
                            (("1" (assert)
                              (("1"
                                (lift-if)
                                (("1"
                                  (inst?)
                                  (("1" (ground) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (hide -5)
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (walk_concat_TCC1 0
  (walk_concat_TCC1-1 nil 3253634007 ("" (subtype-tcc) nil nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (edge? const-decl "bool" digraphs_ nil))
   nil
   (walk_concat subtype "(number_fields.-)(length(walks_.w1), 2)"
    "nat")))
 (walk_concat_TCC2 0
  (walk_concat_TCC2-1 nil 3253634007
   ("" (skosimp*)
    (("" (expand "o ")
      (("" (expand "^")
        (("" (expand min) (("" (lift-if) (("" (ground) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((O const-decl "finseq" finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil))
   nil
   (walk_concat subtype
    "finite_sequences[walks_.T].o(finite_sequences[walks_.T].^(walks_.w1, (0, (number_fields.-)(length(walks_.w1), 2))), walks_.w2)"
    "prewalk")))
 (walk_concat 0
  (walk_concat-2 nil 3560851417
   ("" (skosimp*)
    (("" (expand* "walk_from?" "from?")
      (("" (flatten)
        (("" (assert)
          (("" (expand "o ")
            (("" (expand "^")
              (("" (expand min)
                (("" (expand "walk?")
                  (("" (expand "finseq_appl")
                    (("" (flatten)
                      (("" (split +)
                        (("1" (expand "verts_in?")
                          (("1" (skosimp*)
                            (("1" (ground)
                              (("1" (inst?) nil nil)
                               ("2"
                                (hide -2 -3 -4 -5 -6 -7 -9)
                                (("2" (inst?) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (expand "edge?")
                            (("2" (case "n!1 < length(w1!1) - 1")
                              (("1"
                                (assert)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case "n!1 = length(w1!1) - 1")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (hide -1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lift-if)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (hide -6)
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((^ const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (edge? const-decl "bool" digraphs_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (O const-decl "finseq" finite_sequences nil))
   nil)
  (walk_concat-1 nil 3253634007
   ("" (skosimp*)
    (("" (expand "walk_from?")
      (("" (flatten)
        (("" (assert)
          (("" (expand "o ")
            (("" (expand "^")
              (("" (expand min)
                (("" (expand "walk?")
                  (("" (expand "finseq_appl")
                    (("" (flatten)
                      (("" (split +)
                        (("1" (expand "verts_in?")
                          (("1" (skosimp*)
                            (("1" (ground)
                              (("1" (inst?) nil nil)
                               ("2"
                                (hide -2 -3 -4 -5 -6 -7 -9)
                                (("2" (inst?) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp*)
                          (("2" (expand "edge?")
                            (("2" (case "n!1 < length(w1!1) - 1")
                              (("1"
                                (assert)
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case "n!1 = length(w1!1) - 1")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (hide -1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lift-if)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (hide -6)
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (walk?_cut_TCC1 0
  (walk?_cut_TCC1-1 nil 3253634007 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (edge? const-decl "bool" digraphs_ nil))
   nil
   (walk?_cut subtype "(number_fields.-)(length(walks_.ps), 1)"
    "nat")))
 (walk?_cut_TCC2 0
  (walk?_cut_TCC2-1 nil 3582042098 ("" (subtype-tcc) nil nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (edge? const-decl "bool" digraphs_ nil)
    (^ const-decl "finseq" finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil))
   nil
   (walk?_cut subtype
    "finite_sequences[walks_.T].o(finite_sequences[walks_.T].^(walks_.ps, (0, walks_.i)), finite_sequences[walks_.T].^(walks_.ps, ((number_fields.+)(walks_.j, 1), (number_fields.-)(length(walks_.ps), 1))))"
    "prewalk")))
 (walk?_cut 0
  (walk?_cut-2 nil 3560851456
   ("" (skosimp*)
    (("" (expand* "walk_from?" "from?")
      (("" (flatten)
        (("" (expand "walk?")
          (("" (expand "finseq_appl")
            (("" (expand "o ")
              (("" (expand "^")
                (("" (expand "min")
                  (("" (expand "empty_seq")
                    (("" (split 1)
                      (("1" (propax) nil nil)
                       ("2" (flatten)
                        (("2" (lift-if)
                          (("2" (split 1)
                            (("1" (flatten)
                              (("1"
                                (expand "verts_in?")
                                (("1"
                                  (hide -7)
                                  (("1"
                                    (inst?)
                                    (("1" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (flatten)
                        (("3" (expand "verts_in?")
                          (("3" (skosimp*)
                            (("3" (hide -6)
                              (("3"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1" (inst?) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (typepred "i!2")
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (ground)
                                          (("2" (inst?) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (skosimp*)
                        (("4" (lift-if)
                          (("4" (split 1)
                            (("1" (flatten)
                              (("1"
                                (ground)
                                (("1"
                                  (inst?)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil)
                                 ("3"
                                  (lift-if)
                                  (("3"
                                    (split 3)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (case "n!1 = i!1")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -4)
                                                      (("1"
                                                        (reveal -2)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "j!1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (ground)
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil)
  (walk?_cut-1 nil 3253634007
   ("" (skosimp*)
    (("" (expand "walk_from?")
      (("" (flatten)
        (("" (expand "walk?")
          (("" (expand "finseq_appl")
            (("" (expand "o ")
              (("" (expand "^")
                (("" (expand "min")
                  (("" (expand "empty_seq")
                    (("" (split 1)
                      (("1" (propax) nil nil)
                       ("2" (flatten)
                        (("2" (lift-if)
                          (("2" (split 1)
                            (("1" (flatten)
                              (("1"
                                (expand "verts_in?")
                                (("1"
                                  (hide -7)
                                  (("1"
                                    (inst?)
                                    (("1" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (flatten)
                        (("3" (expand "verts_in?")
                          (("3" (skosimp*)
                            (("3" (hide -6)
                              (("3"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1" (inst?) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (typepred "i!2")
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (ground)
                                          (("2" (inst?) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (skosimp*)
                        (("4" (lift-if)
                          (("4" (split 1)
                            (("1" (flatten)
                              (("1"
                                (ground)
                                (("1"
                                  (inst?)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil)
                                 ("3"
                                  (lift-if)
                                  (("3"
                                    (split 3)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (case "n!1 = i!1")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -4)
                                                      (("1"
                                                        (reveal -2)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "j!1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (ground)
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (walk_merge 0
  (walk_merge-2 nil 3560851513
   ("" (skosimp*)
    (("" (case-replace "u!1 = v!1")
      (("1" (hide -3)
        (("1" (expand* "walk_from?" "from?")
          (("1" (flatten)
            (("1" (lemma "walk_verts_in")
              (("1" (inst?)
                (("1" (assert)
                  (("1" (hide -2 -4 -5)
                    (("1" (inst + "gen_seq1(G!1,v!1)")
                      (("1" (expand "gen_seq1")
                        (("1" (expand "walk?")
                          (("1" (expand "verts_in?")
                            (("1" (skosimp*)
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "verts_in?")
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (case-replace "u!1 = yt!1")
        (("1" (inst + "p2!1") nil nil)
         ("2" (lemma "walk_from_l")
          (("2" (inst?)
            (("2" (assert)
              (("2" (lemma "walk_concat")
                (("2" (inst?)
                  (("2" (inst -1 "v!1" "p2!1")
                    (("2" (assert)
                      (("2"
                        (inst + "p1!1 ^ (0, length(p1!1) - 2) o p2!1")
                        nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((^ const-decl "finseq" finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil))
   nil)
  (walk_merge-1 nil 3253634007
   ("" (skosimp*)
    (("" (case-replace "u!1 = v!1")
      (("1" (hide -3)
        (("1" (expand "walk_from?")
          (("1" (flatten)
            (("1" (lemma "walk_verts_in")
              (("1" (inst?)
                (("1" (assert)
                  (("1" (hide -2 -4 -5)
                    (("1" (inst + "gen_seq1(G!1,v!1)")
                      (("1" (expand "gen_seq1")
                        (("1" (expand "walk?")
                          (("1" (expand "verts_in?")
                            (("1" (skosimp*)
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "verts_in?")
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (case-replace "u!1 = yt!1")
        (("1" (inst + "p2!1") nil nil)
         ("2" (lemma "walk_from_l")
          (("2" (inst?)
            (("2" (assert)
              (("2" (lemma "walk_concat")
                (("2" (inst?)
                  (("2" (inst -1 "v!1" "p2!1")
                    (("2" (assert)
                      (("2"
                        (inst + "p1!1 ^ (0, length(p1!1) - 2) o p2!1")
                        (("2" (hide -1 -3 -4) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (reord_prewalk_TCC1 0
  (reord_prewalk_TCC1-1 nil 3562934566 ("" (subtype-tcc) nil nil) nil
   nil
   (reord_prewalk subtype "(number_fields.-)(length(walks_.w), 1)"
    "nat")))
 (reord_prewalk_TCC2 0
  (reord_prewalk_TCC2-2 "" 3790100598
   ("" (skeep) (("" (assert) nil nil)) nil) nil shostak
   (reord_prewalk subtype "(number_fields.-)(walks_.i, 1)" "nat"))
  (reord_prewalk_TCC2-1 nil 3562934566
   ("" (skeep)
    (("" (expand* "o" "^" "min" "empty_seq")
      (("" (lift-if)
        (("" (assert) (("" (lift-if) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (reord_prewalk subtype "(number_fields.-)(walks_.i, 1)" "nat")))
 (reord_prewalk_TCC3 0
  (reord_prewalk_TCC3-1 nil 3563136007 ("" (grind) nil nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil))
   nil
   (reord_prewalk subtype
    "finite_sequences[walks_.T].o(finite_sequences[walks_.T].^(walks_.w, (walks_.i, (number_fields.-)(length(walks_.w), 1))), finite_sequences[walks_.T].^(walks_.w, (0, (number_fields.-)(walks_.i, 1))))"
    "prewalk")))
 (eq_relation_eq_prewalk 0
  (eq_relation_eq_prewalk-1 nil 3563236147
   ("" (expand "equivalence?")
    (("" (split)
      (("1" (expand "reflexive?")
        (("1" (skeep)
          (("1" (expand "eq_prewalk?") (("1" (propax) nil nil)) nil))
          nil))
        nil)
       ("2" (expand "symmetric?")
        (("2" (skeep)
          (("2" (expand "eq_prewalk?")
            (("2" (split)
              (("1" (flatten) (("1" (assert) nil nil)) nil)
               ("2" (flatten)
                (("2" (skeep -1)
                  (("2" (expand "reord_prewalk")
                    (("2" (case "i > length(x) - 1")
                      (("1" (expand "^" -2)
                        (("1" (assert)
                          (("1" (expand "empty_seq")
                            (("1" (expand "o" -2)
                              (("1"
                                (expand "min")
                                (("1"
                                  (decompose-equality -2)
                                  (("1"
                                    (decompose-equality -2)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (decompose-equality 1)
                                          (("1"
                                            (decompose-equality 1)
                                            nil
                                            nil))
                                          nil)
                                         ("2"
                                          (decompose-equality 2)
                                          (("2"
                                            (decompose-equality 1)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "min")
                                      (("2" (propax) nil nil))
                                      nil)
                                     ("3"
                                      (expand "min")
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "min")
                                    (("2" (propax) nil nil))
                                    nil)
                                   ("3"
                                    (expand "min")
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst 3 "length(x) - i")
                        (("1" (decompose-equality 3)
                          (("1" (expand "o")
                            (("1" (decompose-equality -1)
                              (("1"
                                (hide -2)
                                (("1"
                                  (expand* "^" "min" "empty_seq")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (decompose-equality 1)
                            (("2" (typepred "x!1")
                              (("2"
                                (expand "o" -2)
                                (("2"
                                  (decompose-equality -2)
                                  (("2"
                                    (expand "^" -1)
                                    (("2"
                                      (expand "min")
                                      (("2"
                                        (decompose-equality -2)
                                        (("1"
                                          (expand "o" 1)
                                          (("1"
                                            (expand "^" 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "min")
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (inst
                                                       -2
                                                       "length(x) - i + x!1")
                                                      (("1"
                                                        (expand "^")
                                                        (("1"
                                                          (expand
                                                           "min")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst
                                                       -1
                                                       "length(x) - y`length - i + x!1")
                                                      (("2"
                                                        (expand*
                                                         "^"
                                                         "min")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -3 2)
                                          (("2"
                                            (expand* "^" "min")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand "transitive?")
        (("3" (skeep)
          (("3" (expand "eq_prewalk?")
            (("3" (flatten)
              (("3" (ground)
                (("3" (skosimp*)
                  (("3" (expand "reord_prewalk")
                    (("3"
                      (case "i!1 > length(y) - 1 OR i!2 > length(x) - 1")
                      (("1" (split)
                        (("1" (expand "^" -2 1)
                          (("1" (assert)
                            (("1" (case "z = y")
                              (("1"
                                (inst 2 "i!2")
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (hide -3 2 3)
                                (("2"
                                  (decompose-equality)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (decompose-equality)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "y = x")
                          (("1" (inst 2 "i!1") (("1" (assert) nil nil))
                            nil)
                           ("2" (hide -2 2 3)
                            (("2" (decompose-equality)
                              (("1" (grind) nil nil)
                               ("2"
                                (decompose-equality)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (expand "o" (-1 -2))
                          (("2" (decompose-equality)
                            (("2" (decompose-equality)
                              (("2"
                                (decompose-equality)
                                (("2"
                                  (decompose-equality)
                                  (("2"
                                    (expand "^" (-2 -4))
                                    (("2"
                                      (expand "min")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "^" -1 (1 4))
                                          (("2"
                                            (expand "min")
                                            (("2"
                                              (expand "^" -3 (1 4))
                                              (("2"
                                                (expand "min")
                                                (("2"
                                                  (case
                                                   "i!1 + i!2 = length(x)")
                                                  (("1"
                                                    (hide 4)
                                                    (("1"
                                                      (decompose-equality
                                                       3)
                                                      (("1"
                                                        (decompose-equality
                                                         1)
                                                        (("1"
                                                          (inst
                                                           -4
                                                           "x!1")
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (expand
                                                                 "^"
                                                                 -2)
                                                                (("1"
                                                                  (inst
                                                                   -4
                                                                   "i!1 + x!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "^"
                                                                       -4)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "^"
                                                                 -1)
                                                                (("2"
                                                                  (inst
                                                                   -3
                                                                   "i!1 - y`length + x!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "^"
                                                                       -3)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "x!1")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "i!1 + i!2 > length(x) - 1")
                                                    (("1"
                                                      (inst
                                                       5
                                                       "i!1 + i!2 - length(x)")
                                                      (("1"
                                                        (decompose-equality
                                                         5)
                                                        (("1"
                                                          (hide -2 -4)
                                                          (("1"
                                                            (expand*
                                                             "o"
                                                             "^"
                                                             "min"
                                                             "empty_seq")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (decompose-equality
                                                           1)
                                                          (("2"
                                                            (typepred
                                                             "x!1")
                                                            (("2"
                                                              (expand
                                                               "o"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "^"
                                                                 1
                                                                 (1 4))
                                                                (("2"
                                                                  (expand
                                                                   "min")
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (ground)
                                                                      (("1"
                                                                        (expand
                                                                         "^"
                                                                         1)
                                                                        (("1"
                                                                          (inst
                                                                           -6
                                                                           "x!1")
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (ground)
                                                                              (("1"
                                                                                (expand
                                                                                 "^"
                                                                                 -2)
                                                                                (("1"
                                                                                  (inst
                                                                                   -6
                                                                                   "i!1 + x!1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "^"
                                                                                       -6)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "^"
                                                                                 -1)
                                                                                (("2"
                                                                                  (inst
                                                                                   -5
                                                                                   "i!1 - y`length + x!1")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "^"
                                                                                       -5)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "^"
                                                                         2)
                                                                        (("2"
                                                                          (inst
                                                                           -5
                                                                           "x!1")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "^"
                                                                               -5)
                                                                              (("2"
                                                                                (inst
                                                                                 -3
                                                                                 "i!1 - y`length + x!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "^"
                                                                                     -3)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst
                                                       6
                                                       "i!1 + i!2")
                                                      (("2"
                                                        (decompose-equality
                                                         6)
                                                        (("1"
                                                          (hide -1 -3)
                                                          (("1"
                                                            (expand*
                                                             "o"
                                                             "^"
                                                             "min"
                                                             "empty_seq")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (decompose-equality
                                                           1)
                                                          (("2"
                                                            (typepred
                                                             "x!1")
                                                            (("2"
                                                              (expand
                                                               "o"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "^"
                                                                 1
                                                                 (1 4))
                                                                (("2"
                                                                  (expand
                                                                   "min")
                                                                  (("2"
                                                                    (lift-if)
                                                                    (("2"
                                                                      (ground)
                                                                      (("1"
                                                                        (expand
                                                                         "^"
                                                                         1)
                                                                        (("1"
                                                                          (inst
                                                                           -5
                                                                           "x!1")
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (ground)
                                                                              (("1"
                                                                                (expand
                                                                                 "^"
                                                                                 -2)
                                                                                (("1"
                                                                                  (inst
                                                                                   -5
                                                                                   "i!1 + x!1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "^"
                                                                                       -5)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "^"
                                                                         2)
                                                                        (("2"
                                                                          (inst
                                                                           -4
                                                                           "x!1")
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (ground)
                                                                              (("1"
                                                                                (expand
                                                                                 "^"
                                                                                 -2)
                                                                                (("1"
                                                                                  (inst
                                                                                   -4
                                                                                   "i!1 + x!1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "^"
                                                                                       -4)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "^"
                                                                                 -1)
                                                                                (("2"
                                                                                  (inst
                                                                                   -3
                                                                                   "i!1 - y`length + x!1")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "^"
                                                                                       -3)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((^ const-decl "finseq" finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil))
   shostak))
 (eq_prewalk_length 0
  (eq_prewalk_length-1 nil 3579517557
   ("" (skeep)
    (("" (expand "eq_prewalk?")
      (("" (split)
        (("1" (assert) nil nil)
         ("2" (skeep)
          (("2" (expand "reord_prewalk")
            (("2" (replaces -1)
              (("2" (expand* "^" "min" "o")
                (("2" (assert)
                  (("2" (lift-if)
                    (("2" (expand "empty_seq")
                      (("2" (lift-if) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((O const-decl "finseq" finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   shostak))
 (subwalk_is_walk 0
  (subwalk_is_walk-1 nil 3560698081
   ("" (skeep)
    (("" (expand "sub_walk?")
      (("" (skeep -1)
        (("" (lemma "walk?_caret")
          (("" (inst -1 "G" "i" "j" "w")
            (("" (assert)
              (("" (expand "^")
                (("" (typepred "ww")
                  (("" (expand "empty_seq")
                    (("" (decompose-equality -2) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((empty_seq const-decl "finseq" finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil))
   shostak))
 (walk_o_TCC1 0
  (walk_o_TCC1-1 nil 3561205902 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (edge? const-decl "bool" digraphs_ nil))
   nil (walk_o subtype "0" "below[w2`length]")))
 (walk_o_TCC2 0
  (walk_o_TCC2-1 nil 3561205902 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (edge? const-decl "bool" digraphs_ nil))
   nil
   (walk_o subtype "(number_fields.-)(length(walks_.w2), 1)" "nat")))
 (walk_o_TCC3 0
  (walk_o_TCC3-1 nil 3561205902 ("" (subtype-tcc) nil nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (edge? const-decl "bool" digraphs_ nil)
    (O const-decl "finseq" finite_sequences nil))
   nil
   (walk_o subtype
    "finite_sequences[walks_.T].o(walks_.w1, finite_sequences[walks_.T].^(walks_.w2, (1, (number_fields.-)(length(walks_.w2), 1))))"
    "prewalk")))
 (walk_o 0
  (walk_o-1 nil 3561206166
   ("" (skeep)
    (("" (case-replace "length(w2) = 1")
      (("1" (assert)
        (("1" (expand "^")
          (("1" (case-replace "w1 o empty_seq = w1")
            (("1" (hide 2)
              (("1" (expand "o")
                (("1" (decompose-equality)
                  (("1" (expand "empty_seq") (("1" (propax) nil nil))
                    nil)
                   ("2" (decompose-equality)
                    (("1" (lift-if)
                      (("1" (ground)
                        (("1" (typepred "x!1")
                          (("1" (expand "empty_seq")
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep) (("2" (assert) nil nil)) nil))
                    nil)
                   ("3" (skeep)
                    (("3" (expand "empty_seq") (("3" (propax) nil nil))
                      nil))
                    nil)
                   ("4" (skeep) (("4" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "walk_concat_edge")
        (("2"
          (inst -1 "G" "seq(w1)(0)" "seq(w2)(1)"
           "seq(w1)(length(w1) - 1)" "seq(w2)(length(w2) - 1)" "w1"
           "w2^(1, length(w2) - 1)")
          (("1" (split)
            (("1" (expand "walk_from?") (("1" (flatten) nil nil)) nil)
             ("2" (hide 3)
              (("2" (expand "walk_from?")
                (("2" (assert)
                  (("2" (expand "from?") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (expand "walk_from?")
              (("3" (rewrite "walk?_caret")
                (("3" (expand "from?") (("3" (grind) nil nil)) nil))
                nil))
              nil)
             ("4" (replace -3 1)
              (("4" (hide-all-but (-2 1 2))
                (("4" (expand "walk?")
                  (("4" (flatten)
                    (("4" (inst -2 "0")
                      (("4" (assert)
                        (("4" (expand "finseq_appl")
                          (("4" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but (1 2))
            (("2" (expand "^")
              (("2" (assert)
                (("2" (expand "min") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((edge? const-decl "bool" digraphs_ nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil))
   shostak))
 (edges_o_walk_TCC1 0
  (edges_o_walk_TCC1-1 nil 3582042098 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (edge? const-decl "bool" digraphs_ nil))
   nil (edges_o_walk subtype "walks_.w1" "not_empty_seq[T]")))
 (edges_o_walk_TCC2 0
  (edges_o_walk_TCC2-1 nil 3582042098 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (edge? const-decl "bool" digraphs_ nil))
   nil (edges_o_walk subtype "walks_.w2" "not_empty_seq[T]")))
 (edges_o_walk_TCC3 0
  (edges_o_walk_TCC3-1 nil 3582042098 ("" (subtype-tcc) nil nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (edge? const-decl "bool" digraphs_ nil)
    (last const-decl "T" seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (rest const-decl "finseq" seq_extras structures)
    (O const-decl "finseq" finite_sequences nil))
   nil
   (edges_o_walk subtype
    "finite_sequences[walks_.T].o(walks_.w1, seq_extras[walks_.T].rest(walks_.w2))"
    "prewalk")))
 (edges_o_walk 0
  (edges_o_walk-1 nil 3582042116
   ("" (auto-rewrite "finseq_appl")
    (("" (skeep)
      (("" (case "length(w2) = 1")
        (("1" (lemma "length_rest_0")
          (("1" (inst -1 "w2")
            (("1" (assert)
              (("1" (rewrite "empty_0")
                (("1" (replaces -1)
                  (("1" (rewrite "seq_o_empty")
                    (("1" (case-replace "edges_of(w2) = emptyset")
                      (("1" (rewrite "union_empty") nil nil)
                       ("2" (hide-all-but (-1 1))
                        (("2" (decompose-equality)
                          (("2" (expand "emptyset")
                            (("2" (expand "edges_of")
                              (("2" (skeep) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (decompose-equality 2)
          (("2" (iff)
            (("2" (expand* "union" "member" "edges_of")
              (("2" (prop)
                (("1" (skeep)
                  (("1" (assert)
                    (("1" (typepred "i")
                      (("1" (expand* "o" "rest" "^" "min")
                        (("1" (case "1 + i < w1`length")
                          (("1" (assert)
                            (("1" (hide 2)
                              (("1"
                                (inst 1 "i")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case "i < w1`length")
                            (("1" (assert)
                              (("1"
                                (hide 2)
                                (("1"
                                  (inst 2 "i - length(w1) + 1")
                                  (("1"
                                    (expand* "last" "first")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (hide 3)
                                (("2"
                                  (inst 3 "i - length(w1) + 1")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (typepred "i")
                    (("2" (inst 1 "i")
                      (("1" (assert)
                        (("1" (expand "o") (("1" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (expand "o") (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skeep)
                  (("3" (typepred "i")
                    (("3" (case "i = 0")
                      (("1" (inst 1 "i + length(w1) - 1")
                        (("1" (assert)
                          (("1" (expand "o")
                            (("1" (replaces -1)
                              (("1"
                                (expand* "last" "first")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "rest")
                                    (("1"
                                      (expand "^")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "o")
                          (("2" (assert)
                            (("2" (expand "rest")
                              (("2"
                                (expand "^")
                                (("2"
                                  (expand "min")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst 2 "i + length(w1) - 1")
                        (("1" (assert)
                          (("1" (expand* "o" "rest" "^" "min") nil
                            nil))
                          nil)
                         ("2" (expand* "o" "rest" "^" "min")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (rest const-decl "finseq" seq_extras structures)
    (empty_0 formula-decl nil seq_extras structures)
    (seq_o_empty formula-decl nil seq_extras structures)
    (edgetype type-eq-decl nil digraphs_utils nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (finite_union application-judgement "finite_set" finite_sets nil)
    (length_rest_0 formula-decl nil seq_extras structures)
    (last const-decl "T" seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (^ const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (O const-decl "finseq" finite_sequences nil))
   shostak))
 (walk_o_edge_TCC1 0
  (walk_o_edge_TCC1-1 nil 3659803672 ("" (subtype-tcc) nil nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (is_finite const-decl "bool" finite_sets nil)
    (edge? const-decl "bool" digraphs_ nil)
    (O const-decl "finseq" finite_sequences nil))
   nil
   (walk_o_edge subtype
    "finite_sequences[walks_.T].o(walks_.ww1, walks_.ww2)" "prewalk")))
 (walk_o_edge 0
  (walk_o_edge-1 nil 3659803768
   ("" (skeep)
    (("" (lemma "walk_concat_edge")
      ((""
        (inst -1 "G" "ww1(0)" "ww2(0)" "ww1(length(ww1)-1)"
         "ww2(length(ww2)-1)" "ww1" "ww2")
        (("" (ground)
          (("1" (expand "walk_from?") (("1" (propax) nil nil)) nil)
           ("2" (expand "walk_from?")
            (("2" (expand "from?")
              (("2" (expand "finseq_appl") (("2" (propax) nil nil))
                nil))
              nil))
            nil)
           ("3" (expand "walk_from?")
            (("3" (expand "from?")
              (("3" (expand "finseq_appl") (("3" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (finseq type-eq-decl nil finite_sequences nil))
   nil))
 (reachable_is_transitive 0
  (reachable_is_transitive-1 nil 3655151712
   ("" (skeep)
    (("" (expand "reachable?")
      (("" (case "v1=v2")
        (("1" (replace -1 :hide? t :dir rl) (("1" (propax) nil nil))
          nil)
         ("2" (assert)
          (("2" (case "v2=v3")
            (("1" (replace -1 :hide? t :dir rl)
              (("1" (assert) nil nil)) nil)
             ("2" (assert)
              (("2" (skolem -1 "w12")
                (("2" (skolem -2 "w23")
                  (("2" (flatten)
                    (("2" (inst 4 "w12 ^ (0, length(w12) - 2)o w23")
                      (("1" (use "walk_concat")
                        (("1" (assert)
                          (("1" (use "walk_from_l")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (expand "o") (("2" (grind) nil nil)) nil)
                       ("3" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((edge? const-decl "bool" digraphs_ nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil))
   shostak)))

