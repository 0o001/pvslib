(c_topological_sort
 (topological_ordering?_TCC1 0
  (topological_ordering?_TCC1-1 nil 3847635000
   ("" (subtype-tcc) nil nil)
   ((injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (edge? const-decl "bool" digraphs_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (topological_ordering? subtype "c_topological_sort.x"
    "digraphs_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].vert(c_topological_sort.G)")))
 (topological_ordering?_TCC2 0
  (topological_ordering?_TCC2-1 nil 3847635000
   ("" (subtype-tcc) nil nil)
   ((injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (edge? const-decl "bool" digraphs_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (topological_ordering? subtype "c_topological_sort.y"
    "digraphs_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].vert(c_topological_sort.G)")))
 (topological_ordering_path_TCC1 0
  (topological_ordering_path_TCC1-1 nil 3847636724
   ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (vert type-eq-decl nil digraphs_ nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (topological_ordering? const-decl "bool" c_topological_sort nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (edge? const-decl "bool" digraphs_ nil)
    (verts_in? const-decl "bool" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (length def-decl "nat" list_props nil)
    (G!1 skolem-const-decl "c_digraph[T]" c_topological_sort nil)
    (nth def-decl "T" list_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (size const-decl "nat" c_digraphs_def nil)
    (vert? const-decl "bool" digraphs_ nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil))
   nil
   (topological_ordering_path subtype
    "c_topological_sort.w`seq(c_topological_sort.i)"
    "digraphs_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].vert(c_topological_sort.G)")))
 (topological_ordering_path_TCC2 0
  (topological_ordering_path_TCC2-1 nil 3847636724
   ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (vert type-eq-decl nil digraphs_ nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (topological_ordering? const-decl "bool" c_topological_sort nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (edge? const-decl "bool" digraphs_ nil)
    (verts_in? const-decl "bool" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (length def-decl "nat" list_props nil)
    (G!1 skolem-const-decl "c_digraph[T]" c_topological_sort nil)
    (nth def-decl "T" list_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (size const-decl "nat" c_digraphs_def nil)
    (vert? const-decl "bool" digraphs_ nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil))
   nil
   (topological_ordering_path subtype
    "c_topological_sort.w`seq(c_topological_sort.j)"
    "digraphs_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].vert(c_topological_sort.G)")))
 (topological_ordering_path 0
  (topological_ordering_path-1 nil 3847637093
   ("" (skolem 1 ("G" "f" "_" "_" "_" "_"))
    (("" (induct n)
      (("1" (skeep*)
        (("1" (assert)
          (("1" (replace -1 * RL)
            (("1" (typepred "w")
              (("1" (expand "walk?")
                (("1" (flatten)
                  (("1" (inst -3 i)
                    (("1" (assert)
                      (("1" (expand "finseq_appl")
                        (("1" (typepred "f")
                          (("1" (expand "topological_ordering?")
                            (("1" (flatten)
                              (("1"
                                (inst - "w`seq(i)" "w`seq(j)")
                                (("1" (assert) nil nil)
                                 ("2" (grind) nil nil)
                                 ("3" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skolem 1 n)
        (("2" (flatten)
          (("2" (skeep)
            (("2" (inst -1 w i "i + n + 1")
              (("1" (typepred "w")
                (("1" (expand "walk?")
                  (("1" (flatten)
                    (("1" (inst -3 "i+n+1")
                      (("1" (assert)
                        (("1" (expand "finseq_appl")
                          (("1" (typepred "f")
                            (("1" (expand "topological_ordering?")
                              (("1"
                                (flatten)
                                (("1"
                                  (inst
                                   -
                                   "w`seq(1+i+n)"
                                   "w`seq(2+i+n)")
                                  (("1" (assert) nil nil)
                                   ("2" (grind) nil nil)
                                   ("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (grind) nil nil) ("4" (grind) nil nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (vert? const-decl "bool" digraphs_ nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (Walk type-eq-decl nil walks_ nil)
    (G skolem-const-decl "c_digraph[T]" c_topological_sort nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (vert type-eq-decl nil digraphs_ nil)
    (size const-decl "nat" c_digraphs_def nil)
    (topological_ordering? const-decl "bool" c_topological_sort nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (bijective? const-decl "bool" functions nil)
    (verts_in? const-decl "bool" walks_ nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (edge? const-decl "bool" digraphs_ nil)
    (j skolem-const-decl "below(length(w))" c_topological_sort nil)
    (i skolem-const-decl "below(length(w))" c_topological_sort nil)
    (w skolem-const-decl
     "Walk[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](G)" c_topological_sort nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (TRUE const-decl "bool" booleans nil)
    (w skolem-const-decl
     "Walk[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](G)" c_topological_sort nil)
    (i skolem-const-decl "below(length(w))" c_topological_sort nil)
    (n skolem-const-decl "nat" c_topological_sort nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (temp_count_same 0
  (temp_count_same-1 nil 3817487138
   ("" (induct l)
    (("1" (skeep)
      (("1" (expand "member")
        (("1" (expand "temp_count")
          (("1" (expand "filter") (("1" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (skolem 1 ("y" "l"))
      (("2" (flatten)
        (("2" (skeep)
          (("2" (inst -1 "m" "x")
            (("2" (expand "member" 1)
              (("2" (flatten)
                (("2" (assert)
                  (("2" (expand "temp_count")
                    (("2" (expand "filter" 3)
                      (("2" (expand "length" 3 (1 3))
                        (("2" (lift-if)
                          (("2" (replace -1 * LR)
                            (("2" (assert)
                              (("2"
                                (lift-if)
                                (("2"
                                  (assert)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (ground)
                                        (("1"
                                          (expand "o ")
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (expand "o ")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((O const-decl "T3" function_props nil)
    (length def-decl "nat" list_props nil)
    (filter def-decl "list[T]" filters nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (temp_count const-decl "nat" c_topological_sort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (member def-decl "bool" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (temp_count_incr 0
  (temp_count_incr-1 nil 3817485056
   ("" (induct l)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("y" "l"))
      (("2" (flatten)
        (("2" (skeep)
          (("2" (inst -1 "m" "x")
            (("2" (expand "member" -2)
              (("2" (case "not member(x, l)")
                (("1" (split -2)
                  (("1" (hide -2)
                    (("1" (lemma "temp_count_same")
                      (("1" (inst? - (l l))
                        (("1" (assert)
                          (("1" (expand "temp_count")
                            (("1" (expand "filter" 3)
                              (("1"
                                (expand "length" 3 (1 3))
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -1 * LR)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (replace -2 * LR)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "o ")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "temp_count")
                    (("2" (expand "filter" 2)
                      (("2" (expand "length" 2 (1 3))
                        (("2" (lift-if)
                          (("2" (assert)
                            (("2" (lift-if)
                              (("2"
                                (split -2)
                                (("1"
                                  (replace -1 * LR)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "o ")
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split 2)
                                                (("1"
                                                  (expand
                                                   "no_repetitions?")
                                                  (("1"
                                                    (lemma
                                                     "member_nth[T]")
                                                    (("1"
                                                      (inst? -)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (inst
                                                             -5
                                                             "0"
                                                             "i+1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "nth"
                                                                 +)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "i")
                                                              (("2"
                                                                (expand
                                                                 "length"
                                                                 +)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (assert)
                                                              (("3"
                                                                (expand
                                                                 "length"
                                                                 +)
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2 3)
                                  (("2"
                                    (expand "no_repetitions?")
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (typepred "j")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (typepred "i")
                                              (("2"
                                                (inst - "i+1" "j+1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "nth" 2)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "j")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       +)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (typepred "i")
                                                  (("3"
                                                    (expand "length" +)
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((j skolem-const-decl "below(length[T](l))" c_topological_sort nil)
    (i skolem-const-decl "below(length[T](l))" c_topological_sort nil)
    (nth def-decl "T" list_props nil)
    (i skolem-const-decl "below(length[T](l))" c_topological_sort nil)
    (below type-eq-decl nil naturalnumbers nil)
    (l skolem-const-decl "list[T]" c_topological_sort nil)
    (y skolem-const-decl "T" c_topological_sort nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (< const-decl "bool" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member_nth formula-decl nil more_list_props structures)
    (temp_count_same formula-decl nil c_topological_sort nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (O const-decl "T3" function_props nil)
    (/= const-decl "boolean" notequal nil)
    (filter def-decl "list[T]" filters nil)
    (length def-decl "nat" list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (temp_count const-decl "nat" c_topological_sort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (temp_count_bound 0
  (temp_count_bound-1 nil 3817537046
   ("" (induct l)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("x" "l"))
      (("2" (flatten)
        (("2" (skeep)
          (("2" (inst -1 "m")
            (("2" (expand "temp_count")
              (("2" (expand "filter" 1)
                (("2" (expand "length" 1 (1 3))
                  (("2" (lift-if) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (filter def-decl "list[T]" filters nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (length def-decl "nat" list_props nil)
    (temp_count const-decl "nat" c_topological_sort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (perm_count_same 0
  (perm_count_same-1 nil 3817552361
   ("" (induct l)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("x" "l"))
      (("2" (flatten)
        (("2" (skeep)
          (("2" (inst? -)
            (("2" (assert)
              (("2" (expand "member" 1)
                (("2" (flatten)
                  (("2" (assert)
                    (("2" (expand "perm_count")
                      (("2" (expand "filter" 3)
                        (("2" (expand "length" 3 (1 3))
                          (("2" (replace -1 * LR)
                            (("2" (assert)
                              (("2"
                                (lift-if)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "o ")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((O const-decl "T3" function_props nil)
    (filter def-decl "list[T]" filters nil)
    (length def-decl "nat" list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (perm_count const-decl "nat" c_topological_sort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (member def-decl "bool" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (perm_count_same2 0
  (perm_count_same2-1 nil 3817557917
   ("" (induct l) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((O const-decl "T3" function_props nil)
    (filter def-decl "list[T]" filters nil)
    (length def-decl "nat" list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (perm_count const-decl "nat" c_topological_sort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (perm_count_incr 0
  (perm_count_incr-1 nil 3817556954
   ("" (induct l) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((O const-decl "T3" function_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (filter def-decl "list[T]" filters nil)
    (length def-decl "nat" list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (perm_count const-decl "nat" c_topological_sort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (perm_count_bound 0
  (perm_count_bound-1 nil 3817552878
   ("" (induct l) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((O const-decl "T3" function_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (filter def-decl "list[T]" filters nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (length def-decl "nat" list_props nil)
    (perm_count const-decl "nat" c_topological_sort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (greater_marking_update 0
  (greater_marking_update-1 nil 3817539462 ("" (grind) nil nil)
   ((greater_marking const-decl "bool" c_topological_sort nil))
   shostak))
 (greater_marking_temp_count 0
  (greater_marking_temp_count-1 nil 3817544045
   ("" (induct l)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("x" "l"))
      (("2" (flatten)
        (("2" (skeep)
          (("2" (inst? -)
            (("2" (assert)
              (("2" (expand "temp_count")
                (("2" (expand "filter" 1)
                  (("2" (expand "length" 1 (1 3))
                    (("2" (assert)
                      (("2" (lift-if)
                        (("2" (lift-if)
                          (("2" (assert)
                            (("2" (lift-if)
                              (("2"
                                (assert)
                                (("2"
                                  (ground)
                                  (("2"
                                    (expand "greater_marking")
                                    (("2"
                                      (inst -3 "x")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (expand "o ")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (O const-decl "T3" function_props nil)
    (filter def-decl "list[T]" filters nil)
    (length def-decl "nat" list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (temp_count const-decl "nat" c_topological_sort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (greater_marking const-decl "bool" c_topological_sort nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (greater_marking_perm_count 0
  (greater_marking_perm_count-1 nil 3817552899
   (""
    (case "FORALL (l: list[T]) (m1, m2: marking) (x: T):
               greater_marking(m1, m2) IMPLIES perm_count(l, m1) >= perm_count(l, m2)")
    (("1" (induct l)
      (("1" (skeep) (("1" (skolem 1 "y") (("1" (grind) nil nil)) nil))
        nil)
       ("2" (skolem 1 ("x" "l"))
        (("2" (flatten)
          (("2" (skeep)
            (("2" (skolem 1 "y")
              (("2" (inst -1 "m1" "m2")
                (("2" (inst -1 "y")
                  (("2" (assert)
                    (("2" (flatten)
                      (("2" (assert)
                        (("2" (expand "perm_count")
                          (("2" (expand "filter" 2)
                            (("2" (expand "length" 2 (1 3))
                              (("2"
                                (lift-if)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (expand "member" -3)
                                    (("2"
                                      (split -3)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -1 * LR)
                                          (("1"
                                            (lift-if)
                                            (("1"
                                              (expand "o" 2 (1 2 7))
                                              (("1"
                                                (inst
                                                 -5
                                                 "l"
                                                 "m1"
                                                 "m2"
                                                 "x")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (lift-if)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "o ")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (ground)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct l)
        (("1" (grind) nil nil)
         ("2" (skolem 1 ("x" "l"))
          (("2" (flatten)
            (("2" (skeep)
              (("2" (skolem 1 "y")
                (("2" (inst -1 "m1" "m2")
                  (("2" (inst -1 "y")
                    (("2" (flatten)
                      (("2" (assert)
                        (("2" (expand "perm_count")
                          (("2" (expand "filter" 1)
                            (("2" (expand "length" 1 (1 3))
                              (("2"
                                (expand "greater_marking")
                                (("2"
                                  (inst -2 "x")
                                  (("2"
                                    (assert)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member def-decl "bool" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (> const-decl "bool" reals nil)
    (list_induction formula-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (O const-decl "T3" function_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (filter def-decl "list[T]" filters nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (list type-decl nil list_adt nil)
    (mark type-decl nil c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (greater_marking const-decl "bool" c_topological_sort nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (perm_count const-decl "nat" c_topological_sort nil))
   shostak))
 (visit_TCC1 0
  (visit_TCC11-1 nil 3846587962
   ("" (assert)
    (("" (skeep)
      (("" (typepred "adjs")
        (("" (assert)
          (("" (expand "is_dag")
            (("" (inst -2 child_id)
              (("" (delete -1)
                (("" (assert)
                  (("" (typepred "node_id")
                    (("" (inst - "child")
                      (("" (assert)
                        (("" (split -2)
                          (("1" (assert)
                            (("1" (replace * * LR)
                              (("1"
                                (delete -5)
                                (("1"
                                  (case-replace "node_id = child_id")
                                  (("1"
                                    (delete -1)
                                    (("1"
                                      (inst
                                       -8
                                       "gen_seq2(G, child, child)")
                                      (("1"
                                        (replace -5 * LR)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (expand "path?")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (inst -9 0 1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "finseq_appl")
                                                      (("1"
                                                        (expand
                                                         "gen_seq2")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (ground)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil)
                                       ("3" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "G")
                                    (("2"
                                      (expand "cdigraph")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (expand "no_repetitions?")
                                          (("2"
                                            (expand "node")
                                            (("2"
                                              (inst
                                               -3
                                               "child_id"
                                               "node_id")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep -1)
                            (("2" (inst -9 "add1(w, child)")
                              (("1"
                                (expand "path?")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (inst -10 0 "length(w)")
                                    (("1" (grind) nil nil)
                                     ("2" (grind) nil nil)
                                     ("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (use "walk?_add1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (delete 2 3)
                                    (("2"
                                      (typepred "child")
                                      (("2"
                                        (split 1)
                                        (("1" (grind) nil nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil
   (visit subtype "(number_fields.-)(length(c_topological_sort.w), 1)"
    "below[w`length]")))
 (visit_TCC2 0
  (visit_TCC2-1 nil 3846653608
   ("" (skeep*)
    (("" (assert)
      (("" (expand "topperm_list")
        (("" (flatten)
          (("" (expand "permanent_list?")
            (("" (inst -5 "node")
              (("" (assert)
                (("" (case-replace "lp = null")
                  (("1" (expand "member") (("1" (propax) nil nil)) nil)
                   ("2" (assert)
                    (("2" (expand "length") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (list type-decl nil list_adt nil)
    (member def-decl "bool" list_props nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (vert? const-decl "bool" digraphs_ nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil (visit subtype "0" "below[length[T](lp)]")))
 (visit_TCC3 0
  (visit_TCC1-1 nil 3817552266
   ("" (skeep*)
    (("" (use "perm_count_bound")
      (("" (assert) (("" (expand "size") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((perm_count_bound formula-decl nil c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (size const-decl "nat" c_digraphs_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (visit subtype
    "(number_fields.-)((number_fields.+)(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G), 1), c_topological_sort.perm_count(data(c_topological_sort.G), c_topological_sort.m))"
    "nat")))
 (visit_TCC4 0
  (visit_TCC1-1 nil 3817537046
   ("" (skeep*)
    (("" (use "temp_count_bound")
      (("" (assert) (("" (expand "size") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((temp_count_bound formula-decl nil c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (size const-decl "nat" c_digraphs_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (visit subtype
    "(number_fields.-)((number_fields.+)(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G), 1), c_topological_sort.temp_count(data(c_topological_sort.G), c_topological_sort.m))"
    "nat")))
 (visit_TCC5 0
  (visit_TCC3-1 nil 3817552266
   ("" (skeep*)
    (("" (use "perm_count_bound")
      (("" (expand "size") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((perm_count_bound formula-decl nil c_topological_sort nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (edge? const-decl "bool" digraphs_ nil)
    (in_path? const-decl "bool" c_topological_sort nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (member def-decl "bool" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (size const-decl "nat" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (vert? const-decl "bool" digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (visit subtype
    "(number_fields.-)((number_fields.+)(c_digraphs_def[c_topological_sort.T].size(G1), 1), c_topological_sort.perm_count(data(G1), c_topological_sort.z`1))"
    "nat")))
 (visit_TCC6 0
  (visit_TCC2-1 nil 3817537046
   ("" (skeep*)
    (("" (use "temp_count_bound")
      (("" (expand "size") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((temp_count_bound formula-decl nil c_topological_sort nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (edge? const-decl "bool" digraphs_ nil)
    (in_path? const-decl "bool" c_topological_sort nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (member def-decl "bool" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (size const-decl "nat" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (vert? const-decl "bool" digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (visit subtype
    "(number_fields.-)((number_fields.+)(c_digraphs_def[c_topological_sort.T].size(G1), 1), c_topological_sort.temp_count(data(G1), c_topological_sort.z`1))"
    "nat")))
 (visit_TCC7 0
  (visit_TCC5-1 nil 3817552266
   ("" (skeep*)
    (("" (use "perm_count_bound")
      (("" (expand "size") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((perm_count_bound formula-decl nil c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (size const-decl "nat" c_digraphs_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (visit subtype
    "(number_fields.-)((number_fields.+)(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G), 1), c_topological_sort.perm_count(data(c_topological_sort.G), c_topological_sort.m))"
    "nat")))
 (visit_TCC8 0
  (visit_TCC3-1 nil 3817537046
   ("" (skeep*)
    (("" (use "temp_count_bound")
      (("" (expand "size") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((temp_count_bound formula-decl nil c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (size const-decl "nat" c_digraphs_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (visit subtype
    "(number_fields.-)((number_fields.+)(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G), 1), c_topological_sort.temp_count(data(c_topological_sort.G), c_topological_sort.m))"
    "nat")))
 (visit_TCC9 0
  (visit_TCC2-1 nil 3817468360 ("" (subtype-tcc) nil nil)
   ((T formal-nonempty-type-decl nil c_topological_sort nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (vert? const-decl "bool" digraphs_ nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (visit subtype "c_topological_sort.node"
    "c_topological_sort.Vert(c_topological_sort.G)")))
 (visit_TCC10 0
  (visit_TCC5-1 nil 3817539461
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "l")
        (("" (assert)
          (("" (expand "nth" +)
            (("" (split)
              (("1" (expand "topperm_list")
                (("1" (flatten)
                  (("1" (expand "permanent_list?")
                    (("1" (expand "topological_list?")
                      (("1" (split 1)
                        (("1" (skeep) (("1" (grind) nil nil)) nil)
                         ("2" (skeep*)
                          (("2" (expand "nth" -1)
                            (("2" (lift-if)
                              (("2"
                                (split -1)
                                (("1"
                                  (comment
                                   "All paths starting at the node end in members of l")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (typepred "adjs")
                                        (("1"
                                          (expand "from?")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (case "w!1`length = 2")
                                              (("1"
                                                (hide -2 -3 -8)
                                                (("1"
                                                  (replace -11 * LR)
                                                  (("1"
                                                    (hide -11)
                                                    (("1"
                                                      (swap-rel -10)
                                                      (("1"
                                                        (replaces)
                                                        (("1"
                                                          (typepred
                                                           "w!1")
                                                          (("1"
                                                            (expand
                                                             "walk?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (inst
                                                                 -3
                                                                 0)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "finseq_appl")
                                                                    (("1"
                                                                      (expand
                                                                       "verts_in?")
                                                                      (("1"
                                                                        (inst
                                                                         -2
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "digraph_verts")
                                                                          (("1"
                                                                            (expand
                                                                             "vert")
                                                                            (("1"
                                                                              (replaces)
                                                                              (("1"
                                                                                (use
                                                                                 "member_iff_nth[T]")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (skolem
                                                                                     -1
                                                                                     "x_id")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "node")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -5
                                                                                         "x_id")
                                                                                        (("1"
                                                                                          (replaces)
                                                                                          (("1"
                                                                                            (split
                                                                                             -3)
                                                                                            (("1"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (inst
                                                                                               -5
                                                                                               "x")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "member_iff_nth[T]")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     l
                                                                                                     x)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (skolem
                                                                                                         -1
                                                                                                         "x_l_id")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           1
                                                                                                           "x_l_id+1")
                                                                                                          (("1"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -1)
                                                (("2"
                                                  (replace -12 * LR)
                                                  (("2"
                                                    (hide -12)
                                                    (("2"
                                                      (replace -3 * LR)
                                                      (("2"
                                                        (hide -3)
                                                        (("2"
                                                          (swap-rel
                                                           -10)
                                                          (("2"
                                                            (name
                                                             "z"
                                                             "seq(w!1)(1)")
                                                            (("2"
                                                              (typepred
                                                               "w!1")
                                                              (("2"
                                                                (expand
                                                                 "walk?")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (expand
                                                                     "verts_in?")
                                                                    (("2"
                                                                      (expand
                                                                       "digraph_verts")
                                                                      (("2"
                                                                        (expand
                                                                         "vert")
                                                                        (("2"
                                                                          (inst-cp
                                                                           -2
                                                                           1)
                                                                          (("2"
                                                                            (replaces)
                                                                            (("2"
                                                                              (use
                                                                               "member_iff_nth[T]")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (skolem
                                                                                   -1
                                                                                   "z_id")
                                                                                  (("2"
                                                                                    (hide
                                                                                     -6)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -6
                                                                                       "z_id")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -5
                                                                                         "0")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "finseq_appl")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replaces)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "node")
                                                                                                  (("1"
                                                                                                    (reveal
                                                                                                     -7)
                                                                                                    (("1"
                                                                                                      (replaces)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -4)
                                                                                                        (("1"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (inst
                                                                                                           -8
                                                                                                           "z")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "member_iff_nth[T]")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 l
                                                                                                                 z)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (skolem
                                                                                                                     -1
                                                                                                                     "z_l_id")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -10
                                                                                                                       "z_l_id"
                                                                                                                       "x")
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -1
                                                                                                                         *
                                                                                                                         LR)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (split
                                                                                                                             -10)
                                                                                                                            (("1"
                                                                                                                              (skeep)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 2
                                                                                                                                 "j+1")
                                                                                                                                (("1"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (grind)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (inst
                                                                                                                               1
                                                                                                                               "(# length := w!1`length - 1, seq := (Lambda (i:below(w!1`length - 1)): w!1`seq(i+1)) #)")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (reveal
                                                                                                                                   -11)
                                                                                                                                  (("1"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (typepred
                                                                                                                                 "w!1")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "walk?")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "verts_in?")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (split
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (skeep)
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "finseq_appl")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -3
                                                                                                                                                 "1+n")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (grind)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    ";;; All paths starting at the node end in members of l"))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (inst -5 "i-1" "x")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -5)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst 2 "j+1")
                                              (("1" (grind) nil nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "no_repetitions?")
                          (("3" (skeep)
                            (("3" (expand "nth")
                              (("3"
                                (ground)
                                (("3"
                                  (lift-if)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (typepred "node_id")
                                      (("3"
                                        (replaces)
                                        (("3"
                                          (ground)
                                          (("1"
                                            (inst? -)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -2 * LR)
                                                (("1"
                                                  (use
                                                   "member_iff_nth[T]")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lift-if)
                                            (("2"
                                              (ground)
                                              (("1"
                                                (inst? -)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -2 * RL)
                                                    (("1"
                                                      (use
                                                       "member_iff_nth[T]")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst -6 "i-1" "j-1")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lift-if)
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (ground)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (use "greater_marking_update") nil nil)
               ("3" (use "suffix_supl[T]")
                (("3" (flatten)
                  (("3" (assert)
                    (("3" (hide -1 2)
                      (("3" (inst 1 "cons(node,null)")
                        (("3" (expand "append")
                          (("3" (expand "append")
                            (("3" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (skeep*)
                (("4" (assert) (("4" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((topological_list? const-decl "bool" c_topological_sort nil)
    (i skolem-const-decl "below(length(cons[Vert(G)](node, l)))"
       c_topological_sort nil)
    (j skolem-const-decl "below(length(l))" c_topological_sort nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (verts_in? const-decl "bool" walks_ nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (m skolem-const-decl "marking" c_topological_sort nil)
    (l skolem-const-decl "(topperm_list(G, m))" c_topological_sort nil)
    (x_l_id skolem-const-decl "below(length[T](l))" c_topological_sort
     nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (node skolem-const-decl "{v: T | member(v, data(G))}"
     c_topological_sort nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (x_id skolem-const-decl "below(length[T](data(G)))"
     c_topological_sort nil)
    (G skolem-const-decl "c_digraph[T]" c_topological_sort nil)
    (length def-decl "nat" list_props nil)
    (member_iff_nth formula-decl nil more_list_props structures)
    (vert const-decl "bool" c_digraphs_def nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (z_id skolem-const-decl "below(length[T](data(G)))"
     c_topological_sort nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (w!1 skolem-const-decl
     "Walk[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](G)" c_topological_sort nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (j skolem-const-decl "below(length(l))" c_topological_sort nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (edge? const-decl "bool" digraphs_ nil)
    (below type-eq-decl nil naturalnumbers nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (from? const-decl "bool" walks_ nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (greater_marking_update formula-decl nil c_topological_sort nil)
    (append def-decl "list[T]" list_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (suffix_supl formula-decl nil more_list_props structures)
    (nth def-decl "T" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (vert? const-decl "bool" digraphs_ nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (visit subtype
    "IN_2(c_topological_sort.m WITH [(c_topological_sort.node) := c_topological_sort.permanent], list_adt[c_topological_sort.Vert(c_topological_sort.G)].cons(c_topological_sort.node, c_topological_sort.l))"
    "{res: [c_topological_sort.loop(c_topological_sort.G) + [c_topological_sort.marking, list_adt[c_topological_sort.Vert(c_topological_sort.G)].list]] | CASES res OF IN_1(loop): booleans.TRUE, IN_2(res): (LET (mp, lp) = res IN LET node = c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.node_id) IN    c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.mp)(c_topological_sort.lp) ∧ c_topological_sort.greater_marking(c_topological_sort.mp, c_topological_sort.m) ∧ more_list_props[c_topological_sort.T].suffix?(c_topological_sort.l, c_topological_sort.lp) ∧ c_topological_sort.permanent?(c_topological_sort.mp(c_topological_sort.node)) ∧ (FORALL x: booleans.IMPLIES(list_props[c_topological_sort.T].member(c_topological_sort.x, c_topological_sort.lp), booleans.IMPLIES((booleans.NOT)(list_props[c_topological_sort.T].member(c_topological_sort.x, c_topological_sort.l)), (booleans.∨(c_topological_sort.x = c_topological_sort.node, EXISTS (w: walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].Walk(c_topological_sort.G)): walks_[c_topological_sort.T, digraph_type[c_topological_sort.T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].from?(w, c_topological_sort.node, c_topological_sort.x)))))) ∧ (list_props[c_topological_sort.T].nth(c_topological_sort.lp, 0) = c_topological_sort.node)) ENDCASES}")))
 (visit_TCC11 0
  (visit_TCC4-1 nil 3817468360
   ("" (skeep*)
    (("" (split 1)
      (("1" (skeep*)
        (("1" (typepred "x")
          (("1" (typepred "adjs")
            (("1" (inst - x)
              (("1" (assert)
                (("1" (expand "member")
                  (("1" (assert) (("1" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (typepred "adjs")
          (("2" (inst -3 "x")
            (("2" (assert)
              (("2" (replace -6 -3 LR)
                (("2" (expand "member" -3) (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((VertID type-eq-decl nil c_topological_sort nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (size const-decl "nat" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (edge? const-decl "bool" digraphs_ nil)
    (below type-eq-decl nil naturalnumbers nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (mark type-decl nil c_topological_sort nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (visit subtype "c_topological_sort.adjsp"
    "{k: c_topological_sort.Adjs(c_topological_sort.G, c_topological_sort.node_id) | FORALL (x: c_topological_sort.VertID(c_topological_sort.G)): booleans.IMPLIES(digraphs_[c_topological_sort.T, digraph_type[c_topological_sort.T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].edge?(c_topological_sort.G)(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.node_id), c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)), booleans.∨(list_props[c_topological_sort.VertID(c_topological_sort.G)].member(x, k), c_topological_sort.permanent?(c_topological_sort.m(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)))))}")))
 (visit_TCC12 0
  (visit_TCC5-1 nil 3817468360
   ("" (skeep*) (("" (replaces) (("" (grind) nil nil)) nil)) nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (lex3 const-decl "ordinal" lex3 nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (temp_count const-decl "nat" c_topological_sort nil)
    (perm_count const-decl "nat" c_topological_sort nil)
    (size const-decl "nat" c_digraphs_def nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (< def-decl "bool" ordinals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (visit termination
    "c_topological_sort.visit(c_topological_sort.G)(c_topological_sort.m, c_topological_sort.l, c_topological_sort.node_id, c_topological_sort.w, c_topological_sort.adjsp)"
    "nil")))
 (visit_TCC13 0
  (visit_TCC6-1 nil 3817468360
   ("" (skeep*)
    (("" (split)
      (("1" (replace -4 * LR) (("1" (assert) nil nil)) nil)
       ("2" (skeep*)
        (("2" (case "edge?(G)(node,child)")
          (("1" (lift-if -)
            (("1" (assert)
              (("1" (typepred "node_id")
                (("1" (inst - "y")
                  (("1" (ground)
                    (("1" (replace -5 * RL)
                      (("1" (replace -1 * LR)
                        (("1" (replace -7 * RL)
                          (("1" (replace -1 * RL)
                            (("1" (inst 3 "gen_seq2(G, node, child)")
                              (("1" (grind) nil nil)
                               ("2" (grind) nil nil)
                               ("3" (grind) nil nil)
                               ("4" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (inst 3 "add1(w, child)")
                        (("1" (grind) nil nil)
                         ("2" (use "walk?_add1")
                          (("2" (expand "from?")
                            (("2" (flatten)
                              (("2"
                                (assert)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "adjs")
            (("2" (inst -2 "child_id") (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (visit subtype
    "IN_1(walks_[c_topological_sort.T, digraph_type[c_topological_sort.T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].add1(c_topological_sort.w, c_topological_sort.child))"
    "{res: [c_topological_sort.loop(c_topological_sort.G) + [c_topological_sort.marking, list_adt[c_topological_sort.Vert(c_topological_sort.G)].list]] | CASES res OF IN_1(loop): booleans.TRUE, IN_2(res): (LET (mp, lp) = res IN LET node = c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.node_id) IN    c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.mp)(c_topological_sort.lp) ∧ c_topological_sort.greater_marking(c_topological_sort.mp, c_topological_sort.m) ∧ more_list_props[c_topological_sort.T].suffix?(c_topological_sort.l, c_topological_sort.lp) ∧ c_topological_sort.permanent?(c_topological_sort.mp(c_topological_sort.node)) ∧ (FORALL x: booleans.IMPLIES(list_props[c_topological_sort.T].member(c_topological_sort.x, c_topological_sort.lp), booleans.IMPLIES((booleans.NOT)(list_props[c_topological_sort.T].member(c_topological_sort.x, c_topological_sort.l)), (booleans.∨(c_topological_sort.x = c_topological_sort.node, EXISTS (w: walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].Walk(c_topological_sort.G)): walks_[c_topological_sort.T, digraph_type[c_topological_sort.T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].from?(w, c_topological_sort.node, c_topological_sort.x)))))) ∧ (list_props[c_topological_sort.T].nth(c_topological_sort.lp, 0) = c_topological_sort.node)) ENDCASES}")))
 (visit_TCC14 0
  (visit_TCC11-1 nil 3817561836
   ("" (skeep*)
    (("" (typepred "l")
      (("" (expand "topperm_list")
        (("" (expand "permanent_list?")
          (("" (expand "topological_list?")
            (("" (split)
              (("1" (skeep) (("1" (grind) nil nil)) nil)
               ("2" (skeep*)
                (("2" (inst - i x) (("2" (grind) nil nil)) nil)) nil)
               ("3" (flatten) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((topperm_list const-decl "bool" c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (vert? const-decl "bool" digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (G skolem-const-decl "c_digraph[T]" c_topological_sort nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (child_id skolem-const-decl "VertID(G)" c_topological_sort nil)
    (length def-decl "nat" list_props nil)
    (m skolem-const-decl "marking" c_topological_sort nil)
    (l skolem-const-decl "(topperm_list(G, m))" c_topological_sort nil)
    (below type-eq-decl nil naturalnumbers nil)
    (from? const-decl "bool" walks_ nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (/= const-decl "boolean" notequal nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (visit subtype "c_topological_sort.l"
    "(c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.m WITH [(c_topological_sort.child) := c_topological_sort.temporary]))")))
 (visit_TCC15 0
  (visit_TCC7-1 nil 3817468360
   ("" (skeep*) (("" (replaces) (("" (assert) nil nil)) nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (visit subtype "c_topological_sort.child_id"
    "{id: c_topological_sort.VertID(c_topological_sort.G) | (booleans.NOT)(c_topological_sort.permanent?(c_topological_sort.m WITH [(c_topological_sort.child) := c_topological_sort.temporary](c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(id))))}")))
 (visit_TCC16 0
  (visit_TCC17-1 nil 3846587962
   ("" (assert)
    (("" (skeep)
      (("" (split)
        (("1" (use "walk?_add1")
          (("1" (assert)
            (("1" (typepred "G")
              (("1" (expand "cdigraph")
                (("1" (flatten)
                  (("1" (expand "vert")
                    (("1" (expand "edge?")
                      (("1" (expand "digraph_edges")
                        (("1" (typepred "w")
                          (("1" (replaces)
                            (("1" (typepred "adjs")
                              (("1"
                                (inst -2 child_id)
                                (("1"
                                  (assert)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil)
         ("3" (skeep)
          (("3" (lift-if)
            (("3" (assert)
              (("3" (ground)
                (("1" (replaces)
                  (("1" (expand "in_path?")
                    (("1" (inst 1 "length(w)")
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "w")
                  (("2" (expand "in_path?")
                    (("2" (inst? -)
                      (("2" (assert)
                        (("2" (skeep -)
                          (("2" (inst 1 i)
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (typepred "w")
                  (("3" (expand "in_path?")
                    (("3" (skeep)
                      (("3" (expand "add1") (("3" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (i skolem-const-decl "below(length(w))" c_topological_sort nil)
    (child skolem-const-decl "{v: T | member(v, data(G))}"
     c_topological_sort nil)
    (child_id skolem-const-decl "VertID(G)" c_topological_sort nil)
    (w skolem-const-decl "{w: Walk(G) |
   seq(w)(length(w) - 1) = node(G)(node_id) AND
    FORALL (x: Vert(G)): temporary?(m(x)) IFF in_path?(G)(w, x)}"
     c_topological_sort nil)
    (node_id skolem-const-decl
     "{id: VertID(G) | NOT permanent?(m(node(G)(id)))}"
     c_topological_sort nil)
    (m skolem-const-decl "marking" c_topological_sort nil)
    (G skolem-const-decl "c_digraph[T]" c_topological_sort nil)
    (walk?_add1 formula-decl nil walks_ nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (in_path? const-decl "bool" c_topological_sort nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (vert? const-decl "bool" digraphs_ nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (member def-decl "bool" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (size const-decl "nat" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (edge? const-decl "bool" digraphs_ nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (verts_in? const-decl "bool" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (add1 const-decl "prewalk" walks_ nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (visit subtype
    "walks_[c_topological_sort.T, digraph_type[c_topological_sort.T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].add1(c_topological_sort.w, c_topological_sort.child)"
    "{w: walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].Walk(c_topological_sort.G) | booleans.AND(seq(w)((number_fields.-)(length(w), 1)) = c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.child_id), FORALL (x: c_topological_sort.Vert(c_topological_sort.G)): booleans.IFF(c_topological_sort.temporary?(c_topological_sort.m WITH [(c_topological_sort.child) := c_topological_sort.temporary](x)), c_topological_sort.in_path?(c_topological_sort.G)(w, x)))}")))
 (visit_TCC17 0
  (visit_TCC16-1 nil 3846645969
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "child_id")
        (("" (typepred "adjs")
          (("" (replaces)
            (("" (expand "every")
              (("" (expand "size")
                (("" (typepred "G")
                  (("" (expand "cdigraph")
                    (("" (flatten) (("" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (edge? const-decl "bool" digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (size const-decl "nat" c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (visit subtype "c_topological_sort.child_id"
    "below[length[list[nat]](adjs(G))]")))
 (visit_TCC18 0
  (visit_TCC15-1 nil 3846601620
   ("" (skeep*)
    (("" (typepred "nth[list[nat]](adjs(G), child_id)")
      (("1" (assert)
        (("1" (split)
          (("1" (use "every_nth[number]")
            (("1" (assert)
              (("1" (hide 2)
                (("1" (skeep)
                  (("1" (use "every_nth[number]")
                    (("1" (assert)
                      (("1" (inst -1 "i")
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (expand "node")
                              (("1"
                                (typepred "G")
                                (("1"
                                  (expand "cdigraph")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "list_of_idxs")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (expand "edge?")
              (("2" (expand "digraph_edges")
                (("2" (expand "edges")
                  (("2" (assert)
                    (("2" (expand "vert")
                      (("2" (expand "node")
                        (("2" (split 1)
                          (("1" (use "member_iff_nth[T]")
                            (("1" (grind) nil nil)) nil)
                           ("2" (lemma "member_iff_nth[T]")
                            (("2" (rewrite "idx_nth_no_rep")
                              (("1"
                                (rewrite "idx_nth_no_rep")
                                (("1"
                                  (typepred "G")
                                  (("1"
                                    (expand "cdigraph")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "G")
                                (("2"
                                  (expand "cdigraph")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (assert)
            (("3" (replace -4 * RL)
              (("3" (skeep)
                (("3" (expand "edge?")
                  (("3" (expand "digraph_edges")
                    (("3" (expand "edges")
                      (("3" (flatten)
                        (("3" (assert)
                          (("3" (replace -7 * LR)
                            (("3" (expand "node")
                              (("3"
                                (assert)
                                (("3"
                                  (use "idx_nth_no_rep[T]")
                                  (("1"
                                    (replace -1 * LR)
                                    (("1"
                                      (use
                                       "idx_nth_no_rep[T]"
                                       (l "data(G)" i child_id))
                                      (("1"
                                        (replace -1 * LR)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (typepred "G")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "G")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "child_id")
        (("2" (expand "size")
          (("2" (typepred "G") (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((VertID type-eq-decl nil c_topological_sort nil)
    (size const-decl "nat" c_digraphs_def nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (every_nth formula-decl nil list_props nil)
    (edge? const-decl "bool" digraphs_ nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (member_iff_nth formula-decl nil more_list_props structures)
    (idx_nth_no_rep formula-decl nil more_list_props structures)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (G skolem-const-decl "c_digraph[T]" c_topological_sort nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (visit subtype
    "list_props[list[nat]].nth(adjs(c_topological_sort.G), c_topological_sort.child_id)"
    "{k: c_topological_sort.Adjs(c_topological_sort.G, c_topological_sort.child_id) | FORALL (x: c_topological_sort.VertID(c_topological_sort.G)): booleans.IMPLIES(digraphs_[c_topological_sort.T, digraph_type[c_topological_sort.T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].edge?(c_topological_sort.G)(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.child_id), c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)), booleans.∨(list_props[c_topological_sort.VertID(c_topological_sort.G)].member(x, k), c_topological_sort.permanent?(c_topological_sort.m WITH [(c_topological_sort.child) := c_topological_sort.temporary](c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)))))}"))
  (visit_TCC8-1 nil 3817468360
   ("" (skeep*)
    (("" (typepred "nth[list[nat]](adjs(G), child_id)")
      (("1" (assert)
        (("1" (split 2)
          (("1" (use "every_nth[number]")
            (("1" (assert)
              (("1" (hide 2)
                (("1" (skeep)
                  (("1" (use "every_nth[number]")
                    (("1" (assert)
                      (("1" (inst -1 "i")
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (expand "node")
                              (("1"
                                (typepred "G")
                                (("1"
                                  (expand "cdigraph")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "list_of_idxs")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (expand "edge?")
              (("2" (expand "digraph_edges")
                (("2" (expand "edges")
                  (("2" (assert)
                    (("2" (expand "vert")
                      (("2" (expand "node")
                        (("2" (split 1)
                          (("1" (use "member_iff_nth[T]")
                            (("1" (grind) nil nil)) nil)
                           ("2" (lemma "member_iff_nth[T]")
                            (("2" (rewrite "idx_nth_no_rep")
                              (("1"
                                (rewrite "idx_nth_no_rep")
                                (("1"
                                  (typepred "G")
                                  (("1"
                                    (expand "cdigraph")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "G")
                                (("2"
                                  (expand "cdigraph")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (assert)
            (("3" (replace -4 * RL)
              (("3" (skeep)
                (("3" (expand "edge?")
                  (("3" (expand "digraph_edges")
                    (("3" (expand "edges")
                      (("3" (flatten)
                        (("3" (assert)
                          (("3" (replace -7 * LR)
                            (("3" (expand "node")
                              (("3"
                                (assert)
                                (("3"
                                  (use "idx_nth_no_rep[T]")
                                  (("1"
                                    (replace -1 * LR)
                                    (("1"
                                      (use
                                       "idx_nth_no_rep[T]"
                                       (l "data(G)" i child_id))
                                      (("1"
                                        (replace -1 * LR)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (typepred "G")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "G")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "child_id")
        (("2" (expand "size")
          (("2" (typepred "G") (("2" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((size const-decl "nat" c_digraphs_def nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (list type-decl nil list_adt nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (edge? const-decl "bool" digraphs_ nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (member_iff_nth formula-decl nil more_list_props structures)
    (idx_nth_no_rep formula-decl nil more_list_props structures)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil))
   nil
   (visit subtype
    "list_props[list[nat]].nth(adjs(c_topological_sort.G), c_topological_sort.child_id)"
    "{k: c_topological_sort.Adjs(c_topological_sort.G, c_topological_sort.child_id) | FORALL (x: c_topological_sort.VertID(c_topological_sort.G)): booleans.IMPLIES(digraphs_[c_topological_sort.T, digraph_type[c_topological_sort.T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].edge?(c_topological_sort.G)(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.child_id), c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)), booleans.∨(list_props[c_topological_sort.VertID(c_topological_sort.G)].member(x, k), c_topological_sort.permanent?(c_topological_sort.m WITH [(c_topological_sort.child) := c_topological_sort.temporary](c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)))))}")))
 (visit_TCC19 0
  (visit_tCC14-opt "no case at the begining" 3817556888
   ("" (skeep*)
    (("" (use "lex3_lt")
      (("1" (replace -1 * LR)
        (("1" (hide -1)
          (("1" (flatten)
            (("1" (use "perm_count_same2")
              (("1" (assert)
                (("1" (use "lex2_lt")
                  (("1" (replace -1 * LR)
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (lemma "temp_count_incr")
                          (("1" (inst? -)
                            (("1" (assert)
                              (("1"
                                (typepred "G")
                                (("1"
                                  (expand "cdigraph")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (use "temp_count_bound")
                    (("2" (expand "size") (("2" (assert) nil nil))
                      nil))
                    nil)
                   ("3" (use "temp_count_bound")
                    (("3" (expand "size") (("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "temp_count_bound")
        (("2" (expand "size") (("2" (assert) nil nil)) nil)) nil)
       ("3" (use "perm_count_bound")
        (("3" (expand "size") (("3" (assert) nil nil)) nil)) nil)
       ("4" (use "temp_count_bound")
        (("4" (expand "size") (("4" (assert) nil nil)) nil)) nil)
       ("5" (use "perm_count_bound")
        (("5" (expand "size") (("5" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((lex3_lt formula-decl nil lex3 nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (edge? const-decl "bool" digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (< const-decl "bool" reals nil)
    (temp_count const-decl "nat" c_topological_sort nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (size const-decl "nat" c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (G skolem-const-decl "c_digraph[T]" c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (perm_count const-decl "nat" c_topological_sort nil)
    (m skolem-const-decl "marking" c_topological_sort nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (member def-decl "bool" list_props nil)
    (child skolem-const-decl "{v: T | member(v, data(G))}"
     c_topological_sort nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (perm_count_same2 formula-decl nil c_topological_sort nil)
    (lex2_lt formula-decl nil lex2 nil)
    (temp_count_incr formula-decl nil c_topological_sort nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (temp_count_bound formula-decl nil c_topological_sort nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (perm_count_bound formula-decl nil c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak
   (visit termination
    "c_topological_sort.visit(c_topological_sort.G)(c_topological_sort.m WITH [(c_topological_sort.child) := c_topological_sort.temporary], c_topological_sort.l, c_topological_sort.child_id, walks_[c_topological_sort.T, digraph_type[c_topological_sort.T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].add1(c_topological_sort.w, c_topological_sort.child), list_props[list[nat]].nth(adjs(c_topological_sort.G), c_topological_sort.child_id))"
    "nil"))
  (visit_TCC9-1 nil 3817468360
   ("" (skeep*)
    ((""
      (case "temp_count(data(G), m WITH [child := temporary]) > temp_count(data(G), m)")
      (("1" (use "lex2_lt")
        (("1" (replace -1 * LR) (("1" (assert) nil nil)) nil)
         ("2" (use "temp_count_bound")
          (("2" (expand "size") (("2" (assert) nil nil)) nil)) nil)
         ("3" (use "temp_count_bound")
          (("3" (expand "size") (("3" (assert) nil nil)) nil)) nil))
        nil)
       ("2" (hide 3)
        (("2" (lemma "temp_count_incr")
          (("2" (inst? -)
            (("2" (assert)
              (("2" (typepred "G")
                (("2" (expand "cdigraph")
                  (("2" (flatten)
                    (("2" (assert)
                      (("2" (typepred "node_id")
                        (("2" (inst -2 "child")
                          (("2" (assert)
                            (("2" (split -2)
                              (("1"
                                (replace -1 * LR)
                                (("1"
                                  (lemma "dag_no_self_loops")
                                  (("1"
                                    (inst -1 "G" "(node, child)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -9 * RL)
                                        (("1"
                                          (replace -1 * LR)
                                          (("1"
                                            (expand "vert")
                                            (("1"
                                              (expand "list_of_idxs")
                                              (("1"
                                                (hide -7)
                                                (("1"
                                                  (lemma
                                                   "idx_nth_no_rep[T]")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "data(G)"
                                                     "child_id")
                                                    (("1"
                                                      (replace
                                                       -11
                                                       *
                                                       LR)
                                                      (("1"
                                                        (expand "node")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           *
                                                           LR)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (typepred
                                                                 "child_id")
                                                                (("1"
                                                                  (typepred
                                                                   "adjs")
                                                                  (("1"
                                                                    (inst
                                                                     -2
                                                                     "child_id")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "edge?")
                                                                        (("1"
                                                                          (expand
                                                                           "digraph_edges")
                                                                          (("1"
                                                                            (expand
                                                                             "edges")
                                                                            (("1"
                                                                              (replace
                                                                               -12
                                                                               *
                                                                               LR)
                                                                              (("1"
                                                                                (expand
                                                                                 "member")
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (typepred
                                                         "child_id")
                                                        (("2"
                                                          (expand
                                                           "size")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (replace -9 * RL)
                                  (("2"
                                    (inst -7 "add1(w, child)")
                                    (("1"
                                      (expand "path?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (inst -8 "0" "w`length")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "finseq_appl")
                                              (("1"
                                                (expand "add1")
                                                (("1"
                                                  (expand "walk_from?")
                                                  (("1"
                                                    (expand "from?")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (expand "add1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (expand "add1")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (use "walk?_add1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "walk_from?")
                                          (("2"
                                            (expand "from?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (replace -2 * LR)
                                                (("2"
                                                  (typepred "adjs")
                                                  (("2"
                                                    (inst
                                                     -2
                                                     "child_id")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (replace
                                                         -11
                                                         *
                                                         RL)
                                                        (("2"
                                                          (replace
                                                           -13
                                                           *
                                                           RL)
                                                          (("2"
                                                            (expand
                                                             "vert")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace
                                                                 -11
                                                                 *
                                                                 LR)
                                                                (("2"
                                                                  (expand
                                                                   "member")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dag type-eq-decl nil dags_ nil)
    (path? const-decl "bool" paths_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (list type-decl nil list_adt nil)
    (size const-decl "nat" c_digraphs_def nil)
    (edge? const-decl "bool" digraphs_ nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (walk_from? const-decl "bool" walks_ nil)
    (dag_no_self_loops formula-decl nil dags_ nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (idx_nth_no_rep formula-decl nil more_list_props structures)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (vert const-decl "bool" c_digraphs_def nil)
    (edgetype type-eq-decl nil digraphs_utils nil)
    (walk?_add1 formula-decl nil walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (from? const-decl "bool" walks_ nil)
    (add1 const-decl "prewalk" walks_ nil))
   nil
   (visit termination
    "c_topological_sort.visit(c_topological_sort.G)(c_topological_sort.m WITH [(c_topological_sort.child) := c_topological_sort.temporary], c_topological_sort.l, c_topological_sort.child_id, walks_[c_topological_sort.T, digraph_type[c_topological_sort.T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].add1(c_topological_sort.w, c_topological_sort.child), list_props[list[nat]].nth(adjs(c_topological_sort.G), c_topological_sort.child_id))"
    "nil")))
 (visit_TCC20 0
  (visit_TCC10-1 nil 3817468360
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (visit subtype "IN_1(c_topological_sort.loop)"
    "{res: [c_topological_sort.loop(c_topological_sort.G) + [c_topological_sort.marking, list_adt[c_topological_sort.Vert(c_topological_sort.G)].list]] | CASES res OF IN_1(loop): booleans.TRUE, IN_2(res): (LET (mp, lp) = res IN LET node = c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.node_id) IN    c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.mp)(c_topological_sort.lp) ∧ c_topological_sort.greater_marking(c_topological_sort.mp, c_topological_sort.m) ∧ more_list_props[c_topological_sort.T].suffix?(c_topological_sort.l, c_topological_sort.lp) ∧ c_topological_sort.permanent?(c_topological_sort.mp(c_topological_sort.node)) ∧ (FORALL x: booleans.IMPLIES(list_props[c_topological_sort.T].member(c_topological_sort.x, c_topological_sort.lp), booleans.IMPLIES((booleans.NOT)(list_props[c_topological_sort.T].member(c_topological_sort.x, c_topological_sort.l)), (booleans.∨(c_topological_sort.x = c_topological_sort.node, EXISTS (w: walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].Walk(c_topological_sort.G)): walks_[c_topological_sort.T, digraph_type[c_topological_sort.T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].from?(w, c_topological_sort.node, c_topological_sort.x)))))) ∧ (list_props[c_topological_sort.T].nth(c_topological_sort.lp, 0) = c_topological_sort.node)) ENDCASES}")))
 (visit_TCC21 0
  (visit_TCC16-1 nil 3817561836
   ("" (skeep*)
    ((""
      (typepred
       " v(G) (m WITH [child := temporary], l, child_id, add1(w, child), nth(adjs(G), child_id))")
      (("1" (replaces) (("1" (assert) nil nil)) nil)
       ("2" (use "visit_TCC18") (("2" (grind) nil nil)) nil)
       ("3" (use "visit_TCC16") (("3" (grind) nil nil)) nil)
       ("4" (use "visit_TCC13") (("4" (grind) nil nil)) nil)
       ("5" (use "visit_TCC14") (("5" (grind) nil nil)) nil))
      nil))
    nil)
   ((add1 const-decl "prewalk" walks_ nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (nth def-decl "T" list_props nil)
    (from? const-decl "bool" walks_ nil)
    (suffix? def-decl "bool" more_list_props structures)
    (greater_marking const-decl "bool" c_topological_sort nil)
    (loop type-eq-decl nil c_topological_sort nil)
    (path? const-decl "bool" paths_ nil)
    (length def-decl "nat" list_props nil)
    (temp_count const-decl "nat" c_topological_sort nil)
    (perm_count const-decl "nat" c_topological_sort nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (lex3 const-decl "ordinal" lex3 nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (< def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (edge? const-decl "bool" digraphs_ nil)
    (in_path? const-decl "bool" c_topological_sort nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (member def-decl "bool" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (size const-decl "nat" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (vert? const-decl "bool" digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (visit_TCC18 subtype-tcc nil c_topological_sort nil)
    (visit_TCC16 subtype-tcc nil c_topological_sort nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (/= const-decl "boolean" notequal nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (visit_TCC13 subtype-tcc nil c_topological_sort nil)
    (visit_TCC14 subtype-tcc nil c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (visit subtype "c_topological_sort.lp"
    "(c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.mp))")))
 (visit_TCC22 0
  (visit_TCC21-1 nil 3846645969
   ("" (skeep*)
    ((""
      (typepred
       "v(G) (m WITH [child := temporary], l, child_id, add1(w, child), nth(adjs(G), child_id)) ")
      (("1" (assert)
        (("1" (replace -6 * LR)
          (("1" (replace -4 * RL)
            (("1" (replace -2 * RL)
              (("1" (assert)
                (("1" (replace -7 * RL)
                  (("1" (replace -8 * RL)
                    (("1" (flatten)
                      (("1" (delete -11 -12 -10)
                        (("1" (expand "topperm_list")
                          (("1" (flatten)
                            (("1" (expand "permanent_list?")
                              (("1"
                                (inst-cp -1 "child")
                                (("1"
                                  (inst -1 "node")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst -8 "node")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "topological_list?")
                                          (("1"
                                            (case "node /= child")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (use
                                                   "member_iff_nth"
                                                   (t node))
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst
                                                         -4
                                                         "i"
                                                         child)
                                                        (("1"
                                                          (typepred
                                                           "adjs")
                                                          (("1"
                                                            (delete
                                                             -1
                                                             -3)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "child_id")
                                                              (("1"
                                                                (replace
                                                                 -13
                                                                 *
                                                                 LR)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     -5)
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (case-replace
                                                                         "j=0")
                                                                        (("1"
                                                                          (case-replace
                                                                           "i=0")
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "no_repetitions?")
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       1
                                                                       "gen_seq2(G, node, child)")
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (use
                                                                         "edge_to_walk")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (grind)
                                                                        nil
                                                                        nil)
                                                                       ("4"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "lp")
                                                    (("2"
                                                      (expand "vert?")
                                                      (("2"
                                                        (expand
                                                         "digraph_verts")
                                                        (("2"
                                                          (expand
                                                           "vert")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (typepred "node_id")
                                                  (("2"
                                                    (typepred "adjs")
                                                    (("2"
                                                      (inst
                                                       -3
                                                       "child_id")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replace
                                                           -15
                                                           *
                                                           RL)
                                                          (("2"
                                                            (typepred
                                                             "w")
                                                            (("2"
                                                              (inst
                                                               -4
                                                               "node")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "in_path?")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "visit_TCC18") (("2" (grind) nil nil)) nil)
       ("3" (use "visit_TCC16") (("3" (grind) nil nil)) nil)
       ("4" (use "visit_TCC15") (("4" (grind) nil nil)) nil)
       ("5" (use "visit_TCC14") (("5" (grind) nil nil)) nil))
      nil))
    nil)
   ((add1 const-decl "prewalk" walks_ nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (nth def-decl "T" list_props nil)
    (from? const-decl "bool" walks_ nil)
    (suffix? def-decl "bool" more_list_props structures)
    (greater_marking const-decl "bool" c_topological_sort nil)
    (loop type-eq-decl nil c_topological_sort nil)
    (path? const-decl "bool" paths_ nil)
    (length def-decl "nat" list_props nil)
    (temp_count const-decl "nat" c_topological_sort nil)
    (perm_count const-decl "nat" c_topological_sort nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (lex3 const-decl "ordinal" lex3 nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (< def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (edge? const-decl "bool" digraphs_ nil)
    (in_path? const-decl "bool" c_topological_sort nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (member def-decl "bool" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (size const-decl "nat" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (vert? const-decl "bool" digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (member_iff_nth formula-decl nil more_list_props structures)
    (lp skolem-const-decl "list[Vert(G)]" c_topological_sort nil)
    (G skolem-const-decl "c_digraph[T]" c_topological_sort nil)
    (node skolem-const-decl "{v: T | member(v, data(G))}"
     c_topological_sort nil)
    (child skolem-const-decl "{v: T | member(v, data(G))}"
     c_topological_sort nil)
    (Seq type-eq-decl nil walks_ nil)
    (gen_seq2 const-decl "Seq(G)" walks_ nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (edge_to_walk formula-decl nil walks_ nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (verts_in? const-decl "bool" walks_ nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (visit_TCC18 subtype-tcc nil c_topological_sort nil)
    (visit_TCC16 subtype-tcc nil c_topological_sort nil)
    (visit_TCC15 subtype-tcc nil c_topological_sort nil)
    (visit_TCC14 subtype-tcc nil c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (visit subtype "c_topological_sort.node_id"
    "{id: c_topological_sort.VertID(c_topological_sort.G) | (booleans.NOT)(c_topological_sort.permanent?(c_topological_sort.mp(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(id))))}")))
 (visit_TCC23 0
  (visit_TCC15-1 nil 3817539461
   ("" (skeep*)
    (("" (case "child /= node")
      (("1" (flatten)
        (("1"
          (typepred
           "v(G)(m WITH [child := temporary], l, child_id, add1(w,child), nth(adjs(G), child_id))")
          (("1" (replace -6 * LR)
            (("1" (replace -7 * LR)
              (("1" (assert)
                (("1" (flatten)
                  (("1" (replace -12 * RL)
                    (("1" (replace -13 * RL)
                      (("1" (delete -11 -12 -13)
                        (("1" (expand "topperm_list")
                          (("1" (flatten)
                            (("1" (expand "permanent_list?")
                              (("1"
                                (typepred "w")
                                (("1"
                                  (replace -13 * RL)
                                  (("1"
                                    (replace -15 * RL)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (case "child = x")
                                        (("1"
                                          (replace -1 * RL)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (expand "greater_marking")
                                          (("2"
                                            (inst -8 "x")
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (split 3)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst -5 "x")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (delete -3)
                                                            (("2"
                                                              (delete
                                                               -8
                                                               -9)
                                                              (("2"
                                                                (case
                                                                 "permanent?(mp(x))")
                                                                (("1"
                                                                  (expand
                                                                   "topological_list?")
                                                                  (("1"
                                                                    (inst
                                                                     -6
                                                                     "x")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         -11
                                                                         "x")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (typepred
                                                                             "l")
                                                                            (("1"
                                                                              (expand
                                                                               "topperm_list")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (delete
                                                                                   -1
                                                                                   -3
                                                                                   -4)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "permanent_list?")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "x")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (skolem
                                                                                           -11
                                                                                           w1)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -7
                                                                                             0
                                                                                             x)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -12
                                                                                                 *
                                                                                                 LR)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -7)
                                                                                                  (("1"
                                                                                                    (skeep)
                                                                                                    (("1"
                                                                                                      (reveal
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         0
                                                                                                         x)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (skeep)
                                                                                                            (("1"
                                                                                                              (case-replace
                                                                                                               "j!1 = j")
                                                                                                              (("1"
                                                                                                                (delete
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (delete
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (reveal
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "j"
                                                                                                                       child)
                                                                                                                      (("1"
                                                                                                                        (split
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (skeep)
                                                                                                                          (("1"
                                                                                                                            (case-replace
                                                                                                                             "j_1 = 0")
                                                                                                                            (("1"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (expand
                                                                                                                               "no_repetitions?")
                                                                                                                              (("2"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (delete
                                                                                                                           2
                                                                                                                           3
                                                                                                                           4
                                                                                                                           5
                                                                                                                           6)
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -2
                                                                                                                             *
                                                                                                                             RL)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "in_path?")
                                                                                                                              (("2"
                                                                                                                                (delete
                                                                                                                                 -1)
                                                                                                                                (("2"
                                                                                                                                  (skolem
                                                                                                                                   -4
                                                                                                                                   "i_wx")
                                                                                                                                  (("2"
                                                                                                                                    (name
                                                                                                                                     "l_w"
                                                                                                                                     "length(w)")
                                                                                                                                    (("2"
                                                                                                                                      (replace
                                                                                                                                       -1
                                                                                                                                       *
                                                                                                                                       LR)
                                                                                                                                      (("2"
                                                                                                                                        (name
                                                                                                                                         "l_wp"
                                                                                                                                         "l_w - i_wx + 1")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           1
                                                                                                                                           "(# length := l_wp, seq := lambda (k: below(l_wp)) : if (k < (l_wp - 1)) then w`seq(k+i_wx) else child endif #)")
                                                                                                                                          (("1"
                                                                                                                                            (grind)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (split)
                                                                                                                                            (("1"
                                                                                                                                              (grind)
                                                                                                                                              nil
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (expand
                                                                                                                                               "walk?")
                                                                                                                                              (("2"
                                                                                                                                                (split)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "verts_in?")
                                                                                                                                                  (("1"
                                                                                                                                                    (skeep)
                                                                                                                                                    (("1"
                                                                                                                                                      (split)
                                                                                                                                                      (("1"
                                                                                                                                                        (flatten)
                                                                                                                                                        (("1"
                                                                                                                                                          (typepred
                                                                                                                                                           "w")
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "walk?")
                                                                                                                                                            (("1"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "verts_in?")
                                                                                                                                                                (("1"
                                                                                                                                                                  (grind)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (grind)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (skeep)
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "finseq_appl")
                                                                                                                                                    (("2"
                                                                                                                                                      (lift-if)
                                                                                                                                                      (("2"
                                                                                                                                                        (lift-if)
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (split)
                                                                                                                                                            (("1"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("1"
                                                                                                                                                                (typepred
                                                                                                                                                                 "w")
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "walk?")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (inst
                                                                                                                                                                       -3
                                                                                                                                                                       (i_wx
                                                                                                                                                                        +n))
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "finseq_appl")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (propax)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("2"
                                                                                                                                                                (case
                                                                                                                                                                 "n=l_wp -2")
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (delete
                                                                                                                                                                     -2)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replaces)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (delete
                                                                                                                                                                           -1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (delete
                                                                                                                                                                             -1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (typepred
                                                                                                                                                                                 "adjs")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -2
                                                                                                                                                                                   "child_id")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (grind)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("3"
                                                                                                                                            (assert)
                                                                                                                                            (("3"
                                                                                                                                              (skeep)
                                                                                                                                              (("3"
                                                                                                                                                (typepred
                                                                                                                                                 "i_wx")
                                                                                                                                                (("3"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("4"
                                                                                                                                            (grind)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (expand
                                                                                                                 "no_repetitions?")
                                                                                                                (("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (use "visit_TCC18") (("2" (grind) nil nil)) nil)
           ("3" (use "visit_TCC16") (("3" (grind) nil nil)) nil)
           ("4" (use "visit_TCC13") (("4" (grind) nil nil)) nil)
           ("5" (use "visit_TCC14") (("5" (grind) nil nil)) nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (replace -1 * LR)
          (("2" (case-replace "node_id = child_id")
            (("1" (typepred "adjs")
              (("1" (inst -3 "child_id")
                (("1" (inst -2 "child_id")
                  (("1" (assert)
                    (("1" (split -2)
                      (("1" (assert)
                        (("1" (typepred "w")
                          (("1" (inst -4 "node")
                            (("1" (assert)
                              (("1"
                                (expand "in_path?")
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "G")
              (("2" (expand "cdigraph")
                (("2" (flatten)
                  (("2" (expand "no_repetitions?")
                    (("2" (inst -3 "child_id" "node_id")
                      (("1" (assert)
                        (("1" (flatten) (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (typepred "node_id")
                        (("2" (expand "size") (("2" (propax) nil nil))
                          nil))
                        nil)
                       ("3" (typepred "child_id")
                        (("3" (expand "size") (("3" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((c_digraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (member def-decl "bool" list_props nil)
    (list type-decl nil list_adt nil)
    (/= const-decl "boolean" notequal nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (add1 const-decl "prewalk" walks_ nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (nth def-decl "T" list_props nil)
    (from? const-decl "bool" walks_ nil)
    (suffix? def-decl "bool" more_list_props structures)
    (greater_marking const-decl "bool" c_topological_sort nil)
    (loop type-eq-decl nil c_topological_sort nil)
    (path? const-decl "bool" paths_ nil)
    (length def-decl "nat" list_props nil)
    (temp_count const-decl "nat" c_topological_sort nil)
    (perm_count const-decl "nat" c_topological_sort nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (lex3 const-decl "ordinal" lex3 nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (< def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (edge? const-decl "bool" digraphs_ nil)
    (in_path? const-decl "bool" c_topological_sort nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (size const-decl "nat" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (vert? const-decl "bool" digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (l_wp skolem-const-decl "int" c_topological_sort nil)
    (G skolem-const-decl "c_digraph[T]" c_topological_sort nil)
    (m skolem-const-decl "marking" c_topological_sort nil)
    (node_id skolem-const-decl
     "{id: VertID(G) | NOT permanent?(m(node(G)(id)))}"
     c_topological_sort nil)
    (w skolem-const-decl "{w: Walk(G) |
   seq(w)(length(w) - 1) = node(G)(node_id) AND
    FORALL (x: Vert(G)): temporary?(m(x)) IFF in_path?(G)(w, x)}"
     c_topological_sort nil)
    (i_wx skolem-const-decl "below(length(w))" c_topological_sort nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (child skolem-const-decl "{v: T | member(v, data(G))}"
     c_topological_sort nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (verts_in? const-decl "bool" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (visit_TCC18 subtype-tcc nil c_topological_sort nil)
    (visit_TCC16 subtype-tcc nil c_topological_sort nil)
    (visit_TCC13 subtype-tcc nil c_topological_sort nil)
    (visit_TCC14 subtype-tcc nil c_topological_sort nil)
    (child_id skolem-const-decl "VertID(G)" c_topological_sort nil)
    (node skolem-const-decl "{v: T | member(v, data(G))}"
     c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (visit subtype "c_topological_sort.w"
    "{w: walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].Walk(c_topological_sort.G) | booleans.AND(seq(w)((number_fields.-)(length(w), 1)) = c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.node_id), FORALL (x: c_topological_sort.Vert(c_topological_sort.G)): booleans.IFF(c_topological_sort.temporary?(c_topological_sort.mp(x)), c_topological_sort.in_path?(c_topological_sort.G)(w, x)))}")))
 (visit_TCC24 0
  (visit_TCC11-1 nil 3817468360
   ("" (skeep*)
    (("" (split 1)
      (("1" (skeep*)
        (("1" (typepred "adjs")
          (("1" (inst -2 "x") (("1" (grind) nil nil)) nil)) nil))
        nil)
       ("2" (skeep)
        (("2" (replace -2 * RL)
          (("2" (typepred "adjs")
            (("2" (inst -3 "x")
              (("2" (assert)
                (("2"
                  (typepred
                   "v(G) (m WITH [child := temporary], l, child_id, add1(w, child), nth(adjs(G), child_id))")
                  (("1" (replace -10 * LR)
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (replace -16 * RL)
                          (("1" (replace -17 * RL)
                            (("1" (delete -16 -17)
                              (("1"
                                (split -9)
                                (("1"
                                  (typepred "adjs")
                                  (("1"
                                    (replaces)
                                    (("1"
                                      (assert)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand "greater_marking")
                                    (("2"
                                      (inst -3 "node(G)(x)")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (use "visit_TCC18") (("2" (grind) nil nil))
                    nil)
                   ("3" (use "visit_TCC16") (("3" (grind) nil nil))
                    nil)
                   ("4" (use "visit_TCC14") (("4" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((OR const-decl "[bool, bool -> bool]" booleans nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (edge? const-decl "bool" digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (size const-decl "nat" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (add1 const-decl "prewalk" walks_ nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (nth def-decl "T" list_props nil)
    (from? const-decl "bool" walks_ nil)
    (suffix? def-decl "bool" more_list_props structures)
    (greater_marking const-decl "bool" c_topological_sort nil)
    (loop type-eq-decl nil c_topological_sort nil)
    (path? const-decl "bool" paths_ nil)
    (length def-decl "nat" list_props nil)
    (temp_count const-decl "nat" c_topological_sort nil)
    (perm_count const-decl "nat" c_topological_sort nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (lex3 const-decl "ordinal" lex3 nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (< def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (in_path? const-decl "bool" c_topological_sort nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (vert? const-decl "bool" digraphs_ nil)
    (FALSE const-decl "bool" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (visit_TCC18 subtype-tcc nil c_topological_sort nil)
    (visit_TCC16 subtype-tcc nil c_topological_sort nil)
    (visit_TCC14 subtype-tcc nil c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (visit subtype "c_topological_sort.adjsp"
    "{k: c_topological_sort.Adjs(c_topological_sort.G, c_topological_sort.node_id) | FORALL (x: c_topological_sort.VertID(c_topological_sort.G)): booleans.IMPLIES(digraphs_[c_topological_sort.T, digraph_type[c_topological_sort.T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].edge?(c_topological_sort.G)(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.node_id), c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)), booleans.∨(list_props[c_topological_sort.VertID(c_topological_sort.G)].member(x, k), c_topological_sort.permanent?(c_topological_sort.mp(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)))))}")))
 (visit_TCC25 0
  (visit_TCC12-1 nil 3817468360
   ("" (skeep*)
    ((""
      (typepred
       "v(G) (m WITH [child := temporary], l, child_id, add1(w, child), nth(adjs(G), child_id))")
      (("1" (replace -6 * LR)
        (("1" (assert)
          (("1" (flatten)
            (("1" (replace -12 * RL)
              (("1" (replace -13 * RL)
                (("1" (delete -12 -13)
                  (("1" (use "lex3_lt")
                    (("1" (replace -1 * LR)
                      (("1" (flatten)
                        (("1" (delete -1)
                          (("1" (assert)
                            (("1" (use "lex2_lt")
                              (("1"
                                (replace -1 * LR)
                                (("1"
                                  (delete -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma
                                       "greater_marking_temp_count")
                                      (("1"
                                        (inst
                                         -1
                                         "data(G)"
                                         "mp"
                                         "m WITH [ child := temporary]")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "greater_marking_perm_count")
                                              (("1"
                                                (inst
                                                 -1
                                                 "data(G)"
                                                 "mp"
                                                 "m WITH [ child := temporary]"
                                                 "child")
                                                (("1"
                                                  (replace -10 * LR)
                                                  (("1"
                                                    (lemma
                                                     "perm_count_same2")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "data(G)"
                                                       "m"
                                                       "child")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (use "temp_count_bound")
                                (("2" (grind) nil nil))
                                nil)
                               ("3"
                                (use "temp_count_bound")
                                (("3"
                                  (expand "size")
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (use "temp_count_bound")
                      (("2" (expand "size") (("2" (assert) nil nil))
                        nil))
                      nil)
                     ("3" (use "perm_count_bound")
                      (("3" (expand "size") (("3" (assert) nil nil))
                        nil))
                      nil)
                     ("4" (use "temp_count_bound")
                      (("4" (expand "size") (("4" (assert) nil nil))
                        nil))
                      nil)
                     ("5" (use "perm_count_bound")
                      (("5" (expand "size") (("5" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "visit_TCC18") (("2" (grind) nil nil)) nil)
       ("3" (use "visit_TCC16") (("3" (grind) nil nil)) nil)
       ("4" (use "visit_TCC14") (("4" (grind) nil nil)) nil)
       ("5" (use "visit_TCC14") (("5" (grind) nil nil)) nil))
      nil))
    nil)
   ((add1 const-decl "prewalk" walks_ nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (nth def-decl "T" list_props nil)
    (from? const-decl "bool" walks_ nil)
    (suffix? def-decl "bool" more_list_props structures)
    (greater_marking const-decl "bool" c_topological_sort nil)
    (loop type-eq-decl nil c_topological_sort nil)
    (path? const-decl "bool" paths_ nil)
    (length def-decl "nat" list_props nil)
    (temp_count const-decl "nat" c_topological_sort nil)
    (perm_count const-decl "nat" c_topological_sort nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (lex3 const-decl "ordinal" lex3 nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (< def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (edge? const-decl "bool" digraphs_ nil)
    (in_path? const-decl "bool" c_topological_sort nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (member def-decl "bool" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (size const-decl "nat" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (vert? const-decl "bool" digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (perm_count_bound formula-decl nil c_topological_sort nil)
    (lex2_lt formula-decl nil lex2 nil)
    (greater_marking_temp_count formula-decl nil c_topological_sort
     nil)
    (greater_marking_perm_count formula-decl nil c_topological_sort
     nil)
    (perm_count_same2 formula-decl nil c_topological_sort nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (temp_count_bound formula-decl nil c_topological_sort nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (G skolem-const-decl "c_digraph[T]" c_topological_sort nil)
    (mp skolem-const-decl "[T -> mark]" c_topological_sort nil)
    (m skolem-const-decl "marking" c_topological_sort nil)
    (lex3_lt formula-decl nil lex3 nil)
    (visit_TCC18 subtype-tcc nil c_topological_sort nil)
    (visit_TCC16 subtype-tcc nil c_topological_sort nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (/= const-decl "boolean" notequal nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (visit_TCC14 subtype-tcc nil c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (visit termination
    "c_topological_sort.visit(c_topological_sort.G)(c_topological_sort.mp, c_topological_sort.lp, c_topological_sort.node_id, c_topological_sort.w, c_topological_sort.adjsp)"
    "nil")))
 (visit_TCC26 0
  (visit_TCC23-1 nil 3846607699
   ("" (skeep*)
    (("" (assert)
      (("" (lift-if)
        (("" (assert)
          (("" (split 1)
            (("1" (propax) nil nil)
             ("2" (flatten)
              (("2"
                (typepred
                 "v(G) (m WITH [child := temporary], l, child_id, add1(w, child), nth(adjs(G), child_id))")
                (("1" (replace -6 * LR)
                  (("1" (assert)
                    (("1" (replace -7 * RL)
                      (("1" (replace -8 * RL)
                        (("1" (flatten)
                          (("1"
                            (typepred
                             "v(G)(mp, lp, node_id, w, adjsp)")
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (name-replace
                                   "mpp"
                                   "OUT_2(v(G)(mp, lp, node_id, w, adjsp))`1")
                                  (("1"
                                    (name-replace
                                     "lpp"
                                     "OUT_2(v(G)(mp, lp, node_id, w, adjsp))`2")
                                    (("1"
                                      (split)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (expand "greater_marking")
                                        (("2"
                                          (skolem 1 x)
                                          (("2"
                                            (inst -2 "x")
                                            (("2"
                                              (inst -8 x)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (lemma "suffix_supl[T]")
                                        (("3"
                                          (inst-cp -1 l lp)
                                          (("3"
                                            (inst-cp -1 lp lpp)
                                            (("3"
                                              (inst -1 l lpp)
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (skeep*)
                                                  (("3"
                                                    (inst
                                                     1
                                                     "append(L, L!1)")
                                                    (("3"
                                                      (rewrite
                                                       "append_assoc[T]")
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4" (propax) nil nil)
                                       ("5"
                                        (skeep)
                                        (("5"
                                          (inst -6 x)
                                          (("5"
                                            (assert)
                                            (("5"
                                              (inst -12 x)
                                              (("5"
                                                (assert)
                                                (("5"
                                                  (split -6)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (split -12)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           *
                                                           RL)
                                                          (("1"
                                                            (replace
                                                             -16
                                                             *
                                                             LR)
                                                            (("1"
                                                              (inst
                                                               3
                                                               "gen_seq2(G, node, x)")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (use
                                                                 "edge_to_walk")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil)
                                                                     ("3"
                                                                      (typepred
                                                                       "adjs")
                                                                      (("3"
                                                                        (replace
                                                                         -4
                                                                         1
                                                                         LR)
                                                                        (("3"
                                                                          (expand
                                                                           "node"
                                                                           1
                                                                           1)
                                                                          (("3"
                                                                            (rewrite
                                                                             "idx_nth_no_rep[T]")
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "child_id")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split
                                                                                   -2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "edge?")
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2
                                                                               3
                                                                               4
                                                                               5
                                                                               6)
                                                                              (("2"
                                                                                (typepred
                                                                                 "G")
                                                                                (("2"
                                                                                  (expand
                                                                                   "cdigraph")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (grind)
                                                                nil
                                                                nil)
                                                               ("4"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skolem
                                                         -1
                                                         "w1")
                                                        (("2"
                                                          (inst
                                                           3
                                                           "(# length := length(w1) + 1, seq := lambda (k:below(length(w1)+1)) : if (k=0) then node else w1`seq(k-1) endif #)")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "walk?")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "finseq_appl")
                                                                (("2"
                                                                  (expand
                                                                   "verts_in?")
                                                                  (("2"
                                                                    (split)
                                                                    (("1"
                                                                      (skolem
                                                                       1
                                                                       k)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (typepred
                                                                           "w1")
                                                                          (("1"
                                                                            (expand
                                                                             "walk?")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 "verts_in?")
                                                                                (("1"
                                                                                  (split
                                                                                   1)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "w1")
                                                                      (("2"
                                                                        (expand
                                                                         "walk?")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (split
                                                                                   1)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       *
                                                                                       LR)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "from?")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -6
                                                                                             *
                                                                                             LR)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "adjs")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -2
                                                                                                 "child_id")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -23
                                                                                                     *
                                                                                                     LR)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -3
                                                                                       "n-1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "finseq_appl")
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("6" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (use "visit_TCC23")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2 3)
                                    (("2"
                                      (use "visit_TCC23")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2 3)
                              (("2"
                                (use "visit_TCC24")
                                (("2" (grind) nil nil))
                                nil))
                              nil)
                             ("3" (hide 2 3)
                              (("3"
                                (use "visit_TCC23")
                                (("3" (grind) nil nil))
                                nil))
                              nil)
                             ("4" (hide 1 2)
                              (("4"
                                (use "visit_TCC22")
                                (("4" (grind) nil nil))
                                nil))
                              nil)
                             ("5" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2 3)
                  (("2" (use "visit_TCC21")
                    (("2" (use "visit_TCC18") (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 2 3)
                  (("3" (use "visit_TCC23")
                    (("3" (use "visit_TCC16") (("3" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("4" (use "visit_TCC15")
                  (("4" (hide 2 3)
                    (("4" (use "visit_TCC14") (("4" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((visit_TCC15 subtype-tcc nil c_topological_sort nil)
    (visit_TCC14 subtype-tcc nil c_topological_sort nil)
    (visit_TCC16 subtype-tcc nil c_topological_sort nil)
    (visit_TCC18 subtype-tcc nil c_topological_sort nil)
    (visit_TCC21 subtype-tcc nil c_topological_sort nil)
    (visit_TCC22 subtype-tcc nil c_topological_sort nil)
    (visit_TCC24 subtype-tcc nil c_topological_sort nil)
    (visit_TCC23 subtype-tcc nil c_topological_sort nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (G skolem-const-decl "c_digraph[T]" c_topological_sort nil)
    (m skolem-const-decl "marking" c_topological_sort nil)
    (node_id skolem-const-decl
     "{id: VertID(G) | NOT permanent?(m(node(G)(id)))}"
     c_topological_sort nil)
    (lpp skolem-const-decl "list[Vert(G)]" c_topological_sort nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (append_assoc formula-decl nil list_props nil)
    (append def-decl "list[T]" list_props nil)
    (suffix_supl formula-decl nil more_list_props structures)
    (vert const-decl "bool" c_digraphs_def nil)
    (node skolem-const-decl "{v: T | member(v, data(G))}"
     c_topological_sort nil)
    (x skolem-const-decl "T" c_topological_sort nil)
    (verts_in? const-decl "bool" walks_ nil)
    (Seq type-eq-decl nil walks_ nil)
    (gen_seq2 const-decl "Seq(G)" walks_ nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (idx_nth_no_rep formula-decl nil more_list_props structures)
    (edge_to_walk formula-decl nil walks_ nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (w1 skolem-const-decl
     "Walk[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](G)" c_topological_sort nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (n skolem-const-decl "nat" c_topological_sort nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (FALSE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (vert? const-decl "bool" digraphs_ nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (below type-eq-decl nil naturalnumbers nil)
    (member def-decl "bool" list_props nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (in_path? const-decl "bool" c_topological_sort nil)
    (edge? const-decl "bool" digraphs_ nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (lex3 const-decl "ordinal" lex3 nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (perm_count const-decl "nat" c_topological_sort nil)
    (temp_count const-decl "nat" c_topological_sort nil)
    (length def-decl "nat" list_props nil)
    (path? const-decl "bool" paths_ nil)
    (loop type-eq-decl nil c_topological_sort nil)
    (greater_marking const-decl "bool" c_topological_sort nil)
    (suffix? def-decl "bool" more_list_props structures)
    (from? const-decl "bool" walks_ nil)
    (nth def-decl "T" list_props nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (add1 const-decl "prewalk" walks_ nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (visit subtype
    "c_topological_sort.visit(c_topological_sort.G)(c_topological_sort.mp, c_topological_sort.lp, c_topological_sort.node_id, c_topological_sort.w, c_topological_sort.adjsp)"
    "{res: [c_topological_sort.loop(c_topological_sort.G) + [c_topological_sort.marking, list_adt[c_topological_sort.Vert(c_topological_sort.G)].list]] | CASES res OF IN_1(loop): booleans.TRUE, IN_2(res): (LET (mp, lp) = res IN LET node = c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.node_id) IN    c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.mp)(c_topological_sort.lp) ∧ c_topological_sort.greater_marking(c_topological_sort.mp, c_topological_sort.m) ∧ more_list_props[c_topological_sort.T].suffix?(c_topological_sort.l, c_topological_sort.lp) ∧ c_topological_sort.permanent?(c_topological_sort.mp(c_topological_sort.node)) ∧ (FORALL x: booleans.IMPLIES(list_props[c_topological_sort.T].member(c_topological_sort.x, c_topological_sort.lp), booleans.IMPLIES((booleans.NOT)(list_props[c_topological_sort.T].member(c_topological_sort.x, c_topological_sort.l)), (booleans.∨(c_topological_sort.x = c_topological_sort.node, EXISTS (w: walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].Walk(c_topological_sort.G)): walks_[c_topological_sort.T, digraph_type[c_topological_sort.T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].from?(w, c_topological_sort.node, c_topological_sort.x)))))) ∧ (list_props[c_topological_sort.T].nth(c_topological_sort.lp, 0) = c_topological_sort.node)) ENDCASES}")))
 (topological_sort_aux_TCC1 0
  (topological_sort_aux_TCC1-1 nil 3846738806
   ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (mark type-decl nil c_topological_sort nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (non_temporary_marking type-eq-decl nil c_topological_sort nil)
    (vert? const-decl "bool" digraphs_ nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (from? const-decl "bool" walks_ nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (greater_marking const-decl "bool" c_topological_sort nil)
    (size const-decl "nat" c_digraphs_def nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (topological_sort_aux subtype "c_topological_sort.i"
    "naturalnumbers.below(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G))")))
 (topological_sort_aux_TCC2 0
  (topological_sort_aux_TCC2-1 nil 3846738806
   ("" (skeep*)
    (("" (assert)
      (("" (split)
        (("1" (grind) nil nil)
         ("2" (use "suffix_supl[T]")
          (("2" (assert)
            (("2" (inst 1 "null") (("2" (grind) nil nil)) nil)) nil))
          nil)
         ("3" (typepred "l") (("3" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((permanent_list? const-decl "bool" c_topological_sort nil)
    (from? const-decl "bool" walks_ nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (size const-decl "nat" c_digraphs_def nil)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (suffix_supl formula-decl nil more_list_props structures)
    (non_temporary_marking type-eq-decl nil c_topological_sort nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (vert? const-decl "bool" digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (greater_marking const-decl "bool" c_topological_sort nil)
    (nth def-decl "T" list_props nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (topological_sort_aux subtype
    "IN_2(c_topological_sort.m, c_topological_sort.l)"
    "{res: [c_topological_sort.loop(c_topological_sort.G) + [c_topological_sort.non_temporary_marking, list_adt[c_topological_sort.Vert(c_topological_sort.G)].list]] | CASES res OF IN_1(loop): booleans.TRUE, IN_2(res): LET (mp, lp) = res IN booleans.∧(c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.mp)(c_topological_sort.lp), booleans.∧(c_topological_sort.greater_marking(c_topological_sort.mp, c_topological_sort.m), booleans.∧(more_list_props[c_topological_sort.T].suffix?(c_topological_sort.l, c_topological_sort.lp), FORALL (i: naturalnumbers.upto(c_topological_sort.n)): list_props[c_topological_sort.T].member(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(i), c_topological_sort.lp)))) ENDCASES}")))
 (topological_sort_aux_TCC3 0
  (topological_sort_aux_TCC3-1 nil 3846738806 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (mark type-decl nil c_topological_sort nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (non_temporary_marking type-eq-decl nil c_topological_sort nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (vert? const-decl "bool" digraphs_ nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (member def-decl "bool" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (from? const-decl "bool" walks_ nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (/= const-decl "boolean" notequal nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (size const-decl "nat" c_digraphs_def nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (topological_sort_aux subtype
    "(number_fields.-)(c_topological_sort.n, 1)"
    "naturalnumbers.below(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G))")))
 (topological_sort_aux_TCC4 0
  (topological_sort_aux_TCC4-1 nil 3846738806 ("" (grind) nil nil)
   ((T formal-nonempty-type-decl nil c_topological_sort nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (topological_sort_aux termination
    "c_topological_sort.topological_sort_aux(c_topological_sort.G)((number_fields.-)(c_topological_sort.n, 1), c_topological_sort.m, c_topological_sort.l)"
    "nil")))
 (topological_sort_aux_TCC5 0
  (topological_sort_aux_TCC5-1 nil 3846738806
   ("" (skeep*)
    (("" (lift-if)
      (("" (assert)
        (("" (split)
          (("1" (propax) nil nil)
           ("2" (flatten)
            (("2" (typepred "v(G)(n - 1, m, l)")
              (("2" (name-replace "res" "OUT_2(v(G)(n - 1, m, l))")
                (("1" (assert)
                  (("1" (ground)
                    (("1" (skeep)
                      (("1" (inst -4 i)
                        (("1" (assert)
                          (("1" (typepred "i")
                            (("1" (case "i = n")
                              (("1" (grind) nil nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (member def-decl "bool" list_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (suffix? def-decl "bool" more_list_props structures)
    (greater_marking const-decl "bool" c_topological_sort nil)
    (loop type-eq-decl nil c_topological_sort nil)
    (path? const-decl "bool" paths_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (vert? const-decl "bool" digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (non_temporary_marking type-eq-decl nil c_topological_sort nil)
    (below type-eq-decl nil naturalnumbers nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (size const-decl "nat" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (from? const-decl "bool" walks_ nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (res skolem-const-decl "[non_temporary_marking, list[Vert(G)]]"
         c_topological_sort nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (i skolem-const-decl "upto(n)" c_topological_sort nil)
    (n skolem-const-decl "below(size[T](G))" c_topological_sort nil)
    (G skolem-const-decl "c_digraph[T]" c_topological_sort nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (topological_sort_aux subtype
    "c_topological_sort.topological_sort_aux(c_topological_sort.G)((number_fields.-)(c_topological_sort.n, 1), c_topological_sort.m, c_topological_sort.l)"
    "{res: [c_topological_sort.loop(c_topological_sort.G) + [c_topological_sort.non_temporary_marking, list_adt[c_topological_sort.Vert(c_topological_sort.G)].list]] | CASES res OF IN_1(loop): booleans.TRUE, IN_2(res): LET (mp, lp) = res IN booleans.∧(c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.mp)(c_topological_sort.lp), booleans.∧(c_topological_sort.greater_marking(c_topological_sort.mp, c_topological_sort.m), booleans.∧(more_list_props[c_topological_sort.T].suffix?(c_topological_sort.l, c_topological_sort.lp), FORALL (i: naturalnumbers.upto(c_topological_sort.n)): list_props[c_topological_sort.T].member(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(i), c_topological_sort.lp)))) ENDCASES}")))
 (topological_sort_aux_TCC6 0
  (topological_sort_aux_TCC6-1 nil 3846738806
   ("" (skeep)
    (("" (typepred "l")
      (("" (expand "topperm_list")
        (("" (assert)
          (("" (flatten)
            (("" (ground)
              (("" (expand "permanent_list?")
                (("" (skeep)
                  (("" (inst -2 x)
                    (("" (lift-if) (("" (ground) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((non_temporary_marking type-eq-decl nil c_topological_sort nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (vert? const-decl "bool" digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (permanent_list? const-decl "bool" c_topological_sort nil))
   nil
   (topological_sort_aux subtype "c_topological_sort.l"
    "(c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.m WITH [(c_topological_sort.node) := c_topological_sort.temporary]))")))
 (topological_sort_aux_TCC7 0
  (topological_sort_aux_TCC7-1 nil 3846738806
   ("" (skeep*) (("" (lift-if) (("" (ground) nil nil)) nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (topological_sort_aux subtype "c_topological_sort.n"
    "{id: c_topological_sort.VertID(c_topological_sort.G) | (booleans.NOT)(c_topological_sort.permanent?(c_topological_sort.m WITH [(c_topological_sort.node) := c_topological_sort.temporary](c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(id))))}")))
 (topological_sort_aux_TCC8 0
  (topological_sort_aux_TCC8-1 nil 3846738806
   ("" (skeep*) (("" (grind) nil nil)) nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (topological_sort_aux subtype "c_topological_sort.node"
    "(c_digraphs_imp[c_topological_sort.T].digraph_verts(c_topological_sort.G))")))
 (topological_sort_aux_TCC9 0
  (topological_sort_aux_TCC9-1 nil 3846738806
   ("" (skeep*)
    (("" (split)
      (("1" (grind) nil nil) ("2" (grind) nil nil)
       ("3" (skeep)
        (("3" (typepred "m")
          (("3" (inst -1 "x")
            (("3" (lift-if)
              (("3" (assert)
                (("3" (split)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (expand "in_path?")
                        (("1" (inst 1 0) (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (expand "in_path?")
                      (("2" (skeep)
                        (("2" (typepred "i")
                          (("2" (assert)
                            (("2" (expand "gen_seq1")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (verts_in? const-decl "bool" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (edge? const-decl "bool" digraphs_ nil)
    (walk? const-decl "bool" walks_ nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (non_temporary_marking type-eq-decl nil c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (prewalk type-eq-decl nil walks_ nil)
    (Seq type-eq-decl nil walks_ nil)
    (member def-decl "bool" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (in_path? const-decl "bool" c_topological_sort nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (vert? const-decl "bool" digraphs_ nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (topological_sort_aux subtype
    "walks_[c_topological_sort.T, digraph_type[c_topological_sort.T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].gen_seq1(c_topological_sort.G, c_topological_sort.node)"
    "{w: walks_[c_topological_sort.T, digraph_type[T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].Walk(c_topological_sort.G) | booleans.AND(seq(w)((number_fields.-)(length(w), 1)) = c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.n), FORALL (x: c_topological_sort.Vert(c_topological_sort.G)): booleans.IFF(c_topological_sort.temporary?(c_topological_sort.m WITH [(c_topological_sort.node) := c_topological_sort.temporary](x)), c_topological_sort.in_path?(c_topological_sort.G)(w, x)))}")))
 (topological_sort_aux_TCC10 0
  (topological_sort_aux_TCC10-1 nil 3846738806 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (mark type-decl nil c_topological_sort nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (non_temporary_marking type-eq-decl nil c_topological_sort nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (vert? const-decl "bool" digraphs_ nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (member def-decl "bool" list_props nil)
    (length def-decl "nat" list_props nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (from? const-decl "bool" walks_ nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (/= const-decl "boolean" notequal nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (topological_sort_aux subtype "c_topological_sort.n"
    "below[length[list[nat]](adjs(G))]")))
 (topological_sort_aux_TCC11 0
  (topological_sort_aux_TCC11-1 nil 3846738806
   ("" (skeep*)
    (("" (typepred "n")
      (("" (typepred "G")
        (("" (expand "cdigraph")
          (("" (flatten)
            (("" (inst - n)
              (("1" (inst - n)
                (("1" (typepred "(nth[list[nat]](adjs(G), n))")
                  (("1" (split 2)
                    (("1" (use "every_nth[number]")
                      (("1" (assert)
                        (("1" (delete 2)
                          (("1" (use "every_nth[number]")
                            (("1" (assert)
                              (("1"
                                (delete -2)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst -1 i)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (ground)
                                        (("1"
                                          (expand "list_of_idxs")
                                          (("1" (inst -7 i) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (expand "edge?")
                        (("2" (expand "digraph_edges")
                          (("2" (expand "edges")
                            (("2" (ground)
                              (("1" (grind) nil nil)
                               ("2"
                                (expand "vert")
                                (("2"
                                  (expand "node")
                                  (("2"
                                    (rewrite "member_iff_nth[T]")
                                    (("2"
                                      (inst 1 x)
                                      (("2"
                                        (expand "list_of_idxs")
                                        (("2"
                                          (use
                                           "member_iff_nth[nat]"
                                           (t x))
                                          (("2"
                                            (assert)
                                            (("2"
                                              (skolem -1 "x_id")
                                              (("2"
                                                (inst -5 "x_id")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "node")
                                (("3"
                                  (rewrite "idx_nth_no_rep")
                                  (("3"
                                    (rewrite "idx_nth_no_rep")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (skeep)
                      (("3" (typepred "x")
                        (("3" (delete 2)
                          (("3" (delete -3)
                            (("3" (expand "edge?")
                              (("3"
                                (expand "digraph_edges")
                                (("3"
                                  (expand "edges")
                                  (("3"
                                    (flatten)
                                    (("3"
                                      (expand "node")
                                      (("3"
                                        (rewrite "idx_nth_no_rep")
                                        (("3"
                                          (rewrite "idx_nth_no_rep")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (expand "size") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (size const-decl "nat" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (n skolem-const-decl "below(size[T](G))" c_topological_sort nil)
    (G skolem-const-decl "c_digraph[T]" c_topological_sort nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (/= const-decl "boolean" notequal nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (x skolem-const-decl "VertID(G)" c_topological_sort nil)
    (member_iff_nth formula-decl nil more_list_props structures)
    (VertID type-eq-decl nil c_topological_sort nil)
    (idx_nth_no_rep formula-decl nil more_list_props structures)
    (edges const-decl "bool" c_digraphs_def nil)
    (edge? const-decl "bool" digraphs_ nil)
    (every_nth formula-decl nil list_props nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (topological_sort_aux subtype
    "list_props[list[nat]].nth(adjs(c_topological_sort.G), c_topological_sort.n)"
    "{k: c_topological_sort.Adjs(c_topological_sort.G, c_topological_sort.n) | FORALL (x: c_topological_sort.VertID(c_topological_sort.G)): booleans.IMPLIES(digraphs_[c_topological_sort.T, digraph_type[c_topological_sort.T], c_digraphs_imp[c_topological_sort.T].digraph_verts, c_digraphs_imp[c_topological_sort.T].digraph_edges, c_digraphs_imp[c_topological_sort.T].digraph_size, c_digraphs_imp[c_topological_sort.T].digraph_make].edge?(c_topological_sort.G)(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(c_topological_sort.n), c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)), booleans.∨(list_props[c_topological_sort.VertID(c_topological_sort.G)].member(x, k), c_topological_sort.permanent?(c_topological_sort.m WITH [(c_topological_sort.node) := c_topological_sort.temporary](c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(x)))))}")))
 (topological_sort_aux_TCC12 0
  (topological_sort_aux_TCC12-1 nil 3846738806
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (topological_sort_aux subtype "IN_1(c_topological_sort.loop)"
    "{res: [c_topological_sort.loop(c_topological_sort.G) + [c_topological_sort.non_temporary_marking, list_adt[c_topological_sort.Vert(c_topological_sort.G)].list]] | CASES res OF IN_1(loop): booleans.TRUE, IN_2(res): LET (mp, lp) = res IN booleans.∧(c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.mp)(c_topological_sort.lp), booleans.∧(c_topological_sort.greater_marking(c_topological_sort.mp, c_topological_sort.m), booleans.∧(more_list_props[c_topological_sort.T].suffix?(c_topological_sort.l, c_topological_sort.lp), FORALL (i: naturalnumbers.upto(c_topological_sort.n)): list_props[c_topological_sort.T].member(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(i), c_topological_sort.lp)))) ENDCASES}")))
 (topological_sort_aux_TCC13 0
  (topological_sort_aux_TCC13-1 nil 3846738806
   ("" (skeep*)
    (("" (assert)
      ((""
        (typepred "visit(G)
           (m WITH [node := temporary], l, n, gen_seq1(G, node),
            nth(adjs(G), n))")
        (("" (replace -3 * LR)
          (("" (assert)
            (("" (flatten)
              (("" (ground)
                (("1" (expand "greater_marking")
                  (("1" (skolem 1 x)
                    (("1" (inst -2 x)
                      (("1" (flatten) (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "l")
                  (("2" (replace -11 * LR)
                    (("2" (skeep)
                      (("2" (typepred "i")
                        (("2" (replace -12 * LR)
                          (("2" (case "i = 0")
                            (("1" (replace -1 * LR)
                              (("1" (grind) nil nil)) nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (l skolem-const-decl "(topperm_list(G, m))" c_topological_sort nil)
    (m skolem-const-decl "non_temporary_marking" c_topological_sort
     nil)
    (i skolem-const-decl "upto(n)" c_topological_sort nil)
    (n skolem-const-decl "below(size[T](G))" c_topological_sort nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (/= const-decl "boolean" notequal nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (res skolem-const-decl "[[T -> mark], list[Vert(G)]]"
         c_topological_sort nil)
    (G skolem-const-decl "c_digraph[T]" c_topological_sort nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (FALSE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (vert? const-decl "bool" digraphs_ nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (below type-eq-decl nil naturalnumbers nil)
    (member def-decl "bool" list_props nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (in_path? const-decl "bool" c_topological_sort nil)
    (edge? const-decl "bool" digraphs_ nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (path? const-decl "bool" paths_ nil)
    (loop type-eq-decl nil c_topological_sort nil)
    (greater_marking const-decl "bool" c_topological_sort nil)
    (suffix? def-decl "bool" more_list_props structures)
    (from? const-decl "bool" walks_ nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (visit def-decl "{res: [loop(G) + [marking, list[Vert(G)]]] |
   CASES res
     OF IN_1(loop): TRUE,
        IN_2(res):
          (LET (mp, lp) = res IN
             LET node = node(G)(node_id) IN
                  topperm_list(G, mp)(lp) ∧ greater_marking(mp, m)
                ∧ suffix?(l, lp) ∧ permanent?(mp(node))
                ∧ (FORALL x:
                     member(x, lp) IMPLIES
                      NOT member(x, l) IMPLIES
                       (x = node ∨ EXISTS (w: Walk(G)): from?(w, node, x)))
                ∧ (nth[T](lp, 0) = node))
     ENDCASES}" c_topological_sort nil)
    (non_temporary_marking type-eq-decl nil c_topological_sort nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (verts_in? const-decl "bool" walks_ nil)
    (Seq type-eq-decl nil walks_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (topological_sort_aux subtype
    "IN_2(c_topological_sort.res):: [c_topological_sort.loop(c_topological_sort.G) + [c_topological_sort.non_temporary_marking, list_adt[c_topological_sort.Vert(c_topological_sort.G)].list]]"
    "{res: [c_topological_sort.loop(c_topological_sort.G) + [c_topological_sort.non_temporary_marking, list_adt[c_topological_sort.Vert(c_topological_sort.G)].list]] | CASES res OF IN_1(loop): booleans.TRUE, IN_2(res): LET (mp, lp) = res IN booleans.∧(c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.mp)(c_topological_sort.lp), booleans.∧(c_topological_sort.greater_marking(c_topological_sort.mp, c_topological_sort.m), booleans.∧(more_list_props[c_topological_sort.T].suffix?(c_topological_sort.l, c_topological_sort.lp), FORALL (i: naturalnumbers.upto(c_topological_sort.n)): list_props[c_topological_sort.T].member(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(i), c_topological_sort.lp)))) ENDCASES}")))
 (topological_sort_aux_TCC14 0
  (topological_sort_aux_TCC14-1 nil 3846738806
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (topological_sort_aux subtype
    "(number_fields.-)(c_topological_sort.n, 1)"
    "naturalnumbers.below(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G))")))
 (topological_sort_aux_TCC15 0
  (topological_sort_aux_TCC15-1 nil 3846738806
   ("" (skeep*)
    ((""
      (typepred "visit(G)
           (m WITH [node := temporary], l, n, gen_seq1(G, node),
            nth(adjs(G), n))")
      (("" (assert)
        (("" (replace -3 * LR)
          (("" (assert)
            (("" (flatten)
              (("" (replace -9 * RL)
                (("" (replace -10 * RL)
                  (("" (hide -8 -9 -10)
                    (("" (typepred "m")
                      (("" (inst -1 x)
                        (("" (expand "greater_marking")
                          (("" (inst -2 x)
                            (("" (flatten)
                              ((""
                                (assert)
                                ((""
                                  (lift-if)
                                  (("" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil)
    (verts_in? const-decl "bool" walks_ nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (non_temporary_marking type-eq-decl nil c_topological_sort nil)
    (visit def-decl "{res: [loop(G) + [marking, list[Vert(G)]]] |
   CASES res
     OF IN_1(loop): TRUE,
        IN_2(res):
          (LET (mp, lp) = res IN
             LET node = node(G)(node_id) IN
                  topperm_list(G, mp)(lp) ∧ greater_marking(mp, m)
                ∧ suffix?(l, lp) ∧ permanent?(mp(node))
                ∧ (FORALL x:
                     member(x, lp) IMPLIES
                      NOT member(x, l) IMPLIES
                       (x = node ∨ EXISTS (w: Walk(G)): from?(w, node, x)))
                ∧ (nth[T](lp, 0) = node))
     ENDCASES}" c_topological_sort nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (from? const-decl "bool" walks_ nil)
    (suffix? def-decl "bool" more_list_props structures)
    (greater_marking const-decl "bool" c_topological_sort nil)
    (loop type-eq-decl nil c_topological_sort nil)
    (path? const-decl "bool" paths_ nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (edge? const-decl "bool" digraphs_ nil)
    (in_path? const-decl "bool" c_topological_sort nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (member def-decl "bool" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (size const-decl "nat" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (vert? const-decl "bool" digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (topological_sort_aux subtype "c_topological_sort.mp"
    "non_temporary_marking")))
 (topological_sort_aux_TCC16 0
  (topological_sort_aux_TCC16-1 nil 3846738806
   ("" (skeep*)
    (("" (assert)
      ((""
        (typepred "visit(G)
           (m WITH [node := temporary], l, n, gen_seq1(G, node),
            nth(adjs(G), n))")
        (("" (replace -3 * LR) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((FALSE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (vert? const-decl "bool" digraphs_ nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (below type-eq-decl nil naturalnumbers nil)
    (member def-decl "bool" list_props nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (in_path? const-decl "bool" c_topological_sort nil)
    (edge? const-decl "bool" digraphs_ nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (path? const-decl "bool" paths_ nil)
    (loop type-eq-decl nil c_topological_sort nil)
    (greater_marking const-decl "bool" c_topological_sort nil)
    (suffix? def-decl "bool" more_list_props structures)
    (from? const-decl "bool" walks_ nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (visit def-decl "{res: [loop(G) + [marking, list[Vert(G)]]] |
   CASES res
     OF IN_1(loop): TRUE,
        IN_2(res):
          (LET (mp, lp) = res IN
             LET node = node(G)(node_id) IN
                  topperm_list(G, mp)(lp) ∧ greater_marking(mp, m)
                ∧ suffix?(l, lp) ∧ permanent?(mp(node))
                ∧ (FORALL x:
                     member(x, lp) IMPLIES
                      NOT member(x, l) IMPLIES
                       (x = node ∨ EXISTS (w: Walk(G)): from?(w, node, x)))
                ∧ (nth[T](lp, 0) = node))
     ENDCASES}" c_topological_sort nil)
    (non_temporary_marking type-eq-decl nil c_topological_sort nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (verts_in? const-decl "bool" walks_ nil)
    (Seq type-eq-decl nil walks_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (topological_sort_aux subtype "c_topological_sort.lp"
    "(c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.mp))")))
 (topological_sort_aux_TCC17 0
  (topological_sort_aux_TCC17-1 nil 3846738806
   ("" (skeep*) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (topological_sort_aux termination
    "c_topological_sort.topological_sort_aux(c_topological_sort.G)((number_fields.-)(c_topological_sort.n, 1), c_topological_sort.mp, c_topological_sort.lp)"
    "nil")))
 (topological_sort_aux_TCC18 0
  (topological_sort_aux_TCC18-1 nil 3846738806
   ("" (skeep*)
    (("" (assert)
      (("" (lift-if)
        (("" (ground)
          ((""
            (typepred " visit(G)
               (m WITH [node := temporary], l, n, gen_seq1(G, node),
                nth(adjs(G), n))")
            (("" (replace -3 * LR)
              (("" (assert)
                (("" (flatten)
                  (("" (replace -9 * RL)
                    (("" (replace -10 * RL)
                      (("" (hide -8 -9 -10)
                        (("" (typepred "v(G)(n - 1, mp, lp)")
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (name-replace
                                 "mpp"
                                 "OUT_2(v(G)(n - 1, mp, lp))`1")
                                (("1"
                                  (name-replace
                                   "lpp"
                                   "OUT_2(v(G)(n - 1, mp, lp))`2")
                                  (("1"
                                    (expand "topperm_list")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (split 2)
                                        (("1" (propax) nil nil)
                                         ("2" (propax) nil nil)
                                         ("3" (propax) nil nil)
                                         ("4"
                                          (expand "greater_marking")
                                          (("4"
                                            (skolem 1 x)
                                            (("4"
                                              (inst - x)
                                              (("4"
                                                (inst -10 x)
                                                (("4"
                                                  (lift-if)
                                                  (("4"
                                                    (assert)
                                                    (("4"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("5"
                                          (use
                                           "suffix_supl"
                                           (l1 l)
                                           (l2 lpp))
                                          (("5"
                                            (assert)
                                            (("5"
                                              (lemma "suffix_supl[T]")
                                              (("5"
                                                (inst -1 l lp)
                                                (("5"
                                                  (assert)
                                                  (("5"
                                                    (skeep)
                                                    (("5"
                                                      (lemma
                                                       "suffix_supl[T]")
                                                      (("5"
                                                        (inst
                                                         -1
                                                         lp
                                                         lpp)
                                                        (("5"
                                                          (assert)
                                                          (("5"
                                                            (skeep)
                                                            (("5"
                                                              (inst
                                                               1
                                                               "append(L!1, L)")
                                                              (("1"
                                                                (rewrite
                                                                 "append_assoc[T]")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (typepred
                                                                 "lp")
                                                                (("2"
                                                                  (lemma
                                                                   "every_append[T]")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "vert?(G)"
                                                                     L
                                                                     l)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (typepred
                                                                 "lpp")
                                                                (("3"
                                                                  (lemma
                                                                   "every_append[T]")
                                                                  (("3"
                                                                    (inst
                                                                     -1
                                                                     "vert?(G)"
                                                                     L!1
                                                                     lp)
                                                                    (("3"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("6"
                                          (skeep)
                                          (("6"
                                            (inst -6 i)
                                            (("6"
                                              (case "i = n")
                                              (("1"
                                                (replace -1 * LR)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil)
                           ("3" (lemma "topological_sort_aux_TCC15")
                            (("3" (inst -1 G n m l node)
                              (("3"
                                (assert)
                                (("3"
                                  (inst -1 res)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (inst -1 "mp" lp)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (lpp skolem-const-decl "list[Vert(G)]" c_topological_sort nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (/= const-decl "boolean" notequal nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (i skolem-const-decl "upto(n)" c_topological_sort nil)
    (n skolem-const-decl "below(size[T](G))" c_topological_sort nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (suffix_supl formula-decl nil more_list_props structures)
    (G skolem-const-decl "c_digraph[T]" c_topological_sort nil)
    (L!1 skolem-const-decl "list[T]" c_topological_sort nil)
    (L skolem-const-decl "list[T]" c_topological_sort nil)
    (append def-decl "list[T]" list_props nil)
    (append_assoc formula-decl nil list_props nil)
    (every_append formula-decl nil list_props nil)
    (topological_sort_aux_TCC15 subtype-tcc nil c_topological_sort nil)
    (FALSE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (vert? const-decl "bool" digraphs_ nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (VertID type-eq-decl nil c_topological_sort nil)
    (permanent? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (below type-eq-decl nil naturalnumbers nil)
    (member def-decl "bool" list_props nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (in_path? const-decl "bool" c_topological_sort nil)
    (edge? const-decl "bool" digraphs_ nil)
    (Adjs type-eq-decl nil c_topological_sort nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (path? const-decl "bool" paths_ nil)
    (loop type-eq-decl nil c_topological_sort nil)
    (greater_marking const-decl "bool" c_topological_sort nil)
    (suffix? def-decl "bool" more_list_props structures)
    (from? const-decl "bool" walks_ nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (visit def-decl "{res: [loop(G) + [marking, list[Vert(G)]]] |
   CASES res
     OF IN_1(loop): TRUE,
        IN_2(res):
          (LET (mp, lp) = res IN
             LET node = node(G)(node_id) IN
                  topperm_list(G, mp)(lp) ∧ greater_marking(mp, m)
                ∧ suffix?(l, lp) ∧ permanent?(mp(node))
                ∧ (FORALL x:
                     member(x, lp) IMPLIES
                      NOT member(x, l) IMPLIES
                       (x = node ∨ EXISTS (w: Walk(G)): from?(w, node, x)))
                ∧ (nth[T](lp, 0) = node))
     ENDCASES}" c_topological_sort nil)
    (non_temporary_marking type-eq-decl nil c_topological_sort nil)
    (temporary adt-constructor-decl "(temporary?)" c_topological_sort
     nil)
    (verts_in? const-decl "bool" walks_ nil)
    (Seq type-eq-decl nil walks_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (topological_sort_aux subtype
    "c_topological_sort.topological_sort_aux(c_topological_sort.G)((number_fields.-)(c_topological_sort.n, 1), c_topological_sort.mp, c_topological_sort.lp):: [c_topological_sort.loop(c_topological_sort.G) + [c_topological_sort.non_temporary_marking, list_adt[c_topological_sort.Vert(c_topological_sort.G)].list]]"
    "{res: [c_topological_sort.loop(c_topological_sort.G) + [c_topological_sort.non_temporary_marking, list_adt[c_topological_sort.Vert(c_topological_sort.G)].list]] | CASES res OF IN_1(loop): booleans.TRUE, IN_2(res): LET (mp, lp) = res IN booleans.∧(c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.mp)(c_topological_sort.lp), booleans.∧(c_topological_sort.greater_marking(c_topological_sort.mp, c_topological_sort.m), booleans.∧(more_list_props[c_topological_sort.T].suffix?(c_topological_sort.l, c_topological_sort.lp), FORALL (i: naturalnumbers.upto(c_topological_sort.n)): list_props[c_topological_sort.T].member(c_digraphs_def[c_topological_sort.T].node(c_topological_sort.G)(i), c_topological_sort.lp)))) ENDCASES}")))
 (member_length 0
  (member_length-1 nil 3846750948
   ("" (induct l1)
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("x" "l1"))
      (("2" (flatten)
        (("2" (skeep)
          (("2" (inst-cp -3 "x")
            (("2" (assert)
              (("2" (expand "length" 1 2)
                (("2" (assert)
                  (("2" (expand "member" -4 1)
                    (("2" (use "expand_list_app[T]")
                      (("2" (assert)
                        (("2" (skolem -1 ("l2_1" "l2_2"))
                          (("2" (inst -2 "append(l2_1, l2_2)")
                            (("2" (assert)
                              (("2"
                                (replace -1 1 LR)
                                (("2"
                                  (rewrite "length_append[T]")
                                  (("2"
                                    (rewrite "length_append[T]")
                                    (("2"
                                      (rewrite "length_append[T]")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (use "no_rep_cdr[T]" (l l1))
                                          (("2"
                                            (assert)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replace -2 -5 LR)
                                                  (("2"
                                                    (skolem 2 "a")
                                                    (("2"
                                                      (inst -4 "a")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (expand
                                                           "member"
                                                           -5
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "member_append_fi[T]")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "a"
                                                                 "l2_1"
                                                                 "append((: x :), l2_2)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (use
                                                                     "member_append_l[T]"
                                                                     (l1
                                                                      l2_1))
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "append"
                                                                         -1)
                                                                        (("2"
                                                                          (expand
                                                                           "member"
                                                                           -1)
                                                                          (("2"
                                                                            (expand
                                                                             "append"
                                                                             -1)
                                                                            (("2"
                                                                              (use
                                                                               "member_append_r[T]"
                                                                               (l2
                                                                                l2_2))
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (expand_list_app formula-decl nil more_list_props structures)
    (length_append formula-decl nil list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (no_rep_cdr formula-decl nil more_list_props structures)
    (member_append_fi formula-decl nil more_list_props structures)
    (member_append_r formula-decl nil more_list_props structures)
    (member_append_l formula-decl nil more_list_props structures)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (/= const-decl "boolean" notequal nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (member def-decl "bool" list_props nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (topological_sort_TCC1 0
  (topological_sort_TCC2-1 nil 3846749251
   ("" (skeep)
    (("" (skolem-typepred)
      (("" (expand "vert?")
        (("" (expand "size")
          (("" (expand "length")
            (("" (lift-if)
              (("" (expand "digraph_verts")
                (("" (expand "vert")
                  (("" (expand "member")
                    (("" (assert)
                      (("" (lift-if) (("" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (vert? const-decl "bool" digraphs_ nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (size const-decl "nat" c_digraphs_def nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member def-decl "bool" list_props nil)
    (length def-decl "nat" list_props nil))
   nil
   (topological_sort subtype "0"
    "naturalnumbers.below(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G))")))
 (topological_sort_TCC2 0
  (topological_sort_TCC3-1 nil 3846749251
   ("" (grind)
    (("1" (expand "length")
      (("1" (lift-if) (("1" (assert) (("1" (ground) nil nil)) nil))
        nil))
      nil)
     ("2" (expand "length")
      (("2" (lift-if) (("2" (ground) nil nil)) nil)) nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (member def-decl "bool" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (vert type-eq-decl nil digraphs_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (G!1 skolem-const-decl "c_digraph[T]" c_topological_sort nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (topological_ordering? const-decl "bool" c_topological_sort nil)
    (edge? const-decl "bool" digraphs_ nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (size const-decl "nat" c_digraphs_def nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nth def-decl "T" list_props nil))
   nil
   (topological_sort subtype
    "LAMBDA (x: c_topological_sort.Vert(c_topological_sort.G)): 0"
    "(c_topological_sort.topological_ordering?(c_topological_sort.G))")))
 (topological_sort_TCC3 0
  (topological_sort_TCC5-1 nil 3846749251
   ("" (skeep)
    (("" (assert)
      (("" (expand "is_dag")
        (("" (skeep)
          (("" (expand "path?")
            (("" (skeep)
              (("" (expand "finseq_appl")
                (("" (typepred "w")
                  (("" (expand "walk?")
                    (("" (flatten)
                      (("" (expand "verts_in?")
                        (("" (inst -2 0)
                          (("" (expand "digraph_verts")
                            (("" (expand "vert")
                              ((""
                                (expand "size")
                                ((""
                                  (expand "length")
                                  ((""
                                    (expand "member")
                                    ((""
                                      (lift-if)
                                      ((""
                                        (assert)
                                        (("" (ground) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Walk type-eq-decl nil walks_ nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member def-decl "bool" list_props nil)
    (size const-decl "nat" c_digraphs_def nil)
    (verts_in? const-decl "bool" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (path? const-decl "bool" paths_ nil)
    (is_dag const-decl "bool" c_topological_sort nil))
   nil
   (topological_sort subtype
    "IN_2(LAMBDA (x: c_topological_sort.Vert(c_topological_sort.G)): 0)"
    "{res: [c_topological_sort.loop(c_topological_sort.G) + (c_topological_sort.topological_ordering?(c_topological_sort.G))] | booleans.⇔(IN?_2(res), c_topological_sort.is_dag(c_topological_sort.G))}")))
 (topological_sort_TCC4 0
  (topological_sort_TCC4-1 nil 3846749251 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (size const-decl "nat" c_digraphs_def nil))
   nil
   (topological_sort subtype
    "(number_fields.-)(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G), 1)"
    "naturalnumbers.below(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G))")))
 (topological_sort_TCC5 0
  (topological_sort_TCC1-1 nil 3846749251 ("" (subtype-tcc) nil nil)
   ((T formal-nonempty-type-decl nil c_topological_sort nil)
    (size const-decl "nat" c_digraphs_def nil)
    (empty_marking const-decl "marking" c_topological_sort nil))
   nil
   (topological_sort subtype "c_topological_sort.empty_marking"
    "non_temporary_marking")))
 (topological_sort_TCC6 0
  (topological_sort_TCC6-1 nil 3846749251 ("" (grind) nil nil)
   ((c_digraph type-eq-decl nil c_digraphs_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (edge? const-decl "bool" digraphs_ nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (verts_in? const-decl "bool" walks_ nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (vert? const-decl "bool" digraphs_ nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (G!1 skolem-const-decl "c_digraph[T]" c_topological_sort nil)
    (below type-eq-decl nil naturalnumbers nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (size const-decl "nat" c_digraphs_def nil)
    (every adt-def-decl "boolean" list_adt nil)
    (member def-decl "bool" list_props nil)
    (empty_marking const-decl "marking" c_topological_sort nil)
    (permanent_list? const-decl "bool" c_topological_sort nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (from? const-decl "bool" walks_ nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (topological_sort subtype "list_adt[c_topological_sort.T].null"
    "(c_topological_sort.topperm_list(c_topological_sort.G, c_topological_sort.empty_marking))")))
 (topological_sort_TCC7 0
  (topological_sort_TCC7-1 nil 3846749251
   ("" (skeep*)
    (("" (lift-if)
      (("" (assert)
        (("" (split)
          (("1" (flatten)
            (("1" (expand "is_dag")
              (("1"
                (inst -2
                 "OUT_1(topological_sort_aux(G)(size[T](G) - 1, empty_marking, null[T]))")
                (("1" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (flatten)
            (("2"
              (typepred "topological_sort_aux(G)
                                                 (size[T](G) - 1,
                                                  empty_marking,
                                                  null[T])")
              (("2" (assert)
                (("2" (flatten)
                  (("2"
                    (name-replace "lp"
                     "OUT_2(topological_sort_aux(G)(size[T](G) - 1, empty_marking, null[T]))`2")
                    (("2"
                      (name-replace "mp"
                       "OUT_2(topological_sort_aux(G)(size[T](G) - 1, empty_marking, null[T]))`1")
                      (("2" (ground)
                        (("1" (expand "topperm_list")
                          (("1" (flatten)
                            (("1" (case "length(lp) >= size(G)")
                              (("1"
                                (case "length(lp) <= size(G)")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (typepred "G")
                                  (("2"
                                    (expand "cdigraph")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "size")
                                        (("2"
                                          (use "member_length" (l1 lp))
                                          (("2"
                                            (assert)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (typepred "lp")
                                                (("2"
                                                  (expand "vert?")
                                                  (("2"
                                                    (expand
                                                     "digraph_verts")
                                                    (("2"
                                                      (expand "vert")
                                                      (("2"
                                                        (use
                                                         "every_nth[T]")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (use
                                                             "member_iff_nth[T]")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (inst
                                                                   -2
                                                                   i)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (use "member_length" (l1 "data(G)"))
                                (("2"
                                  (assert)
                                  (("2"
                                    (typepred "G")
                                    (("2"
                                      (expand "cdigraph")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "size")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (use
                                                   "member_iff_nth[T]")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst -12 i)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "node")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep) (("2" (inst -4 i) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (Walk type-eq-decl nil walks_ nil) (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (non_temporary_marking type-eq-decl nil c_topological_sort nil)
    (vert? const-decl "bool" digraphs_ nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (path? const-decl "bool" paths_ nil)
    (loop type-eq-decl nil c_topological_sort nil)
    (greater_marking const-decl "bool" c_topological_sort nil)
    (suffix? def-decl "bool" more_list_props structures)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (member def-decl "bool" list_props nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (topological_sort_aux def-decl
     "{res: [loop(G) + [non_temporary_marking, list[Vert(G)]]] |
   CASES res
     OF IN_1(loop): TRUE,
        IN_2(res):
          LET (mp, lp) = res IN
            topperm_list(G, mp)(lp) ∧
             greater_marking(mp, m) ∧
              suffix?(l, lp) ∧ FORALL (i: upto(n)): member(node(G)(i), lp)
     ENDCASES}" c_topological_sort nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (empty_marking const-decl "marking" c_topological_sort nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (is_dag const-decl "bool" c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (topological_sort subtype
    "IN_1(c_topological_sort.loop):: [c_topological_sort.loop(c_topological_sort.G) + (c_topological_sort.topological_ordering?(c_topological_sort.G))]"
    "{res: [c_topological_sort.loop(c_topological_sort.G) + (c_topological_sort.topological_ordering?(c_topological_sort.G))] | booleans.⇔(IN?_2(res), c_topological_sort.is_dag(c_topological_sort.G))}")))
 (topological_sort_TCC8 0
  (topological_sort_TCC8-1 nil 3847900230
   ("" (skeep*)
    ((""
      (typepred
       "topological_sort_aux(G)(size(G) - 1, empty_marking, null)")
      (("1" (assert)
        (("1" (flatten)
          (("1" (assert)
            (("1" (replace -5 * LR)
              (("1" (assert)
                (("1" (replace -6 * RL)
                  (("1" (replace -7 * RL)
                    (("1" (typepred "x")
                      (("1" (expand "vert?")
                        (("1" (expand "digraph_verts")
                          (("1" (expand "vert")
                            (("1" (use "member_iff_nth[T]")
                              (("1"
                                (assert)
                                (("1"
                                  (skolem -1 "idx_x")
                                  (("1"
                                    (inst -6 "idx_x")
                                    (("1"
                                      (expand "node")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (typepred "idx_x")
                                        (("2"
                                          (expand "size")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (empty_marking const-decl "marking" c_topological_sort nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (topological_sort_aux def-decl
     "{res: [loop(G) + [non_temporary_marking, list[Vert(G)]]] |
   CASES res
     OF IN_1(loop): TRUE,
        IN_2(res):
          LET (mp, lp) = res IN
            topperm_list(G, mp)(lp) ∧
             greater_marking(mp, m) ∧
              suffix?(l, lp) ∧ FORALL (i: upto(n)): member(node(G)(i), lp)
     ENDCASES}" c_topological_sort nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (member def-decl "bool" list_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (suffix? def-decl "bool" more_list_props structures)
    (greater_marking const-decl "bool" c_topological_sort nil)
    (loop type-eq-decl nil c_topological_sort nil)
    (path? const-decl "bool" paths_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (vert? const-decl "bool" digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (non_temporary_marking type-eq-decl nil c_topological_sort nil)
    (below type-eq-decl nil naturalnumbers nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (size const-decl "nat" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member_iff_nth formula-decl nil more_list_props structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (idx_x skolem-const-decl "below(length[T](data(G)))"
     c_topological_sort nil)
    (G skolem-const-decl "c_digraph[T]" c_topological_sort nil)
    (length def-decl "nat" list_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (topological_sort subtype "c_topological_sort.x"
    "{a: c_topological_sort.T | list_props[c_topological_sort.T].member(a, c_topological_sort.l)}")))
 (topological_sort_TCC9 0
  (topological_sort_TCC9-1 nil 3847900230
   ("" (skeep*)
    (("" (assert)
      (("" (expand "is_dag")
        (("" (skeep)
          (("" (expand "path?")
            (("" (skeep)
              (("" (expand "finseq_appl")
                ((""
                  (typepred
                   "topological_sort_aux(G)(size(G) - 1, empty_marking, null)")
                  (("" (assert)
                    (("" (flatten)
                      (("" (replace -5 * LR)
                        (("" (assert)
                          (("" (replace -6 * rl)
                            (("" (replace -7 * rl)
                              ((""
                                (expand "topperm_list")
                                ((""
                                  (flatten)
                                  ((""
                                    (expand "topological_list?")
                                    ((""
                                      (hide -1 -4 -5)
                                      ((""
                                        (case "i < j")
                                        (("1"
                                          (inst
                                           -
                                           "idx(l, w`seq(i))"
                                           "w`seq(j)")
                                          (("1"
                                            (ground)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (expand
                                                 "no_repetitions?")
                                                (("1"
                                                  (inst
                                                   -
                                                   "j_1"
                                                   "idx(l, w`seq(i))")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst
                                               1
                                               "(#length := j-i+1 , seq := Lambda (k:upto(j-i)): w`seq(i+k)  #)")
                                              (("1"
                                                (expand "from?")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "walk?")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "verts_in?")
                                                    (("2"
                                                      (expand
                                                       "finseq_appl")
                                                      (("2"
                                                        (ground)
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (typepred
                                                             "w")
                                                            (("1"
                                                              (expand
                                                               "walk?")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "verts_in?")
                                                                  (("1"
                                                                    (inst
                                                                     -2
                                                                     "i_1+i")
                                                                    (("1"
                                                                      (expand
                                                                       "digraph_verts")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "w")
                                                          (("2"
                                                            (expand
                                                             "walk?")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (inst
                                                                   -3
                                                                   "n+i")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "finseq_appl")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "w")
                                            (("2"
                                              (expand "walk?")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (expand "verts_in?")
                                                  (("2"
                                                    (inst -2 i)
                                                    (("2"
                                                      (expand
                                                       "digraph_verts")
                                                      (("2"
                                                        (expand "vert")
                                                        (("2"
                                                          (use
                                                           "member_iff_nth[T]")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst
                                                                 -7
                                                                 "i_1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "node")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "j < i")
                                          (("1"
                                            (inst
                                             -
                                             "idx(l, w`seq(j))"
                                             "w`seq(i)")
                                            (("1"
                                              (split -)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (expand
                                                   "no_repetitions?")
                                                  (("1"
                                                    (inst
                                                     -
                                                     "j_1"
                                                     "idx(l, w`seq(j))")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "w")
                                                (("2"
                                                  (inst
                                                   1
                                                   "(#length := i-j+1 , seq := Lambda (k:upto(i-j)): w`seq(j+k)  #)")
                                                  (("1"
                                                    (expand "from?")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "walk?")
                                                      (("2"
                                                        (expand
                                                         "verts_in?")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "finseq_appl")
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (inst
                                                                   -2
                                                                   " i_1+j")
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (inst
                                                                     -4
                                                                     "n+j")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("4"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "w")
                                              (("2"
                                                (expand "walk?")
                                                (("2"
                                                  (expand "verts_in?")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst -2 j)
                                                      (("2"
                                                        (expand
                                                         "digraph_verts")
                                                        (("2"
                                                          (expand
                                                           "vert")
                                                          (("2"
                                                            (use
                                                             "member_iff_nth[T]")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (inst
                                                                   -7
                                                                   "i!1")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "node")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (empty_marking const-decl "marking" c_topological_sort nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (topological_sort_aux def-decl
     "{res: [loop(G) + [non_temporary_marking, list[Vert(G)]]] |
   CASES res
     OF IN_1(loop): TRUE,
        IN_2(res):
          LET (mp, lp) = res IN
            topperm_list(G, mp)(lp) ∧
             greater_marking(mp, m) ∧
              suffix?(l, lp) ∧ FORALL (i: upto(n)): member(node(G)(i), lp)
     ENDCASES}" c_topological_sort nil)
    (node const-decl "{v: T | member(v, data(cd))}" c_digraphs_def nil)
    (member def-decl "bool" list_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (suffix? def-decl "bool" more_list_props structures)
    (greater_marking const-decl "bool" c_topological_sort nil)
    (loop type-eq-decl nil c_topological_sort nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (temporary? adt-recognizer-decl "[mark -> boolean]"
     c_topological_sort nil)
    (topperm_list const-decl "bool" c_topological_sort nil)
    (marking type-eq-decl nil c_topological_sort nil)
    (mark type-decl nil c_topological_sort nil)
    (Vert type-eq-decl nil c_topological_sort nil)
    (vert? const-decl "bool" digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (non_temporary_marking type-eq-decl nil c_topological_sort nil)
    (below type-eq-decl nil naturalnumbers nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (size const-decl "nat" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (i!1 skolem-const-decl "below(length[T](data(G)))"
     c_topological_sort nil)
    (edge? const-decl "bool" digraphs_ nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (G skolem-const-decl "c_digraph[T]" c_topological_sort nil)
    (w skolem-const-decl
     "Walk[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](G)" c_topological_sort nil)
    (i skolem-const-decl "below(length(w))" c_topological_sort nil)
    (l skolem-const-decl "list[Vert(G)]" c_topological_sort nil)
    (idx def-decl "{i: below(length(l)) | nth(l, i) = a}"
     more_list_props structures)
    (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (j skolem-const-decl "below(length(w))" c_topological_sort nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (from? const-decl "bool" walks_ nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (verts_in? const-decl "bool" walks_ nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (/= const-decl "boolean" notequal nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member_iff_nth formula-decl nil more_list_props structures)
    (i_1 skolem-const-decl "below(length[T](data(G)))"
     c_topological_sort nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (topological_list? const-decl "bool" c_topological_sort nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (path? const-decl "bool" paths_ nil)
    (is_dag const-decl "bool" c_topological_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (topological_sort subtype
    "IN_2(LAMBDA (x: c_topological_sort.Vert(c_topological_sort.G)): (number_fields.-)(c_digraphs_def[c_topological_sort.T].size(c_topological_sort.G), more_list_props[c_topological_sort.T].idx(c_topological_sort.l, x))):: [c_topological_sort.loop(c_topological_sort.G) + (c_topological_sort.topological_ordering?(c_topological_sort.G))]"
    "{res: [c_topological_sort.loop(c_topological_sort.G) + (c_topological_sort.topological_ordering?(c_topological_sort.G))] | booleans.⇔(IN?_2(res), c_topological_sort.is_dag(c_topological_sort.G))}")))
 (topological_sort_exists 0
  (topological_sort_exists-1 nil 3846753478
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (typepred "topological_sort(G)")
          (("1" (assert)
            (("1" (hide -1)
              (("1" (inst 1 "OUT_2(topological_sort(G))") nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (skeep)
          (("2" (expand "is_dag")
            (("2" (lemma "topological_ordering_path")
              (("2" (inst -1 "G" "f" "_" "_" "_" "_")
                (("2" (skeep)
                  (("2" (typepred "w")
                    (("2" (expand "path?")
                      (("2" (expand "finseq_appl")
                        (("2" (skeep)
                          (("2" (case "i < j")
                            (("1" (inst - "j-i-1" w i j)
                              (("1" (assert) nil nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("2" (case "j < i")
                              (("1"
                                (inst -4 "i-j-1" w j i)
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((topological_sort const-decl
     "{res: [loop(G) + (topological_ordering?(G))] | IN?_2(res) ⇔ is_dag(G)}"
     c_topological_sort nil)
    (is_dag const-decl "bool" c_topological_sort nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (topological_ordering? const-decl "bool" c_topological_sort nil)
    (below type-eq-decl nil naturalnumbers nil)
    (size const-decl "nat" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (vert type-eq-decl nil digraphs_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (loop type-eq-decl nil c_topological_sort nil)
    (path? const-decl "bool" paths_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (T formal-nonempty-type-decl nil c_topological_sort nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (topological_ordering_path formula-decl nil c_topological_sort nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (G skolem-const-decl "c_digraph[T]" c_topological_sort nil)
    (w skolem-const-decl
     "Walk[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](G)" c_topological_sort nil)
    (i skolem-const-decl "below(length(w))" c_topological_sort nil)
    (j skolem-const-decl "below(length(w))" c_topological_sort nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   shostak)))
(c_topological_sort_example
 (G1_TCC1 0
  (G1_TCC1-1 nil 3817967284
   ("" (expand "cdigraph")
    (("" (split)
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2"
          (case "i = 0 OR i = 1 OR i = 2 OR i = 3 OR i = 4 OR i = 5 OR i = 6 OR i = 7 OR i = 8")
          (("1" (grind)
            (("1" (expand "nth")
              (("1" (grind)
                (("1" (expand "nth") (("1" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (expand "nth")
              (("2" (grind)
                (("2" (expand "nth") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (typepred "i") (("2" (grind) nil nil)) nil))
          nil))
        nil)
       ("3" (expand "no_repetitions?")
        (("3" (skeep)
          (("3"
            (case "i = 0 OR i = 1 OR i = 2 OR i = 3 OR i = 4 OR i = 5 OR i = 6 OR i = 7 OR i = 8")
            (("1"
              (case "j = 0 OR j = 1 OR j = 2 OR j = 3 OR j = 4 OR j = 5 OR j = 6 OR j = 7 OR j = 8")
              (("1" (grind) nil nil)
               ("2" (typepred "j") (("2" (grind) nil nil)) nil))
              nil)
             ("2" (typepred "i") (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil)
       ("4" (skeep)
        (("4"
          (case "i = 0 OR i = 1 OR i = 2 OR i = 3 OR i = 4 OR i = 5 OR i = 6 OR i = 7 OR i = 8")
          (("1" (grind)
            (("1" (expand "nth")
              (("1" (grind)
                (("1" (expand "nth") (("1" (grind) nil nil)) nil)
                 ("2" (expand "nth") (("2" (grind) nil nil)) nil)
                 ("3" (expand "nth") (("3" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (expand "nth")
              (("2" (grind)
                (("1" (expand "nth") (("1" (grind) nil nil)) nil)
                 ("2" (expand "nth") (("2" (grind) nil nil)) nil)
                 ("3" (expand "nth") (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (typepred "i") (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (size const-decl "nat" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (/= const-decl "boolean" notequal nil)
    (cdigraph const-decl "bool" c_digraphs_def nil))
   nil
   (G1 subtype
    "(# data := (: 0, 1, 2, 3, 4, 5, 6, 7, 8 :), adjs := (: (: 1 :), (: :), (: 0, 3, 4 :), (: 0, 7, 8 :), (: 1 :), (: :), (: 1 :), (: 8 :), (: 1 :) :) #)"
    "c_digraph[nat]")))
 (G2_TCC1 0
  (G2_TCC1-1 nil 3846753477
   ("" (expand "cdigraph")
    (("" (split)
      (("1" (grind) nil nil)
       ("2" (skeep)
        (("2"
          (case "i = 0 OR i = 1 OR i = 2 OR i = 3 OR i = 4 OR i = 5 OR i = 6 OR i = 7 OR i = 8")
          (("1" (grind)
            (("1" (expand "nth")
              (("1" (grind)
                (("1" (expand "nth") (("1" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (expand "nth")
              (("2" (grind)
                (("2" (expand "nth") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (grind)
            (("2" (typepred "i") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("3" (expand "no_repetitions?")
        (("3" (skeep)
          (("3"
            (case "i = 0 OR i = 1 OR i = 2 OR i = 3 OR i = 4 OR i = 5 OR i = 6 OR i = 7 OR i = 8")
            (("1"
              (case "j = 0 OR j = 1 OR j = 2 OR j = 3 OR j = 4 OR j = 5 OR j = 6 OR j = 7 OR j = 8")
              (("1" (grind) nil nil)
               ("2" (typepred "j") (("2" (grind) nil nil)) nil))
              nil)
             ("2" (typepred "i") (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil)
       ("4" (skeep)
        (("4"
          (case "i = 0 OR i = 1 OR i = 2 OR i = 3 OR i = 4 OR i = 5 OR i = 6 OR i = 7 OR i = 8")
          (("1" (grind)
            (("1" (expand "nth")
              (("1" (grind)
                (("1" (expand "nth") (("1" (grind) nil nil)) nil)
                 ("2" (expand "nth") (("2" (grind) nil nil)) nil)
                 ("3" (expand "nth") (("3" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (expand "nth")
              (("2" (grind)
                (("1" (expand "nth") (("1" (grind) nil nil)) nil)
                 ("2" (expand "nth") (("2" (grind) nil nil)) nil)
                 ("3" (expand "nth") (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (typepred "i") (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (size const-decl "nat" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (/= const-decl "boolean" notequal nil)
    (cdigraph const-decl "bool" c_digraphs_def nil))
   nil
   (G2 subtype
    "(# data := (: 0, 1, 2, 3, 4, 5, 6, 7, 8 :), adjs := (: (: 1 :), (: 7 :), (: 0, 3, 4 :), (: 0, 7, 8 :), (: 1 :), (: :), (: 1 :), (: 8 :), (: 1 :) :) #)"
    "c_digraph[nat]"))))

