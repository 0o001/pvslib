(cdigraph_all_cycles
 (loi_cons 0
  (loi_cons-1 nil 3655568650
   ("" (skeep)
    (("" (expand "list_of_idxs")
      (("" (skeep)
        (("" (inst -1 "i+1")
          (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((list_of_idxs const-decl "bool" c_digraphs_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (n skolem-const-decl "nat" cdigraph_all_cycles nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (i skolem-const-decl "below(length(l))" cdigraph_all_cycles nil)
    (below type-eq-decl nil naturalnumbers nil)
    (l skolem-const-decl "list[nat]" cdigraph_all_cycles nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (size const-decl "nat" c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (nth def-decl "T" list_props nil))
   shostak))
 (walk?_TCC1 0
  (walk?_TCC1-1 nil 3655548129 ("" (subtype-tcc) nil nil) nil nil))
 (walk?_TCC2 0
  (walk?_TCC2-1 nil 3655548129 ("" (subtype-tcc) nil nil) nil nil))
 (walk?_TCC3 0
  (walk?_TCC3-1 nil 3655548129 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (size const-decl "nat" c_digraphs_def nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    nil nil nil (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil))
   nil))
 (walk_eq_TCC1 0
  (walk_eq_TCC1-1 nil 3661518242 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (walk_eq_TCC2 0
  (walk_eq_TCC2-1 nil 3661518242 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (idx def-decl "{i: below(length(l)) | nth(l, i) = a}"
     more_list_props "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member def-decl "bool" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil) nil nil nil
    (edge? const-decl "bool" digraphs_ nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (verts_in? const-decl "bool" walks_ nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil)
    (size const-decl "nat" c_digraphs_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (walk_append_TCC1 0
  (walk_append_TCC1-1 nil 3655576611 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil)
    (size const-decl "nat" c_digraphs_def nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil))
   nil))
 (walk_append_TCC2 0
  (walk_append_TCC2-1 nil 3655576611 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil naturalnumbers nil) nil
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil)
    (size const-decl "nat" c_digraphs_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (last const-decl "T" more_list_props "structures/")
    (nth def-decl "T" list_props nil))
   nil))
 (walk_append_TCC3 0
  (walk_append_TCC3-1 nil 3655576611
   ("" (skeep*) (("" (use "loi_append") (("" (assert) nil nil)) nil))
    nil)
   ((loi_append formula-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (walk_append 0
  (walk_append-1 nil 3656062706
   ("" (skeep 1 :but ("l1"))
    (("" (induct "l1")
      (("1" (grind) nil nil) ("2" (grind) nil nil)
       ("3" (grind) nil nil) ("4" (grind) nil nil)
       ("5" (skolem 1 ("v" "vs"))
        (("5" (flatten)
          (("5" (use "loi_cons")
            (("5" (assert)
              (("5" (case "walk?(C)(vs)")
                (("1" (assert)
                  (("1" (split -7)
                    (("1" (assert)
                      (("1" (expand "append" 1)
                        (("1" (expand "walk?" 1)
                          (("1" (skeep :preds? t)
                            (("1" (case "i=0")
                              (("1"
                                (replace -1 :hide? t)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "nth" 1 (1 3))
                                    (("1"
                                      (expand "walk?" -7)
                                      (("1"
                                        (inst -7 "0")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "nth" -7 (1 3))
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "walk?" -5)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (inst -5 "i-1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "nth" 3 (1 3))
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand "append" 1)
                        (("2" (expand "walk?" 1)
                          (("2" (skeep :preds? t)
                            (("2" (case "i=0")
                              (("1"
                                (replace -1 :hide? t)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "nth" 1 (1 3))
                                    (("1"
                                      (expand "walk?" -7)
                                      (("1"
                                        (inst -7 "0")
                                        (("1"
                                          (expand "nth" -7 (1 3))
                                          (("1"
                                            (use "nth_append[nat]")
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (replace -1 :hide? t)
                                                (("1"
                                                  (lift-if 1)
                                                  (("1"
                                                    (split 1)
                                                    (("1"
                                                      (flatten)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (case
                                                         "length(vs)=0")
                                                        (("1"
                                                          (expand
                                                           "walk?"
                                                           -4)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "walk?" -3)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     1
                                                     1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "length" 1 1)
                                          (("2"
                                            (expand "walk?" -3)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (expand "length" 1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (split -5)
                                (("1"
                                  (expand "walk?" -1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst -1 "i-1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "nth" 3 (1 3))
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (case "NOT null?(vs)")
                  (("1" (expand "walk?" 2)
                    (("1" (split 2)
                      (("1" (propax) nil nil)
                       ("2" (expand "walk?" -4)
                        (("2" (skeep 1)
                          (("2" (inst -4 "i+1")
                            (("1" (assert)
                              (("1"
                                (expand "nth" -4 (1 3))
                                (("1" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "append" 2)
                    (("2" (expand "append" 2)
                      (("2" (assert)
                        (("2" (expand "walk?" 2)
                          (("2" (skeep 2 :preds? t)
                            (("2" (case "i=0")
                              (("1"
                                (replace -1 :hide? t)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "nth" 2 (1 3))
                                    (("1"
                                      (case "last(cons(v,vs))=v")
                                      (("1"
                                        (replace -1 :hide? t)
                                        (("1"
                                          (expand "nth" 2 1)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "nth" 3 1)
                                (("2"
                                  (expand "walk?" -7)
                                  (("2"
                                    (inst -7 "i-1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "nth" 3 3)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("6" (grind) nil nil) ("7" (grind) nil nil)
       ("8" (skeep*)
        (("8" (use "loi_append") (("8" (assert) nil nil)) nil)) nil)
       ("9" (grind) nil nil) ("10" (grind) nil nil)
       ("11" (skeep*)
        (("11" (expand "list_of_idxs")
          (("11" (expand "size")
            (("11" (expand "last")
              (("11" (inst -4 "length(l1)-1")
                (("1" (assert)
                  (("1" (typepred "C")
                    (("1" (expand "cdigraph") (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("12" (grind) nil nil) ("13" (grind) nil nil)
       ("14" (grind) nil nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (l2 skolem-const-decl "(list_of_idxs(C))" cdigraph_all_cycles nil)
    (C skolem-const-decl "(cdigraph)" cdigraph_all_cycles nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (last const-decl "T" more_list_props "structures/")
    (< const-decl "bool" reals nil)
    (append def-decl "list[T]" list_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (member def-decl "bool" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (size const-decl "nat" c_digraphs_def nil)
    (i skolem-const-decl "below(length(vs) - 1)" cdigraph_all_cycles
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i skolem-const-decl "below(length(cons(v, l2)) - 1)"
     cdigraph_all_cycles nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nth_append formula-decl nil more_list_props "structures/")
    (i skolem-const-decl "below(length(cons(v, append(vs, l2))) - 1)"
     cdigraph_all_cycles nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (vs skolem-const-decl "list[nat]" cdigraph_all_cycles nil)
    (v skolem-const-decl "nat" cdigraph_all_cycles nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (i skolem-const-decl "below(length(cons(v, append(vs, l2))) - 1)"
     cdigraph_all_cycles nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (loi_cons formula-decl nil cdigraph_all_cycles nil)
    (loi_append formula-decl nil c_digraphs_def nil)
    (l1 skolem-const-decl "list[nat]" cdigraph_all_cycles nil))
   shostak))
 (walk_eq_inj_1 0
  (walk_eq_inj_1-1 nil 3661529986
   ("" (skeep)
    (("" (expand "walk_eq")
      (("" (apply-extensionality)
        (("1" (flatten) (("1" (assert) nil nil)) nil)
         ("2" (apply-extensionality)
          (("2" (flatten)
            (("2" (inst?)
              (("2" (inst?)
                (("2" (assert)
                  (("2" (expand "finseq_appl") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((walk_eq const-decl "bool" cdigraph_all_cycles nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil))
 (circuit?_TCC1 0
  (circuit?_TCC1-1 nil 3655548129 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil)
    (size const-decl "nat" c_digraphs_def nil))
   nil))
 (circuit?_TCC2 0
  (circuit?_TCC2-1 nil 3655548129 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil)
    (size const-decl "nat" c_digraphs_def nil))
   nil))
 (no_repetitions_append 0
  (no_repetitions_append-1 nil 3656070847
   ("" (induct "l1")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("v" "vs"))
      (("2" (flatten)
        (("2" (skeep 1)
          (("2" (inst -1 "l2")
            (("2" (split 1)
              (("1" (flatten)
                (("1" (hide -5)
                  (("1" (assert)
                    (("1" (expand "append" 1)
                      (("1" (expand "no_repetitions?" 1)
                        (("1" (skeep :preds? t)
                          (("1" (split -7)
                            (("1" (case "i=0")
                              (("1"
                                (replace -1 :hide? t)
                                (("1"
                                  (expand "nth" -7 1)
                                  (("1"
                                    (expand "nth" -7 1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (use "nth_append[nat]")
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (replace -1 :hide? t)
                                            (("1"
                                              (lift-if -7)
                                              (("1"
                                                (split -7)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand
                                                     "no_repetitions?"
                                                     -6)
                                                    (("1"
                                                      (inst -6 "0" "j")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (lemma
                                                     "nth_member[nat]")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "l2"
                                                       "v"
                                                       "j-1-length(vs)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst -8 "v")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-3 1))
                                            (("2"
                                              (expand "length" -1)
                                              (("2"
                                                (use
                                                 "length_append[nat]")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case "j=0")
                                (("1"
                                  (replace -1 :hide? t)
                                  (("1"
                                    (hide 2)
                                    (("1"
                                      (expand "nth" -7)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (use "nth_append[nat]")
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (replace -1 :hide? t)
                                              (("1"
                                                (lift-if -7)
                                                (("1"
                                                  (split -7)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "no_repetitions?"
                                                       -6)
                                                      (("1"
                                                        (inst
                                                         -6
                                                         "0"
                                                         "i")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "nth"
                                                               -6)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (lemma
                                                       "nth_member[nat]")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "l2"
                                                         "v"
                                                         "i-1-length(vs)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             -8
                                                             "v")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (1 -2))
                                              (("2"
                                                (expand "length" -1)
                                                (("2"
                                                  (use
                                                   "length_append[nat]")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "no_repetitions?" -1)
                                  (("2"
                                    (inst -1 "i-1" "j-1")
                                    (("1" (grind) nil nil)
                                     ("2" (grind) nil nil)
                                     ("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (1 -3))
                              (("2"
                                (expand "no_repetitions?")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (inst -2 "i!1+1" "j!1+1")
                                    (("1" (grind) nil nil)
                                     ("2" (grind) nil nil)
                                     ("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide-all-but (-5 1))
                              (("3"
                                (skeep)
                                (("3"
                                  (inst -3 "n")
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (hide -2)
                  (("2" (split -2)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (split 1)
                          (("1" (hide-all-but (-4 1))
                            (("1" (expand "no_repetitions?")
                              (("1"
                                (skeep 1 :preds? t)
                                (("1"
                                  (inst -4 "i" "j")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (use "nth_append[nat]")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -1 :hide? t)
                                            (("1"
                                              (use "nth_append[nat]")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (use "length_append[nat]")
                                    (("2" (assert) nil nil))
                                    nil)
                                   ("3"
                                    (use "length_append[nat]")
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep 1)
                            (("2" (inst -5 "n")
                              (("2"
                                (expand "member" -1)
                                (("2"
                                  (split -1)
                                  (("1"
                                    (replace -1 :hide? t)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "no_repetitions?" -4)
                                        (("1"
                                          (use "member_nth[nat]")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skeep -1)
                                              (("1"
                                                (inst
                                                 -5
                                                 "0"
                                                 "i+length(cons(v,vs)) ")
                                                (("1"
                                                  (split -5)
                                                  (("1"
                                                    (expand "nth" -1 1)
                                                    (("1"
                                                      (expand
                                                       "append"
                                                       1
                                                       1)
                                                      (("1"
                                                        (use
                                                         "nth_append[nat]")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "length" 1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (use
                                                   "length_append[nat]")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (use
                                                   "length_append[nat]")
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (expand "no_repetitions?")
                        (("2" (skeep)
                          (("2" (inst -2 "i+1" "j+1")
                            (("1" (assert) (("1" (grind) nil nil)) nil)
                             ("2" (grind) nil nil)
                             ("3" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((j!1 skolem-const-decl "below(length(vs))" cdigraph_all_cycles nil)
    (i!1 skolem-const-decl "below(length(vs))" cdigraph_all_cycles nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nth_member formula-decl nil more_list_props "structures/")
    (v skolem-const-decl "nat" cdigraph_all_cycles nil)
    (vs skolem-const-decl "list[nat]" cdigraph_all_cycles nil)
    (l2 skolem-const-decl "list[nat]" cdigraph_all_cycles nil)
    (j skolem-const-decl "below(length(cons(v, append(vs, l2))))"
     cdigraph_all_cycles nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_append formula-decl nil list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nth_append formula-decl nil more_list_props "structures/")
    (i skolem-const-decl "below(length(cons(v, append(vs, l2))))"
     cdigraph_all_cycles nil)
    (j skolem-const-decl "below(length(append(vs, l2)))"
     cdigraph_all_cycles nil)
    (i skolem-const-decl "below(length(append(vs, l2)))"
     cdigraph_all_cycles nil)
    (i skolem-const-decl "below(length(cons(v, vs)))"
     cdigraph_all_cycles nil)
    (j skolem-const-decl "below(length(cons(v, vs)))"
     cdigraph_all_cycles nil)
    (member_nth formula-decl nil more_list_props "structures/")
    (i skolem-const-decl "below(length(l2))" cdigraph_all_cycles nil)
    (/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (l2!1 skolem-const-decl "list[nat]" cdigraph_all_cycles nil)
    (below type-eq-decl nil naturalnumbers nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (append def-decl "list[T]" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (no_repetitions_prefix 0
  (no_repetitions_prefix-1 nil 3656073052
   ("" (skeep)
    (("" (use "prefix_supl[nat]")
      (("" (assert)
        (("" (skeep)
          (("" (replace -1 :hide? t :dir rl)
            (("" (hide -2)
              (("" (expand "no_repetitions?")
                (("" (skeep 1 :preds? t)
                  (("" (inst -3 "i" "j")
                    (("1" (assert)
                      (("1" (use "nth_append[nat]")
                        (("1" (assert)
                          (("1" (assert)
                            (("1" (replace -1 :hide? t)
                              (("1"
                                (use "nth_append[nat]")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (use "length_append[nat]")
                      (("2" (assert) nil nil)) nil)
                     ("3" (use "length_append[nat]")
                      (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prefix_supl formula-decl nil more_list_props "structures/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (length_append formula-decl nil list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nth_append formula-decl nil more_list_props "structures/")
    (j skolem-const-decl "below(length(l1))" cdigraph_all_cycles nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (l1 skolem-const-decl "list[nat]" cdigraph_all_cycles nil)
    (below type-eq-decl nil naturalnumbers nil)
    (i skolem-const-decl "below(length(l1))" cdigraph_all_cycles nil)
    (append def-decl "list[T]" list_props nil)
    (L skolem-const-decl "list[nat]" cdigraph_all_cycles nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/"))
   shostak))
 (norep_loi_length 0
  (norep_loi_length-1 nil 3656074107
   ("" (skeep :preds? t)
    (("" (hide -2)
      (("" (lemma "list_pigeonhole[nat]")
        (("" (inst -1 "fullset[naturalnumbers.below(size(C))]" "l")
          (("1" (split -1)
            (("1" (skeep)
              (("1" (expand "no_repetitions?")
                (("1" (inst -4 "n" "m") (("1" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (use "every_nth[nat]")
              (("2" (replace -1 :hide? t)
                (("2" (skeep)
                  (("2" (expand "extend")
                    (("2" (expand "list_of_idxs")
                      (("2" (inst -2 "i")
                        (("2" (assert)
                          (("2" (expand "fullset")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3"
              (case "card(fullset[naturalnumbers.below(size(C))]) =size(C)")
              (("1" (assert) nil nil)
               ("2" (use "below_prelude_card") nil nil))
              nil))
            nil)
           ("2" (use "finite_extension[nat,below(size(C))]")
            (("2" (replace -1 :hide? t)
              (("2" (use "finite_full[below(size(C))]")
                (("2" (replace -1 :hide? t :dir rl)
                  (("2" (expand "is_finite_type")
                    (("2"
                      (inst 1 "size(C)" "LAMBDA(i:below(size(C))):i")
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fullset const-decl "set" sets nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (C skolem-const-decl "(cdigraph)" cdigraph_all_cycles nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (size const-decl "nat" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Card const-decl "nat" finite_sets nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below_prelude_card formula-decl nil ordered_nat "orders/")
    (every_nth formula-decl nil list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (injective? const-decl "bool" functions nil)
    (is_finite_type const-decl "bool" finite_sets nil)
    (finite_full formula-decl nil finite_sets nil)
    (finite_extension formula-decl nil extend_set_props nil)
    (list_pigeonhole formula-decl nil more_list_props "structures/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (cycle?_TCC1 0
  (cycle?_TCC1-1 nil 3655551876 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (circuit? const-decl "bool" cdigraph_all_cycles nil)
    (last const-decl "T" more_list_props "structures/")
    (nth def-decl "T" list_props nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil)
    (size const-decl "nat" c_digraphs_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (cycle_prefix 0
  (cycle_prefix-1 nil 3656082121
   ("" (skeep)
    (("" (use "prefix_supl[nat]")
      (("" (replace -1 :hide? t)
        (("" (skeep)
          (("" (case "L=null")
            (("1" (replace -1 :hide? t)
              (("1" (use "append_null[nat]") (("1" (assert) nil nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (case "car(c2)=last(c2)")
                (("1" (case "car(c1) = last(c1)")
                  (("1" (case "car(c1) = car(c2)")
                    (("1" (replace -1 :hide? t)
                      (("1" (replace -1 :hide? t)
                        (("1" (expand "last")
                          (("1" (expand "cycle?" -3)
                            (("1" (expand "no_repetitions?")
                              (("1"
                                (case "length(c1)>=2")
                                (("1"
                                  (case "length(c2)>=2")
                                  (("1"
                                    (expand "nth" -3)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst
                                         -5
                                         "length(c1)-2"
                                         "length(c2)-2")
                                        (("1"
                                          (split -5)
                                          (("1"
                                            (expand "/=")
                                            (("1"
                                              (replace
                                               -3
                                               :hide?
                                               t
                                               :dir
                                               rl)
                                              (("1"
                                                (replace
                                                 -4
                                                 :hide?
                                                 t
                                                 :dir
                                                 rl)
                                                (("1"
                                                  (expand "append" 1)
                                                  (("1"
                                                    (lift-if 1)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (typepred
                                                           "c1")
                                                          (("1"
                                                            (expand
                                                             "walk?")
                                                            (("1"
                                                              (flatten)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (use
                                                             "nth_append[nat]")
                                                            (("2"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 :hide?
                                                                 t)
                                                                (("1"
                                                                  (lift-if
                                                                   2)
                                                                  (("1"
                                                                    (split
                                                                     2)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "/=")
                                            (("2"
                                              (hide-all-but (-1 -6 1))
                                              (("2"
                                                (replace
                                                 -2
                                                 :hide?
                                                 t
                                                 :dir
                                                 rl)
                                                (("2"
                                                  (use
                                                   "length_append[nat]")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -5 :hide? t :dir rl)
                                          (("2"
                                            (expand "append" 1)
                                            (("2"
                                              (lift-if 1)
                                              (("2"
                                                (split 1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (typepred "c1")
                                                    (("1"
                                                      (expand "walk?")
                                                      (("1"
                                                        (flatten)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (use
                                                       "length_append[nat]")
                                                      (("2"
                                                        (replace
                                                         -1
                                                         :hide?
                                                         t)
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           2
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "c2")
                                    (("2"
                                      (expand "circuit?" -4)
                                      (("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "c1")
                                  (("2"
                                    (expand "circuit?" -4)
                                    (("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "append" -5)
                      (("2" (lift-if -5)
                        (("2" (split -5)
                          (("1" (flatten)
                            (("1" (typepred "c1")
                              (("1"
                                (expand "walk?")
                                (("1" (flatten) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (decompose-equality -1) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "c1")
                    (("2" (expand "circuit?") (("2" (flatten) nil nil))
                      nil))
                    nil)
                   ("3" (typepred "c1")
                    (("3" (expand "walk?") (("3" (flatten) nil nil))
                      nil))
                    nil)
                   ("4" (typepred "c1")
                    (("4" (expand "walk?")
                      (("4" (flatten) (("4" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "c2")
                  (("2" (expand "circuit?" -4)
                    (("2" (flatten) nil nil)) nil))
                  nil)
                 ("3" (typepred "c2")
                  (("3" (expand "walk?") (("3" (flatten) nil nil))
                    nil))
                  nil)
                 ("4" (typepred "c2")
                  (("4" (expand "walk?")
                    (("4" (flatten) (("4" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prefix_supl formula-decl nil more_list_props "structures/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (circuit? const-decl "bool" cdigraph_all_cycles nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (append def-decl "list[T]" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nth_append formula-decl nil more_list_props "structures/")
    (/= const-decl "boolean" notequal nil)
    (length_append formula-decl nil list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (c2 skolem-const-decl "(circuit?(C))" cdigraph_all_cycles nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (c1 skolem-const-decl "(circuit?(C))" cdigraph_all_cycles nil)
    (C skolem-const-decl "(cdigraph)" cdigraph_all_cycles nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (cycle? const-decl "bool" cdigraph_all_cycles nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (last const-decl "T" more_list_props "structures/")
    (append_null formula-decl nil list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (cycle_construction_TCC1 0
  (cycle_construction_TCC1-2 nil 3655803332
   ("" (skeep)
    (("" (expand "list_of_idxs")
      (("" (skeep)
        (("" (typepred "walked")
          (("" (hide -1)
            (("" (expand "list_of_idxs")
              (("" (use "reverse_def[nat]")
                (("" (assert)
                  (("" (split -1)
                    (("1" (replaces -1)
                      (("1" (inst?)
                        (("1" (hide 2)
                          (("1" (typepred "i")
                            (("1" (use "length_reverse[nat]")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (use "length_reverse[nat]")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_of_idxs const-decl "bool" c_digraphs_def nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_reverse formula-decl nil list_props nil) nil nil nil
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (reverse_def formula-decl nil more_list_props "structures/"))
   nil)
  (cycle_construction_TCC1-1 nil 3655641985 ("" (subtype-tcc) nil nil)
   nil nil))
 (cycle_construction_TCC2 0
  (cycle_construction_TCC2-1 nil 3655641985 ("" (grind) nil nil)
   ((length def-decl "nat" list_props nil)
    (last const-decl "T" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (nth def-decl "T" list_props nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil))
   nil))
 (cycle_construction_TCC3 0
  (cycle_construction_TCC3-1 nil 3655641985
   ("" (skeep*)
    (("" (typepred "walked")
      (("" (hide-all-but (-2 2))
        (("" (expand "list_of_idxs")
          (("" (expand "size")
            (("" (typepred "C")
              (("" (expand "cdigraph")
                (("" (inst -2 "0")
                  (("1" (expand "nth" -2) (("1" (assert) nil nil)) nil)
                   ("2" (typepred "walked")
                    (("2" (hide-all-but (1 2))
                      (("2" (expand "length") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil nil (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size const-decl "nat" c_digraphs_def nil))
   nil))
 (cycle_construction_TCC4 0
  (cycle_construction_TCC4-2 nil 3655803535
   ("" (skeep*)
    (("" (typepred "walked")
      (("" (hide -1)
        (("" (split 2)
          (("1" (lemma "loi_permutation")
            (("1"
              (inst -1 "C" "cons[nat](v, walked)"
               "reverse(cons[nat](v, walked))")
              (("1" (assert)
                (("1" (hide 2)
                  (("1" (expand "list_of_idxs")
                    (("1" (skeep)
                      (("1" (case "i=0")
                        (("1" (replaces -1)
                          (("1" (expand "nth" 1)
                            (("1" (typepred "v")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (inst -1 "i-1")
                          (("1" (expand "nth" 2)
                            (("1" (assert) nil nil)) nil)
                           ("2" (assert)
                            (("2" (typepred "i")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "length" -1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (use "permutation_reverse[nat]")
                (("2" (assert)
                  (("2" (hide 2)
                    (("2" (use "permutation_reflexive[nat]") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "reverse" 1)
            (("2" (use "walk_append")
              (("1" (assert)
                (("1" (hide 2)
                  (("1" (split 1)
                    (("1" (grind) nil nil)
                     ("2" (flatten)
                      (("2" (use "last_reverse[nat]")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "list_of_idxs")
                (("2" (skeep)
                  (("2" (case "i=0")
                    (("1" (replace -1 :hide? t)
                      (("1" (expand "nth")
                        (("1" (typepred "v") (("1" (propax) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "i")
                      (("2" (hide-all-but (-1 1))
                        (("2" (expand "length")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand "circuit?")
            (("3" (split 1)
              (("1" (lemma "last_reverse[nat]")
                (("1" (inst -1 "cons[nat](v, walked)")
                  (("1" (replace -1 :hide? t)
                    (("1" (assert)
                      (("1" (lemma "car_reverse[nat]")
                        (("1" (inst -1 "cons[nat](v, walked)")
                          (("1" (replace -1 :hide? t)
                            (("1" (use "last_cons[nat]")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (use "length_reverse[nat]")
                (("2" (replace -1 :hide? t)
                  (("2" (expand "length")
                    (("2" (expand "walk?")
                      (("2" (flatten)
                        (("2" (assert)
                          (("2" (expand "length")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (reverse def-decl "list[T]" list_props nil) nil nil
    (below type-eq-decl nil naturalnumbers nil) nil
    (size const-decl "nat" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (permutation_list const-decl "bool" permutations_list
     "structures/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (permutation_reflexive formula-decl nil permutations_list
     "structures/")
    (permutation_reverse formula-decl nil permutations_list
     "structures/")
    (loi_permutation formula-decl nil c_digraphs_def nil)
    (walk_append formula-decl nil cdigraph_all_cycles nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (last_reverse formula-decl nil more_list_props "structures/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (last const-decl "T" more_list_props "structures/")
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (length_null formula-decl nil more_list_props "structures/")
    (last_cons formula-decl nil more_list_props "structures/")
    (car_reverse formula-decl nil more_list_props "structures/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_reverse formula-decl nil list_props nil)
    (circuit? const-decl "bool" cdigraph_all_cycles nil))
   nil)
  (cycle_construction_TCC4-1 nil 3655641985 ("" (subtype-tcc) nil nil)
   nil nil))
 (cycle_construction 0
  (cycle_construction-1 nil 3655642083
   ("" (skeep*)
    (("" (expand "cycle?")
      (("" (hide-all-but (-3 -2 1))
        (("" (expand "reverse" 1)
          (("" (use "cdr_append[nat]")
            (("1" (replace -1 :hide? t)
              (("1" (use "no_repetitions_append")
                (("1" (assert)
                  (("1" (hide 2)
                    (("1" (split 1)
                      (("1" (expand "no_repetitions?")
                        (("1" (skeep)
                          (("1" (inst -2 "i+1" "j+1")
                            (("1" (assert)
                              (("1"
                                (expand "nth" 2)
                                (("1" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (typepred "j")
                              (("2"
                                (reveal -5)
                                (("2"
                                  (expand "walk?")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand "length" 2)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (typepred "i")
                              (("3"
                                (reveal -5)
                                (("3"
                                  (expand "walk?")
                                  (("3"
                                    (flatten)
                                    (("3"
                                      (expand "length" 2)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil)
                       ("3" (skeep)
                        (("3" (expand "member" -2)
                          (("3" (expand "member" -2)
                            (("3" (replace -2 :hide? t)
                              (("3"
                                (replace -3 :hide? t :dir rl)
                                (("3"
                                  (expand "no_repetitions?")
                                  (("3"
                                    (use "member_nth[nat]")
                                    (("3"
                                      (assert)
                                      (("3"
                                        (skeep -1)
                                        (("3"
                                          (inst -3 "i+1" "0")
                                          (("1"
                                            (expand "/=")
                                            (("1"
                                              (expand "nth" 1)
                                              (("1"
                                                (use
                                                 "car_reverse[nat]")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (reveal -8)
                                            (("2"
                                              (expand "walk?")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (expand "length")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (typepred "i")
                                            (("3"
                                              (reveal -8)
                                              (("3"
                                                (expand "walk?")
                                                (("3"
                                                  (flatten)
                                                  (("3"
                                                    (expand "length" 2)
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (reveal -2)
              (("2" (expand "walk?") (("2" (flatten) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cycle? const-decl "bool" cdigraph_all_cycles nil)
    (reverse def-decl "list[T]" list_props nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (j skolem-const-decl "below(length(cdr(reverse(walked))))"
     cdigraph_all_cycles nil)
    (i skolem-const-decl "below(length(cdr(reverse(walked))))"
     cdigraph_all_cycles nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (below type-eq-decl nil nat_types nil)
    (append def-decl "list[T]" list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (v skolem-const-decl "below(size(C))" cdigraph_all_cycles nil)
    (last const-decl "T" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (member def-decl "bool" list_props nil)
    (i skolem-const-decl "below(length(cdr(reverse(walked))))"
     cdigraph_all_cycles nil)
    (car_reverse formula-decl nil more_list_props "structures/")
    (member_nth formula-decl nil more_list_props "structures/")
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (no_repetitions_append formula-decl nil cdigraph_all_cycles nil)
    (walked skolem-const-decl
     "{walked: (list_of_idxs(C)) | NOT null?(walked)}"
     cdigraph_all_cycles nil)
    (C skolem-const-decl "(cdigraph)" cdigraph_all_cycles nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cdr_append formula-decl nil more_list_props "structures/"))
   shostak))
 (circuit_walk_eq 0
  (circuit_walk_eq-1 nil 3661530350
   ("" (skeep)
    (("" (typepred "ci")
      (("" (hide -1)
        (("" (expand "circuit?")
          (("" (flatten)
            (("" (expand "walk_eq")
              (("" (flatten)
                (("" (assert)
                  (("" (expand "finseq_appl")
                    (("" (expand "pre_circuit?")
                      (("" (expand "finseq_appl")
                        (("" (inst-cp -6 "0")
                          (("" (inst -6 "length(ci)-1")
                            (("" (replace -5 :dir rl)
                              ((""
                                (replace -6 :hide? t)
                                ((""
                                  (replace -6 :hide? t)
                                  ((""
                                    (expand "last")
                                    ((""
                                      (assert)
                                      (("" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((circuit? const-decl "bool" cdigraph_all_cycles nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (circuit? const-decl "bool" circuits_ nil)
    (walk_eq const-decl "bool" cdigraph_all_cycles nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pre_circuit? const-decl "bool" circuits_ nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (size const-decl "nat" c_digraphs_def nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (last const-decl "T" more_list_props "structures/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil))
   nil))
 (cycle_walk_eq 0
  (cycle_walk_eq-1 nil 3661530046
   ("" (skeep)
    (("" (typepred "ci")
      (("" (hide -1)
        (("" (expand "cycle?")
          (("" (split 1)
            (("1" (use "circuit_walk_eq") (("1" (assert) nil nil)) nil)
             ("2" (expand "finseq_appl")
              (("2" (skeep)
                (("2" (case "i=0")
                  (("1" (expand "circuit?")
                    (("1" (flatten)
                      (("1" (expand "no_repetitions?")
                        (("1" (expand "last")
                          (("1" (expand "nth" -5)
                            (("1" (lift-if -5)
                              (("1"
                                (split -5)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "length" -1)
                                    (("2"
                                      (lift-if -1)
                                      (("2"
                                        (split -1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "length")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst
                                               -7
                                               "length(cdr(ci))-1"
                                               "j-1")
                                              (("1"
                                                (split -7)
                                                (("1"
                                                  (expand "/=")
                                                  (("1"
                                                    (replace
                                                     -1
                                                     :dir
                                                     rl
                                                     :hide?
                                                     t)
                                                    (("1"
                                                      (expand
                                                       "walk_eq")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (inst-cp
                                                           -7
                                                           "0")
                                                          (("1"
                                                            (inst
                                                             -7
                                                             "j")
                                                            (("1"
                                                              (expand
                                                               "finseq_appl")
                                                              (("1"
                                                                (expand
                                                                 "nth"
                                                                 -8
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   -7
                                                                   2)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     -2)
                                                                    (("1"
                                                                      (replace
                                                                       -7
                                                                       :hide?
                                                                       t)
                                                                      (("1"
                                                                        (replace
                                                                         -7
                                                                         :hide?
                                                                         t)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           :hide?
                                                                           t)
                                                                          (("1"
                                                                            (hide-all-but
                                                                             (-1
                                                                              1
                                                                              4))
                                                                            (("1"
                                                                              (typepred
                                                                               "C")
                                                                              (("1"
                                                                                (expand
                                                                                 "cdigraph")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (hide-all-but
                                                                                     (-3
                                                                                      -5
                                                                                      1
                                                                                      2))
                                                                                    (("1"
                                                                                      (expand
                                                                                       "no_repetitions?")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "car(ci)"
                                                                                         "nth(cdr(ci),j-1)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "/=")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil)
                                               ("3"
                                                (expand "length" -6)
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "j=0")
                    (("1" (expand "circuit?")
                      (("1" (flatten)
                        (("1" (expand "no_repetitions?")
                          (("1" (expand "last")
                            (("1" (expand "nth" -5)
                              (("1"
                                (lift-if -5)
                                (("1"
                                  (split -5)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "length" -1)
                                      (("2"
                                        (lift-if -1)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "length")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst
                                                 -7
                                                 "i-1"
                                                 "length(cdr(ci))-1")
                                                (("1"
                                                  (split -7)
                                                  (("1"
                                                    (expand "/=")
                                                    (("1"
                                                      (replace
                                                       -1
                                                       :dir
                                                       rl
                                                       :hide?
                                                       t)
                                                      (("1"
                                                        (expand
                                                         "walk_eq")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (inst-cp
                                                             -7
                                                             "0")
                                                            (("1"
                                                              (inst
                                                               -7
                                                               "i")
                                                              (("1"
                                                                (expand
                                                                 "finseq_appl")
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   -8
                                                                   2)
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     -7
                                                                     2)
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (replace
                                                                         -7
                                                                         :hide?
                                                                         t)
                                                                        (("1"
                                                                          (replace
                                                                           -7
                                                                           :hide?
                                                                           t)
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             :hide?
                                                                             t)
                                                                            (("1"
                                                                              (hide-all-but
                                                                               (-1
                                                                                1
                                                                                4))
                                                                              (("1"
                                                                                (typepred
                                                                                 "C")
                                                                                (("1"
                                                                                  (expand
                                                                                   "cdigraph")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (hide-all-but
                                                                                       (-3
                                                                                        -5
                                                                                        1
                                                                                        2))
                                                                                      (("1"
                                                                                        (expand
                                                                                         "no_repetitions?")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "car(ci)"
                                                                                           "nth(cdr(ci),i-1)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "/=")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "length" -6)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "no_repetitions?")
                      (("2" (expand "walk_eq")
                        (("2" (flatten)
                          (("2" (inst-cp -7 "i")
                            (("2" (expand "finseq_appl")
                              (("2"
                                (expand "nth" -8 2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst -7 "j")
                                    (("2"
                                      (expand "nth" -7 2)
                                      (("2"
                                        (replace -7 :hide? t)
                                        (("2"
                                          (replace -7 :hide? t)
                                          (("2"
                                            (inst -5 "i-1" "j-1")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide-all-but (-1 -5))
                                                (("2"
                                                  (typepred "C")
                                                  (("2"
                                                    (expand "cdigraph")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (hide-all-but
                                                         (-3 -5 1))
                                                        (("2"
                                                          (expand
                                                           "no_repetitions?")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "nth(cdr(ci), i - 1)"
                                                             "nth(cdr(ci), j - 1)")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cycle? const-decl "bool" cdigraph_all_cycles nil)
    (circuit? const-decl "bool" cdigraph_all_cycles nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cycle? const-decl "bool" cycles_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (last const-decl "T" more_list_props "structures/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (C skolem-const-decl "(cdigraph)" cdigraph_all_cycles nil)
    (ci skolem-const-decl "(cycle?(C))" cdigraph_all_cycles nil)
    (w skolem-const-decl "Walk
    [T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](C)" cdigraph_all_cycles nil)
    (j skolem-const-decl "below(length(w) - 1)" cdigraph_all_cycles
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (/= const-decl "boolean" notequal nil)
    (walk_eq const-decl "bool" cdigraph_all_cycles nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (size const-decl "nat" c_digraphs_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (i skolem-const-decl "below(length(w) - 1)" cdigraph_all_cycles
     nil)
    (circuit_walk_eq formula-decl nil cdigraph_all_cycles nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil))
   nil))
 (cycles_from_measure_TCC1 0
  (cycles_from_measure_TCC1-2 nil 3655801965
   ("" (skeep)
    (("" (expand "list_of_idxs")
      (("" (skeep)
        (("" (typepred "walked")
          (("" (hide -1)
            (("" (expand "list_of_idxs")
              (("" (use "reverse_def[nat]")
                (("" (assert)
                  (("" (split -1)
                    (("1" (replaces -1)
                      (("1" (inst?)
                        (("1" (hide 2)
                          (("1" (typepred "i")
                            (("1" (use "length_reverse[nat]")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (use "length_reverse[nat]")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list_of_idxs const-decl "bool" c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_reverse formula-decl nil list_props nil) nil nil nil
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (reverse_def formula-decl nil more_list_props "structures/"))
   nil)
  (cycles_from_measure_TCC1-1 nil 3655748237 ("" (subtype-tcc) nil nil)
   nil nil))
 (cycles_from_measure_TCC2 0
  (cycles_from_measure_TCC2-1 nil 3655748237 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (size const-decl "nat" c_digraphs_def nil)
    (reverse def-decl "list[T]" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil) nil
    (below type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (nth def-decl "T" list_props nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil))
   nil))
 (cycles_from_measure_TCC3 0
  (cycles_from_measure_TCC3-1 nil 3655748237 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (reverse def-decl "list[T]" list_props nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (last const-decl "T" more_list_props "structures/") nil
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (cycles_from_measure_TCC4 0
  (cycles_from_measure_TCC4-2 nil 3655802029
   ("" (skeep*)
    (("" (typepred "walked")
      (("" (hide-all-but (-2 1))
        (("" (expand "list_of_idxs")
          (("" (expand "size")
            (("" (typepred "C")
              (("" (expand "cdigraph")
                (("" (inst -2 "0")
                  (("1" (expand "nth" -2) (("1" (assert) nil nil)) nil)
                   ("2" (typepred "walked")
                    (("2" (hide-all-but (-3 1))
                      (("2" (expand "walk?")
                        (("2" (flatten)
                          (("2" (hide -1)
                            (("2" (use "length_reverse[nat]")
                              (("2"
                                (replaces -1 :dir rl)
                                (("2"
                                  (expand "length")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (size const-decl "nat" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (last const-decl "T" more_list_props "structures/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil nil nil (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (length_reverse formula-decl nil list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil)
  (cycles_from_measure_TCC4-1 nil 3655748237 ("" (subtype-tcc) nil nil)
   nil nil))
 (cycles_from_measure_TCC5 0
  (cycles_from_measure_TCC5-1 nil 3655748237
   ("" (skeep*)
    (("" (use "norep_loi_length")
      (("1" (assert) nil nil)
       ("2" (typepred "walked")
        (("2" (hide-all-but (-4 1))
          (("2" (expand "no_repetitions?")
            (("2" (skeep)
              (("2" (inst -1 "length(walked)-1-i" "length(walked)-1-j")
                (("1" (assert)
                  (("1" (lemma "reverse_def[nat]")
                    (("1" (inst -1 "walked" "length(walked) - 1 - j")
                      (("1" (assert)
                        (("1" (replace -1 :hide? t)
                          (("1" (lemma "reverse_def[nat]")
                            (("1"
                              (inst -1 "walked"
                               "length(walked) - 1 - i")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (use "length_reverse[nat]")
                  (("2" (assert) nil nil)) nil)
                 ("3" (use "length_reverse[nat]")
                  (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((norep_loi_length formula-decl nil cdigraph_all_cycles nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (list_of_idxs const-decl "bool" c_digraphs_def nil) nil
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (reverse def-decl "list[T]" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (last const-decl "T" more_list_props "structures/")
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil) nil nil
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_reverse formula-decl nil list_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (reverse_def formula-decl nil more_list_props "structures/") nil
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil) nil
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (cycles_from_TCC1 0
  (cycles_from_TCC1-1 nil 3655548129 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (last const-decl "T" more_list_props "structures/")
    (suffix? def-decl "bool" more_list_props "structures/")
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (/= const-decl "boolean" notequal nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (circuit? const-decl "bool" cdigraph_all_cycles nil)
    (cycle? const-decl "bool" cdigraph_all_cycles nil)
    (member def-decl "bool" list_props nil)
    (reverse def-decl "list[T]" list_props nil))
   nil))
 (cycles_from_TCC2 0
  (cycles_from_TCC2-1 nil 3655549886
   ("" (skeep*)
    (("" (typepred "walked")
      (("" (hide -1)
        (("" (replace -5 :hide? t)
          (("" (split 1)
            (("1" (lemma "loi_permutation")
              (("1"
                (inst -1 "C" "cons[nat](v, walked)"
                 "reverse(cons[nat](v, walked))")
                (("1" (assert)
                  (("1" (hide 2)
                    (("1" (expand "list_of_idxs")
                      (("1" (skeep)
                        (("1" (case "i=0")
                          (("1" (replaces -1)
                            (("1" (expand "nth" 1)
                              (("1"
                                (hide-all-but (1 -5))
                                (("1"
                                  (typepred "walking")
                                  (("1"
                                    (replace -4 :hide? t)
                                    (("1"
                                      (hide-all-but (-2 1))
                                      (("1"
                                        (expand "list_of_idxs")
                                        (("1"
                                          (inst -1 "0")
                                          (("1"
                                            (expand "nth")
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (expand "length")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst -1 "i-1")
                            (("1" (expand "nth" 2)
                              (("1" (assert) nil nil)) nil)
                             ("2" (assert)
                              (("2"
                                (typepred "i")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "length" -1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (use "permutation_reverse[nat]")
                  (("2" (assert)
                    (("2" (hide 2)
                      (("2" (use "permutation_reflexive[nat]") nil
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "reverse" 1)
              (("2" (use "walk_append")
                (("1" (assert)
                  (("1" (hide 2)
                    (("1" (split 1)
                      (("1" (grind) nil nil)
                       ("2" (flatten)
                        (("2" (typepred "walking")
                          (("2" (hide-all-but (-3 2 1 -8))
                            (("2" (replace -2 :hide? t)
                              (("2"
                                (use "suffix_member[nat]")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst -1 "v")
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (lemma "last_reverse[nat]")
                                        (("1"
                                          (inst -1 "walked")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (use "null_reverse[nat]")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "member" 1)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "walking")
                  (("2" (replace -8 :hide? t)
                    (("2" (hide-all-but (-2 1))
                      (("2" (expand "list_of_idxs")
                        (("2" (skeep :preds? t)
                          (("2" (case "i=0")
                            (("1" (replaces -1)
                              (("1"
                                (inst -2 "0")
                                (("1"
                                  (expand "nth")
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (expand "length")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "length")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "circuit?")
              (("3" (split 1)
                (("1" (lemma "last_reverse[nat]")
                  (("1" (inst -1 "cons[nat](v, walked)")
                    (("1" (replace -1 :hide? t)
                      (("1" (assert)
                        (("1" (lemma "car_reverse[nat]")
                          (("1" (inst -1 "cons[nat](v, walked)")
                            (("1" (replace -1 :hide? t)
                              (("1"
                                (use "last_cons[nat]")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (use "length_reverse[nat]")
                  (("2" (replace -1 :hide? t)
                    (("2" (expand "length")
                      (("2" (expand "walk?")
                        (("2" (flatten)
                          (("2" (use "null_reverse[nat]")
                            (("2" (assert)
                              (("2"
                                (expand "length")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (use "cycle_construction")
              (("4" (assert)
                (("4" (typepred "walking")
                  (("4" (replace -8 :hide? t)
                    (("4" (hide-all-but (-3 1))
                      (("4" (use "suffix_member[nat]")
                        (("4" (assert)
                          (("4" (inst -1 "v") (("4" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (size const-decl "nat" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (last const-decl "T" more_list_props "structures/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cycle_construction formula-decl nil cdigraph_all_cycles nil)
    (circuit? const-decl "bool" cdigraph_all_cycles nil)
    (length_reverse formula-decl nil list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (car_reverse formula-decl nil more_list_props "structures/")
    (last_cons formula-decl nil more_list_props "structures/")
    (length_null formula-decl nil more_list_props "structures/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (/= const-decl "boolean" notequal nil)
    (null_reverse formula-decl nil more_list_props "structures/")
    (last_reverse formula-decl nil more_list_props "structures/")
    (member def-decl "bool" list_props nil)
    (suffix_member formula-decl nil more_list_props "structures/")
    (null adt-constructor-decl "(null?)" list_adt nil)
    (walk_append formula-decl nil cdigraph_all_cycles nil)
    (loi_permutation formula-decl nil c_digraphs_def nil)
    (permutation_reverse formula-decl nil permutations_list
     "structures/")
    (permutation_reflexive formula-decl nil permutations_list
     "structures/")
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (suffix? def-decl "bool" more_list_props "structures/")
    (below type-eq-decl nil nat_types nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (permutation_list const-decl "bool" permutations_list
     "structures/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    nil nil nil)
   nil))
 (cycles_from_TCC3 0
  (cycles_from_TCC3-1 nil 3655550370
   (""
    (then (skeep) (typepred "walking") (hide -1) (replace -4 :hide? t)
     (use "loi_cons") (assert) (use "suffix_end[nat]") (assert))
    nil nil)
   ((loi_cons formula-decl nil cdigraph_all_cycles nil)
    (suffix_end formula-decl nil more_list_props "structures/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (suffix? def-decl "bool" more_list_props "structures/")
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (reverse def-decl "list[T]" list_props nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (last const-decl "T" more_list_props "structures/")
    (size const-decl "nat" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil))
   nil))
 (cycles_from_TCC4 0
  (cycles_from_TCC4-1 nil 3655550370 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (reverse def-decl "list[T]" list_props nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (last const-decl "T" more_list_props "structures/")
    (suffix? def-decl "bool" more_list_props "structures/")
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (/= const-decl "boolean" notequal nil)
    (< def-decl "bool" ordinals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (size const-decl "nat" c_digraphs_def nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (cycles_from_measure const-decl "ordinal" cdigraph_all_cycles nil))
   nil))
 (cycles_from_TCC5 0
  (cycles_from_TCC5-1 nil 3655550370
   ("" (skeep*)
    (("" (split 1)
      (("1" (flatten)
        (("1" (expand "member" -1)
          (("1" (split -1)
            (("1" (inst 1 "w")
              (("1" (replace -1 :hide? t)
                (("1" (replace -2 :hide? t)
                  (("1" (expand "member")
                    (("1" (hide -1)
                      (("1" (use "prefix_reflexive[nat]") nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "walking")
                (("2" (expand "list_of_idxs")
                  (("2" (inst -2 "0")
                    (("1" (assert) nil nil)
                     ("2" (replace -5 :hide? t)
                      (("2" (expand "length") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "v1(C)(v)(walked, ws)")
              (("1" (hide -1)
                (("1" (inst -1 "cycle")
                  (("1" (assert)
                    (("1" (skeep -1)
                      (("1" (inst 1 "w_1")
                        (("1" (assert)
                          (("1" (replace -5 :hide? t)
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (typepred "ws")
                  (("2" (hide -1)
                    (("2" (typepred "walking")
                      (("2" (hide -1)
                        (("2" (replace -5 :hide? t)
                          (("2" (use "loi_cons")
                            (("2" (assert)
                              (("2"
                                (use "suffix_end[nat]")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (skeep -1)
          (("2" (case "w_1 =v")
            (("1" (replace -1 :hide? t)
              (("1" (replace -3 :hide? t)
                (("1" (expand "member" 1)
                  (("1" (flatten)
                    (("1"
                      (case "cycle?(C)(reverse[nat](cons[nat](v, walked)))")
                      (("1" (hide-all-but (-1 -3 1))
                        (("1" (typepred "cycle")
                          (("1" (hide-all-but (-5 -6 -7 1))
                            (("1" (lemma "cycle_prefix")
                              (("1"
                                (inst? -1 :where -4)
                                (("1"
                                  (inst? -1 :where -4)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2 3)
                        (("2" (use "cycle_construction")
                          (("1" (assert)
                            (("1" (typepred "walking")
                              (("1"
                                (replace -6 :hide? t)
                                (("1"
                                  (hide-all-but (1 -3))
                                  (("1"
                                    (use "suffix_member[nat]")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst -1 "v")
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (typepred "walking")
                              (("2"
                                (hide-all-but (1 -3))
                                (("2"
                                  (assert)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (replace -3 :hide? t)
              (("2" (replace -3 :hide? t)
                (("2" (expand "member" -1)
                  (("2" (assert)
                    (("2" (expand "member" 2)
                      (("2" (flatten)
                        (("2" (typepred "v1(C)(v)(walked, ws)")
                          (("1" (hide -1)
                            (("1" (inst -1 "cycle")
                              (("1"
                                (assert)
                                (("1"
                                  (inst 1 "w_1")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "walking")
                            (("2" (reveal -1)
                              (("2"
                                (hide -2)
                                (("2"
                                  (replace -1 :hide? t)
                                  (("2"
                                    (use "loi_cons")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (use "suffix_end[nat]")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member def-decl "bool" list_props nil)
    (prefix? def-decl "bool" more_list_props "structures/")
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cycles_from_measure const-decl "ordinal" cdigraph_all_cycles nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (< def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (cycle? const-decl "bool" cdigraph_all_cycles nil)
    (circuit? const-decl "bool" cdigraph_all_cycles nil)
    (suffix_end formula-decl nil more_list_props "structures/")
    (loi_cons formula-decl nil cdigraph_all_cycles nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil (cdigraph const-decl "bool" c_digraphs_def nil)
    (size const-decl "nat" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) nil
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (prefix_reflexive formula-decl nil more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (last const-decl "T" more_list_props "structures/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil nil nil (suffix? def-decl "bool" more_list_props "structures/")
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cycle_prefix formula-decl nil cdigraph_all_cycles nil)
    (cycle_construction formula-decl nil cdigraph_all_cycles nil)
    (suffix_member formula-decl nil more_list_props "structures/")
    (null adt-constructor-decl "(null?)" list_adt nil)
    (/= const-decl "boolean" notequal nil)
    (append def-decl "list[T]" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (cycles_from_TCC6 0
  (cycles_from_TCC6-1 nil 3655550370
   (""
    (then (skeep) (typepred "walking") (hide -1) (replace -4 :hide? t)
     (use "loi_cons") (assert) (use "suffix_end[nat]") (assert))
    nil nil)
   ((loi_cons formula-decl nil cdigraph_all_cycles nil)
    (suffix_end formula-decl nil more_list_props "structures/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (suffix? def-decl "bool" more_list_props "structures/")
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (reverse def-decl "list[T]" list_props nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (last const-decl "T" more_list_props "structures/")
    (size const-decl "nat" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil))
   nil))
 (cycles_from_TCC7 0
  (cycles_from_TCC7-1 nil 3655550370 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (reverse def-decl "list[T]" list_props nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (last const-decl "T" more_list_props "structures/")
    (suffix? def-decl "bool" more_list_props "structures/")
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (/= const-decl "boolean" notequal nil)
    (< def-decl "bool" ordinals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (size const-decl "nat" c_digraphs_def nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (cycles_from_measure const-decl "ordinal" cdigraph_all_cycles nil))
   nil))
 (cycles_from_TCC8 0
  (cycles_from_TCC8-1 nil 3655550370
   ("" (skeep*)
    (("" (typepred "v1(C)(v)(walked, ws)")
      (("1" (hide -1)
        (("1" (inst -1 "cycle")
          (("1" (replace -1 :hide? t)
            (("1" (split 2)
              (("1" (flatten)
                (("1" (skeep)
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (replace -4 :hide? t)
                        (("1" (expand "member" 1)
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (skeep)
                  (("2" (inst?)
                    (("2" (assert)
                      (("2" (replace -4 :hide? t)
                        (("2" (expand "member" -1)
                          (("2" (replace -1 :hide? t)
                            (("2" (typepred "walked")
                              (("2"
                                (case
                                 "no_repetitions?(cdr(reverse[nat](cons[nat](w, walked))))")
                                (("1"
                                  (expand "reverse" -1)
                                  (("1"
                                    (case
                                     "no_repetitions?(cdr(reverse(walked))) AND no_repetitions?(cons(w, null)) AND NOT EXISTS(n:nat): member(n,cdr(reverse(walked))) AND member(n, cons(w,null))")
                                    (("1"
                                      (hide -2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (inst 1 "w")
                                          (("1"
                                            (expand "member" 1 2)
                                            (("1"
                                              (lemma "rdc_rac[nat]")
                                              (("1"
                                                (inst -1 "walked")
                                                (("1"
                                                  (replace
                                                   -1
                                                   -10
                                                   :dir
                                                   rl
                                                   :hide?
                                                   t)
                                                  (("1"
                                                    (expand "rac")
                                                    (("1"
                                                      (expand "last")
                                                      (("1"
                                                        (replace
                                                         -7
                                                         -9
                                                         :hide?
                                                         t)
                                                        (("1"
                                                          (use
                                                           "member_append_fi[nat]")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "member"
                                                               -1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "member"
                                                                 -1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "rdc")
                                                                  (("1"
                                                                    (hide-all-but
                                                                     (-1
                                                                      1))
                                                                    (("1"
                                                                      (lemma
                                                                       "member_reverse[nat]")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "w"
                                                                         "cdr(reverse(walked))")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "append" -1)
                                      (("2"
                                        (lift-if -1)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (use
                                                 "no_repetitions_append")
                                                (("2"
                                                  (replace -1 :dir rl)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (skeep -6)
                                                        (("2"
                                                          (inst -5 "n")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (grind) nil nil)
                                     ("4"
                                      (expand "walk?")
                                      (("4"
                                        (flatten)
                                        (("4" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "cycle")
                                  (("2"
                                    (hide-all-but (1 -11 -5))
                                    (("2"
                                      (expand "cycle?")
                                      (("2"
                                        (use "prefix_cdr[nat]")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -3)
                                            (("1"
                                              (use
                                               "no_repetitions_prefix")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "cycle")
                                          (("2"
                                            (expand "walk?" -3)
                                            (("2" (flatten) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (use "null_reverse[nat]")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide-all-but 1)
                                  (("3"
                                    (use "null_reverse[nat]")
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "walking")
        (("2" (hide-all-but (1 -2 -3 -5))
          (("2" (replace -3 :hide? t)
            (("2" (use "loi_cons")
              (("2" (assert)
                (("2" (use "suffix_end[nat]") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (prefix? def-decl "bool" more_list_props "structures/")
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cycles_from_measure const-decl "ordinal" cdigraph_all_cycles nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (< def-decl "bool" ordinals nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (suffix? def-decl "bool" more_list_props "structures/")
    (last const-decl "T" more_list_props "structures/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (size const-decl "nat" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (cycle? const-decl "bool" cdigraph_all_cycles nil)
    (circuit? const-decl "bool" cdigraph_all_cycles nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (null_reverse formula-decl nil more_list_props "structures/")
    (no_repetitions_prefix formula-decl nil cdigraph_all_cycles nil)
    nil nil nil nil nil
    (prefix_cdr formula-decl nil more_list_props "structures/")
    (append def-decl "list[T]" list_props nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions_append formula-decl nil cdigraph_all_cycles nil)
    (rdc_rac formula-decl nil more_list_props "structures/")
    (member_append_fi formula-decl nil more_list_props "structures/")
    (rdc const-decl "list[T]" more_list_props "structures/")
    (member_reverse formula-decl nil more_list_props "structures/")
    (rac const-decl "T" more_list_props "structures/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (loi_cons formula-decl nil cdigraph_all_cycles nil)
    (suffix_end formula-decl nil more_list_props "structures/"))
   nil))
 (cycles_from_TCC9 0
  (cycles_from_TCC9-1 nil 3655550370
   ("" (skeep)
    (("" (typepred "walked")
      (("" (hide -1)
        (("" (split 3)
          (("1" (expand "list_of_idxs")
            (("1" (skeep)
              (("1" (case "i=0")
                (("1" (replaces -1)
                  (("1" (expand "nth")
                    (("1" (typepred "walking")
                      (("1" (replace -8 :hide? t)
                        (("1" (hide-all-but (1 -2))
                          (("1" (expand "list_of_idxs")
                            (("1" (inst -1 "0")
                              (("1"
                                (expand "nth")
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (expand "length")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst -1 "i-1")
                  (("1" (expand "nth" 2) (("1" (assert) nil nil)) nil)
                   ("2" (assert)
                    (("2" (typepred "i")
                      (("2" (expand "length" -1)
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "reverse" 1)
            (("2" (typepred "walking")
              (("2" (hide -1)
                (("2" (hide-all-but (1 -4 -2 -7))
                  (("2" (use "walk_append")
                    (("1" (assert)
                      (("1" (split 1)
                        (("1" (grind) nil nil)
                         ("2" (flatten)
                          (("2" (replace -3 -1 :hide? t)
                            (("2" (use "suffix_member[nat]")
                              (("2"
                                (assert)
                                (("2"
                                  (inst -1 "w")
                                  (("2"
                                    (lemma "last_reverse[nat]")
                                    (("2"
                                      (inst -1 "walked")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "member" 1)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (use "null_reverse[nat]")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "walking")
                      (("2" (replace -6 -2 :hide? t)
                        (("2" (hide-all-but (-2 1))
                          (("2" (expand "list_of_idxs")
                            (("2" (skeep)
                              (("2"
                                (inst -1 "i")
                                (("1"
                                  (case "i=0")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (assert)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "i")
                                    (("2"
                                      (expand "length")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "length")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (typepred "i")
                                      (("2"
                                        (expand "length" -1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide-all-but (-3 1 2))
            (("3" (expand "reverse" 1)
              (("3" (use "no_repetitions_append")
                (("3" (replace -1 1 :dir rl :hide? t)
                  (("3" (assert)
                    (("3" (split 1)
                      (("1" (grind) nil nil)
                       ("2" (skeep)
                        (("2" (expand "member" -2)
                          (("2" (expand "member" -2)
                            (("2" (replace -2 :hide? t)
                              (("2"
                                (lemma "member_reverse[nat]")
                                (("2"
                                  (inst -1 "w" "walked")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (hide-all-but (-4 1))
            (("4" (use "last_cons[nat]") (("4" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (size const-decl "nat" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (last const-decl "T" more_list_props "structures/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil) nil
    nil nil nil
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (suffix? def-decl "bool" more_list_props "structures/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil nil
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (length_null formula-decl nil more_list_props "structures/") nil
    (suffix_member formula-decl nil more_list_props "structures/")
    (member def-decl "bool" list_props nil)
    (null_reverse formula-decl nil more_list_props "structures/")
    (last_reverse formula-decl nil more_list_props "structures/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (append def-decl "list[T]" list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (walk_append formula-decl nil cdigraph_all_cycles nil)
    (/= const-decl "boolean" notequal nil)
    (member_reverse formula-decl nil more_list_props "structures/")
    (no_repetitions_append formula-decl nil cdigraph_all_cycles nil)
    (last_cons formula-decl nil more_list_props "structures/"))
   nil))
 (cycles_from_TCC10 0
  (cycles_from_TCC10-1 nil 3655550370
   (""
    (then (skeep) (typepred "walking") (hide -1)
     (expand "list_of_idxs")
     (spread (inst -1 "0")
      ((then (replace -3 :hide? t) (expand "nth" -1) (expand "size")
        (typepred "C") (expand "cdigraph") (assert))
       (then (replace -2 :hide? t) (expand "length" 1) (assert)))))
    nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil nil nil nil
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (suffix? def-decl "bool" more_list_props "structures/")
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (reverse def-decl "list[T]" list_props nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (last const-decl "T" more_list_props "structures/")
    (size const-decl "nat" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil))
   nil))
 (cycles_from_TCC11 0
  (cycles_from_TCC11-1 nil 3655550370
   (""
    (then (skeep*)
     (spread (split 3)
      ((then (expand "list_of_idxs") (skeep) (typepred "C")
        (expand "cdigraph") (flatten) (inst -2 "w")
        (expand "list_of_idxs") (inst -2 "i"))
       (use "suffix_reflexive[nat]"))))
    nil nil)
   ((suffix_reflexive formula-decl nil more_list_props "structures/")
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil))
   nil))
 (cycles_from_TCC12 0
  (cycles_from_TCC12-1 nil 3655550370
   ("" (skeep*)
    (("" (lemma "lex2_lt")
      (("" (expand "cycles_from_measure")
        (("" (inst? -1 :where 3)
          (("1" (replace -1 :hide? t)
            (("1" (flatten)
              (("1" (hide 4) (("1" (grind) nil nil)) nil)) nil))
            nil)
           ("2" (use "cycles_from_measure_TCC5") nil nil)
           ("3" (lemma "cycles_from_measure_TCC5")
            (("3"
              (inst -1 "C" "v" "cons(w,walked)"
               "nth[list[nat]](adjs(C), w)")
              (("1" (use "cycles_from_TCC11") (("1" (assert) nil nil))
                nil)
               ("2" (use "cycles_from_TCC9") (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lex2_lt formula-decl nil lex2 nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil) nil
    nil (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (last const-decl "T" more_list_props "structures/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil) nil
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil) nil
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (size const-decl "nat" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (suffix? def-decl "bool" more_list_props "structures/")
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cycles_from_measure_TCC5 subtype-tcc nil cdigraph_all_cycles nil)
    (cycles_from_TCC11 subtype-tcc nil cdigraph_all_cycles nil)
    (cycles_from_TCC9 subtype-tcc nil cdigraph_all_cycles nil)
    (cycles_from_measure const-decl "ordinal" cdigraph_all_cycles nil))
   nil))
 (cycles_from_TCC13 0
  (cycles_from_TCC13-1 nil 3655550370
   ("" (skeep*)
    (("" (typepred "walking")
      (("" (replaces -4)
        (("" (split 3)
          (("1" (hide-all-but (-2 1))
            (("1" (expand "list_of_idxs")
              (("1" (skeep)
                (("1" (typepred "i")
                  (("1" (inst -2 "i+1")
                    (("1" (expand "nth" -2) (("1" (propax) nil nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but (-3 1))
            (("2" (use "suffix_end[nat]") (("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (size const-decl "nat" c_digraphs_def nil)
    (last const-decl "T" more_list_props "structures/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (suffix? def-decl "bool" more_list_props "structures/")
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    nil nil
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (suffix_end formula-decl nil more_list_props "structures/"))
   nil))
 (cycles_from_TCC14 0
  (cycles_from_TCC14-1 nil 3655550370 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (reverse def-decl "list[T]" list_props nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (last const-decl "T" more_list_props "structures/")
    (suffix? def-decl "bool" more_list_props "structures/")
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (/= const-decl "boolean" notequal nil)
    (< def-decl "bool" ordinals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (size const-decl "nat" c_digraphs_def nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (cycles_from_measure const-decl "ordinal" cdigraph_all_cycles nil))
   nil))
 (cycles_from_TCC15 0
  (cycles_from_TCC15-1 nil 3655550614
   ("" (skeep*)
    (("" (case "list_of_idxs[T](C)(nth[list[nat]](adjs(C), w))")
      (("1" (label "loi_adjs_w" -1)
        (("1" (hide "loi_adjs_w")
          (("1" (split 3)
            (("1" (flatten)
              (("1" (use "member_append_fi[(cycle?(C))]")
                (("1" (assert)
                  (("1" (hide -2)
                    (("1" (split -1)
                      (("1"
                        (typepred
                         "v1(C)(v)(cons[nat](w, walked), nth[list[nat]](adjs(C), w))")
                        (("1" (hide -1)
                          (("1" (inst -1 "cycle")
                            (("1" (assert)
                              (("1"
                                (skeep -1)
                                (("1"
                                  (inst 1 "w")
                                  (("1"
                                    (replace -4 1)
                                    (("1"
                                      (expand "member" 1 1)
                                      (("1"
                                        (hide-all-but (-2 1))
                                        (("1"
                                          (lemma "prefix_supl[nat]")
                                          (("1"
                                            (inst? -1 :where -2)
                                            (("1"
                                              (replace -1 :hide? t)
                                              (("1"
                                                (skeep -1)
                                                (("1"
                                                  (replace
                                                   -1
                                                   :dir
                                                   rl
                                                   :hide?
                                                   t)
                                                  (("1"
                                                    (lemma
                                                     "prefix_supl[nat]")
                                                    (("1"
                                                      (inst?
                                                       -1
                                                       :where
                                                       1)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         :hide?
                                                         t)
                                                        (("1"
                                                          (inst
                                                           1
                                                           "cons(w_1, L)")
                                                          (("1"
                                                            (expand
                                                             "reverse"
                                                             1
                                                             2)
                                                            (("1"
                                                              (use
                                                               "append_assoc[nat]")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 :hide?
                                                                 t)
                                                                (("1"
                                                                  (expand
                                                                   "append"
                                                                   1
                                                                   3)
                                                                  (("1"
                                                                    (expand
                                                                     "append"
                                                                     1
                                                                     3)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "walking")
                                    (("2"
                                      (expand "list_of_idxs" -2)
                                      (("2"
                                        (replace -7 :hide? t)
                                        (("2"
                                          (inst -2 "0")
                                          (("1"
                                            (expand "nth" -2)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (reveal -2)
                                            (("2"
                                              (replaces -1)
                                              (("2"
                                                (expand "length" 1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (reveal "loi_adjs_w")
                            (("2" (assert)
                              (("2"
                                (use "suffix_reflexive[nat]")
                                nil
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (use "cycles_from_TCC9")
                          (("3" (assert) nil nil)) nil))
                        nil)
                       ("2" (typepred "v1(C)(v)(walked, ws)")
                        (("1" (hide -1)
                          (("1" (inst -1 "cycle")
                            (("1" (assert)
                              (("1"
                                (skeep -1)
                                (("1"
                                  (inst 1 "w_1")
                                  (("1"
                                    (assert)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (use "cycles_from_TCC13")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (use "cycles_from_TCC13")
                  (("2" (assert) nil nil)) nil)
                 ("3" (hide-all-but 1)
                  (("3" (reveal "loi_adjs_w")
                    (("3" (assert)
                      (("3" (use "suffix_reflexive[nat]") nil nil))
                      nil))
                    nil))
                  nil)
                 ("4" (use "cycles_from_TCC9") (("4" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (skeep -1)
                (("2" (replace -3 -1)
                  (("2" (expand "member" -1)
                    (("2" (split -1)
                      (("1" (replaces -1)
                        (("1"
                          (typepred
                           "v1(C)(v)(cons[nat](w, walked), nth[list[nat]](adjs(C), w))")
                          (("1" (hide -1)
                            (("1" (inst -1 "cycle")
                              (("1"
                                (use "member_append_l[(cycle?(C))]")
                                (("1"
                                  (assert)
                                  (("1"
                                    (typepred "cycle")
                                    (("1"
                                      (case
                                       "NOT reverse[nat](cons[nat](w, walked)) = cycle")
                                      (("1"
                                        (label "cycle is incomplete" 1)
                                        (("1"
                                          (hide "cycle is incomplete")
                                          (("1"
                                            (inst
                                             2
                                             "nth(cycle, length(walked) + 1)")
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (case
                                                 "nth(cycle, length(walked)) = w")
                                                (("1"
                                                  (split 2)
                                                  (("1"
                                                    (expand "walk?")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide-all-but
                                                         (-1 -3 1))
                                                        (("1"
                                                          (inst
                                                           -2
                                                           "length(walked)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (reveal -5)
                                                            (("2"
                                                              (hide-all-but
                                                               (1 -1))
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (use
                                                                   "length_reverse[nat]")
                                                                  (("2"
                                                                    (expand
                                                                     "length"
                                                                     -1
                                                                     1)
                                                                    (("2"
                                                                      (case
                                                                       "1 + length[nat](walked) = length(cycle)")
                                                                      (("1"
                                                                        (hide
                                                                         -2
                                                                         1)
                                                                        (("1"
                                                                          (reveal
                                                                           -10
                                                                           "cycle is incomplete")
                                                                          (("1"
                                                                            (use
                                                                             "prefix_eq[nat]")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 (-2
                                                                                  1))
                                                                                (("1"
                                                                                  (use
                                                                                   "length_reverse[nat]")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1
                                                                                     :hide?
                                                                                     t)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "length"
                                                                                       1
                                                                                       1)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-6 1))
                                                    (("2"
                                                      (expand
                                                       "reverse"
                                                       1)
                                                      (("2"
                                                        (lemma
                                                         "prefix_supl[nat]")
                                                        (("2"
                                                          (inst?
                                                           -1
                                                           :where
                                                           -2)
                                                          (("2"
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (use
                                                                   "prefix_app[nat]")
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     :hide?
                                                                     t)
                                                                    (("2"
                                                                      (lemma
                                                                       "prefix_supl[nat]")
                                                                      (("2"
                                                                        (inst?
                                                                         -1
                                                                         :where
                                                                         1)
                                                                        (("2"
                                                                          (replace
                                                                           -1
                                                                           :hide?
                                                                           t)
                                                                          (("2"
                                                                            (case
                                                                             "NOT null? (L)")
                                                                            (("1"
                                                                              (label
                                                                               "L not null"
                                                                               1)
                                                                              (("1"
                                                                                (hide
                                                                                 "L not null")
                                                                                (("1"
                                                                                  (inst
                                                                                   1
                                                                                   "cdr(L)")
                                                                                  (("1"
                                                                                    (case
                                                                                     "car(L)= nth(append(reverse[nat](cons[nat](w, walked)), L),
                                                                                                                                                                                             1 + length(walked))
                                                                                                                                                                                         ")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1
                                                                                       :dir
                                                                                       rl
                                                                                       :hide?
                                                                                       t)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "append"
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "append"
                                                                                           1)
                                                                                          (("1"
                                                                                            (apply-extensionality
                                                                                             1)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (use
                                                                                         "nth_append[nat]")
                                                                                        (("2"
                                                                                          (split
                                                                                           -1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             :hide?
                                                                                             t)
                                                                                            (("1"
                                                                                              (use
                                                                                               "length_reverse[nat]")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1
                                                                                                 :hide?
                                                                                                 t)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   1
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "length"
                                                                                                     1
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "nth")
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide
                                                                                             2)
                                                                                            (("2"
                                                                                              (use
                                                                                               "length_reverse[nat]")
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -1
                                                                                                 :hide?
                                                                                                 t)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   1
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (reveal
                                                                                                     "L not null")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "length"
                                                                                                       2
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (reveal
                                                                                     "L not null")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               1)
                                                                              (("2"
                                                                                (reveal
                                                                                 "cycle is incomplete")
                                                                                (("2"
                                                                                  (use
                                                                                   "append_null[nat]")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (-5 1))
                                                  (("2"
                                                    (expand
                                                     "reverse"
                                                     -1)
                                                    (("2"
                                                      (use
                                                       "prefix_supl[nat]")
                                                      (("2"
                                                        (replace
                                                         -1
                                                         :hide?
                                                         t)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (use
                                                               "nth_append[nat]")
                                                              (("2"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   :hide?
                                                                   t)
                                                                  (("1"
                                                                    (use
                                                                     "length_append[nat]")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       :hide?
                                                                       t)
                                                                      (("1"
                                                                        (use
                                                                         "length_reverse[nat]")
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           :hide?
                                                                           t)
                                                                          (("1"
                                                                            (expand
                                                                             "length"
                                                                             1
                                                                             3)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (use
                                                                                 "nth_append[nat]")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       :hide?
                                                                                       t)
                                                                                      (("1"
                                                                                        (use
                                                                                         "length_reverse[nat]")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           :hide?
                                                                                           t)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "nth")
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (use
                                                                                       "length_reverse[nat]")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (use
                                                                     "length_append[nat]")
                                                                    (("2"
                                                                      (replace
                                                                       -1
                                                                       :hide?
                                                                       t)
                                                                      (("2"
                                                                        (use
                                                                         "length_reverse[nat]")
                                                                        (("2"
                                                                          (replace
                                                                           -1
                                                                           :hide?
                                                                           t)
                                                                          (("2"
                                                                            (expand
                                                                             "length"
                                                                             1
                                                                             3)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide-all-but (1 -5))
                                                  (("3"
                                                    (use
                                                     "prefix_length[nat]")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (hide -2)
                                                        (("3"
                                                          (use
                                                           "length_reverse[nat]")
                                                          (("3"
                                                            (replace
                                                             -1
                                                             :hide?
                                                             t)
                                                            (("3"
                                                              (expand
                                                               "length"
                                                               -1
                                                               1)
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-2 1))
                                              (("2"
                                                (expand "list_of_idxs")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "1 + length[nat](walked)")
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (hide-all-but (1 -6))
                                              (("3"
                                                (reveal
                                                 "cycle is incomplete")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (case
                                                     "length(reverse[nat](cons[nat](w, walked))) = length(cycle)")
                                                    (("1"
                                                      (hide -2 2)
                                                      (("1"
                                                        (use
                                                         "prefix_eq[nat]")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (-1 1 3))
                                                      (("2"
                                                        (use
                                                         "prefix_length[nat]")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (use
                                                             "length_reverse[nat]")
                                                            (("2"
                                                              (replaces
                                                               -1)
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "walked")
                                        (("2"
                                          (hide-all-but (-6 -5 5 -10))
                                          (("2"
                                            (replace
                                             -2
                                             :dir
                                             rl
                                             :hide?
                                             t)
                                            (("2"
                                              (expand "circuit?")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (lemma
                                                   "car_reverse[nat]")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "cons(w, walked)")
                                                    (("2"
                                                      (replace
                                                       -1
                                                       :hide?
                                                       t)
                                                      (("2"
                                                        (use
                                                         "last_cons[nat]")
                                                        (("2"
                                                          (replace
                                                           -1
                                                           :hide?
                                                           t)
                                                          (("2"
                                                            (lemma
                                                             "last_reverse[nat]")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "cons(w, walked)")
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 :hide?
                                                                 t)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (use "cycles_from_TCC13")
                                  (("2" (assert) nil nil))
                                  nil)
                                 ("3"
                                  (hide-all-but 1)
                                  (("3"
                                    (reveal "loi_adjs_w")
                                    (("3"
                                      (assert)
                                      (("3"
                                        (use "suffix_reflexive[nat]")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (use "cycles_from_TCC9")
                                  (("4" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (reveal "loi_adjs_w")
                              (("2"
                                (assert)
                                (("2"
                                  (use "suffix_reflexive[nat]")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (use "cycles_from_TCC9")
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (typepred "v1(C)(v)(walked, ws)")
                        (("1" (hide -1)
                          (("1" (inst -1 "cycle")
                            (("1" (use "member_append_r[(cycle?(C))]")
                              (("1"
                                (assert)
                                (("1"
                                  (inst 2 "w_1")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (use "cycles_from_TCC13")
                                (("2" (assert) nil nil))
                                nil)
                               ("3"
                                (hide-all-but 1)
                                (("3"
                                  (reveal "loi_adjs_w")
                                  (("3"
                                    (assert)
                                    (("3"
                                      (use "suffix_reflexive[nat]")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (use "cycles_from_TCC9")
                                (("4" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (use "cycles_from_TCC13")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide-all-but (-1 1))
        (("2" (typepred "C")
          (("2" (expand "cdigraph")
            (("2" (flatten) (("2" (inst -2 "w") nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (prefix_length formula-decl nil more_list_props "structures/")
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_null formula-decl nil more_list_props "structures/")
    (length_singleton formula-decl nil more_list_props "structures/")
    (length_append formula-decl nil list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length_reverse formula-decl nil list_props nil)
    (prefix_eq formula-decl nil more_list_props "structures/")
    (prefix_app formula-decl nil more_list_props "structures/")
    (append_null formula-decl nil list_props nil) nil
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nth_append formula-decl nil more_list_props "structures/")
    (list_cons_extensionality formula-decl nil list_adt nil) nil
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (car_reverse formula-decl nil more_list_props "structures/")
    (last_reverse formula-decl nil more_list_props "structures/")
    (last_cons formula-decl nil more_list_props "structures/")
    (member_append_l formula-decl nil more_list_props "structures/")
    (member_append_r formula-decl nil more_list_props "structures/")
    (cycles_from_TCC9 subtype-tcc nil cdigraph_all_cycles nil)
    (suffix_reflexive formula-decl nil more_list_props "structures/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (prefix_supl formula-decl nil more_list_props "structures/")
    (append def-decl "list[T]" list_props nil)
    (append_assoc formula-decl nil list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil) nil
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cycles_from_TCC13 subtype-tcc nil cdigraph_all_cycles nil) nil nil
    (below type-eq-decl nil naturalnumbers nil)
    (size const-decl "nat" c_digraphs_def nil)
    (last const-decl "T" more_list_props "structures/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil) nil
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) nil
    (suffix? def-decl "bool" more_list_props "structures/")
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil) nil
    (ordstruct type-decl nil ordstruct_adt nil)
    (< def-decl "bool" ordinals nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (cycles_from_measure const-decl "ordinal" cdigraph_all_cycles nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (prefix? def-decl "bool" more_list_props "structures/")
    (cycle? const-decl "bool" cdigraph_all_cycles nil)
    (circuit? const-decl "bool" cdigraph_all_cycles nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (member_append_fi formula-decl nil more_list_props "structures/"))
   nil))
 (cycles_for_TCC1 0
  (cycles_for_TCC1-1 nil 3655811132 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (circuit? const-decl "bool" cdigraph_all_cycles nil)
    (cycle? const-decl "bool" cdigraph_all_cycles nil)
    (last const-decl "T" more_list_props "structures/")
    (nth def-decl "T" list_props nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil)
    (size const-decl "nat" c_digraphs_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (cycles_for_TCC2 0
  (cycles_for_TCC2-1 nil 3655811132
   ("" (skeep :preds? t) (("" (grind) nil nil)) nil)
   ((T formal-type-decl nil cdigraph_all_cycles nil)
    (size const-decl "nat" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (last const-decl "T" more_list_props "structures/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil) nil
    (reverse def-decl "list[T]" list_props nil)
    (append def-decl "list[T]" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil))
   nil))
 (cycles_for_TCC3 0
  (cycles_for_TCC3-1 nil 3655811132 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (cycles_for_TCC4 0
  (cycles_for_TCC4-1 nil 3655811132
   ("" (skeep)
    (("" (typepred "C")
      (("" (expand "cdigraph")
        (("" (flatten)
          (("" (inst -2 "v")
            (("1" (assert)
              (("1" (use "suffix_reflexive[nat]") nil nil)) nil)
             ("2" (typepred "v") (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (suffix_reflexive formula-decl nil more_list_props "structures/")
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil) nil
    (below type-eq-decl nil naturalnumbers nil) nil
    (length def-decl "nat" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (cycles_for_TCC5 0
  (cycles_for_TCC5-1 nil 3655811132
   ("" (skeep*)
    ((""
      (typepred
       "cycles_from(C)(v)((: v :), nth[list[nat]](adjs(C), v))")
      (("" (hide -1)
        (("" (inst -1 "cycle")
          (("" (replace -1 :hide? t)
            (("" (split 1)
              (("1" (flatten)
                (("1" (skeep -1)
                  (("1" (expand "reverse" -2)
                    (("1" (expand "reverse" -2)
                      (("1" (expand "reverse" -2)
                        (("1" (expand "append" -2 2)
                          (("1" (expand "append" -2)
                            (("1" (expand "append" -2)
                              (("1"
                                (lemma "nnprefixes_same_head[nat]")
                                (("1"
                                  (inst
                                   -1
                                   "cycle"
                                   "cons(v,cons(w,null))")
                                  (("1"
                                    (assert)
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (expand "prefixes")
                                    (("2"
                                      (use "prefix_supl[nat]")
                                      (("2"
                                        (replace -1 :hide? t)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (inst 1 "nth(cycle,1)")
                  (("1" (split 1)
                    (("1" (typepred "cycle")
                      (("1" (expand "walk?")
                        (("1" (hide-all-but (1 -3 -6))
                          (("1" (flatten)
                            (("1" (inst -1 "0")
                              (("1"
                                (expand "nth" -1 3)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (reveal -4)
                                (("2"
                                  (expand "circuit?")
                                  (("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "reverse" 1)
                      (("2" (expand "reverse" 1)
                        (("2" (expand "reverse" 1)
                          (("2" (expand "append" 1 2)
                            (("2"
                              (case "cycle=append(cons(v,null),cdr(cycle))")
                              (("1"
                                (replace -1 1 :hide? t)
                                (("1"
                                  (expand "append" 1)
                                  (("1"
                                    (expand "nth" 1)
                                    (("1"
                                      (expand "append" 1)
                                      (("1"
                                        (expand "nth" 1)
                                        (("1"
                                          (case
                                           "cons(car(cdr(cycle)), null) = append((:car(cdr(cycle)):),null)")
                                          (("1"
                                            (replace -1 :hide? t)
                                            (("1"
                                              (case
                                               "cdr(cycle) = append((:car(cdr(cycle)):),cdr(cdr(cycle)))")
                                              (("1"
                                                (replace -1 :hide? t)
                                                (("1"
                                                  (expand "append" 1 2)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "append")
                                                (("2"
                                                  (apply-extensionality)
                                                  (("2"
                                                    (expand "append" 1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "append" 1)
                                            (("2"
                                              (expand "append" 1)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "append" 1)
                                (("2"
                                  (expand "append" 1)
                                  (("2"
                                    (replace -1 :dir rl)
                                    (("2"
                                      (apply-extensionality)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "cycle")
                    (("2" (hide-all-but (-2 -4 1))
                      (("2" (expand "list_of_idxs")
                        (("2" (inst -1 "1") nil nil)) nil))
                      nil))
                    nil)
                   ("3" (typepred "cycle") (("3" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (cycles_from def-decl "{cs: list[(cycle?(C))] |
         FORALL (cycle: (cycle?(C))):
           member(cycle, cs) IFF
            (EXISTS (w: below(size(C))):
               member(w, walking) AND
                prefix?(reverse(cons(w, walked)), cycle))}"
     cdigraph_all_cycles nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (prefix? def-decl "bool" more_list_props "structures/")
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (suffix? def-decl "bool" more_list_props "structures/")
    (last const-decl "T" more_list_props "structures/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (reverse def-decl "list[T]" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (size const-decl "nat" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (cycle? const-decl "bool" cdigraph_all_cycles nil)
    (circuit? const-decl "bool" cdigraph_all_cycles nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (append def-decl "list[T]" list_props nil)
    (prefixes const-decl "bool" more_list_props "structures/") nil nil
    nil nil
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (prefix_supl formula-decl nil more_list_props "structures/")
    (nnprefixes_same_head formula-decl nil more_list_props
     "structures/")
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (all_cycles_rec_TCC1 0
  (all_cycles_rec_TCC1-1 nil 3656158837 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (circuit? const-decl "bool" cdigraph_all_cycles nil)
    (cycle? const-decl "bool" cdigraph_all_cycles nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil))
   nil))
 (all_cycles_rec_TCC2 0
  (all_cycles_rec_TCC2-1 nil 3656158837 ("" (grind) nil nil)
   ((T formal-type-decl nil cdigraph_all_cycles nil)
    (size const-decl "nat" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (nth def-decl "T" list_props nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (last const-decl "T" more_list_props "structures/")
    (circuit? const-decl "bool" cdigraph_all_cycles nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (cycle? const-decl "bool" cdigraph_all_cycles nil) nil)
   nil))
 (all_cycles_rec_TCC3 0
  (all_cycles_rec_TCC3-1 nil 3656158837 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (size const-decl "nat" c_digraphs_def nil))
   nil))
 (all_cycles_rec_TCC4 0
  (all_cycles_rec_TCC4-1 nil 3656158837
   ("" (skeep*)
    (("" (case "n=0")
      (("1" (replace -1) (("1" (grind) nil nil)) nil)
       ("2" (assert)
        (("2" (split 2)
          (("1" (typepred "v(C)(n - 1)") (("1" (grind) nil nil)) nil)
           ("2" (skeep 1 :preds? t)
            (("2" (case "i=n-2")
              (("1" (hide -2) (("1" (postpone) nil nil)) nil)
               ("2" (postpone) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (size const-decl "nat" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (all_cycles_rec_TCC5 0
  (all_cycles_rec_TCC5-1 nil 3656159837
   ("" (skeep*)
    (("" (case "n=0")
      (("1" (replace -1)
        (("1" (assert)
          (("1" (split 1)
            (("1" (use "length_append[list[(cycle?(C))]]")
              (("1" (replace -1 :hide? t) (("1" (grind) nil nil)) nil)
               ("2" (hide-all-but 1)
                (("2" (skeep :preds? t)
                  (("2" (expand "walk?")
                    (("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep :preds? t)
              (("2" (replace -2)
                (("2" (assert)
                  (("2" (case "i=0")
                    (("1" (replace -1 :hide? t)
                      (("1" (skeep)
                        (("1"
                          (lemma "append_null_left[list[(cycle?(C))]]")
                          (("1" (inst -1 "(: cycles_for(C)(0) :)")
                            (("1" (replace -1 :hide? t)
                              (("1"
                                (expand "nth" 1)
                                (("1"
                                  (typepred "cycles_for(C)(0)")
                                  (("1" (inst?) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (skeep :preds? t)
                                (("2"
                                  (expand "walk?")
                                  (("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (split 2)
          (("1" (typepred "v(C)(n - 1)")
            (("1" (hide-all-but (1 -2))
              (("1" (use "length_append[list[(cycle?(C))]]")
                (("1" (replace -1 :hide? t) (("1" (grind) nil nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (skeep :preds? t)
                    (("2" (expand "walk?")
                      (("2" (flatten) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep :preds? t)
            (("2" (case "i=n")
              (("1" (replace -1 :hide? t)
                (("1" (hide -1)
                  (("1" (skeep)
                    (("1" (lemma "nth_append[list[(cycle?(C))]]")
                      (("1"
                        (inst -1 "v(C)(n - 1)" "(: cycles_for(C)(n) :)"
                         "n")
                        (("1" (assert)
                          (("1" (replace -1 :hide? t)
                            (("1" (typepred "v(C)(n-1)")
                              (("1"
                                (replace -2 :hide? t)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "nth" 1)
                                    (("1"
                                      (hide -1 -2)
                                      (("1"
                                        (typepred "cycles_for(C)(n)")
                                        (("1"
                                          (inst -2 "cycle")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (skeep :preds? t)
                            (("2" (expand "walk?")
                              (("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep 2)
                (("2" (use "nth_append[list[(cycle?(C))]]")
                  (("1" (assert)
                    (("1" (replace -1 :hide? t)
                      (("1" (typepred "v(C)(n-1)")
                        (("1" (inst -3 "i")
                          (("1" (inst -3 "cycle") nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (skeep :preds? t)
                      (("2" (expand "walk?")
                        (("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (size const-decl "nat" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (append_null_left formula-decl nil more_list_props "structures/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cycle? const-decl "bool" cdigraph_all_cycles nil)
    (circuit? const-decl "bool" cdigraph_all_cycles nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (length_append formula-decl nil list_props nil)
    (cycles_for const-decl "{cs: list[(cycle?(C))] |
         FORALL (cycle: (cycle?(C))): member(cycle, cs) IFF car(cycle) = v}"
     cdigraph_all_cycles nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) nil
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nth_append formula-decl nil more_list_props "structures/")
    (length_singleton formula-decl nil more_list_props "structures/")
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (all_cycles_TCC1 0
  (all_cycles_TCC1-1 nil 3656158837 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (circuit? const-decl "bool" cdigraph_all_cycles nil)
    (cycle? const-decl "bool" cdigraph_all_cycles nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil)
    (last const-decl "T" more_list_props "structures/")
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (size const-decl "nat" c_digraphs_def nil))
   nil))
 (all_cycles_TCC2 0
  (all_cycles_TCC2-1 nil 3656158837 ("" (existence-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (cycle? const-decl "bool" cdigraph_all_cycles nil)
    (circuit? const-decl "bool" cdigraph_all_cycles nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (last const-decl "T" more_list_props "structures/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (below type-eq-decl nil naturalnumbers nil) nil
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (size const-decl "nat" c_digraphs_def nil)
    (length_null formula-decl nil more_list_props "structures/"))
   nil))
 (all_cycles_TCC3 0
  (all_cycles_TCC3-1 nil 3656163383 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (size const-decl "nat" c_digraphs_def nil))
   nil))
 (w?2w_TCC1 0
  (w?2w_TCC1-1 nil 3661518461 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil) nil
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil)
    (size const-decl "nat" c_digraphs_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (w?2w_TCC2 0
  (w?2w_TCC2-2 nil 3661518869
   ("" (skeep)
    (("" (typepred "cw")
      (("" (expand "walk?" -3)
        (("" (flatten)
          (("" (split 2)
            (("1" (grind) nil nil)
             ("2" (expand "walk?")
              (("2" (expand "finseq_appl")
                (("2" (expand "verts_in?")
                  (("2" (expand "digraph_verts")
                    (("2" (split 1)
                      (("1" (skeep)
                        (("1" (expand "vert")
                          (("1" (use "nth_member[T]") nil nil)) nil))
                        nil)
                       ("2" (skeep)
                        (("2" (expand "edge?")
                          (("2" (expand "digraph_edges")
                            (("2" (expand "edges")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "vert")
                                  (("2"
                                    (split 1)
                                    (("1"
                                      (use "nth_member[T]")
                                      nil
                                      nil)
                                     ("2"
                                      (use "nth_member[T]")
                                      nil
                                      nil)
                                     ("3"
                                      (use "idx_nth_no_rep[T]")
                                      (("1"
                                        (replace -1 :hide? t)
                                        (("1"
                                          (use "idx_nth_no_rep[T]")
                                          (("1"
                                            (replace -1 :hide? t)
                                            (("1"
                                              (inst? -4 :where 1)
                                              nil
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "C")
                                            (("2"
                                              (expand "cdigraph")
                                              (("2" (flatten) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "C")
                                        (("2"
                                          (expand "cdigraph")
                                          (("2" (flatten) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((walk? const-decl "bool" cdigraph_all_cycles nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (walk_eq const-decl "bool" cdigraph_all_cycles nil)
    (walk? const-decl "bool" walks_ nil)
    (verts_in? const-decl "bool" walks_ nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (nth_member formula-decl nil more_list_props "structures/")
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (edge? const-decl "bool" digraphs_ nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (idx_nth_no_rep formula-decl nil more_list_props "structures/") nil
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (size const-decl "nat" c_digraphs_def nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil)
  (w?2w_TCC2-1 nil 3661518461 ("" (subtype-tcc) nil nil) nil nil))
 (w2w?_rec_TCC1 0
  (w2w?_rec_TCC1-1 nil 3661527718 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (size const-decl "nat" c_digraphs_def nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (vert const-decl "bool" c_digraphs_def nil)
    (verts_in? const-decl "bool" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (edge? const-decl "bool" digraphs_ nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (w2w?_rec_TCC2 0
  (w2w?_rec_TCC2-1 nil 3661527718 ("" (subtype-tcc) nil nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (w2w?_rec_TCC3 0
  (w2w?_rec_TCC3-2 nil 3661529071
   ("" (skeep)
    (("" (expand "finseq_appl")
      (("" (typepred "C")
        (("" (typepred "w")
          (("" (expand "walk?")
            (("" (flatten)
              (("" (expand "verts_in?")
                (("" (expand "digraph_verts")
                  (("" (inst -2 "offset")
                    ((""
                      (typepred
                       "list2set(data(C::ComputableDigraph[T]))")
                      (("" (replace -2 :hide? t)
                        (("" (assert)
                          (("" (expand "vert") (("" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (> const-decl "bool" reals nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (member def-decl "bool" list_props nil)
    (list2set def-decl "{s: finite_set[T] | s = ({x | member(x, l)})}"
     set_as_list "structures/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (verts_in? const-decl "bool" walks_ nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil))
   nil)
  (w2w?_rec_TCC3-1 nil 3661527718 ("" (subtype-tcc) nil nil) nil nil))
 (w2w?_rec_TCC4 0
  (w2w?_rec_TCC4-1 nil 3661527718 ("" (grind) nil nil)
   (nil
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (w2w?_rec_TCC5 0
  (w2w?_rec_TCC5-1 nil 3661527718 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (size const-decl "nat" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (/= const-decl "boolean" notequal nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (vert const-decl "bool" c_digraphs_def nil)
    (verts_in? const-decl "bool" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (edge? const-decl "bool" digraphs_ nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (w2w?_rec_TCC6 0
  (w2w?_rec_TCC6-1 nil 3661527718 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (w2w?_rec_TCC7 0
  (w2w?_rec_TCC7-2 nil 3661529288
   ("" (skeep)
    (("" (lift-if 1)
      (("" (split 1)
        (("1" (flatten)
          (("1" (split 1)
            (("1" (expand "list_of_idxs") (("1" (grind) nil nil)) nil)
             ("2" (grind) nil nil) ("3" (grind) nil nil)
             ("4" (expand "finseq_appl")
              (("4" (skeep)
                (("4" (typepred "i")
                  (("4" (assert)
                    (("4" (case "i=0")
                      (("1" (replace -1 :hide? t)
                        (("1" (replace -2 :hide? t)
                          (("1" (expand "nth" 1 2)
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (typepred "v(C) (w, offset + 1)")
            (("1" (hide -1)
              (("1" (expand "finseq_appl")
                (("1" (split 2)
                  (("1" (expand "list_of_idxs")
                    (("1" (skeep)
                      (("1" (case "i=0")
                        (("1" (replace -1 :hide? t)
                          (("1" (expand "nth" 1)
                            (("1" (expand "size")
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (expand "nth" 2)
                          (("2" (assert)
                            (("2" (inst -1 "i-1") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "walk?")
                    (("2" (skeep 1)
                      (("2" (case "i=0")
                        (("1" (replace -1 :hide? t)
                          (("1" (expand "nth" 1 3)
                            (("1" (expand "nth" 1 1)
                              (("1"
                                (typepred "w")
                                (("1"
                                  (expand "walk?")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst -3 "offset")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "finseq_appl")
                                          (("1"
                                            (inst -7 "0")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -7 :hide? t)
                                                (("1"
                                                  (expand "edge?")
                                                  (("1"
                                                    (expand
                                                     "digraph_edges")
                                                    (("1"
                                                      (expand "edges")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (use
                                                           "idx_nth_no_rep[T]")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "C")
                                                            (("2"
                                                              (expand
                                                               "cdigraph")
                                                              (("2"
                                                                (flatten)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "nth" 2 3)
                          (("2" (assert)
                            (("2" (expand "nth" 2 1)
                              (("2"
                                (inst -2 "i-1")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (typepred "i")
                                  (("2"
                                    (expand "length" -1 1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "length" 1 1) (("3" (assert) nil nil))
                    nil)
                   ("4" (skeep)
                    (("4" (case "i=0")
                      (("1" (replace -1 :hide? t)
                        (("1" (expand "nth" 1 2)
                          (("1" (grind) nil nil)) nil))
                        nil)
                       ("2" (expand "nth" 2 2)
                        (("2" (assert)
                          (("2" (inst -4 "i-1")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil) nil
    nil nil nil
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (edge? const-decl "bool" digraphs_ nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (idx_nth_no_rep formula-decl nil more_list_props "structures/") nil
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (length_singleton formula-decl nil more_list_props "structures/")
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (idx def-decl "{i: below(length(l)) | nth(l, i) = a}"
     more_list_props "structures/")
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (member def-decl "bool" list_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (size const-decl "nat" c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil)
  (w2w?_rec_TCC7-1 nil 3661527718 ("" (subtype-tcc) nil nil) nil nil))
 (w2w?_TCC1 0
  (w2w?_TCC1-1 nil 3661527718 ("" (subtype-tcc) nil nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (w2w?_TCC2 0
  (w2w?_TCC2-2 nil 3661529882
   ("" (skeep)
    (("" (typepred "w2w?_rec(C)(w, 0)")
      (("" (expand "walk_eq")
        (("" (assert) (("" (skeep) (("" (inst -5 "i") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((w2w?_rec def-decl "{wi: (walk?(C)) |
         length(wi) + offset = length(w) AND
          (FORALL (i: below(length(wi))):
             finseq_appl[T](w)(i + offset) = nth(data(C), nth(wi, i)))}"
     cdigraph_all_cycles nil)
    (nth def-decl "T" list_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil) (Walk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (walk_eq const-decl "bool" cdigraph_all_cycles nil))
   nil)
  (w2w?_TCC2-1 nil 3661527718 ("" (subtype-tcc) nil nil) nil nil))
 (w2w?_circuit 0
  (w2w?_circuit-1 nil 3661530452
   ("" (skeep)
    (("" (typepred "w2w?(C)(w)")
      (("" (hide -1)
        (("" (expand "circuit?")
          (("" (flatten)
            (("" (split 1)
              (("1" (expand "pre_circuit?")
                (("1" (expand "finseq_appl")
                  (("1" (expand "walk_eq")
                    (("1" (flatten)
                      (("1" (expand "finseq_appl")
                        (("1" (inst? :copy? t)
                          (("1" (expand "last")
                            (("1" (inst -4 "length(w)-1")
                              (("1"
                                (replace -4 :hide? t)
                                (("1"
                                  (replace -3 :hide? t)
                                  (("1"
                                    (replace -3 :hide? t)
                                    (("1"
                                      (hide-all-but (-3 1))
                                      (("1"
                                        (expand "nth" -1 2)
                                        (("1"
                                          (typepred "C")
                                          (("1"
                                            (expand "cdigraph")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (hide-all-but
                                                 (-5 1 -3))
                                                (("1"
                                                  (expand
                                                   "no_repetitions?")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "car(w2w?(C)(w))"
                                                     "nth(w2w?(C)(w), length(w2w?(C)(w)) - 1)")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (typepred
                                                       "w2w?(C)(w)")
                                                      (("2"
                                                        (expand
                                                         "walk?")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             2)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "w2w?(C)(w)")
                (("2" (expand "walk_eq")
                  (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((w2w? const-decl "{wi: (walk?(C)) | walk_eq(C)(w, wi)}"
     cdigraph_all_cycles nil)
    (walk_eq const-decl "bool" cdigraph_all_cycles nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (circuit? const-decl "bool" cdigraph_all_cycles nil)
    (circuit? const-decl "bool" circuits_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (w skolem-const-decl "Walk
    [T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](C)" cdigraph_all_cycles nil)
    (C skolem-const-decl "(cdigraph)" cdigraph_all_cycles nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (last const-decl "T" more_list_props "structures/")
    (pre_circuit? const-decl "bool" circuits_ nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (w2w?_cycle_TCC1 0
  (w2w?_cycle_TCC1-2 nil 3661529938
   ("" (skeep)
    (("" (use "w2w?_circuit")
      (("" (assert)
        (("" (expand "cycle?") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((w2w?_circuit formula-decl nil cdigraph_all_cycles nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (cycle? const-decl "bool" cycles_ nil))
   nil)
  (w2w?_cycle_TCC1-1 nil 3661527718 ("" (subtype-tcc) nil nil) nil
   nil))
 (w2w?_cycle 0
  (w2w?_cycle-1 nil 3661530542
   ("" (skeep)
    (("" (typepred "w2w?(C)(w)")
      (("" (hide -1)
        (("" (expand "cycle?")
          (("" (flatten)
            (("" (expand "finseq_appl")
              (("" (expand "no_repetitions?")
                (("" (skeep :preds? t)
                  (("" (expand "walk_eq")
                    (("" (flatten)
                      (("" (expand "finseq_appl")
                        (("" (expand "length" -5)
                          (("" (lift-if -5)
                            (("" (split -5)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "walk?")
                                  (("1" (flatten) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (case "i < length(w) -1")
                                  (("1"
                                    (hide -3)
                                    (("1"
                                      (case "j<length(w)-1")
                                      (("1"
                                        (hide -4)
                                        (("1"
                                          (case "i+1=length(w)-1")
                                          (("1"
                                            (expand "circuit?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "pre_circuit?")
                                                (("1"
                                                  (expand
                                                   "finseq_appl")
                                                  (("1"
                                                    (inst
                                                     -10
                                                     "0"
                                                     "j+1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst-cp
                                                         -7
                                                         "j+1")
                                                        (("1"
                                                          (replace
                                                           -8
                                                           2
                                                           :hide?
                                                           t)
                                                          (("1"
                                                            (expand
                                                             "nth"
                                                             2
                                                             2)
                                                            (("1"
                                                              (replace
                                                               -10
                                                               :dir
                                                               rl
                                                               :hide?
                                                               t)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst
                                                                   -7
                                                                   "length(w)-1")
                                                                  (("1"
                                                                    (replace
                                                                     -7
                                                                     -8
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       :hide?
                                                                       t
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (expand
                                                                         "nth"
                                                                         -6
                                                                         2)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (case "j+1=length(w)-1")
                                            (("1"
                                              (expand "circuit?")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand
                                                   "pre_circuit?")
                                                  (("1"
                                                    (expand
                                                     "finseq_appl")
                                                    (("1"
                                                      (inst
                                                       -10
                                                       "0"
                                                       "i+1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst-cp
                                                           -7
                                                           "i+1")
                                                          (("1"
                                                            (replace
                                                             -8
                                                             3
                                                             :hide?
                                                             t)
                                                            (("1"
                                                              (expand
                                                               "nth"
                                                               3
                                                               2)
                                                              (("1"
                                                                (replace
                                                                 -10
                                                                 :hide?
                                                                 t)
                                                                (("1"
                                                                  (inst
                                                                   -7
                                                                   "length(w)-1")
                                                                  (("1"
                                                                    (replace
                                                                     -7
                                                                     -8
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       :hide?
                                                                       t
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (expand
                                                                         "nth"
                                                                         -6
                                                                         2)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst-cp -6 "i+1")
                                              (("1"
                                                (expand "nth" -7 2)
                                                (("1"
                                                  (inst -6 "j+1")
                                                  (("1"
                                                    (expand "nth" -6 2)
                                                    (("1"
                                                      (inst
                                                       -9
                                                       "i+1"
                                                       "j+1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((w2w? const-decl "{wi: (walk?(C)) | walk_eq(C)(w, wi)}"
     cdigraph_all_cycles nil)
    (walk_eq const-decl "bool" cdigraph_all_cycles nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cycle? const-decl "bool" cdigraph_all_cycles nil)
    (cycle? const-decl "bool" cycles_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (length def-decl "nat" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (< const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth def-decl "T" list_props nil)
    (j skolem-const-decl "below(length(cdr(w2w?(C)(w))))"
     cdigraph_all_cycles nil)
    (w skolem-const-decl "Walk
    [T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](C)" cdigraph_all_cycles nil)
    (C skolem-const-decl "(cdigraph)" cdigraph_all_cycles nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pre_circuit? const-decl "bool" circuits_ nil)
    (circuit? const-decl "bool" circuits_ nil)
    (i skolem-const-decl "below(length(cdr(w2w?(C)(w))))"
     cdigraph_all_cycles nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/"))
   nil))
 (lc?2lw_TCC1 0
  (lc?2lw_TCC1-2 nil 3661520023
   ("" (skeep)
    (("" (typepred "nth(cycles,i)")
      (("" (expand "circuit?")
        (("" (flatten) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (cycle? const-decl "bool" cdigraph_all_cycles nil)
    (circuit? const-decl "bool" cdigraph_all_cycles nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil)
  (lc?2lw_TCC1-1 nil 3661519920 ("" (subtype-tcc) nil nil) nil nil))
 (lc?2lw_TCC2 0
  (lc?2lw_TCC2-1 nil 3661519920 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (circuit? const-decl "bool" cdigraph_all_cycles nil)
    (cycle? const-decl "bool" cdigraph_all_cycles nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (lc?2lw_TCC3 0
  (lc?2lw_TCC3-1 nil 3661519920 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (circuit? const-decl "bool" cdigraph_all_cycles nil)
    (cycle? const-decl "bool" cdigraph_all_cycles nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil) nil
    (last const-decl "T" more_list_props "structures/")
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (walk_eq const-decl "bool" cdigraph_all_cycles nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (lc?2lw_TCC4 0
  (lc?2lw_TCC4-2 nil 3661524623
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "cycles")
        (("" (hide -1)
          (("" (replace -2)
            (("" (inst -1 "i+1")
              (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    nil nil nil nil nil
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (circuit? const-decl "bool" cdigraph_all_cycles nil)
    (cycle? const-decl "bool" cdigraph_all_cycles nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (size const-decl "nat" c_digraphs_def nil))
   nil)
  (lc?2lw_TCC4-1 nil 3661519920 ("" (subtype-tcc) nil nil) nil nil))
 (lc?2lw_TCC5 0
  (lc?2lw_TCC5-1 nil 3661519920 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (circuit? const-decl "bool" cdigraph_all_cycles nil)
    (cycle? const-decl "bool" cdigraph_all_cycles nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (last const-decl "T" more_list_props "structures/")
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil))
   nil))
 (lc?2lw_TCC6 0
  (lc?2lw_TCC6-2 nil 3661524666
   ("" (skeep)
    (("" (split 1)
      (("1" (replace -1 :hide? t) (("1" (grind) nil nil)) nil)
       ("2" (skeep :preds? t)
        (("2" (expand "length" -1)
          (("2" (typepred "v(C)(v_idx, cycles_)")
            (("1" (hide -1)
              (("1" (case "i=0")
                (("1" (replace -1 :hide? t)
                  (("1" (expand "nth" 1)
                    (("1" (replace -4 :hide? t)
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (expand "nth" 2)
                  (("2" (assert)
                    (("2" (inst -2 "i-1")
                      (("2" (assert)
                        (("2" (replace -4 :hide? t)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (typepred "cycles")
                (("2" (hide -1)
                  (("2" (skeep)
                    (("2" (replace -3)
                      (("2" (inst -1 "i!1+1")
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (w?2w const-decl "{w: Walk(C) | walk_eq(C)(w, cw)}"
     cdigraph_all_cycles nil)
    nil nil nil nil nil
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (below type-eq-decl nil naturalnumbers nil)
    (size const-decl "nat" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (circuit? const-decl "bool" cdigraph_all_cycles nil)
    (cycle? const-decl "bool" cdigraph_all_cycles nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk_eq const-decl "bool" cdigraph_all_cycles nil))
   nil)
  (lc?2lw_TCC6-1 nil 3661519920 ("" (subtype-tcc) nil nil) nil nil))
 (ac2vl_rec_TCC1 0
  (ac2vl_rec_TCC1-2 nil 3661525607
   ("" (skeep)
    (("" (typepred "C")
      (("" (skeep :preds? t)
        (("" (typepred "cs")
          (("" (assert)
            (("" (expand "size") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cycle? const-decl "bool" cdigraph_all_cycles nil)
    (circuit? const-decl "bool" cdigraph_all_cycles nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil)
  (ac2vl_rec_TCC1-1 nil 3661525512 ("" (subtype-tcc) nil nil) nil nil))
 (ac2vl_rec_TCC2 0
  (ac2vl_rec_TCC2-1 nil 3661525512 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (circuit? const-decl "bool" cdigraph_all_cycles nil)
    (cycle? const-decl "bool" cdigraph_all_cycles nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (size const-decl "nat" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (VertCycles type-eq-decl nil cycles_ nil)
    (CyclesAt type-eq-decl nil cycles_ nil)
    (vert type-eq-decl nil digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil) nil
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (last const-decl "T" more_list_props "structures/")
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (ac2vl_rec_TCC3 0
  (ac2vl_rec_TCC3-2 nil 3661526517
   ("" (skeep)
    (("" (typepred "cs")
      (("" (hide -1)
        (("" (expand "size")
          (("" (replace -1 :dir rl :hide? t) (("" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cycle? const-decl "bool" cdigraph_all_cycles nil)
    (circuit? const-decl "bool" cdigraph_all_cycles nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil)
  (ac2vl_rec_TCC3-1 nil 3661525512 ("" (subtype-tcc) nil nil) nil nil))
 (ac2vl_rec_TCC4 0
  (ac2vl_rec_TCC4-2 nil 3661526548
   ("" (skeep)
    (("" (typepred "C")
      (("" (expand "vert?")
        (("" (expand "digraph_verts")
          (("" (expand "vert") (("" (use "nth_member[T]") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth_member formula-decl nil more_list_props "structures/")
    (vert const-decl "bool" c_digraphs_def nil)
    (vert? const-decl "bool" digraphs_ nil))
   nil)
  (ac2vl_rec_TCC4-1 nil 3661525512 ("" (subtype-tcc) nil nil) nil nil))
 (ac2vl_rec_TCC5 0
  (ac2vl_rec_TCC5-2 nil 3661526652
   ("" (skeep) (("" (typepred "cs") (("" (grind) nil nil)) nil)) nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cycle? const-decl "bool" cdigraph_all_cycles nil)
    (circuit? const-decl "bool" cdigraph_all_cycles nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil)
    (last const-decl "T" more_list_props "structures/")
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil)
  (ac2vl_rec_TCC5-1 nil 3661525512 ("" (subtype-tcc) nil nil) nil nil))
 (ac2vl_rec_TCC6 0
  (ac2vl_rec_TCC6-2 nil 3661526678
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "cs")
        (("" (hide -1)
          (("" (replace -3 :hide? t)
            (("" (inst -2 "0")
              (("1" (expand "nth" -2)
                (("1" (expand "nth" 1 1)
                  (("1" (inst -2 "nth(cycles,i)")
                    (("1" (assert)
                      (("1" (use "nth_member[(cycle?(C))]") nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (reveal -2)
                (("2" (replace -1 :hide? t) (("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil nil nil
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nth_member formula-decl nil more_list_props "structures/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (circuit? const-decl "bool" cdigraph_all_cycles nil)
    (cycle? const-decl "bool" cdigraph_all_cycles nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (size const-decl "nat" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil))
   nil)
  (ac2vl_rec_TCC6-1 nil 3661525512 ("" (subtype-tcc) nil nil) nil nil))
 (ac2vl_rec_TCC7 0
  (ac2vl_rec_TCC7-3 nil 3661528052
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "cs")
        (("" (hide -1)
          (("" (replace -3 :hide? t)
            (("" (inst -2 "0")
              (("1" (expand "nth" -2)
                (("1" (typepred "lc?2lw(C)(offset, cycles)")
                  (("1" (hide -1)
                    (("1" (expand "cycle_at?")
                      (("1" (expand "finseq_appl")
                        (("1" (split 1)
                          (("1" (flatten)
                            (("1" (use "member_nth[Walk(C)]")
                              (("1"
                                (assert)
                                (("1"
                                  (hide -2)
                                  (("1"
                                    (skeep -1)
                                    (("1"
                                      (inst -3 "i")
                                      (("1"
                                        (inst -5 "nth(cycles,i)")
                                        (("1"
                                          (use
                                           "nth_member[(cycle?(C))]")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "walk_eq")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand
                                                   "finseq_appl")
                                                  (("1"
                                                    (replace
                                                     -2
                                                     :hide?
                                                     t)
                                                    (("1"
                                                      (inst -4 "0")
                                                      (("1"
                                                        (replace
                                                         -4
                                                         :hide?
                                                         t)
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           1
                                                           2)
                                                          (("1"
                                                            (use
                                                             "cycle_walk_eq")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2"
                              (case "EXISTS(cc: (cycle?(C))): walk_eq(C)(walk,cc)")
                              (("1"
                                (skeep -1)
                                (("1"
                                  (inst -7 "cc")
                                  (("1"
                                    (flatten -7)
                                    (("1"
                                      (hide -7)
                                      (("1"
                                        (split -)
                                        (("1"
                                          (use
                                           "member_nth[(cycle?(C))]")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skeep -1)
                                              (("1"
                                                (inst -7 "i")
                                                (("1"
                                                  (replace -1 :hide? t)
                                                  (("1"
                                                    (lemma
                                                     "walk_eq_inj_1")
                                                    (("1"
                                                      (inst?
                                                       -1
                                                       :where
                                                       -3)
                                                      (("1"
                                                        (inst?
                                                         -1
                                                         :where
                                                         -7)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (use
                                                               "nth_member[Walk(C)]")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "walk_eq" -1)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (inst -2 "0")
                                              (("2"
                                                (expand "finseq_appl")
                                                (("2"
                                                  (replace -2 :hide? t)
                                                  (("2"
                                                    (hide-all-but
                                                     (-3 1))
                                                    (("2"
                                                      (expand
                                                       "nth"
                                                       -1
                                                       2)
                                                      (("2"
                                                        (typepred "C")
                                                        (("2"
                                                          (expand
                                                           "cdigraph")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "no_repetitions?"
                                                               -3)
                                                              (("2"
                                                                (inst
                                                                 -3
                                                                 "car(cc)"
                                                                 "offset")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst 1 "w2w?(C)(walk)")
                                (("1"
                                  (typepred "w2w?(C)(walk)")
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (use "w2w?_cycle")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "cycle?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (use "w2w?_circuit")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (reveal -2)
                (("2" (replace -1 :hide? t) (("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil nil nil
    (lc?2lw def-decl "{cs: list[Walk(C)] |
         length(cs) = length(cycles) AND
          (FORALL (i: below(length(cs))):
             walk_eq(C)(nth(cs, i), nth(cycles, i)))}"
     cdigraph_all_cycles nil)
    (walk_eq const-decl "bool" cdigraph_all_cycles nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (cycle_at? const-decl "bool" cycles_ nil)
    (member_nth formula-decl nil more_list_props "structures/")
    (nth_member formula-decl nil more_list_props "structures/")
    (cycle_walk_eq formula-decl nil cdigraph_all_cycles nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (walk_eq_inj_1 formula-decl nil cdigraph_all_cycles nil)
    (w2w?_cycle formula-decl nil cdigraph_all_cycles nil)
    (cycle? const-decl "bool" cycles_ nil)
    (w2w?_circuit formula-decl nil cdigraph_all_cycles nil) nil
    (w2w? const-decl "{wi: (walk?(C)) | walk_eq(C)(w, wi)}"
     cdigraph_all_cycles nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (circuit? const-decl "bool" cdigraph_all_cycles nil)
    (cycle? const-decl "bool" cdigraph_all_cycles nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (size const-decl "nat" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil))
   nil)
  (ac2vl_rec_TCC7-2 nil 3661526883
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "cs")
        (("" (hide -1)
          (("" (replace -3 :hide? t)
            (("" (inst -2 "0")
              (("1" (expand "nth" -2)
                (("1" (typepred "lc?2lw(C)(offset, cycles)")
                  (("1" (hide -1)
                    (("1" (expand "cycle_at?")
                      (("1" (expand "finseq_appl")
                        (("1" (split 1)
                          (("1" (flatten)
                            (("1" (use "member_nth[Walk(C)]")
                              (("1"
                                (assert)
                                (("1"
                                  (hide -2)
                                  (("1"
                                    (skeep -1)
                                    (("1"
                                      (inst -3 "i")
                                      (("1"
                                        (inst -5 "nth(cycles,i)")
                                        (("1"
                                          (use
                                           "nth_member[(cycle?(C))]")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "walk_eq")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand
                                                   "finseq_appl")
                                                  (("1"
                                                    (replace
                                                     -2
                                                     :hide?
                                                     t)
                                                    (("1"
                                                      (inst -4 "0")
                                                      (("1"
                                                        (replace
                                                         -4
                                                         :hide?
                                                         t)
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           1
                                                           2)
                                                          (("1"
                                                            (use
                                                             "cycle_walk_eq")
                                                            (("1"
                                                              (assert)
                                                              nil)))))))))))))))))))))))))))))))))))
                           ("2" (flatten)
                            (("2"
                              (case "EXISTS(cc: (cycle?(C))): walk_eq(C)(walk,cc)")
                              (("1"
                                (skeep -1)
                                (("1"
                                  (inst -7 "cc")
                                  (("1"
                                    (flatten -7)
                                    (("1"
                                      (hide -7)
                                      (("1"
                                        (split -)
                                        (("1"
                                          (use
                                           "member_nth[(cycle?(C))]")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skeep -1)
                                              (("1"
                                                (inst -7 "i")
                                                (("1"
                                                  (replace -1 :hide? t)
                                                  (("1"
                                                    (lemma
                                                     "walk_eq_inj_1")
                                                    (("1"
                                                      (inst?
                                                       -1
                                                       :where
                                                       -3)
                                                      (("1"
                                                        (inst?
                                                         -1
                                                         :where
                                                         -7)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (use
                                                               "nth_member[Walk(C)]")
                                                              nil)))))))))))))))))))))
                                         ("2"
                                          (expand "walk_eq" -1)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (inst -2 "0")
                                              (("2"
                                                (expand "finseq_appl")
                                                (("2"
                                                  (replace -2 :hide? t)
                                                  (("2"
                                                    (hide-all-but
                                                     (-3 1))
                                                    (("2"
                                                      (expand
                                                       "nth"
                                                       -1
                                                       2)
                                                      (("2"
                                                        (typepred "C")
                                                        (("2"
                                                          (expand
                                                           "cdigraph")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "no_repetitions?"
                                                               -3)
                                                              (("2"
                                                                (inst
                                                                 -3
                                                                 "car(cc)"
                                                                 "offset")
                                                                (("2"
                                                                  (assert)
                                                                  nil)))))))))))))))))))))))))))))))))))
                               ("2"
                                (inst 1 "w?2w(C)(walk)")
                                (("1"
                                  (typepred "w?2w(C)(walk)")
                                  (("1" (propax) nil)))
                                 ("2"
                                  (use "w?2w_cycle")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "cycle?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (use "w2wi_circuit")
                                          (("2"
                                            (assert)
                                            nil)))))))))))))))))))))))))))))
               ("2" (reveal -2)
                (("2" (replace -1 :hide? t)
                  (("2" (grind) nil))))))))))))))))
    nil)
   nil nil)
  (ac2vl_rec_TCC7-1 nil 3661525512 ("" (subtype-tcc) nil nil) nil nil))
 (ac2vl_rec_TCC8 0
  (ac2vl_rec_TCC8-2 nil 3661528853
   ("" (skeep)
    (("" (typepred "cs")
      (("" (hide -1)
        (("" (replace -1 :dir rl)
          (("" (assert)
            (("" (replace -3)
              (("" (expand "length" 1 2)
                (("" (skeep :preds? t)
                  (("" (inst -3 "i+1")
                    (("1" (skeep)
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (replace -3 :dir rl)
                            (("1" (expand "nth" 1 2)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace -3) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cycle? const-decl "bool" cdigraph_all_cycles nil)
    (circuit? const-decl "bool" cdigraph_all_cycles nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil) nil
    nil nil nil nil
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil)
  (ac2vl_rec_TCC8-1 nil 3661525512 ("" (subtype-tcc) nil nil) nil nil))
 (ac2vl_rec_TCC9 0
  (ac2vl_rec_TCC9-1 nil 3661525512 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (circuit? const-decl "bool" cdigraph_all_cycles nil)
    (cycle? const-decl "bool" cdigraph_all_cycles nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (size const-decl "nat" c_digraphs_def nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (member def-decl "bool" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (last const-decl "T" more_list_props "structures/")
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil))
   nil))
 (ac2vl_rec_TCC10 0
  (ac2vl_rec_TCC10-2 nil 3661528909
   ("" (skeep)
    (("" (typepred "v(C)(offset + 1, cs_)")
      (("1" (split 1)
        (("1" (replace -3 :hide? t)
          (("1" (expand "length" 1) (("1" (assert) nil nil)) nil)) nil)
         ("2" (skeep :preds? t)
          (("2" (expand "length" -1)
            (("2" (case "n=0")
              (("1" (replace -1 :hide? t)
                (("1" (expand "nth" 1 2) (("1" (propax) nil nil)) nil))
                nil)
               ("2" (inst -3 "n-1")
                (("1" (assert)
                  (("1" (expand "nth" 2 2) (("1" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2) (("2" (grind) nil nil)) nil)
       ("3" (hide 2)
        (("3" (typepred "cs")
          (("3" (replace -2 :dir rl)
            (("3" (assert)
              (("3" (replace -4)
                (("3" (expand "length" 1 2)
                  (("3" (skeep :preds? t)
                    (("3" (skeep)
                      (("3" (inst -4 "i+1")
                        (("1" (inst?)
                          (("1" (replace -4 :dir rl)
                            (("1" (expand "nth" 1 2)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cycle? const-decl "bool" cdigraph_all_cycles nil)
    (circuit? const-decl "bool" cdigraph_all_cycles nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (length def-decl "nat" list_props nil)
    (VertCycles type-eq-decl nil cycles_ nil)
    (CyclesAt type-eq-decl nil cycles_ nil)
    (vert type-eq-decl nil digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lc?2lw def-decl "{cs: list[Walk(C)] |
         length(cs) = length(cycles) AND
          (FORALL (i: below(length(cs))):
             walk_eq(C)(nth(cs, i), nth(cycles, i)))}"
     cdigraph_all_cycles nil)
    (walk_eq const-decl "bool" cdigraph_all_cycles nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil nil nil nil nil nil nil
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (no_repetitions? const-decl "bool" more_list_props "structures/")
    (/= const-decl "boolean" notequal nil)
    (last const-decl "T" more_list_props "structures/") nil
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil)
  (ac2vl_rec_TCC10-1 nil 3661525512 ("" (subtype-tcc) nil nil) nil
   nil))
 (all_cycles_vl_TCC1 0
  (all_cycles_vl_TCC1-1 nil 3661532098
   ("" (expand "vert?")
    (("" (expand "digraph_verts")
      (("" (assert)
        (("" (expand "vert")
          (("" (skeep)
            (("" (use "every_nth[T]")
              (("" (assert)
                (("" (hide 2)
                  (("" (skeep) (("" (use "nth_member[T]") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (every_nth formula-decl nil list_props nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (number nonempty-type-decl nil numbers nil)
    (member def-decl "bool" list_props nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nth_member formula-decl nil more_list_props "structures/")
    (vert? const-decl "bool" digraphs_ nil))
   nil))
 (all_cycles_vl_TCC2 0
  (all_cycles_vl_TCC2-1 nil 3661532098
   ("" (use "data_vert_list") nil nil)
   ((T formal-type-decl nil cdigraph_all_cycles nil)
    (data_vert_list judgement-tcc nil c_digraphs nil))
   nil))
 (all_cycles_vl_TCC3 0
  (all_cycles_vl_TCC3-1 nil 3661532098
   ("" (skeep*)
    (("" (typepred "all_cycles(C)")
      (("" (assert) (("" (skeep*) (("" (inst? -3) nil nil)) nil)) nil))
      nil))
    nil)
   ((all_cycles const-decl "{cs: list[list[(cycle?(C))]] |
         length(cs) = size(C) AND
          (FORALL (i: below(size(C))):
             FORALL (cycle: (cycle?(C))):
               member(cycle, nth(cs, i)) IFF car(cycle) = i)}"
     cdigraph_all_cycles nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cycle? const-decl "bool" cdigraph_all_cycles nil)
    (circuit? const-decl "bool" cdigraph_all_cycles nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (all_cycles_vl_TCC4 0
  (all_cycles_vl_TCC4-1 nil 3661532098
   ("" (skeep)
    (("" (typepred "ac2vl_rec(C)(0, all_cycles(C))")
      (("1" (replace -1 :hide? t)
        (("1" (typepred "all_cycles(C)")
          (("1" (assert)
            (("1" (expand "size") (("1" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (typepred "all_cycles(C)")
          (("2" (assert)
            (("2" (skeep*) (("2" (inst? -3) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((all_cycles const-decl "{cs: list[list[(cycle?(C))]] |
         length(cs) = size(C) AND
          (FORALL (i: below(size(C))):
             FORALL (cycle: (cycle?(C))):
               member(cycle, nth(cs, i)) IFF car(cycle) = i)}"
     cdigraph_all_cycles nil)
    (ac2vl_rec def-decl "{l: list[VertCycles(C)] |
         length(l) = length(cs) AND
          (FORALL (n: below(length(l))):
             nth[T](data(C), n + offset) = vert(nth(l, n)))}"
     cdigraph_all_cycles nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (member def-decl "bool" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size const-decl "nat" c_digraphs_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cycle? const-decl "bool" cdigraph_all_cycles nil)
    (circuit? const-decl "bool" cdigraph_all_cycles nil)
    (walk? const-decl "bool" cdigraph_all_cycles nil)
    (list_of_idxs const-decl "bool" c_digraphs_def nil)
    (length def-decl "nat" list_props nil)
    (VertCycles type-eq-decl nil cycles_ nil)
    (CyclesAt type-eq-decl nil cycles_ nil)
    (vert type-eq-decl nil digraphs_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
          FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]" c_digraphs_imp nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph_type -> nat]" c_digraphs_imp
     nil)
    (digraph_edges const-decl "[digraph_type -> [T, T -> bool]]"
     c_digraphs_imp nil)
    (digraph_verts const-decl "[digraph_type -> [T -> bool]]"
     c_digraphs_imp nil)
    (digraph_type type-eq-decl nil c_digraphs_imp nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil cdigraph_all_cycles nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil)))

