(c_digraphs_imp
 (cdigraphs_implement_digraphs_ 0
  (cdigraphs_implement_digraphs_-1 nil 3657035870
   ("" (expand "correct_implementation")
    (("" (expand "correct_implementation_")
      (("" (split 1)
        (("1" (skeep)
          (("1" (use "vert_finite")
            (("1" (expand "digraph_verts") (("1" (propax) nil nil))
              nil))
            nil))
          nil)
         ("2" (expand "digraph_edges")
          (("2" (skeep) (("2" (use "edges_finite") nil nil)) nil)) nil)
         ("3" (expand "digraph_edges")
          (("3" (expand "digraph_verts")
            (("3" (skeep) (("3" (skeep) (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil)
         ("4" (expand "digraph_verts")
          (("4" (expand "digraph_edges")
            (("4" (expand "digraph_make")
              (("4" (skeep)
                (("4" (typepred "make(v, e)") (("4" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("5" (expand "digraph_size")
          (("5" (expand "restrict")
            (("5" (expand "size")
              (("5" (expand "digraph_verts")
                (("5" (expand "vert")
                  (("5" (skeep)
                    (("5" (use "eq_no_rep_same_size[T]")
                      (("1" (assert)
                        (("1" (hide 2)
                          (("1" (split 1)
                            (("1" (typepred "G")
                              (("1"
                                (expand "cdigraph")
                                (("1" (flatten) nil nil))
                                nil))
                              nil)
                             ("2" (expand "set_list_eq")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (expand "is_finite")
                          (("2"
                            (inst 1 "length(data(G))"
                             "LAMBDA(x:(LAMBDA (x: T): member[T](x, data(G)))): idx(data(G),x)")
                            (("2" (expand "injective?")
                              (("2"
                                (skeep)
                                (("2"
                                  (use "idx_inj[T]")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (typepred "G")
                                    (("2"
                                      (expand "cdigraph")
                                      (("2" (flatten) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((correct_implementation_ const-decl "bool" digraphs_abs nil)
    (vert_finite formula-decl nil c_digraphs_def nil)
    (c_digraph type-eq-decl nil c_digraphs_def nil)
    (cdigraph const-decl "bool" c_digraphs_def nil)
    (ComputableDigraph type-eq-decl nil c_digraphs_def nil)
    (list type-decl nil list_adt nil)
    (edges_finite formula-decl nil c_digraphs_def nil)
    (vert const-decl "bool" c_digraphs_def nil)
    (edges const-decl "bool" c_digraphs_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (make const-decl
     "{cd: (cdigraph) | vert(cd) = v AND edges(cd) = e}" c_digraphs_def
     nil)
    (vert_type type-eq-decl nil digraphs_abs nil)
    (edge_type type-eq-decl nil digraphs_abs nil)
    (eq_no_rep_same_size formula-decl nil set_as_list_props structures)
    (set_list_eq const-decl "bool" set_as_list structures)
    (no_repetitions? const-decl "bool" more_list_props structures)
    (idx_inj formula-decl nil more_list_props structures)
    (idx def-decl "{i: below(length(l)) | nth(l, i) = a}"
     more_list_props structures)
    (size const-decl "nat" c_digraphs_def nil)
    (correct_implementation const-decl "bool" digraphs_abs nil))
   shostak)))

