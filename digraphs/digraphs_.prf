(digraphs_
 (empty_digraph_TCC1 0
  (empty_digraph_TCC1-1 nil 3657104939 ("" (subtype-tcc) nil nil) nil
   nil
   (empty_digraph subtype "sets[edgetype[T]].emptyset"
    "{e: (finite_sets[[digraphs_.T, digraphs_.T]].is_finite) | FORALL (x, y: digraphs_.T): booleans.IMPLIES(e(x, y), booleans.AND(sets[digraphs_.T].emptyset(x), sets[digraphs_.T].emptyset(y)))}")))
 (adjs_TCC1 0
  (adjs_TCC1-1 nil 3656665115
   ("" (skeep)
    (("" (use "concretedigraph_implements_abstractdigraph")
      (("" (expand "correct_implementation")
        (("" (expand "correct_implementation_")
          (("" (flatten)
            (("" (inst? -2)
              (("" (hide-all-but (-2 1))
                (("" (expand "is_finite")
                  (("" (skeep)
                    ((""
                      (inst 1 "N"
                       "LAMBDA(s:({y | edges(G)(x, y)})): f(x, s)")
                      (("" (expand "injective?")
                        (("" (skeep)
                          (("" (inst?) (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((correct_implementation_ const-decl "bool" digraphs_abs nil)
    (correct_implementation const-decl "bool" digraphs_abs nil))
   nil
   (adjs subtype
    "{y | digraphs_.edges(digraphs_.G)(digraphs_.x, digraphs_.y)}"
    "finite_set[T]")))
 (edges_vert 0
  (edges_vert-1 nil 3507100927
   ("" (skosimp*)
    (("" (lemma "edges_in_verts")
      (("" (assert)
        (("" (inst -1 "G!1" "e!1`1" "e!1`2")
          (("" (split -1)
            (("1" (flatten)
              (("1" (expand "in?")
                (("1" (split -3)
                  (("1" (replace -1 :dir rl)
                    (("1" (inst + "PROJ_2(e!1)") nil nil)) nil)
                   ("2" (replace -1 :dir rl)
                    (("2" (inst + "PROJ_1(e!1)") nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((edges_in_verts formula-decl nil digraphs_abs nil)
    (edgetype type-eq-decl nil digraphs_utils nil)
    (in? const-decl "bool" pairs structures))
   nil))
 (other_vert 0
  (other_vert-1 nil 3507100927
   ("" (skosimp*)
    (("" (lemma "edges_in_verts")
      (("" (assert)
        (("" (inst?)
          (("" (inst -1 "e!1`1" "e!1`2")
            (("" (split -1)
              (("1" (flatten)
                (("1" (expand "in?")
                  (("1" (split -3)
                    (("1" (inst + "PROJ_2(e!1)")
                      (("1" (assert) nil nil)) nil)
                     ("2" (inst + "PROJ_1(e!1)")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((edges_in_verts formula-decl nil digraphs_abs nil)
    (in? const-decl "bool" pairs structures)
    (edgetype type-eq-decl nil digraphs_utils nil))
   nil))
 (edges_to_pair 0
  (edges_to_pair-2 "" 3790100574
   ("" (skosimp*)
    (("" (inst + "proj_1(e!1)" "proj_2(e!1)") (("" (assert) nil nil))
      nil))
    nil)
   ((edgetype type-eq-decl nil digraphs_utils nil)
    (edges_in_verts formula-decl nil digraphs_abs nil))
   shostak)
  (edges_to_pair-1 nil 3507100927
   ("" (skosimp*)
    (("" (inst + "proj_1(e!1)" "proj_2(e!1)")
      (("" (assert)
        (("" (case "e!1 = (proj_1(e!1),proj_2(e!1))")
          (("1" (replace -1 -)
            (("1" (assert)
              (("1" (use "edges_in_verts")
                (("1" (split -1)
                  (("1" (inst?) (("1" (assert) nil nil)) nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((edgetype type-eq-decl nil digraphs_utils nil)
    (edges_in_verts formula-decl nil digraphs_abs nil))
   nil))
 (empty?_rew_TCC1 0
  (empty?_rew_TCC1-1 nil 3660743292 ("" (assert) nil nil)
   ((vert_is_finite formula-decl nil digraphs_abs nil)) nil
   (empty?_rew subtype "digraphs_.vert(digraphs_.G)" "finite_set[T]")))
 (empty?_rew 0
  (empty?_rew-1 nil 3507100927
   ("" (skosimp*)
    (("" (lemma " card_empty?[T]")
      (("" (inst?)
        (("" (expand "empty?" 1)
          (("" (replace -1) (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil nil))
 (empty_size 0
  (empty_size-1 nil 3559650566
   ("" (skeep)
    (("" (assert)
      (("" (rewrite "empty?_rew") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((size_def formula-decl nil digraphs_abs nil)) shostak))
 (edges_of_empty 0
  (edges_of_empty-2 "" 3790100576
   ("" (skosimp*)
    (("" (expand "empty?")
      (("" (apply-extensionality 1 :hide? t)
        (("" (expand "emptyset")
          (("" (expand "empty?")
            (("" (expand "member")
              (("" (use "edges_in_verts")
                (("" (split -1)
                  (("1" (inst?) (("1" (assert) nil nil)) nil)
                   ("2" (assert) nil nil) ("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((edges_in_verts formula-decl nil digraphs_abs nil)
    (edgetype type-eq-decl nil digraphs_utils nil))
   shostak)
  (edges_of_empty-1 nil 3507100927
   ("" (skosimp*)
    (("" (expand "empty?")
      (("" (apply-extensionality 1 :hide? t)
        (("" (expand "emptyset")
          (("" (expand "empty?")
            (("" (expand "member")
              (("" (use "edges_in_verts")
                (("" (split -1)
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (inst?) (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((edges_in_verts formula-decl nil digraphs_abs nil)
    (edgetype type-eq-decl nil digraphs_utils nil))
   nil))
 (singleton_edges 0
  (singleton_edges-2 nil 3660747029
   ("" (skosimp*)
    (("" (expand "singleton?")
      (("" (assert)
        (("" (lemma "card_one[T]")
          (("" (inst?)
            (("" (assert)
              (("" (hide -2)
                (("" (skosimp*)
                  (("" (expand "empty?")
                    (("" (skosimp*)
                      (("" (expand "member")
                        (("" (lemma "edges_in_verts")
                          (("" (assert)
                            (("" (inst?)
                              ((""
                                (inst -1 "x!2`1" "x!2`2")
                                ((""
                                  (split -1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (replace -3)
                                      (("1"
                                        (hide -3)
                                        (("1"
                                          (expand "singleton")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (typepred "SG!1")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((edges_in_verts formula-decl nil digraphs_abs nil)
    (edgetype type-eq-decl nil digraphs_utils nil)
    (size_def formula-decl nil digraphs_abs nil))
   nil)
  (singleton_edges-1 nil 3507100927
   ("" (skosimp*)
    (("" (expand "singleton?")
      (("" (expand "size")
        (("" (lemma "card_one[T]")
          (("" (inst?)
            (("" (assert)
              (("" (hide -2)
                (("" (skosimp*)
                  (("" (expand "empty?")
                    (("" (skosimp*)
                      (("" (expand "member")
                        (("" (lemma "edges_in_verts")
                          (("" (assert)
                            (("" (inst?)
                              ((""
                                (inst -1 "x!2`1" "x!2`2")
                                ((""
                                  (split -1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (replace -3)
                                      (("1"
                                        (hide -3)
                                        (("1"
                                          (expand "singleton")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (typepred "SG!1")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((edges_in_verts formula-decl nil digraphs_abs nil)
    (edgetype type-eq-decl nil digraphs_utils nil))
   nil))
 (edge_in_card_gt_1_TCC1 0
  (edge_in_card_gt_1_TCC1-2 "" 3790100576 ("" (assert) nil nil)
   ((vert_is_finite formula-decl nil digraphs_abs nil)) shostak
   (edge_in_card_gt_1 subtype "digraphs_.vert(digraphs_.SG)"
    "finite_set[T]"))
  (edge_in_card_gt_1_TCC1-1 nil 3657643495
   ("" (assert)
    (("" (skeep)
      (("" (assert)
        (("" (lemma "vert_is_finite")
          (("" (split -1)
            (("1" (inst?) nil nil) ("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((vert_is_finite formula-decl nil digraphs_abs nil)) nil
   (edge_in_card_gt_1 subtype "digraphs_.vert(digraphs_.SG)"
    "finite_set[T]")))
 (edge_in_card_gt_1 0
  (edge_in_card_gt_1-1 nil 3507100927
   ("" (skosimp*)
    (("" (typepred "SG!1")
      (("" (lemma "edges_in_verts")
        (("" (assert)
          (("" (inst?)
            (("" (inst -1 "e!1`1" "e!1`2")
              (("" (inst?)
                (("" (split -1)
                  (("1" (assert)
                    (("1" (flatten)
                      (("1"
                        (case "subset?(add(PROJ_1(e!1),singleton(PROJ_2(e!1))),vert(SG!1))")
                        (("1" (lemma "card_subset[T]")
                          (("1" (inst?)
                            (("1" (assert)
                              (("1"
                                (rewrite "card_add")
                                (("1"
                                  (rewrite "card_singleton")
                                  (("1"
                                    (hide -2)
                                    (("1"
                                      (expand "singleton")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((edgetype type-eq-decl nil digraphs_utils nil)
    (edges_in_verts formula-decl nil digraphs_abs nil))
   nil))
 (not_singleton_2_vert 0
  (not_singleton_2_vert-2 nil 3660747075
   ("" (skosimp*)
    (("" (expand "empty?")
      (("" (lemma "card_empty?[T]")
        (("" (inst?)
          (("" (iff)
            (("" (assert)
              (("" (expand "singleton?")
                (("" (assert)
                  (("" (lemma "card_2_has_2[T]")
                    (("" (inst -1 "vert(G!1)") (("" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vert_is_finite formula-decl nil digraphs_abs nil)
    (size_def formula-decl nil digraphs_abs nil))
   nil)
  (not_singleton_2_vert-1 nil 3507100927
   ("" (skosimp*)
    (("" (expand "empty?")
      (("" (lemma "card_empty?[T]")
        (("" (inst?)
          (("1" (iff)
            (("1" (assert)
              (("1" (expand "singleton?")
                (("1" (expand "size")
                  (("1" (lemma "card_2_has_2[T]")
                    (("1" (inst -1 "vert(G!1)")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (use "vert_is_finite")
              (("2" (split -1)
                (("1" (inst?) nil nil) ("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vert_is_finite formula-decl nil digraphs_abs nil)) nil))
 (proj_rew 0
  (proj_rew-2 "" 3790100578 ("" (skosimp*) (("" (assert) nil nil)) nil)
   nil shostak)
  (proj_rew-1 nil 3507100927
   ("" (skosimp*)
    (("" (assert) (("" (apply-extensionality 1 :hide? t) nil nil))
      nil))
    nil)
   nil nil))
 (singleton_digraph_TCC1 0
  (singleton_digraph_TCC1-1 nil 3507100927
   ("" (skosimp*) (("" (grind) nil nil)) nil) nil nil
   (singleton_digraph subtype "sets[edgetype[T]].emptyset"
    "{e: (finite_sets[[digraphs_.T, digraphs_.T]].is_finite) | FORALL (x, y: digraphs_.T): booleans.IMPLIES(e(x, y), booleans.AND(sets[digraphs_.T].singleton(digraphs_.v)(x), sets[digraphs_.T].singleton(digraphs_.v)(y)))}")))
 (is_sing 0
  (is_sing-2 nil 3660747107
   ("" (expand "singleton_digraph")
    (("" (expand "singleton?")
      (("" (assert)
        (("" (skeep)
          (("" (use "make_ok")
            (("" (split -1)
              (("1" (flatten)
                (("1" (replace -1 :hide? t)
                  (("1" (rewrite "card_singleton") nil nil)) nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((edgetype type-eq-decl nil digraphs_utils nil)
    (edge_type type-eq-decl nil digraphs_abs nil)
    (vert_type type-eq-decl nil digraphs_abs nil)
    (make_ok formula-decl nil digraphs_abs nil)
    (size_def formula-decl nil digraphs_abs nil))
   nil)
  (is_sing-1 nil 3507100927
   ("" (expand "singleton_digraph")
    (("" (expand "singleton?")
      (("" (expand "size")
        (("" (skeep)
          (("" (use "make_ok")
            (("" (split -1)
              (("1" (flatten)
                (("1" (replace -1 :hide? t)
                  (("1" (rewrite "card_singleton") nil nil)) nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((vert_type type-eq-decl nil digraphs_abs nil)
    (edge_type type-eq-decl nil digraphs_abs nil)
    (edgetype type-eq-decl nil digraphs_utils nil)
    (make_ok formula-decl nil digraphs_abs nil))
   nil)))

