c_topological_sort[T: TYPE+]: THEORY
%
%  This theory defines the topological sort on acyclic graphs.
%  It revolves around the `visit` function that does a depth-first
%  search of the graph using a marking system with temporary and
%  permanent marks.
%  Contributed by:
%  Clément Blaudeau, EPFL, Switzerland and Ecole Polytechnique, France

%
BEGIN


   IMPORTING c_dags[T]

   G: VAR c_digraph
   x, y: VAR T
   n, k, i, j: VAR nat
   l: VAR list[T]

   Vert(G): TYPE = vert(G)
   VertID(G): TYPE = below(size(G))
   Adjs(G, (n: VertID(G))): TYPE =
         {l: list[VertID(G)] |
            FORALL (x: VertID(G)):
              member(x, l) IMPLIES edge?(G)(node(G)(n), node(G)(x))}

  % -------------------------------------------------------------------------- %
  % Marking of a digraph                                                       %
  % -------------------------------------------------------------------------- %

   mark: DATATYPE
          BEGIN
           none: none?
           temporary: temporary?
           permanent: permanent?
          END mark

   marking: TYPE = [T -> mark]
   m: VAR marking
   empty_marking: marking = LAMBDA x: none
   non_temporary_marking: TYPE = {m | FORALL x: NOT temporary?(m(x))}

  % -------------------------------------------------------------------------- %
  % Counting temporary and permanent marks inside a marking                    %
  % -------------------------------------------------------------------------- %

   temp_count((l: list[T]), m): nat = length(filter[T](l, temporary? o m))
   perm_count((l: list[T]), m): nat = length(filter[T](l, permanent? o m))

   % Technical results
   temp_count_same: LEMMA
     FORALL (l: list[T]), (m: marking), (x: T):
       NOT member(x, l) IMPLIES
        temp_count(l, m WITH [x := temporary]) = temp_count(l, m)
   temp_count_incr: LEMMA
     FORALL (l: list[T]), (m: marking), (x: T):
       member(x, l) IMPLIES
        NOT temporary?(m(x)) IMPLIES
         no_repetitions?(l) IMPLIES
          temp_count(l, m WITH [x := temporary]) = 1 + temp_count(l, m)
   temp_count_bound: LEMMA
     FORALL (l: list[T]), (m: marking): temp_count(l, m) <= length(l)

   perm_count_same: LEMMA
     FORALL (l: list[T]), (m: marking), (x: T):
       NOT member(x, l) IMPLIES
        perm_count(l, m WITH [x := temporary]) = perm_count(l, m)
   perm_count_same2: LEMMA
     FORALL (l: list[T]), (m: marking), (x: T):
       NOT permanent?(m(x)) IMPLIES
        perm_count(l, m WITH [x := temporary]) = perm_count(l, m)
   perm_count_incr: LEMMA
     FORALL (l: list[T]), (m: marking), (x: T):
       perm_count(l, m WITH [x := temporary]) <= perm_count(l, m)
   perm_count_bound: LEMMA
     FORALL (l: list[T]), (m: marking): perm_count(l, m) <= length(l)

  % -------------------------------------------------------------------------- %
  % Topological lists                                                          %
  % -------------------------------------------------------------------------- %

   permanent_list?(G, m)(l: list[Vert(G)]): bool =
       FORALL x: member(x, l) IFF permanent?(m(x))
   permanent_list(G, m): TYPE = (permanent_list?(G, m))

   topological_list?(G)(l: list[Vert(G)]): bool =
       FORALL (i: below(length(l))), x:
         (EXISTS (w: Walk(G)): from?(w, nth(l, i), x)) IMPLIES
          (EXISTS (j: below(length(l))): x = nth(l, j) ∧ j >= i)

   topperm_list(G, m)(l: list[Vert(G)]): bool =
       permanent_list?(G, m)(l) ∧
        topological_list?(G)(l) ∧ no_repetitions?[T](l)

  % -------------------------------------------------------------------------- %
  % Comparison of markings                                                     %
  % -------------------------------------------------------------------------- %

   greater_marking(m1, m2: marking): bool =
       FORALL (node: T):
         (permanent?(m2(node)) IMPLIES permanent?(m1(node))) ∧
          (temporary?(m1(node)) IMPLIES temporary?(m2(node))) ∧
					(none?(m1(node)) IMPLIES none?(m2(node)))

   % Technical results
   greater_marking_update: LEMMA
     FORALL (m: marking), (x: T):
       greater_marking(m WITH [x := permanent], m)
   greater_marking_temp_count: LEMMA
     FORALL (l: list[T]) (m1, m2: marking):
       greater_marking(m1, m2) IMPLIES temp_count(l, m1) <= temp_count(l, m2)
   greater_marking_perm_count: LEMMA
     FORALL (l: list[T]) (m1, m2: marking) (x: T):
       greater_marking(m1, m2) IMPLIES
        member(x, l) IMPLIES
         NOT permanent?(m2(x)) IMPLIES
          permanent?(m1(x)) IMPLIES perm_count(l, m1) > perm_count(l, m2)


  % -------------------------------------------------------------------------- %
  % Visit (depth-first) function                                               %
  % -------------------------------------------------------------------------- %

   loop(G) : TYPE = {w: Walk(G) | NOT path?(G,w) }
	 in_path?(G)(w: Walk(G), x) : bool = EXISTS (i: below(length(w))) : w`seq(i) = x
	 is_dag(G) : bool = (FORALL (w: Walk(G)): path?(G,w))

   visit(G)
        (m: marking, l: (topperm_list(G, m)),
         node_id: {id: VertID(G) | NOT permanent?(m(node(G)(id)))},
         w:
           {w: Walk(G) |
              seq(w)(length(w) - 1) = node(G)(node_id) AND
               FORALL (x: Vert(G)):
                 temporary?(m(x)) IFF in_path?(G)(w, x)},
         adjs:
           {k: Adjs(G, node_id) |
              FORALL (x: VertID(G)):
                edge?(G)(node(G)(node_id), node(G)(x)) IMPLIES
                 member(x, k) ∨ permanent?(m(node(G)(x)))}): RECURSIVE
         {res: [loop(G) + [marking, list[Vert(G)]]] |
            CASES res
              OF IN_1(loop): TRUE,
                 IN_2(res):
                   (LET (mp, lp) = res IN
                      LET node = node(G)(node_id) IN
                        topperm_list(G, mp)(lp) ∧
                         greater_marking(mp, m) ∧
                          suffix?(l, lp) ∧
                           permanent?(mp(node)) ∧
                            (FORALL x:
                              member(x, lp) IMPLIES
                               NOT member(x, l) IMPLIES
                                (x = node ∨
                                  EXISTS (w: Walk(G)): from?(w, node, x))) ∧
																	nth[T](lp, 0) = node)
              ENDCASES} =
     LET node = node(G)(node_id) IN
       CASES adjs
           OF null: IN_2(m WITH [node := permanent], cons(node, l)),
            cons(child_id, adjsp):
              LET child = node(G)(child_id) IN
                CASES m(child)
                  OF permanent: visit(G)(m, l, node_id, w, adjsp),
                     temporary: IN_1(add1(w, child)),
                     none:
                       CASES visit(G)
                                  (m WITH [child := temporary], l,
                                   child_id, add1(w, child),
                                   nth(adjs(G), child_id))
                         OF IN_1(loop): IN_1(loop),
                            IN_2(res):
                              LET (mp, lp) = res IN
                                visit(G)(mp, lp, node_id, w, adjsp)
                         ENDCASES
                  ENDCASES
         ENDCASES
      MEASURE lex3(size(G) + 1 - perm_count(data(G), m),
                   size(G) + 1 - temp_count(data(G), m), length(adjs))



  % -------------------------------------------------------------------------- %
  % Topological_sort (recursive call of visit function on all nodes)           %
  % -------------------------------------------------------------------------- %

   topological_sort_aux(G)
                       (n: below(size(G)), m: non_temporary_marking,
                        l: (topperm_list(G, m))): RECURSIVE
         {res: [loop(G) + [non_temporary_marking, list[Vert(G)]]] |
            CASES res
              OF IN_1(loop): TRUE,
                 IN_2(res):
                   LET (mp, lp) = res IN
                     topperm_list(G, mp)(lp) ∧
                      greater_marking(mp, m) ∧
                       suffix?(l, lp) ∧
                        FORALL (i: upto(n)): member(node(G)(i), lp)
              ENDCASES} =
     LET node = node(G)(n) IN
       CASES m(node)
         OF permanent:
              IF n = 0 THEN IN_2(m, l)
              ELSE topological_sort_aux(G)(n - 1, m, l)
              ENDIF
         ELSE (CASES visit(G)
                          (m WITH [node := temporary], l, n,
                           gen_seq1(G, node), nth(adjs(G), n))
                 OF IN_1(loop): IN_1(loop),
                    IN_2(res):
                      IF (n = 0)
                        THEN IN_2(res)::
                               [loop(G) +
                                [non_temporary_marking, list[Vert(G)]]]
                      ELSE LET (mp, lp) = res IN
                             topological_sort_aux(G)(n - 1, mp, lp)::
                               [loop(G) +
                                [non_temporary_marking, list[Vert(G)]]]
                      ENDIF
                 ENDCASES)
         ENDCASES
      MEASURE n

   member_length: LEMMA
     FORALL (l1, l2: list[T]):
       no_repetitions?(l1) IMPLIES
        (FORALL x: member(x, l1) IMPLIES member(x, l2)) IMPLIES length(l2) >= length(l1)

   topological_sort(G): {res:
                           [loop(G) + [non_temporary_marking, list[Vert(G)]]] |
                           CASES res
                             OF IN_1(loop): NOT is_dag(G),
                                IN_2(res):
                                  LET (m, l) = res IN
                                    topperm_list(G, m)(l) ∧ length(l) = size(G) ∧
                                    FORALL (i: below(size(G))): member(node(G)(i), l)
                             ENDCASES} =
       IF (size(G) = 0) THEN IN_2(empty_marking, null)
       ELSE topological_sort_aux(G)(size(G) - 1, empty_marking, null)
       ENDIF

  % % -------------------------------------------------------------------------- %
  % % Topological ordering theorem                                               %
  % % -------------------------------------------------------------------------- %

  %  topological_ordering(G : dag): TYPE =
  %        {f: (bijective?[(vert(G)), below(size(G))]) |
  %           FORALL (x, y: (vert(G))): edge?(G)(x, y) IMPLIES f(x) < f(y)}

  %  topological_sort_exists: THEOREM
  %    FORALL (G: dag): EXISTS (f: topological_ordering(G)): TRUE


END c_topological_sort


c_topological_sort_example: THEORY
BEGIN

   IMPORTING c_topological_sort[nat]

   G1: c_digraph = (# data:= (:0, 1, 2, 3, 4, 5, 6, 7, 8:),
                adjs := (:
		        (:1:),       %0
			(: :),       %1
			(:0, 3, 4:), %2
			(:0, 7, 8:), %3
			(:1:),       %4
			(: :),       %5
			(:1:),       %6
			(:8:),       %7
			(:1:)        %8
		:) #)

   %<PVSio> topological_sort(G1)`2;
   %==>
   %(: 2, 3, 0, 4, 5, 6, 7, 8, 1 :)


END c_topological_sort_example
