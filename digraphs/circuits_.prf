(circuits_
 (IMP_walks__TCC1 0
  (IMP_walks__TCC1-1 nil 3656949234
   ("" (use "concretedigraph_implements_abstractdigraph") nil nil) nil
   nil
   (IMP_walks_ assuming
    "walks_[circuits_.T, circuits_.ConcreteDigraph, circuits_.vert, circuits_.edges, circuits_.size, circuits_.make].walks_"
    "concretedigraph_implements_abstractdigraph: ASSUMPTION digraphs_abs[walks_.T, walks_.ConcreteDigraph, walks_.vert, walks_.edges, walks_.size, walks_.make].correct_implementation")))
 (pre_circuit?_TCC1 0
  (pre_circuit?_TCC1-1 nil 3560614114 ("" (subtype-tcc) nil nil)
   ((is_finite const-decl "bool" finite_sets nil)
    (verts_in? const-decl "bool" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (edge? const-decl "bool" digraphs_ nil)
    (walk? const-decl "bool" walks_ nil))
   nil (pre_circuit? subtype "0" "below[length(w)]")))
 (pre_circuit?_TCC2 0
  (pre_circuit?_TCC2-1 nil 3560614114 ("" (subtype-tcc) nil nil)
   ((is_finite const-decl "bool" finite_sets nil)
    (verts_in? const-decl "bool" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (edge? const-decl "bool" digraphs_ nil)
    (walk? const-decl "bool" walks_ nil))
   nil
   (pre_circuit? subtype "(number_fields.-)(length(circuits_.w), 1)"
    "below[length(w)]")))
 (circuit_at?_TCC1 0
  (circuit_at?_TCC1-1 nil 3660326626 ("" (subtype-tcc) nil nil)
   ((is_finite const-decl "bool" finite_sets nil)
    (verts_in? const-decl "bool" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (edge? const-decl "bool" digraphs_ nil)
    (walk? const-decl "bool" walks_ nil))
   nil (circuit_at? subtype "0" "below[length(w)]")))
 (eq_circuit?_TCC1 0
  (eq_circuit?_TCC1-1 nil 3563142575 ("" (subtype-tcc) nil nil)
   ((prewalk type-eq-decl nil walks_ nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil)
    (is_finite const-decl "bool" finite_sets nil)
    (verts_in? const-decl "bool" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (edge? const-decl "bool" digraphs_ nil)
    (walk? const-decl "bool" walks_ nil)
    (rest const-decl "finseq" seq_extras structures))
   nil
   (eq_circuit? subtype "seq_extras[circuits_.T].rest(circuits_.w)"
    "prewalk[T, ConcreteDigraph, vert, edges, size, make]")))
 (eq_circuit?_TCC2 0
  (eq_circuit?_TCC2-1 nil 3563142575 ("" (subtype-tcc) nil nil)
   ((prewalk type-eq-decl nil walks_ nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil)
    (is_finite const-decl "bool" finite_sets nil)
    (verts_in? const-decl "bool" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (edge? const-decl "bool" digraphs_ nil)
    (walk? const-decl "bool" walks_ nil)
    (rest const-decl "finseq" seq_extras structures))
   nil
   (eq_circuit? subtype "seq_extras[circuits_.T].rest(circuits_.w1)"
    "prewalk[T, ConcreteDigraph, vert, edges, size, make]")))
 (eq_circuit_length 0
  (eq_circuit_length-1 nil 3579518251
   ("" (skeep)
    (("" (expand "eq_circuit?")
      (("" (flatten)
        (("" (lemma "eq_prewalk_length")
          (("" (inst -1 "rest(w1)" "rest(w2)")
            (("" (assert)
              (("" (hide -4)
                (("" (expand "circuit?")
                  (("" (flatten)
                    (("" (hide -2 -4)
                      (("" (expand* "rest" "^" "min")
                        (("" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((is_finite const-decl "bool" finite_sets nil)
    (eq_prewalk_length formula-decl nil walks_ nil)
    (^ const-decl "finseq" finite_sequences nil)
    (rest const-decl "finseq" seq_extras structures)
    (prewalk type-eq-decl nil walks_ nil)
    (finseq type-eq-decl nil finite_sequences nil))
   shostak))
 (eq_circuit_reflexive 0
  (eq_circuit_reflexive-1 nil 3582581994
   ("" (skeep)
    (("" (expand "eq_circuit?")
      (("" (assert)
        (("" (hide -1)
          (("" (lemma "eq_relation_eq_prewalk")
            (("" (expand "equivalence?")
              (("" (flatten)
                (("" (hide -2 -3)
                  (("" (expand "reflexive?")
                    (("" (inst -1 "rest(w)") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks_ nil)
    (rest const-decl "finseq" seq_extras structures)
    (eq_relation_eq_prewalk formula-decl nil walks_ nil)
    (is_finite const-decl "bool" finite_sets nil))
   shostak))
 (eq_circuit_symmetric 0
  (eq_circuit_symmetric-1 nil 3563539116
   ("" (skeep)
    (("" (expand "eq_circuit?")
      (("" (flatten)
        (("" (assert)
          (("" (hide -1 -2)
            (("" (lemma "eq_relation_eq_prewalk")
              (("" (expand "equivalence?")
                (("" (flatten)
                  (("" (hide -1 -3)
                    (("" (expand "symmetric?")
                      (("" (inst -1 "rest(w1)" "rest(w2)")
                        (("" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((is_finite const-decl "bool" finite_sets nil)
    (eq_relation_eq_prewalk formula-decl nil walks_ nil)
    (rest const-decl "finseq" seq_extras structures)
    (prewalk type-eq-decl nil walks_ nil)
    (finseq type-eq-decl nil finite_sequences nil))
   shostak))
 (loop_is_circuit 0
  (loop_is_circuit-1 nil 3560698741
   ("" (skeep)
    (("" (expand* "loop?" "circuit?")
      (("" (flatten) (("" (assert) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (equal_rest_equal_circuit 0
  (equal_rest_equal_circuit-1 nil 3578694276
   ("" (skeep)
    (("" (decompose-equality 1)
      (("1" (hide -1 -2) (("1" (grind) nil nil)) nil)
       ("2" (decompose-equality 1)
        (("2" (typepred "x!1")
          (("2" (expand* "circuit?" "pre_circuit?" "finseq_appl")
            (("2" (flatten)
              (("2" (hide -2 -5)
                (("2" (expand "rest")
                  (("2" (expand "^")
                    (("2" (grind)
                      (("2" (decompose-equality -6)
                        (("2" (case "x!1 = 0")
                          (("1" (inst -2 " w2`length - 2")
                            (("1" (assert) nil nil)) nil)
                           ("2" (hide -3 -5)
                            (("2" (inst -1 "x!1 - 1")
                              (("1" (assert) nil nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (rest const-decl "finseq" seq_extras structures)
    (^ const-decl "finseq" finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks_ nil)
    (is_finite const-decl "bool" finite_sets nil))
   shostak))
 (equal_eq_circuit 0
  (equal_eq_circuit-1 nil 3578330066
   ("" (lemma "equal_rest_equal_circuit")
    (("" (skeep)
      (("" (inst -1 "G" "w1" "w2")
        (("" (expand "eq_circuit?")
          (("" (flatten) (("" (hide -4) (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prewalk type-eq-decl nil walks_ nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finseq type-eq-decl nil finite_sequences nil))
   shostak))
 (circuit_equal_fisrt_TCC1 0
  (circuit_equal_fisrt_TCC1-1 nil 3578740546 ("" (subtype-tcc) nil nil)
   ((prewalk type-eq-decl nil walks_ nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil)
    (is_finite const-decl "bool" finite_sets nil)
    (verts_in? const-decl "bool" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (edge? const-decl "bool" digraphs_ nil)
    (walk? const-decl "bool" walks_ nil)
    (rest const-decl "finseq" seq_extras structures)
    (O const-decl "finseq" finite_sequences nil))
   nil
   (circuit_equal_fisrt subtype
    "finite_sequences[circuits_.T].o(circuits_.w1, seq_extras[circuits_.T].rest(circuits_.w2))"
    "prewalk[T, ConcreteDigraph, vert, edges, size, make]")))
 (circuit_equal_fisrt_TCC2 0
  (circuit_equal_fisrt_TCC2-1 nil 3578740546 ("" (subtype-tcc) nil nil)
   ((is_finite const-decl "bool" finite_sets nil)
    (verts_in? const-decl "bool" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (edge? const-decl "bool" digraphs_ nil)
    (walk? const-decl "bool" walks_ nil)
    (rest const-decl "finseq" seq_extras structures)
    (O const-decl "finseq" finite_sequences nil))
   nil (circuit_equal_fisrt subtype "0" "below[w1`length]")))
 (circuit_equal_fisrt_TCC3 0
  (circuit_equal_fisrt_TCC3-1 nil 3578740546 ("" (subtype-tcc) nil nil)
   ((is_finite const-decl "bool" finite_sets nil)
    (verts_in? const-decl "bool" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (edge? const-decl "bool" digraphs_ nil)
    (walk? const-decl "bool" walks_ nil)
    (rest const-decl "finseq" seq_extras structures)
    (O const-decl "finseq" finite_sequences nil))
   nil (circuit_equal_fisrt subtype "0" "below[w2`length]")))
 (circuit_equal_fisrt 0
  (circuit_equal_fisrt-1 nil 3578740547
   ("" (skeep)
    (("" (expand "circuit?")
      (("" (expand "pre_circuit?")
        (("" (flatten)
          (("" (hide -1 -4 -7)
            (("" (expand "finseq_appl")
              (("" (expand "o ")
                (("" (case "rest(w2)`length > 0")
                  (("1" (assert)
                    (("1" (expand "rest" -6)
                      (("1" (expand* "^" "min")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-4 1))
                    (("2" (expand* "rest" "^" "min")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (^ const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (rest const-decl "finseq" seq_extras structures)
    (is_finite const-decl "bool" finite_sets nil)
    (prewalk type-eq-decl nil walks_ nil)
    (O const-decl "finseq" finite_sequences nil))
   shostak))
 (comp_circuit_inter_TCC1 0
  (comp_circuit_inter_TCC1-1 nil 3578757841 ("" (subtype-tcc) nil nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (is_finite const-decl "bool" finite_sets nil)
    (prewalk type-eq-decl nil walks_ nil)
    (rest const-decl "finseq" seq_extras structures)
    (O const-decl "finseq" finite_sequences nil))
   nil
   (comp_circuit_inter subtype
    "finite_sequences[circuits_.T].o(circuits_.w1, seq_extras[circuits_.T].rest(circuits_.w2))"
    "prewalk[T, ConcreteDigraph, vert, edges, size, make]")))
 (comp_circuit_inter 0
  (comp_circuit_inter-1 nil 3578757843
   ("" (skeep)
    (("" (expand "circuit?")
      (("" (expand "pre_circuit?")
        (("" (flatten)
          (("" (hide -1 -3)
            (("" (expand "finseq_appl")
              (("" (expand "o ")
                (("" (case "rest(w2)`length > 0")
                  (("1" (assert)
                    (("1" (hide -1)
                      (("1" (expand "rest")
                        (("1" (expand "^")
                          (("1" (expand "min")
                            (("1" (expand "nonempty?")
                              (("1"
                                (expand "empty?")
                                (("1"
                                  (inst -3 "w1`seq(0)")
                                  (("1"
                                    (expand "intersection")
                                    (("1"
                                      (expand "member")
                                      (("1"
                                        (expand "verts_of")
                                        (("1"
                                          (expand "finseq_appl")
                                          (("1"
                                            (split)
                                            (("1" (inst 1 "0") nil nil)
                                             ("2"
                                              (inst 1 "w2`length - 1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -1 2)
                    (("2" (expand "rest")
                      (("2" (expand "^")
                        (("2" (expand "min") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (verts_of const-decl "finite_set[T]" walks_ nil)
    (^ const-decl "finseq" finite_sequences nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (rest const-decl "finseq" seq_extras structures)
    (is_finite const-decl "bool" finite_sets nil)
    (prewalk type-eq-decl nil walks_ nil)
    (O const-decl "finseq" finite_sequences nil))
   shostak))
 (eq_circuit_position_TCC1 0
  (eq_circuit_position_TCC1-1 nil 3582720412 ("" (subtype-tcc) nil nil)
   ((prewalk type-eq-decl nil walks_ nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (is_finite const-decl "bool" finite_sets nil)
    (verts_in? const-decl "bool" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (edge? const-decl "bool" digraphs_ nil)
    (walk? const-decl "bool" walks_ nil)
    (rest const-decl "finseq" seq_extras structures)
    (O const-decl "finseq" finite_sequences nil)
    (reord_prewalk const-decl "prewalk" walks_ nil)
    (eq_prewalk? const-decl "bool" walks_ nil))
   nil
   (eq_circuit_position subtype
    "(number_fields.-)(length(circuits_.w1), 2)" "nat")))
 (eq_circuit_position 0
  (eq_circuit_position-1 nil 3582720425
   ("" (auto-rewrite "finseq_appl")
    (("" (skeep)
      (("" (lemma "eq_circuit_length")
        (("" (inst -1 "G" "w1" "w2")
          (("" (assert)
            (("" (expand "eq_circuit?")
              (("" (flatten)
                (("" (expand "eq_prewalk?")
                  (("" (split)
                    (("1" (case-replace "w1 = w2")
                      (("1" (hide -1 -2)
                        (("1" (expand* "circuit?" "pre_circuit?")
                          (("1" (flatten)
                            (("1" (hide -1)
                              (("1"
                                (assert)
                                (("1"
                                  (inst 1 "length(w2) - 1")
                                  (("1"
                                    (expand "^" 1 1)
                                    (("1"
                                      (rewrite "empty_o_seq")
                                      (("1"
                                        (decompose-equality 1)
                                        (("1"
                                          (expand* "^" "min")
                                          nil
                                          nil)
                                         ("2"
                                          (decompose-equality 1)
                                          (("2"
                                            (typepred "x!1")
                                            (("2"
                                              (expand "^")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (lemma "equal_rest_equal_circuit")
                          (("2" (inst -1 "G" "w1" "w2")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (expand* "reord_prewalk" "rest")
                        (("2" (expand "^" -1 4)
                          (("2" (expand "min")
                            (("2" (expand* "circuit?" "pre_circuit?")
                              (("2"
                                (flatten)
                                (("2"
                                  (hide -3 -6)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (case "i > length(w1) - 1")
                                      (("1"
                                        (expand "^" -2 3)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (rewrite "empty_o_seq")
                                            (("1"
                                              (case-replace
                                               "(w1 ^ (1, w1`length - 1)) ^ (0, i - 1) = w1 ^ (1, w1`length - 1)")
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (inst
                                                   1
                                                   "length(w1) - 1")
                                                  (("1"
                                                    (expand "^" 1 1)
                                                    (("1"
                                                      (rewrite
                                                       "empty_o_seq")
                                                      (("1"
                                                        (decompose-equality
                                                         1)
                                                        (("1"
                                                          (hide -2)
                                                          (("1"
                                                            (expand*
                                                             "^"
                                                             "min")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (decompose-equality
                                                           1)
                                                          (("2"
                                                            (typepred
                                                             "x!1")
                                                            (("2"
                                                              (expand
                                                               "^"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "^"
                                                                 -3)
                                                                (("2"
                                                                  (decompose-equality
                                                                   -3)
                                                                  (("1"
                                                                    (case-replace
                                                                     "x!1 = 0")
                                                                    (("1"
                                                                      (inst
                                                                       -2
                                                                       "length(w2) - 2")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "min")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -1
                                                                       "x!1 - 1")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "min")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "min")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -2 -3 -4 -6 -7 2)
                                                (("2"
                                                  (decompose-equality)
                                                  (("1"
                                                    (expand* "^" "min")
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (decompose-equality)
                                                    (("2"
                                                      (expand*
                                                       "^"
                                                       "min")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case-replace
                                         "(w1 ^ (1, w1`length - 1)) ^ (i, w1`length - 2) =
                                w1 ^ (i + 1, w1`length - 1)")
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (case-replace
                                             "(w1 ^ (1, w1`length - 1)) ^ (0, i - 1) = w1 ^ (1, i)")
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (case
                                                 "i = length(w1) - 1")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (expand "^" -2 2)
                                                    (("1"
                                                      (rewrite
                                                       "empty_o_seq")
                                                      (("1"
                                                        (inst 2 "i")
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (expand
                                                             "^"
                                                             2
                                                             1)
                                                            (("1"
                                                              (rewrite
                                                               "empty_o_seq")
                                                              (("1"
                                                                (hide
                                                                 1)
                                                                (("1"
                                                                  (decompose-equality
                                                                   1)
                                                                  (("1"
                                                                    (hide
                                                                     -1)
                                                                    (("1"
                                                                      (expand*
                                                                       "^"
                                                                       "min")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (decompose-equality
                                                                     1)
                                                                    (("2"
                                                                      (expand*
                                                                       "^"
                                                                       "min")
                                                                      (("2"
                                                                        (decompose-equality
                                                                         -1)
                                                                        (("1"
                                                                          (typepred
                                                                           "x!1")
                                                                          (("1"
                                                                            (case
                                                                             "x!1 = 0")
                                                                            (("1"
                                                                              (inst
                                                                               -3
                                                                               "length(w2) - 2")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "min")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (inst
                                                                               -2
                                                                               "x!1 - 1")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "min")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "min")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst 3 "i")
                                                  (("1"
                                                    (decompose-equality
                                                     3)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (expand*
                                                         "o"
                                                         "^"
                                                         "min"
                                                         "empty_seq")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (decompose-equality
                                                       1)
                                                      (("2"
                                                        (typepred
                                                         "x!1")
                                                        (("2"
                                                          (expand
                                                           "o"
                                                           -2)
                                                          (("2"
                                                            (decompose-equality)
                                                            (("2"
                                                              (hide -1)
                                                              (("2"
                                                                (decompose-equality)
                                                                (("1"
                                                                  (expand
                                                                   "^"
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "min")
                                                                    (("1"
                                                                      (case-replace
                                                                       "x!1 = 0")
                                                                      (("1"
                                                                        (expand*
                                                                         "o"
                                                                         "^"
                                                                         "min"
                                                                         "empty_seq")
                                                                        (("1"
                                                                          (inst
                                                                           -2
                                                                           "length(w2) - 2")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (expand*
                                                                             "^"
                                                                             "min")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (inst
                                                                         -1
                                                                         "x!1 - 1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand*
                                                                             "o"
                                                                             "^"
                                                                             "min"
                                                                             "empty_seq")
                                                                            (("1"
                                                                              (lift-if)
                                                                              (("1"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           3)
                                                                          (("2"
                                                                            (expand*
                                                                             "^"
                                                                             "min")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -2
                                                                   2)
                                                                  (("2"
                                                                    (expand*
                                                                     "^"
                                                                     "min"
                                                                     "empty_seq")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -1 3)
                                              (("2"
                                                (decompose-equality 1)
                                                (("1"
                                                  (expand*
                                                   "^"
                                                   "min"
                                                   "empty_seq")
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (decompose-equality
                                                   1)
                                                  (("2"
                                                    (expand*
                                                     "^"
                                                     "min"
                                                     "empty_seq")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1 3)
                                          (("2"
                                            (decompose-equality 1)
                                            (("1"
                                              (expand*
                                               "^"
                                               "min"
                                               "empty_seq")
                                              (("1"
                                                (lift-if)
                                                (("1"
                                                  (ground)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (decompose-equality 1)
                                              (("2"
                                                (expand*
                                                 "^"
                                                 "min"
                                                 "empty_seq")
                                                (("2"
                                                  (lift-if)
                                                  (("2"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (is_finite const-decl "bool" finite_sets nil)
    (prewalk type-eq-decl nil walks_ nil)
    (eq_prewalk? const-decl "bool" walks_ nil)
    (empty_o_seq formula-decl nil seq_extras structures)
    (^ const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (rest const-decl "finseq" seq_extras structures)
    (reord_prewalk const-decl "prewalk" walks_ nil)
    (O const-decl "finseq" finite_sequences nil)
    (empty_seq const-decl "finseq" finite_sequences nil))
   shostak))
 (eq_circuit_edges 0
  (eq_circuit_edges-1 nil 3581720334
   ("" (auto-rewrite "finseq_appl")
    (("" (skeep)
      (("" (lemma "eq_circuit_length")
        (("" (inst -1 "G" "w1" "w2")
          (("" (assert)
            (("" (lemma "eq_circuit_position")
              (("" (inst -1 "G" "w1" "w2")
                (("" (assert)
                  (("" (skeep)
                    ((""
                      (expand* "eq_circuit?" "circuit?" "pre_circuit?")
                      (("" (flatten)
                        (("" (assert)
                          (("" (hide -3 -6 -9)
                            (("" (case-replace "w1 = w2")
                              ((""
                                (case
                                 "i > length(w1) - 1 OR i = length(w1) - 1")
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (split)
                                    (("1"
                                      (expand "^" -2 1)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (replaces -1)
                                      (("2"
                                        (expand "o" -1)
                                        (("2"
                                          (decompose-equality)
                                          (("2"
                                            (decompose-equality)
                                            (("2"
                                              (expand*
                                               "^"
                                               "min"
                                               "empty_seq")
                                              (("2"
                                                (decompose-equality -1)
                                                (("2"
                                                  (decompose-equality
                                                   -1)
                                                  (("2"
                                                    (inst -1 "x!1")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (decompose-equality 4)
                                    (("2"
                                      (iff)
                                      (("2"
                                        (prop)
                                        (("1"
                                          (expand "edges_of")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (typepred "i!1")
                                                (("1"
                                                  (case "i!1 < i")
                                                  (("1"
                                                    (inst
                                                     1
                                                     "length(w1) - i + i!1 - 1")
                                                    (("1"
                                                      (expand*
                                                       "^"
                                                       "min"
                                                       "o")
                                                      (("1"
                                                        (decompose-equality
                                                         -5)
                                                        (("1"
                                                          (decompose-equality
                                                           -1)
                                                          (("1"
                                                            (inst-cp
                                                             -1
                                                             "length(w1) - i + i!1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "length(w1) - i + i!1 - 1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand*
                                                     "^"
                                                     "min"
                                                     "o")
                                                    (("2"
                                                      (decompose-equality
                                                       -4)
                                                      (("2"
                                                        (decompose-equality
                                                         -1)
                                                        (("2"
                                                          (inst
                                                           2
                                                           "i!1 - i")
                                                          (("1"
                                                            (inst-cp
                                                             -1
                                                             "i!1 - i")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "i!1 - i + 1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "edges_of")
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (typepred "i!1")
                                                (("2"
                                                  (expand*
                                                   "^"
                                                   "min"
                                                   "o")
                                                  (("2"
                                                    (decompose-equality
                                                     -4)
                                                    (("2"
                                                      (decompose-equality
                                                       -1)
                                                      (("2"
                                                        (case
                                                         "i!1 < w1`length - i - 1")
                                                        (("1"
                                                          (inst-cp
                                                           -2
                                                           "i!1")
                                                          (("1"
                                                            (inst
                                                             -2
                                                             "i!1 + 1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 1
                                                                 "i!1 + i")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst-cp
                                                           -1
                                                           "i!1")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "i!1 + 1")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (case-replace
                                                                 "i!1 = w1`length - 1 - i")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (inst
                                                                       1
                                                                       "0")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst
                                                                     3
                                                                     "1 - w1`length + i!1 + i")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq type-eq-decl nil finite_sequences nil)
    (is_finite const-decl "bool" finite_sets nil)
    (prewalk type-eq-decl nil walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil)
    (edges_of const-decl "finite_set[edgetype[T]]" walks_ nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (edgetype type-eq-decl nil digraphs_utils nil))
   shostak))
 (commuted_circuit_TCC1 0
  (commuted_circuit_TCC1-1 nil 3582567742 ("" (subtype-tcc) nil nil)
   ((is_finite const-decl "bool" finite_sets nil)
    (verts_in? const-decl "bool" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (edge? const-decl "bool" digraphs_ nil)
    (walk? const-decl "bool" walks_ nil))
   nil
   (commuted_circuit subtype "(number_fields.-)(circuits_.w`length, 1)"
    "nat")))
 (commuted_circuit_TCC2 0
  (commuted_circuit_TCC2-1 nil 3582567742 ("" (subtype-tcc) nil nil)
   ((prewalk type-eq-decl nil walks_ nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (is_finite const-decl "bool" finite_sets nil)
    (verts_in? const-decl "bool" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (edge? const-decl "bool" digraphs_ nil)
    (walk? const-decl "bool" walks_ nil)
    (^ const-decl "finseq" finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil))
   nil
   (commuted_circuit subtype
    "finite_sequences[circuits_.T].o(finite_sequences[circuits_.T].^(circuits_.w, (circuits_.i, (number_fields.-)(circuits_.w`length, 1))), finite_sequences[circuits_.T].^(circuits_.w, (1, circuits_.i)))"
    "prewalk[T, ConcreteDigraph, vert, edges, size, make]")))
 (commuted_circuit 0
  (commuted_circuit-1 nil 3582569158
   ("" (auto-rewrite "finseq_appl")
    (("" (skeep)
      (("" (typepred "i")
        (("" (case "i = 0 OR i = w`length - 1")
          (("1" (split)
            (("1" (replaces -1)
              (("1" (hide -1)
                (("1" (expand "^" 1 2)
                  (("1" (rewrite "seq_o_empty")
                    (("1" (case-replace "w ^ (0, w`length - 1) = w")
                      (("1" (hide -1 2)
                        (("1" (decompose-equality)
                          (("1" (expand* "^" "min") nil nil)
                           ("2" (decompose-equality)
                            (("2" (typepred "x!1")
                              (("2" (expand* "^" "min") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (replaces -1)
              (("2" (hide -1)
                (("2"
                  (case-replace
                   "w ^ (w`length - 1, w`length - 1) o w ^ (1, w`length - 1) = w")
                  (("2" (hide 2)
                    (("2" (expand* "circuit?" "pre_circuit?")
                      (("2" (flatten)
                        (("2" (hide -1)
                          (("2" (decompose-equality 1)
                            (("1" (expand* "o" "^" "min" "empty_seq")
                              nil nil)
                             ("2" (decompose-equality 1)
                              (("2"
                                (typepred "x!1")
                                (("2"
                                  (expand* "o" "^" "min" "empty_seq")
                                  (("2"
                                    (lift-if)
                                    (("2" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (expand "circuit?")
              (("2" (flatten)
                (("2" (split)
                  (("1" (expand "pre_circuit?")
                    (("1" (flatten)
                      (("1" (split)
                        (("1" (lemma "walk_o")
                          (("1"
                            (inst -1 "G" "w ^ (i, w`length - 1)"
                             "w ^ (0, i)")
                            (("1" (rewrite "walk?_caret")
                              (("1"
                                (rewrite "walk?_caret")
                                (("1"
                                  (expand "^" -1 (1 2 3 7))
                                  (("1"
                                    (expand "min")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case-replace
                                         "w ^ (0, i) ^ (1, i) = w ^ (1, i)")
                                        (("1"
                                          (hide -1 -3 -4 2)
                                          (("1"
                                            (decompose-equality)
                                            (("1"
                                              (expand*
                                               "^"
                                               "min"
                                               "empty_seq")
                                              nil
                                              nil)
                                             ("2"
                                              (decompose-equality)
                                              (("2"
                                                (typepred "x!1")
                                                (("2"
                                                  (expand*
                                                   "^"
                                                   "min"
                                                   "empty_seq")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (expand* "^" "min")
                                (("2" (assert) nil nil))
                                nil))
                              nil)
                             ("3" (hide-all-but 1)
                              (("3"
                                (expand* "^" "min")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (hide -2 -3)
                            (("2" (expand "^" 1 (5 6))
                              (("2"
                                (expand "o" 1 3)
                                (("2"
                                  (expand "min")
                                  (("2"
                                    (expand "o")
                                    (("2"
                                      (expand "^")
                                      (("2"
                                        (expand "min")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide -2)
                    (("2" (expand "o")
                      (("2" (expand* "^" "min")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((walk?_caret formula-decl nil walks_ nil)
    (walk_o formula-decl nil walks_ nil)
    (O const-decl "finseq" finite_sequences nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (^ const-decl "finseq" finite_sequences nil)
    (seq_o_empty formula-decl nil seq_extras structures)
    (finseq type-eq-decl nil finite_sequences nil)
    (is_finite const-decl "bool" finite_sets nil)
    (prewalk type-eq-decl nil walks_ nil))
   shostak))
 (commuted_circuit_is_eq 0
  (commuted_circuit_is_eq-1 nil 3582567599
   ("" (auto-rewrite "finseq_appl")
    (("" (skeep)
      (("" (expand "eq_circuit?")
        (("" (prop)
          (("1" (rewrite "commuted_circuit") nil nil)
           ("2" (expand "eq_prewalk?")
            (("2" (flatten)
              (("2" (typepred "i")
                (("2" (case "i = 0 or i = length(w) - 1")
                  (("1" (split)
                    (("1" (replaces -1)
                      (("1" (hide -1 2)
                        (("1" (expand "circuit?")
                          (("1" (flatten)
                            (("1" (hide -1)
                              (("1"
                                (decompose-equality)
                                (("1"
                                  (expand*
                                   "rest"
                                   "o"
                                   "^"
                                   "min"
                                   "empty_seq")
                                  nil
                                  nil)
                                 ("2"
                                  (decompose-equality)
                                  (("2"
                                    (typepred "x!1")
                                    (("2"
                                      (expand*
                                       "rest"
                                       "o"
                                       "^"
                                       "min"
                                       "empty_seq")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replaces -1)
                      (("2" (expand "circuit?")
                        (("2" (flatten)
                          (("2" (hide -1 -2 2)
                            (("2" (decompose-equality)
                              (("1"
                                (expand*
                                 "rest"
                                 "o"
                                 "^"
                                 "min"
                                 "empty_seq")
                                nil
                                nil)
                               ("2"
                                (decompose-equality)
                                (("2"
                                  (expand*
                                   "rest"
                                   "o"
                                   "^"
                                   "min"
                                   "empty_seq")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (hide 3)
                      (("2" (expand "circuit?")
                        (("2" (flatten)
                          (("2" (hide -2)
                            (("2" (inst 3 "i")
                              (("1"
                                (expand "reord_prewalk")
                                (("1"
                                  (expand "rest")
                                  (("1"
                                    (expand "o" 3 1)
                                    (("1"
                                      (expand "^" 3 (1 2))
                                      (("1"
                                        (expand "min")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "o" 3 2)
                                            (("1"
                                              (expand "^" 3 (4 5))
                                              (("1"
                                                (expand "min")
                                                (("1"
                                                  (expand "^" 3 6)
                                                  (("1"
                                                    (expand "min")
                                                    (("1"
                                                      (decompose-equality
                                                       3)
                                                      (("1"
                                                        (expand*
                                                         "o"
                                                         "^"
                                                         "min"
                                                         "empty_seq")
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (decompose-equality
                                                         1)
                                                        (("2"
                                                          (typepred
                                                           "x!1")
                                                          (("2"
                                                            (expand*
                                                             "o"
                                                             "^"
                                                             "min"
                                                             "empty_seq")
                                                            (("2"
                                                              (lift-if)
                                                              (("2"
                                                                (prop)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((eq_prewalk? const-decl "bool" walks_ nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (rest const-decl "finseq" seq_extras structures)
    (O const-decl "finseq" finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil)
    (reord_prewalk const-decl "prewalk" walks_ nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (is_finite const-decl "bool" finite_sets nil)
    (prewalk type-eq-decl nil walks_ nil))
   shostak)))

